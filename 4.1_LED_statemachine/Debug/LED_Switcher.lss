
LED_Switcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002748  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  00002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002002c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002002c  2**0
                  CONTENTS
  4 .bss          00000080  2000002c  00002774  0002002c  2**2
                  ALLOC
  5 .stack        00010004  200000ac  000027f4  0002002c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001edac  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000028e7  00000000  00000000  0003ee5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009a68  00000000  00000000  00041746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001100  00000000  00000000  0004b1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fc8  00000000  00000000  0004c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032679  00000000  00000000  0004d276  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000130a9  00000000  00000000  0007f8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00115e90  00000000  00000000  00092998  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004714  00000000  00000000  001a8828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 00 01 20 a9 04 00 00 45 05 00 00 45 05 00 00     ... ....E...E...
      10:	45 05 00 00 45 05 00 00 45 05 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 05 00 00 45 05 00 00 00 00 00 00 45 05 00 00     E...E.......E...
      3c:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      4c:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      5c:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      6c:	19 18 00 00 45 05 00 00 45 05 00 00 45 05 00 00     ....E...E...E...
      7c:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      8c:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      9c:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      ac:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      bc:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      cc:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
      dc:	45 05 00 00 45 05 00 00 45 05 00 00 00 00 00 00     E...E...E.......
	...
      f4:	e9 15 00 00 45 05 00 00 45 05 00 00 45 05 00 00     ....E...E...E...
     104:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     114:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     124:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     134:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     144:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     154:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     164:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     174:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     184:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     194:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     1a4:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     1b4:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     1c4:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     1d4:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     1e4:	45 05 00 00 45 05 00 00 61 23 00 00 45 05 00 00     E...E...a#..E...
     1f4:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     204:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     214:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     224:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     234:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     244:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...
     254:	45 05 00 00 45 05 00 00 45 05 00 00 45 05 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000002c 	.word	0x2000002c
     280:	00000000 	.word	0x00000000
     284:	00002748 	.word	0x00002748

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002748 	.word	0x00002748
     2c4:	20000030 	.word	0x20000030
     2c8:	00002748 	.word	0x00002748
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000cc5 	.word	0x00000cc5

000002e0 <HandleEvent>:
#include <custom_functions.h>

bool HandleEvent(bool bit_entered){
     2e0:	b480      	push	{r7}
     2e2:	b087      	sub	sp, #28
     2e4:	af00      	add	r7, sp, #0
     2e6:	4603      	mov	r3, r0
     2e8:	71fb      	strb	r3, [r7, #7]
	
	static char CurrentState = 0;
	static bool output = 0; //if 1 LED on, if 0 LED off
	
	bool on_pattern[] = {0,1,0,1,1};
     2ea:	4a48      	ldr	r2, [pc, #288]	; (40c <HandleEvent+0x12c>)
     2ec:	f107 0310 	add.w	r3, r7, #16
     2f0:	e892 0003 	ldmia.w	r2, {r0, r1}
     2f4:	6018      	str	r0, [r3, #0]
     2f6:	3304      	adds	r3, #4
     2f8:	7019      	strb	r1, [r3, #0]
	bool off_pattern[] = {0,1,1,0,1};
     2fa:	4a45      	ldr	r2, [pc, #276]	; (410 <HandleEvent+0x130>)
     2fc:	f107 0308 	add.w	r3, r7, #8
     300:	e892 0003 	ldmia.w	r2, {r0, r1}
     304:	6018      	str	r0, [r3, #0]
     306:	3304      	adds	r3, #4
     308:	7019      	strb	r1, [r3, #0]
	
	switch (CurrentState){
     30a:	4b42      	ldr	r3, [pc, #264]	; (414 <HandleEvent+0x134>)
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	2b06      	cmp	r3, #6
     310:	d873      	bhi.n	3fa <HandleEvent+0x11a>
     312:	a201      	add	r2, pc, #4	; (adr r2, 318 <HandleEvent+0x38>)
     314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     318:	00000335 	.word	0x00000335
     31c:	0000034d 	.word	0x0000034d
     320:	00000365 	.word	0x00000365
     324:	00000385 	.word	0x00000385
     328:	0000039d 	.word	0x0000039d
     32c:	000003bb 	.word	0x000003bb
     330:	000003d7 	.word	0x000003d7
		case 0:
		if(bit_entered == on_pattern[0]){
     334:	7c3b      	ldrb	r3, [r7, #16]
     336:	79fa      	ldrb	r2, [r7, #7]
     338:	429a      	cmp	r2, r3
     33a:	d103      	bne.n	344 <HandleEvent+0x64>
			CurrentState = 1;
     33c:	4b35      	ldr	r3, [pc, #212]	; (414 <HandleEvent+0x134>)
     33e:	2201      	movs	r2, #1
     340:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 0;
		}
		break;
     342:	e05a      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 0;
     344:	4b33      	ldr	r3, [pc, #204]	; (414 <HandleEvent+0x134>)
     346:	2200      	movs	r2, #0
     348:	701a      	strb	r2, [r3, #0]
		break;
     34a:	e056      	b.n	3fa <HandleEvent+0x11a>
		case 1:
		if(bit_entered == on_pattern[1]){
     34c:	7c7b      	ldrb	r3, [r7, #17]
     34e:	79fa      	ldrb	r2, [r7, #7]
     350:	429a      	cmp	r2, r3
     352:	d103      	bne.n	35c <HandleEvent+0x7c>
			CurrentState = 2;
     354:	4b2f      	ldr	r3, [pc, #188]	; (414 <HandleEvent+0x134>)
     356:	2202      	movs	r2, #2
     358:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 1;
		}
		break;
     35a:	e04e      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 1;
     35c:	4b2d      	ldr	r3, [pc, #180]	; (414 <HandleEvent+0x134>)
     35e:	2201      	movs	r2, #1
     360:	701a      	strb	r2, [r3, #0]
		break;
     362:	e04a      	b.n	3fa <HandleEvent+0x11a>
		case 2:
		if(bit_entered == on_pattern[2]){
     364:	7cbb      	ldrb	r3, [r7, #18]
     366:	79fa      	ldrb	r2, [r7, #7]
     368:	429a      	cmp	r2, r3
     36a:	d103      	bne.n	374 <HandleEvent+0x94>
			CurrentState = 3;
     36c:	4b29      	ldr	r3, [pc, #164]	; (414 <HandleEvent+0x134>)
     36e:	2203      	movs	r2, #3
     370:	701a      	strb	r2, [r3, #0]
		}
		else if(bit_entered == off_pattern[2]){
			CurrentState = 5;
		}
		break;
     372:	e041      	b.n	3f8 <HandleEvent+0x118>
		else if(bit_entered == off_pattern[2]){
     374:	7abb      	ldrb	r3, [r7, #10]
     376:	79fa      	ldrb	r2, [r7, #7]
     378:	429a      	cmp	r2, r3
     37a:	d13d      	bne.n	3f8 <HandleEvent+0x118>
			CurrentState = 5;
     37c:	4b25      	ldr	r3, [pc, #148]	; (414 <HandleEvent+0x134>)
     37e:	2205      	movs	r2, #5
     380:	701a      	strb	r2, [r3, #0]
		break;
     382:	e039      	b.n	3f8 <HandleEvent+0x118>
		case 3:
		if(bit_entered == on_pattern[3]){
     384:	7cfb      	ldrb	r3, [r7, #19]
     386:	79fa      	ldrb	r2, [r7, #7]
     388:	429a      	cmp	r2, r3
     38a:	d103      	bne.n	394 <HandleEvent+0xb4>
			CurrentState = 4;
     38c:	4b21      	ldr	r3, [pc, #132]	; (414 <HandleEvent+0x134>)
     38e:	2204      	movs	r2, #4
     390:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 1;
		}
		break;
     392:	e032      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 1;
     394:	4b1f      	ldr	r3, [pc, #124]	; (414 <HandleEvent+0x134>)
     396:	2201      	movs	r2, #1
     398:	701a      	strb	r2, [r3, #0]
		break;
     39a:	e02e      	b.n	3fa <HandleEvent+0x11a>
		case 4:
		if(bit_entered == on_pattern[4]){
     39c:	7d3b      	ldrb	r3, [r7, #20]
     39e:	79fa      	ldrb	r2, [r7, #7]
     3a0:	429a      	cmp	r2, r3
     3a2:	d106      	bne.n	3b2 <HandleEvent+0xd2>
			CurrentState = 5;
     3a4:	4b1b      	ldr	r3, [pc, #108]	; (414 <HandleEvent+0x134>)
     3a6:	2205      	movs	r2, #5
     3a8:	701a      	strb	r2, [r3, #0]
			output = 1;
     3aa:	4b1b      	ldr	r3, [pc, #108]	; (418 <HandleEvent+0x138>)
     3ac:	2201      	movs	r2, #1
     3ae:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 3;
		}
		break;
     3b0:	e023      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 3;
     3b2:	4b18      	ldr	r3, [pc, #96]	; (414 <HandleEvent+0x134>)
     3b4:	2203      	movs	r2, #3
     3b6:	701a      	strb	r2, [r3, #0]
		break;
     3b8:	e01f      	b.n	3fa <HandleEvent+0x11a>
		case 5:
		if(bit_entered == 0){
     3ba:	79fb      	ldrb	r3, [r7, #7]
     3bc:	f083 0301 	eor.w	r3, r3, #1
     3c0:	b2db      	uxtb	r3, r3
     3c2:	2b00      	cmp	r3, #0
     3c4:	d003      	beq.n	3ce <HandleEvent+0xee>
			CurrentState = 6;
     3c6:	4b13      	ldr	r3, [pc, #76]	; (414 <HandleEvent+0x134>)
     3c8:	2206      	movs	r2, #6
     3ca:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 0;
		}
		break;
     3cc:	e015      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 0;
     3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <HandleEvent+0x134>)
     3d0:	2200      	movs	r2, #0
     3d2:	701a      	strb	r2, [r3, #0]
		break;
     3d4:	e011      	b.n	3fa <HandleEvent+0x11a>
		case 6:
		if(bit_entered == 0){
     3d6:	79fb      	ldrb	r3, [r7, #7]
     3d8:	f083 0301 	eor.w	r3, r3, #1
     3dc:	b2db      	uxtb	r3, r3
     3de:	2b00      	cmp	r3, #0
     3e0:	d003      	beq.n	3ea <HandleEvent+0x10a>
			CurrentState = 1;
     3e2:	4b0c      	ldr	r3, [pc, #48]	; (414 <HandleEvent+0x134>)
     3e4:	2201      	movs	r2, #1
     3e6:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 2;
			output = 0;
		}
		break;
     3e8:	e007      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 2;
     3ea:	4b0a      	ldr	r3, [pc, #40]	; (414 <HandleEvent+0x134>)
     3ec:	2202      	movs	r2, #2
     3ee:	701a      	strb	r2, [r3, #0]
			output = 0;
     3f0:	4b09      	ldr	r3, [pc, #36]	; (418 <HandleEvent+0x138>)
     3f2:	2200      	movs	r2, #0
     3f4:	701a      	strb	r2, [r3, #0]
		break;
     3f6:	e000      	b.n	3fa <HandleEvent+0x11a>
		break;
     3f8:	bf00      	nop
	}
	return output;
     3fa:	4b07      	ldr	r3, [pc, #28]	; (418 <HandleEvent+0x138>)
     3fc:	781b      	ldrb	r3, [r3, #0]
}
     3fe:	4618      	mov	r0, r3
     400:	371c      	adds	r7, #28
     402:	46bd      	mov	sp, r7
     404:	f85d 7b04 	ldr.w	r7, [sp], #4
     408:	4770      	bx	lr
     40a:	bf00      	nop
     40c:	000025f4 	.word	0x000025f4
     410:	000025fc 	.word	0x000025fc
     414:	20000048 	.word	0x20000048
     418:	20000049 	.word	0x20000049

0000041c <edge_detector>:

bool edge_detector(void){
     41c:	b480      	push	{r7}
     41e:	b083      	sub	sp, #12
     420:	af00      	add	r7, sp, #0

	static char clock_state = 0;
	bool edge_input = (PORT->Group[SW0/32].IN.reg & (1<<(SW0%32)));
     422:	4b1f      	ldr	r3, [pc, #124]	; (4a0 <edge_detector+0x84>)
     424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
     428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     42c:	2b00      	cmp	r3, #0
     42e:	bf14      	ite	ne
     430:	2301      	movne	r3, #1
     432:	2300      	moveq	r3, #0
     434:	71bb      	strb	r3, [r7, #6]
	
	bool edge_detected = 0;
     436:	2300      	movs	r3, #0
     438:	71fb      	strb	r3, [r7, #7]
	
	
	switch(clock_state){
     43a:	4b1a      	ldr	r3, [pc, #104]	; (4a4 <edge_detector+0x88>)
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	2b00      	cmp	r3, #0
     440:	d002      	beq.n	448 <edge_detector+0x2c>
     442:	2b01      	cmp	r3, #1
     444:	d012      	beq.n	46c <edge_detector+0x50>
     446:	e023      	b.n	490 <edge_detector+0x74>
		case 0:
		if(edge_input == 0){
     448:	79bb      	ldrb	r3, [r7, #6]
     44a:	f083 0301 	eor.w	r3, r3, #1
     44e:	b2db      	uxtb	r3, r3
     450:	2b00      	cmp	r3, #0
     452:	d005      	beq.n	460 <edge_detector+0x44>
			clock_state = 1;
     454:	4b13      	ldr	r3, [pc, #76]	; (4a4 <edge_detector+0x88>)
     456:	2201      	movs	r2, #1
     458:	701a      	strb	r2, [r3, #0]
			edge_detected = 1;
     45a:	2301      	movs	r3, #1
     45c:	71fb      	strb	r3, [r7, #7]
			}else{
			clock_state = 0;
			edge_detected = 0;
		}
		break;
     45e:	e017      	b.n	490 <edge_detector+0x74>
			clock_state = 0;
     460:	4b10      	ldr	r3, [pc, #64]	; (4a4 <edge_detector+0x88>)
     462:	2200      	movs	r2, #0
     464:	701a      	strb	r2, [r3, #0]
			edge_detected = 0;
     466:	2300      	movs	r3, #0
     468:	71fb      	strb	r3, [r7, #7]
		break;
     46a:	e011      	b.n	490 <edge_detector+0x74>
		case 1:
		if(edge_input == 0){
     46c:	79bb      	ldrb	r3, [r7, #6]
     46e:	f083 0301 	eor.w	r3, r3, #1
     472:	b2db      	uxtb	r3, r3
     474:	2b00      	cmp	r3, #0
     476:	d005      	beq.n	484 <edge_detector+0x68>
			clock_state = 1;
     478:	4b0a      	ldr	r3, [pc, #40]	; (4a4 <edge_detector+0x88>)
     47a:	2201      	movs	r2, #1
     47c:	701a      	strb	r2, [r3, #0]
			edge_detected = 0;
     47e:	2300      	movs	r3, #0
     480:	71fb      	strb	r3, [r7, #7]
			}else{
			clock_state = 0;
			edge_detected = 0;
		}
		break;
     482:	e004      	b.n	48e <edge_detector+0x72>
			clock_state = 0;
     484:	4b07      	ldr	r3, [pc, #28]	; (4a4 <edge_detector+0x88>)
     486:	2200      	movs	r2, #0
     488:	701a      	strb	r2, [r3, #0]
			edge_detected = 0;
     48a:	2300      	movs	r3, #0
     48c:	71fb      	strb	r3, [r7, #7]
		break;
     48e:	bf00      	nop
	}
	return edge_detected;
     490:	79fb      	ldrb	r3, [r7, #7]
     492:	4618      	mov	r0, r3
     494:	370c      	adds	r7, #12
     496:	46bd      	mov	sp, r7
     498:	f85d 7b04 	ldr.w	r7, [sp], #4
     49c:	4770      	bx	lr
     49e:	bf00      	nop
     4a0:	41008000 	.word	0x41008000
     4a4:	2000004a 	.word	0x2000004a

000004a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     4a8:	b580      	push	{r7, lr}
     4aa:	b082      	sub	sp, #8
     4ac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     4ae:	4b1c      	ldr	r3, [pc, #112]	; (520 <Reset_Handler+0x78>)
     4b0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     4b2:	4b1c      	ldr	r3, [pc, #112]	; (524 <Reset_Handler+0x7c>)
     4b4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     4b6:	687a      	ldr	r2, [r7, #4]
     4b8:	683b      	ldr	r3, [r7, #0]
     4ba:	429a      	cmp	r2, r3
     4bc:	d00c      	beq.n	4d8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     4be:	e007      	b.n	4d0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     4c0:	683b      	ldr	r3, [r7, #0]
     4c2:	1d1a      	adds	r2, r3, #4
     4c4:	603a      	str	r2, [r7, #0]
     4c6:	687a      	ldr	r2, [r7, #4]
     4c8:	1d11      	adds	r1, r2, #4
     4ca:	6079      	str	r1, [r7, #4]
     4cc:	6812      	ldr	r2, [r2, #0]
     4ce:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     4d0:	683b      	ldr	r3, [r7, #0]
     4d2:	4a15      	ldr	r2, [pc, #84]	; (528 <Reset_Handler+0x80>)
     4d4:	4293      	cmp	r3, r2
     4d6:	d3f3      	bcc.n	4c0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     4d8:	4b14      	ldr	r3, [pc, #80]	; (52c <Reset_Handler+0x84>)
     4da:	603b      	str	r3, [r7, #0]
     4dc:	e004      	b.n	4e8 <Reset_Handler+0x40>
                *pDest++ = 0;
     4de:	683b      	ldr	r3, [r7, #0]
     4e0:	1d1a      	adds	r2, r3, #4
     4e2:	603a      	str	r2, [r7, #0]
     4e4:	2200      	movs	r2, #0
     4e6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	4a11      	ldr	r2, [pc, #68]	; (530 <Reset_Handler+0x88>)
     4ec:	4293      	cmp	r3, r2
     4ee:	d3f6      	bcc.n	4de <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     4f0:	4b10      	ldr	r3, [pc, #64]	; (534 <Reset_Handler+0x8c>)
     4f2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4f4:	4a10      	ldr	r2, [pc, #64]	; (538 <Reset_Handler+0x90>)
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     4fc:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     4fe:	4a0e      	ldr	r2, [pc, #56]	; (538 <Reset_Handler+0x90>)
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <Reset_Handler+0x90>)
     502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     50a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     50e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     512:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     516:	4b09      	ldr	r3, [pc, #36]	; (53c <Reset_Handler+0x94>)
     518:	4798      	blx	r3

        /* Branch to main function */
        main();
     51a:	4b09      	ldr	r3, [pc, #36]	; (540 <Reset_Handler+0x98>)
     51c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     51e:	e7fe      	b.n	51e <Reset_Handler+0x76>
     520:	00002748 	.word	0x00002748
     524:	20000000 	.word	0x20000000
     528:	2000002c 	.word	0x2000002c
     52c:	2000002c 	.word	0x2000002c
     530:	200000ac 	.word	0x200000ac
     534:	00000000 	.word	0x00000000
     538:	e000ed00 	.word	0xe000ed00
     53c:	000025ad 	.word	0x000025ad
     540:	00002539 	.word	0x00002539

00000544 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     544:	b480      	push	{r7}
     546:	af00      	add	r7, sp, #0
        while (1) {
     548:	e7fe      	b.n	548 <Dummy_Handler+0x4>

0000054a <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     54a:	b480      	push	{r7}
     54c:	b085      	sub	sp, #20
     54e:	af00      	add	r7, sp, #0
     550:	60f8      	str	r0, [r7, #12]
     552:	460b      	mov	r3, r1
     554:	607a      	str	r2, [r7, #4]
     556:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     558:	7afa      	ldrb	r2, [r7, #11]
     55a:	68fb      	ldr	r3, [r7, #12]
     55c:	3220      	adds	r2, #32
     55e:	6879      	ldr	r1, [r7, #4]
     560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     564:	bf00      	nop
     566:	3714      	adds	r7, #20
     568:	46bd      	mov	sp, r7
     56a:	f85d 7b04 	ldr.w	r7, [sp], #4
     56e:	4770      	bx	lr

00000570 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     570:	b480      	push	{r7}
     572:	b083      	sub	sp, #12
     574:	af00      	add	r7, sp, #0
     576:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     578:	687b      	ldr	r3, [r7, #4]
     57a:	695b      	ldr	r3, [r3, #20]
     57c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     580:	687b      	ldr	r3, [r7, #4]
     582:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     584:	bf00      	nop
     586:	370c      	adds	r7, #12
     588:	46bd      	mov	sp, r7
     58a:	f85d 7b04 	ldr.w	r7, [sp], #4
     58e:	4770      	bx	lr

00000590 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     590:	b480      	push	{r7}
     592:	b083      	sub	sp, #12
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     598:	687b      	ldr	r3, [r7, #4]
     59a:	695b      	ldr	r3, [r3, #20]
     59c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5a4:	bf00      	nop
     5a6:	370c      	adds	r7, #12
     5a8:	46bd      	mov	sp, r7
     5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     5ae:	4770      	bx	lr

000005b0 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     5b0:	b480      	push	{r7}
     5b2:	b083      	sub	sp, #12
     5b4:	af00      	add	r7, sp, #0
     5b6:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	695b      	ldr	r3, [r3, #20]
     5bc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5c4:	bf00      	nop
     5c6:	370c      	adds	r7, #12
     5c8:	46bd      	mov	sp, r7
     5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     5ce:	4770      	bx	lr

000005d0 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     5d0:	b480      	push	{r7}
     5d2:	b085      	sub	sp, #20
     5d4:	af00      	add	r7, sp, #0
     5d6:	60f8      	str	r0, [r7, #12]
     5d8:	460b      	mov	r3, r1
     5da:	607a      	str	r2, [r7, #4]
     5dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5de:	7afb      	ldrb	r3, [r7, #11]
     5e0:	68fa      	ldr	r2, [r7, #12]
     5e2:	01db      	lsls	r3, r3, #7
     5e4:	4413      	add	r3, r2
     5e6:	3308      	adds	r3, #8
     5e8:	687a      	ldr	r2, [r7, #4]
     5ea:	601a      	str	r2, [r3, #0]
}
     5ec:	bf00      	nop
     5ee:	3714      	adds	r7, #20
     5f0:	46bd      	mov	sp, r7
     5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5f6:	4770      	bx	lr

000005f8 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     5f8:	b480      	push	{r7}
     5fa:	b085      	sub	sp, #20
     5fc:	af00      	add	r7, sp, #0
     5fe:	60f8      	str	r0, [r7, #12]
     600:	460b      	mov	r3, r1
     602:	607a      	str	r2, [r7, #4]
     604:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     606:	7afb      	ldrb	r3, [r7, #11]
     608:	68fa      	ldr	r2, [r7, #12]
     60a:	01db      	lsls	r3, r3, #7
     60c:	4413      	add	r3, r2
     60e:	3304      	adds	r3, #4
     610:	687a      	ldr	r2, [r7, #4]
     612:	601a      	str	r2, [r3, #0]
}
     614:	bf00      	nop
     616:	3714      	adds	r7, #20
     618:	46bd      	mov	sp, r7
     61a:	f85d 7b04 	ldr.w	r7, [sp], #4
     61e:	4770      	bx	lr

00000620 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     620:	b480      	push	{r7}
     622:	b085      	sub	sp, #20
     624:	af00      	add	r7, sp, #0
     626:	60f8      	str	r0, [r7, #12]
     628:	460b      	mov	r3, r1
     62a:	607a      	str	r2, [r7, #4]
     62c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     62e:	7afb      	ldrb	r3, [r7, #11]
     630:	68fa      	ldr	r2, [r7, #12]
     632:	01db      	lsls	r3, r3, #7
     634:	4413      	add	r3, r2
     636:	3318      	adds	r3, #24
     638:	687a      	ldr	r2, [r7, #4]
     63a:	601a      	str	r2, [r3, #0]
}
     63c:	bf00      	nop
     63e:	3714      	adds	r7, #20
     640:	46bd      	mov	sp, r7
     642:	f85d 7b04 	ldr.w	r7, [sp], #4
     646:	4770      	bx	lr

00000648 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     648:	b480      	push	{r7}
     64a:	b085      	sub	sp, #20
     64c:	af00      	add	r7, sp, #0
     64e:	60f8      	str	r0, [r7, #12]
     650:	460b      	mov	r3, r1
     652:	607a      	str	r2, [r7, #4]
     654:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     656:	7afb      	ldrb	r3, [r7, #11]
     658:	68fa      	ldr	r2, [r7, #12]
     65a:	01db      	lsls	r3, r3, #7
     65c:	4413      	add	r3, r2
     65e:	3314      	adds	r3, #20
     660:	687a      	ldr	r2, [r7, #4]
     662:	601a      	str	r2, [r3, #0]
}
     664:	bf00      	nop
     666:	3714      	adds	r7, #20
     668:	46bd      	mov	sp, r7
     66a:	f85d 7b04 	ldr.w	r7, [sp], #4
     66e:	4770      	bx	lr

00000670 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     670:	b480      	push	{r7}
     672:	b085      	sub	sp, #20
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
     678:	4608      	mov	r0, r1
     67a:	4611      	mov	r1, r2
     67c:	461a      	mov	r2, r3
     67e:	4603      	mov	r3, r0
     680:	70fb      	strb	r3, [r7, #3]
     682:	460b      	mov	r3, r1
     684:	70bb      	strb	r3, [r7, #2]
     686:	4613      	mov	r3, r2
     688:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     68a:	78fa      	ldrb	r2, [r7, #3]
     68c:	78bb      	ldrb	r3, [r7, #2]
     68e:	6879      	ldr	r1, [r7, #4]
     690:	01d2      	lsls	r2, r2, #7
     692:	440a      	add	r2, r1
     694:	4413      	add	r3, r2
     696:	3330      	adds	r3, #48	; 0x30
     698:	781b      	ldrb	r3, [r3, #0]
     69a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69c:	7bfb      	ldrb	r3, [r7, #15]
     69e:	f023 030f 	bic.w	r3, r3, #15
     6a2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     6a4:	787b      	ldrb	r3, [r7, #1]
     6a6:	f003 030f 	and.w	r3, r3, #15
     6aa:	b2da      	uxtb	r2, r3
     6ac:	7bfb      	ldrb	r3, [r7, #15]
     6ae:	4313      	orrs	r3, r2
     6b0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b2:	78fa      	ldrb	r2, [r7, #3]
     6b4:	78bb      	ldrb	r3, [r7, #2]
     6b6:	6879      	ldr	r1, [r7, #4]
     6b8:	01d2      	lsls	r2, r2, #7
     6ba:	440a      	add	r2, r1
     6bc:	4413      	add	r3, r2
     6be:	3330      	adds	r3, #48	; 0x30
     6c0:	7bfa      	ldrb	r2, [r7, #15]
     6c2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6c4:	bf00      	nop
     6c6:	3714      	adds	r7, #20
     6c8:	46bd      	mov	sp, r7
     6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ce:	4770      	bx	lr

000006d0 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     6d0:	b480      	push	{r7}
     6d2:	b085      	sub	sp, #20
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	4608      	mov	r0, r1
     6da:	4611      	mov	r1, r2
     6dc:	461a      	mov	r2, r3
     6de:	4603      	mov	r3, r0
     6e0:	70fb      	strb	r3, [r7, #3]
     6e2:	460b      	mov	r3, r1
     6e4:	70bb      	strb	r3, [r7, #2]
     6e6:	4613      	mov	r3, r2
     6e8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6ea:	78fa      	ldrb	r2, [r7, #3]
     6ec:	78bb      	ldrb	r3, [r7, #2]
     6ee:	6879      	ldr	r1, [r7, #4]
     6f0:	01d2      	lsls	r2, r2, #7
     6f2:	440a      	add	r2, r1
     6f4:	4413      	add	r3, r2
     6f6:	3330      	adds	r3, #48	; 0x30
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6fc:	7bfb      	ldrb	r3, [r7, #15]
     6fe:	f003 030f 	and.w	r3, r3, #15
     702:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     704:	787b      	ldrb	r3, [r7, #1]
     706:	011b      	lsls	r3, r3, #4
     708:	b2da      	uxtb	r2, r3
     70a:	7bfb      	ldrb	r3, [r7, #15]
     70c:	4313      	orrs	r3, r2
     70e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     710:	78fa      	ldrb	r2, [r7, #3]
     712:	78bb      	ldrb	r3, [r7, #2]
     714:	6879      	ldr	r1, [r7, #4]
     716:	01d2      	lsls	r2, r2, #7
     718:	440a      	add	r2, r1
     71a:	4413      	add	r3, r2
     71c:	3330      	adds	r3, #48	; 0x30
     71e:	7bfa      	ldrb	r2, [r7, #15]
     720:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     722:	bf00      	nop
     724:	3714      	adds	r7, #20
     726:	46bd      	mov	sp, r7
     728:	f85d 7b04 	ldr.w	r7, [sp], #4
     72c:	4770      	bx	lr

0000072e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     72e:	b480      	push	{r7}
     730:	b085      	sub	sp, #20
     732:	af00      	add	r7, sp, #0
     734:	6078      	str	r0, [r7, #4]
     736:	4608      	mov	r0, r1
     738:	4611      	mov	r1, r2
     73a:	461a      	mov	r2, r3
     73c:	4603      	mov	r3, r0
     73e:	70fb      	strb	r3, [r7, #3]
     740:	460b      	mov	r3, r1
     742:	70bb      	strb	r3, [r7, #2]
     744:	4613      	mov	r3, r2
     746:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     748:	78fa      	ldrb	r2, [r7, #3]
     74a:	78bb      	ldrb	r3, [r7, #2]
     74c:	6879      	ldr	r1, [r7, #4]
     74e:	01d2      	lsls	r2, r2, #7
     750:	440a      	add	r2, r1
     752:	4413      	add	r3, r2
     754:	3340      	adds	r3, #64	; 0x40
     756:	781b      	ldrb	r3, [r3, #0]
     758:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     75a:	7bfb      	ldrb	r3, [r7, #15]
     75c:	f023 0301 	bic.w	r3, r3, #1
     760:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     762:	787a      	ldrb	r2, [r7, #1]
     764:	7bfb      	ldrb	r3, [r7, #15]
     766:	4313      	orrs	r3, r2
     768:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     76a:	78fa      	ldrb	r2, [r7, #3]
     76c:	78bb      	ldrb	r3, [r7, #2]
     76e:	6879      	ldr	r1, [r7, #4]
     770:	01d2      	lsls	r2, r2, #7
     772:	440a      	add	r2, r1
     774:	4413      	add	r3, r2
     776:	3340      	adds	r3, #64	; 0x40
     778:	7bfa      	ldrb	r2, [r7, #15]
     77a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     77c:	bf00      	nop
     77e:	3714      	adds	r7, #20
     780:	46bd      	mov	sp, r7
     782:	f85d 7b04 	ldr.w	r7, [sp], #4
     786:	4770      	bx	lr

00000788 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     788:	b490      	push	{r4, r7}
     78a:	b082      	sub	sp, #8
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
     790:	460b      	mov	r3, r1
     792:	70fb      	strb	r3, [r7, #3]
     794:	4613      	mov	r3, r2
     796:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     798:	78fa      	ldrb	r2, [r7, #3]
     79a:	78bb      	ldrb	r3, [r7, #2]
     79c:	78f8      	ldrb	r0, [r7, #3]
     79e:	78b9      	ldrb	r1, [r7, #2]
     7a0:	687c      	ldr	r4, [r7, #4]
     7a2:	01c0      	lsls	r0, r0, #7
     7a4:	4420      	add	r0, r4
     7a6:	4401      	add	r1, r0
     7a8:	3140      	adds	r1, #64	; 0x40
     7aa:	7809      	ldrb	r1, [r1, #0]
     7ac:	b2c9      	uxtb	r1, r1
     7ae:	f041 0104 	orr.w	r1, r1, #4
     7b2:	b2c8      	uxtb	r0, r1
     7b4:	6879      	ldr	r1, [r7, #4]
     7b6:	01d2      	lsls	r2, r2, #7
     7b8:	440a      	add	r2, r1
     7ba:	4413      	add	r3, r2
     7bc:	3340      	adds	r3, #64	; 0x40
     7be:	4602      	mov	r2, r0
     7c0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7c2:	bf00      	nop
     7c4:	3708      	adds	r7, #8
     7c6:	46bd      	mov	sp, r7
     7c8:	bc90      	pop	{r4, r7}
     7ca:	4770      	bx	lr

000007cc <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     7cc:	b490      	push	{r4, r7}
     7ce:	b082      	sub	sp, #8
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]
     7d4:	460b      	mov	r3, r1
     7d6:	70fb      	strb	r3, [r7, #3]
     7d8:	4613      	mov	r3, r2
     7da:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7dc:	78fa      	ldrb	r2, [r7, #3]
     7de:	78bb      	ldrb	r3, [r7, #2]
     7e0:	78f8      	ldrb	r0, [r7, #3]
     7e2:	78b9      	ldrb	r1, [r7, #2]
     7e4:	687c      	ldr	r4, [r7, #4]
     7e6:	01c0      	lsls	r0, r0, #7
     7e8:	4420      	add	r0, r4
     7ea:	4401      	add	r1, r0
     7ec:	3140      	adds	r1, #64	; 0x40
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	b2c9      	uxtb	r1, r1
     7f2:	f021 0104 	bic.w	r1, r1, #4
     7f6:	b2c8      	uxtb	r0, r1
     7f8:	6879      	ldr	r1, [r7, #4]
     7fa:	01d2      	lsls	r2, r2, #7
     7fc:	440a      	add	r2, r1
     7fe:	4413      	add	r3, r2
     800:	3340      	adds	r3, #64	; 0x40
     802:	4602      	mov	r2, r0
     804:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     806:	bf00      	nop
     808:	3708      	adds	r7, #8
     80a:	46bd      	mov	sp, r7
     80c:	bc90      	pop	{r4, r7}
     80e:	4770      	bx	lr

00000810 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     810:	b480      	push	{r7}
     812:	b085      	sub	sp, #20
     814:	af00      	add	r7, sp, #0
     816:	60f8      	str	r0, [r7, #12]
     818:	460b      	mov	r3, r1
     81a:	607a      	str	r2, [r7, #4]
     81c:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81e:	7afb      	ldrb	r3, [r7, #11]
     820:	68fa      	ldr	r2, [r7, #12]
     822:	01db      	lsls	r3, r3, #7
     824:	4413      	add	r3, r2
     826:	3328      	adds	r3, #40	; 0x28
     828:	687a      	ldr	r2, [r7, #4]
     82a:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     82c:	bf00      	nop
     82e:	3714      	adds	r7, #20
     830:	46bd      	mov	sp, r7
     832:	f85d 7b04 	ldr.w	r7, [sp], #4
     836:	4770      	bx	lr

00000838 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	4603      	mov	r3, r0
     840:	6039      	str	r1, [r7, #0]
     842:	71fb      	strb	r3, [r7, #7]
     844:	4613      	mov	r3, r2
     846:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     848:	79bb      	ldrb	r3, [r7, #6]
     84a:	2b01      	cmp	r3, #1
     84c:	d01c      	beq.n	888 <_gpio_set_direction+0x50>
     84e:	2b02      	cmp	r3, #2
     850:	d037      	beq.n	8c2 <_gpio_set_direction+0x8a>
     852:	2b00      	cmp	r3, #0
     854:	d14e      	bne.n	8f4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     856:	79fb      	ldrb	r3, [r7, #7]
     858:	683a      	ldr	r2, [r7, #0]
     85a:	4619      	mov	r1, r3
     85c:	482a      	ldr	r0, [pc, #168]	; (908 <_gpio_set_direction+0xd0>)
     85e:	4b2b      	ldr	r3, [pc, #172]	; (90c <_gpio_set_direction+0xd4>)
     860:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     862:	683b      	ldr	r3, [r7, #0]
     864:	b29b      	uxth	r3, r3
     866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     86a:	79fb      	ldrb	r3, [r7, #7]
     86c:	4619      	mov	r1, r3
     86e:	4826      	ldr	r0, [pc, #152]	; (908 <_gpio_set_direction+0xd0>)
     870:	4b27      	ldr	r3, [pc, #156]	; (910 <_gpio_set_direction+0xd8>)
     872:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     874:	683b      	ldr	r3, [r7, #0]
     876:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     878:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     87c:	79fb      	ldrb	r3, [r7, #7]
     87e:	4619      	mov	r1, r3
     880:	4821      	ldr	r0, [pc, #132]	; (908 <_gpio_set_direction+0xd0>)
     882:	4b23      	ldr	r3, [pc, #140]	; (910 <_gpio_set_direction+0xd8>)
     884:	4798      	blx	r3
		break;
     886:	e03a      	b.n	8fe <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     888:	79fb      	ldrb	r3, [r7, #7]
     88a:	683a      	ldr	r2, [r7, #0]
     88c:	4619      	mov	r1, r3
     88e:	481e      	ldr	r0, [pc, #120]	; (908 <_gpio_set_direction+0xd0>)
     890:	4b1e      	ldr	r3, [pc, #120]	; (90c <_gpio_set_direction+0xd4>)
     892:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     894:	683b      	ldr	r3, [r7, #0]
     896:	b29b      	uxth	r3, r3
     898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     89c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     8a0:	79f9      	ldrb	r1, [r7, #7]
     8a2:	461a      	mov	r2, r3
     8a4:	4818      	ldr	r0, [pc, #96]	; (908 <_gpio_set_direction+0xd0>)
     8a6:	4b1a      	ldr	r3, [pc, #104]	; (910 <_gpio_set_direction+0xd8>)
     8a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     8aa:	683b      	ldr	r3, [r7, #0]
     8ac:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     8ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     8b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     8b6:	79f9      	ldrb	r1, [r7, #7]
     8b8:	461a      	mov	r2, r3
     8ba:	4813      	ldr	r0, [pc, #76]	; (908 <_gpio_set_direction+0xd0>)
     8bc:	4b14      	ldr	r3, [pc, #80]	; (910 <_gpio_set_direction+0xd8>)
     8be:	4798      	blx	r3
		break;
     8c0:	e01d      	b.n	8fe <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     8c2:	79fb      	ldrb	r3, [r7, #7]
     8c4:	683a      	ldr	r2, [r7, #0]
     8c6:	4619      	mov	r1, r3
     8c8:	480f      	ldr	r0, [pc, #60]	; (908 <_gpio_set_direction+0xd0>)
     8ca:	4b12      	ldr	r3, [pc, #72]	; (914 <_gpio_set_direction+0xdc>)
     8cc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     8ce:	683b      	ldr	r3, [r7, #0]
     8d0:	b29b      	uxth	r3, r3
     8d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     8d6:	79fb      	ldrb	r3, [r7, #7]
     8d8:	4619      	mov	r1, r3
     8da:	480b      	ldr	r0, [pc, #44]	; (908 <_gpio_set_direction+0xd0>)
     8dc:	4b0c      	ldr	r3, [pc, #48]	; (910 <_gpio_set_direction+0xd8>)
     8de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     8e0:	683b      	ldr	r3, [r7, #0]
     8e2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     8e4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     8e8:	79fb      	ldrb	r3, [r7, #7]
     8ea:	4619      	mov	r1, r3
     8ec:	4806      	ldr	r0, [pc, #24]	; (908 <_gpio_set_direction+0xd0>)
     8ee:	4b08      	ldr	r3, [pc, #32]	; (910 <_gpio_set_direction+0xd8>)
     8f0:	4798      	blx	r3
		break;
     8f2:	e004      	b.n	8fe <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     8f4:	2246      	movs	r2, #70	; 0x46
     8f6:	4908      	ldr	r1, [pc, #32]	; (918 <_gpio_set_direction+0xe0>)
     8f8:	2000      	movs	r0, #0
     8fa:	4b08      	ldr	r3, [pc, #32]	; (91c <_gpio_set_direction+0xe4>)
     8fc:	4798      	blx	r3
	}
}
     8fe:	bf00      	nop
     900:	3708      	adds	r7, #8
     902:	46bd      	mov	sp, r7
     904:	bd80      	pop	{r7, pc}
     906:	bf00      	nop
     908:	41008000 	.word	0x41008000
     90c:	000005f9 	.word	0x000005f9
     910:	00000811 	.word	0x00000811
     914:	000005d1 	.word	0x000005d1
     918:	00002604 	.word	0x00002604
     91c:	00001215 	.word	0x00001215

00000920 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
     926:	4603      	mov	r3, r0
     928:	6039      	str	r1, [r7, #0]
     92a:	71fb      	strb	r3, [r7, #7]
     92c:	4613      	mov	r3, r2
     92e:	71bb      	strb	r3, [r7, #6]
	if (level) {
     930:	79bb      	ldrb	r3, [r7, #6]
     932:	2b00      	cmp	r3, #0
     934:	d006      	beq.n	944 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     936:	79fb      	ldrb	r3, [r7, #7]
     938:	683a      	ldr	r2, [r7, #0]
     93a:	4619      	mov	r1, r3
     93c:	4806      	ldr	r0, [pc, #24]	; (958 <_gpio_set_level+0x38>)
     93e:	4b07      	ldr	r3, [pc, #28]	; (95c <_gpio_set_level+0x3c>)
     940:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     942:	e005      	b.n	950 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     944:	79fb      	ldrb	r3, [r7, #7]
     946:	683a      	ldr	r2, [r7, #0]
     948:	4619      	mov	r1, r3
     94a:	4803      	ldr	r0, [pc, #12]	; (958 <_gpio_set_level+0x38>)
     94c:	4b04      	ldr	r3, [pc, #16]	; (960 <_gpio_set_level+0x40>)
     94e:	4798      	blx	r3
}
     950:	bf00      	nop
     952:	3708      	adds	r7, #8
     954:	46bd      	mov	sp, r7
     956:	bd80      	pop	{r7, pc}
     958:	41008000 	.word	0x41008000
     95c:	00000621 	.word	0x00000621
     960:	00000649 	.word	0x00000649

00000964 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     964:	b580      	push	{r7, lr}
     966:	b082      	sub	sp, #8
     968:	af00      	add	r7, sp, #0
     96a:	4603      	mov	r3, r0
     96c:	71fb      	strb	r3, [r7, #7]
     96e:	460b      	mov	r3, r1
     970:	71bb      	strb	r3, [r7, #6]
     972:	4613      	mov	r3, r2
     974:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     976:	797b      	ldrb	r3, [r7, #5]
     978:	2b01      	cmp	r3, #1
     97a:	d00a      	beq.n	992 <_gpio_set_pin_pull_mode+0x2e>
     97c:	2b02      	cmp	r3, #2
     97e:	d01f      	beq.n	9c0 <_gpio_set_pin_pull_mode+0x5c>
     980:	2b00      	cmp	r3, #0
     982:	d134      	bne.n	9ee <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     984:	79ba      	ldrb	r2, [r7, #6]
     986:	79fb      	ldrb	r3, [r7, #7]
     988:	4619      	mov	r1, r3
     98a:	481e      	ldr	r0, [pc, #120]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     98c:	4b1e      	ldr	r3, [pc, #120]	; (a08 <_gpio_set_pin_pull_mode+0xa4>)
     98e:	4798      	blx	r3
		break;
     990:	e033      	b.n	9fa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     992:	79bb      	ldrb	r3, [r7, #6]
     994:	2201      	movs	r2, #1
     996:	409a      	lsls	r2, r3
     998:	79fb      	ldrb	r3, [r7, #7]
     99a:	4619      	mov	r1, r3
     99c:	4819      	ldr	r0, [pc, #100]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     99e:	4b1b      	ldr	r3, [pc, #108]	; (a0c <_gpio_set_pin_pull_mode+0xa8>)
     9a0:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     9a2:	79ba      	ldrb	r2, [r7, #6]
     9a4:	79fb      	ldrb	r3, [r7, #7]
     9a6:	4619      	mov	r1, r3
     9a8:	4816      	ldr	r0, [pc, #88]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     9aa:	4b19      	ldr	r3, [pc, #100]	; (a10 <_gpio_set_pin_pull_mode+0xac>)
     9ac:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     9ae:	79bb      	ldrb	r3, [r7, #6]
     9b0:	2201      	movs	r2, #1
     9b2:	409a      	lsls	r2, r3
     9b4:	79fb      	ldrb	r3, [r7, #7]
     9b6:	4619      	mov	r1, r3
     9b8:	4812      	ldr	r0, [pc, #72]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     9ba:	4b16      	ldr	r3, [pc, #88]	; (a14 <_gpio_set_pin_pull_mode+0xb0>)
     9bc:	4798      	blx	r3
		break;
     9be:	e01c      	b.n	9fa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     9c0:	79bb      	ldrb	r3, [r7, #6]
     9c2:	2201      	movs	r2, #1
     9c4:	409a      	lsls	r2, r3
     9c6:	79fb      	ldrb	r3, [r7, #7]
     9c8:	4619      	mov	r1, r3
     9ca:	480e      	ldr	r0, [pc, #56]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     9cc:	4b0f      	ldr	r3, [pc, #60]	; (a0c <_gpio_set_pin_pull_mode+0xa8>)
     9ce:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     9d0:	79ba      	ldrb	r2, [r7, #6]
     9d2:	79fb      	ldrb	r3, [r7, #7]
     9d4:	4619      	mov	r1, r3
     9d6:	480b      	ldr	r0, [pc, #44]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     9d8:	4b0d      	ldr	r3, [pc, #52]	; (a10 <_gpio_set_pin_pull_mode+0xac>)
     9da:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     9dc:	79bb      	ldrb	r3, [r7, #6]
     9de:	2201      	movs	r2, #1
     9e0:	409a      	lsls	r2, r3
     9e2:	79fb      	ldrb	r3, [r7, #7]
     9e4:	4619      	mov	r1, r3
     9e6:	4807      	ldr	r0, [pc, #28]	; (a04 <_gpio_set_pin_pull_mode+0xa0>)
     9e8:	4b0b      	ldr	r3, [pc, #44]	; (a18 <_gpio_set_pin_pull_mode+0xb4>)
     9ea:	4798      	blx	r3
		break;
     9ec:	e005      	b.n	9fa <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     9ee:	2289      	movs	r2, #137	; 0x89
     9f0:	490a      	ldr	r1, [pc, #40]	; (a1c <_gpio_set_pin_pull_mode+0xb8>)
     9f2:	2000      	movs	r0, #0
     9f4:	4b0a      	ldr	r3, [pc, #40]	; (a20 <_gpio_set_pin_pull_mode+0xbc>)
     9f6:	4798      	blx	r3
		break;
     9f8:	bf00      	nop
	}
}
     9fa:	bf00      	nop
     9fc:	3708      	adds	r7, #8
     9fe:	46bd      	mov	sp, r7
     a00:	bd80      	pop	{r7, pc}
     a02:	bf00      	nop
     a04:	41008000 	.word	0x41008000
     a08:	000007cd 	.word	0x000007cd
     a0c:	000005f9 	.word	0x000005f9
     a10:	00000789 	.word	0x00000789
     a14:	00000621 	.word	0x00000621
     a18:	00000649 	.word	0x00000649
     a1c:	00002604 	.word	0x00002604
     a20:	00001215 	.word	0x00001215

00000a24 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     a24:	b590      	push	{r4, r7, lr}
     a26:	b085      	sub	sp, #20
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
     a2c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	095b      	lsrs	r3, r3, #5
     a32:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	b2db      	uxtb	r3, r3
     a38:	f003 031f 	and.w	r3, r3, #31
     a3c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     a3e:	683b      	ldr	r3, [r7, #0]
     a40:	f1b3 3fff 	cmp.w	r3, #4294967295
     a44:	d106      	bne.n	a54 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     a46:	7bba      	ldrb	r2, [r7, #14]
     a48:	7bf9      	ldrb	r1, [r7, #15]
     a4a:	2300      	movs	r3, #0
     a4c:	4812      	ldr	r0, [pc, #72]	; (a98 <_gpio_set_pin_function+0x74>)
     a4e:	4c13      	ldr	r4, [pc, #76]	; (a9c <_gpio_set_pin_function+0x78>)
     a50:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     a52:	e01d      	b.n	a90 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     a54:	7bba      	ldrb	r2, [r7, #14]
     a56:	7bf9      	ldrb	r1, [r7, #15]
     a58:	2301      	movs	r3, #1
     a5a:	480f      	ldr	r0, [pc, #60]	; (a98 <_gpio_set_pin_function+0x74>)
     a5c:	4c0f      	ldr	r4, [pc, #60]	; (a9c <_gpio_set_pin_function+0x78>)
     a5e:	47a0      	blx	r4
		if (pin & 1) {
     a60:	7bbb      	ldrb	r3, [r7, #14]
     a62:	f003 0301 	and.w	r3, r3, #1
     a66:	2b00      	cmp	r3, #0
     a68:	d009      	beq.n	a7e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     a6a:	7bbb      	ldrb	r3, [r7, #14]
     a6c:	085b      	lsrs	r3, r3, #1
     a6e:	b2da      	uxtb	r2, r3
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	b2db      	uxtb	r3, r3
     a74:	7bf9      	ldrb	r1, [r7, #15]
     a76:	4808      	ldr	r0, [pc, #32]	; (a98 <_gpio_set_pin_function+0x74>)
     a78:	4c09      	ldr	r4, [pc, #36]	; (aa0 <_gpio_set_pin_function+0x7c>)
     a7a:	47a0      	blx	r4
}
     a7c:	e008      	b.n	a90 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     a7e:	7bbb      	ldrb	r3, [r7, #14]
     a80:	085b      	lsrs	r3, r3, #1
     a82:	b2da      	uxtb	r2, r3
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	b2db      	uxtb	r3, r3
     a88:	7bf9      	ldrb	r1, [r7, #15]
     a8a:	4803      	ldr	r0, [pc, #12]	; (a98 <_gpio_set_pin_function+0x74>)
     a8c:	4c05      	ldr	r4, [pc, #20]	; (aa4 <_gpio_set_pin_function+0x80>)
     a8e:	47a0      	blx	r4
}
     a90:	bf00      	nop
     a92:	3714      	adds	r7, #20
     a94:	46bd      	mov	sp, r7
     a96:	bd90      	pop	{r4, r7, pc}
     a98:	41008000 	.word	0x41008000
     a9c:	0000072f 	.word	0x0000072f
     aa0:	000006d1 	.word	0x000006d1
     aa4:	00000671 	.word	0x00000671

00000aa8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     aa8:	b580      	push	{r7, lr}
     aaa:	b082      	sub	sp, #8
     aac:	af00      	add	r7, sp, #0
     aae:	4603      	mov	r3, r0
     ab0:	460a      	mov	r2, r1
     ab2:	71fb      	strb	r3, [r7, #7]
     ab4:	4613      	mov	r3, r2
     ab6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     ab8:	79fb      	ldrb	r3, [r7, #7]
     aba:	095b      	lsrs	r3, r3, #5
     abc:	b2d8      	uxtb	r0, r3
     abe:	79fb      	ldrb	r3, [r7, #7]
     ac0:	f003 031f 	and.w	r3, r3, #31
     ac4:	b2db      	uxtb	r3, r3
     ac6:	79ba      	ldrb	r2, [r7, #6]
     ac8:	4619      	mov	r1, r3
     aca:	4b03      	ldr	r3, [pc, #12]	; (ad8 <gpio_set_pin_pull_mode+0x30>)
     acc:	4798      	blx	r3
}
     ace:	bf00      	nop
     ad0:	3708      	adds	r7, #8
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	bf00      	nop
     ad8:	00000965 	.word	0x00000965

00000adc <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     adc:	b580      	push	{r7, lr}
     ade:	b082      	sub	sp, #8
     ae0:	af00      	add	r7, sp, #0
     ae2:	6078      	str	r0, [r7, #4]
     ae4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     ae6:	6839      	ldr	r1, [r7, #0]
     ae8:	6878      	ldr	r0, [r7, #4]
     aea:	4b03      	ldr	r3, [pc, #12]	; (af8 <gpio_set_pin_function+0x1c>)
     aec:	4798      	blx	r3
}
     aee:	bf00      	nop
     af0:	3708      	adds	r7, #8
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	bf00      	nop
     af8:	00000a25 	.word	0x00000a25

00000afc <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     afc:	b580      	push	{r7, lr}
     afe:	b082      	sub	sp, #8
     b00:	af00      	add	r7, sp, #0
     b02:	4603      	mov	r3, r0
     b04:	460a      	mov	r2, r1
     b06:	71fb      	strb	r3, [r7, #7]
     b08:	4613      	mov	r3, r2
     b0a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     b0c:	79fb      	ldrb	r3, [r7, #7]
     b0e:	095b      	lsrs	r3, r3, #5
     b10:	b2d8      	uxtb	r0, r3
     b12:	79fb      	ldrb	r3, [r7, #7]
     b14:	f003 031f 	and.w	r3, r3, #31
     b18:	2201      	movs	r2, #1
     b1a:	fa02 f303 	lsl.w	r3, r2, r3
     b1e:	79ba      	ldrb	r2, [r7, #6]
     b20:	4619      	mov	r1, r3
     b22:	4b03      	ldr	r3, [pc, #12]	; (b30 <gpio_set_pin_direction+0x34>)
     b24:	4798      	blx	r3
}
     b26:	bf00      	nop
     b28:	3708      	adds	r7, #8
     b2a:	46bd      	mov	sp, r7
     b2c:	bd80      	pop	{r7, pc}
     b2e:	bf00      	nop
     b30:	00000839 	.word	0x00000839

00000b34 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     b34:	b580      	push	{r7, lr}
     b36:	b082      	sub	sp, #8
     b38:	af00      	add	r7, sp, #0
     b3a:	4603      	mov	r3, r0
     b3c:	460a      	mov	r2, r1
     b3e:	71fb      	strb	r3, [r7, #7]
     b40:	4613      	mov	r3, r2
     b42:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     b44:	79fb      	ldrb	r3, [r7, #7]
     b46:	095b      	lsrs	r3, r3, #5
     b48:	b2d8      	uxtb	r0, r3
     b4a:	79fb      	ldrb	r3, [r7, #7]
     b4c:	f003 031f 	and.w	r3, r3, #31
     b50:	2201      	movs	r2, #1
     b52:	fa02 f303 	lsl.w	r3, r2, r3
     b56:	79ba      	ldrb	r2, [r7, #6]
     b58:	4619      	mov	r1, r3
     b5a:	4b03      	ldr	r3, [pc, #12]	; (b68 <gpio_set_pin_level+0x34>)
     b5c:	4798      	blx	r3
}
     b5e:	bf00      	nop
     b60:	3708      	adds	r7, #8
     b62:	46bd      	mov	sp, r7
     b64:	bd80      	pop	{r7, pc}
     b66:	bf00      	nop
     b68:	00000921 	.word	0x00000921

00000b6c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     b6c:	b580      	push	{r7, lr}
     b6e:	af00      	add	r7, sp, #0
	_init_chip();
     b70:	4b01      	ldr	r3, [pc, #4]	; (b78 <init_mcu+0xc>)
     b72:	4798      	blx	r3
}
     b74:	bf00      	nop
     b76:	bd80      	pop	{r7, pc}
     b78:	00001355 	.word	0x00001355

00000b7c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     b80:	4806      	ldr	r0, [pc, #24]	; (b9c <TIMER_0_init+0x20>)
     b82:	4b07      	ldr	r3, [pc, #28]	; (ba0 <TIMER_0_init+0x24>)
     b84:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     b86:	4b07      	ldr	r3, [pc, #28]	; (ba4 <TIMER_0_init+0x28>)
     b88:	4798      	blx	r3
     b8a:	4603      	mov	r3, r0
     b8c:	461a      	mov	r2, r3
     b8e:	4906      	ldr	r1, [pc, #24]	; (ba8 <TIMER_0_init+0x2c>)
     b90:	4806      	ldr	r0, [pc, #24]	; (bac <TIMER_0_init+0x30>)
     b92:	4b07      	ldr	r3, [pc, #28]	; (bb0 <TIMER_0_init+0x34>)
     b94:	4798      	blx	r3
}
     b96:	bf00      	nop
     b98:	bd80      	pop	{r7, pc}
     b9a:	bf00      	nop
     b9c:	40000800 	.word	0x40000800
     ba0:	00000571 	.word	0x00000571
     ba4:	00001809 	.word	0x00001809
     ba8:	40002400 	.word	0x40002400
     bac:	20000080 	.word	0x20000080
     bb0:	00000e7d 	.word	0x00000e7d

00000bb4 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     bb4:	b580      	push	{r7, lr}
     bb6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     bb8:	4904      	ldr	r1, [pc, #16]	; (bcc <USART_0_PORT_init+0x18>)
     bba:	2004      	movs	r0, #4
     bbc:	4b04      	ldr	r3, [pc, #16]	; (bd0 <USART_0_PORT_init+0x1c>)
     bbe:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     bc0:	4904      	ldr	r1, [pc, #16]	; (bd4 <USART_0_PORT_init+0x20>)
     bc2:	2005      	movs	r0, #5
     bc4:	4b02      	ldr	r3, [pc, #8]	; (bd0 <USART_0_PORT_init+0x1c>)
     bc6:	4798      	blx	r3
}
     bc8:	bf00      	nop
     bca:	bd80      	pop	{r7, pc}
     bcc:	00040003 	.word	0x00040003
     bd0:	00000add 	.word	0x00000add
     bd4:	00050003 	.word	0x00050003

00000bd8 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     bd8:	b580      	push	{r7, lr}
     bda:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bdc:	2240      	movs	r2, #64	; 0x40
     bde:	2107      	movs	r1, #7
     be0:	4806      	ldr	r0, [pc, #24]	; (bfc <USART_0_CLOCK_init+0x24>)
     be2:	4b07      	ldr	r3, [pc, #28]	; (c00 <USART_0_CLOCK_init+0x28>)
     be4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     be6:	2243      	movs	r2, #67	; 0x43
     be8:	2103      	movs	r1, #3
     bea:	4804      	ldr	r0, [pc, #16]	; (bfc <USART_0_CLOCK_init+0x24>)
     bec:	4b04      	ldr	r3, [pc, #16]	; (c00 <USART_0_CLOCK_init+0x28>)
     bee:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     bf0:	4804      	ldr	r0, [pc, #16]	; (c04 <USART_0_CLOCK_init+0x2c>)
     bf2:	4b05      	ldr	r3, [pc, #20]	; (c08 <USART_0_CLOCK_init+0x30>)
     bf4:	4798      	blx	r3
}
     bf6:	bf00      	nop
     bf8:	bd80      	pop	{r7, pc}
     bfa:	bf00      	nop
     bfc:	40001c00 	.word	0x40001c00
     c00:	0000054b 	.word	0x0000054b
     c04:	40000800 	.word	0x40000800
     c08:	00000591 	.word	0x00000591

00000c0c <USART_0_init>:

void USART_0_init(void)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     c10:	4b05      	ldr	r3, [pc, #20]	; (c28 <USART_0_init+0x1c>)
     c12:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     c14:	2200      	movs	r2, #0
     c16:	4905      	ldr	r1, [pc, #20]	; (c2c <USART_0_init+0x20>)
     c18:	4805      	ldr	r0, [pc, #20]	; (c30 <USART_0_init+0x24>)
     c1a:	4b06      	ldr	r3, [pc, #24]	; (c34 <USART_0_init+0x28>)
     c1c:	4798      	blx	r3
	USART_0_PORT_init();
     c1e:	4b06      	ldr	r3, [pc, #24]	; (c38 <USART_0_init+0x2c>)
     c20:	4798      	blx	r3
}
     c22:	bf00      	nop
     c24:	bd80      	pop	{r7, pc}
     c26:	bf00      	nop
     c28:	00000bd9 	.word	0x00000bd9
     c2c:	40003000 	.word	0x40003000
     c30:	20000074 	.word	0x20000074
     c34:	00001049 	.word	0x00001049
     c38:	00000bb5 	.word	0x00000bb5

00000c3c <delay_driver_init>:

void delay_driver_init(void)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     c40:	4802      	ldr	r0, [pc, #8]	; (c4c <delay_driver_init+0x10>)
     c42:	4b03      	ldr	r3, [pc, #12]	; (c50 <delay_driver_init+0x14>)
     c44:	4798      	blx	r3
}
     c46:	bf00      	nop
     c48:	bd80      	pop	{r7, pc}
     c4a:	bf00      	nop
     c4c:	e000e010 	.word	0xe000e010
     c50:	00000d6d 	.word	0x00000d6d

00000c54 <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     c54:	b480      	push	{r7}
     c56:	af00      	add	r7, sp, #0
}
     c58:	bf00      	nop
     c5a:	46bd      	mov	sp, r7
     c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c60:	4770      	bx	lr
	...

00000c64 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     c64:	b580      	push	{r7, lr}
     c66:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     c68:	4804      	ldr	r0, [pc, #16]	; (c7c <PWM_0_CLOCK_init+0x18>)
     c6a:	4b05      	ldr	r3, [pc, #20]	; (c80 <PWM_0_CLOCK_init+0x1c>)
     c6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c6e:	2240      	movs	r2, #64	; 0x40
     c70:	2109      	movs	r1, #9
     c72:	4804      	ldr	r0, [pc, #16]	; (c84 <PWM_0_CLOCK_init+0x20>)
     c74:	4b04      	ldr	r3, [pc, #16]	; (c88 <PWM_0_CLOCK_init+0x24>)
     c76:	4798      	blx	r3
}
     c78:	bf00      	nop
     c7a:	bd80      	pop	{r7, pc}
     c7c:	40000800 	.word	0x40000800
     c80:	000005b1 	.word	0x000005b1
     c84:	40001c00 	.word	0x40001c00
     c88:	0000054b 	.word	0x0000054b

00000c8c <PWM_0_init>:

void PWM_0_init(void)
{
     c8c:	b580      	push	{r7, lr}
     c8e:	af00      	add	r7, sp, #0
	PWM_0_CLOCK_init();
     c90:	4b06      	ldr	r3, [pc, #24]	; (cac <PWM_0_init+0x20>)
     c92:	4798      	blx	r3
	PWM_0_PORT_init();
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <PWM_0_init+0x24>)
     c96:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     c98:	4b06      	ldr	r3, [pc, #24]	; (cb4 <PWM_0_init+0x28>)
     c9a:	4798      	blx	r3
     c9c:	4603      	mov	r3, r0
     c9e:	461a      	mov	r2, r3
     ca0:	4905      	ldr	r1, [pc, #20]	; (cb8 <PWM_0_init+0x2c>)
     ca2:	4806      	ldr	r0, [pc, #24]	; (cbc <PWM_0_init+0x30>)
     ca4:	4b06      	ldr	r3, [pc, #24]	; (cc0 <PWM_0_init+0x34>)
     ca6:	4798      	blx	r3
}
     ca8:	bf00      	nop
     caa:	bd80      	pop	{r7, pc}
     cac:	00000c65 	.word	0x00000c65
     cb0:	00000c55 	.word	0x00000c55
     cb4:	000022e5 	.word	0x000022e5
     cb8:	40003800 	.word	0x40003800
     cbc:	20000058 	.word	0x20000058
     cc0:	00000d95 	.word	0x00000d95

00000cc4 <system_init>:

void system_init(void)
{
     cc4:	b580      	push	{r7, lr}
     cc6:	af00      	add	r7, sp, #0
	init_mcu();
     cc8:	4b1f      	ldr	r3, [pc, #124]	; (d48 <system_init+0x84>)
     cca:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     ccc:	2101      	movs	r1, #1
     cce:	2021      	movs	r0, #33	; 0x21
     cd0:	4b1e      	ldr	r3, [pc, #120]	; (d4c <system_init+0x88>)
     cd2:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     cd4:	2100      	movs	r1, #0
     cd6:	2021      	movs	r0, #33	; 0x21
     cd8:	4b1d      	ldr	r3, [pc, #116]	; (d50 <system_init+0x8c>)
     cda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     cdc:	f04f 31ff 	mov.w	r1, #4294967295
     ce0:	2021      	movs	r0, #33	; 0x21
     ce2:	4b1c      	ldr	r3, [pc, #112]	; (d54 <system_init+0x90>)
     ce4:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT, GPIO_DIRECTION_IN);
     ce6:	2101      	movs	r1, #1
     ce8:	2025      	movs	r0, #37	; 0x25
     cea:	4b18      	ldr	r3, [pc, #96]	; (d4c <system_init+0x88>)
     cec:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT,
     cee:	2101      	movs	r1, #1
     cf0:	2025      	movs	r0, #37	; 0x25
     cf2:	4b17      	ldr	r3, [pc, #92]	; (d50 <system_init+0x8c>)
     cf4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT, GPIO_PIN_FUNCTION_OFF);
     cf6:	f04f 31ff 	mov.w	r1, #4294967295
     cfa:	2025      	movs	r0, #37	; 0x25
     cfc:	4b15      	ldr	r3, [pc, #84]	; (d54 <system_init+0x90>)
     cfe:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     d00:	2101      	movs	r1, #1
     d02:	203f      	movs	r0, #63	; 0x3f
     d04:	4b11      	ldr	r3, [pc, #68]	; (d4c <system_init+0x88>)
     d06:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     d08:	2101      	movs	r1, #1
     d0a:	203f      	movs	r0, #63	; 0x3f
     d0c:	4b10      	ldr	r3, [pc, #64]	; (d50 <system_init+0x8c>)
     d0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     d10:	f04f 31ff 	mov.w	r1, #4294967295
     d14:	203f      	movs	r0, #63	; 0x3f
     d16:	4b0f      	ldr	r3, [pc, #60]	; (d54 <system_init+0x90>)
     d18:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     d1a:	2101      	movs	r1, #1
     d1c:	2052      	movs	r0, #82	; 0x52
     d1e:	4b0e      	ldr	r3, [pc, #56]	; (d58 <system_init+0x94>)
     d20:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     d22:	2102      	movs	r1, #2
     d24:	2052      	movs	r0, #82	; 0x52
     d26:	4b09      	ldr	r3, [pc, #36]	; (d4c <system_init+0x88>)
     d28:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     d2a:	f04f 31ff 	mov.w	r1, #4294967295
     d2e:	2052      	movs	r0, #82	; 0x52
     d30:	4b08      	ldr	r3, [pc, #32]	; (d54 <system_init+0x90>)
     d32:	4798      	blx	r3

	TIMER_0_init();
     d34:	4b09      	ldr	r3, [pc, #36]	; (d5c <system_init+0x98>)
     d36:	4798      	blx	r3

	USART_0_init();
     d38:	4b09      	ldr	r3, [pc, #36]	; (d60 <system_init+0x9c>)
     d3a:	4798      	blx	r3

	delay_driver_init();
     d3c:	4b09      	ldr	r3, [pc, #36]	; (d64 <system_init+0xa0>)
     d3e:	4798      	blx	r3

	PWM_0_init();
     d40:	4b09      	ldr	r3, [pc, #36]	; (d68 <system_init+0xa4>)
     d42:	4798      	blx	r3
}
     d44:	bf00      	nop
     d46:	bd80      	pop	{r7, pc}
     d48:	00000b6d 	.word	0x00000b6d
     d4c:	00000afd 	.word	0x00000afd
     d50:	00000aa9 	.word	0x00000aa9
     d54:	00000add 	.word	0x00000add
     d58:	00000b35 	.word	0x00000b35
     d5c:	00000b7d 	.word	0x00000b7d
     d60:	00000c0d 	.word	0x00000c0d
     d64:	00000c3d 	.word	0x00000c3d
     d68:	00000c8d 	.word	0x00000c8d

00000d6c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b082      	sub	sp, #8
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     d74:	4a05      	ldr	r2, [pc, #20]	; (d8c <delay_init+0x20>)
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	6013      	str	r3, [r2, #0]
     d7a:	4b04      	ldr	r3, [pc, #16]	; (d8c <delay_init+0x20>)
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	4618      	mov	r0, r3
     d80:	4b03      	ldr	r3, [pc, #12]	; (d90 <delay_init+0x24>)
     d82:	4798      	blx	r3
}
     d84:	bf00      	nop
     d86:	3708      	adds	r7, #8
     d88:	46bd      	mov	sp, r7
     d8a:	bd80      	pop	{r7, pc}
     d8c:	2000004c 	.word	0x2000004c
     d90:	00001de1 	.word	0x00001de1

00000d94 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
     d94:	b580      	push	{r7, lr}
     d96:	b084      	sub	sp, #16
     d98:	af00      	add	r7, sp, #0
     d9a:	60f8      	str	r0, [r7, #12]
     d9c:	60b9      	str	r1, [r7, #8]
     d9e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     da0:	68fb      	ldr	r3, [r7, #12]
     da2:	2b00      	cmp	r3, #0
     da4:	d004      	beq.n	db0 <pwm_init+0x1c>
     da6:	68bb      	ldr	r3, [r7, #8]
     da8:	2b00      	cmp	r3, #0
     daa:	d001      	beq.n	db0 <pwm_init+0x1c>
     dac:	2301      	movs	r3, #1
     dae:	e000      	b.n	db2 <pwm_init+0x1e>
     db0:	2300      	movs	r3, #0
     db2:	f003 0301 	and.w	r3, r3, #1
     db6:	b2db      	uxtb	r3, r3
     db8:	2233      	movs	r2, #51	; 0x33
     dba:	490a      	ldr	r1, [pc, #40]	; (de4 <pwm_init+0x50>)
     dbc:	4618      	mov	r0, r3
     dbe:	4b0a      	ldr	r3, [pc, #40]	; (de8 <pwm_init+0x54>)
     dc0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     dc2:	68fb      	ldr	r3, [r7, #12]
     dc4:	68b9      	ldr	r1, [r7, #8]
     dc6:	4618      	mov	r0, r3
     dc8:	4b08      	ldr	r3, [pc, #32]	; (dec <pwm_init+0x58>)
     dca:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	4a08      	ldr	r2, [pc, #32]	; (df0 <pwm_init+0x5c>)
     dd0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     dd2:	68fb      	ldr	r3, [r7, #12]
     dd4:	4a07      	ldr	r2, [pc, #28]	; (df4 <pwm_init+0x60>)
     dd6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
     dd8:	2300      	movs	r3, #0
}
     dda:	4618      	mov	r0, r3
     ddc:	3710      	adds	r7, #16
     dde:	46bd      	mov	sp, r7
     de0:	bd80      	pop	{r7, pc}
     de2:	bf00      	nop
     de4:	00002620 	.word	0x00002620
     de8:	00001215 	.word	0x00001215
     dec:	000020c9 	.word	0x000020c9
     df0:	00000df9 	.word	0x00000df9
     df4:	00000e1d 	.word	0x00000e1d

00000df8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     df8:	b580      	push	{r7, lr}
     dfa:	b084      	sub	sp, #16
     dfc:	af00      	add	r7, sp, #0
     dfe:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
     e04:	68fb      	ldr	r3, [r7, #12]
     e06:	695b      	ldr	r3, [r3, #20]
     e08:	2b00      	cmp	r3, #0
     e0a:	d003      	beq.n	e14 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
     e0c:	68fb      	ldr	r3, [r7, #12]
     e0e:	695b      	ldr	r3, [r3, #20]
     e10:	68f8      	ldr	r0, [r7, #12]
     e12:	4798      	blx	r3
	}
}
     e14:	bf00      	nop
     e16:	3710      	adds	r7, #16
     e18:	46bd      	mov	sp, r7
     e1a:	bd80      	pop	{r7, pc}

00000e1c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     e1c:	b580      	push	{r7, lr}
     e1e:	b084      	sub	sp, #16
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
     e28:	68fb      	ldr	r3, [r7, #12]
     e2a:	699b      	ldr	r3, [r3, #24]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d003      	beq.n	e38 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
     e30:	68fb      	ldr	r3, [r7, #12]
     e32:	699b      	ldr	r3, [r3, #24]
     e34:	68f8      	ldr	r0, [r7, #12]
     e36:	4798      	blx	r3
	}
}
     e38:	bf00      	nop
     e3a:	3710      	adds	r7, #16
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}

00000e40 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     e40:	b480      	push	{r7}
     e42:	b083      	sub	sp, #12
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	681b      	ldr	r3, [r3, #0]
}
     e4c:	4618      	mov	r0, r3
     e4e:	370c      	adds	r7, #12
     e50:	46bd      	mov	sp, r7
     e52:	f85d 7b04 	ldr.w	r7, [sp], #4
     e56:	4770      	bx	lr

00000e58 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     e58:	b480      	push	{r7}
     e5a:	b083      	sub	sp, #12
     e5c:	af00      	add	r7, sp, #0
     e5e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	2b00      	cmp	r3, #0
     e64:	d002      	beq.n	e6c <list_get_next_element+0x14>
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	e000      	b.n	e6e <list_get_next_element+0x16>
     e6c:	2300      	movs	r3, #0
}
     e6e:	4618      	mov	r0, r3
     e70:	370c      	adds	r7, #12
     e72:	46bd      	mov	sp, r7
     e74:	f85d 7b04 	ldr.w	r7, [sp], #4
     e78:	4770      	bx	lr
	...

00000e7c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     e7c:	b580      	push	{r7, lr}
     e7e:	b084      	sub	sp, #16
     e80:	af00      	add	r7, sp, #0
     e82:	60f8      	str	r0, [r7, #12]
     e84:	60b9      	str	r1, [r7, #8]
     e86:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d004      	beq.n	e98 <timer_init+0x1c>
     e8e:	68bb      	ldr	r3, [r7, #8]
     e90:	2b00      	cmp	r3, #0
     e92:	d001      	beq.n	e98 <timer_init+0x1c>
     e94:	2301      	movs	r3, #1
     e96:	e000      	b.n	e9a <timer_init+0x1e>
     e98:	2300      	movs	r3, #0
     e9a:	f003 0301 	and.w	r3, r3, #1
     e9e:	b2db      	uxtb	r3, r3
     ea0:	223b      	movs	r2, #59	; 0x3b
     ea2:	490a      	ldr	r1, [pc, #40]	; (ecc <timer_init+0x50>)
     ea4:	4618      	mov	r0, r3
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <timer_init+0x54>)
     ea8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     eaa:	68fb      	ldr	r3, [r7, #12]
     eac:	68b9      	ldr	r1, [r7, #8]
     eae:	4618      	mov	r0, r3
     eb0:	4b08      	ldr	r3, [pc, #32]	; (ed4 <timer_init+0x58>)
     eb2:	4798      	blx	r3
	descr->time                           = 0;
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	2200      	movs	r2, #0
     eb8:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	4a06      	ldr	r2, [pc, #24]	; (ed8 <timer_init+0x5c>)
     ebe:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     ec0:	2300      	movs	r3, #0
}
     ec2:	4618      	mov	r0, r3
     ec4:	3710      	adds	r7, #16
     ec6:	46bd      	mov	sp, r7
     ec8:	bd80      	pop	{r7, pc}
     eca:	bf00      	nop
     ecc:	00002638 	.word	0x00002638
     ed0:	00001215 	.word	0x00001215
     ed4:	0000172d 	.word	0x0000172d
     ed8:	00000f8d 	.word	0x00000f8d

00000edc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     edc:	b580      	push	{r7, lr}
     ede:	b088      	sub	sp, #32
     ee0:	af00      	add	r7, sp, #0
     ee2:	60f8      	str	r0, [r7, #12]
     ee4:	60b9      	str	r1, [r7, #8]
     ee6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     ee8:	2300      	movs	r3, #0
     eea:	61bb      	str	r3, [r7, #24]
     eec:	68f8      	ldr	r0, [r7, #12]
     eee:	4b23      	ldr	r3, [pc, #140]	; (f7c <timer_add_timer_task+0xa0>)
     ef0:	4798      	blx	r3
     ef2:	6138      	str	r0, [r7, #16]

	if (!head) {
     ef4:	693b      	ldr	r3, [r7, #16]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d104      	bne.n	f04 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     efa:	68b9      	ldr	r1, [r7, #8]
     efc:	68f8      	ldr	r0, [r7, #12]
     efe:	4b20      	ldr	r3, [pc, #128]	; (f80 <timer_add_timer_task+0xa4>)
     f00:	4798      	blx	r3
		return;
     f02:	e037      	b.n	f74 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     f04:	693b      	ldr	r3, [r7, #16]
     f06:	61fb      	str	r3, [r7, #28]
     f08:	e022      	b.n	f50 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
     f0a:	69fb      	ldr	r3, [r7, #28]
     f0c:	685a      	ldr	r2, [r3, #4]
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	429a      	cmp	r2, r3
     f12:	d808      	bhi.n	f26 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
     f14:	69fb      	ldr	r3, [r7, #28]
     f16:	689a      	ldr	r2, [r3, #8]
     f18:	69fb      	ldr	r3, [r7, #28]
     f1a:	6859      	ldr	r1, [r3, #4]
     f1c:	687b      	ldr	r3, [r7, #4]
     f1e:	1acb      	subs	r3, r1, r3
     f20:	4413      	add	r3, r2
     f22:	617b      	str	r3, [r7, #20]
     f24:	e009      	b.n	f3a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     f26:	69fb      	ldr	r3, [r7, #28]
     f28:	689a      	ldr	r2, [r3, #8]
     f2a:	69fb      	ldr	r3, [r7, #28]
     f2c:	685b      	ldr	r3, [r3, #4]
     f2e:	441a      	add	r2, r3
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	425b      	negs	r3, r3
     f34:	4413      	add	r3, r2
     f36:	3301      	adds	r3, #1
     f38:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
     f3a:	68bb      	ldr	r3, [r7, #8]
     f3c:	689a      	ldr	r2, [r3, #8]
     f3e:	697b      	ldr	r3, [r7, #20]
     f40:	429a      	cmp	r2, r3
     f42:	d909      	bls.n	f58 <timer_add_timer_task+0x7c>
			break;
		prev = it;
     f44:	69fb      	ldr	r3, [r7, #28]
     f46:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     f48:	69f8      	ldr	r0, [r7, #28]
     f4a:	4b0e      	ldr	r3, [pc, #56]	; (f84 <timer_add_timer_task+0xa8>)
     f4c:	4798      	blx	r3
     f4e:	61f8      	str	r0, [r7, #28]
     f50:	69fb      	ldr	r3, [r7, #28]
     f52:	2b00      	cmp	r3, #0
     f54:	d1d9      	bne.n	f0a <timer_add_timer_task+0x2e>
     f56:	e000      	b.n	f5a <timer_add_timer_task+0x7e>
			break;
     f58:	bf00      	nop
	}

	if (it == head) {
     f5a:	69fa      	ldr	r2, [r7, #28]
     f5c:	693b      	ldr	r3, [r7, #16]
     f5e:	429a      	cmp	r2, r3
     f60:	d104      	bne.n	f6c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
     f62:	68b9      	ldr	r1, [r7, #8]
     f64:	68f8      	ldr	r0, [r7, #12]
     f66:	4b06      	ldr	r3, [pc, #24]	; (f80 <timer_add_timer_task+0xa4>)
     f68:	4798      	blx	r3
     f6a:	e003      	b.n	f74 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
     f6c:	68b9      	ldr	r1, [r7, #8]
     f6e:	69b8      	ldr	r0, [r7, #24]
     f70:	4b05      	ldr	r3, [pc, #20]	; (f88 <timer_add_timer_task+0xac>)
     f72:	4798      	blx	r3
	}
}
     f74:	3720      	adds	r7, #32
     f76:	46bd      	mov	sp, r7
     f78:	bd80      	pop	{r7, pc}
     f7a:	bf00      	nop
     f7c:	00000e41 	.word	0x00000e41
     f80:	00001275 	.word	0x00001275
     f84:	00000e59 	.word	0x00000e59
     f88:	000012cd 	.word	0x000012cd

00000f8c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     f8c:	b580      	push	{r7, lr}
     f8e:	b086      	sub	sp, #24
     f90:	af00      	add	r7, sp, #0
     f92:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
     f98:	693b      	ldr	r3, [r7, #16]
     f9a:	3314      	adds	r3, #20
     f9c:	4618      	mov	r0, r3
     f9e:	4b27      	ldr	r3, [pc, #156]	; (103c <timer_process_counted+0xb0>)
     fa0:	4798      	blx	r3
     fa2:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
     fa4:	693b      	ldr	r3, [r7, #16]
     fa6:	691b      	ldr	r3, [r3, #16]
     fa8:	1c5a      	adds	r2, r3, #1
     faa:	693b      	ldr	r3, [r7, #16]
     fac:	611a      	str	r2, [r3, #16]
     fae:	693b      	ldr	r3, [r7, #16]
     fb0:	691b      	ldr	r3, [r3, #16]
     fb2:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     fb4:	693b      	ldr	r3, [r7, #16]
     fb6:	7e1b      	ldrb	r3, [r3, #24]
     fb8:	b2db      	uxtb	r3, r3
     fba:	f003 0301 	and.w	r3, r3, #1
     fbe:	2b00      	cmp	r3, #0
     fc0:	d106      	bne.n	fd0 <timer_process_counted+0x44>
     fc2:	693b      	ldr	r3, [r7, #16]
     fc4:	7e1b      	ldrb	r3, [r3, #24]
     fc6:	b2db      	uxtb	r3, r3
     fc8:	f003 0302 	and.w	r3, r3, #2
     fcc:	2b00      	cmp	r3, #0
     fce:	d027      	beq.n	1020 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     fd0:	693b      	ldr	r3, [r7, #16]
     fd2:	7e1b      	ldrb	r3, [r3, #24]
     fd4:	b2db      	uxtb	r3, r3
     fd6:	f043 0302 	orr.w	r3, r3, #2
     fda:	b2da      	uxtb	r2, r3
     fdc:	693b      	ldr	r3, [r7, #16]
     fde:	761a      	strb	r2, [r3, #24]
		return;
     fe0:	e029      	b.n	1036 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
     fe2:	697b      	ldr	r3, [r7, #20]
     fe4:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
     fe6:	693b      	ldr	r3, [r7, #16]
     fe8:	3314      	adds	r3, #20
     fea:	4618      	mov	r0, r3
     fec:	4b14      	ldr	r3, [pc, #80]	; (1040 <timer_process_counted+0xb4>)
     fee:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     ff0:	68bb      	ldr	r3, [r7, #8]
     ff2:	7c1b      	ldrb	r3, [r3, #16]
     ff4:	2b01      	cmp	r3, #1
     ff6:	d109      	bne.n	100c <timer_process_counted+0x80>
			tmp->time_label = time;
     ff8:	68bb      	ldr	r3, [r7, #8]
     ffa:	68fa      	ldr	r2, [r7, #12]
     ffc:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     ffe:	693b      	ldr	r3, [r7, #16]
    1000:	3314      	adds	r3, #20
    1002:	68fa      	ldr	r2, [r7, #12]
    1004:	68b9      	ldr	r1, [r7, #8]
    1006:	4618      	mov	r0, r3
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <timer_process_counted+0xb8>)
    100a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    100c:	693b      	ldr	r3, [r7, #16]
    100e:	3314      	adds	r3, #20
    1010:	4618      	mov	r0, r3
    1012:	4b0a      	ldr	r3, [pc, #40]	; (103c <timer_process_counted+0xb0>)
    1014:	4798      	blx	r3
    1016:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    1018:	68bb      	ldr	r3, [r7, #8]
    101a:	68db      	ldr	r3, [r3, #12]
    101c:	68b8      	ldr	r0, [r7, #8]
    101e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1020:	697b      	ldr	r3, [r7, #20]
    1022:	2b00      	cmp	r3, #0
    1024:	d007      	beq.n	1036 <timer_process_counted+0xaa>
    1026:	697b      	ldr	r3, [r7, #20]
    1028:	685b      	ldr	r3, [r3, #4]
    102a:	68fa      	ldr	r2, [r7, #12]
    102c:	1ad2      	subs	r2, r2, r3
    102e:	697b      	ldr	r3, [r7, #20]
    1030:	689b      	ldr	r3, [r3, #8]
    1032:	429a      	cmp	r2, r3
    1034:	d2d5      	bcs.n	fe2 <timer_process_counted+0x56>
	}
}
    1036:	3718      	adds	r7, #24
    1038:	46bd      	mov	sp, r7
    103a:	bd80      	pop	{r7, pc}
    103c:	00000e41 	.word	0x00000e41
    1040:	000012f1 	.word	0x000012f1
    1044:	00000edd 	.word	0x00000edd

00001048 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1048:	b580      	push	{r7, lr}
    104a:	b086      	sub	sp, #24
    104c:	af00      	add	r7, sp, #0
    104e:	60f8      	str	r0, [r7, #12]
    1050:	60b9      	str	r1, [r7, #8]
    1052:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	2b00      	cmp	r3, #0
    1058:	d004      	beq.n	1064 <usart_sync_init+0x1c>
    105a:	68bb      	ldr	r3, [r7, #8]
    105c:	2b00      	cmp	r3, #0
    105e:	d001      	beq.n	1064 <usart_sync_init+0x1c>
    1060:	2301      	movs	r3, #1
    1062:	e000      	b.n	1066 <usart_sync_init+0x1e>
    1064:	2300      	movs	r3, #0
    1066:	f003 0301 	and.w	r3, r3, #1
    106a:	b2db      	uxtb	r3, r3
    106c:	2234      	movs	r2, #52	; 0x34
    106e:	490d      	ldr	r1, [pc, #52]	; (10a4 <usart_sync_init+0x5c>)
    1070:	4618      	mov	r0, r3
    1072:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <usart_sync_init+0x60>)
    1074:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	3308      	adds	r3, #8
    107a:	68b9      	ldr	r1, [r7, #8]
    107c:	4618      	mov	r0, r3
    107e:	4b0b      	ldr	r3, [pc, #44]	; (10ac <usart_sync_init+0x64>)
    1080:	4798      	blx	r3
    1082:	6178      	str	r0, [r7, #20]
	if (init_status) {
    1084:	697b      	ldr	r3, [r7, #20]
    1086:	2b00      	cmp	r3, #0
    1088:	d001      	beq.n	108e <usart_sync_init+0x46>
		return init_status;
    108a:	697b      	ldr	r3, [r7, #20]
    108c:	e006      	b.n	109c <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	4a07      	ldr	r2, [pc, #28]	; (10b0 <usart_sync_init+0x68>)
    1092:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1094:	68fb      	ldr	r3, [r7, #12]
    1096:	4a07      	ldr	r2, [pc, #28]	; (10b4 <usart_sync_init+0x6c>)
    1098:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    109a:	2300      	movs	r3, #0
}
    109c:	4618      	mov	r0, r3
    109e:	3718      	adds	r7, #24
    10a0:	46bd      	mov	sp, r7
    10a2:	bd80      	pop	{r7, pc}
    10a4:	00002650 	.word	0x00002650
    10a8:	00001215 	.word	0x00001215
    10ac:	00001a49 	.word	0x00001a49
    10b0:	00001181 	.word	0x00001181
    10b4:	000010b9 	.word	0x000010b9

000010b8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b086      	sub	sp, #24
    10bc:	af00      	add	r7, sp, #0
    10be:	60f8      	str	r0, [r7, #12]
    10c0:	60b9      	str	r1, [r7, #8]
    10c2:	4613      	mov	r3, r2
    10c4:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    10c6:	2300      	movs	r3, #0
    10c8:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d007      	beq.n	10e4 <usart_sync_write+0x2c>
    10d4:	68bb      	ldr	r3, [r7, #8]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d004      	beq.n	10e4 <usart_sync_write+0x2c>
    10da:	88fb      	ldrh	r3, [r7, #6]
    10dc:	2b00      	cmp	r3, #0
    10de:	d001      	beq.n	10e4 <usart_sync_write+0x2c>
    10e0:	2301      	movs	r3, #1
    10e2:	e000      	b.n	10e6 <usart_sync_write+0x2e>
    10e4:	2300      	movs	r3, #0
    10e6:	f003 0301 	and.w	r3, r3, #1
    10ea:	b2db      	uxtb	r3, r3
    10ec:	22f1      	movs	r2, #241	; 0xf1
    10ee:	491f      	ldr	r1, [pc, #124]	; (116c <usart_sync_write+0xb4>)
    10f0:	4618      	mov	r0, r3
    10f2:	4b1f      	ldr	r3, [pc, #124]	; (1170 <usart_sync_write+0xb8>)
    10f4:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    10f6:	bf00      	nop
    10f8:	693b      	ldr	r3, [r7, #16]
    10fa:	3308      	adds	r3, #8
    10fc:	4618      	mov	r0, r3
    10fe:	4b1d      	ldr	r3, [pc, #116]	; (1174 <usart_sync_write+0xbc>)
    1100:	4798      	blx	r3
    1102:	4603      	mov	r3, r0
    1104:	f083 0301 	eor.w	r3, r3, #1
    1108:	b2db      	uxtb	r3, r3
    110a:	2b00      	cmp	r3, #0
    110c:	d1f4      	bne.n	10f8 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    110e:	693b      	ldr	r3, [r7, #16]
    1110:	f103 0008 	add.w	r0, r3, #8
    1114:	68ba      	ldr	r2, [r7, #8]
    1116:	697b      	ldr	r3, [r7, #20]
    1118:	4413      	add	r3, r2
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	4619      	mov	r1, r3
    111e:	4b16      	ldr	r3, [pc, #88]	; (1178 <usart_sync_write+0xc0>)
    1120:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1122:	bf00      	nop
    1124:	693b      	ldr	r3, [r7, #16]
    1126:	3308      	adds	r3, #8
    1128:	4618      	mov	r0, r3
    112a:	4b12      	ldr	r3, [pc, #72]	; (1174 <usart_sync_write+0xbc>)
    112c:	4798      	blx	r3
    112e:	4603      	mov	r3, r0
    1130:	f083 0301 	eor.w	r3, r3, #1
    1134:	b2db      	uxtb	r3, r3
    1136:	2b00      	cmp	r3, #0
    1138:	d1f4      	bne.n	1124 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
    113a:	697b      	ldr	r3, [r7, #20]
    113c:	3301      	adds	r3, #1
    113e:	617b      	str	r3, [r7, #20]
    1140:	88fb      	ldrh	r3, [r7, #6]
    1142:	697a      	ldr	r2, [r7, #20]
    1144:	429a      	cmp	r2, r3
    1146:	d3e2      	bcc.n	110e <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1148:	bf00      	nop
    114a:	693b      	ldr	r3, [r7, #16]
    114c:	3308      	adds	r3, #8
    114e:	4618      	mov	r0, r3
    1150:	4b0a      	ldr	r3, [pc, #40]	; (117c <usart_sync_write+0xc4>)
    1152:	4798      	blx	r3
    1154:	4603      	mov	r3, r0
    1156:	f083 0301 	eor.w	r3, r3, #1
    115a:	b2db      	uxtb	r3, r3
    115c:	2b00      	cmp	r3, #0
    115e:	d1f4      	bne.n	114a <usart_sync_write+0x92>
		;
	return (int32_t)offset;
    1160:	697b      	ldr	r3, [r7, #20]
}
    1162:	4618      	mov	r0, r3
    1164:	3718      	adds	r7, #24
    1166:	46bd      	mov	sp, r7
    1168:	bd80      	pop	{r7, pc}
    116a:	bf00      	nop
    116c:	00002650 	.word	0x00002650
    1170:	00001215 	.word	0x00001215
    1174:	00001ad9 	.word	0x00001ad9
    1178:	00001a8d 	.word	0x00001a8d
    117c:	00001af9 	.word	0x00001af9

00001180 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1180:	b590      	push	{r4, r7, lr}
    1182:	b087      	sub	sp, #28
    1184:	af00      	add	r7, sp, #0
    1186:	60f8      	str	r0, [r7, #12]
    1188:	60b9      	str	r1, [r7, #8]
    118a:	4613      	mov	r3, r2
    118c:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    118e:	2300      	movs	r3, #0
    1190:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1192:	68fb      	ldr	r3, [r7, #12]
    1194:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	2b00      	cmp	r3, #0
    119a:	d007      	beq.n	11ac <usart_sync_read+0x2c>
    119c:	68bb      	ldr	r3, [r7, #8]
    119e:	2b00      	cmp	r3, #0
    11a0:	d004      	beq.n	11ac <usart_sync_read+0x2c>
    11a2:	88fb      	ldrh	r3, [r7, #6]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d001      	beq.n	11ac <usart_sync_read+0x2c>
    11a8:	2301      	movs	r3, #1
    11aa:	e000      	b.n	11ae <usart_sync_read+0x2e>
    11ac:	2300      	movs	r3, #0
    11ae:	f003 0301 	and.w	r3, r3, #1
    11b2:	b2db      	uxtb	r3, r3
    11b4:	f44f 7286 	mov.w	r2, #268	; 0x10c
    11b8:	4912      	ldr	r1, [pc, #72]	; (1204 <usart_sync_read+0x84>)
    11ba:	4618      	mov	r0, r3
    11bc:	4b12      	ldr	r3, [pc, #72]	; (1208 <usart_sync_read+0x88>)
    11be:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    11c0:	bf00      	nop
    11c2:	693b      	ldr	r3, [r7, #16]
    11c4:	3308      	adds	r3, #8
    11c6:	4618      	mov	r0, r3
    11c8:	4b10      	ldr	r3, [pc, #64]	; (120c <usart_sync_read+0x8c>)
    11ca:	4798      	blx	r3
    11cc:	4603      	mov	r3, r0
    11ce:	f083 0301 	eor.w	r3, r3, #1
    11d2:	b2db      	uxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1f4      	bne.n	11c2 <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    11d8:	68ba      	ldr	r2, [r7, #8]
    11da:	697b      	ldr	r3, [r7, #20]
    11dc:	18d4      	adds	r4, r2, r3
    11de:	693b      	ldr	r3, [r7, #16]
    11e0:	3308      	adds	r3, #8
    11e2:	4618      	mov	r0, r3
    11e4:	4b0a      	ldr	r3, [pc, #40]	; (1210 <usart_sync_read+0x90>)
    11e6:	4798      	blx	r3
    11e8:	4603      	mov	r3, r0
    11ea:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    11ec:	697b      	ldr	r3, [r7, #20]
    11ee:	3301      	adds	r3, #1
    11f0:	617b      	str	r3, [r7, #20]
    11f2:	88fb      	ldrh	r3, [r7, #6]
    11f4:	697a      	ldr	r2, [r7, #20]
    11f6:	429a      	cmp	r2, r3
    11f8:	d3e2      	bcc.n	11c0 <usart_sync_read+0x40>

	return (int32_t)offset;
    11fa:	697b      	ldr	r3, [r7, #20]
}
    11fc:	4618      	mov	r0, r3
    11fe:	371c      	adds	r7, #28
    1200:	46bd      	mov	sp, r7
    1202:	bd90      	pop	{r4, r7, pc}
    1204:	00002650 	.word	0x00002650
    1208:	00001215 	.word	0x00001215
    120c:	00001b19 	.word	0x00001b19
    1210:	00001ab5 	.word	0x00001ab5

00001214 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1214:	b480      	push	{r7}
    1216:	b085      	sub	sp, #20
    1218:	af00      	add	r7, sp, #0
    121a:	4603      	mov	r3, r0
    121c:	60b9      	str	r1, [r7, #8]
    121e:	607a      	str	r2, [r7, #4]
    1220:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    1222:	7bfb      	ldrb	r3, [r7, #15]
    1224:	f083 0301 	eor.w	r3, r3, #1
    1228:	b2db      	uxtb	r3, r3
    122a:	2b00      	cmp	r3, #0
    122c:	d000      	beq.n	1230 <assert+0x1c>
		__asm("BKPT #0");
    122e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1230:	bf00      	nop
    1232:	3714      	adds	r7, #20
    1234:	46bd      	mov	sp, r7
    1236:	f85d 7b04 	ldr.w	r7, [sp], #4
    123a:	4770      	bx	lr

0000123c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    123c:	b480      	push	{r7}
    123e:	b085      	sub	sp, #20
    1240:	af00      	add	r7, sp, #0
    1242:	6078      	str	r0, [r7, #4]
    1244:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	60fb      	str	r3, [r7, #12]
    124c:	e008      	b.n	1260 <is_list_element+0x24>
		if (it == element) {
    124e:	68fa      	ldr	r2, [r7, #12]
    1250:	683b      	ldr	r3, [r7, #0]
    1252:	429a      	cmp	r2, r3
    1254:	d101      	bne.n	125a <is_list_element+0x1e>
			return true;
    1256:	2301      	movs	r3, #1
    1258:	e006      	b.n	1268 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	60fb      	str	r3, [r7, #12]
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	2b00      	cmp	r3, #0
    1264:	d1f3      	bne.n	124e <is_list_element+0x12>
		}
	}

	return false;
    1266:	2300      	movs	r3, #0
}
    1268:	4618      	mov	r0, r3
    126a:	3714      	adds	r7, #20
    126c:	46bd      	mov	sp, r7
    126e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1272:	4770      	bx	lr

00001274 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1274:	b580      	push	{r7, lr}
    1276:	b082      	sub	sp, #8
    1278:	af00      	add	r7, sp, #0
    127a:	6078      	str	r0, [r7, #4]
    127c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    127e:	6839      	ldr	r1, [r7, #0]
    1280:	6878      	ldr	r0, [r7, #4]
    1282:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <list_insert_as_head+0x4c>)
    1284:	4798      	blx	r3
    1286:	4603      	mov	r3, r0
    1288:	2b00      	cmp	r3, #0
    128a:	bf14      	ite	ne
    128c:	2301      	movne	r3, #1
    128e:	2300      	moveq	r3, #0
    1290:	b2db      	uxtb	r3, r3
    1292:	f083 0301 	eor.w	r3, r3, #1
    1296:	b2db      	uxtb	r3, r3
    1298:	f003 0301 	and.w	r3, r3, #1
    129c:	b2db      	uxtb	r3, r3
    129e:	2239      	movs	r2, #57	; 0x39
    12a0:	4908      	ldr	r1, [pc, #32]	; (12c4 <list_insert_as_head+0x50>)
    12a2:	4618      	mov	r0, r3
    12a4:	4b08      	ldr	r3, [pc, #32]	; (12c8 <list_insert_as_head+0x54>)
    12a6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	681a      	ldr	r2, [r3, #0]
    12ac:	683b      	ldr	r3, [r7, #0]
    12ae:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	683a      	ldr	r2, [r7, #0]
    12b4:	601a      	str	r2, [r3, #0]
}
    12b6:	bf00      	nop
    12b8:	3708      	adds	r7, #8
    12ba:	46bd      	mov	sp, r7
    12bc:	bd80      	pop	{r7, pc}
    12be:	bf00      	nop
    12c0:	0000123d 	.word	0x0000123d
    12c4:	0000266c 	.word	0x0000266c
    12c8:	00001215 	.word	0x00001215

000012cc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    12cc:	b480      	push	{r7}
    12ce:	b083      	sub	sp, #12
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
    12d4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	681a      	ldr	r2, [r3, #0]
    12da:	683b      	ldr	r3, [r7, #0]
    12dc:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	683a      	ldr	r2, [r7, #0]
    12e2:	601a      	str	r2, [r3, #0]
}
    12e4:	bf00      	nop
    12e6:	370c      	adds	r7, #12
    12e8:	46bd      	mov	sp, r7
    12ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ee:	4770      	bx	lr

000012f0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    12f0:	b480      	push	{r7}
    12f2:	b085      	sub	sp, #20
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d009      	beq.n	1314 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	681b      	ldr	r3, [r3, #0]
    130a:	681a      	ldr	r2, [r3, #0]
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	e000      	b.n	1316 <list_remove_head+0x26>
	}

	return NULL;
    1314:	2300      	movs	r3, #0
}
    1316:	4618      	mov	r0, r3
    1318:	3714      	adds	r7, #20
    131a:	46bd      	mov	sp, r7
    131c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1320:	4770      	bx	lr

00001322 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1322:	b480      	push	{r7}
    1324:	b083      	sub	sp, #12
    1326:	af00      	add	r7, sp, #0
    1328:	6078      	str	r0, [r7, #4]
    132a:	460b      	mov	r3, r1
    132c:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    132e:	687b      	ldr	r3, [r7, #4]
    1330:	881b      	ldrh	r3, [r3, #0]
    1332:	b29a      	uxth	r2, r3
    1334:	887b      	ldrh	r3, [r7, #2]
    1336:	021b      	lsls	r3, r3, #8
    1338:	b29b      	uxth	r3, r3
    133a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    133e:	b29b      	uxth	r3, r3
    1340:	4313      	orrs	r3, r2
    1342:	b29a      	uxth	r2, r3
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1348:	bf00      	nop
    134a:	370c      	adds	r7, #12
    134c:	46bd      	mov	sp, r7
    134e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1352:	4770      	bx	lr

00001354 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1354:	b580      	push	{r7, lr}
    1356:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1358:	2100      	movs	r1, #0
    135a:	4808      	ldr	r0, [pc, #32]	; (137c <_init_chip+0x28>)
    135c:	4b08      	ldr	r3, [pc, #32]	; (1380 <_init_chip+0x2c>)
    135e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1360:	4b08      	ldr	r3, [pc, #32]	; (1384 <_init_chip+0x30>)
    1362:	4798      	blx	r3
	_oscctrl_init_sources();
    1364:	4b08      	ldr	r3, [pc, #32]	; (1388 <_init_chip+0x34>)
    1366:	4798      	blx	r3
	_mclk_init();
    1368:	4b08      	ldr	r3, [pc, #32]	; (138c <_init_chip+0x38>)
    136a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    136c:	4b08      	ldr	r3, [pc, #32]	; (1390 <_init_chip+0x3c>)
    136e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1370:	f640 70ff 	movw	r0, #4095	; 0xfff
    1374:	4b07      	ldr	r3, [pc, #28]	; (1394 <_init_chip+0x40>)
    1376:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    1378:	bf00      	nop
    137a:	bd80      	pop	{r7, pc}
    137c:	41004000 	.word	0x41004000
    1380:	00001323 	.word	0x00001323
    1384:	000014c1 	.word	0x000014c1
    1388:	00001559 	.word	0x00001559
    138c:	0000143d 	.word	0x0000143d
    1390:	00001599 	.word	0x00001599
    1394:	000013ed 	.word	0x000013ed

00001398 <hri_gclk_wait_for_sync>:
{
    1398:	b480      	push	{r7}
    139a:	b083      	sub	sp, #12
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
    13a0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    13a2:	bf00      	nop
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	685a      	ldr	r2, [r3, #4]
    13a8:	683b      	ldr	r3, [r7, #0]
    13aa:	4013      	ands	r3, r2
    13ac:	2b00      	cmp	r3, #0
    13ae:	d1f9      	bne.n	13a4 <hri_gclk_wait_for_sync+0xc>
}
    13b0:	bf00      	nop
    13b2:	370c      	adds	r7, #12
    13b4:	46bd      	mov	sp, r7
    13b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13ba:	4770      	bx	lr

000013bc <hri_gclk_write_GENCTRL_reg>:
{
    13bc:	b580      	push	{r7, lr}
    13be:	b084      	sub	sp, #16
    13c0:	af00      	add	r7, sp, #0
    13c2:	60f8      	str	r0, [r7, #12]
    13c4:	460b      	mov	r3, r1
    13c6:	607a      	str	r2, [r7, #4]
    13c8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    13ca:	7afa      	ldrb	r2, [r7, #11]
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	3208      	adds	r2, #8
    13d0:	6879      	ldr	r1, [r7, #4]
    13d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    13d6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    13da:	68f8      	ldr	r0, [r7, #12]
    13dc:	4b02      	ldr	r3, [pc, #8]	; (13e8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    13de:	4798      	blx	r3
}
    13e0:	bf00      	nop
    13e2:	3710      	adds	r7, #16
    13e4:	46bd      	mov	sp, r7
    13e6:	bd80      	pop	{r7, pc}
    13e8:	00001399 	.word	0x00001399

000013ec <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	b082      	sub	sp, #8
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	f003 0301 	and.w	r3, r3, #1
    13fa:	2b00      	cmp	r3, #0
    13fc:	d004      	beq.n	1408 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    13fe:	4a04      	ldr	r2, [pc, #16]	; (1410 <_gclk_init_generators_by_fref+0x24>)
    1400:	2100      	movs	r1, #0
    1402:	4804      	ldr	r0, [pc, #16]	; (1414 <_gclk_init_generators_by_fref+0x28>)
    1404:	4b04      	ldr	r3, [pc, #16]	; (1418 <_gclk_init_generators_by_fref+0x2c>)
    1406:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1408:	bf00      	nop
    140a:	3708      	adds	r7, #8
    140c:	46bd      	mov	sp, r7
    140e:	bd80      	pop	{r7, pc}
    1410:	00010101 	.word	0x00010101
    1414:	40001c00 	.word	0x40001c00
    1418:	000013bd 	.word	0x000013bd

0000141c <hri_mclk_write_CPUDIV_reg>:
{
    141c:	b480      	push	{r7}
    141e:	b083      	sub	sp, #12
    1420:	af00      	add	r7, sp, #0
    1422:	6078      	str	r0, [r7, #4]
    1424:	460b      	mov	r3, r1
    1426:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	78fa      	ldrb	r2, [r7, #3]
    142c:	715a      	strb	r2, [r3, #5]
}
    142e:	bf00      	nop
    1430:	370c      	adds	r7, #12
    1432:	46bd      	mov	sp, r7
    1434:	f85d 7b04 	ldr.w	r7, [sp], #4
    1438:	4770      	bx	lr
	...

0000143c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <_mclk_init+0x1c>)
    1444:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    1446:	2101      	movs	r1, #1
    1448:	6878      	ldr	r0, [r7, #4]
    144a:	4b04      	ldr	r3, [pc, #16]	; (145c <_mclk_init+0x20>)
    144c:	4798      	blx	r3
}
    144e:	bf00      	nop
    1450:	3708      	adds	r7, #8
    1452:	46bd      	mov	sp, r7
    1454:	bd80      	pop	{r7, pc}
    1456:	bf00      	nop
    1458:	40000800 	.word	0x40000800
    145c:	0000141d 	.word	0x0000141d

00001460 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    1460:	b480      	push	{r7}
    1462:	b083      	sub	sp, #12
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
    1468:	460b      	mov	r3, r1
    146a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	78fa      	ldrb	r2, [r7, #3]
    1470:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1472:	bf00      	nop
    1474:	370c      	adds	r7, #12
    1476:	46bd      	mov	sp, r7
    1478:	f85d 7b04 	ldr.w	r7, [sp], #4
    147c:	4770      	bx	lr

0000147e <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    147e:	b480      	push	{r7}
    1480:	b085      	sub	sp, #20
    1482:	af00      	add	r7, sp, #0
    1484:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	69db      	ldr	r3, [r3, #28]
    148a:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	0a1b      	lsrs	r3, r3, #8
    1490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1494:	60fb      	str	r3, [r7, #12]
	return tmp;
    1496:	68fb      	ldr	r3, [r7, #12]
}
    1498:	4618      	mov	r0, r3
    149a:	3714      	adds	r7, #20
    149c:	46bd      	mov	sp, r7
    149e:	f85d 7b04 	ldr.w	r7, [sp], #4
    14a2:	4770      	bx	lr

000014a4 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    14a4:	b480      	push	{r7}
    14a6:	b083      	sub	sp, #12
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
    14ac:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	683a      	ldr	r2, [r7, #0]
    14b2:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    14b4:	bf00      	nop
    14b6:	370c      	adds	r7, #12
    14b8:	46bd      	mov	sp, r7
    14ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    14be:	4770      	bx	lr

000014c0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    14c6:	4b0c      	ldr	r3, [pc, #48]	; (14f8 <_osc32kctrl_init_sources+0x38>)
    14c8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    14ca:	2300      	movs	r3, #0
    14cc:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    14ce:	6878      	ldr	r0, [r7, #4]
    14d0:	4b0a      	ldr	r3, [pc, #40]	; (14fc <_osc32kctrl_init_sources+0x3c>)
    14d2:	4798      	blx	r3
    14d4:	4603      	mov	r3, r0
    14d6:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    14d8:	887b      	ldrh	r3, [r7, #2]
    14da:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    14dc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    14e0:	4619      	mov	r1, r3
    14e2:	6878      	ldr	r0, [r7, #4]
    14e4:	4b06      	ldr	r3, [pc, #24]	; (1500 <_osc32kctrl_init_sources+0x40>)
    14e6:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    14e8:	2101      	movs	r1, #1
    14ea:	6878      	ldr	r0, [r7, #4]
    14ec:	4b05      	ldr	r3, [pc, #20]	; (1504 <_osc32kctrl_init_sources+0x44>)
    14ee:	4798      	blx	r3
	(void)calib;
}
    14f0:	bf00      	nop
    14f2:	3708      	adds	r7, #8
    14f4:	46bd      	mov	sp, r7
    14f6:	bd80      	pop	{r7, pc}
    14f8:	40001400 	.word	0x40001400
    14fc:	0000147f 	.word	0x0000147f
    1500:	000014a5 	.word	0x000014a5
    1504:	00001461 	.word	0x00001461

00001508 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    1508:	b480      	push	{r7}
    150a:	b083      	sub	sp, #12
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	691b      	ldr	r3, [r3, #16]
    1514:	085b      	lsrs	r3, r3, #1
    1516:	f003 0301 	and.w	r3, r3, #1
    151a:	2b00      	cmp	r3, #0
    151c:	bf14      	ite	ne
    151e:	2301      	movne	r3, #1
    1520:	2300      	moveq	r3, #0
    1522:	b2db      	uxtb	r3, r3
}
    1524:	4618      	mov	r0, r3
    1526:	370c      	adds	r7, #12
    1528:	46bd      	mov	sp, r7
    152a:	f85d 7b04 	ldr.w	r7, [sp], #4
    152e:	4770      	bx	lr

00001530 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    1530:	b480      	push	{r7}
    1532:	b085      	sub	sp, #20
    1534:	af00      	add	r7, sp, #0
    1536:	60f8      	str	r0, [r7, #12]
    1538:	460b      	mov	r3, r1
    153a:	607a      	str	r2, [r7, #4]
    153c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    153e:	7afb      	ldrb	r3, [r7, #11]
    1540:	68fa      	ldr	r2, [r7, #12]
    1542:	3304      	adds	r3, #4
    1544:	009b      	lsls	r3, r3, #2
    1546:	4413      	add	r3, r2
    1548:	687a      	ldr	r2, [r7, #4]
    154a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    154c:	bf00      	nop
    154e:	3714      	adds	r7, #20
    1550:	46bd      	mov	sp, r7
    1552:	f85d 7b04 	ldr.w	r7, [sp], #4
    1556:	4770      	bx	lr

00001558 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1558:	b580      	push	{r7, lr}
    155a:	b082      	sub	sp, #8
    155c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    155e:	4b0a      	ldr	r3, [pc, #40]	; (1588 <_oscctrl_init_sources+0x30>)
    1560:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    1562:	4a0a      	ldr	r2, [pc, #40]	; (158c <_oscctrl_init_sources+0x34>)
    1564:	2101      	movs	r1, #1
    1566:	6878      	ldr	r0, [r7, #4]
    1568:	4b09      	ldr	r3, [pc, #36]	; (1590 <_oscctrl_init_sources+0x38>)
    156a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    156c:	bf00      	nop
    156e:	6878      	ldr	r0, [r7, #4]
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <_oscctrl_init_sources+0x3c>)
    1572:	4798      	blx	r3
    1574:	4603      	mov	r3, r0
    1576:	f083 0301 	eor.w	r3, r3, #1
    157a:	b2db      	uxtb	r3, r3
    157c:	2b00      	cmp	r3, #0
    157e:	d1f6      	bne.n	156e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1580:	bf00      	nop
    1582:	3708      	adds	r7, #8
    1584:	46bd      	mov	sp, r7
    1586:	bd80      	pop	{r7, pc}
    1588:	40001000 	.word	0x40001000
    158c:	03002606 	.word	0x03002606
    1590:	00001531 	.word	0x00001531
    1594:	00001509 	.word	0x00001509

00001598 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1598:	b480      	push	{r7}
    159a:	b083      	sub	sp, #12
    159c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    159e:	4b04      	ldr	r3, [pc, #16]	; (15b0 <_oscctrl_init_referenced_generators+0x18>)
    15a0:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    15a2:	bf00      	nop
    15a4:	370c      	adds	r7, #12
    15a6:	46bd      	mov	sp, r7
    15a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ac:	4770      	bx	lr
    15ae:	bf00      	nop
    15b0:	40001000 	.word	0x40001000

000015b4 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    15b4:	b480      	push	{r7}
    15b6:	b083      	sub	sp, #12
    15b8:	af00      	add	r7, sp, #0
    15ba:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	789b      	ldrb	r3, [r3, #2]
    15c0:	b2db      	uxtb	r3, r3
}
    15c2:	4618      	mov	r0, r3
    15c4:	370c      	adds	r7, #12
    15c6:	46bd      	mov	sp, r7
    15c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15cc:	4770      	bx	lr

000015ce <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    15ce:	b480      	push	{r7}
    15d0:	b083      	sub	sp, #12
    15d2:	af00      	add	r7, sp, #0
    15d4:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	685b      	ldr	r3, [r3, #4]
}
    15da:	4618      	mov	r0, r3
    15dc:	370c      	adds	r7, #12
    15de:	46bd      	mov	sp, r7
    15e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    15e4:	4770      	bx	lr
	...

000015e8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    15e8:	b590      	push	{r4, r7, lr}
    15ea:	b083      	sub	sp, #12
    15ec:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    15ee:	4b17      	ldr	r3, [pc, #92]	; (164c <RAMECC_Handler+0x64>)
    15f0:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    15f2:	4817      	ldr	r0, [pc, #92]	; (1650 <RAMECC_Handler+0x68>)
    15f4:	4b17      	ldr	r3, [pc, #92]	; (1654 <RAMECC_Handler+0x6c>)
    15f6:	4798      	blx	r3
    15f8:	4603      	mov	r3, r0
    15fa:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    15fc:	683b      	ldr	r3, [r7, #0]
    15fe:	f003 0302 	and.w	r3, r3, #2
    1602:	2b00      	cmp	r3, #0
    1604:	d00c      	beq.n	1620 <RAMECC_Handler+0x38>
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	2b00      	cmp	r3, #0
    160c:	d008      	beq.n	1620 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    160e:	687b      	ldr	r3, [r7, #4]
    1610:	681c      	ldr	r4, [r3, #0]
    1612:	480f      	ldr	r0, [pc, #60]	; (1650 <RAMECC_Handler+0x68>)
    1614:	4b10      	ldr	r3, [pc, #64]	; (1658 <RAMECC_Handler+0x70>)
    1616:	4798      	blx	r3
    1618:	4603      	mov	r3, r0
    161a:	4618      	mov	r0, r3
    161c:	47a0      	blx	r4
    161e:	e012      	b.n	1646 <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1620:	683b      	ldr	r3, [r7, #0]
    1622:	f003 0301 	and.w	r3, r3, #1
    1626:	2b00      	cmp	r3, #0
    1628:	d00c      	beq.n	1644 <RAMECC_Handler+0x5c>
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	685b      	ldr	r3, [r3, #4]
    162e:	2b00      	cmp	r3, #0
    1630:	d008      	beq.n	1644 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	685c      	ldr	r4, [r3, #4]
    1636:	4806      	ldr	r0, [pc, #24]	; (1650 <RAMECC_Handler+0x68>)
    1638:	4b07      	ldr	r3, [pc, #28]	; (1658 <RAMECC_Handler+0x70>)
    163a:	4798      	blx	r3
    163c:	4603      	mov	r3, r0
    163e:	4618      	mov	r0, r3
    1640:	47a0      	blx	r4
    1642:	e000      	b.n	1646 <RAMECC_Handler+0x5e>
	} else {
		return;
    1644:	bf00      	nop
	}
}
    1646:	370c      	adds	r7, #12
    1648:	46bd      	mov	sp, r7
    164a:	bd90      	pop	{r4, r7, pc}
    164c:	2000009c 	.word	0x2000009c
    1650:	41020000 	.word	0x41020000
    1654:	000015b5 	.word	0x000015b5
    1658:	000015cf 	.word	0x000015cf

0000165c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
    1664:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1666:	bf00      	nop
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	691a      	ldr	r2, [r3, #16]
    166c:	683b      	ldr	r3, [r7, #0]
    166e:	4013      	ands	r3, r2
    1670:	2b00      	cmp	r3, #0
    1672:	d1f9      	bne.n	1668 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    1674:	bf00      	nop
    1676:	370c      	adds	r7, #12
    1678:	46bd      	mov	sp, r7
    167a:	f85d 7b04 	ldr.w	r7, [sp], #4
    167e:	4770      	bx	lr

00001680 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    1680:	b480      	push	{r7}
    1682:	b083      	sub	sp, #12
    1684:	af00      	add	r7, sp, #0
    1686:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	f44f 7280 	mov.w	r2, #256	; 0x100
    168e:	819a      	strh	r2, [r3, #12]
}
    1690:	bf00      	nop
    1692:	370c      	adds	r7, #12
    1694:	46bd      	mov	sp, r7
    1696:	f85d 7b04 	ldr.w	r7, [sp], #4
    169a:	4770      	bx	lr

0000169c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    169c:	b480      	push	{r7}
    169e:	b083      	sub	sp, #12
    16a0:	af00      	add	r7, sp, #0
    16a2:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    16a4:	687b      	ldr	r3, [r7, #4]
    16a6:	899b      	ldrh	r3, [r3, #12]
    16a8:	b29b      	uxth	r3, r3
}
    16aa:	4618      	mov	r0, r3
    16ac:	370c      	adds	r7, #12
    16ae:	46bd      	mov	sp, r7
    16b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b4:	4770      	bx	lr

000016b6 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    16b6:	b480      	push	{r7}
    16b8:	b083      	sub	sp, #12
    16ba:	af00      	add	r7, sp, #0
    16bc:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    16c4:	815a      	strh	r2, [r3, #10]
}
    16c6:	bf00      	nop
    16c8:	370c      	adds	r7, #12
    16ca:	46bd      	mov	sp, r7
    16cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    16d0:	4770      	bx	lr
	...

000016d4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b082      	sub	sp, #8
    16d8:	af00      	add	r7, sp, #0
    16da:	6078      	str	r0, [r7, #4]
    16dc:	460b      	mov	r3, r1
    16de:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	887a      	ldrh	r2, [r7, #2]
    16e4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    16e6:	f248 0103 	movw	r1, #32771	; 0x8003
    16ea:	6878      	ldr	r0, [r7, #4]
    16ec:	4b02      	ldr	r3, [pc, #8]	; (16f8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    16ee:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    16f0:	bf00      	nop
    16f2:	3708      	adds	r7, #8
    16f4:	46bd      	mov	sp, r7
    16f6:	bd80      	pop	{r7, pc}
    16f8:	0000165d 	.word	0x0000165d

000016fc <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    16fc:	b580      	push	{r7, lr}
    16fe:	b084      	sub	sp, #16
    1700:	af00      	add	r7, sp, #0
    1702:	60f8      	str	r0, [r7, #12]
    1704:	460b      	mov	r3, r1
    1706:	607a      	str	r2, [r7, #4]
    1708:	72fb      	strb	r3, [r7, #11]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    170a:	7afa      	ldrb	r2, [r7, #11]
    170c:	68fb      	ldr	r3, [r7, #12]
    170e:	3208      	adds	r2, #8
    1710:	6879      	ldr	r1, [r7, #4]
    1712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    1716:	2160      	movs	r1, #96	; 0x60
    1718:	68f8      	ldr	r0, [r7, #12]
    171a:	4b03      	ldr	r3, [pc, #12]	; (1728 <hri_rtcmode0_write_COMP_reg+0x2c>)
    171c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    171e:	bf00      	nop
    1720:	3710      	adds	r7, #16
    1722:	46bd      	mov	sp, r7
    1724:	bd80      	pop	{r7, pc}
    1726:	bf00      	nop
    1728:	0000165d 	.word	0x0000165d

0000172c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    172c:	b580      	push	{r7, lr}
    172e:	b082      	sub	sp, #8
    1730:	af00      	add	r7, sp, #0
    1732:	6078      	str	r0, [r7, #4]
    1734:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	2b00      	cmp	r3, #0
    173a:	bf14      	ite	ne
    173c:	2301      	movne	r3, #1
    173e:	2300      	moveq	r3, #0
    1740:	b2db      	uxtb	r3, r3
    1742:	2230      	movs	r2, #48	; 0x30
    1744:	4916      	ldr	r1, [pc, #88]	; (17a0 <_timer_init+0x74>)
    1746:	4618      	mov	r0, r3
    1748:	4b16      	ldr	r3, [pc, #88]	; (17a4 <_timer_init+0x78>)
    174a:	4798      	blx	r3

	dev->hw = hw;
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	683a      	ldr	r2, [r7, #0]
    1750:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	68db      	ldr	r3, [r3, #12]
    1756:	2101      	movs	r1, #1
    1758:	4618      	mov	r0, r3
    175a:	4b13      	ldr	r3, [pc, #76]	; (17a8 <_timer_init+0x7c>)
    175c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	68db      	ldr	r3, [r3, #12]
    1762:	2101      	movs	r1, #1
    1764:	4618      	mov	r0, r3
    1766:	4b11      	ldr	r3, [pc, #68]	; (17ac <_timer_init+0x80>)
    1768:	4798      	blx	r3
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    176a:	687b      	ldr	r3, [r7, #4]
    176c:	68db      	ldr	r3, [r3, #12]
	hri_rtcmode0_write_CTRLA_reg(
    176e:	f248 0180 	movw	r1, #32896	; 0x8080
    1772:	4618      	mov	r0, r3
    1774:	4b0c      	ldr	r3, [pc, #48]	; (17a8 <_timer_init+0x7c>)
    1776:	4798      	blx	r3
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	68db      	ldr	r3, [r3, #12]
    177c:	2220      	movs	r2, #32
    177e:	2100      	movs	r1, #0
    1780:	4618      	mov	r0, r3
    1782:	4b0b      	ldr	r3, [pc, #44]	; (17b0 <_timer_init+0x84>)
    1784:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	68db      	ldr	r3, [r3, #12]
    178a:	4618      	mov	r0, r3
    178c:	4b09      	ldr	r3, [pc, #36]	; (17b4 <_timer_init+0x88>)
    178e:	4798      	blx	r3

	_rtc_dev = dev;
    1790:	4a09      	ldr	r2, [pc, #36]	; (17b8 <_timer_init+0x8c>)
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    1796:	2300      	movs	r3, #0
}
    1798:	4618      	mov	r0, r3
    179a:	3708      	adds	r7, #8
    179c:	46bd      	mov	sp, r7
    179e:	bd80      	pop	{r7, pc}
    17a0:	0000268c 	.word	0x0000268c
    17a4:	00001215 	.word	0x00001215
    17a8:	000016d5 	.word	0x000016d5
    17ac:	0000165d 	.word	0x0000165d
    17b0:	000016fd 	.word	0x000016fd
    17b4:	000016b7 	.word	0x000016b7
    17b8:	20000050 	.word	0x20000050

000017bc <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    17bc:	b580      	push	{r7, lr}
    17be:	b084      	sub	sp, #16
    17c0:	af00      	add	r7, sp, #0
    17c2:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    17c4:	687b      	ldr	r3, [r7, #4]
    17c6:	68db      	ldr	r3, [r3, #12]
    17c8:	4618      	mov	r0, r3
    17ca:	4b0d      	ldr	r3, [pc, #52]	; (1800 <_rtc_timer_interrupt_handler+0x44>)
    17cc:	4798      	blx	r3
    17ce:	4603      	mov	r3, r0
    17d0:	81fb      	strh	r3, [r7, #14]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    17d2:	89fb      	ldrh	r3, [r7, #14]
    17d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    17d8:	2b00      	cmp	r3, #0
    17da:	d00c      	beq.n	17f6 <_rtc_timer_interrupt_handler+0x3a>
		if (dev->timer_cb.period_expired) {
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	681b      	ldr	r3, [r3, #0]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d003      	beq.n	17ec <_rtc_timer_interrupt_handler+0x30>
			dev->timer_cb.period_expired(dev);
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	6878      	ldr	r0, [r7, #4]
    17ea:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	68db      	ldr	r3, [r3, #12]
    17f0:	4618      	mov	r0, r3
    17f2:	4b04      	ldr	r3, [pc, #16]	; (1804 <_rtc_timer_interrupt_handler+0x48>)
    17f4:	4798      	blx	r3
	}
}
    17f6:	bf00      	nop
    17f8:	3710      	adds	r7, #16
    17fa:	46bd      	mov	sp, r7
    17fc:	bd80      	pop	{r7, pc}
    17fe:	bf00      	nop
    1800:	0000169d 	.word	0x0000169d
    1804:	00001681 	.word	0x00001681

00001808 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    1808:	b480      	push	{r7}
    180a:	af00      	add	r7, sp, #0
	return NULL;
    180c:	2300      	movs	r3, #0
}
    180e:	4618      	mov	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	f85d 7b04 	ldr.w	r7, [sp], #4
    1816:	4770      	bx	lr

00001818 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1818:	b580      	push	{r7, lr}
    181a:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    181c:	4b03      	ldr	r3, [pc, #12]	; (182c <RTC_Handler+0x14>)
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	4618      	mov	r0, r3
    1822:	4b03      	ldr	r3, [pc, #12]	; (1830 <RTC_Handler+0x18>)
    1824:	4798      	blx	r3
}
    1826:	bf00      	nop
    1828:	bd80      	pop	{r7, pc}
    182a:	bf00      	nop
    182c:	20000050 	.word	0x20000050
    1830:	000017bd 	.word	0x000017bd

00001834 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1834:	b480      	push	{r7}
    1836:	b083      	sub	sp, #12
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
    183c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    183e:	bf00      	nop
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	69da      	ldr	r2, [r3, #28]
    1844:	683b      	ldr	r3, [r7, #0]
    1846:	4013      	ands	r3, r2
    1848:	2b00      	cmp	r3, #0
    184a:	d1f9      	bne.n	1840 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    184c:	bf00      	nop
    184e:	370c      	adds	r7, #12
    1850:	46bd      	mov	sp, r7
    1852:	f85d 7b04 	ldr.w	r7, [sp], #4
    1856:	4770      	bx	lr

00001858 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1858:	b480      	push	{r7}
    185a:	b083      	sub	sp, #12
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
    1860:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	69da      	ldr	r2, [r3, #28]
    1866:	683b      	ldr	r3, [r7, #0]
    1868:	4013      	ands	r3, r2
    186a:	2b00      	cmp	r3, #0
    186c:	bf14      	ite	ne
    186e:	2301      	movne	r3, #1
    1870:	2300      	moveq	r3, #0
    1872:	b2db      	uxtb	r3, r3
}
    1874:	4618      	mov	r0, r3
    1876:	370c      	adds	r7, #12
    1878:	46bd      	mov	sp, r7
    187a:	f85d 7b04 	ldr.w	r7, [sp], #4
    187e:	4770      	bx	lr

00001880 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    1880:	b480      	push	{r7}
    1882:	b083      	sub	sp, #12
    1884:	af00      	add	r7, sp, #0
    1886:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	7e1b      	ldrb	r3, [r3, #24]
    188c:	b2db      	uxtb	r3, r3
    188e:	f003 0301 	and.w	r3, r3, #1
    1892:	2b00      	cmp	r3, #0
    1894:	bf14      	ite	ne
    1896:	2301      	movne	r3, #1
    1898:	2300      	moveq	r3, #0
    189a:	b2db      	uxtb	r3, r3
}
    189c:	4618      	mov	r0, r3
    189e:	370c      	adds	r7, #12
    18a0:	46bd      	mov	sp, r7
    18a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    18a6:	4770      	bx	lr

000018a8 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    18a8:	b480      	push	{r7}
    18aa:	b083      	sub	sp, #12
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	7e1b      	ldrb	r3, [r3, #24]
    18b4:	b2db      	uxtb	r3, r3
    18b6:	085b      	lsrs	r3, r3, #1
    18b8:	f003 0301 	and.w	r3, r3, #1
    18bc:	2b00      	cmp	r3, #0
    18be:	bf14      	ite	ne
    18c0:	2301      	movne	r3, #1
    18c2:	2300      	moveq	r3, #0
    18c4:	b2db      	uxtb	r3, r3
}
    18c6:	4618      	mov	r0, r3
    18c8:	370c      	adds	r7, #12
    18ca:	46bd      	mov	sp, r7
    18cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d0:	4770      	bx	lr

000018d2 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    18d2:	b480      	push	{r7}
    18d4:	b083      	sub	sp, #12
    18d6:	af00      	add	r7, sp, #0
    18d8:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	7e1b      	ldrb	r3, [r3, #24]
    18de:	b2db      	uxtb	r3, r3
    18e0:	089b      	lsrs	r3, r3, #2
    18e2:	f003 0301 	and.w	r3, r3, #1
    18e6:	2b00      	cmp	r3, #0
    18e8:	bf14      	ite	ne
    18ea:	2301      	movne	r3, #1
    18ec:	2300      	moveq	r3, #0
    18ee:	b2db      	uxtb	r3, r3
}
    18f0:	4618      	mov	r0, r3
    18f2:	370c      	adds	r7, #12
    18f4:	46bd      	mov	sp, r7
    18f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18fa:	4770      	bx	lr

000018fc <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b082      	sub	sp, #8
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	f023 0202 	bic.w	r2, r3, #2
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1910:	2103      	movs	r1, #3
    1912:	6878      	ldr	r0, [r7, #4]
    1914:	4b02      	ldr	r3, [pc, #8]	; (1920 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    1916:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1918:	bf00      	nop
    191a:	3708      	adds	r7, #8
    191c:	46bd      	mov	sp, r7
    191e:	bd80      	pop	{r7, pc}
    1920:	00001835 	.word	0x00001835

00001924 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1924:	b580      	push	{r7, lr}
    1926:	b084      	sub	sp, #16
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
    192c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    192e:	2103      	movs	r1, #3
    1930:	6878      	ldr	r0, [r7, #4]
    1932:	4b07      	ldr	r3, [pc, #28]	; (1950 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    1934:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1936:	687b      	ldr	r3, [r7, #4]
    1938:	681b      	ldr	r3, [r3, #0]
    193a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    193c:	68fa      	ldr	r2, [r7, #12]
    193e:	683b      	ldr	r3, [r7, #0]
    1940:	4013      	ands	r3, r2
    1942:	60fb      	str	r3, [r7, #12]
	return tmp;
    1944:	68fb      	ldr	r3, [r7, #12]
}
    1946:	4618      	mov	r0, r3
    1948:	3710      	adds	r7, #16
    194a:	46bd      	mov	sp, r7
    194c:	bd80      	pop	{r7, pc}
    194e:	bf00      	nop
    1950:	00001835 	.word	0x00001835

00001954 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    1954:	b580      	push	{r7, lr}
    1956:	b082      	sub	sp, #8
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	683a      	ldr	r2, [r7, #0]
    1962:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1964:	2103      	movs	r1, #3
    1966:	6878      	ldr	r0, [r7, #4]
    1968:	4b02      	ldr	r3, [pc, #8]	; (1974 <hri_sercomusart_write_CTRLA_reg+0x20>)
    196a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    196c:	bf00      	nop
    196e:	3708      	adds	r7, #8
    1970:	46bd      	mov	sp, r7
    1972:	bd80      	pop	{r7, pc}
    1974:	00001835 	.word	0x00001835

00001978 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    1978:	b580      	push	{r7, lr}
    197a:	b082      	sub	sp, #8
    197c:	af00      	add	r7, sp, #0
    197e:	6078      	str	r0, [r7, #4]
    1980:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	683a      	ldr	r2, [r7, #0]
    1986:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    1988:	211f      	movs	r1, #31
    198a:	6878      	ldr	r0, [r7, #4]
    198c:	4b02      	ldr	r3, [pc, #8]	; (1998 <hri_sercomusart_write_CTRLB_reg+0x20>)
    198e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1990:	bf00      	nop
    1992:	3708      	adds	r7, #8
    1994:	46bd      	mov	sp, r7
    1996:	bd80      	pop	{r7, pc}
    1998:	00001835 	.word	0x00001835

0000199c <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    199c:	b480      	push	{r7}
    199e:	b083      	sub	sp, #12
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
    19a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	683a      	ldr	r2, [r7, #0]
    19aa:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19ac:	bf00      	nop
    19ae:	370c      	adds	r7, #12
    19b0:	46bd      	mov	sp, r7
    19b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b6:	4770      	bx	lr

000019b8 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    19b8:	b480      	push	{r7}
    19ba:	b083      	sub	sp, #12
    19bc:	af00      	add	r7, sp, #0
    19be:	6078      	str	r0, [r7, #4]
    19c0:	460b      	mov	r3, r1
    19c2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	887a      	ldrh	r2, [r7, #2]
    19c8:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19ca:	bf00      	nop
    19cc:	370c      	adds	r7, #12
    19ce:	46bd      	mov	sp, r7
    19d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d4:	4770      	bx	lr

000019d6 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    19d6:	b480      	push	{r7}
    19d8:	b083      	sub	sp, #12
    19da:	af00      	add	r7, sp, #0
    19dc:	6078      	str	r0, [r7, #4]
    19de:	460b      	mov	r3, r1
    19e0:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	78fa      	ldrb	r2, [r7, #3]
    19e6:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19e8:	bf00      	nop
    19ea:	370c      	adds	r7, #12
    19ec:	46bd      	mov	sp, r7
    19ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f2:	4770      	bx	lr

000019f4 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    19f4:	b480      	push	{r7}
    19f6:	b083      	sub	sp, #12
    19f8:	af00      	add	r7, sp, #0
    19fa:	6078      	str	r0, [r7, #4]
    19fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	683a      	ldr	r2, [r7, #0]
    1a02:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a04:	bf00      	nop
    1a06:	370c      	adds	r7, #12
    1a08:	46bd      	mov	sp, r7
    1a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a0e:	4770      	bx	lr

00001a10 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1a10:	b480      	push	{r7}
    1a12:	b083      	sub	sp, #12
    1a14:	af00      	add	r7, sp, #0
    1a16:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1a1c:	4618      	mov	r0, r3
    1a1e:	370c      	adds	r7, #12
    1a20:	46bd      	mov	sp, r7
    1a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a26:	4770      	bx	lr

00001a28 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1a28:	b480      	push	{r7}
    1a2a:	b083      	sub	sp, #12
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
    1a30:	460b      	mov	r3, r1
    1a32:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	78fa      	ldrb	r2, [r7, #3]
    1a38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a3c:	bf00      	nop
    1a3e:	370c      	adds	r7, #12
    1a40:	46bd      	mov	sp, r7
    1a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a46:	4770      	bx	lr

00001a48 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    1a48:	b580      	push	{r7, lr}
    1a4a:	b082      	sub	sp, #8
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
    1a50:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	2b00      	cmp	r3, #0
    1a56:	bf14      	ite	ne
    1a58:	2301      	movne	r3, #1
    1a5a:	2300      	moveq	r3, #0
    1a5c:	b2db      	uxtb	r3, r3
    1a5e:	22bb      	movs	r2, #187	; 0xbb
    1a60:	4907      	ldr	r1, [pc, #28]	; (1a80 <_usart_sync_init+0x38>)
    1a62:	4618      	mov	r0, r3
    1a64:	4b07      	ldr	r3, [pc, #28]	; (1a84 <_usart_sync_init+0x3c>)
    1a66:	4798      	blx	r3

	device->hw = hw;
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	683a      	ldr	r2, [r7, #0]
    1a6c:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    1a6e:	6838      	ldr	r0, [r7, #0]
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <_usart_sync_init+0x40>)
    1a72:	4798      	blx	r3
    1a74:	4603      	mov	r3, r0
}
    1a76:	4618      	mov	r0, r3
    1a78:	3708      	adds	r7, #8
    1a7a:	46bd      	mov	sp, r7
    1a7c:	bd80      	pop	{r7, pc}
    1a7e:	bf00      	nop
    1a80:	000026a4 	.word	0x000026a4
    1a84:	00001215 	.word	0x00001215
    1a88:	00001bf9 	.word	0x00001bf9

00001a8c <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	78fa      	ldrb	r2, [r7, #3]
    1a9e:	4611      	mov	r1, r2
    1aa0:	4618      	mov	r0, r3
    1aa2:	4b03      	ldr	r3, [pc, #12]	; (1ab0 <_usart_sync_write_byte+0x24>)
    1aa4:	4798      	blx	r3
}
    1aa6:	bf00      	nop
    1aa8:	3708      	adds	r7, #8
    1aaa:	46bd      	mov	sp, r7
    1aac:	bd80      	pop	{r7, pc}
    1aae:	bf00      	nop
    1ab0:	000019f5 	.word	0x000019f5

00001ab4 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	b082      	sub	sp, #8
    1ab8:	af00      	add	r7, sp, #0
    1aba:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	4618      	mov	r0, r3
    1ac2:	4b04      	ldr	r3, [pc, #16]	; (1ad4 <_usart_sync_read_byte+0x20>)
    1ac4:	4798      	blx	r3
    1ac6:	4603      	mov	r3, r0
    1ac8:	b2db      	uxtb	r3, r3
}
    1aca:	4618      	mov	r0, r3
    1acc:	3708      	adds	r7, #8
    1ace:	46bd      	mov	sp, r7
    1ad0:	bd80      	pop	{r7, pc}
    1ad2:	bf00      	nop
    1ad4:	00001a11 	.word	0x00001a11

00001ad8 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    1ad8:	b580      	push	{r7, lr}
    1ada:	b082      	sub	sp, #8
    1adc:	af00      	add	r7, sp, #0
    1ade:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	4618      	mov	r0, r3
    1ae6:	4b03      	ldr	r3, [pc, #12]	; (1af4 <_usart_sync_is_ready_to_send+0x1c>)
    1ae8:	4798      	blx	r3
    1aea:	4603      	mov	r3, r0
}
    1aec:	4618      	mov	r0, r3
    1aee:	3708      	adds	r7, #8
    1af0:	46bd      	mov	sp, r7
    1af2:	bd80      	pop	{r7, pc}
    1af4:	00001881 	.word	0x00001881

00001af8 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b082      	sub	sp, #8
    1afc:	af00      	add	r7, sp, #0
    1afe:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	4618      	mov	r0, r3
    1b06:	4b03      	ldr	r3, [pc, #12]	; (1b14 <_usart_sync_is_transmit_done+0x1c>)
    1b08:	4798      	blx	r3
    1b0a:	4603      	mov	r3, r0
}
    1b0c:	4618      	mov	r0, r3
    1b0e:	3708      	adds	r7, #8
    1b10:	46bd      	mov	sp, r7
    1b12:	bd80      	pop	{r7, pc}
    1b14:	000018a9 	.word	0x000018a9

00001b18 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	681b      	ldr	r3, [r3, #0]
    1b24:	4618      	mov	r0, r3
    1b26:	4b03      	ldr	r3, [pc, #12]	; (1b34 <_usart_sync_is_byte_received+0x1c>)
    1b28:	4798      	blx	r3
    1b2a:	4603      	mov	r3, r0
}
    1b2c:	4618      	mov	r0, r3
    1b2e:	3708      	adds	r7, #8
    1b30:	46bd      	mov	sp, r7
    1b32:	bd80      	pop	{r7, pc}
    1b34:	000018d3 	.word	0x000018d3

00001b38 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1b38:	b4b0      	push	{r4, r5, r7}
    1b3a:	b08d      	sub	sp, #52	; 0x34
    1b3c:	af00      	add	r7, sp, #0
    1b3e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1b40:	4b13      	ldr	r3, [pc, #76]	; (1b90 <_sercom_get_hardware_index+0x58>)
    1b42:	f107 040c 	add.w	r4, r7, #12
    1b46:	461d      	mov	r5, r3
    1b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1b4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b54:	2300      	movs	r3, #0
    1b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    1b58:	e010      	b.n	1b7c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b5c:	009b      	lsls	r3, r3, #2
    1b5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1b62:	4413      	add	r3, r2
    1b64:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1b68:	461a      	mov	r2, r3
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	429a      	cmp	r2, r3
    1b6e:	d102      	bne.n	1b76 <_sercom_get_hardware_index+0x3e>
			return i;
    1b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b72:	b2db      	uxtb	r3, r3
    1b74:	e006      	b.n	1b84 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b78:	3301      	adds	r3, #1
    1b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    1b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b7e:	2b07      	cmp	r3, #7
    1b80:	d9eb      	bls.n	1b5a <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1b82:	2300      	movs	r3, #0
}
    1b84:	4618      	mov	r0, r3
    1b86:	3734      	adds	r7, #52	; 0x34
    1b88:	46bd      	mov	sp, r7
    1b8a:	bcb0      	pop	{r4, r5, r7}
    1b8c:	4770      	bx	lr
    1b8e:	bf00      	nop
    1b90:	000026c0 	.word	0x000026c0

00001b94 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b084      	sub	sp, #16
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1b9c:	6878      	ldr	r0, [r7, #4]
    1b9e:	4b12      	ldr	r3, [pc, #72]	; (1be8 <_get_sercom_index+0x54>)
    1ba0:	4798      	blx	r3
    1ba2:	4603      	mov	r3, r0
    1ba4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1ba6:	2300      	movs	r3, #0
    1ba8:	73fb      	strb	r3, [r7, #15]
    1baa:	e00f      	b.n	1bcc <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    1bac:	7bfa      	ldrb	r2, [r7, #15]
    1bae:	490f      	ldr	r1, [pc, #60]	; (1bec <_get_sercom_index+0x58>)
    1bb0:	4613      	mov	r3, r2
    1bb2:	005b      	lsls	r3, r3, #1
    1bb4:	4413      	add	r3, r2
    1bb6:	00db      	lsls	r3, r3, #3
    1bb8:	440b      	add	r3, r1
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	7bba      	ldrb	r2, [r7, #14]
    1bbe:	429a      	cmp	r2, r3
    1bc0:	d101      	bne.n	1bc6 <_get_sercom_index+0x32>
			return i;
    1bc2:	7bfb      	ldrb	r3, [r7, #15]
    1bc4:	e00c      	b.n	1be0 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1bc6:	7bfb      	ldrb	r3, [r7, #15]
    1bc8:	3301      	adds	r3, #1
    1bca:	73fb      	strb	r3, [r7, #15]
    1bcc:	7bfb      	ldrb	r3, [r7, #15]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d0ec      	beq.n	1bac <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1bd2:	f240 2247 	movw	r2, #583	; 0x247
    1bd6:	4906      	ldr	r1, [pc, #24]	; (1bf0 <_get_sercom_index+0x5c>)
    1bd8:	2000      	movs	r0, #0
    1bda:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <_get_sercom_index+0x60>)
    1bdc:	4798      	blx	r3
	return 0;
    1bde:	2300      	movs	r3, #0
}
    1be0:	4618      	mov	r0, r3
    1be2:	3710      	adds	r7, #16
    1be4:	46bd      	mov	sp, r7
    1be6:	bd80      	pop	{r7, pc}
    1be8:	00001b39 	.word	0x00001b39
    1bec:	20000000 	.word	0x20000000
    1bf0:	000026a4 	.word	0x000026a4
    1bf4:	00001215 	.word	0x00001215

00001bf8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1bf8:	b580      	push	{r7, lr}
    1bfa:	b084      	sub	sp, #16
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1c00:	6878      	ldr	r0, [r7, #4]
    1c02:	4b61      	ldr	r3, [pc, #388]	; (1d88 <_usart_init+0x190>)
    1c04:	4798      	blx	r3
    1c06:	4603      	mov	r3, r0
    1c08:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1c0a:	2101      	movs	r1, #1
    1c0c:	6878      	ldr	r0, [r7, #4]
    1c0e:	4b5f      	ldr	r3, [pc, #380]	; (1d8c <_usart_init+0x194>)
    1c10:	4798      	blx	r3
    1c12:	4603      	mov	r3, r0
    1c14:	f083 0301 	eor.w	r3, r3, #1
    1c18:	b2db      	uxtb	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d020      	beq.n	1c60 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1c1e:	7bfa      	ldrb	r2, [r7, #15]
    1c20:	495b      	ldr	r1, [pc, #364]	; (1d90 <_usart_init+0x198>)
    1c22:	4613      	mov	r3, r2
    1c24:	005b      	lsls	r3, r3, #1
    1c26:	4413      	add	r3, r2
    1c28:	00db      	lsls	r3, r3, #3
    1c2a:	440b      	add	r3, r1
    1c2c:	3304      	adds	r3, #4
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	f003 031c 	and.w	r3, r3, #28
    1c34:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1c36:	2102      	movs	r1, #2
    1c38:	6878      	ldr	r0, [r7, #4]
    1c3a:	4b56      	ldr	r3, [pc, #344]	; (1d94 <_usart_init+0x19c>)
    1c3c:	4798      	blx	r3
    1c3e:	4603      	mov	r3, r0
    1c40:	2b00      	cmp	r3, #0
    1c42:	d006      	beq.n	1c52 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1c44:	6878      	ldr	r0, [r7, #4]
    1c46:	4b54      	ldr	r3, [pc, #336]	; (1d98 <_usart_init+0x1a0>)
    1c48:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1c4a:	2102      	movs	r1, #2
    1c4c:	6878      	ldr	r0, [r7, #4]
    1c4e:	4b53      	ldr	r3, [pc, #332]	; (1d9c <_usart_init+0x1a4>)
    1c50:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1c52:	68bb      	ldr	r3, [r7, #8]
    1c54:	f043 0301 	orr.w	r3, r3, #1
    1c58:	4619      	mov	r1, r3
    1c5a:	6878      	ldr	r0, [r7, #4]
    1c5c:	4b50      	ldr	r3, [pc, #320]	; (1da0 <_usart_init+0x1a8>)
    1c5e:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1c60:	2101      	movs	r1, #1
    1c62:	6878      	ldr	r0, [r7, #4]
    1c64:	4b4d      	ldr	r3, [pc, #308]	; (1d9c <_usart_init+0x1a4>)
    1c66:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1c68:	7bfa      	ldrb	r2, [r7, #15]
    1c6a:	4949      	ldr	r1, [pc, #292]	; (1d90 <_usart_init+0x198>)
    1c6c:	4613      	mov	r3, r2
    1c6e:	005b      	lsls	r3, r3, #1
    1c70:	4413      	add	r3, r2
    1c72:	00db      	lsls	r3, r3, #3
    1c74:	440b      	add	r3, r1
    1c76:	3304      	adds	r3, #4
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	4619      	mov	r1, r3
    1c7c:	6878      	ldr	r0, [r7, #4]
    1c7e:	4b48      	ldr	r3, [pc, #288]	; (1da0 <_usart_init+0x1a8>)
    1c80:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1c82:	7bfa      	ldrb	r2, [r7, #15]
    1c84:	4942      	ldr	r1, [pc, #264]	; (1d90 <_usart_init+0x198>)
    1c86:	4613      	mov	r3, r2
    1c88:	005b      	lsls	r3, r3, #1
    1c8a:	4413      	add	r3, r2
    1c8c:	00db      	lsls	r3, r3, #3
    1c8e:	440b      	add	r3, r1
    1c90:	3308      	adds	r3, #8
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	4619      	mov	r1, r3
    1c96:	6878      	ldr	r0, [r7, #4]
    1c98:	4b42      	ldr	r3, [pc, #264]	; (1da4 <_usart_init+0x1ac>)
    1c9a:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1c9c:	7bfa      	ldrb	r2, [r7, #15]
    1c9e:	493c      	ldr	r1, [pc, #240]	; (1d90 <_usart_init+0x198>)
    1ca0:	4613      	mov	r3, r2
    1ca2:	005b      	lsls	r3, r3, #1
    1ca4:	4413      	add	r3, r2
    1ca6:	00db      	lsls	r3, r3, #3
    1ca8:	440b      	add	r3, r1
    1caa:	330c      	adds	r3, #12
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	4619      	mov	r1, r3
    1cb0:	6878      	ldr	r0, [r7, #4]
    1cb2:	4b3d      	ldr	r3, [pc, #244]	; (1da8 <_usart_init+0x1b0>)
    1cb4:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1cb6:	7bfa      	ldrb	r2, [r7, #15]
    1cb8:	4935      	ldr	r1, [pc, #212]	; (1d90 <_usart_init+0x198>)
    1cba:	4613      	mov	r3, r2
    1cbc:	005b      	lsls	r3, r3, #1
    1cbe:	4413      	add	r3, r2
    1cc0:	00db      	lsls	r3, r3, #3
    1cc2:	440b      	add	r3, r1
    1cc4:	3304      	adds	r3, #4
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d10c      	bne.n	1cea <_usart_init+0xf2>
    1cd0:	7bfa      	ldrb	r2, [r7, #15]
    1cd2:	492f      	ldr	r1, [pc, #188]	; (1d90 <_usart_init+0x198>)
    1cd4:	4613      	mov	r3, r2
    1cd6:	005b      	lsls	r3, r3, #1
    1cd8:	4413      	add	r3, r2
    1cda:	00db      	lsls	r3, r3, #3
    1cdc:	440b      	add	r3, r1
    1cde:	3304      	adds	r3, #4
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d022      	beq.n	1d30 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1cea:	7bfa      	ldrb	r2, [r7, #15]
    1cec:	4928      	ldr	r1, [pc, #160]	; (1d90 <_usart_init+0x198>)
    1cee:	4613      	mov	r3, r2
    1cf0:	005b      	lsls	r3, r3, #1
    1cf2:	4413      	add	r3, r2
    1cf4:	00db      	lsls	r3, r3, #3
    1cf6:	440b      	add	r3, r1
    1cf8:	3310      	adds	r3, #16
    1cfa:	881b      	ldrh	r3, [r3, #0]
    1cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1d00:	b299      	uxth	r1, r3
    1d02:	687a      	ldr	r2, [r7, #4]
    1d04:	8993      	ldrh	r3, [r2, #12]
    1d06:	f361 030c 	bfi	r3, r1, #0, #13
    1d0a:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1d0c:	7bfa      	ldrb	r2, [r7, #15]
    1d0e:	4920      	ldr	r1, [pc, #128]	; (1d90 <_usart_init+0x198>)
    1d10:	4613      	mov	r3, r2
    1d12:	005b      	lsls	r3, r3, #1
    1d14:	4413      	add	r3, r2
    1d16:	00db      	lsls	r3, r3, #3
    1d18:	440b      	add	r3, r1
    1d1a:	3312      	adds	r3, #18
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	f003 0307 	and.w	r3, r3, #7
    1d22:	b2d9      	uxtb	r1, r3
    1d24:	687a      	ldr	r2, [r7, #4]
    1d26:	8993      	ldrh	r3, [r2, #12]
    1d28:	f361 334f 	bfi	r3, r1, #13, #3
    1d2c:	8193      	strh	r3, [r2, #12]
    1d2e:	e00c      	b.n	1d4a <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1d30:	7bfa      	ldrb	r2, [r7, #15]
    1d32:	4917      	ldr	r1, [pc, #92]	; (1d90 <_usart_init+0x198>)
    1d34:	4613      	mov	r3, r2
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	4413      	add	r3, r2
    1d3a:	00db      	lsls	r3, r3, #3
    1d3c:	440b      	add	r3, r1
    1d3e:	3310      	adds	r3, #16
    1d40:	881b      	ldrh	r3, [r3, #0]
    1d42:	4619      	mov	r1, r3
    1d44:	6878      	ldr	r0, [r7, #4]
    1d46:	4b19      	ldr	r3, [pc, #100]	; (1dac <_usart_init+0x1b4>)
    1d48:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1d4a:	7bfa      	ldrb	r2, [r7, #15]
    1d4c:	4910      	ldr	r1, [pc, #64]	; (1d90 <_usart_init+0x198>)
    1d4e:	4613      	mov	r3, r2
    1d50:	005b      	lsls	r3, r3, #1
    1d52:	4413      	add	r3, r2
    1d54:	00db      	lsls	r3, r3, #3
    1d56:	440b      	add	r3, r1
    1d58:	3313      	adds	r3, #19
    1d5a:	781b      	ldrb	r3, [r3, #0]
    1d5c:	4619      	mov	r1, r3
    1d5e:	6878      	ldr	r0, [r7, #4]
    1d60:	4b13      	ldr	r3, [pc, #76]	; (1db0 <_usart_init+0x1b8>)
    1d62:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1d64:	7bfa      	ldrb	r2, [r7, #15]
    1d66:	490a      	ldr	r1, [pc, #40]	; (1d90 <_usart_init+0x198>)
    1d68:	4613      	mov	r3, r2
    1d6a:	005b      	lsls	r3, r3, #1
    1d6c:	4413      	add	r3, r2
    1d6e:	00db      	lsls	r3, r3, #3
    1d70:	440b      	add	r3, r1
    1d72:	3314      	adds	r3, #20
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	4619      	mov	r1, r3
    1d78:	6878      	ldr	r0, [r7, #4]
    1d7a:	4b0e      	ldr	r3, [pc, #56]	; (1db4 <_usart_init+0x1bc>)
    1d7c:	4798      	blx	r3

	return ERR_NONE;
    1d7e:	2300      	movs	r3, #0
}
    1d80:	4618      	mov	r0, r3
    1d82:	3710      	adds	r7, #16
    1d84:	46bd      	mov	sp, r7
    1d86:	bd80      	pop	{r7, pc}
    1d88:	00001b95 	.word	0x00001b95
    1d8c:	00001859 	.word	0x00001859
    1d90:	20000000 	.word	0x20000000
    1d94:	00001925 	.word	0x00001925
    1d98:	000018fd 	.word	0x000018fd
    1d9c:	00001835 	.word	0x00001835
    1da0:	00001955 	.word	0x00001955
    1da4:	00001979 	.word	0x00001979
    1da8:	0000199d 	.word	0x0000199d
    1dac:	000019b9 	.word	0x000019b9
    1db0:	000019d7 	.word	0x000019d7
    1db4:	00001a29 	.word	0x00001a29

00001db8 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1db8:	b480      	push	{r7}
    1dba:	b083      	sub	sp, #12
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1dc0:	4b06      	ldr	r3, [pc, #24]	; (1ddc <_system_time_init+0x24>)
    1dc2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1dc6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1dc8:	4b04      	ldr	r3, [pc, #16]	; (1ddc <_system_time_init+0x24>)
    1dca:	2205      	movs	r2, #5
    1dcc:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1dce:	bf00      	nop
    1dd0:	370c      	adds	r7, #12
    1dd2:	46bd      	mov	sp, r7
    1dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd8:	4770      	bx	lr
    1dda:	bf00      	nop
    1ddc:	e000e010 	.word	0xe000e010

00001de0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	b082      	sub	sp, #8
    1de4:	af00      	add	r7, sp, #0
    1de6:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    1de8:	6878      	ldr	r0, [r7, #4]
    1dea:	4b03      	ldr	r3, [pc, #12]	; (1df8 <_delay_init+0x18>)
    1dec:	4798      	blx	r3
}
    1dee:	bf00      	nop
    1df0:	3708      	adds	r7, #8
    1df2:	46bd      	mov	sp, r7
    1df4:	bd80      	pop	{r7, pc}
    1df6:	bf00      	nop
    1df8:	00001db9 	.word	0x00001db9

00001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1dfc:	b480      	push	{r7}
    1dfe:	b083      	sub	sp, #12
    1e00:	af00      	add	r7, sp, #0
    1e02:	4603      	mov	r3, r0
    1e04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	db0b      	blt.n	1e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e0e:	4909      	ldr	r1, [pc, #36]	; (1e34 <__NVIC_EnableIRQ+0x38>)
    1e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1e14:	095b      	lsrs	r3, r3, #5
    1e16:	88fa      	ldrh	r2, [r7, #6]
    1e18:	f002 021f 	and.w	r2, r2, #31
    1e1c:	2001      	movs	r0, #1
    1e1e:	fa00 f202 	lsl.w	r2, r0, r2
    1e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1e26:	bf00      	nop
    1e28:	370c      	adds	r7, #12
    1e2a:	46bd      	mov	sp, r7
    1e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e30:	4770      	bx	lr
    1e32:	bf00      	nop
    1e34:	e000e100 	.word	0xe000e100

00001e38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1e38:	b480      	push	{r7}
    1e3a:	b083      	sub	sp, #12
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	4603      	mov	r3, r0
    1e40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1e46:	2b00      	cmp	r3, #0
    1e48:	db10      	blt.n	1e6c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e4a:	490b      	ldr	r1, [pc, #44]	; (1e78 <__NVIC_DisableIRQ+0x40>)
    1e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1e50:	095b      	lsrs	r3, r3, #5
    1e52:	88fa      	ldrh	r2, [r7, #6]
    1e54:	f002 021f 	and.w	r2, r2, #31
    1e58:	2001      	movs	r0, #1
    1e5a:	fa00 f202 	lsl.w	r2, r0, r2
    1e5e:	3320      	adds	r3, #32
    1e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1e64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1e6c:	bf00      	nop
    1e6e:	370c      	adds	r7, #12
    1e70:	46bd      	mov	sp, r7
    1e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e76:	4770      	bx	lr
    1e78:	e000e100 	.word	0xe000e100

00001e7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b083      	sub	sp, #12
    1e80:	af00      	add	r7, sp, #0
    1e82:	4603      	mov	r3, r0
    1e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	db0c      	blt.n	1ea8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e8e:	4909      	ldr	r1, [pc, #36]	; (1eb4 <__NVIC_ClearPendingIRQ+0x38>)
    1e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1e94:	095b      	lsrs	r3, r3, #5
    1e96:	88fa      	ldrh	r2, [r7, #6]
    1e98:	f002 021f 	and.w	r2, r2, #31
    1e9c:	2001      	movs	r0, #1
    1e9e:	fa00 f202 	lsl.w	r2, r0, r2
    1ea2:	3360      	adds	r3, #96	; 0x60
    1ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1ea8:	bf00      	nop
    1eaa:	370c      	adds	r7, #12
    1eac:	46bd      	mov	sp, r7
    1eae:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eb2:	4770      	bx	lr
    1eb4:	e000e100 	.word	0xe000e100

00001eb8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    1eb8:	b480      	push	{r7}
    1eba:	b083      	sub	sp, #12
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
    1ec0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ec2:	bf00      	nop
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	691a      	ldr	r2, [r3, #16]
    1ec8:	683b      	ldr	r3, [r7, #0]
    1eca:	4013      	ands	r3, r2
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d1f9      	bne.n	1ec4 <hri_tc_wait_for_sync+0xc>
	};
}
    1ed0:	bf00      	nop
    1ed2:	370c      	adds	r7, #12
    1ed4:	46bd      	mov	sp, r7
    1ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eda:	4770      	bx	lr

00001edc <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    1edc:	b480      	push	{r7}
    1ede:	b083      	sub	sp, #12
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	691a      	ldr	r2, [r3, #16]
    1eea:	683b      	ldr	r3, [r7, #0]
    1eec:	4013      	ands	r3, r2
    1eee:	2b00      	cmp	r3, #0
    1ef0:	bf14      	ite	ne
    1ef2:	2301      	movne	r3, #1
    1ef4:	2300      	moveq	r3, #0
    1ef6:	b2db      	uxtb	r3, r3
}
    1ef8:	4618      	mov	r0, r3
    1efa:	370c      	adds	r7, #12
    1efc:	46bd      	mov	sp, r7
    1efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f02:	4770      	bx	lr

00001f04 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    1f04:	b480      	push	{r7}
    1f06:	b083      	sub	sp, #12
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	7a9b      	ldrb	r3, [r3, #10]
    1f10:	b2db      	uxtb	r3, r3
    1f12:	f003 0301 	and.w	r3, r3, #1
    1f16:	2b00      	cmp	r3, #0
    1f18:	bf14      	ite	ne
    1f1a:	2301      	movne	r3, #1
    1f1c:	2300      	moveq	r3, #0
    1f1e:	b2db      	uxtb	r3, r3
}
    1f20:	4618      	mov	r0, r3
    1f22:	370c      	adds	r7, #12
    1f24:	46bd      	mov	sp, r7
    1f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f2a:	4770      	bx	lr

00001f2c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    1f2c:	b480      	push	{r7}
    1f2e:	b083      	sub	sp, #12
    1f30:	af00      	add	r7, sp, #0
    1f32:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	2201      	movs	r2, #1
    1f38:	729a      	strb	r2, [r3, #10]
}
    1f3a:	bf00      	nop
    1f3c:	370c      	adds	r7, #12
    1f3e:	46bd      	mov	sp, r7
    1f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f44:	4770      	bx	lr

00001f46 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    1f46:	b480      	push	{r7}
    1f48:	b083      	sub	sp, #12
    1f4a:	af00      	add	r7, sp, #0
    1f4c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	2202      	movs	r2, #2
    1f52:	729a      	strb	r2, [r3, #10]
}
    1f54:	bf00      	nop
    1f56:	370c      	adds	r7, #12
    1f58:	46bd      	mov	sp, r7
    1f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f5e:	4770      	bx	lr

00001f60 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    1f60:	b480      	push	{r7}
    1f62:	b083      	sub	sp, #12
    1f64:	af00      	add	r7, sp, #0
    1f66:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1f68:	687b      	ldr	r3, [r7, #4]
    1f6a:	7a5b      	ldrb	r3, [r3, #9]
    1f6c:	b2db      	uxtb	r3, r3
    1f6e:	085b      	lsrs	r3, r3, #1
    1f70:	f003 0301 	and.w	r3, r3, #1
    1f74:	2b00      	cmp	r3, #0
    1f76:	bf14      	ite	ne
    1f78:	2301      	movne	r3, #1
    1f7a:	2300      	moveq	r3, #0
    1f7c:	b2db      	uxtb	r3, r3
}
    1f7e:	4618      	mov	r0, r3
    1f80:	370c      	adds	r7, #12
    1f82:	46bd      	mov	sp, r7
    1f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f88:	4770      	bx	lr
	...

00001f8c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b082      	sub	sp, #8
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	f023 0202 	bic.w	r2, r3, #2
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    1fa0:	2103      	movs	r1, #3
    1fa2:	6878      	ldr	r0, [r7, #4]
    1fa4:	4b02      	ldr	r3, [pc, #8]	; (1fb0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    1fa6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    1fa8:	bf00      	nop
    1faa:	3708      	adds	r7, #8
    1fac:	46bd      	mov	sp, r7
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	00001eb9 	.word	0x00001eb9

00001fb4 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b084      	sub	sp, #16
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
    1fbc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    1fbe:	2103      	movs	r1, #3
    1fc0:	6878      	ldr	r0, [r7, #4]
    1fc2:	4b07      	ldr	r3, [pc, #28]	; (1fe0 <hri_tc_get_CTRLA_reg+0x2c>)
    1fc4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1fcc:	68fa      	ldr	r2, [r7, #12]
    1fce:	683b      	ldr	r3, [r7, #0]
    1fd0:	4013      	ands	r3, r2
    1fd2:	60fb      	str	r3, [r7, #12]
	return tmp;
    1fd4:	68fb      	ldr	r3, [r7, #12]
}
    1fd6:	4618      	mov	r0, r3
    1fd8:	3710      	adds	r7, #16
    1fda:	46bd      	mov	sp, r7
    1fdc:	bd80      	pop	{r7, pc}
    1fde:	bf00      	nop
    1fe0:	00001eb9 	.word	0x00001eb9

00001fe4 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    1fe4:	b580      	push	{r7, lr}
    1fe6:	b082      	sub	sp, #8
    1fe8:	af00      	add	r7, sp, #0
    1fea:	6078      	str	r0, [r7, #4]
    1fec:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	683a      	ldr	r2, [r7, #0]
    1ff2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    1ff4:	2103      	movs	r1, #3
    1ff6:	6878      	ldr	r0, [r7, #4]
    1ff8:	4b02      	ldr	r3, [pc, #8]	; (2004 <hri_tc_write_CTRLA_reg+0x20>)
    1ffa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    1ffc:	bf00      	nop
    1ffe:	3708      	adds	r7, #8
    2000:	46bd      	mov	sp, r7
    2002:	bd80      	pop	{r7, pc}
    2004:	00001eb9 	.word	0x00001eb9

00002008 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    2008:	b480      	push	{r7}
    200a:	b083      	sub	sp, #12
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
    2010:	460b      	mov	r3, r1
    2012:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	887a      	ldrh	r2, [r7, #2]
    2018:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    201a:	bf00      	nop
    201c:	370c      	adds	r7, #12
    201e:	46bd      	mov	sp, r7
    2020:	f85d 7b04 	ldr.w	r7, [sp], #4
    2024:	4770      	bx	lr

00002026 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    2026:	b480      	push	{r7}
    2028:	b083      	sub	sp, #12
    202a:	af00      	add	r7, sp, #0
    202c:	6078      	str	r0, [r7, #4]
    202e:	460b      	mov	r3, r1
    2030:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	78fa      	ldrb	r2, [r7, #3]
    2036:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    2038:	bf00      	nop
    203a:	370c      	adds	r7, #12
    203c:	46bd      	mov	sp, r7
    203e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2042:	4770      	bx	lr

00002044 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    2044:	b480      	push	{r7}
    2046:	b083      	sub	sp, #12
    2048:	af00      	add	r7, sp, #0
    204a:	6078      	str	r0, [r7, #4]
    204c:	460b      	mov	r3, r1
    204e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	78fa      	ldrb	r2, [r7, #3]
    2054:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    2056:	bf00      	nop
    2058:	370c      	adds	r7, #12
    205a:	46bd      	mov	sp, r7
    205c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2060:	4770      	bx	lr
	...

00002064 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    2064:	b580      	push	{r7, lr}
    2066:	b082      	sub	sp, #8
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
    206c:	460b      	mov	r3, r1
    206e:	70fb      	strb	r3, [r7, #3]
    2070:	4613      	mov	r3, r2
    2072:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2074:	78fb      	ldrb	r3, [r7, #3]
    2076:	687a      	ldr	r2, [r7, #4]
    2078:	330c      	adds	r3, #12
    207a:	005b      	lsls	r3, r3, #1
    207c:	4413      	add	r3, r2
    207e:	883a      	ldrh	r2, [r7, #0]
    2080:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2082:	21c0      	movs	r1, #192	; 0xc0
    2084:	6878      	ldr	r0, [r7, #4]
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <hri_tccount16_write_CC_reg+0x30>)
    2088:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    208a:	bf00      	nop
    208c:	3708      	adds	r7, #8
    208e:	46bd      	mov	sp, r7
    2090:	bd80      	pop	{r7, pc}
    2092:	bf00      	nop
    2094:	00001eb9 	.word	0x00001eb9

00002098 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    2098:	b580      	push	{r7, lr}
    209a:	b084      	sub	sp, #16
    209c:	af00      	add	r7, sp, #0
    209e:	60f8      	str	r0, [r7, #12]
    20a0:	460b      	mov	r3, r1
    20a2:	607a      	str	r2, [r7, #4]
    20a4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    20a6:	7afb      	ldrb	r3, [r7, #11]
    20a8:	68fa      	ldr	r2, [r7, #12]
    20aa:	3306      	adds	r3, #6
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	4413      	add	r3, r2
    20b0:	687a      	ldr	r2, [r7, #4]
    20b2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    20b4:	21c0      	movs	r1, #192	; 0xc0
    20b6:	68f8      	ldr	r0, [r7, #12]
    20b8:	4b02      	ldr	r3, [pc, #8]	; (20c4 <hri_tccount32_write_CC_reg+0x2c>)
    20ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    20bc:	bf00      	nop
    20be:	3710      	adds	r7, #16
    20c0:	46bd      	mov	sp, r7
    20c2:	bd80      	pop	{r7, pc}
    20c4:	00001eb9 	.word	0x00001eb9

000020c8 <_pwm_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b084      	sub	sp, #16
    20cc:	af00      	add	r7, sp, #0
    20ce:	6078      	str	r0, [r7, #4]
    20d0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    20d2:	6838      	ldr	r0, [r7, #0]
    20d4:	4b73      	ldr	r3, [pc, #460]	; (22a4 <_pwm_init+0x1dc>)
    20d6:	4798      	blx	r3
    20d8:	4603      	mov	r3, r0
    20da:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	683a      	ldr	r2, [r7, #0]
    20e0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    20e2:	2101      	movs	r1, #1
    20e4:	6838      	ldr	r0, [r7, #0]
    20e6:	4b70      	ldr	r3, [pc, #448]	; (22a8 <_pwm_init+0x1e0>)
    20e8:	4798      	blx	r3
    20ea:	4603      	mov	r3, r0
    20ec:	f083 0301 	eor.w	r3, r3, #1
    20f0:	b2db      	uxtb	r3, r3
    20f2:	2b00      	cmp	r3, #0
    20f4:	d011      	beq.n	211a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    20f6:	2102      	movs	r1, #2
    20f8:	6838      	ldr	r0, [r7, #0]
    20fa:	4b6c      	ldr	r3, [pc, #432]	; (22ac <_pwm_init+0x1e4>)
    20fc:	4798      	blx	r3
    20fe:	4603      	mov	r3, r0
    2100:	2b00      	cmp	r3, #0
    2102:	d006      	beq.n	2112 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    2104:	6838      	ldr	r0, [r7, #0]
    2106:	4b6a      	ldr	r3, [pc, #424]	; (22b0 <_pwm_init+0x1e8>)
    2108:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    210a:	2102      	movs	r1, #2
    210c:	6838      	ldr	r0, [r7, #0]
    210e:	4b69      	ldr	r3, [pc, #420]	; (22b4 <_pwm_init+0x1ec>)
    2110:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    2112:	2101      	movs	r1, #1
    2114:	6838      	ldr	r0, [r7, #0]
    2116:	4b68      	ldr	r3, [pc, #416]	; (22b8 <_pwm_init+0x1f0>)
    2118:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    211a:	2101      	movs	r1, #1
    211c:	6838      	ldr	r0, [r7, #0]
    211e:	4b65      	ldr	r3, [pc, #404]	; (22b4 <_pwm_init+0x1ec>)
    2120:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2122:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2126:	4965      	ldr	r1, [pc, #404]	; (22bc <_pwm_init+0x1f4>)
    2128:	4613      	mov	r3, r2
    212a:	009b      	lsls	r3, r3, #2
    212c:	4413      	add	r3, r2
    212e:	009b      	lsls	r3, r3, #2
    2130:	440b      	add	r3, r1
    2132:	3304      	adds	r3, #4
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	4619      	mov	r1, r3
    2138:	6838      	ldr	r0, [r7, #0]
    213a:	4b5f      	ldr	r3, [pc, #380]	; (22b8 <_pwm_init+0x1f0>)
    213c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    213e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2142:	495e      	ldr	r1, [pc, #376]	; (22bc <_pwm_init+0x1f4>)
    2144:	4613      	mov	r3, r2
    2146:	009b      	lsls	r3, r3, #2
    2148:	4413      	add	r3, r2
    214a:	009b      	lsls	r3, r3, #2
    214c:	440b      	add	r3, r1
    214e:	330a      	adds	r3, #10
    2150:	781b      	ldrb	r3, [r3, #0]
    2152:	4619      	mov	r1, r3
    2154:	6838      	ldr	r0, [r7, #0]
    2156:	4b5a      	ldr	r3, [pc, #360]	; (22c0 <_pwm_init+0x1f8>)
    2158:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    215a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    215e:	4957      	ldr	r1, [pc, #348]	; (22bc <_pwm_init+0x1f4>)
    2160:	4613      	mov	r3, r2
    2162:	009b      	lsls	r3, r3, #2
    2164:	4413      	add	r3, r2
    2166:	009b      	lsls	r3, r3, #2
    2168:	440b      	add	r3, r1
    216a:	3308      	adds	r3, #8
    216c:	881b      	ldrh	r3, [r3, #0]
    216e:	4619      	mov	r1, r3
    2170:	6838      	ldr	r0, [r7, #0]
    2172:	4b54      	ldr	r3, [pc, #336]	; (22c4 <_pwm_init+0x1fc>)
    2174:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    2176:	2103      	movs	r1, #3
    2178:	6838      	ldr	r0, [r7, #0]
    217a:	4b53      	ldr	r3, [pc, #332]	; (22c8 <_pwm_init+0x200>)
    217c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    217e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2182:	494e      	ldr	r1, [pc, #312]	; (22bc <_pwm_init+0x1f4>)
    2184:	4613      	mov	r3, r2
    2186:	009b      	lsls	r3, r3, #2
    2188:	4413      	add	r3, r2
    218a:	009b      	lsls	r3, r3, #2
    218c:	440b      	add	r3, r1
    218e:	3304      	adds	r3, #4
    2190:	681b      	ldr	r3, [r3, #0]
    2192:	f003 030c 	and.w	r3, r3, #12
    2196:	2b08      	cmp	r3, #8
    2198:	d11e      	bne.n	21d8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    219a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    219e:	4947      	ldr	r1, [pc, #284]	; (22bc <_pwm_init+0x1f4>)
    21a0:	4613      	mov	r3, r2
    21a2:	009b      	lsls	r3, r3, #2
    21a4:	4413      	add	r3, r2
    21a6:	009b      	lsls	r3, r3, #2
    21a8:	440b      	add	r3, r1
    21aa:	330c      	adds	r3, #12
    21ac:	681b      	ldr	r3, [r3, #0]
    21ae:	461a      	mov	r2, r3
    21b0:	2100      	movs	r1, #0
    21b2:	6838      	ldr	r0, [r7, #0]
    21b4:	4b45      	ldr	r3, [pc, #276]	; (22cc <_pwm_init+0x204>)
    21b6:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    21b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    21bc:	493f      	ldr	r1, [pc, #252]	; (22bc <_pwm_init+0x1f4>)
    21be:	4613      	mov	r3, r2
    21c0:	009b      	lsls	r3, r3, #2
    21c2:	4413      	add	r3, r2
    21c4:	009b      	lsls	r3, r3, #2
    21c6:	440b      	add	r3, r1
    21c8:	3310      	adds	r3, #16
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	461a      	mov	r2, r3
    21ce:	2101      	movs	r1, #1
    21d0:	6838      	ldr	r0, [r7, #0]
    21d2:	4b3e      	ldr	r3, [pc, #248]	; (22cc <_pwm_init+0x204>)
    21d4:	4798      	blx	r3
    21d6:	e031      	b.n	223c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    21d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    21dc:	4937      	ldr	r1, [pc, #220]	; (22bc <_pwm_init+0x1f4>)
    21de:	4613      	mov	r3, r2
    21e0:	009b      	lsls	r3, r3, #2
    21e2:	4413      	add	r3, r2
    21e4:	009b      	lsls	r3, r3, #2
    21e6:	440b      	add	r3, r1
    21e8:	3304      	adds	r3, #4
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	f003 030c 	and.w	r3, r3, #12
    21f0:	2b00      	cmp	r3, #0
    21f2:	d120      	bne.n	2236 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    21f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    21f8:	4930      	ldr	r1, [pc, #192]	; (22bc <_pwm_init+0x1f4>)
    21fa:	4613      	mov	r3, r2
    21fc:	009b      	lsls	r3, r3, #2
    21fe:	4413      	add	r3, r2
    2200:	009b      	lsls	r3, r3, #2
    2202:	440b      	add	r3, r1
    2204:	330c      	adds	r3, #12
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	b29b      	uxth	r3, r3
    220a:	461a      	mov	r2, r3
    220c:	2100      	movs	r1, #0
    220e:	6838      	ldr	r0, [r7, #0]
    2210:	4b2f      	ldr	r3, [pc, #188]	; (22d0 <_pwm_init+0x208>)
    2212:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2214:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2218:	4928      	ldr	r1, [pc, #160]	; (22bc <_pwm_init+0x1f4>)
    221a:	4613      	mov	r3, r2
    221c:	009b      	lsls	r3, r3, #2
    221e:	4413      	add	r3, r2
    2220:	009b      	lsls	r3, r3, #2
    2222:	440b      	add	r3, r1
    2224:	3310      	adds	r3, #16
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	b29b      	uxth	r3, r3
    222a:	461a      	mov	r2, r3
    222c:	2101      	movs	r1, #1
    222e:	6838      	ldr	r0, [r7, #0]
    2230:	4b27      	ldr	r3, [pc, #156]	; (22d0 <_pwm_init+0x208>)
    2232:	4798      	blx	r3
    2234:	e002      	b.n	223c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    2236:	f04f 33ff 	mov.w	r3, #4294967295
    223a:	e02e      	b.n	229a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    223c:	6879      	ldr	r1, [r7, #4]
    223e:	6838      	ldr	r0, [r7, #0]
    2240:	4b24      	ldr	r3, [pc, #144]	; (22d4 <_pwm_init+0x20c>)
    2242:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2244:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2248:	491c      	ldr	r1, [pc, #112]	; (22bc <_pwm_init+0x1f4>)
    224a:	4613      	mov	r3, r2
    224c:	009b      	lsls	r3, r3, #2
    224e:	4413      	add	r3, r2
    2250:	009b      	lsls	r3, r3, #2
    2252:	440b      	add	r3, r1
    2254:	3302      	adds	r3, #2
    2256:	f9b3 3000 	ldrsh.w	r3, [r3]
    225a:	4618      	mov	r0, r3
    225c:	4b1e      	ldr	r3, [pc, #120]	; (22d8 <_pwm_init+0x210>)
    225e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2260:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2264:	4915      	ldr	r1, [pc, #84]	; (22bc <_pwm_init+0x1f4>)
    2266:	4613      	mov	r3, r2
    2268:	009b      	lsls	r3, r3, #2
    226a:	4413      	add	r3, r2
    226c:	009b      	lsls	r3, r3, #2
    226e:	440b      	add	r3, r1
    2270:	3302      	adds	r3, #2
    2272:	f9b3 3000 	ldrsh.w	r3, [r3]
    2276:	4618      	mov	r0, r3
    2278:	4b18      	ldr	r3, [pc, #96]	; (22dc <_pwm_init+0x214>)
    227a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    227c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2280:	490e      	ldr	r1, [pc, #56]	; (22bc <_pwm_init+0x1f4>)
    2282:	4613      	mov	r3, r2
    2284:	009b      	lsls	r3, r3, #2
    2286:	4413      	add	r3, r2
    2288:	009b      	lsls	r3, r3, #2
    228a:	440b      	add	r3, r1
    228c:	3302      	adds	r3, #2
    228e:	f9b3 3000 	ldrsh.w	r3, [r3]
    2292:	4618      	mov	r0, r3
    2294:	4b12      	ldr	r3, [pc, #72]	; (22e0 <_pwm_init+0x218>)
    2296:	4798      	blx	r3

	return 0;
    2298:	2300      	movs	r3, #0
}
    229a:	4618      	mov	r0, r3
    229c:	3710      	adds	r7, #16
    229e:	46bd      	mov	sp, r7
    22a0:	bd80      	pop	{r7, pc}
    22a2:	bf00      	nop
    22a4:	0000237d 	.word	0x0000237d
    22a8:	00001edd 	.word	0x00001edd
    22ac:	00001fb5 	.word	0x00001fb5
    22b0:	00001f8d 	.word	0x00001f8d
    22b4:	00001eb9 	.word	0x00001eb9
    22b8:	00001fe5 	.word	0x00001fe5
    22bc:	20000018 	.word	0x20000018
    22c0:	00002045 	.word	0x00002045
    22c4:	00002009 	.word	0x00002009
    22c8:	00002027 	.word	0x00002027
    22cc:	00002099 	.word	0x00002099
    22d0:	00002065 	.word	0x00002065
    22d4:	000023e5 	.word	0x000023e5
    22d8:	00001e39 	.word	0x00001e39
    22dc:	00001e7d 	.word	0x00001e7d
    22e0:	00001dfd 	.word	0x00001dfd

000022e4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    22e4:	b480      	push	{r7}
    22e6:	af00      	add	r7, sp, #0
	return NULL;
    22e8:	2300      	movs	r3, #0
}
    22ea:	4618      	mov	r0, r3
    22ec:	46bd      	mov	sp, r7
    22ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f2:	4770      	bx	lr

000022f4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b084      	sub	sp, #16
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	691b      	ldr	r3, [r3, #16]
    2300:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2302:	68f8      	ldr	r0, [r7, #12]
    2304:	4b12      	ldr	r3, [pc, #72]	; (2350 <tc_pwm_interrupt_handler+0x5c>)
    2306:	4798      	blx	r3
    2308:	4603      	mov	r3, r0
    230a:	2b00      	cmp	r3, #0
    230c:	d00a      	beq.n	2324 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    230e:	68f8      	ldr	r0, [r7, #12]
    2310:	4b10      	ldr	r3, [pc, #64]	; (2354 <tc_pwm_interrupt_handler+0x60>)
    2312:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	681b      	ldr	r3, [r3, #0]
    2318:	2b00      	cmp	r3, #0
    231a:	d003      	beq.n	2324 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	681b      	ldr	r3, [r3, #0]
    2320:	6878      	ldr	r0, [r7, #4]
    2322:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2324:	68f8      	ldr	r0, [r7, #12]
    2326:	4b0c      	ldr	r3, [pc, #48]	; (2358 <tc_pwm_interrupt_handler+0x64>)
    2328:	4798      	blx	r3
    232a:	4603      	mov	r3, r0
    232c:	2b00      	cmp	r3, #0
    232e:	d00a      	beq.n	2346 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    2330:	68f8      	ldr	r0, [r7, #12]
    2332:	4b0a      	ldr	r3, [pc, #40]	; (235c <tc_pwm_interrupt_handler+0x68>)
    2334:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	685b      	ldr	r3, [r3, #4]
    233a:	2b00      	cmp	r3, #0
    233c:	d003      	beq.n	2346 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	685b      	ldr	r3, [r3, #4]
    2342:	6878      	ldr	r0, [r7, #4]
    2344:	4798      	blx	r3
		}
	}
}
    2346:	bf00      	nop
    2348:	3710      	adds	r7, #16
    234a:	46bd      	mov	sp, r7
    234c:	bd80      	pop	{r7, pc}
    234e:	bf00      	nop
    2350:	00001f05 	.word	0x00001f05
    2354:	00001f2d 	.word	0x00001f2d
    2358:	00001f61 	.word	0x00001f61
    235c:	00001f47 	.word	0x00001f47

00002360 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    2360:	b580      	push	{r7, lr}
    2362:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc0_dev);
    2364:	4b03      	ldr	r3, [pc, #12]	; (2374 <TC0_Handler+0x14>)
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	4618      	mov	r0, r3
    236a:	4b03      	ldr	r3, [pc, #12]	; (2378 <TC0_Handler+0x18>)
    236c:	4798      	blx	r3
}
    236e:	bf00      	nop
    2370:	bd80      	pop	{r7, pc}
    2372:	bf00      	nop
    2374:	20000054 	.word	0x20000054
    2378:	000022f5 	.word	0x000022f5

0000237c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    237c:	b580      	push	{r7, lr}
    237e:	b084      	sub	sp, #16
    2380:	af00      	add	r7, sp, #0
    2382:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    2384:	6878      	ldr	r0, [r7, #4]
    2386:	4b13      	ldr	r3, [pc, #76]	; (23d4 <get_tc_index+0x58>)
    2388:	4798      	blx	r3
    238a:	4603      	mov	r3, r0
    238c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    238e:	2300      	movs	r3, #0
    2390:	73fb      	strb	r3, [r7, #15]
    2392:	e010      	b.n	23b6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    2394:	7bfa      	ldrb	r2, [r7, #15]
    2396:	4910      	ldr	r1, [pc, #64]	; (23d8 <get_tc_index+0x5c>)
    2398:	4613      	mov	r3, r2
    239a:	009b      	lsls	r3, r3, #2
    239c:	4413      	add	r3, r2
    239e:	009b      	lsls	r3, r3, #2
    23a0:	440b      	add	r3, r1
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	7bba      	ldrb	r2, [r7, #14]
    23a6:	429a      	cmp	r2, r3
    23a8:	d102      	bne.n	23b0 <get_tc_index+0x34>
			return i;
    23aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    23ae:	e00d      	b.n	23cc <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    23b0:	7bfb      	ldrb	r3, [r7, #15]
    23b2:	3301      	adds	r3, #1
    23b4:	73fb      	strb	r3, [r7, #15]
    23b6:	7bfb      	ldrb	r3, [r7, #15]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d0eb      	beq.n	2394 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    23bc:	f44f 72a9 	mov.w	r2, #338	; 0x152
    23c0:	4906      	ldr	r1, [pc, #24]	; (23dc <get_tc_index+0x60>)
    23c2:	2000      	movs	r0, #0
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <get_tc_index+0x64>)
    23c6:	4798      	blx	r3
	return -1;
    23c8:	f04f 33ff 	mov.w	r3, #4294967295
}
    23cc:	4618      	mov	r0, r3
    23ce:	3710      	adds	r7, #16
    23d0:	46bd      	mov	sp, r7
    23d2:	bd80      	pop	{r7, pc}
    23d4:	00002411 	.word	0x00002411
    23d8:	20000018 	.word	0x20000018
    23dc:	000026f4 	.word	0x000026f4
    23e0:	00001215 	.word	0x00001215

000023e4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    23e4:	b480      	push	{r7}
    23e6:	b083      	sub	sp, #12
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
    23ec:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	4a05      	ldr	r2, [pc, #20]	; (2408 <_tc_init_irq_param+0x24>)
    23f2:	4293      	cmp	r3, r2
    23f4:	d102      	bne.n	23fc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _pwm_device *)dev;
    23f6:	4a05      	ldr	r2, [pc, #20]	; (240c <_tc_init_irq_param+0x28>)
    23f8:	683b      	ldr	r3, [r7, #0]
    23fa:	6013      	str	r3, [r2, #0]
	}
}
    23fc:	bf00      	nop
    23fe:	370c      	adds	r7, #12
    2400:	46bd      	mov	sp, r7
    2402:	f85d 7b04 	ldr.w	r7, [sp], #4
    2406:	4770      	bx	lr
    2408:	40003800 	.word	0x40003800
    240c:	20000054 	.word	0x20000054

00002410 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    2410:	b4b0      	push	{r4, r5, r7}
    2412:	b08d      	sub	sp, #52	; 0x34
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2418:	4b13      	ldr	r3, [pc, #76]	; (2468 <_get_hardware_offset+0x58>)
    241a:	f107 040c 	add.w	r4, r7, #12
    241e:	461d      	mov	r5, r3
    2420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2424:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    242c:	2300      	movs	r3, #0
    242e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2430:	e010      	b.n	2454 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2434:	009b      	lsls	r3, r3, #2
    2436:	f107 0230 	add.w	r2, r7, #48	; 0x30
    243a:	4413      	add	r3, r2
    243c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    2440:	461a      	mov	r2, r3
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	429a      	cmp	r2, r3
    2446:	d102      	bne.n	244e <_get_hardware_offset+0x3e>
			return i;
    2448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    244a:	b2db      	uxtb	r3, r3
    244c:	e006      	b.n	245c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2450:	3301      	adds	r3, #1
    2452:	62fb      	str	r3, [r7, #44]	; 0x2c
    2454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2456:	2b07      	cmp	r3, #7
    2458:	d9eb      	bls.n	2432 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    245a:	2300      	movs	r3, #0
}
    245c:	4618      	mov	r0, r3
    245e:	3734      	adds	r7, #52	; 0x34
    2460:	46bd      	mov	sp, r7
    2462:	bcb0      	pop	{r4, r5, r7}
    2464:	4770      	bx	lr
    2466:	bf00      	nop
    2468:	00002708 	.word	0x00002708

0000246c <hri_port_set_OUT_reg>:
{
    246c:	b480      	push	{r7}
    246e:	b085      	sub	sp, #20
    2470:	af00      	add	r7, sp, #0
    2472:	60f8      	str	r0, [r7, #12]
    2474:	460b      	mov	r3, r1
    2476:	607a      	str	r2, [r7, #4]
    2478:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    247a:	7afb      	ldrb	r3, [r7, #11]
    247c:	68fa      	ldr	r2, [r7, #12]
    247e:	01db      	lsls	r3, r3, #7
    2480:	4413      	add	r3, r2
    2482:	3318      	adds	r3, #24
    2484:	687a      	ldr	r2, [r7, #4]
    2486:	601a      	str	r2, [r3, #0]
}
    2488:	bf00      	nop
    248a:	3714      	adds	r7, #20
    248c:	46bd      	mov	sp, r7
    248e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2492:	4770      	bx	lr

00002494 <hri_port_clear_OUT_reg>:
{
    2494:	b480      	push	{r7}
    2496:	b085      	sub	sp, #20
    2498:	af00      	add	r7, sp, #0
    249a:	60f8      	str	r0, [r7, #12]
    249c:	460b      	mov	r3, r1
    249e:	607a      	str	r2, [r7, #4]
    24a0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24a2:	7afb      	ldrb	r3, [r7, #11]
    24a4:	68fa      	ldr	r2, [r7, #12]
    24a6:	01db      	lsls	r3, r3, #7
    24a8:	4413      	add	r3, r2
    24aa:	3314      	adds	r3, #20
    24ac:	687a      	ldr	r2, [r7, #4]
    24ae:	601a      	str	r2, [r3, #0]
}
    24b0:	bf00      	nop
    24b2:	3714      	adds	r7, #20
    24b4:	46bd      	mov	sp, r7
    24b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ba:	4770      	bx	lr

000024bc <_gpio_set_level>:
{
    24bc:	b580      	push	{r7, lr}
    24be:	b082      	sub	sp, #8
    24c0:	af00      	add	r7, sp, #0
    24c2:	4603      	mov	r3, r0
    24c4:	6039      	str	r1, [r7, #0]
    24c6:	71fb      	strb	r3, [r7, #7]
    24c8:	4613      	mov	r3, r2
    24ca:	71bb      	strb	r3, [r7, #6]
	if (level) {
    24cc:	79bb      	ldrb	r3, [r7, #6]
    24ce:	2b00      	cmp	r3, #0
    24d0:	d006      	beq.n	24e0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    24d2:	79fb      	ldrb	r3, [r7, #7]
    24d4:	683a      	ldr	r2, [r7, #0]
    24d6:	4619      	mov	r1, r3
    24d8:	4806      	ldr	r0, [pc, #24]	; (24f4 <_gpio_set_level+0x38>)
    24da:	4b07      	ldr	r3, [pc, #28]	; (24f8 <_gpio_set_level+0x3c>)
    24dc:	4798      	blx	r3
}
    24de:	e005      	b.n	24ec <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    24e0:	79fb      	ldrb	r3, [r7, #7]
    24e2:	683a      	ldr	r2, [r7, #0]
    24e4:	4619      	mov	r1, r3
    24e6:	4803      	ldr	r0, [pc, #12]	; (24f4 <_gpio_set_level+0x38>)
    24e8:	4b04      	ldr	r3, [pc, #16]	; (24fc <_gpio_set_level+0x40>)
    24ea:	4798      	blx	r3
}
    24ec:	bf00      	nop
    24ee:	3708      	adds	r7, #8
    24f0:	46bd      	mov	sp, r7
    24f2:	bd80      	pop	{r7, pc}
    24f4:	41008000 	.word	0x41008000
    24f8:	0000246d 	.word	0x0000246d
    24fc:	00002495 	.word	0x00002495

00002500 <gpio_set_pin_level>:
{
    2500:	b580      	push	{r7, lr}
    2502:	b082      	sub	sp, #8
    2504:	af00      	add	r7, sp, #0
    2506:	4603      	mov	r3, r0
    2508:	460a      	mov	r2, r1
    250a:	71fb      	strb	r3, [r7, #7]
    250c:	4613      	mov	r3, r2
    250e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2510:	79fb      	ldrb	r3, [r7, #7]
    2512:	095b      	lsrs	r3, r3, #5
    2514:	b2d8      	uxtb	r0, r3
    2516:	79fb      	ldrb	r3, [r7, #7]
    2518:	f003 031f 	and.w	r3, r3, #31
    251c:	2201      	movs	r2, #1
    251e:	fa02 f303 	lsl.w	r3, r2, r3
    2522:	79ba      	ldrb	r2, [r7, #6]
    2524:	4619      	mov	r1, r3
    2526:	4b03      	ldr	r3, [pc, #12]	; (2534 <gpio_set_pin_level+0x34>)
    2528:	4798      	blx	r3
}
    252a:	bf00      	nop
    252c:	3708      	adds	r7, #8
    252e:	46bd      	mov	sp, r7
    2530:	bd80      	pop	{r7, pc}
    2532:	bf00      	nop
    2534:	000024bd 	.word	0x000024bd

00002538 <main>:
#include <atmel_start.h>
#include "custom_functions.h"

int main(void){
    2538:	b580      	push	{r7, lr}
    253a:	b082      	sub	sp, #8
    253c:	af00      	add	r7, sp, #0
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    253e:	4b16      	ldr	r3, [pc, #88]	; (2598 <main+0x60>)
    2540:	4798      	blx	r3
	
	/* Initialize the value */
	bool input = 0;
    2542:	2300      	movs	r3, #0
    2544:	71bb      	strb	r3, [r7, #6]
	bool clock_edge_event = 0;
    2546:	2300      	movs	r3, #0
    2548:	717b      	strb	r3, [r7, #5]
	bool led = 0;
    254a:	2300      	movs	r3, #0
    254c:	71fb      	strb	r3, [r7, #7]
	
	while (1) {
		clock_edge_event = edge_detector();
    254e:	4b13      	ldr	r3, [pc, #76]	; (259c <main+0x64>)
    2550:	4798      	blx	r3
    2552:	4603      	mov	r3, r0
    2554:	717b      	strb	r3, [r7, #5]
		
		if(clock_edge_event){
    2556:	797b      	ldrb	r3, [r7, #5]
    2558:	2b00      	cmp	r3, #0
    255a:	d00f      	beq.n	257c <main+0x44>
			input = (PORT->Group[CODE_INPUT/32].IN.reg & (1<<(CODE_INPUT%32)));
    255c:	4b10      	ldr	r3, [pc, #64]	; (25a0 <main+0x68>)
    255e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2562:	f003 0320 	and.w	r3, r3, #32
    2566:	2b00      	cmp	r3, #0
    2568:	bf14      	ite	ne
    256a:	2301      	movne	r3, #1
    256c:	2300      	moveq	r3, #0
    256e:	71bb      	strb	r3, [r7, #6]
			led = HandleEvent(input);
    2570:	79bb      	ldrb	r3, [r7, #6]
    2572:	4618      	mov	r0, r3
    2574:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <main+0x6c>)
    2576:	4798      	blx	r3
    2578:	4603      	mov	r3, r0
    257a:	71fb      	strb	r3, [r7, #7]
		}
		
		if(led){
    257c:	79fb      	ldrb	r3, [r7, #7]
    257e:	2b00      	cmp	r3, #0
    2580:	d004      	beq.n	258c <main+0x54>
			//PORT->Group[LED0/32].OUTCLR.reg = (1<<LED0%32);
			gpio_set_pin_level(LED0,0);
    2582:	2100      	movs	r1, #0
    2584:	2052      	movs	r0, #82	; 0x52
    2586:	4b08      	ldr	r3, [pc, #32]	; (25a8 <main+0x70>)
    2588:	4798      	blx	r3
    258a:	e7e0      	b.n	254e <main+0x16>
			
		}else{
			//PORT->Group[LED0/32].OUTSET.reg = (1<<LED0%32);
			gpio_set_pin_level(LED0,1);
    258c:	2101      	movs	r1, #1
    258e:	2052      	movs	r0, #82	; 0x52
    2590:	4b05      	ldr	r3, [pc, #20]	; (25a8 <main+0x70>)
    2592:	4798      	blx	r3
		clock_edge_event = edge_detector();
    2594:	e7db      	b.n	254e <main+0x16>
    2596:	bf00      	nop
    2598:	000002d1 	.word	0x000002d1
    259c:	0000041d 	.word	0x0000041d
    25a0:	41008000 	.word	0x41008000
    25a4:	000002e1 	.word	0x000002e1
    25a8:	00002501 	.word	0x00002501

000025ac <__libc_init_array>:
    25ac:	b570      	push	{r4, r5, r6, lr}
    25ae:	4e0d      	ldr	r6, [pc, #52]	; (25e4 <__libc_init_array+0x38>)
    25b0:	4c0d      	ldr	r4, [pc, #52]	; (25e8 <__libc_init_array+0x3c>)
    25b2:	1ba4      	subs	r4, r4, r6
    25b4:	10a4      	asrs	r4, r4, #2
    25b6:	2500      	movs	r5, #0
    25b8:	42a5      	cmp	r5, r4
    25ba:	d109      	bne.n	25d0 <__libc_init_array+0x24>
    25bc:	4e0b      	ldr	r6, [pc, #44]	; (25ec <__libc_init_array+0x40>)
    25be:	4c0c      	ldr	r4, [pc, #48]	; (25f0 <__libc_init_array+0x44>)
    25c0:	f000 f8b2 	bl	2728 <_init>
    25c4:	1ba4      	subs	r4, r4, r6
    25c6:	10a4      	asrs	r4, r4, #2
    25c8:	2500      	movs	r5, #0
    25ca:	42a5      	cmp	r5, r4
    25cc:	d105      	bne.n	25da <__libc_init_array+0x2e>
    25ce:	bd70      	pop	{r4, r5, r6, pc}
    25d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    25d4:	4798      	blx	r3
    25d6:	3501      	adds	r5, #1
    25d8:	e7ee      	b.n	25b8 <__libc_init_array+0xc>
    25da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    25de:	4798      	blx	r3
    25e0:	3501      	adds	r5, #1
    25e2:	e7f2      	b.n	25ca <__libc_init_array+0x1e>
    25e4:	00002734 	.word	0x00002734
    25e8:	00002734 	.word	0x00002734
    25ec:	00002734 	.word	0x00002734
    25f0:	00002738 	.word	0x00002738
    25f4:	01000100 	.word	0x01000100
    25f8:	00000001 	.word	0x00000001
    25fc:	00010100 	.word	0x00010100
    2600:	00000001 	.word	0x00000001
    2604:	682f2e2e 	.word	0x682f2e2e
    2608:	702f6c70 	.word	0x702f6c70
    260c:	2f74726f 	.word	0x2f74726f
    2610:	5f6c7068 	.word	0x5f6c7068
    2614:	6f697067 	.word	0x6f697067
    2618:	7361625f 	.word	0x7361625f
    261c:	00682e65 	.word	0x00682e65
    2620:	682f2e2e 	.word	0x682f2e2e
    2624:	732f6c61 	.word	0x732f6c61
    2628:	682f6372 	.word	0x682f6372
    262c:	705f6c61 	.word	0x705f6c61
    2630:	632e6d77 	.word	0x632e6d77
    2634:	00000000 	.word	0x00000000
    2638:	682f2e2e 	.word	0x682f2e2e
    263c:	732f6c61 	.word	0x732f6c61
    2640:	682f6372 	.word	0x682f6372
    2644:	745f6c61 	.word	0x745f6c61
    2648:	72656d69 	.word	0x72656d69
    264c:	0000632e 	.word	0x0000632e
    2650:	682f2e2e 	.word	0x682f2e2e
    2654:	732f6c61 	.word	0x732f6c61
    2658:	682f6372 	.word	0x682f6372
    265c:	755f6c61 	.word	0x755f6c61
    2660:	74726173 	.word	0x74726173
    2664:	6e79735f 	.word	0x6e79735f
    2668:	00632e63 	.word	0x00632e63
    266c:	682f2e2e 	.word	0x682f2e2e
    2670:	752f6c61 	.word	0x752f6c61
    2674:	736c6974 	.word	0x736c6974
    2678:	6372732f 	.word	0x6372732f
    267c:	6974752f 	.word	0x6974752f
    2680:	6c5f736c 	.word	0x6c5f736c
    2684:	2e747369 	.word	0x2e747369
    2688:	00000063 	.word	0x00000063
    268c:	682f2e2e 	.word	0x682f2e2e
    2690:	722f6c70 	.word	0x722f6c70
    2694:	682f6374 	.word	0x682f6374
    2698:	725f6c70 	.word	0x725f6c70
    269c:	632e6374 	.word	0x632e6374
    26a0:	00000000 	.word	0x00000000
    26a4:	682f2e2e 	.word	0x682f2e2e
    26a8:	732f6c70 	.word	0x732f6c70
    26ac:	6f637265 	.word	0x6f637265
    26b0:	70682f6d 	.word	0x70682f6d
    26b4:	65735f6c 	.word	0x65735f6c
    26b8:	6d6f6372 	.word	0x6d6f6372
    26bc:	0000632e 	.word	0x0000632e
    26c0:	40003000 	.word	0x40003000
    26c4:	40003400 	.word	0x40003400
    26c8:	41012000 	.word	0x41012000
    26cc:	41014000 	.word	0x41014000
    26d0:	43000000 	.word	0x43000000
    26d4:	43000400 	.word	0x43000400
    26d8:	43000800 	.word	0x43000800
    26dc:	43000c00 	.word	0x43000c00

000026e0 <sercomspi_regs>:
	...
    26f4:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    2704:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    2714:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    2724:	43001800                                ...C

00002728 <_init>:
    2728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    272a:	bf00      	nop
    272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    272e:	bc08      	pop	{r3}
    2730:	469e      	mov	lr, r3
    2732:	4770      	bx	lr

00002734 <__init_array_start>:
    2734:	00000289 	.word	0x00000289

00002738 <_fini>:
    2738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    273a:	bf00      	nop
    273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    273e:	bc08      	pop	{r3}
    2740:	469e      	mov	lr, r3
    2742:	4770      	bx	lr

00002744 <__fini_array_start>:
    2744:	00000265 	.word	0x00000265
