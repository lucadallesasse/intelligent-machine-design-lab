
LED_Switcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bcc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000040  20000000  00002bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020040  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020040  2**0
                  CONTENTS
  4 .bss          000000b0  20000040  00002c0c  00020040  2**2
                  ALLOC
  5 .stack        00010000  200000f0  00002cbc  00020040  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001fcac  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002c1a  00000000  00000000  0003fd73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a8dc  00000000  00000000  0004298d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012a8  00000000  00000000  0004d269  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001150  00000000  00000000  0004e511  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033327  00000000  00000000  0004f661  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014b64  00000000  00000000  00082988  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011627a  00000000  00000000  000974ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004dd0  00000000  00000000  001ad768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 00 01 20 1d 04 00 00 b9 04 00 00 b9 04 00 00     ... ............
      10:	b9 04 00 00 b9 04 00 00 b9 04 00 00 00 00 00 00     ................
	...
      2c:	b9 04 00 00 b9 04 00 00 00 00 00 00 b9 04 00 00     ................
      3c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      4c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      5c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      6c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      7c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      8c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      9c:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      ac:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      bc:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      cc:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
      dc:	b9 04 00 00 b9 04 00 00 b9 04 00 00 00 00 00 00     ................
	...
      f4:	25 17 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     %...............
     104:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     114:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     124:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     134:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     144:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     154:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     164:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     174:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     184:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     194:	b9 04 00 00 39 2a 00 00 b9 04 00 00 b9 04 00 00     ....9*..........
     1a4:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     1b4:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     1c4:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     1d4:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     1e4:	b9 04 00 00 b9 04 00 00 05 26 00 00 b9 04 00 00     .........&......
     1f4:	21 26 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     !&..............
     204:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     214:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     224:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     234:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     244:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................
     254:	b9 04 00 00 b9 04 00 00 b9 04 00 00 b9 04 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	00002bcc 	.word	0x00002bcc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002bcc 	.word	0x00002bcc
     2c4:	20000044 	.word	0x20000044
     2c8:	00002bcc 	.word	0x00002bcc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000c81 	.word	0x00000c81

000002e0 <HandleEvent>:
#include <custom_functions.h>

bool HandleEvent(bool bit_entered){
     2e0:	b480      	push	{r7}
     2e2:	b087      	sub	sp, #28
     2e4:	af00      	add	r7, sp, #0
     2e6:	4603      	mov	r3, r0
     2e8:	71fb      	strb	r3, [r7, #7]
	
	static char CurrentState = 0;
	static bool output = 0; //if 1 LED on, if 0 LED off
	
	bool on_pattern[] = {0,1,0,1,1};
     2ea:	4a48      	ldr	r2, [pc, #288]	; (40c <HandleEvent+0x12c>)
     2ec:	f107 0310 	add.w	r3, r7, #16
     2f0:	e892 0003 	ldmia.w	r2, {r0, r1}
     2f4:	6018      	str	r0, [r3, #0]
     2f6:	3304      	adds	r3, #4
     2f8:	7019      	strb	r1, [r3, #0]
	bool off_pattern[] = {0,1,1,0,1};
     2fa:	4a45      	ldr	r2, [pc, #276]	; (410 <HandleEvent+0x130>)
     2fc:	f107 0308 	add.w	r3, r7, #8
     300:	e892 0003 	ldmia.w	r2, {r0, r1}
     304:	6018      	str	r0, [r3, #0]
     306:	3304      	adds	r3, #4
     308:	7019      	strb	r1, [r3, #0]
	
	switch (CurrentState){
     30a:	4b42      	ldr	r3, [pc, #264]	; (414 <HandleEvent+0x134>)
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	2b06      	cmp	r3, #6
     310:	d873      	bhi.n	3fa <HandleEvent+0x11a>
     312:	a201      	add	r2, pc, #4	; (adr r2, 318 <HandleEvent+0x38>)
     314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     318:	00000335 	.word	0x00000335
     31c:	0000034d 	.word	0x0000034d
     320:	00000365 	.word	0x00000365
     324:	00000385 	.word	0x00000385
     328:	0000039d 	.word	0x0000039d
     32c:	000003bb 	.word	0x000003bb
     330:	000003d7 	.word	0x000003d7
		case 0:
		if(bit_entered == on_pattern[0]){
     334:	7c3b      	ldrb	r3, [r7, #16]
     336:	79fa      	ldrb	r2, [r7, #7]
     338:	429a      	cmp	r2, r3
     33a:	d103      	bne.n	344 <HandleEvent+0x64>
			CurrentState = 1;
     33c:	4b35      	ldr	r3, [pc, #212]	; (414 <HandleEvent+0x134>)
     33e:	2201      	movs	r2, #1
     340:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 0;
		}
		break;
     342:	e05a      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 0;
     344:	4b33      	ldr	r3, [pc, #204]	; (414 <HandleEvent+0x134>)
     346:	2200      	movs	r2, #0
     348:	701a      	strb	r2, [r3, #0]
		break;
     34a:	e056      	b.n	3fa <HandleEvent+0x11a>
		case 1:
		if(bit_entered == on_pattern[1]){
     34c:	7c7b      	ldrb	r3, [r7, #17]
     34e:	79fa      	ldrb	r2, [r7, #7]
     350:	429a      	cmp	r2, r3
     352:	d103      	bne.n	35c <HandleEvent+0x7c>
			CurrentState = 2;
     354:	4b2f      	ldr	r3, [pc, #188]	; (414 <HandleEvent+0x134>)
     356:	2202      	movs	r2, #2
     358:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 1;
		}
		break;
     35a:	e04e      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 1;
     35c:	4b2d      	ldr	r3, [pc, #180]	; (414 <HandleEvent+0x134>)
     35e:	2201      	movs	r2, #1
     360:	701a      	strb	r2, [r3, #0]
		break;
     362:	e04a      	b.n	3fa <HandleEvent+0x11a>
		case 2:
		if(bit_entered == on_pattern[2]){
     364:	7cbb      	ldrb	r3, [r7, #18]
     366:	79fa      	ldrb	r2, [r7, #7]
     368:	429a      	cmp	r2, r3
     36a:	d103      	bne.n	374 <HandleEvent+0x94>
			CurrentState = 3;
     36c:	4b29      	ldr	r3, [pc, #164]	; (414 <HandleEvent+0x134>)
     36e:	2203      	movs	r2, #3
     370:	701a      	strb	r2, [r3, #0]
		}
		else if(bit_entered == off_pattern[2]){
			CurrentState = 5;
		}
		break;
     372:	e041      	b.n	3f8 <HandleEvent+0x118>
		else if(bit_entered == off_pattern[2]){
     374:	7abb      	ldrb	r3, [r7, #10]
     376:	79fa      	ldrb	r2, [r7, #7]
     378:	429a      	cmp	r2, r3
     37a:	d13d      	bne.n	3f8 <HandleEvent+0x118>
			CurrentState = 5;
     37c:	4b25      	ldr	r3, [pc, #148]	; (414 <HandleEvent+0x134>)
     37e:	2205      	movs	r2, #5
     380:	701a      	strb	r2, [r3, #0]
		break;
     382:	e039      	b.n	3f8 <HandleEvent+0x118>
		case 3:
		if(bit_entered == on_pattern[3]){
     384:	7cfb      	ldrb	r3, [r7, #19]
     386:	79fa      	ldrb	r2, [r7, #7]
     388:	429a      	cmp	r2, r3
     38a:	d103      	bne.n	394 <HandleEvent+0xb4>
			CurrentState = 4;
     38c:	4b21      	ldr	r3, [pc, #132]	; (414 <HandleEvent+0x134>)
     38e:	2204      	movs	r2, #4
     390:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 1;
		}
		break;
     392:	e032      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 1;
     394:	4b1f      	ldr	r3, [pc, #124]	; (414 <HandleEvent+0x134>)
     396:	2201      	movs	r2, #1
     398:	701a      	strb	r2, [r3, #0]
		break;
     39a:	e02e      	b.n	3fa <HandleEvent+0x11a>
		case 4:
		if(bit_entered == on_pattern[4]){
     39c:	7d3b      	ldrb	r3, [r7, #20]
     39e:	79fa      	ldrb	r2, [r7, #7]
     3a0:	429a      	cmp	r2, r3
     3a2:	d106      	bne.n	3b2 <HandleEvent+0xd2>
			CurrentState = 5;
     3a4:	4b1b      	ldr	r3, [pc, #108]	; (414 <HandleEvent+0x134>)
     3a6:	2205      	movs	r2, #5
     3a8:	701a      	strb	r2, [r3, #0]
			output = 1;
     3aa:	4b1b      	ldr	r3, [pc, #108]	; (418 <HandleEvent+0x138>)
     3ac:	2201      	movs	r2, #1
     3ae:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 3;
		}
		break;
     3b0:	e023      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 3;
     3b2:	4b18      	ldr	r3, [pc, #96]	; (414 <HandleEvent+0x134>)
     3b4:	2203      	movs	r2, #3
     3b6:	701a      	strb	r2, [r3, #0]
		break;
     3b8:	e01f      	b.n	3fa <HandleEvent+0x11a>
		case 5:
		if(bit_entered == 0){
     3ba:	79fb      	ldrb	r3, [r7, #7]
     3bc:	f083 0301 	eor.w	r3, r3, #1
     3c0:	b2db      	uxtb	r3, r3
     3c2:	2b00      	cmp	r3, #0
     3c4:	d003      	beq.n	3ce <HandleEvent+0xee>
			CurrentState = 6;
     3c6:	4b13      	ldr	r3, [pc, #76]	; (414 <HandleEvent+0x134>)
     3c8:	2206      	movs	r2, #6
     3ca:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 0;
		}
		break;
     3cc:	e015      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 0;
     3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <HandleEvent+0x134>)
     3d0:	2200      	movs	r2, #0
     3d2:	701a      	strb	r2, [r3, #0]
		break;
     3d4:	e011      	b.n	3fa <HandleEvent+0x11a>
		case 6:
		if(bit_entered == 0){
     3d6:	79fb      	ldrb	r3, [r7, #7]
     3d8:	f083 0301 	eor.w	r3, r3, #1
     3dc:	b2db      	uxtb	r3, r3
     3de:	2b00      	cmp	r3, #0
     3e0:	d003      	beq.n	3ea <HandleEvent+0x10a>
			CurrentState = 1;
     3e2:	4b0c      	ldr	r3, [pc, #48]	; (414 <HandleEvent+0x134>)
     3e4:	2201      	movs	r2, #1
     3e6:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 2;
			output = 0;
		}
		break;
     3e8:	e007      	b.n	3fa <HandleEvent+0x11a>
			CurrentState = 2;
     3ea:	4b0a      	ldr	r3, [pc, #40]	; (414 <HandleEvent+0x134>)
     3ec:	2202      	movs	r2, #2
     3ee:	701a      	strb	r2, [r3, #0]
			output = 0;
     3f0:	4b09      	ldr	r3, [pc, #36]	; (418 <HandleEvent+0x138>)
     3f2:	2200      	movs	r2, #0
     3f4:	701a      	strb	r2, [r3, #0]
		break;
     3f6:	e000      	b.n	3fa <HandleEvent+0x11a>
		break;
     3f8:	bf00      	nop
	}
	return output;
     3fa:	4b07      	ldr	r3, [pc, #28]	; (418 <HandleEvent+0x138>)
     3fc:	781b      	ldrb	r3, [r3, #0]
}
     3fe:	4618      	mov	r0, r3
     400:	371c      	adds	r7, #28
     402:	46bd      	mov	sp, r7
     404:	f85d 7b04 	ldr.w	r7, [sp], #4
     408:	4770      	bx	lr
     40a:	bf00      	nop
     40c:	00002aa8 	.word	0x00002aa8
     410:	00002ab0 	.word	0x00002ab0
     414:	2000005c 	.word	0x2000005c
     418:	2000005d 	.word	0x2000005d

0000041c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     41c:	b580      	push	{r7, lr}
     41e:	b082      	sub	sp, #8
     420:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     422:	4b1c      	ldr	r3, [pc, #112]	; (494 <Reset_Handler+0x78>)
     424:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     426:	4b1c      	ldr	r3, [pc, #112]	; (498 <Reset_Handler+0x7c>)
     428:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     42a:	687a      	ldr	r2, [r7, #4]
     42c:	683b      	ldr	r3, [r7, #0]
     42e:	429a      	cmp	r2, r3
     430:	d00c      	beq.n	44c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     432:	e007      	b.n	444 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     434:	683b      	ldr	r3, [r7, #0]
     436:	1d1a      	adds	r2, r3, #4
     438:	603a      	str	r2, [r7, #0]
     43a:	687a      	ldr	r2, [r7, #4]
     43c:	1d11      	adds	r1, r2, #4
     43e:	6079      	str	r1, [r7, #4]
     440:	6812      	ldr	r2, [r2, #0]
     442:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     444:	683b      	ldr	r3, [r7, #0]
     446:	4a15      	ldr	r2, [pc, #84]	; (49c <Reset_Handler+0x80>)
     448:	4293      	cmp	r3, r2
     44a:	d3f3      	bcc.n	434 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     44c:	4b14      	ldr	r3, [pc, #80]	; (4a0 <Reset_Handler+0x84>)
     44e:	603b      	str	r3, [r7, #0]
     450:	e004      	b.n	45c <Reset_Handler+0x40>
                *pDest++ = 0;
     452:	683b      	ldr	r3, [r7, #0]
     454:	1d1a      	adds	r2, r3, #4
     456:	603a      	str	r2, [r7, #0]
     458:	2200      	movs	r2, #0
     45a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     45c:	683b      	ldr	r3, [r7, #0]
     45e:	4a11      	ldr	r2, [pc, #68]	; (4a4 <Reset_Handler+0x88>)
     460:	4293      	cmp	r3, r2
     462:	d3f6      	bcc.n	452 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     464:	4b10      	ldr	r3, [pc, #64]	; (4a8 <Reset_Handler+0x8c>)
     466:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     468:	4a10      	ldr	r2, [pc, #64]	; (4ac <Reset_Handler+0x90>)
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     470:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     472:	4a0e      	ldr	r2, [pc, #56]	; (4ac <Reset_Handler+0x90>)
     474:	4b0d      	ldr	r3, [pc, #52]	; (4ac <Reset_Handler+0x90>)
     476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     47a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     47e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     482:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     486:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     48a:	4b09      	ldr	r3, [pc, #36]	; (4b0 <Reset_Handler+0x94>)
     48c:	4798      	blx	r3

        /* Branch to main function */
        main();
     48e:	4b09      	ldr	r3, [pc, #36]	; (4b4 <Reset_Handler+0x98>)
     490:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     492:	e7fe      	b.n	492 <Reset_Handler+0x76>
     494:	00002bcc 	.word	0x00002bcc
     498:	20000000 	.word	0x20000000
     49c:	20000040 	.word	0x20000040
     4a0:	20000040 	.word	0x20000040
     4a4:	200000f0 	.word	0x200000f0
     4a8:	00000000 	.word	0x00000000
     4ac:	e000ed00 	.word	0xe000ed00
     4b0:	00002a61 	.word	0x00002a61
     4b4:	000028e1 	.word	0x000028e1

000004b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4b8:	b480      	push	{r7}
     4ba:	af00      	add	r7, sp, #0
        while (1) {
     4bc:	e7fe      	b.n	4bc <Dummy_Handler+0x4>

000004be <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     4be:	b480      	push	{r7}
     4c0:	b085      	sub	sp, #20
     4c2:	af00      	add	r7, sp, #0
     4c4:	60f8      	str	r0, [r7, #12]
     4c6:	460b      	mov	r3, r1
     4c8:	607a      	str	r2, [r7, #4]
     4ca:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     4cc:	7afa      	ldrb	r2, [r7, #11]
     4ce:	68fb      	ldr	r3, [r7, #12]
     4d0:	3220      	adds	r2, #32
     4d2:	6879      	ldr	r1, [r7, #4]
     4d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     4d8:	bf00      	nop
     4da:	3714      	adds	r7, #20
     4dc:	46bd      	mov	sp, r7
     4de:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e2:	4770      	bx	lr

000004e4 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     4e4:	b480      	push	{r7}
     4e6:	b083      	sub	sp, #12
     4e8:	af00      	add	r7, sp, #0
     4ea:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	695b      	ldr	r3, [r3, #20]
     4f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     4f4:	687b      	ldr	r3, [r7, #4]
     4f6:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4f8:	bf00      	nop
     4fa:	370c      	adds	r7, #12
     4fc:	46bd      	mov	sp, r7
     4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
     502:	4770      	bx	lr

00000504 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     504:	b480      	push	{r7}
     506:	b083      	sub	sp, #12
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	695b      	ldr	r3, [r3, #20]
     510:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     514:	687b      	ldr	r3, [r7, #4]
     516:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     518:	bf00      	nop
     51a:	370c      	adds	r7, #12
     51c:	46bd      	mov	sp, r7
     51e:	f85d 7b04 	ldr.w	r7, [sp], #4
     522:	4770      	bx	lr

00000524 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     524:	b480      	push	{r7}
     526:	b083      	sub	sp, #12
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	699b      	ldr	r3, [r3, #24]
     530:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     534:	687b      	ldr	r3, [r7, #4]
     536:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     538:	bf00      	nop
     53a:	370c      	adds	r7, #12
     53c:	46bd      	mov	sp, r7
     53e:	f85d 7b04 	ldr.w	r7, [sp], #4
     542:	4770      	bx	lr

00000544 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     544:	b480      	push	{r7}
     546:	b083      	sub	sp, #12
     548:	af00      	add	r7, sp, #0
     54a:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	699b      	ldr	r3, [r3, #24]
     550:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     554:	687b      	ldr	r3, [r7, #4]
     556:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     558:	bf00      	nop
     55a:	370c      	adds	r7, #12
     55c:	46bd      	mov	sp, r7
     55e:	f85d 7b04 	ldr.w	r7, [sp], #4
     562:	4770      	bx	lr

00000564 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     564:	b480      	push	{r7}
     566:	b085      	sub	sp, #20
     568:	af00      	add	r7, sp, #0
     56a:	60f8      	str	r0, [r7, #12]
     56c:	460b      	mov	r3, r1
     56e:	607a      	str	r2, [r7, #4]
     570:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     572:	7afb      	ldrb	r3, [r7, #11]
     574:	68fa      	ldr	r2, [r7, #12]
     576:	01db      	lsls	r3, r3, #7
     578:	4413      	add	r3, r2
     57a:	3308      	adds	r3, #8
     57c:	687a      	ldr	r2, [r7, #4]
     57e:	601a      	str	r2, [r3, #0]
}
     580:	bf00      	nop
     582:	3714      	adds	r7, #20
     584:	46bd      	mov	sp, r7
     586:	f85d 7b04 	ldr.w	r7, [sp], #4
     58a:	4770      	bx	lr

0000058c <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     58c:	b480      	push	{r7}
     58e:	b085      	sub	sp, #20
     590:	af00      	add	r7, sp, #0
     592:	60f8      	str	r0, [r7, #12]
     594:	460b      	mov	r3, r1
     596:	607a      	str	r2, [r7, #4]
     598:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     59a:	7afb      	ldrb	r3, [r7, #11]
     59c:	68fa      	ldr	r2, [r7, #12]
     59e:	01db      	lsls	r3, r3, #7
     5a0:	4413      	add	r3, r2
     5a2:	3304      	adds	r3, #4
     5a4:	687a      	ldr	r2, [r7, #4]
     5a6:	601a      	str	r2, [r3, #0]
}
     5a8:	bf00      	nop
     5aa:	3714      	adds	r7, #20
     5ac:	46bd      	mov	sp, r7
     5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
     5b2:	4770      	bx	lr

000005b4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     5b4:	b480      	push	{r7}
     5b6:	b085      	sub	sp, #20
     5b8:	af00      	add	r7, sp, #0
     5ba:	60f8      	str	r0, [r7, #12]
     5bc:	460b      	mov	r3, r1
     5be:	607a      	str	r2, [r7, #4]
     5c0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5c2:	7afb      	ldrb	r3, [r7, #11]
     5c4:	68fa      	ldr	r2, [r7, #12]
     5c6:	01db      	lsls	r3, r3, #7
     5c8:	4413      	add	r3, r2
     5ca:	3318      	adds	r3, #24
     5cc:	687a      	ldr	r2, [r7, #4]
     5ce:	601a      	str	r2, [r3, #0]
}
     5d0:	bf00      	nop
     5d2:	3714      	adds	r7, #20
     5d4:	46bd      	mov	sp, r7
     5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     5da:	4770      	bx	lr

000005dc <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     5dc:	b480      	push	{r7}
     5de:	b085      	sub	sp, #20
     5e0:	af00      	add	r7, sp, #0
     5e2:	60f8      	str	r0, [r7, #12]
     5e4:	460b      	mov	r3, r1
     5e6:	607a      	str	r2, [r7, #4]
     5e8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ea:	7afb      	ldrb	r3, [r7, #11]
     5ec:	68fa      	ldr	r2, [r7, #12]
     5ee:	01db      	lsls	r3, r3, #7
     5f0:	4413      	add	r3, r2
     5f2:	3314      	adds	r3, #20
     5f4:	687a      	ldr	r2, [r7, #4]
     5f6:	601a      	str	r2, [r3, #0]
}
     5f8:	bf00      	nop
     5fa:	3714      	adds	r7, #20
     5fc:	46bd      	mov	sp, r7
     5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
     602:	4770      	bx	lr

00000604 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     604:	b480      	push	{r7}
     606:	b085      	sub	sp, #20
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
     60c:	4608      	mov	r0, r1
     60e:	4611      	mov	r1, r2
     610:	461a      	mov	r2, r3
     612:	4603      	mov	r3, r0
     614:	70fb      	strb	r3, [r7, #3]
     616:	460b      	mov	r3, r1
     618:	70bb      	strb	r3, [r7, #2]
     61a:	4613      	mov	r3, r2
     61c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	78fa      	ldrb	r2, [r7, #3]
     620:	78bb      	ldrb	r3, [r7, #2]
     622:	6879      	ldr	r1, [r7, #4]
     624:	01d2      	lsls	r2, r2, #7
     626:	440a      	add	r2, r1
     628:	4413      	add	r3, r2
     62a:	3330      	adds	r3, #48	; 0x30
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     630:	7bfb      	ldrb	r3, [r7, #15]
     632:	f023 030f 	bic.w	r3, r3, #15
     636:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     638:	787b      	ldrb	r3, [r7, #1]
     63a:	f003 030f 	and.w	r3, r3, #15
     63e:	b2da      	uxtb	r2, r3
     640:	7bfb      	ldrb	r3, [r7, #15]
     642:	4313      	orrs	r3, r2
     644:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     646:	78fa      	ldrb	r2, [r7, #3]
     648:	78bb      	ldrb	r3, [r7, #2]
     64a:	6879      	ldr	r1, [r7, #4]
     64c:	01d2      	lsls	r2, r2, #7
     64e:	440a      	add	r2, r1
     650:	4413      	add	r3, r2
     652:	3330      	adds	r3, #48	; 0x30
     654:	7bfa      	ldrb	r2, [r7, #15]
     656:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     658:	bf00      	nop
     65a:	3714      	adds	r7, #20
     65c:	46bd      	mov	sp, r7
     65e:	f85d 7b04 	ldr.w	r7, [sp], #4
     662:	4770      	bx	lr

00000664 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     664:	b480      	push	{r7}
     666:	b085      	sub	sp, #20
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
     66c:	4608      	mov	r0, r1
     66e:	4611      	mov	r1, r2
     670:	461a      	mov	r2, r3
     672:	4603      	mov	r3, r0
     674:	70fb      	strb	r3, [r7, #3]
     676:	460b      	mov	r3, r1
     678:	70bb      	strb	r3, [r7, #2]
     67a:	4613      	mov	r3, r2
     67c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	78fa      	ldrb	r2, [r7, #3]
     680:	78bb      	ldrb	r3, [r7, #2]
     682:	6879      	ldr	r1, [r7, #4]
     684:	01d2      	lsls	r2, r2, #7
     686:	440a      	add	r2, r1
     688:	4413      	add	r3, r2
     68a:	3330      	adds	r3, #48	; 0x30
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     690:	7bfb      	ldrb	r3, [r7, #15]
     692:	f003 030f 	and.w	r3, r3, #15
     696:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     698:	787b      	ldrb	r3, [r7, #1]
     69a:	011b      	lsls	r3, r3, #4
     69c:	b2da      	uxtb	r2, r3
     69e:	7bfb      	ldrb	r3, [r7, #15]
     6a0:	4313      	orrs	r3, r2
     6a2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a4:	78fa      	ldrb	r2, [r7, #3]
     6a6:	78bb      	ldrb	r3, [r7, #2]
     6a8:	6879      	ldr	r1, [r7, #4]
     6aa:	01d2      	lsls	r2, r2, #7
     6ac:	440a      	add	r2, r1
     6ae:	4413      	add	r3, r2
     6b0:	3330      	adds	r3, #48	; 0x30
     6b2:	7bfa      	ldrb	r2, [r7, #15]
     6b4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6b6:	bf00      	nop
     6b8:	3714      	adds	r7, #20
     6ba:	46bd      	mov	sp, r7
     6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c0:	4770      	bx	lr

000006c2 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     6c2:	b480      	push	{r7}
     6c4:	b085      	sub	sp, #20
     6c6:	af00      	add	r7, sp, #0
     6c8:	6078      	str	r0, [r7, #4]
     6ca:	4608      	mov	r0, r1
     6cc:	4611      	mov	r1, r2
     6ce:	461a      	mov	r2, r3
     6d0:	4603      	mov	r3, r0
     6d2:	70fb      	strb	r3, [r7, #3]
     6d4:	460b      	mov	r3, r1
     6d6:	70bb      	strb	r3, [r7, #2]
     6d8:	4613      	mov	r3, r2
     6da:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6dc:	78fa      	ldrb	r2, [r7, #3]
     6de:	78bb      	ldrb	r3, [r7, #2]
     6e0:	6879      	ldr	r1, [r7, #4]
     6e2:	01d2      	lsls	r2, r2, #7
     6e4:	440a      	add	r2, r1
     6e6:	4413      	add	r3, r2
     6e8:	3340      	adds	r3, #64	; 0x40
     6ea:	781b      	ldrb	r3, [r3, #0]
     6ec:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ee:	7bfb      	ldrb	r3, [r7, #15]
     6f0:	f023 0301 	bic.w	r3, r3, #1
     6f4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f6:	787a      	ldrb	r2, [r7, #1]
     6f8:	7bfb      	ldrb	r3, [r7, #15]
     6fa:	4313      	orrs	r3, r2
     6fc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fe:	78fa      	ldrb	r2, [r7, #3]
     700:	78bb      	ldrb	r3, [r7, #2]
     702:	6879      	ldr	r1, [r7, #4]
     704:	01d2      	lsls	r2, r2, #7
     706:	440a      	add	r2, r1
     708:	4413      	add	r3, r2
     70a:	3340      	adds	r3, #64	; 0x40
     70c:	7bfa      	ldrb	r2, [r7, #15]
     70e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     710:	bf00      	nop
     712:	3714      	adds	r7, #20
     714:	46bd      	mov	sp, r7
     716:	f85d 7b04 	ldr.w	r7, [sp], #4
     71a:	4770      	bx	lr

0000071c <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     71c:	b490      	push	{r4, r7}
     71e:	b082      	sub	sp, #8
     720:	af00      	add	r7, sp, #0
     722:	6078      	str	r0, [r7, #4]
     724:	460b      	mov	r3, r1
     726:	70fb      	strb	r3, [r7, #3]
     728:	4613      	mov	r3, r2
     72a:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     72c:	78fa      	ldrb	r2, [r7, #3]
     72e:	78bb      	ldrb	r3, [r7, #2]
     730:	78f8      	ldrb	r0, [r7, #3]
     732:	78b9      	ldrb	r1, [r7, #2]
     734:	687c      	ldr	r4, [r7, #4]
     736:	01c0      	lsls	r0, r0, #7
     738:	4420      	add	r0, r4
     73a:	4401      	add	r1, r0
     73c:	3140      	adds	r1, #64	; 0x40
     73e:	7809      	ldrb	r1, [r1, #0]
     740:	b2c9      	uxtb	r1, r1
     742:	f041 0104 	orr.w	r1, r1, #4
     746:	b2c8      	uxtb	r0, r1
     748:	6879      	ldr	r1, [r7, #4]
     74a:	01d2      	lsls	r2, r2, #7
     74c:	440a      	add	r2, r1
     74e:	4413      	add	r3, r2
     750:	3340      	adds	r3, #64	; 0x40
     752:	4602      	mov	r2, r0
     754:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     756:	bf00      	nop
     758:	3708      	adds	r7, #8
     75a:	46bd      	mov	sp, r7
     75c:	bc90      	pop	{r4, r7}
     75e:	4770      	bx	lr

00000760 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     760:	b490      	push	{r4, r7}
     762:	b082      	sub	sp, #8
     764:	af00      	add	r7, sp, #0
     766:	6078      	str	r0, [r7, #4]
     768:	460b      	mov	r3, r1
     76a:	70fb      	strb	r3, [r7, #3]
     76c:	4613      	mov	r3, r2
     76e:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     770:	78fa      	ldrb	r2, [r7, #3]
     772:	78bb      	ldrb	r3, [r7, #2]
     774:	78f8      	ldrb	r0, [r7, #3]
     776:	78b9      	ldrb	r1, [r7, #2]
     778:	687c      	ldr	r4, [r7, #4]
     77a:	01c0      	lsls	r0, r0, #7
     77c:	4420      	add	r0, r4
     77e:	4401      	add	r1, r0
     780:	3140      	adds	r1, #64	; 0x40
     782:	7809      	ldrb	r1, [r1, #0]
     784:	b2c9      	uxtb	r1, r1
     786:	f021 0104 	bic.w	r1, r1, #4
     78a:	b2c8      	uxtb	r0, r1
     78c:	6879      	ldr	r1, [r7, #4]
     78e:	01d2      	lsls	r2, r2, #7
     790:	440a      	add	r2, r1
     792:	4413      	add	r3, r2
     794:	3340      	adds	r3, #64	; 0x40
     796:	4602      	mov	r2, r0
     798:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     79a:	bf00      	nop
     79c:	3708      	adds	r7, #8
     79e:	46bd      	mov	sp, r7
     7a0:	bc90      	pop	{r4, r7}
     7a2:	4770      	bx	lr

000007a4 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     7a4:	b480      	push	{r7}
     7a6:	b085      	sub	sp, #20
     7a8:	af00      	add	r7, sp, #0
     7aa:	60f8      	str	r0, [r7, #12]
     7ac:	460b      	mov	r3, r1
     7ae:	607a      	str	r2, [r7, #4]
     7b0:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7b2:	7afb      	ldrb	r3, [r7, #11]
     7b4:	68fa      	ldr	r2, [r7, #12]
     7b6:	01db      	lsls	r3, r3, #7
     7b8:	4413      	add	r3, r2
     7ba:	3328      	adds	r3, #40	; 0x28
     7bc:	687a      	ldr	r2, [r7, #4]
     7be:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7c0:	bf00      	nop
     7c2:	3714      	adds	r7, #20
     7c4:	46bd      	mov	sp, r7
     7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     7ca:	4770      	bx	lr

000007cc <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     7cc:	b580      	push	{r7, lr}
     7ce:	b082      	sub	sp, #8
     7d0:	af00      	add	r7, sp, #0
     7d2:	4603      	mov	r3, r0
     7d4:	6039      	str	r1, [r7, #0]
     7d6:	71fb      	strb	r3, [r7, #7]
     7d8:	4613      	mov	r3, r2
     7da:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     7dc:	79bb      	ldrb	r3, [r7, #6]
     7de:	2b01      	cmp	r3, #1
     7e0:	d01c      	beq.n	81c <_gpio_set_direction+0x50>
     7e2:	2b02      	cmp	r3, #2
     7e4:	d037      	beq.n	856 <_gpio_set_direction+0x8a>
     7e6:	2b00      	cmp	r3, #0
     7e8:	d14e      	bne.n	888 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     7ea:	79fb      	ldrb	r3, [r7, #7]
     7ec:	683a      	ldr	r2, [r7, #0]
     7ee:	4619      	mov	r1, r3
     7f0:	482a      	ldr	r0, [pc, #168]	; (89c <_gpio_set_direction+0xd0>)
     7f2:	4b2b      	ldr	r3, [pc, #172]	; (8a0 <_gpio_set_direction+0xd4>)
     7f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	b29b      	uxth	r3, r3
     7fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     7fe:	79fb      	ldrb	r3, [r7, #7]
     800:	4619      	mov	r1, r3
     802:	4826      	ldr	r0, [pc, #152]	; (89c <_gpio_set_direction+0xd0>)
     804:	4b27      	ldr	r3, [pc, #156]	; (8a4 <_gpio_set_direction+0xd8>)
     806:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     808:	683b      	ldr	r3, [r7, #0]
     80a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     80c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     810:	79fb      	ldrb	r3, [r7, #7]
     812:	4619      	mov	r1, r3
     814:	4821      	ldr	r0, [pc, #132]	; (89c <_gpio_set_direction+0xd0>)
     816:	4b23      	ldr	r3, [pc, #140]	; (8a4 <_gpio_set_direction+0xd8>)
     818:	4798      	blx	r3
		break;
     81a:	e03a      	b.n	892 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     81c:	79fb      	ldrb	r3, [r7, #7]
     81e:	683a      	ldr	r2, [r7, #0]
     820:	4619      	mov	r1, r3
     822:	481e      	ldr	r0, [pc, #120]	; (89c <_gpio_set_direction+0xd0>)
     824:	4b1e      	ldr	r3, [pc, #120]	; (8a0 <_gpio_set_direction+0xd4>)
     826:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     828:	683b      	ldr	r3, [r7, #0]
     82a:	b29b      	uxth	r3, r3
     82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     834:	79f9      	ldrb	r1, [r7, #7]
     836:	461a      	mov	r2, r3
     838:	4818      	ldr	r0, [pc, #96]	; (89c <_gpio_set_direction+0xd0>)
     83a:	4b1a      	ldr	r3, [pc, #104]	; (8a4 <_gpio_set_direction+0xd8>)
     83c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     83e:	683b      	ldr	r3, [r7, #0]
     840:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     84a:	79f9      	ldrb	r1, [r7, #7]
     84c:	461a      	mov	r2, r3
     84e:	4813      	ldr	r0, [pc, #76]	; (89c <_gpio_set_direction+0xd0>)
     850:	4b14      	ldr	r3, [pc, #80]	; (8a4 <_gpio_set_direction+0xd8>)
     852:	4798      	blx	r3
		break;
     854:	e01d      	b.n	892 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     856:	79fb      	ldrb	r3, [r7, #7]
     858:	683a      	ldr	r2, [r7, #0]
     85a:	4619      	mov	r1, r3
     85c:	480f      	ldr	r0, [pc, #60]	; (89c <_gpio_set_direction+0xd0>)
     85e:	4b12      	ldr	r3, [pc, #72]	; (8a8 <_gpio_set_direction+0xdc>)
     860:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     862:	683b      	ldr	r3, [r7, #0]
     864:	b29b      	uxth	r3, r3
     866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     86a:	79fb      	ldrb	r3, [r7, #7]
     86c:	4619      	mov	r1, r3
     86e:	480b      	ldr	r0, [pc, #44]	; (89c <_gpio_set_direction+0xd0>)
     870:	4b0c      	ldr	r3, [pc, #48]	; (8a4 <_gpio_set_direction+0xd8>)
     872:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     874:	683b      	ldr	r3, [r7, #0]
     876:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     878:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     87c:	79fb      	ldrb	r3, [r7, #7]
     87e:	4619      	mov	r1, r3
     880:	4806      	ldr	r0, [pc, #24]	; (89c <_gpio_set_direction+0xd0>)
     882:	4b08      	ldr	r3, [pc, #32]	; (8a4 <_gpio_set_direction+0xd8>)
     884:	4798      	blx	r3
		break;
     886:	e004      	b.n	892 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     888:	2246      	movs	r2, #70	; 0x46
     88a:	4908      	ldr	r1, [pc, #32]	; (8ac <_gpio_set_direction+0xe0>)
     88c:	2000      	movs	r0, #0
     88e:	4b08      	ldr	r3, [pc, #32]	; (8b0 <_gpio_set_direction+0xe4>)
     890:	4798      	blx	r3
	}
}
     892:	bf00      	nop
     894:	3708      	adds	r7, #8
     896:	46bd      	mov	sp, r7
     898:	bd80      	pop	{r7, pc}
     89a:	bf00      	nop
     89c:	41008000 	.word	0x41008000
     8a0:	0000058d 	.word	0x0000058d
     8a4:	000007a5 	.word	0x000007a5
     8a8:	00000565 	.word	0x00000565
     8ac:	00002ab8 	.word	0x00002ab8
     8b0:	000012f1 	.word	0x000012f1

000008b4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     8b4:	b580      	push	{r7, lr}
     8b6:	b082      	sub	sp, #8
     8b8:	af00      	add	r7, sp, #0
     8ba:	4603      	mov	r3, r0
     8bc:	6039      	str	r1, [r7, #0]
     8be:	71fb      	strb	r3, [r7, #7]
     8c0:	4613      	mov	r3, r2
     8c2:	71bb      	strb	r3, [r7, #6]
	if (level) {
     8c4:	79bb      	ldrb	r3, [r7, #6]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d006      	beq.n	8d8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     8ca:	79fb      	ldrb	r3, [r7, #7]
     8cc:	683a      	ldr	r2, [r7, #0]
     8ce:	4619      	mov	r1, r3
     8d0:	4806      	ldr	r0, [pc, #24]	; (8ec <_gpio_set_level+0x38>)
     8d2:	4b07      	ldr	r3, [pc, #28]	; (8f0 <_gpio_set_level+0x3c>)
     8d4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     8d6:	e005      	b.n	8e4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     8d8:	79fb      	ldrb	r3, [r7, #7]
     8da:	683a      	ldr	r2, [r7, #0]
     8dc:	4619      	mov	r1, r3
     8de:	4803      	ldr	r0, [pc, #12]	; (8ec <_gpio_set_level+0x38>)
     8e0:	4b04      	ldr	r3, [pc, #16]	; (8f4 <_gpio_set_level+0x40>)
     8e2:	4798      	blx	r3
}
     8e4:	bf00      	nop
     8e6:	3708      	adds	r7, #8
     8e8:	46bd      	mov	sp, r7
     8ea:	bd80      	pop	{r7, pc}
     8ec:	41008000 	.word	0x41008000
     8f0:	000005b5 	.word	0x000005b5
     8f4:	000005dd 	.word	0x000005dd

000008f8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	af00      	add	r7, sp, #0
     8fe:	4603      	mov	r3, r0
     900:	71fb      	strb	r3, [r7, #7]
     902:	460b      	mov	r3, r1
     904:	71bb      	strb	r3, [r7, #6]
     906:	4613      	mov	r3, r2
     908:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     90a:	797b      	ldrb	r3, [r7, #5]
     90c:	2b01      	cmp	r3, #1
     90e:	d00a      	beq.n	926 <_gpio_set_pin_pull_mode+0x2e>
     910:	2b02      	cmp	r3, #2
     912:	d01f      	beq.n	954 <_gpio_set_pin_pull_mode+0x5c>
     914:	2b00      	cmp	r3, #0
     916:	d134      	bne.n	982 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     918:	79ba      	ldrb	r2, [r7, #6]
     91a:	79fb      	ldrb	r3, [r7, #7]
     91c:	4619      	mov	r1, r3
     91e:	481e      	ldr	r0, [pc, #120]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     920:	4b1e      	ldr	r3, [pc, #120]	; (99c <_gpio_set_pin_pull_mode+0xa4>)
     922:	4798      	blx	r3
		break;
     924:	e033      	b.n	98e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     926:	79bb      	ldrb	r3, [r7, #6]
     928:	2201      	movs	r2, #1
     92a:	409a      	lsls	r2, r3
     92c:	79fb      	ldrb	r3, [r7, #7]
     92e:	4619      	mov	r1, r3
     930:	4819      	ldr	r0, [pc, #100]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     932:	4b1b      	ldr	r3, [pc, #108]	; (9a0 <_gpio_set_pin_pull_mode+0xa8>)
     934:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     936:	79ba      	ldrb	r2, [r7, #6]
     938:	79fb      	ldrb	r3, [r7, #7]
     93a:	4619      	mov	r1, r3
     93c:	4816      	ldr	r0, [pc, #88]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     93e:	4b19      	ldr	r3, [pc, #100]	; (9a4 <_gpio_set_pin_pull_mode+0xac>)
     940:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     942:	79bb      	ldrb	r3, [r7, #6]
     944:	2201      	movs	r2, #1
     946:	409a      	lsls	r2, r3
     948:	79fb      	ldrb	r3, [r7, #7]
     94a:	4619      	mov	r1, r3
     94c:	4812      	ldr	r0, [pc, #72]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     94e:	4b16      	ldr	r3, [pc, #88]	; (9a8 <_gpio_set_pin_pull_mode+0xb0>)
     950:	4798      	blx	r3
		break;
     952:	e01c      	b.n	98e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     954:	79bb      	ldrb	r3, [r7, #6]
     956:	2201      	movs	r2, #1
     958:	409a      	lsls	r2, r3
     95a:	79fb      	ldrb	r3, [r7, #7]
     95c:	4619      	mov	r1, r3
     95e:	480e      	ldr	r0, [pc, #56]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     960:	4b0f      	ldr	r3, [pc, #60]	; (9a0 <_gpio_set_pin_pull_mode+0xa8>)
     962:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     964:	79ba      	ldrb	r2, [r7, #6]
     966:	79fb      	ldrb	r3, [r7, #7]
     968:	4619      	mov	r1, r3
     96a:	480b      	ldr	r0, [pc, #44]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     96c:	4b0d      	ldr	r3, [pc, #52]	; (9a4 <_gpio_set_pin_pull_mode+0xac>)
     96e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     970:	79bb      	ldrb	r3, [r7, #6]
     972:	2201      	movs	r2, #1
     974:	409a      	lsls	r2, r3
     976:	79fb      	ldrb	r3, [r7, #7]
     978:	4619      	mov	r1, r3
     97a:	4807      	ldr	r0, [pc, #28]	; (998 <_gpio_set_pin_pull_mode+0xa0>)
     97c:	4b0b      	ldr	r3, [pc, #44]	; (9ac <_gpio_set_pin_pull_mode+0xb4>)
     97e:	4798      	blx	r3
		break;
     980:	e005      	b.n	98e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     982:	2289      	movs	r2, #137	; 0x89
     984:	490a      	ldr	r1, [pc, #40]	; (9b0 <_gpio_set_pin_pull_mode+0xb8>)
     986:	2000      	movs	r0, #0
     988:	4b0a      	ldr	r3, [pc, #40]	; (9b4 <_gpio_set_pin_pull_mode+0xbc>)
     98a:	4798      	blx	r3
		break;
     98c:	bf00      	nop
	}
}
     98e:	bf00      	nop
     990:	3708      	adds	r7, #8
     992:	46bd      	mov	sp, r7
     994:	bd80      	pop	{r7, pc}
     996:	bf00      	nop
     998:	41008000 	.word	0x41008000
     99c:	00000761 	.word	0x00000761
     9a0:	0000058d 	.word	0x0000058d
     9a4:	0000071d 	.word	0x0000071d
     9a8:	000005b5 	.word	0x000005b5
     9ac:	000005dd 	.word	0x000005dd
     9b0:	00002ab8 	.word	0x00002ab8
     9b4:	000012f1 	.word	0x000012f1

000009b8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     9b8:	b590      	push	{r4, r7, lr}
     9ba:	b085      	sub	sp, #20
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
     9c0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	095b      	lsrs	r3, r3, #5
     9c6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	b2db      	uxtb	r3, r3
     9cc:	f003 031f 	and.w	r3, r3, #31
     9d0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
     9d8:	d106      	bne.n	9e8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     9da:	7bba      	ldrb	r2, [r7, #14]
     9dc:	7bf9      	ldrb	r1, [r7, #15]
     9de:	2300      	movs	r3, #0
     9e0:	4812      	ldr	r0, [pc, #72]	; (a2c <_gpio_set_pin_function+0x74>)
     9e2:	4c13      	ldr	r4, [pc, #76]	; (a30 <_gpio_set_pin_function+0x78>)
     9e4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     9e6:	e01d      	b.n	a24 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     9e8:	7bba      	ldrb	r2, [r7, #14]
     9ea:	7bf9      	ldrb	r1, [r7, #15]
     9ec:	2301      	movs	r3, #1
     9ee:	480f      	ldr	r0, [pc, #60]	; (a2c <_gpio_set_pin_function+0x74>)
     9f0:	4c0f      	ldr	r4, [pc, #60]	; (a30 <_gpio_set_pin_function+0x78>)
     9f2:	47a0      	blx	r4
		if (pin & 1) {
     9f4:	7bbb      	ldrb	r3, [r7, #14]
     9f6:	f003 0301 	and.w	r3, r3, #1
     9fa:	2b00      	cmp	r3, #0
     9fc:	d009      	beq.n	a12 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     9fe:	7bbb      	ldrb	r3, [r7, #14]
     a00:	085b      	lsrs	r3, r3, #1
     a02:	b2da      	uxtb	r2, r3
     a04:	683b      	ldr	r3, [r7, #0]
     a06:	b2db      	uxtb	r3, r3
     a08:	7bf9      	ldrb	r1, [r7, #15]
     a0a:	4808      	ldr	r0, [pc, #32]	; (a2c <_gpio_set_pin_function+0x74>)
     a0c:	4c09      	ldr	r4, [pc, #36]	; (a34 <_gpio_set_pin_function+0x7c>)
     a0e:	47a0      	blx	r4
}
     a10:	e008      	b.n	a24 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     a12:	7bbb      	ldrb	r3, [r7, #14]
     a14:	085b      	lsrs	r3, r3, #1
     a16:	b2da      	uxtb	r2, r3
     a18:	683b      	ldr	r3, [r7, #0]
     a1a:	b2db      	uxtb	r3, r3
     a1c:	7bf9      	ldrb	r1, [r7, #15]
     a1e:	4803      	ldr	r0, [pc, #12]	; (a2c <_gpio_set_pin_function+0x74>)
     a20:	4c05      	ldr	r4, [pc, #20]	; (a38 <_gpio_set_pin_function+0x80>)
     a22:	47a0      	blx	r4
}
     a24:	bf00      	nop
     a26:	3714      	adds	r7, #20
     a28:	46bd      	mov	sp, r7
     a2a:	bd90      	pop	{r4, r7, pc}
     a2c:	41008000 	.word	0x41008000
     a30:	000006c3 	.word	0x000006c3
     a34:	00000665 	.word	0x00000665
     a38:	00000605 	.word	0x00000605

00000a3c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     a3c:	b580      	push	{r7, lr}
     a3e:	b082      	sub	sp, #8
     a40:	af00      	add	r7, sp, #0
     a42:	4603      	mov	r3, r0
     a44:	460a      	mov	r2, r1
     a46:	71fb      	strb	r3, [r7, #7]
     a48:	4613      	mov	r3, r2
     a4a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     a4c:	79fb      	ldrb	r3, [r7, #7]
     a4e:	095b      	lsrs	r3, r3, #5
     a50:	b2d8      	uxtb	r0, r3
     a52:	79fb      	ldrb	r3, [r7, #7]
     a54:	f003 031f 	and.w	r3, r3, #31
     a58:	b2db      	uxtb	r3, r3
     a5a:	79ba      	ldrb	r2, [r7, #6]
     a5c:	4619      	mov	r1, r3
     a5e:	4b03      	ldr	r3, [pc, #12]	; (a6c <gpio_set_pin_pull_mode+0x30>)
     a60:	4798      	blx	r3
}
     a62:	bf00      	nop
     a64:	3708      	adds	r7, #8
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	000008f9 	.word	0x000008f9

00000a70 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     a70:	b580      	push	{r7, lr}
     a72:	b082      	sub	sp, #8
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
     a78:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     a7a:	6839      	ldr	r1, [r7, #0]
     a7c:	6878      	ldr	r0, [r7, #4]
     a7e:	4b03      	ldr	r3, [pc, #12]	; (a8c <gpio_set_pin_function+0x1c>)
     a80:	4798      	blx	r3
}
     a82:	bf00      	nop
     a84:	3708      	adds	r7, #8
     a86:	46bd      	mov	sp, r7
     a88:	bd80      	pop	{r7, pc}
     a8a:	bf00      	nop
     a8c:	000009b9 	.word	0x000009b9

00000a90 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
     a96:	4603      	mov	r3, r0
     a98:	460a      	mov	r2, r1
     a9a:	71fb      	strb	r3, [r7, #7]
     a9c:	4613      	mov	r3, r2
     a9e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     aa0:	79fb      	ldrb	r3, [r7, #7]
     aa2:	095b      	lsrs	r3, r3, #5
     aa4:	b2d8      	uxtb	r0, r3
     aa6:	79fb      	ldrb	r3, [r7, #7]
     aa8:	f003 031f 	and.w	r3, r3, #31
     aac:	2201      	movs	r2, #1
     aae:	fa02 f303 	lsl.w	r3, r2, r3
     ab2:	79ba      	ldrb	r2, [r7, #6]
     ab4:	4619      	mov	r1, r3
     ab6:	4b03      	ldr	r3, [pc, #12]	; (ac4 <gpio_set_pin_direction+0x34>)
     ab8:	4798      	blx	r3
}
     aba:	bf00      	nop
     abc:	3708      	adds	r7, #8
     abe:	46bd      	mov	sp, r7
     ac0:	bd80      	pop	{r7, pc}
     ac2:	bf00      	nop
     ac4:	000007cd 	.word	0x000007cd

00000ac8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     ac8:	b580      	push	{r7, lr}
     aca:	b082      	sub	sp, #8
     acc:	af00      	add	r7, sp, #0
     ace:	4603      	mov	r3, r0
     ad0:	460a      	mov	r2, r1
     ad2:	71fb      	strb	r3, [r7, #7]
     ad4:	4613      	mov	r3, r2
     ad6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     ad8:	79fb      	ldrb	r3, [r7, #7]
     ada:	095b      	lsrs	r3, r3, #5
     adc:	b2d8      	uxtb	r0, r3
     ade:	79fb      	ldrb	r3, [r7, #7]
     ae0:	f003 031f 	and.w	r3, r3, #31
     ae4:	2201      	movs	r2, #1
     ae6:	fa02 f303 	lsl.w	r3, r2, r3
     aea:	79ba      	ldrb	r2, [r7, #6]
     aec:	4619      	mov	r1, r3
     aee:	4b03      	ldr	r3, [pc, #12]	; (afc <gpio_set_pin_level+0x34>)
     af0:	4798      	blx	r3
}
     af2:	bf00      	nop
     af4:	3708      	adds	r7, #8
     af6:	46bd      	mov	sp, r7
     af8:	bd80      	pop	{r7, pc}
     afa:	bf00      	nop
     afc:	000008b5 	.word	0x000008b5

00000b00 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     b00:	b580      	push	{r7, lr}
     b02:	af00      	add	r7, sp, #0
	_init_chip();
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <init_mcu+0xc>)
     b06:	4798      	blx	r3
}
     b08:	bf00      	nop
     b0a:	bd80      	pop	{r7, pc}
     b0c:	00001491 	.word	0x00001491

00000b10 <USART_0_PORT_init>:
struct timer_descriptor TIMER_0;

struct usart_sync_descriptor USART_0;

void USART_0_PORT_init(void)
{
     b10:	b580      	push	{r7, lr}
     b12:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     b14:	4904      	ldr	r1, [pc, #16]	; (b28 <USART_0_PORT_init+0x18>)
     b16:	2004      	movs	r0, #4
     b18:	4b04      	ldr	r3, [pc, #16]	; (b2c <USART_0_PORT_init+0x1c>)
     b1a:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     b1c:	4904      	ldr	r1, [pc, #16]	; (b30 <USART_0_PORT_init+0x20>)
     b1e:	2005      	movs	r0, #5
     b20:	4b02      	ldr	r3, [pc, #8]	; (b2c <USART_0_PORT_init+0x1c>)
     b22:	4798      	blx	r3
}
     b24:	bf00      	nop
     b26:	bd80      	pop	{r7, pc}
     b28:	00040003 	.word	0x00040003
     b2c:	00000a71 	.word	0x00000a71
     b30:	00050003 	.word	0x00050003

00000b34 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     b34:	b580      	push	{r7, lr}
     b36:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b38:	2240      	movs	r2, #64	; 0x40
     b3a:	2107      	movs	r1, #7
     b3c:	4806      	ldr	r0, [pc, #24]	; (b58 <USART_0_CLOCK_init+0x24>)
     b3e:	4b07      	ldr	r3, [pc, #28]	; (b5c <USART_0_CLOCK_init+0x28>)
     b40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b42:	2243      	movs	r2, #67	; 0x43
     b44:	2103      	movs	r1, #3
     b46:	4804      	ldr	r0, [pc, #16]	; (b58 <USART_0_CLOCK_init+0x24>)
     b48:	4b04      	ldr	r3, [pc, #16]	; (b5c <USART_0_CLOCK_init+0x28>)
     b4a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     b4c:	4804      	ldr	r0, [pc, #16]	; (b60 <USART_0_CLOCK_init+0x2c>)
     b4e:	4b05      	ldr	r3, [pc, #20]	; (b64 <USART_0_CLOCK_init+0x30>)
     b50:	4798      	blx	r3
}
     b52:	bf00      	nop
     b54:	bd80      	pop	{r7, pc}
     b56:	bf00      	nop
     b58:	40001c00 	.word	0x40001c00
     b5c:	000004bf 	.word	0x000004bf
     b60:	40000800 	.word	0x40000800
     b64:	000004e5 	.word	0x000004e5

00000b68 <USART_0_init>:

void USART_0_init(void)
{
     b68:	b580      	push	{r7, lr}
     b6a:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     b6c:	4b05      	ldr	r3, [pc, #20]	; (b84 <USART_0_init+0x1c>)
     b6e:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     b70:	2200      	movs	r2, #0
     b72:	4905      	ldr	r1, [pc, #20]	; (b88 <USART_0_init+0x20>)
     b74:	4805      	ldr	r0, [pc, #20]	; (b8c <USART_0_init+0x24>)
     b76:	4b06      	ldr	r3, [pc, #24]	; (b90 <USART_0_init+0x28>)
     b78:	4798      	blx	r3
	USART_0_PORT_init();
     b7a:	4b06      	ldr	r3, [pc, #24]	; (b94 <USART_0_init+0x2c>)
     b7c:	4798      	blx	r3
}
     b7e:	bf00      	nop
     b80:	bd80      	pop	{r7, pc}
     b82:	bf00      	nop
     b84:	00000b35 	.word	0x00000b35
     b88:	40003000 	.word	0x40003000
     b8c:	200000b4 	.word	0x200000b4
     b90:	00001125 	.word	0x00001125
     b94:	00000b11 	.word	0x00000b11

00000b98 <delay_driver_init>:

void delay_driver_init(void)
{
     b98:	b580      	push	{r7, lr}
     b9a:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     b9c:	4802      	ldr	r0, [pc, #8]	; (ba8 <delay_driver_init+0x10>)
     b9e:	4b03      	ldr	r3, [pc, #12]	; (bac <delay_driver_init+0x14>)
     ba0:	4798      	blx	r3
}
     ba2:	bf00      	nop
     ba4:	bd80      	pop	{r7, pc}
     ba6:	bf00      	nop
     ba8:	e000e010 	.word	0xe000e010
     bac:	00000da9 	.word	0x00000da9

00000bb0 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     bb4:	4808      	ldr	r0, [pc, #32]	; (bd8 <TIMER_1_init+0x28>)
     bb6:	4b09      	ldr	r3, [pc, #36]	; (bdc <TIMER_1_init+0x2c>)
     bb8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bba:	2240      	movs	r2, #64	; 0x40
     bbc:	2109      	movs	r1, #9
     bbe:	4808      	ldr	r0, [pc, #32]	; (be0 <TIMER_1_init+0x30>)
     bc0:	4b08      	ldr	r3, [pc, #32]	; (be4 <TIMER_1_init+0x34>)
     bc2:	4798      	blx	r3

	timer_init(&TIMER_1, TC0, _tc_get_timer());
     bc4:	4b08      	ldr	r3, [pc, #32]	; (be8 <TIMER_1_init+0x38>)
     bc6:	4798      	blx	r3
     bc8:	4603      	mov	r3, r0
     bca:	461a      	mov	r2, r3
     bcc:	4907      	ldr	r1, [pc, #28]	; (bec <TIMER_1_init+0x3c>)
     bce:	4808      	ldr	r0, [pc, #32]	; (bf0 <TIMER_1_init+0x40>)
     bd0:	4b08      	ldr	r3, [pc, #32]	; (bf4 <TIMER_1_init+0x44>)
     bd2:	4798      	blx	r3
}
     bd4:	bf00      	nop
     bd6:	bd80      	pop	{r7, pc}
     bd8:	40000800 	.word	0x40000800
     bdc:	00000505 	.word	0x00000505
     be0:	40001c00 	.word	0x40001c00
     be4:	000004bf 	.word	0x000004bf
     be8:	0000255d 	.word	0x0000255d
     bec:	40003800 	.word	0x40003800
     bf0:	20000098 	.word	0x20000098
     bf4:	00000e0d 	.word	0x00000e0d

00000bf8 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
     bfc:	4808      	ldr	r0, [pc, #32]	; (c20 <TIMER_0_init+0x28>)
     bfe:	4b09      	ldr	r3, [pc, #36]	; (c24 <TIMER_0_init+0x2c>)
     c00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c02:	2240      	movs	r2, #64	; 0x40
     c04:	211a      	movs	r1, #26
     c06:	4808      	ldr	r0, [pc, #32]	; (c28 <TIMER_0_init+0x30>)
     c08:	4b08      	ldr	r3, [pc, #32]	; (c2c <TIMER_0_init+0x34>)
     c0a:	4798      	blx	r3

	timer_init(&TIMER_0, TC2, _tc_get_timer());
     c0c:	4b08      	ldr	r3, [pc, #32]	; (c30 <TIMER_0_init+0x38>)
     c0e:	4798      	blx	r3
     c10:	4603      	mov	r3, r0
     c12:	461a      	mov	r2, r3
     c14:	4907      	ldr	r1, [pc, #28]	; (c34 <TIMER_0_init+0x3c>)
     c16:	4808      	ldr	r0, [pc, #32]	; (c38 <TIMER_0_init+0x40>)
     c18:	4b08      	ldr	r3, [pc, #32]	; (c3c <TIMER_0_init+0x44>)
     c1a:	4798      	blx	r3
}
     c1c:	bf00      	nop
     c1e:	bd80      	pop	{r7, pc}
     c20:	40000800 	.word	0x40000800
     c24:	00000545 	.word	0x00000545
     c28:	40001c00 	.word	0x40001c00
     c2c:	000004bf 	.word	0x000004bf
     c30:	0000255d 	.word	0x0000255d
     c34:	4101a000 	.word	0x4101a000
     c38:	200000c0 	.word	0x200000c0
     c3c:	00000e0d 	.word	0x00000e0d

00000c40 <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     c40:	b580      	push	{r7, lr}
     c42:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     c44:	4902      	ldr	r1, [pc, #8]	; (c50 <PWM_0_PORT_init+0x10>)
     c46:	204a      	movs	r0, #74	; 0x4a
     c48:	4b02      	ldr	r3, [pc, #8]	; (c54 <PWM_0_PORT_init+0x14>)
     c4a:	4798      	blx	r3
}
     c4c:	bf00      	nop
     c4e:	bd80      	pop	{r7, pc}
     c50:	004a0005 	.word	0x004a0005
     c54:	00000a71 	.word	0x00000a71

00000c58 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     c58:	b580      	push	{r7, lr}
     c5a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     c5c:	4804      	ldr	r0, [pc, #16]	; (c70 <PWM_0_CLOCK_init+0x18>)
     c5e:	4b05      	ldr	r3, [pc, #20]	; (c74 <PWM_0_CLOCK_init+0x1c>)
     c60:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c62:	2240      	movs	r2, #64	; 0x40
     c64:	2119      	movs	r1, #25
     c66:	4804      	ldr	r0, [pc, #16]	; (c78 <PWM_0_CLOCK_init+0x20>)
     c68:	4b04      	ldr	r3, [pc, #16]	; (c7c <PWM_0_CLOCK_init+0x24>)
     c6a:	4798      	blx	r3
}
     c6c:	bf00      	nop
     c6e:	bd80      	pop	{r7, pc}
     c70:	40000800 	.word	0x40000800
     c74:	00000525 	.word	0x00000525
     c78:	40001c00 	.word	0x40001c00
     c7c:	000004bf 	.word	0x000004bf

00000c80 <system_init>:

void system_init(void)
{
     c80:	b580      	push	{r7, lr}
     c82:	af00      	add	r7, sp, #0
	init_mcu();
     c84:	4b29      	ldr	r3, [pc, #164]	; (d2c <system_init+0xac>)
     c86:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     c88:	2101      	movs	r1, #1
     c8a:	2021      	movs	r0, #33	; 0x21
     c8c:	4b28      	ldr	r3, [pc, #160]	; (d30 <system_init+0xb0>)
     c8e:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     c90:	2100      	movs	r1, #0
     c92:	2021      	movs	r0, #33	; 0x21
     c94:	4b27      	ldr	r3, [pc, #156]	; (d34 <system_init+0xb4>)
     c96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     c98:	f04f 31ff 	mov.w	r1, #4294967295
     c9c:	2021      	movs	r0, #33	; 0x21
     c9e:	4b26      	ldr	r3, [pc, #152]	; (d38 <system_init+0xb8>)
     ca0:	4798      	blx	r3

	// GPIO on PB04

	gpio_set_pin_level(LED_green2,
     ca2:	2100      	movs	r1, #0
     ca4:	2024      	movs	r0, #36	; 0x24
     ca6:	4b25      	ldr	r3, [pc, #148]	; (d3c <system_init+0xbc>)
     ca8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED_green2, GPIO_DIRECTION_OUT);
     caa:	2102      	movs	r1, #2
     cac:	2024      	movs	r0, #36	; 0x24
     cae:	4b20      	ldr	r3, [pc, #128]	; (d30 <system_init+0xb0>)
     cb0:	4798      	blx	r3

	gpio_set_pin_function(LED_green2, GPIO_PIN_FUNCTION_OFF);
     cb2:	f04f 31ff 	mov.w	r1, #4294967295
     cb6:	2024      	movs	r0, #36	; 0x24
     cb8:	4b1f      	ldr	r3, [pc, #124]	; (d38 <system_init+0xb8>)
     cba:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT, GPIO_DIRECTION_IN);
     cbc:	2101      	movs	r1, #1
     cbe:	2025      	movs	r0, #37	; 0x25
     cc0:	4b1b      	ldr	r3, [pc, #108]	; (d30 <system_init+0xb0>)
     cc2:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT,
     cc4:	2101      	movs	r1, #1
     cc6:	2025      	movs	r0, #37	; 0x25
     cc8:	4b1a      	ldr	r3, [pc, #104]	; (d34 <system_init+0xb4>)
     cca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT, GPIO_PIN_FUNCTION_OFF);
     ccc:	f04f 31ff 	mov.w	r1, #4294967295
     cd0:	2025      	movs	r0, #37	; 0x25
     cd2:	4b19      	ldr	r3, [pc, #100]	; (d38 <system_init+0xb8>)
     cd4:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     cd6:	2101      	movs	r1, #1
     cd8:	203f      	movs	r0, #63	; 0x3f
     cda:	4b15      	ldr	r3, [pc, #84]	; (d30 <system_init+0xb0>)
     cdc:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     cde:	2101      	movs	r1, #1
     ce0:	203f      	movs	r0, #63	; 0x3f
     ce2:	4b14      	ldr	r3, [pc, #80]	; (d34 <system_init+0xb4>)
     ce4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     ce6:	f04f 31ff 	mov.w	r1, #4294967295
     cea:	203f      	movs	r0, #63	; 0x3f
     cec:	4b12      	ldr	r3, [pc, #72]	; (d38 <system_init+0xb8>)
     cee:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     cf0:	2100      	movs	r1, #0
     cf2:	2052      	movs	r0, #82	; 0x52
     cf4:	4b11      	ldr	r3, [pc, #68]	; (d3c <system_init+0xbc>)
     cf6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     cf8:	2102      	movs	r1, #2
     cfa:	2052      	movs	r0, #82	; 0x52
     cfc:	4b0c      	ldr	r3, [pc, #48]	; (d30 <system_init+0xb0>)
     cfe:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     d00:	f04f 31ff 	mov.w	r1, #4294967295
     d04:	2052      	movs	r0, #82	; 0x52
     d06:	4b0c      	ldr	r3, [pc, #48]	; (d38 <system_init+0xb8>)
     d08:	4798      	blx	r3

	USART_0_init();
     d0a:	4b0d      	ldr	r3, [pc, #52]	; (d40 <system_init+0xc0>)
     d0c:	4798      	blx	r3

	delay_driver_init();
     d0e:	4b0d      	ldr	r3, [pc, #52]	; (d44 <system_init+0xc4>)
     d10:	4798      	blx	r3

	TIMER_1_init();
     d12:	4b0d      	ldr	r3, [pc, #52]	; (d48 <system_init+0xc8>)
     d14:	4798      	blx	r3
	TIMER_0_init();
     d16:	4b0d      	ldr	r3, [pc, #52]	; (d4c <system_init+0xcc>)
     d18:	4798      	blx	r3
	PWM_0_CLOCK_init();
     d1a:	4b0d      	ldr	r3, [pc, #52]	; (d50 <system_init+0xd0>)
     d1c:	4798      	blx	r3

	PWM_0_PORT_init();
     d1e:	4b0d      	ldr	r3, [pc, #52]	; (d54 <system_init+0xd4>)
     d20:	4798      	blx	r3

	PWM_0_init();
     d22:	4b0d      	ldr	r3, [pc, #52]	; (d58 <system_init+0xd8>)
     d24:	4798      	blx	r3
}
     d26:	bf00      	nop
     d28:	bd80      	pop	{r7, pc}
     d2a:	bf00      	nop
     d2c:	00000b01 	.word	0x00000b01
     d30:	00000a91 	.word	0x00000a91
     d34:	00000a3d 	.word	0x00000a3d
     d38:	00000a71 	.word	0x00000a71
     d3c:	00000ac9 	.word	0x00000ac9
     d40:	00000b69 	.word	0x00000b69
     d44:	00000b99 	.word	0x00000b99
     d48:	00000bb1 	.word	0x00000bb1
     d4c:	00000bf9 	.word	0x00000bf9
     d50:	00000c59 	.word	0x00000c59
     d54:	00000c41 	.word	0x00000c41
     d58:	00001e91 	.word	0x00001e91

00000d5c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     d5c:	b480      	push	{r7}
     d5e:	b085      	sub	sp, #20
     d60:	af00      	add	r7, sp, #0
     d62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d64:	f3ef 8310 	mrs	r3, PRIMASK
     d68:	60fb      	str	r3, [r7, #12]
  return(result);
     d6a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d70:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d72:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d76:	bf00      	nop
     d78:	3714      	adds	r7, #20
     d7a:	46bd      	mov	sp, r7
     d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d80:	4770      	bx	lr

00000d82 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     d82:	b480      	push	{r7}
     d84:	b085      	sub	sp, #20
     d86:	af00      	add	r7, sp, #0
     d88:	6078      	str	r0, [r7, #4]
     d8a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d94:	68fb      	ldr	r3, [r7, #12]
     d96:	f383 8810 	msr	PRIMASK, r3
}
     d9a:	bf00      	nop
     d9c:	3714      	adds	r7, #20
     d9e:	46bd      	mov	sp, r7
     da0:	f85d 7b04 	ldr.w	r7, [sp], #4
     da4:	4770      	bx	lr
	...

00000da8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     db0:	4a05      	ldr	r2, [pc, #20]	; (dc8 <delay_init+0x20>)
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	6013      	str	r3, [r2, #0]
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_init+0x20>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	4618      	mov	r0, r3
     dbc:	4b03      	ldr	r3, [pc, #12]	; (dcc <delay_init+0x24>)
     dbe:	4798      	blx	r3
}
     dc0:	bf00      	nop
     dc2:	3708      	adds	r7, #8
     dc4:	46bd      	mov	sp, r7
     dc6:	bd80      	pop	{r7, pc}
     dc8:	20000060 	.word	0x20000060
     dcc:	00001d45 	.word	0x00001d45

00000dd0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     dd0:	b480      	push	{r7}
     dd2:	b083      	sub	sp, #12
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	681b      	ldr	r3, [r3, #0]
}
     ddc:	4618      	mov	r0, r3
     dde:	370c      	adds	r7, #12
     de0:	46bd      	mov	sp, r7
     de2:	f85d 7b04 	ldr.w	r7, [sp], #4
     de6:	4770      	bx	lr

00000de8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     de8:	b480      	push	{r7}
     dea:	b083      	sub	sp, #12
     dec:	af00      	add	r7, sp, #0
     dee:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	2b00      	cmp	r3, #0
     df4:	d002      	beq.n	dfc <list_get_next_element+0x14>
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	e000      	b.n	dfe <list_get_next_element+0x16>
     dfc:	2300      	movs	r3, #0
}
     dfe:	4618      	mov	r0, r3
     e00:	370c      	adds	r7, #12
     e02:	46bd      	mov	sp, r7
     e04:	f85d 7b04 	ldr.w	r7, [sp], #4
     e08:	4770      	bx	lr
	...

00000e0c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     e0c:	b580      	push	{r7, lr}
     e0e:	b084      	sub	sp, #16
     e10:	af00      	add	r7, sp, #0
     e12:	60f8      	str	r0, [r7, #12]
     e14:	60b9      	str	r1, [r7, #8]
     e16:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     e18:	68fb      	ldr	r3, [r7, #12]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d004      	beq.n	e28 <timer_init+0x1c>
     e1e:	68bb      	ldr	r3, [r7, #8]
     e20:	2b00      	cmp	r3, #0
     e22:	d001      	beq.n	e28 <timer_init+0x1c>
     e24:	2301      	movs	r3, #1
     e26:	e000      	b.n	e2a <timer_init+0x1e>
     e28:	2300      	movs	r3, #0
     e2a:	f003 0301 	and.w	r3, r3, #1
     e2e:	b2db      	uxtb	r3, r3
     e30:	223b      	movs	r2, #59	; 0x3b
     e32:	490a      	ldr	r1, [pc, #40]	; (e5c <timer_init+0x50>)
     e34:	4618      	mov	r0, r3
     e36:	4b0a      	ldr	r3, [pc, #40]	; (e60 <timer_init+0x54>)
     e38:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	68b9      	ldr	r1, [r7, #8]
     e3e:	4618      	mov	r0, r3
     e40:	4b08      	ldr	r3, [pc, #32]	; (e64 <timer_init+0x58>)
     e42:	4798      	blx	r3
	descr->time                           = 0;
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	2200      	movs	r2, #0
     e48:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	4a06      	ldr	r2, [pc, #24]	; (e68 <timer_init+0x5c>)
     e4e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     e50:	2300      	movs	r3, #0
}
     e52:	4618      	mov	r0, r3
     e54:	3710      	adds	r7, #16
     e56:	46bd      	mov	sp, r7
     e58:	bd80      	pop	{r7, pc}
     e5a:	bf00      	nop
     e5c:	00002ad4 	.word	0x00002ad4
     e60:	000012f1 	.word	0x000012f1
     e64:	0000226d 	.word	0x0000226d
     e68:	00001069 	.word	0x00001069

00000e6c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
     e6c:	b580      	push	{r7, lr}
     e6e:	b082      	sub	sp, #8
     e70:	af00      	add	r7, sp, #0
     e72:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	2b00      	cmp	r3, #0
     e78:	bf14      	ite	ne
     e7a:	2301      	movne	r3, #1
     e7c:	2300      	moveq	r3, #0
     e7e:	b2db      	uxtb	r3, r3
     e80:	2253      	movs	r2, #83	; 0x53
     e82:	490b      	ldr	r1, [pc, #44]	; (eb0 <timer_start+0x44>)
     e84:	4618      	mov	r0, r3
     e86:	4b0b      	ldr	r3, [pc, #44]	; (eb4 <timer_start+0x48>)
     e88:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	4618      	mov	r0, r3
     e8e:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <timer_start+0x4c>)
     e90:	4798      	blx	r3
     e92:	4603      	mov	r3, r0
     e94:	2b00      	cmp	r3, #0
     e96:	d002      	beq.n	e9e <timer_start+0x32>
		return ERR_DENIED;
     e98:	f06f 0310 	mvn.w	r3, #16
     e9c:	e004      	b.n	ea8 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	4618      	mov	r0, r3
     ea2:	4b06      	ldr	r3, [pc, #24]	; (ebc <timer_start+0x50>)
     ea4:	4798      	blx	r3

	return ERR_NONE;
     ea6:	2300      	movs	r3, #0
}
     ea8:	4618      	mov	r0, r3
     eaa:	3708      	adds	r7, #8
     eac:	46bd      	mov	sp, r7
     eae:	bd80      	pop	{r7, pc}
     eb0:	00002ad4 	.word	0x00002ad4
     eb4:	000012f1 	.word	0x000012f1
     eb8:	0000253d 	.word	0x0000253d
     ebc:	0000251d 	.word	0x0000251d

00000ec0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b084      	sub	sp, #16
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
     ec8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	2b00      	cmp	r3, #0
     ece:	d004      	beq.n	eda <timer_add_task+0x1a>
     ed0:	683b      	ldr	r3, [r7, #0]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d001      	beq.n	eda <timer_add_task+0x1a>
     ed6:	2301      	movs	r3, #1
     ed8:	e000      	b.n	edc <timer_add_task+0x1c>
     eda:	2300      	movs	r3, #0
     edc:	f003 0301 	and.w	r3, r3, #1
     ee0:	b2db      	uxtb	r3, r3
     ee2:	227a      	movs	r2, #122	; 0x7a
     ee4:	492d      	ldr	r1, [pc, #180]	; (f9c <timer_add_task+0xdc>)
     ee6:	4618      	mov	r0, r3
     ee8:	4b2d      	ldr	r3, [pc, #180]	; (fa0 <timer_add_task+0xe0>)
     eea:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     eec:	687b      	ldr	r3, [r7, #4]
     eee:	7e1b      	ldrb	r3, [r3, #24]
     ef0:	b2db      	uxtb	r3, r3
     ef2:	f043 0301 	orr.w	r3, r3, #1
     ef6:	b2da      	uxtb	r2, r3
     ef8:	687b      	ldr	r3, [r7, #4]
     efa:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	3314      	adds	r3, #20
     f00:	6839      	ldr	r1, [r7, #0]
     f02:	4618      	mov	r0, r3
     f04:	4b27      	ldr	r3, [pc, #156]	; (fa4 <timer_add_task+0xe4>)
     f06:	4798      	blx	r3
     f08:	4603      	mov	r3, r0
     f0a:	2b00      	cmp	r3, #0
     f0c:	d00f      	beq.n	f2e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	7e1b      	ldrb	r3, [r3, #24]
     f12:	b2db      	uxtb	r3, r3
     f14:	f023 0301 	bic.w	r3, r3, #1
     f18:	b2da      	uxtb	r2, r3
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
     f1e:	227f      	movs	r2, #127	; 0x7f
     f20:	491e      	ldr	r1, [pc, #120]	; (f9c <timer_add_task+0xdc>)
     f22:	2000      	movs	r0, #0
     f24:	4b1e      	ldr	r3, [pc, #120]	; (fa0 <timer_add_task+0xe0>)
     f26:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     f28:	f06f 0311 	mvn.w	r3, #17
     f2c:	e032      	b.n	f94 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
     f2e:	687b      	ldr	r3, [r7, #4]
     f30:	691a      	ldr	r2, [r3, #16]
     f32:	683b      	ldr	r3, [r7, #0]
     f34:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	f103 0014 	add.w	r0, r3, #20
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	691b      	ldr	r3, [r3, #16]
     f40:	461a      	mov	r2, r3
     f42:	6839      	ldr	r1, [r7, #0]
     f44:	4b18      	ldr	r3, [pc, #96]	; (fa8 <timer_add_task+0xe8>)
     f46:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	7e1b      	ldrb	r3, [r3, #24]
     f4c:	b2db      	uxtb	r3, r3
     f4e:	f023 0301 	bic.w	r3, r3, #1
     f52:	b2da      	uxtb	r2, r3
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	7e1b      	ldrb	r3, [r3, #24]
     f5c:	b2db      	uxtb	r3, r3
     f5e:	f003 0302 	and.w	r3, r3, #2
     f62:	2b00      	cmp	r3, #0
     f64:	d015      	beq.n	f92 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
     f66:	f107 030c 	add.w	r3, r7, #12
     f6a:	4618      	mov	r0, r3
     f6c:	4b0f      	ldr	r3, [pc, #60]	; (fac <timer_add_task+0xec>)
     f6e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     f70:	687b      	ldr	r3, [r7, #4]
     f72:	7e1b      	ldrb	r3, [r3, #24]
     f74:	b2db      	uxtb	r3, r3
     f76:	f023 0302 	bic.w	r3, r3, #2
     f7a:	b2da      	uxtb	r2, r3
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	4618      	mov	r0, r3
     f84:	4b0a      	ldr	r3, [pc, #40]	; (fb0 <timer_add_task+0xf0>)
     f86:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     f88:	f107 030c 	add.w	r3, r7, #12
     f8c:	4618      	mov	r0, r3
     f8e:	4b09      	ldr	r3, [pc, #36]	; (fb4 <timer_add_task+0xf4>)
     f90:	4798      	blx	r3
	}

	return ERR_NONE;
     f92:	2300      	movs	r3, #0
}
     f94:	4618      	mov	r0, r3
     f96:	3710      	adds	r7, #16
     f98:	46bd      	mov	sp, r7
     f9a:	bd80      	pop	{r7, pc}
     f9c:	00002ad4 	.word	0x00002ad4
     fa0:	000012f1 	.word	0x000012f1
     fa4:	00001319 	.word	0x00001319
     fa8:	00000fb9 	.word	0x00000fb9
     fac:	00000d5d 	.word	0x00000d5d
     fb0:	0000256d 	.word	0x0000256d
     fb4:	00000d83 	.word	0x00000d83

00000fb8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     fb8:	b580      	push	{r7, lr}
     fba:	b088      	sub	sp, #32
     fbc:	af00      	add	r7, sp, #0
     fbe:	60f8      	str	r0, [r7, #12]
     fc0:	60b9      	str	r1, [r7, #8]
     fc2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     fc4:	2300      	movs	r3, #0
     fc6:	61bb      	str	r3, [r7, #24]
     fc8:	68f8      	ldr	r0, [r7, #12]
     fca:	4b23      	ldr	r3, [pc, #140]	; (1058 <timer_add_timer_task+0xa0>)
     fcc:	4798      	blx	r3
     fce:	6138      	str	r0, [r7, #16]

	if (!head) {
     fd0:	693b      	ldr	r3, [r7, #16]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d104      	bne.n	fe0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     fd6:	68b9      	ldr	r1, [r7, #8]
     fd8:	68f8      	ldr	r0, [r7, #12]
     fda:	4b20      	ldr	r3, [pc, #128]	; (105c <timer_add_timer_task+0xa4>)
     fdc:	4798      	blx	r3
		return;
     fde:	e037      	b.n	1050 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     fe0:	693b      	ldr	r3, [r7, #16]
     fe2:	61fb      	str	r3, [r7, #28]
     fe4:	e022      	b.n	102c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
     fe6:	69fb      	ldr	r3, [r7, #28]
     fe8:	685a      	ldr	r2, [r3, #4]
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	429a      	cmp	r2, r3
     fee:	d808      	bhi.n	1002 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
     ff0:	69fb      	ldr	r3, [r7, #28]
     ff2:	689a      	ldr	r2, [r3, #8]
     ff4:	69fb      	ldr	r3, [r7, #28]
     ff6:	6859      	ldr	r1, [r3, #4]
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	1acb      	subs	r3, r1, r3
     ffc:	4413      	add	r3, r2
     ffe:	617b      	str	r3, [r7, #20]
    1000:	e009      	b.n	1016 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1002:	69fb      	ldr	r3, [r7, #28]
    1004:	689a      	ldr	r2, [r3, #8]
    1006:	69fb      	ldr	r3, [r7, #28]
    1008:	685b      	ldr	r3, [r3, #4]
    100a:	441a      	add	r2, r3
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	425b      	negs	r3, r3
    1010:	4413      	add	r3, r2
    1012:	3301      	adds	r3, #1
    1014:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1016:	68bb      	ldr	r3, [r7, #8]
    1018:	689a      	ldr	r2, [r3, #8]
    101a:	697b      	ldr	r3, [r7, #20]
    101c:	429a      	cmp	r2, r3
    101e:	d909      	bls.n	1034 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    1020:	69fb      	ldr	r3, [r7, #28]
    1022:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1024:	69f8      	ldr	r0, [r7, #28]
    1026:	4b0e      	ldr	r3, [pc, #56]	; (1060 <timer_add_timer_task+0xa8>)
    1028:	4798      	blx	r3
    102a:	61f8      	str	r0, [r7, #28]
    102c:	69fb      	ldr	r3, [r7, #28]
    102e:	2b00      	cmp	r3, #0
    1030:	d1d9      	bne.n	fe6 <timer_add_timer_task+0x2e>
    1032:	e000      	b.n	1036 <timer_add_timer_task+0x7e>
			break;
    1034:	bf00      	nop
	}

	if (it == head) {
    1036:	69fa      	ldr	r2, [r7, #28]
    1038:	693b      	ldr	r3, [r7, #16]
    103a:	429a      	cmp	r2, r3
    103c:	d104      	bne.n	1048 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    103e:	68b9      	ldr	r1, [r7, #8]
    1040:	68f8      	ldr	r0, [r7, #12]
    1042:	4b06      	ldr	r3, [pc, #24]	; (105c <timer_add_timer_task+0xa4>)
    1044:	4798      	blx	r3
    1046:	e003      	b.n	1050 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    1048:	68b9      	ldr	r1, [r7, #8]
    104a:	69b8      	ldr	r0, [r7, #24]
    104c:	4b05      	ldr	r3, [pc, #20]	; (1064 <timer_add_timer_task+0xac>)
    104e:	4798      	blx	r3
	}
}
    1050:	3720      	adds	r7, #32
    1052:	46bd      	mov	sp, r7
    1054:	bd80      	pop	{r7, pc}
    1056:	bf00      	nop
    1058:	00000dd1 	.word	0x00000dd1
    105c:	00001351 	.word	0x00001351
    1060:	00000de9 	.word	0x00000de9
    1064:	000013a9 	.word	0x000013a9

00001068 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1068:	b580      	push	{r7, lr}
    106a:	b086      	sub	sp, #24
    106c:	af00      	add	r7, sp, #0
    106e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1074:	693b      	ldr	r3, [r7, #16]
    1076:	3314      	adds	r3, #20
    1078:	4618      	mov	r0, r3
    107a:	4b27      	ldr	r3, [pc, #156]	; (1118 <timer_process_counted+0xb0>)
    107c:	4798      	blx	r3
    107e:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1080:	693b      	ldr	r3, [r7, #16]
    1082:	691b      	ldr	r3, [r3, #16]
    1084:	1c5a      	adds	r2, r3, #1
    1086:	693b      	ldr	r3, [r7, #16]
    1088:	611a      	str	r2, [r3, #16]
    108a:	693b      	ldr	r3, [r7, #16]
    108c:	691b      	ldr	r3, [r3, #16]
    108e:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1090:	693b      	ldr	r3, [r7, #16]
    1092:	7e1b      	ldrb	r3, [r3, #24]
    1094:	b2db      	uxtb	r3, r3
    1096:	f003 0301 	and.w	r3, r3, #1
    109a:	2b00      	cmp	r3, #0
    109c:	d106      	bne.n	10ac <timer_process_counted+0x44>
    109e:	693b      	ldr	r3, [r7, #16]
    10a0:	7e1b      	ldrb	r3, [r3, #24]
    10a2:	b2db      	uxtb	r3, r3
    10a4:	f003 0302 	and.w	r3, r3, #2
    10a8:	2b00      	cmp	r3, #0
    10aa:	d027      	beq.n	10fc <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    10ac:	693b      	ldr	r3, [r7, #16]
    10ae:	7e1b      	ldrb	r3, [r3, #24]
    10b0:	b2db      	uxtb	r3, r3
    10b2:	f043 0302 	orr.w	r3, r3, #2
    10b6:	b2da      	uxtb	r2, r3
    10b8:	693b      	ldr	r3, [r7, #16]
    10ba:	761a      	strb	r2, [r3, #24]
		return;
    10bc:	e029      	b.n	1112 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    10be:	697b      	ldr	r3, [r7, #20]
    10c0:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    10c2:	693b      	ldr	r3, [r7, #16]
    10c4:	3314      	adds	r3, #20
    10c6:	4618      	mov	r0, r3
    10c8:	4b14      	ldr	r3, [pc, #80]	; (111c <timer_process_counted+0xb4>)
    10ca:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    10cc:	68bb      	ldr	r3, [r7, #8]
    10ce:	7c1b      	ldrb	r3, [r3, #16]
    10d0:	2b01      	cmp	r3, #1
    10d2:	d109      	bne.n	10e8 <timer_process_counted+0x80>
			tmp->time_label = time;
    10d4:	68bb      	ldr	r3, [r7, #8]
    10d6:	68fa      	ldr	r2, [r7, #12]
    10d8:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    10da:	693b      	ldr	r3, [r7, #16]
    10dc:	3314      	adds	r3, #20
    10de:	68fa      	ldr	r2, [r7, #12]
    10e0:	68b9      	ldr	r1, [r7, #8]
    10e2:	4618      	mov	r0, r3
    10e4:	4b0e      	ldr	r3, [pc, #56]	; (1120 <timer_process_counted+0xb8>)
    10e6:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    10e8:	693b      	ldr	r3, [r7, #16]
    10ea:	3314      	adds	r3, #20
    10ec:	4618      	mov	r0, r3
    10ee:	4b0a      	ldr	r3, [pc, #40]	; (1118 <timer_process_counted+0xb0>)
    10f0:	4798      	blx	r3
    10f2:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    10f4:	68bb      	ldr	r3, [r7, #8]
    10f6:	68db      	ldr	r3, [r3, #12]
    10f8:	68b8      	ldr	r0, [r7, #8]
    10fa:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    10fc:	697b      	ldr	r3, [r7, #20]
    10fe:	2b00      	cmp	r3, #0
    1100:	d007      	beq.n	1112 <timer_process_counted+0xaa>
    1102:	697b      	ldr	r3, [r7, #20]
    1104:	685b      	ldr	r3, [r3, #4]
    1106:	68fa      	ldr	r2, [r7, #12]
    1108:	1ad2      	subs	r2, r2, r3
    110a:	697b      	ldr	r3, [r7, #20]
    110c:	689b      	ldr	r3, [r3, #8]
    110e:	429a      	cmp	r2, r3
    1110:	d2d5      	bcs.n	10be <timer_process_counted+0x56>
	}
}
    1112:	3718      	adds	r7, #24
    1114:	46bd      	mov	sp, r7
    1116:	bd80      	pop	{r7, pc}
    1118:	00000dd1 	.word	0x00000dd1
    111c:	000013cd 	.word	0x000013cd
    1120:	00000fb9 	.word	0x00000fb9

00001124 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1124:	b580      	push	{r7, lr}
    1126:	b086      	sub	sp, #24
    1128:	af00      	add	r7, sp, #0
    112a:	60f8      	str	r0, [r7, #12]
    112c:	60b9      	str	r1, [r7, #8]
    112e:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1130:	68fb      	ldr	r3, [r7, #12]
    1132:	2b00      	cmp	r3, #0
    1134:	d004      	beq.n	1140 <usart_sync_init+0x1c>
    1136:	68bb      	ldr	r3, [r7, #8]
    1138:	2b00      	cmp	r3, #0
    113a:	d001      	beq.n	1140 <usart_sync_init+0x1c>
    113c:	2301      	movs	r3, #1
    113e:	e000      	b.n	1142 <usart_sync_init+0x1e>
    1140:	2300      	movs	r3, #0
    1142:	f003 0301 	and.w	r3, r3, #1
    1146:	b2db      	uxtb	r3, r3
    1148:	2234      	movs	r2, #52	; 0x34
    114a:	490d      	ldr	r1, [pc, #52]	; (1180 <usart_sync_init+0x5c>)
    114c:	4618      	mov	r0, r3
    114e:	4b0d      	ldr	r3, [pc, #52]	; (1184 <usart_sync_init+0x60>)
    1150:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	3308      	adds	r3, #8
    1156:	68b9      	ldr	r1, [r7, #8]
    1158:	4618      	mov	r0, r3
    115a:	4b0b      	ldr	r3, [pc, #44]	; (1188 <usart_sync_init+0x64>)
    115c:	4798      	blx	r3
    115e:	6178      	str	r0, [r7, #20]
	if (init_status) {
    1160:	697b      	ldr	r3, [r7, #20]
    1162:	2b00      	cmp	r3, #0
    1164:	d001      	beq.n	116a <usart_sync_init+0x46>
		return init_status;
    1166:	697b      	ldr	r3, [r7, #20]
    1168:	e006      	b.n	1178 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	4a07      	ldr	r2, [pc, #28]	; (118c <usart_sync_init+0x68>)
    116e:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1170:	68fb      	ldr	r3, [r7, #12]
    1172:	4a07      	ldr	r2, [pc, #28]	; (1190 <usart_sync_init+0x6c>)
    1174:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1176:	2300      	movs	r3, #0
}
    1178:	4618      	mov	r0, r3
    117a:	3718      	adds	r7, #24
    117c:	46bd      	mov	sp, r7
    117e:	bd80      	pop	{r7, pc}
    1180:	00002aec 	.word	0x00002aec
    1184:	000012f1 	.word	0x000012f1
    1188:	000019ad 	.word	0x000019ad
    118c:	0000125d 	.word	0x0000125d
    1190:	00001195 	.word	0x00001195

00001194 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1194:	b580      	push	{r7, lr}
    1196:	b086      	sub	sp, #24
    1198:	af00      	add	r7, sp, #0
    119a:	60f8      	str	r0, [r7, #12]
    119c:	60b9      	str	r1, [r7, #8]
    119e:	4613      	mov	r3, r2
    11a0:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    11a2:	2300      	movs	r3, #0
    11a4:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    11aa:	68fb      	ldr	r3, [r7, #12]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d007      	beq.n	11c0 <usart_sync_write+0x2c>
    11b0:	68bb      	ldr	r3, [r7, #8]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d004      	beq.n	11c0 <usart_sync_write+0x2c>
    11b6:	88fb      	ldrh	r3, [r7, #6]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d001      	beq.n	11c0 <usart_sync_write+0x2c>
    11bc:	2301      	movs	r3, #1
    11be:	e000      	b.n	11c2 <usart_sync_write+0x2e>
    11c0:	2300      	movs	r3, #0
    11c2:	f003 0301 	and.w	r3, r3, #1
    11c6:	b2db      	uxtb	r3, r3
    11c8:	22f1      	movs	r2, #241	; 0xf1
    11ca:	491f      	ldr	r1, [pc, #124]	; (1248 <usart_sync_write+0xb4>)
    11cc:	4618      	mov	r0, r3
    11ce:	4b1f      	ldr	r3, [pc, #124]	; (124c <usart_sync_write+0xb8>)
    11d0:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    11d2:	bf00      	nop
    11d4:	693b      	ldr	r3, [r7, #16]
    11d6:	3308      	adds	r3, #8
    11d8:	4618      	mov	r0, r3
    11da:	4b1d      	ldr	r3, [pc, #116]	; (1250 <usart_sync_write+0xbc>)
    11dc:	4798      	blx	r3
    11de:	4603      	mov	r3, r0
    11e0:	f083 0301 	eor.w	r3, r3, #1
    11e4:	b2db      	uxtb	r3, r3
    11e6:	2b00      	cmp	r3, #0
    11e8:	d1f4      	bne.n	11d4 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    11ea:	693b      	ldr	r3, [r7, #16]
    11ec:	f103 0008 	add.w	r0, r3, #8
    11f0:	68ba      	ldr	r2, [r7, #8]
    11f2:	697b      	ldr	r3, [r7, #20]
    11f4:	4413      	add	r3, r2
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	4619      	mov	r1, r3
    11fa:	4b16      	ldr	r3, [pc, #88]	; (1254 <usart_sync_write+0xc0>)
    11fc:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    11fe:	bf00      	nop
    1200:	693b      	ldr	r3, [r7, #16]
    1202:	3308      	adds	r3, #8
    1204:	4618      	mov	r0, r3
    1206:	4b12      	ldr	r3, [pc, #72]	; (1250 <usart_sync_write+0xbc>)
    1208:	4798      	blx	r3
    120a:	4603      	mov	r3, r0
    120c:	f083 0301 	eor.w	r3, r3, #1
    1210:	b2db      	uxtb	r3, r3
    1212:	2b00      	cmp	r3, #0
    1214:	d1f4      	bne.n	1200 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
    1216:	697b      	ldr	r3, [r7, #20]
    1218:	3301      	adds	r3, #1
    121a:	617b      	str	r3, [r7, #20]
    121c:	88fb      	ldrh	r3, [r7, #6]
    121e:	697a      	ldr	r2, [r7, #20]
    1220:	429a      	cmp	r2, r3
    1222:	d3e2      	bcc.n	11ea <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1224:	bf00      	nop
    1226:	693b      	ldr	r3, [r7, #16]
    1228:	3308      	adds	r3, #8
    122a:	4618      	mov	r0, r3
    122c:	4b0a      	ldr	r3, [pc, #40]	; (1258 <usart_sync_write+0xc4>)
    122e:	4798      	blx	r3
    1230:	4603      	mov	r3, r0
    1232:	f083 0301 	eor.w	r3, r3, #1
    1236:	b2db      	uxtb	r3, r3
    1238:	2b00      	cmp	r3, #0
    123a:	d1f4      	bne.n	1226 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
    123c:	697b      	ldr	r3, [r7, #20]
}
    123e:	4618      	mov	r0, r3
    1240:	3718      	adds	r7, #24
    1242:	46bd      	mov	sp, r7
    1244:	bd80      	pop	{r7, pc}
    1246:	bf00      	nop
    1248:	00002aec 	.word	0x00002aec
    124c:	000012f1 	.word	0x000012f1
    1250:	00001a3d 	.word	0x00001a3d
    1254:	000019f1 	.word	0x000019f1
    1258:	00001a5d 	.word	0x00001a5d

0000125c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    125c:	b590      	push	{r4, r7, lr}
    125e:	b087      	sub	sp, #28
    1260:	af00      	add	r7, sp, #0
    1262:	60f8      	str	r0, [r7, #12]
    1264:	60b9      	str	r1, [r7, #8]
    1266:	4613      	mov	r3, r2
    1268:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    126a:	2300      	movs	r3, #0
    126c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    126e:	68fb      	ldr	r3, [r7, #12]
    1270:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1272:	68fb      	ldr	r3, [r7, #12]
    1274:	2b00      	cmp	r3, #0
    1276:	d007      	beq.n	1288 <usart_sync_read+0x2c>
    1278:	68bb      	ldr	r3, [r7, #8]
    127a:	2b00      	cmp	r3, #0
    127c:	d004      	beq.n	1288 <usart_sync_read+0x2c>
    127e:	88fb      	ldrh	r3, [r7, #6]
    1280:	2b00      	cmp	r3, #0
    1282:	d001      	beq.n	1288 <usart_sync_read+0x2c>
    1284:	2301      	movs	r3, #1
    1286:	e000      	b.n	128a <usart_sync_read+0x2e>
    1288:	2300      	movs	r3, #0
    128a:	f003 0301 	and.w	r3, r3, #1
    128e:	b2db      	uxtb	r3, r3
    1290:	f44f 7286 	mov.w	r2, #268	; 0x10c
    1294:	4912      	ldr	r1, [pc, #72]	; (12e0 <usart_sync_read+0x84>)
    1296:	4618      	mov	r0, r3
    1298:	4b12      	ldr	r3, [pc, #72]	; (12e4 <usart_sync_read+0x88>)
    129a:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    129c:	bf00      	nop
    129e:	693b      	ldr	r3, [r7, #16]
    12a0:	3308      	adds	r3, #8
    12a2:	4618      	mov	r0, r3
    12a4:	4b10      	ldr	r3, [pc, #64]	; (12e8 <usart_sync_read+0x8c>)
    12a6:	4798      	blx	r3
    12a8:	4603      	mov	r3, r0
    12aa:	f083 0301 	eor.w	r3, r3, #1
    12ae:	b2db      	uxtb	r3, r3
    12b0:	2b00      	cmp	r3, #0
    12b2:	d1f4      	bne.n	129e <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    12b4:	68ba      	ldr	r2, [r7, #8]
    12b6:	697b      	ldr	r3, [r7, #20]
    12b8:	18d4      	adds	r4, r2, r3
    12ba:	693b      	ldr	r3, [r7, #16]
    12bc:	3308      	adds	r3, #8
    12be:	4618      	mov	r0, r3
    12c0:	4b0a      	ldr	r3, [pc, #40]	; (12ec <usart_sync_read+0x90>)
    12c2:	4798      	blx	r3
    12c4:	4603      	mov	r3, r0
    12c6:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    12c8:	697b      	ldr	r3, [r7, #20]
    12ca:	3301      	adds	r3, #1
    12cc:	617b      	str	r3, [r7, #20]
    12ce:	88fb      	ldrh	r3, [r7, #6]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	429a      	cmp	r2, r3
    12d4:	d3e2      	bcc.n	129c <usart_sync_read+0x40>

	return (int32_t)offset;
    12d6:	697b      	ldr	r3, [r7, #20]
}
    12d8:	4618      	mov	r0, r3
    12da:	371c      	adds	r7, #28
    12dc:	46bd      	mov	sp, r7
    12de:	bd90      	pop	{r4, r7, pc}
    12e0:	00002aec 	.word	0x00002aec
    12e4:	000012f1 	.word	0x000012f1
    12e8:	00001a7d 	.word	0x00001a7d
    12ec:	00001a19 	.word	0x00001a19

000012f0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    12f0:	b480      	push	{r7}
    12f2:	b085      	sub	sp, #20
    12f4:	af00      	add	r7, sp, #0
    12f6:	4603      	mov	r3, r0
    12f8:	60b9      	str	r1, [r7, #8]
    12fa:	607a      	str	r2, [r7, #4]
    12fc:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    12fe:	7bfb      	ldrb	r3, [r7, #15]
    1300:	f083 0301 	eor.w	r3, r3, #1
    1304:	b2db      	uxtb	r3, r3
    1306:	2b00      	cmp	r3, #0
    1308:	d000      	beq.n	130c <assert+0x1c>
		__asm("BKPT #0");
    130a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    130c:	bf00      	nop
    130e:	3714      	adds	r7, #20
    1310:	46bd      	mov	sp, r7
    1312:	f85d 7b04 	ldr.w	r7, [sp], #4
    1316:	4770      	bx	lr

00001318 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1318:	b480      	push	{r7}
    131a:	b085      	sub	sp, #20
    131c:	af00      	add	r7, sp, #0
    131e:	6078      	str	r0, [r7, #4]
    1320:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1322:	687b      	ldr	r3, [r7, #4]
    1324:	681b      	ldr	r3, [r3, #0]
    1326:	60fb      	str	r3, [r7, #12]
    1328:	e008      	b.n	133c <is_list_element+0x24>
		if (it == element) {
    132a:	68fa      	ldr	r2, [r7, #12]
    132c:	683b      	ldr	r3, [r7, #0]
    132e:	429a      	cmp	r2, r3
    1330:	d101      	bne.n	1336 <is_list_element+0x1e>
			return true;
    1332:	2301      	movs	r3, #1
    1334:	e006      	b.n	1344 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	60fb      	str	r3, [r7, #12]
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	2b00      	cmp	r3, #0
    1340:	d1f3      	bne.n	132a <is_list_element+0x12>
		}
	}

	return false;
    1342:	2300      	movs	r3, #0
}
    1344:	4618      	mov	r0, r3
    1346:	3714      	adds	r7, #20
    1348:	46bd      	mov	sp, r7
    134a:	f85d 7b04 	ldr.w	r7, [sp], #4
    134e:	4770      	bx	lr

00001350 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1350:	b580      	push	{r7, lr}
    1352:	b082      	sub	sp, #8
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
    1358:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    135a:	6839      	ldr	r1, [r7, #0]
    135c:	6878      	ldr	r0, [r7, #4]
    135e:	4b0f      	ldr	r3, [pc, #60]	; (139c <list_insert_as_head+0x4c>)
    1360:	4798      	blx	r3
    1362:	4603      	mov	r3, r0
    1364:	2b00      	cmp	r3, #0
    1366:	bf14      	ite	ne
    1368:	2301      	movne	r3, #1
    136a:	2300      	moveq	r3, #0
    136c:	b2db      	uxtb	r3, r3
    136e:	f083 0301 	eor.w	r3, r3, #1
    1372:	b2db      	uxtb	r3, r3
    1374:	f003 0301 	and.w	r3, r3, #1
    1378:	b2db      	uxtb	r3, r3
    137a:	2239      	movs	r2, #57	; 0x39
    137c:	4908      	ldr	r1, [pc, #32]	; (13a0 <list_insert_as_head+0x50>)
    137e:	4618      	mov	r0, r3
    1380:	4b08      	ldr	r3, [pc, #32]	; (13a4 <list_insert_as_head+0x54>)
    1382:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	681a      	ldr	r2, [r3, #0]
    1388:	683b      	ldr	r3, [r7, #0]
    138a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	683a      	ldr	r2, [r7, #0]
    1390:	601a      	str	r2, [r3, #0]
}
    1392:	bf00      	nop
    1394:	3708      	adds	r7, #8
    1396:	46bd      	mov	sp, r7
    1398:	bd80      	pop	{r7, pc}
    139a:	bf00      	nop
    139c:	00001319 	.word	0x00001319
    13a0:	00002b08 	.word	0x00002b08
    13a4:	000012f1 	.word	0x000012f1

000013a8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	681a      	ldr	r2, [r3, #0]
    13b6:	683b      	ldr	r3, [r7, #0]
    13b8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	683a      	ldr	r2, [r7, #0]
    13be:	601a      	str	r2, [r3, #0]
}
    13c0:	bf00      	nop
    13c2:	370c      	adds	r7, #12
    13c4:	46bd      	mov	sp, r7
    13c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13ca:	4770      	bx	lr

000013cc <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    13cc:	b480      	push	{r7}
    13ce:	b085      	sub	sp, #20
    13d0:	af00      	add	r7, sp, #0
    13d2:	6078      	str	r0, [r7, #4]
	if (list->head) {
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	2b00      	cmp	r3, #0
    13da:	d009      	beq.n	13f0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	681b      	ldr	r3, [r3, #0]
    13e0:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	681a      	ldr	r2, [r3, #0]
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	e000      	b.n	13f2 <list_remove_head+0x26>
	}

	return NULL;
    13f0:	2300      	movs	r3, #0
}
    13f2:	4618      	mov	r0, r3
    13f4:	3714      	adds	r7, #20
    13f6:	46bd      	mov	sp, r7
    13f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    13fc:	4770      	bx	lr
	...

00001400 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
    1400:	b480      	push	{r7}
    1402:	b083      	sub	sp, #12
    1404:	af00      	add	r7, sp, #0
    1406:	4603      	mov	r3, r0
    1408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    140e:	2b00      	cmp	r3, #0
    1410:	db0c      	blt.n	142c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1412:	4909      	ldr	r1, [pc, #36]	; (1438 <__NVIC_SetPendingIRQ+0x38>)
    1414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1418:	095b      	lsrs	r3, r3, #5
    141a:	88fa      	ldrh	r2, [r7, #6]
    141c:	f002 021f 	and.w	r2, r2, #31
    1420:	2001      	movs	r0, #1
    1422:	fa00 f202 	lsl.w	r2, r0, r2
    1426:	3340      	adds	r3, #64	; 0x40
    1428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    142c:	bf00      	nop
    142e:	370c      	adds	r7, #12
    1430:	46bd      	mov	sp, r7
    1432:	f85d 7b04 	ldr.w	r7, [sp], #4
    1436:	4770      	bx	lr
    1438:	e000e100 	.word	0xe000e100

0000143c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
    1442:	4603      	mov	r3, r0
    1444:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    1446:	79fb      	ldrb	r3, [r7, #7]
    1448:	b21b      	sxth	r3, r3
    144a:	4618      	mov	r0, r3
    144c:	4b02      	ldr	r3, [pc, #8]	; (1458 <_irq_set+0x1c>)
    144e:	4798      	blx	r3
}
    1450:	bf00      	nop
    1452:	3708      	adds	r7, #8
    1454:	46bd      	mov	sp, r7
    1456:	bd80      	pop	{r7, pc}
    1458:	00001401 	.word	0x00001401

0000145c <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    145c:	b480      	push	{r7}
    145e:	b083      	sub	sp, #12
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
    1464:	460b      	mov	r3, r1
    1466:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	881b      	ldrh	r3, [r3, #0]
    146c:	b29a      	uxth	r2, r3
    146e:	887b      	ldrh	r3, [r7, #2]
    1470:	021b      	lsls	r3, r3, #8
    1472:	b29b      	uxth	r3, r3
    1474:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1478:	b29b      	uxth	r3, r3
    147a:	4313      	orrs	r3, r2
    147c:	b29a      	uxth	r2, r3
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1482:	bf00      	nop
    1484:	370c      	adds	r7, #12
    1486:	46bd      	mov	sp, r7
    1488:	f85d 7b04 	ldr.w	r7, [sp], #4
    148c:	4770      	bx	lr
	...

00001490 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1490:	b580      	push	{r7, lr}
    1492:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1494:	2100      	movs	r1, #0
    1496:	4808      	ldr	r0, [pc, #32]	; (14b8 <_init_chip+0x28>)
    1498:	4b08      	ldr	r3, [pc, #32]	; (14bc <_init_chip+0x2c>)
    149a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    149c:	4b08      	ldr	r3, [pc, #32]	; (14c0 <_init_chip+0x30>)
    149e:	4798      	blx	r3
	_oscctrl_init_sources();
    14a0:	4b08      	ldr	r3, [pc, #32]	; (14c4 <_init_chip+0x34>)
    14a2:	4798      	blx	r3
	_mclk_init();
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <_init_chip+0x38>)
    14a6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    14a8:	4b08      	ldr	r3, [pc, #32]	; (14cc <_init_chip+0x3c>)
    14aa:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14ac:	f640 70ff 	movw	r0, #4095	; 0xfff
    14b0:	4b07      	ldr	r3, [pc, #28]	; (14d0 <_init_chip+0x40>)
    14b2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    14b4:	bf00      	nop
    14b6:	bd80      	pop	{r7, pc}
    14b8:	41004000 	.word	0x41004000
    14bc:	0000145d 	.word	0x0000145d
    14c0:	000015fd 	.word	0x000015fd
    14c4:	00001695 	.word	0x00001695
    14c8:	00001579 	.word	0x00001579
    14cc:	000016d5 	.word	0x000016d5
    14d0:	00001529 	.word	0x00001529

000014d4 <hri_gclk_wait_for_sync>:
{
    14d4:	b480      	push	{r7}
    14d6:	b083      	sub	sp, #12
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
    14dc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    14de:	bf00      	nop
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	685a      	ldr	r2, [r3, #4]
    14e4:	683b      	ldr	r3, [r7, #0]
    14e6:	4013      	ands	r3, r2
    14e8:	2b00      	cmp	r3, #0
    14ea:	d1f9      	bne.n	14e0 <hri_gclk_wait_for_sync+0xc>
}
    14ec:	bf00      	nop
    14ee:	370c      	adds	r7, #12
    14f0:	46bd      	mov	sp, r7
    14f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f6:	4770      	bx	lr

000014f8 <hri_gclk_write_GENCTRL_reg>:
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b084      	sub	sp, #16
    14fc:	af00      	add	r7, sp, #0
    14fe:	60f8      	str	r0, [r7, #12]
    1500:	460b      	mov	r3, r1
    1502:	607a      	str	r2, [r7, #4]
    1504:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1506:	7afa      	ldrb	r2, [r7, #11]
    1508:	68fb      	ldr	r3, [r7, #12]
    150a:	3208      	adds	r2, #8
    150c:	6879      	ldr	r1, [r7, #4]
    150e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1512:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1516:	68f8      	ldr	r0, [r7, #12]
    1518:	4b02      	ldr	r3, [pc, #8]	; (1524 <hri_gclk_write_GENCTRL_reg+0x2c>)
    151a:	4798      	blx	r3
}
    151c:	bf00      	nop
    151e:	3710      	adds	r7, #16
    1520:	46bd      	mov	sp, r7
    1522:	bd80      	pop	{r7, pc}
    1524:	000014d5 	.word	0x000014d5

00001528 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1528:	b580      	push	{r7, lr}
    152a:	b082      	sub	sp, #8
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	f003 0301 	and.w	r3, r3, #1
    1536:	2b00      	cmp	r3, #0
    1538:	d004      	beq.n	1544 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    153a:	4a04      	ldr	r2, [pc, #16]	; (154c <_gclk_init_generators_by_fref+0x24>)
    153c:	2100      	movs	r1, #0
    153e:	4804      	ldr	r0, [pc, #16]	; (1550 <_gclk_init_generators_by_fref+0x28>)
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <_gclk_init_generators_by_fref+0x2c>)
    1542:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1544:	bf00      	nop
    1546:	3708      	adds	r7, #8
    1548:	46bd      	mov	sp, r7
    154a:	bd80      	pop	{r7, pc}
    154c:	00010101 	.word	0x00010101
    1550:	40001c00 	.word	0x40001c00
    1554:	000014f9 	.word	0x000014f9

00001558 <hri_mclk_write_CPUDIV_reg>:
{
    1558:	b480      	push	{r7}
    155a:	b083      	sub	sp, #12
    155c:	af00      	add	r7, sp, #0
    155e:	6078      	str	r0, [r7, #4]
    1560:	460b      	mov	r3, r1
    1562:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	78fa      	ldrb	r2, [r7, #3]
    1568:	715a      	strb	r2, [r3, #5]
}
    156a:	bf00      	nop
    156c:	370c      	adds	r7, #12
    156e:	46bd      	mov	sp, r7
    1570:	f85d 7b04 	ldr.w	r7, [sp], #4
    1574:	4770      	bx	lr
	...

00001578 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <_mclk_init+0x1c>)
    1580:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    1582:	2101      	movs	r1, #1
    1584:	6878      	ldr	r0, [r7, #4]
    1586:	4b04      	ldr	r3, [pc, #16]	; (1598 <_mclk_init+0x20>)
    1588:	4798      	blx	r3
}
    158a:	bf00      	nop
    158c:	3708      	adds	r7, #8
    158e:	46bd      	mov	sp, r7
    1590:	bd80      	pop	{r7, pc}
    1592:	bf00      	nop
    1594:	40000800 	.word	0x40000800
    1598:	00001559 	.word	0x00001559

0000159c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    159c:	b480      	push	{r7}
    159e:	b083      	sub	sp, #12
    15a0:	af00      	add	r7, sp, #0
    15a2:	6078      	str	r0, [r7, #4]
    15a4:	460b      	mov	r3, r1
    15a6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	78fa      	ldrb	r2, [r7, #3]
    15ac:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    15ae:	bf00      	nop
    15b0:	370c      	adds	r7, #12
    15b2:	46bd      	mov	sp, r7
    15b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15b8:	4770      	bx	lr

000015ba <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    15ba:	b480      	push	{r7}
    15bc:	b085      	sub	sp, #20
    15be:	af00      	add	r7, sp, #0
    15c0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	69db      	ldr	r3, [r3, #28]
    15c6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    15c8:	68fb      	ldr	r3, [r7, #12]
    15ca:	0a1b      	lsrs	r3, r3, #8
    15cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    15d0:	60fb      	str	r3, [r7, #12]
	return tmp;
    15d2:	68fb      	ldr	r3, [r7, #12]
}
    15d4:	4618      	mov	r0, r3
    15d6:	3714      	adds	r7, #20
    15d8:	46bd      	mov	sp, r7
    15da:	f85d 7b04 	ldr.w	r7, [sp], #4
    15de:	4770      	bx	lr

000015e0 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    15e0:	b480      	push	{r7}
    15e2:	b083      	sub	sp, #12
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
    15e8:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	683a      	ldr	r2, [r7, #0]
    15ee:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    15f0:	bf00      	nop
    15f2:	370c      	adds	r7, #12
    15f4:	46bd      	mov	sp, r7
    15f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    15fa:	4770      	bx	lr

000015fc <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    15fc:	b580      	push	{r7, lr}
    15fe:	b082      	sub	sp, #8
    1600:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1602:	4b0c      	ldr	r3, [pc, #48]	; (1634 <_osc32kctrl_init_sources+0x38>)
    1604:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1606:	2300      	movs	r3, #0
    1608:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    160a:	6878      	ldr	r0, [r7, #4]
    160c:	4b0a      	ldr	r3, [pc, #40]	; (1638 <_osc32kctrl_init_sources+0x3c>)
    160e:	4798      	blx	r3
    1610:	4603      	mov	r3, r0
    1612:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1614:	887b      	ldrh	r3, [r7, #2]
    1616:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1618:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    161c:	4619      	mov	r1, r3
    161e:	6878      	ldr	r0, [r7, #4]
    1620:	4b06      	ldr	r3, [pc, #24]	; (163c <_osc32kctrl_init_sources+0x40>)
    1622:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1624:	2101      	movs	r1, #1
    1626:	6878      	ldr	r0, [r7, #4]
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <_osc32kctrl_init_sources+0x44>)
    162a:	4798      	blx	r3
	(void)calib;
}
    162c:	bf00      	nop
    162e:	3708      	adds	r7, #8
    1630:	46bd      	mov	sp, r7
    1632:	bd80      	pop	{r7, pc}
    1634:	40001400 	.word	0x40001400
    1638:	000015bb 	.word	0x000015bb
    163c:	000015e1 	.word	0x000015e1
    1640:	0000159d 	.word	0x0000159d

00001644 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    1644:	b480      	push	{r7}
    1646:	b083      	sub	sp, #12
    1648:	af00      	add	r7, sp, #0
    164a:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	691b      	ldr	r3, [r3, #16]
    1650:	085b      	lsrs	r3, r3, #1
    1652:	f003 0301 	and.w	r3, r3, #1
    1656:	2b00      	cmp	r3, #0
    1658:	bf14      	ite	ne
    165a:	2301      	movne	r3, #1
    165c:	2300      	moveq	r3, #0
    165e:	b2db      	uxtb	r3, r3
}
    1660:	4618      	mov	r0, r3
    1662:	370c      	adds	r7, #12
    1664:	46bd      	mov	sp, r7
    1666:	f85d 7b04 	ldr.w	r7, [sp], #4
    166a:	4770      	bx	lr

0000166c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    166c:	b480      	push	{r7}
    166e:	b085      	sub	sp, #20
    1670:	af00      	add	r7, sp, #0
    1672:	60f8      	str	r0, [r7, #12]
    1674:	460b      	mov	r3, r1
    1676:	607a      	str	r2, [r7, #4]
    1678:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    167a:	7afb      	ldrb	r3, [r7, #11]
    167c:	68fa      	ldr	r2, [r7, #12]
    167e:	3304      	adds	r3, #4
    1680:	009b      	lsls	r3, r3, #2
    1682:	4413      	add	r3, r2
    1684:	687a      	ldr	r2, [r7, #4]
    1686:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1688:	bf00      	nop
    168a:	3714      	adds	r7, #20
    168c:	46bd      	mov	sp, r7
    168e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1692:	4770      	bx	lr

00001694 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1694:	b580      	push	{r7, lr}
    1696:	b082      	sub	sp, #8
    1698:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    169a:	4b0a      	ldr	r3, [pc, #40]	; (16c4 <_oscctrl_init_sources+0x30>)
    169c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    169e:	4a0a      	ldr	r2, [pc, #40]	; (16c8 <_oscctrl_init_sources+0x34>)
    16a0:	2101      	movs	r1, #1
    16a2:	6878      	ldr	r0, [r7, #4]
    16a4:	4b09      	ldr	r3, [pc, #36]	; (16cc <_oscctrl_init_sources+0x38>)
    16a6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    16a8:	bf00      	nop
    16aa:	6878      	ldr	r0, [r7, #4]
    16ac:	4b08      	ldr	r3, [pc, #32]	; (16d0 <_oscctrl_init_sources+0x3c>)
    16ae:	4798      	blx	r3
    16b0:	4603      	mov	r3, r0
    16b2:	f083 0301 	eor.w	r3, r3, #1
    16b6:	b2db      	uxtb	r3, r3
    16b8:	2b00      	cmp	r3, #0
    16ba:	d1f6      	bne.n	16aa <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    16bc:	bf00      	nop
    16be:	3708      	adds	r7, #8
    16c0:	46bd      	mov	sp, r7
    16c2:	bd80      	pop	{r7, pc}
    16c4:	40001000 	.word	0x40001000
    16c8:	03002606 	.word	0x03002606
    16cc:	0000166d 	.word	0x0000166d
    16d0:	00001645 	.word	0x00001645

000016d4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    16d4:	b480      	push	{r7}
    16d6:	b083      	sub	sp, #12
    16d8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    16da:	4b04      	ldr	r3, [pc, #16]	; (16ec <_oscctrl_init_referenced_generators+0x18>)
    16dc:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    16de:	bf00      	nop
    16e0:	370c      	adds	r7, #12
    16e2:	46bd      	mov	sp, r7
    16e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    16e8:	4770      	bx	lr
    16ea:	bf00      	nop
    16ec:	40001000 	.word	0x40001000

000016f0 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    16f0:	b480      	push	{r7}
    16f2:	b083      	sub	sp, #12
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	789b      	ldrb	r3, [r3, #2]
    16fc:	b2db      	uxtb	r3, r3
}
    16fe:	4618      	mov	r0, r3
    1700:	370c      	adds	r7, #12
    1702:	46bd      	mov	sp, r7
    1704:	f85d 7b04 	ldr.w	r7, [sp], #4
    1708:	4770      	bx	lr

0000170a <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    170a:	b480      	push	{r7}
    170c:	b083      	sub	sp, #12
    170e:	af00      	add	r7, sp, #0
    1710:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	685b      	ldr	r3, [r3, #4]
}
    1716:	4618      	mov	r0, r3
    1718:	370c      	adds	r7, #12
    171a:	46bd      	mov	sp, r7
    171c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1720:	4770      	bx	lr
	...

00001724 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1724:	b590      	push	{r4, r7, lr}
    1726:	b083      	sub	sp, #12
    1728:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    172a:	4b17      	ldr	r3, [pc, #92]	; (1788 <RAMECC_Handler+0x64>)
    172c:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    172e:	4817      	ldr	r0, [pc, #92]	; (178c <RAMECC_Handler+0x68>)
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <RAMECC_Handler+0x6c>)
    1732:	4798      	blx	r3
    1734:	4603      	mov	r3, r0
    1736:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	f003 0302 	and.w	r3, r3, #2
    173e:	2b00      	cmp	r3, #0
    1740:	d00c      	beq.n	175c <RAMECC_Handler+0x38>
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	681b      	ldr	r3, [r3, #0]
    1746:	2b00      	cmp	r3, #0
    1748:	d008      	beq.n	175c <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	681c      	ldr	r4, [r3, #0]
    174e:	480f      	ldr	r0, [pc, #60]	; (178c <RAMECC_Handler+0x68>)
    1750:	4b10      	ldr	r3, [pc, #64]	; (1794 <RAMECC_Handler+0x70>)
    1752:	4798      	blx	r3
    1754:	4603      	mov	r3, r0
    1756:	4618      	mov	r0, r3
    1758:	47a0      	blx	r4
    175a:	e012      	b.n	1782 <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    175c:	683b      	ldr	r3, [r7, #0]
    175e:	f003 0301 	and.w	r3, r3, #1
    1762:	2b00      	cmp	r3, #0
    1764:	d00c      	beq.n	1780 <RAMECC_Handler+0x5c>
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	685b      	ldr	r3, [r3, #4]
    176a:	2b00      	cmp	r3, #0
    176c:	d008      	beq.n	1780 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	685c      	ldr	r4, [r3, #4]
    1772:	4806      	ldr	r0, [pc, #24]	; (178c <RAMECC_Handler+0x68>)
    1774:	4b07      	ldr	r3, [pc, #28]	; (1794 <RAMECC_Handler+0x70>)
    1776:	4798      	blx	r3
    1778:	4603      	mov	r3, r0
    177a:	4618      	mov	r0, r3
    177c:	47a0      	blx	r4
    177e:	e000      	b.n	1782 <RAMECC_Handler+0x5e>
	} else {
		return;
    1780:	bf00      	nop
	}
}
    1782:	370c      	adds	r7, #12
    1784:	46bd      	mov	sp, r7
    1786:	bd90      	pop	{r4, r7, pc}
    1788:	200000dc 	.word	0x200000dc
    178c:	41020000 	.word	0x41020000
    1790:	000016f1 	.word	0x000016f1
    1794:	0000170b 	.word	0x0000170b

00001798 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1798:	b480      	push	{r7}
    179a:	b083      	sub	sp, #12
    179c:	af00      	add	r7, sp, #0
    179e:	6078      	str	r0, [r7, #4]
    17a0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    17a2:	bf00      	nop
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	69da      	ldr	r2, [r3, #28]
    17a8:	683b      	ldr	r3, [r7, #0]
    17aa:	4013      	ands	r3, r2
    17ac:	2b00      	cmp	r3, #0
    17ae:	d1f9      	bne.n	17a4 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    17b0:	bf00      	nop
    17b2:	370c      	adds	r7, #12
    17b4:	46bd      	mov	sp, r7
    17b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ba:	4770      	bx	lr

000017bc <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    17bc:	b480      	push	{r7}
    17be:	b083      	sub	sp, #12
    17c0:	af00      	add	r7, sp, #0
    17c2:	6078      	str	r0, [r7, #4]
    17c4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	69da      	ldr	r2, [r3, #28]
    17ca:	683b      	ldr	r3, [r7, #0]
    17cc:	4013      	ands	r3, r2
    17ce:	2b00      	cmp	r3, #0
    17d0:	bf14      	ite	ne
    17d2:	2301      	movne	r3, #1
    17d4:	2300      	moveq	r3, #0
    17d6:	b2db      	uxtb	r3, r3
}
    17d8:	4618      	mov	r0, r3
    17da:	370c      	adds	r7, #12
    17dc:	46bd      	mov	sp, r7
    17de:	f85d 7b04 	ldr.w	r7, [sp], #4
    17e2:	4770      	bx	lr

000017e4 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    17e4:	b480      	push	{r7}
    17e6:	b083      	sub	sp, #12
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	7e1b      	ldrb	r3, [r3, #24]
    17f0:	b2db      	uxtb	r3, r3
    17f2:	f003 0301 	and.w	r3, r3, #1
    17f6:	2b00      	cmp	r3, #0
    17f8:	bf14      	ite	ne
    17fa:	2301      	movne	r3, #1
    17fc:	2300      	moveq	r3, #0
    17fe:	b2db      	uxtb	r3, r3
}
    1800:	4618      	mov	r0, r3
    1802:	370c      	adds	r7, #12
    1804:	46bd      	mov	sp, r7
    1806:	f85d 7b04 	ldr.w	r7, [sp], #4
    180a:	4770      	bx	lr

0000180c <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    180c:	b480      	push	{r7}
    180e:	b083      	sub	sp, #12
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	7e1b      	ldrb	r3, [r3, #24]
    1818:	b2db      	uxtb	r3, r3
    181a:	085b      	lsrs	r3, r3, #1
    181c:	f003 0301 	and.w	r3, r3, #1
    1820:	2b00      	cmp	r3, #0
    1822:	bf14      	ite	ne
    1824:	2301      	movne	r3, #1
    1826:	2300      	moveq	r3, #0
    1828:	b2db      	uxtb	r3, r3
}
    182a:	4618      	mov	r0, r3
    182c:	370c      	adds	r7, #12
    182e:	46bd      	mov	sp, r7
    1830:	f85d 7b04 	ldr.w	r7, [sp], #4
    1834:	4770      	bx	lr

00001836 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    1836:	b480      	push	{r7}
    1838:	b083      	sub	sp, #12
    183a:	af00      	add	r7, sp, #0
    183c:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	7e1b      	ldrb	r3, [r3, #24]
    1842:	b2db      	uxtb	r3, r3
    1844:	089b      	lsrs	r3, r3, #2
    1846:	f003 0301 	and.w	r3, r3, #1
    184a:	2b00      	cmp	r3, #0
    184c:	bf14      	ite	ne
    184e:	2301      	movne	r3, #1
    1850:	2300      	moveq	r3, #0
    1852:	b2db      	uxtb	r3, r3
}
    1854:	4618      	mov	r0, r3
    1856:	370c      	adds	r7, #12
    1858:	46bd      	mov	sp, r7
    185a:	f85d 7b04 	ldr.w	r7, [sp], #4
    185e:	4770      	bx	lr

00001860 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1860:	b580      	push	{r7, lr}
    1862:	b082      	sub	sp, #8
    1864:	af00      	add	r7, sp, #0
    1866:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	681b      	ldr	r3, [r3, #0]
    186c:	f023 0202 	bic.w	r2, r3, #2
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1874:	2103      	movs	r1, #3
    1876:	6878      	ldr	r0, [r7, #4]
    1878:	4b02      	ldr	r3, [pc, #8]	; (1884 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    187a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    187c:	bf00      	nop
    187e:	3708      	adds	r7, #8
    1880:	46bd      	mov	sp, r7
    1882:	bd80      	pop	{r7, pc}
    1884:	00001799 	.word	0x00001799

00001888 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1888:	b580      	push	{r7, lr}
    188a:	b084      	sub	sp, #16
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
    1890:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1892:	2103      	movs	r1, #3
    1894:	6878      	ldr	r0, [r7, #4]
    1896:	4b07      	ldr	r3, [pc, #28]	; (18b4 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    1898:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	681b      	ldr	r3, [r3, #0]
    189e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    18a0:	68fa      	ldr	r2, [r7, #12]
    18a2:	683b      	ldr	r3, [r7, #0]
    18a4:	4013      	ands	r3, r2
    18a6:	60fb      	str	r3, [r7, #12]
	return tmp;
    18a8:	68fb      	ldr	r3, [r7, #12]
}
    18aa:	4618      	mov	r0, r3
    18ac:	3710      	adds	r7, #16
    18ae:	46bd      	mov	sp, r7
    18b0:	bd80      	pop	{r7, pc}
    18b2:	bf00      	nop
    18b4:	00001799 	.word	0x00001799

000018b8 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	b082      	sub	sp, #8
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	683a      	ldr	r2, [r7, #0]
    18c6:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    18c8:	2103      	movs	r1, #3
    18ca:	6878      	ldr	r0, [r7, #4]
    18cc:	4b02      	ldr	r3, [pc, #8]	; (18d8 <hri_sercomusart_write_CTRLA_reg+0x20>)
    18ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18d0:	bf00      	nop
    18d2:	3708      	adds	r7, #8
    18d4:	46bd      	mov	sp, r7
    18d6:	bd80      	pop	{r7, pc}
    18d8:	00001799 	.word	0x00001799

000018dc <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    18dc:	b580      	push	{r7, lr}
    18de:	b082      	sub	sp, #8
    18e0:	af00      	add	r7, sp, #0
    18e2:	6078      	str	r0, [r7, #4]
    18e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	683a      	ldr	r2, [r7, #0]
    18ea:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    18ec:	211f      	movs	r1, #31
    18ee:	6878      	ldr	r0, [r7, #4]
    18f0:	4b02      	ldr	r3, [pc, #8]	; (18fc <hri_sercomusart_write_CTRLB_reg+0x20>)
    18f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18f4:	bf00      	nop
    18f6:	3708      	adds	r7, #8
    18f8:	46bd      	mov	sp, r7
    18fa:	bd80      	pop	{r7, pc}
    18fc:	00001799 	.word	0x00001799

00001900 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    1900:	b480      	push	{r7}
    1902:	b083      	sub	sp, #12
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
    1908:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	683a      	ldr	r2, [r7, #0]
    190e:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1910:	bf00      	nop
    1912:	370c      	adds	r7, #12
    1914:	46bd      	mov	sp, r7
    1916:	f85d 7b04 	ldr.w	r7, [sp], #4
    191a:	4770      	bx	lr

0000191c <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    191c:	b480      	push	{r7}
    191e:	b083      	sub	sp, #12
    1920:	af00      	add	r7, sp, #0
    1922:	6078      	str	r0, [r7, #4]
    1924:	460b      	mov	r3, r1
    1926:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	887a      	ldrh	r2, [r7, #2]
    192c:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    192e:	bf00      	nop
    1930:	370c      	adds	r7, #12
    1932:	46bd      	mov	sp, r7
    1934:	f85d 7b04 	ldr.w	r7, [sp], #4
    1938:	4770      	bx	lr

0000193a <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    193a:	b480      	push	{r7}
    193c:	b083      	sub	sp, #12
    193e:	af00      	add	r7, sp, #0
    1940:	6078      	str	r0, [r7, #4]
    1942:	460b      	mov	r3, r1
    1944:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	78fa      	ldrb	r2, [r7, #3]
    194a:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    194c:	bf00      	nop
    194e:	370c      	adds	r7, #12
    1950:	46bd      	mov	sp, r7
    1952:	f85d 7b04 	ldr.w	r7, [sp], #4
    1956:	4770      	bx	lr

00001958 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1958:	b480      	push	{r7}
    195a:	b083      	sub	sp, #12
    195c:	af00      	add	r7, sp, #0
    195e:	6078      	str	r0, [r7, #4]
    1960:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	683a      	ldr	r2, [r7, #0]
    1966:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1968:	bf00      	nop
    196a:	370c      	adds	r7, #12
    196c:	46bd      	mov	sp, r7
    196e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1972:	4770      	bx	lr

00001974 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1980:	4618      	mov	r0, r3
    1982:	370c      	adds	r7, #12
    1984:	46bd      	mov	sp, r7
    1986:	f85d 7b04 	ldr.w	r7, [sp], #4
    198a:	4770      	bx	lr

0000198c <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	460b      	mov	r3, r1
    1996:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	78fa      	ldrb	r2, [r7, #3]
    199c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19a0:	bf00      	nop
    19a2:	370c      	adds	r7, #12
    19a4:	46bd      	mov	sp, r7
    19a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    19aa:	4770      	bx	lr

000019ac <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
    19b4:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	2b00      	cmp	r3, #0
    19ba:	bf14      	ite	ne
    19bc:	2301      	movne	r3, #1
    19be:	2300      	moveq	r3, #0
    19c0:	b2db      	uxtb	r3, r3
    19c2:	22bb      	movs	r2, #187	; 0xbb
    19c4:	4907      	ldr	r1, [pc, #28]	; (19e4 <_usart_sync_init+0x38>)
    19c6:	4618      	mov	r0, r3
    19c8:	4b07      	ldr	r3, [pc, #28]	; (19e8 <_usart_sync_init+0x3c>)
    19ca:	4798      	blx	r3

	device->hw = hw;
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	683a      	ldr	r2, [r7, #0]
    19d0:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    19d2:	6838      	ldr	r0, [r7, #0]
    19d4:	4b05      	ldr	r3, [pc, #20]	; (19ec <_usart_sync_init+0x40>)
    19d6:	4798      	blx	r3
    19d8:	4603      	mov	r3, r0
}
    19da:	4618      	mov	r0, r3
    19dc:	3708      	adds	r7, #8
    19de:	46bd      	mov	sp, r7
    19e0:	bd80      	pop	{r7, pc}
    19e2:	bf00      	nop
    19e4:	00002b28 	.word	0x00002b28
    19e8:	000012f1 	.word	0x000012f1
    19ec:	00001b5d 	.word	0x00001b5d

000019f0 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b082      	sub	sp, #8
    19f4:	af00      	add	r7, sp, #0
    19f6:	6078      	str	r0, [r7, #4]
    19f8:	460b      	mov	r3, r1
    19fa:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	78fa      	ldrb	r2, [r7, #3]
    1a02:	4611      	mov	r1, r2
    1a04:	4618      	mov	r0, r3
    1a06:	4b03      	ldr	r3, [pc, #12]	; (1a14 <_usart_sync_write_byte+0x24>)
    1a08:	4798      	blx	r3
}
    1a0a:	bf00      	nop
    1a0c:	3708      	adds	r7, #8
    1a0e:	46bd      	mov	sp, r7
    1a10:	bd80      	pop	{r7, pc}
    1a12:	bf00      	nop
    1a14:	00001959 	.word	0x00001959

00001a18 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1a18:	b580      	push	{r7, lr}
    1a1a:	b082      	sub	sp, #8
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	4618      	mov	r0, r3
    1a26:	4b04      	ldr	r3, [pc, #16]	; (1a38 <_usart_sync_read_byte+0x20>)
    1a28:	4798      	blx	r3
    1a2a:	4603      	mov	r3, r0
    1a2c:	b2db      	uxtb	r3, r3
}
    1a2e:	4618      	mov	r0, r3
    1a30:	3708      	adds	r7, #8
    1a32:	46bd      	mov	sp, r7
    1a34:	bd80      	pop	{r7, pc}
    1a36:	bf00      	nop
    1a38:	00001975 	.word	0x00001975

00001a3c <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	af00      	add	r7, sp, #0
    1a42:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	681b      	ldr	r3, [r3, #0]
    1a48:	4618      	mov	r0, r3
    1a4a:	4b03      	ldr	r3, [pc, #12]	; (1a58 <_usart_sync_is_ready_to_send+0x1c>)
    1a4c:	4798      	blx	r3
    1a4e:	4603      	mov	r3, r0
}
    1a50:	4618      	mov	r0, r3
    1a52:	3708      	adds	r7, #8
    1a54:	46bd      	mov	sp, r7
    1a56:	bd80      	pop	{r7, pc}
    1a58:	000017e5 	.word	0x000017e5

00001a5c <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b082      	sub	sp, #8
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	681b      	ldr	r3, [r3, #0]
    1a68:	4618      	mov	r0, r3
    1a6a:	4b03      	ldr	r3, [pc, #12]	; (1a78 <_usart_sync_is_transmit_done+0x1c>)
    1a6c:	4798      	blx	r3
    1a6e:	4603      	mov	r3, r0
}
    1a70:	4618      	mov	r0, r3
    1a72:	3708      	adds	r7, #8
    1a74:	46bd      	mov	sp, r7
    1a76:	bd80      	pop	{r7, pc}
    1a78:	0000180d 	.word	0x0000180d

00001a7c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b082      	sub	sp, #8
    1a80:	af00      	add	r7, sp, #0
    1a82:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	4618      	mov	r0, r3
    1a8a:	4b03      	ldr	r3, [pc, #12]	; (1a98 <_usart_sync_is_byte_received+0x1c>)
    1a8c:	4798      	blx	r3
    1a8e:	4603      	mov	r3, r0
}
    1a90:	4618      	mov	r0, r3
    1a92:	3708      	adds	r7, #8
    1a94:	46bd      	mov	sp, r7
    1a96:	bd80      	pop	{r7, pc}
    1a98:	00001837 	.word	0x00001837

00001a9c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1a9c:	b4b0      	push	{r4, r5, r7}
    1a9e:	b08d      	sub	sp, #52	; 0x34
    1aa0:	af00      	add	r7, sp, #0
    1aa2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1aa4:	4b13      	ldr	r3, [pc, #76]	; (1af4 <_sercom_get_hardware_index+0x58>)
    1aa6:	f107 040c 	add.w	r4, r7, #12
    1aaa:	461d      	mov	r5, r3
    1aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1ab0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ab8:	2300      	movs	r3, #0
    1aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    1abc:	e010      	b.n	1ae0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ac0:	009b      	lsls	r3, r3, #2
    1ac2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1ac6:	4413      	add	r3, r2
    1ac8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1acc:	461a      	mov	r2, r3
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	429a      	cmp	r2, r3
    1ad2:	d102      	bne.n	1ada <_sercom_get_hardware_index+0x3e>
			return i;
    1ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ad6:	b2db      	uxtb	r3, r3
    1ad8:	e006      	b.n	1ae8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1adc:	3301      	adds	r3, #1
    1ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    1ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ae2:	2b07      	cmp	r3, #7
    1ae4:	d9eb      	bls.n	1abe <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1ae6:	2300      	movs	r3, #0
}
    1ae8:	4618      	mov	r0, r3
    1aea:	3734      	adds	r7, #52	; 0x34
    1aec:	46bd      	mov	sp, r7
    1aee:	bcb0      	pop	{r4, r5, r7}
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop
    1af4:	00002b44 	.word	0x00002b44

00001af8 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b084      	sub	sp, #16
    1afc:	af00      	add	r7, sp, #0
    1afe:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1b00:	6878      	ldr	r0, [r7, #4]
    1b02:	4b12      	ldr	r3, [pc, #72]	; (1b4c <_get_sercom_index+0x54>)
    1b04:	4798      	blx	r3
    1b06:	4603      	mov	r3, r0
    1b08:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1b0a:	2300      	movs	r3, #0
    1b0c:	73fb      	strb	r3, [r7, #15]
    1b0e:	e00f      	b.n	1b30 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    1b10:	7bfa      	ldrb	r2, [r7, #15]
    1b12:	490f      	ldr	r1, [pc, #60]	; (1b50 <_get_sercom_index+0x58>)
    1b14:	4613      	mov	r3, r2
    1b16:	005b      	lsls	r3, r3, #1
    1b18:	4413      	add	r3, r2
    1b1a:	00db      	lsls	r3, r3, #3
    1b1c:	440b      	add	r3, r1
    1b1e:	781b      	ldrb	r3, [r3, #0]
    1b20:	7bba      	ldrb	r2, [r7, #14]
    1b22:	429a      	cmp	r2, r3
    1b24:	d101      	bne.n	1b2a <_get_sercom_index+0x32>
			return i;
    1b26:	7bfb      	ldrb	r3, [r7, #15]
    1b28:	e00c      	b.n	1b44 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1b2a:	7bfb      	ldrb	r3, [r7, #15]
    1b2c:	3301      	adds	r3, #1
    1b2e:	73fb      	strb	r3, [r7, #15]
    1b30:	7bfb      	ldrb	r3, [r7, #15]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d0ec      	beq.n	1b10 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1b36:	f240 2247 	movw	r2, #583	; 0x247
    1b3a:	4906      	ldr	r1, [pc, #24]	; (1b54 <_get_sercom_index+0x5c>)
    1b3c:	2000      	movs	r0, #0
    1b3e:	4b06      	ldr	r3, [pc, #24]	; (1b58 <_get_sercom_index+0x60>)
    1b40:	4798      	blx	r3
	return 0;
    1b42:	2300      	movs	r3, #0
}
    1b44:	4618      	mov	r0, r3
    1b46:	3710      	adds	r7, #16
    1b48:	46bd      	mov	sp, r7
    1b4a:	bd80      	pop	{r7, pc}
    1b4c:	00001a9d 	.word	0x00001a9d
    1b50:	20000000 	.word	0x20000000
    1b54:	00002b28 	.word	0x00002b28
    1b58:	000012f1 	.word	0x000012f1

00001b5c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b084      	sub	sp, #16
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1b64:	6878      	ldr	r0, [r7, #4]
    1b66:	4b61      	ldr	r3, [pc, #388]	; (1cec <_usart_init+0x190>)
    1b68:	4798      	blx	r3
    1b6a:	4603      	mov	r3, r0
    1b6c:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1b6e:	2101      	movs	r1, #1
    1b70:	6878      	ldr	r0, [r7, #4]
    1b72:	4b5f      	ldr	r3, [pc, #380]	; (1cf0 <_usart_init+0x194>)
    1b74:	4798      	blx	r3
    1b76:	4603      	mov	r3, r0
    1b78:	f083 0301 	eor.w	r3, r3, #1
    1b7c:	b2db      	uxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d020      	beq.n	1bc4 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1b82:	7bfa      	ldrb	r2, [r7, #15]
    1b84:	495b      	ldr	r1, [pc, #364]	; (1cf4 <_usart_init+0x198>)
    1b86:	4613      	mov	r3, r2
    1b88:	005b      	lsls	r3, r3, #1
    1b8a:	4413      	add	r3, r2
    1b8c:	00db      	lsls	r3, r3, #3
    1b8e:	440b      	add	r3, r1
    1b90:	3304      	adds	r3, #4
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	f003 031c 	and.w	r3, r3, #28
    1b98:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1b9a:	2102      	movs	r1, #2
    1b9c:	6878      	ldr	r0, [r7, #4]
    1b9e:	4b56      	ldr	r3, [pc, #344]	; (1cf8 <_usart_init+0x19c>)
    1ba0:	4798      	blx	r3
    1ba2:	4603      	mov	r3, r0
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d006      	beq.n	1bb6 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1ba8:	6878      	ldr	r0, [r7, #4]
    1baa:	4b54      	ldr	r3, [pc, #336]	; (1cfc <_usart_init+0x1a0>)
    1bac:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1bae:	2102      	movs	r1, #2
    1bb0:	6878      	ldr	r0, [r7, #4]
    1bb2:	4b53      	ldr	r3, [pc, #332]	; (1d00 <_usart_init+0x1a4>)
    1bb4:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1bb6:	68bb      	ldr	r3, [r7, #8]
    1bb8:	f043 0301 	orr.w	r3, r3, #1
    1bbc:	4619      	mov	r1, r3
    1bbe:	6878      	ldr	r0, [r7, #4]
    1bc0:	4b50      	ldr	r3, [pc, #320]	; (1d04 <_usart_init+0x1a8>)
    1bc2:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1bc4:	2101      	movs	r1, #1
    1bc6:	6878      	ldr	r0, [r7, #4]
    1bc8:	4b4d      	ldr	r3, [pc, #308]	; (1d00 <_usart_init+0x1a4>)
    1bca:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1bcc:	7bfa      	ldrb	r2, [r7, #15]
    1bce:	4949      	ldr	r1, [pc, #292]	; (1cf4 <_usart_init+0x198>)
    1bd0:	4613      	mov	r3, r2
    1bd2:	005b      	lsls	r3, r3, #1
    1bd4:	4413      	add	r3, r2
    1bd6:	00db      	lsls	r3, r3, #3
    1bd8:	440b      	add	r3, r1
    1bda:	3304      	adds	r3, #4
    1bdc:	681b      	ldr	r3, [r3, #0]
    1bde:	4619      	mov	r1, r3
    1be0:	6878      	ldr	r0, [r7, #4]
    1be2:	4b48      	ldr	r3, [pc, #288]	; (1d04 <_usart_init+0x1a8>)
    1be4:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1be6:	7bfa      	ldrb	r2, [r7, #15]
    1be8:	4942      	ldr	r1, [pc, #264]	; (1cf4 <_usart_init+0x198>)
    1bea:	4613      	mov	r3, r2
    1bec:	005b      	lsls	r3, r3, #1
    1bee:	4413      	add	r3, r2
    1bf0:	00db      	lsls	r3, r3, #3
    1bf2:	440b      	add	r3, r1
    1bf4:	3308      	adds	r3, #8
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	4619      	mov	r1, r3
    1bfa:	6878      	ldr	r0, [r7, #4]
    1bfc:	4b42      	ldr	r3, [pc, #264]	; (1d08 <_usart_init+0x1ac>)
    1bfe:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1c00:	7bfa      	ldrb	r2, [r7, #15]
    1c02:	493c      	ldr	r1, [pc, #240]	; (1cf4 <_usart_init+0x198>)
    1c04:	4613      	mov	r3, r2
    1c06:	005b      	lsls	r3, r3, #1
    1c08:	4413      	add	r3, r2
    1c0a:	00db      	lsls	r3, r3, #3
    1c0c:	440b      	add	r3, r1
    1c0e:	330c      	adds	r3, #12
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	4619      	mov	r1, r3
    1c14:	6878      	ldr	r0, [r7, #4]
    1c16:	4b3d      	ldr	r3, [pc, #244]	; (1d0c <_usart_init+0x1b0>)
    1c18:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1c1a:	7bfa      	ldrb	r2, [r7, #15]
    1c1c:	4935      	ldr	r1, [pc, #212]	; (1cf4 <_usart_init+0x198>)
    1c1e:	4613      	mov	r3, r2
    1c20:	005b      	lsls	r3, r3, #1
    1c22:	4413      	add	r3, r2
    1c24:	00db      	lsls	r3, r3, #3
    1c26:	440b      	add	r3, r1
    1c28:	3304      	adds	r3, #4
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1c30:	2b00      	cmp	r3, #0
    1c32:	d10c      	bne.n	1c4e <_usart_init+0xf2>
    1c34:	7bfa      	ldrb	r2, [r7, #15]
    1c36:	492f      	ldr	r1, [pc, #188]	; (1cf4 <_usart_init+0x198>)
    1c38:	4613      	mov	r3, r2
    1c3a:	005b      	lsls	r3, r3, #1
    1c3c:	4413      	add	r3, r2
    1c3e:	00db      	lsls	r3, r3, #3
    1c40:	440b      	add	r3, r1
    1c42:	3304      	adds	r3, #4
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d022      	beq.n	1c94 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1c4e:	7bfa      	ldrb	r2, [r7, #15]
    1c50:	4928      	ldr	r1, [pc, #160]	; (1cf4 <_usart_init+0x198>)
    1c52:	4613      	mov	r3, r2
    1c54:	005b      	lsls	r3, r3, #1
    1c56:	4413      	add	r3, r2
    1c58:	00db      	lsls	r3, r3, #3
    1c5a:	440b      	add	r3, r1
    1c5c:	3310      	adds	r3, #16
    1c5e:	881b      	ldrh	r3, [r3, #0]
    1c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1c64:	b299      	uxth	r1, r3
    1c66:	687a      	ldr	r2, [r7, #4]
    1c68:	8993      	ldrh	r3, [r2, #12]
    1c6a:	f361 030c 	bfi	r3, r1, #0, #13
    1c6e:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1c70:	7bfa      	ldrb	r2, [r7, #15]
    1c72:	4920      	ldr	r1, [pc, #128]	; (1cf4 <_usart_init+0x198>)
    1c74:	4613      	mov	r3, r2
    1c76:	005b      	lsls	r3, r3, #1
    1c78:	4413      	add	r3, r2
    1c7a:	00db      	lsls	r3, r3, #3
    1c7c:	440b      	add	r3, r1
    1c7e:	3312      	adds	r3, #18
    1c80:	781b      	ldrb	r3, [r3, #0]
    1c82:	f003 0307 	and.w	r3, r3, #7
    1c86:	b2d9      	uxtb	r1, r3
    1c88:	687a      	ldr	r2, [r7, #4]
    1c8a:	8993      	ldrh	r3, [r2, #12]
    1c8c:	f361 334f 	bfi	r3, r1, #13, #3
    1c90:	8193      	strh	r3, [r2, #12]
    1c92:	e00c      	b.n	1cae <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1c94:	7bfa      	ldrb	r2, [r7, #15]
    1c96:	4917      	ldr	r1, [pc, #92]	; (1cf4 <_usart_init+0x198>)
    1c98:	4613      	mov	r3, r2
    1c9a:	005b      	lsls	r3, r3, #1
    1c9c:	4413      	add	r3, r2
    1c9e:	00db      	lsls	r3, r3, #3
    1ca0:	440b      	add	r3, r1
    1ca2:	3310      	adds	r3, #16
    1ca4:	881b      	ldrh	r3, [r3, #0]
    1ca6:	4619      	mov	r1, r3
    1ca8:	6878      	ldr	r0, [r7, #4]
    1caa:	4b19      	ldr	r3, [pc, #100]	; (1d10 <_usart_init+0x1b4>)
    1cac:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1cae:	7bfa      	ldrb	r2, [r7, #15]
    1cb0:	4910      	ldr	r1, [pc, #64]	; (1cf4 <_usart_init+0x198>)
    1cb2:	4613      	mov	r3, r2
    1cb4:	005b      	lsls	r3, r3, #1
    1cb6:	4413      	add	r3, r2
    1cb8:	00db      	lsls	r3, r3, #3
    1cba:	440b      	add	r3, r1
    1cbc:	3313      	adds	r3, #19
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	4619      	mov	r1, r3
    1cc2:	6878      	ldr	r0, [r7, #4]
    1cc4:	4b13      	ldr	r3, [pc, #76]	; (1d14 <_usart_init+0x1b8>)
    1cc6:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1cc8:	7bfa      	ldrb	r2, [r7, #15]
    1cca:	490a      	ldr	r1, [pc, #40]	; (1cf4 <_usart_init+0x198>)
    1ccc:	4613      	mov	r3, r2
    1cce:	005b      	lsls	r3, r3, #1
    1cd0:	4413      	add	r3, r2
    1cd2:	00db      	lsls	r3, r3, #3
    1cd4:	440b      	add	r3, r1
    1cd6:	3314      	adds	r3, #20
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	4619      	mov	r1, r3
    1cdc:	6878      	ldr	r0, [r7, #4]
    1cde:	4b0e      	ldr	r3, [pc, #56]	; (1d18 <_usart_init+0x1bc>)
    1ce0:	4798      	blx	r3

	return ERR_NONE;
    1ce2:	2300      	movs	r3, #0
}
    1ce4:	4618      	mov	r0, r3
    1ce6:	3710      	adds	r7, #16
    1ce8:	46bd      	mov	sp, r7
    1cea:	bd80      	pop	{r7, pc}
    1cec:	00001af9 	.word	0x00001af9
    1cf0:	000017bd 	.word	0x000017bd
    1cf4:	20000000 	.word	0x20000000
    1cf8:	00001889 	.word	0x00001889
    1cfc:	00001861 	.word	0x00001861
    1d00:	00001799 	.word	0x00001799
    1d04:	000018b9 	.word	0x000018b9
    1d08:	000018dd 	.word	0x000018dd
    1d0c:	00001901 	.word	0x00001901
    1d10:	0000191d 	.word	0x0000191d
    1d14:	0000193b 	.word	0x0000193b
    1d18:	0000198d 	.word	0x0000198d

00001d1c <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1d1c:	b480      	push	{r7}
    1d1e:	b083      	sub	sp, #12
    1d20:	af00      	add	r7, sp, #0
    1d22:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1d24:	4b06      	ldr	r3, [pc, #24]	; (1d40 <_system_time_init+0x24>)
    1d26:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d2a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1d2c:	4b04      	ldr	r3, [pc, #16]	; (1d40 <_system_time_init+0x24>)
    1d2e:	2205      	movs	r2, #5
    1d30:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1d32:	bf00      	nop
    1d34:	370c      	adds	r7, #12
    1d36:	46bd      	mov	sp, r7
    1d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d3c:	4770      	bx	lr
    1d3e:	bf00      	nop
    1d40:	e000e010 	.word	0xe000e010

00001d44 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    1d4c:	6878      	ldr	r0, [r7, #4]
    1d4e:	4b03      	ldr	r3, [pc, #12]	; (1d5c <_delay_init+0x18>)
    1d50:	4798      	blx	r3
}
    1d52:	bf00      	nop
    1d54:	3708      	adds	r7, #8
    1d56:	46bd      	mov	sp, r7
    1d58:	bd80      	pop	{r7, pc}
    1d5a:	bf00      	nop
    1d5c:	00001d1d 	.word	0x00001d1d

00001d60 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    1d68:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d6a:	bf00      	nop
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	689a      	ldr	r2, [r3, #8]
    1d70:	683b      	ldr	r3, [r7, #0]
    1d72:	4013      	ands	r3, r2
    1d74:	2b00      	cmp	r3, #0
    1d76:	d1f9      	bne.n	1d6c <hri_tcc_wait_for_sync+0xc>
	};
}
    1d78:	bf00      	nop
    1d7a:	370c      	adds	r7, #12
    1d7c:	46bd      	mov	sp, r7
    1d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d82:	4770      	bx	lr

00001d84 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1d84:	b480      	push	{r7}
    1d86:	b083      	sub	sp, #12
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
    1d8c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	689a      	ldr	r2, [r3, #8]
    1d92:	683b      	ldr	r3, [r7, #0]
    1d94:	4013      	ands	r3, r2
    1d96:	2b00      	cmp	r3, #0
    1d98:	bf14      	ite	ne
    1d9a:	2301      	movne	r3, #1
    1d9c:	2300      	moveq	r3, #0
    1d9e:	b2db      	uxtb	r3, r3
}
    1da0:	4618      	mov	r0, r3
    1da2:	370c      	adds	r7, #12
    1da4:	46bd      	mov	sp, r7
    1da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1daa:	4770      	bx	lr

00001dac <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b084      	sub	sp, #16
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
    1db4:	460b      	mov	r3, r1
    1db6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	681b      	ldr	r3, [r3, #0]
    1dbc:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	f023 0302 	bic.w	r3, r3, #2
    1dc4:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    1dc6:	78fb      	ldrb	r3, [r7, #3]
    1dc8:	005b      	lsls	r3, r3, #1
    1dca:	461a      	mov	r2, r3
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	4313      	orrs	r3, r2
    1dd0:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	68fa      	ldr	r2, [r7, #12]
    1dd6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1dd8:	2103      	movs	r1, #3
    1dda:	6878      	ldr	r0, [r7, #4]
    1ddc:	4b02      	ldr	r3, [pc, #8]	; (1de8 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    1dde:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1de0:	bf00      	nop
    1de2:	3710      	adds	r7, #16
    1de4:	46bd      	mov	sp, r7
    1de6:	bd80      	pop	{r7, pc}
    1de8:	00001d61 	.word	0x00001d61

00001dec <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1dec:	b580      	push	{r7, lr}
    1dee:	b082      	sub	sp, #8
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	f023 0202 	bic.w	r2, r3, #2
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1e00:	2103      	movs	r1, #3
    1e02:	6878      	ldr	r0, [r7, #4]
    1e04:	4b02      	ldr	r3, [pc, #8]	; (1e10 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    1e06:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1e08:	bf00      	nop
    1e0a:	3708      	adds	r7, #8
    1e0c:	46bd      	mov	sp, r7
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	00001d61 	.word	0x00001d61

00001e14 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b084      	sub	sp, #16
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1e1e:	2103      	movs	r1, #3
    1e20:	6878      	ldr	r0, [r7, #4]
    1e22:	4b07      	ldr	r3, [pc, #28]	; (1e40 <hri_tcc_get_CTRLA_reg+0x2c>)
    1e24:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1e2c:	68fa      	ldr	r2, [r7, #12]
    1e2e:	683b      	ldr	r3, [r7, #0]
    1e30:	4013      	ands	r3, r2
    1e32:	60fb      	str	r3, [r7, #12]
	return tmp;
    1e34:	68fb      	ldr	r3, [r7, #12]
}
    1e36:	4618      	mov	r0, r3
    1e38:	3710      	adds	r7, #16
    1e3a:	46bd      	mov	sp, r7
    1e3c:	bd80      	pop	{r7, pc}
    1e3e:	bf00      	nop
    1e40:	00001d61 	.word	0x00001d61

00001e44 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b082      	sub	sp, #8
    1e48:	af00      	add	r7, sp, #0
    1e4a:	6078      	str	r0, [r7, #4]
    1e4c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	683a      	ldr	r2, [r7, #0]
    1e52:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1e54:	2103      	movs	r1, #3
    1e56:	6878      	ldr	r0, [r7, #4]
    1e58:	4b02      	ldr	r3, [pc, #8]	; (1e64 <hri_tcc_write_CTRLA_reg+0x20>)
    1e5a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1e5c:	bf00      	nop
    1e5e:	3708      	adds	r7, #8
    1e60:	46bd      	mov	sp, r7
    1e62:	bd80      	pop	{r7, pc}
    1e64:	00001d61 	.word	0x00001d61

00001e68 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b082      	sub	sp, #8
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	6078      	str	r0, [r7, #4]
    1e70:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	683a      	ldr	r2, [r7, #0]
    1e76:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    1e78:	f643 71ff 	movw	r1, #16383	; 0x3fff
    1e7c:	6878      	ldr	r0, [r7, #4]
    1e7e:	4b03      	ldr	r3, [pc, #12]	; (1e8c <hri_tcc_write_WAVE_reg+0x24>)
    1e80:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1e82:	bf00      	nop
    1e84:	3708      	adds	r7, #8
    1e86:	46bd      	mov	sp, r7
    1e88:	bd80      	pop	{r7, pc}
    1e8a:	bf00      	nop
    1e8c:	00001d61 	.word	0x00001d61

00001e90 <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    1e90:	b580      	push	{r7, lr}
    1e92:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    1e94:	2101      	movs	r1, #1
    1e96:	4817      	ldr	r0, [pc, #92]	; (1ef4 <PWM_0_init+0x64>)
    1e98:	4b17      	ldr	r3, [pc, #92]	; (1ef8 <PWM_0_init+0x68>)
    1e9a:	4798      	blx	r3
    1e9c:	4603      	mov	r3, r0
    1e9e:	f083 0301 	eor.w	r3, r3, #1
    1ea2:	b2db      	uxtb	r3, r3
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d011      	beq.n	1ecc <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    1ea8:	2102      	movs	r1, #2
    1eaa:	4812      	ldr	r0, [pc, #72]	; (1ef4 <PWM_0_init+0x64>)
    1eac:	4b13      	ldr	r3, [pc, #76]	; (1efc <PWM_0_init+0x6c>)
    1eae:	4798      	blx	r3
    1eb0:	4603      	mov	r3, r0
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d006      	beq.n	1ec4 <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    1eb6:	480f      	ldr	r0, [pc, #60]	; (1ef4 <PWM_0_init+0x64>)
    1eb8:	4b11      	ldr	r3, [pc, #68]	; (1f00 <PWM_0_init+0x70>)
    1eba:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    1ebc:	2102      	movs	r1, #2
    1ebe:	480d      	ldr	r0, [pc, #52]	; (1ef4 <PWM_0_init+0x64>)
    1ec0:	4b10      	ldr	r3, [pc, #64]	; (1f04 <PWM_0_init+0x74>)
    1ec2:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    1ec4:	2101      	movs	r1, #1
    1ec6:	480b      	ldr	r0, [pc, #44]	; (1ef4 <PWM_0_init+0x64>)
    1ec8:	4b0f      	ldr	r3, [pc, #60]	; (1f08 <PWM_0_init+0x78>)
    1eca:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    1ecc:	2101      	movs	r1, #1
    1ece:	4809      	ldr	r0, [pc, #36]	; (1ef4 <PWM_0_init+0x64>)
    1ed0:	4b0c      	ldr	r3, [pc, #48]	; (1f04 <PWM_0_init+0x74>)
    1ed2:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    1ed4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1ed8:	4806      	ldr	r0, [pc, #24]	; (1ef4 <PWM_0_init+0x64>)
    1eda:	4b0b      	ldr	r3, [pc, #44]	; (1f08 <PWM_0_init+0x78>)
    1edc:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    1ede:	2102      	movs	r1, #2
    1ee0:	4804      	ldr	r0, [pc, #16]	; (1ef4 <PWM_0_init+0x64>)
    1ee2:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <PWM_0_init+0x7c>)
    1ee4:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    1ee6:	2101      	movs	r1, #1
    1ee8:	4802      	ldr	r0, [pc, #8]	; (1ef4 <PWM_0_init+0x64>)
    1eea:	4b09      	ldr	r3, [pc, #36]	; (1f10 <PWM_0_init+0x80>)
    1eec:	4798      	blx	r3

	return 0;
    1eee:	2300      	movs	r3, #0
}
    1ef0:	4618      	mov	r0, r3
    1ef2:	bd80      	pop	{r7, pc}
    1ef4:	41016000 	.word	0x41016000
    1ef8:	00001d85 	.word	0x00001d85
    1efc:	00001e15 	.word	0x00001e15
    1f00:	00001ded 	.word	0x00001ded
    1f04:	00001d61 	.word	0x00001d61
    1f08:	00001e45 	.word	0x00001e45
    1f0c:	00001e69 	.word	0x00001e69
    1f10:	00001dad 	.word	0x00001dad

00001f14 <__NVIC_EnableIRQ>:
{
    1f14:	b480      	push	{r7}
    1f16:	b083      	sub	sp, #12
    1f18:	af00      	add	r7, sp, #0
    1f1a:	4603      	mov	r3, r0
    1f1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1f22:	2b00      	cmp	r3, #0
    1f24:	db0b      	blt.n	1f3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f26:	4909      	ldr	r1, [pc, #36]	; (1f4c <__NVIC_EnableIRQ+0x38>)
    1f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1f2c:	095b      	lsrs	r3, r3, #5
    1f2e:	88fa      	ldrh	r2, [r7, #6]
    1f30:	f002 021f 	and.w	r2, r2, #31
    1f34:	2001      	movs	r0, #1
    1f36:	fa00 f202 	lsl.w	r2, r0, r2
    1f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1f3e:	bf00      	nop
    1f40:	370c      	adds	r7, #12
    1f42:	46bd      	mov	sp, r7
    1f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f48:	4770      	bx	lr
    1f4a:	bf00      	nop
    1f4c:	e000e100 	.word	0xe000e100

00001f50 <__NVIC_DisableIRQ>:
{
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	4603      	mov	r3, r0
    1f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1f5e:	2b00      	cmp	r3, #0
    1f60:	db10      	blt.n	1f84 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f62:	490b      	ldr	r1, [pc, #44]	; (1f90 <__NVIC_DisableIRQ+0x40>)
    1f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1f68:	095b      	lsrs	r3, r3, #5
    1f6a:	88fa      	ldrh	r2, [r7, #6]
    1f6c:	f002 021f 	and.w	r2, r2, #31
    1f70:	2001      	movs	r0, #1
    1f72:	fa00 f202 	lsl.w	r2, r0, r2
    1f76:	3320      	adds	r3, #32
    1f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f80:	f3bf 8f6f 	isb	sy
}
    1f84:	bf00      	nop
    1f86:	370c      	adds	r7, #12
    1f88:	46bd      	mov	sp, r7
    1f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8e:	4770      	bx	lr
    1f90:	e000e100 	.word	0xe000e100

00001f94 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1f94:	b480      	push	{r7}
    1f96:	b083      	sub	sp, #12
    1f98:	af00      	add	r7, sp, #0
    1f9a:	4603      	mov	r3, r0
    1f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	db0c      	blt.n	1fc0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fa6:	4909      	ldr	r1, [pc, #36]	; (1fcc <__NVIC_ClearPendingIRQ+0x38>)
    1fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1fac:	095b      	lsrs	r3, r3, #5
    1fae:	88fa      	ldrh	r2, [r7, #6]
    1fb0:	f002 021f 	and.w	r2, r2, #31
    1fb4:	2001      	movs	r0, #1
    1fb6:	fa00 f202 	lsl.w	r2, r0, r2
    1fba:	3360      	adds	r3, #96	; 0x60
    1fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1fc0:	bf00      	nop
    1fc2:	370c      	adds	r7, #12
    1fc4:	46bd      	mov	sp, r7
    1fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fca:	4770      	bx	lr
    1fcc:	e000e100 	.word	0xe000e100

00001fd0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    1fd0:	b480      	push	{r7}
    1fd2:	b083      	sub	sp, #12
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	6078      	str	r0, [r7, #4]
    1fd8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fda:	bf00      	nop
    1fdc:	687b      	ldr	r3, [r7, #4]
    1fde:	691a      	ldr	r2, [r3, #16]
    1fe0:	683b      	ldr	r3, [r7, #0]
    1fe2:	4013      	ands	r3, r2
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d1f9      	bne.n	1fdc <hri_tc_wait_for_sync+0xc>
	};
}
    1fe8:	bf00      	nop
    1fea:	370c      	adds	r7, #12
    1fec:	46bd      	mov	sp, r7
    1fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ff2:	4770      	bx	lr

00001ff4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    1ff4:	b480      	push	{r7}
    1ff6:	b083      	sub	sp, #12
    1ff8:	af00      	add	r7, sp, #0
    1ffa:	6078      	str	r0, [r7, #4]
    1ffc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1ffe:	687b      	ldr	r3, [r7, #4]
    2000:	691a      	ldr	r2, [r3, #16]
    2002:	683b      	ldr	r3, [r7, #0]
    2004:	4013      	ands	r3, r2
    2006:	2b00      	cmp	r3, #0
    2008:	bf14      	ite	ne
    200a:	2301      	movne	r3, #1
    200c:	2300      	moveq	r3, #0
    200e:	b2db      	uxtb	r3, r3
}
    2010:	4618      	mov	r0, r3
    2012:	370c      	adds	r7, #12
    2014:	46bd      	mov	sp, r7
    2016:	f85d 7b04 	ldr.w	r7, [sp], #4
    201a:	4770      	bx	lr

0000201c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    201c:	b480      	push	{r7}
    201e:	b083      	sub	sp, #12
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2024:	687b      	ldr	r3, [r7, #4]
    2026:	7a9b      	ldrb	r3, [r3, #10]
    2028:	b2db      	uxtb	r3, r3
    202a:	f003 0301 	and.w	r3, r3, #1
    202e:	2b00      	cmp	r3, #0
    2030:	bf14      	ite	ne
    2032:	2301      	movne	r3, #1
    2034:	2300      	moveq	r3, #0
    2036:	b2db      	uxtb	r3, r3
}
    2038:	4618      	mov	r0, r3
    203a:	370c      	adds	r7, #12
    203c:	46bd      	mov	sp, r7
    203e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2042:	4770      	bx	lr

00002044 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    2044:	b480      	push	{r7}
    2046:	b083      	sub	sp, #12
    2048:	af00      	add	r7, sp, #0
    204a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    204c:	687b      	ldr	r3, [r7, #4]
    204e:	2201      	movs	r2, #1
    2050:	729a      	strb	r2, [r3, #10]
}
    2052:	bf00      	nop
    2054:	370c      	adds	r7, #12
    2056:	46bd      	mov	sp, r7
    2058:	f85d 7b04 	ldr.w	r7, [sp], #4
    205c:	4770      	bx	lr

0000205e <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    205e:	b480      	push	{r7}
    2060:	b083      	sub	sp, #12
    2062:	af00      	add	r7, sp, #0
    2064:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	2201      	movs	r2, #1
    206a:	725a      	strb	r2, [r3, #9]
}
    206c:	bf00      	nop
    206e:	370c      	adds	r7, #12
    2070:	46bd      	mov	sp, r7
    2072:	f85d 7b04 	ldr.w	r7, [sp], #4
    2076:	4770      	bx	lr

00002078 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2078:	b580      	push	{r7, lr}
    207a:	b082      	sub	sp, #8
    207c:	af00      	add	r7, sp, #0
    207e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	f043 0202 	orr.w	r2, r3, #2
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    208c:	2103      	movs	r1, #3
    208e:	6878      	ldr	r0, [r7, #4]
    2090:	4b02      	ldr	r3, [pc, #8]	; (209c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    2092:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2094:	bf00      	nop
    2096:	3708      	adds	r7, #8
    2098:	46bd      	mov	sp, r7
    209a:	bd80      	pop	{r7, pc}
    209c:	00001fd1 	.word	0x00001fd1

000020a0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b084      	sub	sp, #16
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    20a8:	2103      	movs	r1, #3
    20aa:	6878      	ldr	r0, [r7, #4]
    20ac:	4b09      	ldr	r3, [pc, #36]	; (20d4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    20ae:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    20b0:	687b      	ldr	r3, [r7, #4]
    20b2:	681b      	ldr	r3, [r3, #0]
    20b4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    20b6:	68fb      	ldr	r3, [r7, #12]
    20b8:	085b      	lsrs	r3, r3, #1
    20ba:	f003 0301 	and.w	r3, r3, #1
    20be:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	2b00      	cmp	r3, #0
    20c4:	bf14      	ite	ne
    20c6:	2301      	movne	r3, #1
    20c8:	2300      	moveq	r3, #0
    20ca:	b2db      	uxtb	r3, r3
}
    20cc:	4618      	mov	r0, r3
    20ce:	3710      	adds	r7, #16
    20d0:	46bd      	mov	sp, r7
    20d2:	bd80      	pop	{r7, pc}
    20d4:	00001fd1 	.word	0x00001fd1

000020d8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    20d8:	b580      	push	{r7, lr}
    20da:	b082      	sub	sp, #8
    20dc:	af00      	add	r7, sp, #0
    20de:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	681b      	ldr	r3, [r3, #0]
    20e4:	f023 0202 	bic.w	r2, r3, #2
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    20ec:	2103      	movs	r1, #3
    20ee:	6878      	ldr	r0, [r7, #4]
    20f0:	4b02      	ldr	r3, [pc, #8]	; (20fc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    20f2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    20f4:	bf00      	nop
    20f6:	3708      	adds	r7, #8
    20f8:	46bd      	mov	sp, r7
    20fa:	bd80      	pop	{r7, pc}
    20fc:	00001fd1 	.word	0x00001fd1

00002100 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    2100:	b580      	push	{r7, lr}
    2102:	b084      	sub	sp, #16
    2104:	af00      	add	r7, sp, #0
    2106:	6078      	str	r0, [r7, #4]
    2108:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    210a:	2103      	movs	r1, #3
    210c:	6878      	ldr	r0, [r7, #4]
    210e:	4b07      	ldr	r3, [pc, #28]	; (212c <hri_tc_get_CTRLA_reg+0x2c>)
    2110:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2118:	68fa      	ldr	r2, [r7, #12]
    211a:	683b      	ldr	r3, [r7, #0]
    211c:	4013      	ands	r3, r2
    211e:	60fb      	str	r3, [r7, #12]
	return tmp;
    2120:	68fb      	ldr	r3, [r7, #12]
}
    2122:	4618      	mov	r0, r3
    2124:	3710      	adds	r7, #16
    2126:	46bd      	mov	sp, r7
    2128:	bd80      	pop	{r7, pc}
    212a:	bf00      	nop
    212c:	00001fd1 	.word	0x00001fd1

00002130 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	6078      	str	r0, [r7, #4]
    2138:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	683a      	ldr	r2, [r7, #0]
    213e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    2140:	2103      	movs	r1, #3
    2142:	6878      	ldr	r0, [r7, #4]
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <hri_tc_write_CTRLA_reg+0x20>)
    2146:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2148:	bf00      	nop
    214a:	3708      	adds	r7, #8
    214c:	46bd      	mov	sp, r7
    214e:	bd80      	pop	{r7, pc}
    2150:	00001fd1 	.word	0x00001fd1

00002154 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    2154:	b480      	push	{r7}
    2156:	b083      	sub	sp, #12
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	460b      	mov	r3, r1
    215e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	887a      	ldrh	r2, [r7, #2]
    2164:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    2166:	bf00      	nop
    2168:	370c      	adds	r7, #12
    216a:	46bd      	mov	sp, r7
    216c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2170:	4770      	bx	lr

00002172 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    2172:	b480      	push	{r7}
    2174:	b083      	sub	sp, #12
    2176:	af00      	add	r7, sp, #0
    2178:	6078      	str	r0, [r7, #4]
    217a:	460b      	mov	r3, r1
    217c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	78fa      	ldrb	r2, [r7, #3]
    2182:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    2184:	bf00      	nop
    2186:	370c      	adds	r7, #12
    2188:	46bd      	mov	sp, r7
    218a:	f85d 7b04 	ldr.w	r7, [sp], #4
    218e:	4770      	bx	lr

00002190 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    2190:	b480      	push	{r7}
    2192:	b083      	sub	sp, #12
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
    2198:	460b      	mov	r3, r1
    219a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	78fa      	ldrb	r2, [r7, #3]
    21a0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    21a2:	bf00      	nop
    21a4:	370c      	adds	r7, #12
    21a6:	46bd      	mov	sp, r7
    21a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ac:	4770      	bx	lr
	...

000021b0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
    21b8:	460b      	mov	r3, r1
    21ba:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	78fa      	ldrb	r2, [r7, #3]
    21c0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    21c2:	2120      	movs	r1, #32
    21c4:	6878      	ldr	r0, [r7, #4]
    21c6:	4b03      	ldr	r3, [pc, #12]	; (21d4 <hri_tccount8_write_PER_reg+0x24>)
    21c8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    21ca:	bf00      	nop
    21cc:	3708      	adds	r7, #8
    21ce:	46bd      	mov	sp, r7
    21d0:	bd80      	pop	{r7, pc}
    21d2:	bf00      	nop
    21d4:	00001fd1 	.word	0x00001fd1

000021d8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    21d8:	b580      	push	{r7, lr}
    21da:	b082      	sub	sp, #8
    21dc:	af00      	add	r7, sp, #0
    21de:	6078      	str	r0, [r7, #4]
    21e0:	460b      	mov	r3, r1
    21e2:	70fb      	strb	r3, [r7, #3]
    21e4:	4613      	mov	r3, r2
    21e6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    21e8:	78fb      	ldrb	r3, [r7, #3]
    21ea:	687a      	ldr	r2, [r7, #4]
    21ec:	4413      	add	r3, r2
    21ee:	78ba      	ldrb	r2, [r7, #2]
    21f0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    21f2:	21c0      	movs	r1, #192	; 0xc0
    21f4:	6878      	ldr	r0, [r7, #4]
    21f6:	4b03      	ldr	r3, [pc, #12]	; (2204 <hri_tccount8_write_CC_reg+0x2c>)
    21f8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    21fa:	bf00      	nop
    21fc:	3708      	adds	r7, #8
    21fe:	46bd      	mov	sp, r7
    2200:	bd80      	pop	{r7, pc}
    2202:	bf00      	nop
    2204:	00001fd1 	.word	0x00001fd1

00002208 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    2208:	b580      	push	{r7, lr}
    220a:	b082      	sub	sp, #8
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
    2210:	460b      	mov	r3, r1
    2212:	70fb      	strb	r3, [r7, #3]
    2214:	4613      	mov	r3, r2
    2216:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2218:	78fb      	ldrb	r3, [r7, #3]
    221a:	687a      	ldr	r2, [r7, #4]
    221c:	330c      	adds	r3, #12
    221e:	005b      	lsls	r3, r3, #1
    2220:	4413      	add	r3, r2
    2222:	883a      	ldrh	r2, [r7, #0]
    2224:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2226:	21c0      	movs	r1, #192	; 0xc0
    2228:	6878      	ldr	r0, [r7, #4]
    222a:	4b03      	ldr	r3, [pc, #12]	; (2238 <hri_tccount16_write_CC_reg+0x30>)
    222c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    222e:	bf00      	nop
    2230:	3708      	adds	r7, #8
    2232:	46bd      	mov	sp, r7
    2234:	bd80      	pop	{r7, pc}
    2236:	bf00      	nop
    2238:	00001fd1 	.word	0x00001fd1

0000223c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    223c:	b580      	push	{r7, lr}
    223e:	b084      	sub	sp, #16
    2240:	af00      	add	r7, sp, #0
    2242:	60f8      	str	r0, [r7, #12]
    2244:	460b      	mov	r3, r1
    2246:	607a      	str	r2, [r7, #4]
    2248:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    224a:	7afb      	ldrb	r3, [r7, #11]
    224c:	68fa      	ldr	r2, [r7, #12]
    224e:	3306      	adds	r3, #6
    2250:	009b      	lsls	r3, r3, #2
    2252:	4413      	add	r3, r2
    2254:	687a      	ldr	r2, [r7, #4]
    2256:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2258:	21c0      	movs	r1, #192	; 0xc0
    225a:	68f8      	ldr	r0, [r7, #12]
    225c:	4b02      	ldr	r3, [pc, #8]	; (2268 <hri_tccount32_write_CC_reg+0x2c>)
    225e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2260:	bf00      	nop
    2262:	3710      	adds	r7, #16
    2264:	46bd      	mov	sp, r7
    2266:	bd80      	pop	{r7, pc}
    2268:	00001fd1 	.word	0x00001fd1

0000226c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
    2274:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    2276:	6838      	ldr	r0, [r7, #0]
    2278:	4b93      	ldr	r3, [pc, #588]	; (24c8 <_timer_init+0x25c>)
    227a:	4798      	blx	r3
    227c:	4603      	mov	r3, r0
    227e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	683a      	ldr	r2, [r7, #0]
    2284:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2286:	228f      	movs	r2, #143	; 0x8f
    2288:	4990      	ldr	r1, [pc, #576]	; (24cc <_timer_init+0x260>)
    228a:	2001      	movs	r0, #1
    228c:	4b90      	ldr	r3, [pc, #576]	; (24d0 <_timer_init+0x264>)
    228e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2290:	2101      	movs	r1, #1
    2292:	6838      	ldr	r0, [r7, #0]
    2294:	4b8f      	ldr	r3, [pc, #572]	; (24d4 <_timer_init+0x268>)
    2296:	4798      	blx	r3
    2298:	4603      	mov	r3, r0
    229a:	f083 0301 	eor.w	r3, r3, #1
    229e:	b2db      	uxtb	r3, r3
    22a0:	2b00      	cmp	r3, #0
    22a2:	d011      	beq.n	22c8 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    22a4:	2102      	movs	r1, #2
    22a6:	6838      	ldr	r0, [r7, #0]
    22a8:	4b8b      	ldr	r3, [pc, #556]	; (24d8 <_timer_init+0x26c>)
    22aa:	4798      	blx	r3
    22ac:	4603      	mov	r3, r0
    22ae:	2b00      	cmp	r3, #0
    22b0:	d006      	beq.n	22c0 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    22b2:	6838      	ldr	r0, [r7, #0]
    22b4:	4b89      	ldr	r3, [pc, #548]	; (24dc <_timer_init+0x270>)
    22b6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    22b8:	2102      	movs	r1, #2
    22ba:	6838      	ldr	r0, [r7, #0]
    22bc:	4b88      	ldr	r3, [pc, #544]	; (24e0 <_timer_init+0x274>)
    22be:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    22c0:	2101      	movs	r1, #1
    22c2:	6838      	ldr	r0, [r7, #0]
    22c4:	4b87      	ldr	r3, [pc, #540]	; (24e4 <_timer_init+0x278>)
    22c6:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    22c8:	2101      	movs	r1, #1
    22ca:	6838      	ldr	r0, [r7, #0]
    22cc:	4b84      	ldr	r3, [pc, #528]	; (24e0 <_timer_init+0x274>)
    22ce:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    22d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    22d4:	4984      	ldr	r1, [pc, #528]	; (24e8 <_timer_init+0x27c>)
    22d6:	4613      	mov	r3, r2
    22d8:	009b      	lsls	r3, r3, #2
    22da:	4413      	add	r3, r2
    22dc:	009b      	lsls	r3, r3, #2
    22de:	440b      	add	r3, r1
    22e0:	3304      	adds	r3, #4
    22e2:	681b      	ldr	r3, [r3, #0]
    22e4:	4619      	mov	r1, r3
    22e6:	6838      	ldr	r0, [r7, #0]
    22e8:	4b7e      	ldr	r3, [pc, #504]	; (24e4 <_timer_init+0x278>)
    22ea:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    22ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    22f0:	497d      	ldr	r1, [pc, #500]	; (24e8 <_timer_init+0x27c>)
    22f2:	4613      	mov	r3, r2
    22f4:	009b      	lsls	r3, r3, #2
    22f6:	4413      	add	r3, r2
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	440b      	add	r3, r1
    22fc:	330a      	adds	r3, #10
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	4619      	mov	r1, r3
    2302:	6838      	ldr	r0, [r7, #0]
    2304:	4b79      	ldr	r3, [pc, #484]	; (24ec <_timer_init+0x280>)
    2306:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2308:	f997 200f 	ldrsb.w	r2, [r7, #15]
    230c:	4976      	ldr	r1, [pc, #472]	; (24e8 <_timer_init+0x27c>)
    230e:	4613      	mov	r3, r2
    2310:	009b      	lsls	r3, r3, #2
    2312:	4413      	add	r3, r2
    2314:	009b      	lsls	r3, r3, #2
    2316:	440b      	add	r3, r1
    2318:	3308      	adds	r3, #8
    231a:	881b      	ldrh	r3, [r3, #0]
    231c:	4619      	mov	r1, r3
    231e:	6838      	ldr	r0, [r7, #0]
    2320:	4b73      	ldr	r3, [pc, #460]	; (24f0 <_timer_init+0x284>)
    2322:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    2324:	2101      	movs	r1, #1
    2326:	6838      	ldr	r0, [r7, #0]
    2328:	4b72      	ldr	r3, [pc, #456]	; (24f4 <_timer_init+0x288>)
    232a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    232c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2330:	496d      	ldr	r1, [pc, #436]	; (24e8 <_timer_init+0x27c>)
    2332:	4613      	mov	r3, r2
    2334:	009b      	lsls	r3, r3, #2
    2336:	4413      	add	r3, r2
    2338:	009b      	lsls	r3, r3, #2
    233a:	440b      	add	r3, r1
    233c:	3304      	adds	r3, #4
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	f003 030c 	and.w	r3, r3, #12
    2344:	2b08      	cmp	r3, #8
    2346:	d11e      	bne.n	2386 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2348:	f997 200f 	ldrsb.w	r2, [r7, #15]
    234c:	4966      	ldr	r1, [pc, #408]	; (24e8 <_timer_init+0x27c>)
    234e:	4613      	mov	r3, r2
    2350:	009b      	lsls	r3, r3, #2
    2352:	4413      	add	r3, r2
    2354:	009b      	lsls	r3, r3, #2
    2356:	440b      	add	r3, r1
    2358:	330c      	adds	r3, #12
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	461a      	mov	r2, r3
    235e:	2100      	movs	r1, #0
    2360:	6838      	ldr	r0, [r7, #0]
    2362:	4b65      	ldr	r3, [pc, #404]	; (24f8 <_timer_init+0x28c>)
    2364:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2366:	f997 200f 	ldrsb.w	r2, [r7, #15]
    236a:	495f      	ldr	r1, [pc, #380]	; (24e8 <_timer_init+0x27c>)
    236c:	4613      	mov	r3, r2
    236e:	009b      	lsls	r3, r3, #2
    2370:	4413      	add	r3, r2
    2372:	009b      	lsls	r3, r3, #2
    2374:	440b      	add	r3, r1
    2376:	3310      	adds	r3, #16
    2378:	681b      	ldr	r3, [r3, #0]
    237a:	461a      	mov	r2, r3
    237c:	2101      	movs	r1, #1
    237e:	6838      	ldr	r0, [r7, #0]
    2380:	4b5d      	ldr	r3, [pc, #372]	; (24f8 <_timer_init+0x28c>)
    2382:	4798      	blx	r3
    2384:	e06a      	b.n	245c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2386:	f997 200f 	ldrsb.w	r2, [r7, #15]
    238a:	4957      	ldr	r1, [pc, #348]	; (24e8 <_timer_init+0x27c>)
    238c:	4613      	mov	r3, r2
    238e:	009b      	lsls	r3, r3, #2
    2390:	4413      	add	r3, r2
    2392:	009b      	lsls	r3, r3, #2
    2394:	440b      	add	r3, r1
    2396:	3304      	adds	r3, #4
    2398:	681b      	ldr	r3, [r3, #0]
    239a:	f003 030c 	and.w	r3, r3, #12
    239e:	2b00      	cmp	r3, #0
    23a0:	d120      	bne.n	23e4 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    23a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    23a6:	4950      	ldr	r1, [pc, #320]	; (24e8 <_timer_init+0x27c>)
    23a8:	4613      	mov	r3, r2
    23aa:	009b      	lsls	r3, r3, #2
    23ac:	4413      	add	r3, r2
    23ae:	009b      	lsls	r3, r3, #2
    23b0:	440b      	add	r3, r1
    23b2:	330c      	adds	r3, #12
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	b29b      	uxth	r3, r3
    23b8:	461a      	mov	r2, r3
    23ba:	2100      	movs	r1, #0
    23bc:	6838      	ldr	r0, [r7, #0]
    23be:	4b4f      	ldr	r3, [pc, #316]	; (24fc <_timer_init+0x290>)
    23c0:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    23c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    23c6:	4948      	ldr	r1, [pc, #288]	; (24e8 <_timer_init+0x27c>)
    23c8:	4613      	mov	r3, r2
    23ca:	009b      	lsls	r3, r3, #2
    23cc:	4413      	add	r3, r2
    23ce:	009b      	lsls	r3, r3, #2
    23d0:	440b      	add	r3, r1
    23d2:	3310      	adds	r3, #16
    23d4:	681b      	ldr	r3, [r3, #0]
    23d6:	b29b      	uxth	r3, r3
    23d8:	461a      	mov	r2, r3
    23da:	2101      	movs	r1, #1
    23dc:	6838      	ldr	r0, [r7, #0]
    23de:	4b47      	ldr	r3, [pc, #284]	; (24fc <_timer_init+0x290>)
    23e0:	4798      	blx	r3
    23e2:	e03b      	b.n	245c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    23e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    23e8:	493f      	ldr	r1, [pc, #252]	; (24e8 <_timer_init+0x27c>)
    23ea:	4613      	mov	r3, r2
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	4413      	add	r3, r2
    23f0:	009b      	lsls	r3, r3, #2
    23f2:	440b      	add	r3, r1
    23f4:	3304      	adds	r3, #4
    23f6:	681b      	ldr	r3, [r3, #0]
    23f8:	f003 030c 	and.w	r3, r3, #12
    23fc:	2b04      	cmp	r3, #4
    23fe:	d12d      	bne.n	245c <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2400:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2404:	4938      	ldr	r1, [pc, #224]	; (24e8 <_timer_init+0x27c>)
    2406:	4613      	mov	r3, r2
    2408:	009b      	lsls	r3, r3, #2
    240a:	4413      	add	r3, r2
    240c:	009b      	lsls	r3, r3, #2
    240e:	440b      	add	r3, r1
    2410:	330c      	adds	r3, #12
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	b2db      	uxtb	r3, r3
    2416:	461a      	mov	r2, r3
    2418:	2100      	movs	r1, #0
    241a:	6838      	ldr	r0, [r7, #0]
    241c:	4b38      	ldr	r3, [pc, #224]	; (2500 <_timer_init+0x294>)
    241e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2420:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2424:	4930      	ldr	r1, [pc, #192]	; (24e8 <_timer_init+0x27c>)
    2426:	4613      	mov	r3, r2
    2428:	009b      	lsls	r3, r3, #2
    242a:	4413      	add	r3, r2
    242c:	009b      	lsls	r3, r3, #2
    242e:	440b      	add	r3, r1
    2430:	3310      	adds	r3, #16
    2432:	681b      	ldr	r3, [r3, #0]
    2434:	b2db      	uxtb	r3, r3
    2436:	461a      	mov	r2, r3
    2438:	2101      	movs	r1, #1
    243a:	6838      	ldr	r0, [r7, #0]
    243c:	4b30      	ldr	r3, [pc, #192]	; (2500 <_timer_init+0x294>)
    243e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2440:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2444:	4928      	ldr	r1, [pc, #160]	; (24e8 <_timer_init+0x27c>)
    2446:	4613      	mov	r3, r2
    2448:	009b      	lsls	r3, r3, #2
    244a:	4413      	add	r3, r2
    244c:	009b      	lsls	r3, r3, #2
    244e:	440b      	add	r3, r1
    2450:	330b      	adds	r3, #11
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	4619      	mov	r1, r3
    2456:	6838      	ldr	r0, [r7, #0]
    2458:	4b2a      	ldr	r3, [pc, #168]	; (2504 <_timer_init+0x298>)
    245a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    245c:	6838      	ldr	r0, [r7, #0]
    245e:	4b2a      	ldr	r3, [pc, #168]	; (2508 <_timer_init+0x29c>)
    2460:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    2462:	6879      	ldr	r1, [r7, #4]
    2464:	6838      	ldr	r0, [r7, #0]
    2466:	4b29      	ldr	r3, [pc, #164]	; (250c <_timer_init+0x2a0>)
    2468:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    246a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    246e:	491e      	ldr	r1, [pc, #120]	; (24e8 <_timer_init+0x27c>)
    2470:	4613      	mov	r3, r2
    2472:	009b      	lsls	r3, r3, #2
    2474:	4413      	add	r3, r2
    2476:	009b      	lsls	r3, r3, #2
    2478:	440b      	add	r3, r1
    247a:	3302      	adds	r3, #2
    247c:	f9b3 3000 	ldrsh.w	r3, [r3]
    2480:	4618      	mov	r0, r3
    2482:	4b23      	ldr	r3, [pc, #140]	; (2510 <_timer_init+0x2a4>)
    2484:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2486:	f997 200f 	ldrsb.w	r2, [r7, #15]
    248a:	4917      	ldr	r1, [pc, #92]	; (24e8 <_timer_init+0x27c>)
    248c:	4613      	mov	r3, r2
    248e:	009b      	lsls	r3, r3, #2
    2490:	4413      	add	r3, r2
    2492:	009b      	lsls	r3, r3, #2
    2494:	440b      	add	r3, r1
    2496:	3302      	adds	r3, #2
    2498:	f9b3 3000 	ldrsh.w	r3, [r3]
    249c:	4618      	mov	r0, r3
    249e:	4b1d      	ldr	r3, [pc, #116]	; (2514 <_timer_init+0x2a8>)
    24a0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    24a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24a6:	4910      	ldr	r1, [pc, #64]	; (24e8 <_timer_init+0x27c>)
    24a8:	4613      	mov	r3, r2
    24aa:	009b      	lsls	r3, r3, #2
    24ac:	4413      	add	r3, r2
    24ae:	009b      	lsls	r3, r3, #2
    24b0:	440b      	add	r3, r1
    24b2:	3302      	adds	r3, #2
    24b4:	f9b3 3000 	ldrsh.w	r3, [r3]
    24b8:	4618      	mov	r0, r3
    24ba:	4b17      	ldr	r3, [pc, #92]	; (2518 <_timer_init+0x2ac>)
    24bc:	4798      	blx	r3

	return ERR_NONE;
    24be:	2300      	movs	r3, #0
}
    24c0:	4618      	mov	r0, r3
    24c2:	3710      	adds	r7, #16
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}
    24c8:	0000263d 	.word	0x0000263d
    24cc:	00002b78 	.word	0x00002b78
    24d0:	000012f1 	.word	0x000012f1
    24d4:	00001ff5 	.word	0x00001ff5
    24d8:	00002101 	.word	0x00002101
    24dc:	000020d9 	.word	0x000020d9
    24e0:	00001fd1 	.word	0x00001fd1
    24e4:	00002131 	.word	0x00002131
    24e8:	20000018 	.word	0x20000018
    24ec:	00002191 	.word	0x00002191
    24f0:	00002155 	.word	0x00002155
    24f4:	00002173 	.word	0x00002173
    24f8:	0000223d 	.word	0x0000223d
    24fc:	00002209 	.word	0x00002209
    2500:	000021d9 	.word	0x000021d9
    2504:	000021b1 	.word	0x000021b1
    2508:	0000205f 	.word	0x0000205f
    250c:	000026a5 	.word	0x000026a5
    2510:	00001f51 	.word	0x00001f51
    2514:	00001f95 	.word	0x00001f95
    2518:	00001f15 	.word	0x00001f15

0000251c <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    251c:	b580      	push	{r7, lr}
    251e:	b082      	sub	sp, #8
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	68db      	ldr	r3, [r3, #12]
    2528:	4618      	mov	r0, r3
    252a:	4b03      	ldr	r3, [pc, #12]	; (2538 <_timer_start+0x1c>)
    252c:	4798      	blx	r3
}
    252e:	bf00      	nop
    2530:	3708      	adds	r7, #8
    2532:	46bd      	mov	sp, r7
    2534:	bd80      	pop	{r7, pc}
    2536:	bf00      	nop
    2538:	00002079 	.word	0x00002079

0000253c <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    253c:	b580      	push	{r7, lr}
    253e:	b082      	sub	sp, #8
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	68db      	ldr	r3, [r3, #12]
    2548:	4618      	mov	r0, r3
    254a:	4b03      	ldr	r3, [pc, #12]	; (2558 <_timer_is_started+0x1c>)
    254c:	4798      	blx	r3
    254e:	4603      	mov	r3, r0
}
    2550:	4618      	mov	r0, r3
    2552:	3708      	adds	r7, #8
    2554:	46bd      	mov	sp, r7
    2556:	bd80      	pop	{r7, pc}
    2558:	000020a1 	.word	0x000020a1

0000255c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    255c:	b480      	push	{r7}
    255e:	af00      	add	r7, sp, #0
	return NULL;
    2560:	2300      	movs	r3, #0
}
    2562:	4618      	mov	r0, r3
    2564:	46bd      	mov	sp, r7
    2566:	f85d 7b04 	ldr.w	r7, [sp], #4
    256a:	4770      	bx	lr

0000256c <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    256c:	b580      	push	{r7, lr}
    256e:	b084      	sub	sp, #16
    2570:	af00      	add	r7, sp, #0
    2572:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	68db      	ldr	r3, [r3, #12]
    2578:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    257a:	68f8      	ldr	r0, [r7, #12]
    257c:	4b0e      	ldr	r3, [pc, #56]	; (25b8 <_timer_set_irq+0x4c>)
    257e:	4798      	blx	r3
    2580:	4603      	mov	r3, r0
    2582:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    2584:	f240 1211 	movw	r2, #273	; 0x111
    2588:	490c      	ldr	r1, [pc, #48]	; (25bc <_timer_set_irq+0x50>)
    258a:	2001      	movs	r0, #1
    258c:	4b0c      	ldr	r3, [pc, #48]	; (25c0 <_timer_set_irq+0x54>)
    258e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    2590:	f997 200b 	ldrsb.w	r2, [r7, #11]
    2594:	490b      	ldr	r1, [pc, #44]	; (25c4 <_timer_set_irq+0x58>)
    2596:	4613      	mov	r3, r2
    2598:	009b      	lsls	r3, r3, #2
    259a:	4413      	add	r3, r2
    259c:	009b      	lsls	r3, r3, #2
    259e:	440b      	add	r3, r1
    25a0:	3302      	adds	r3, #2
    25a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    25a6:	b2db      	uxtb	r3, r3
    25a8:	4618      	mov	r0, r3
    25aa:	4b07      	ldr	r3, [pc, #28]	; (25c8 <_timer_set_irq+0x5c>)
    25ac:	4798      	blx	r3
}
    25ae:	bf00      	nop
    25b0:	3710      	adds	r7, #16
    25b2:	46bd      	mov	sp, r7
    25b4:	bd80      	pop	{r7, pc}
    25b6:	bf00      	nop
    25b8:	0000263d 	.word	0x0000263d
    25bc:	00002b78 	.word	0x00002b78
    25c0:	000012f1 	.word	0x000012f1
    25c4:	20000018 	.word	0x20000018
    25c8:	0000143d 	.word	0x0000143d

000025cc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    25cc:	b580      	push	{r7, lr}
    25ce:	b084      	sub	sp, #16
    25d0:	af00      	add	r7, sp, #0
    25d2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	68db      	ldr	r3, [r3, #12]
    25d8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    25da:	68f8      	ldr	r0, [r7, #12]
    25dc:	4b07      	ldr	r3, [pc, #28]	; (25fc <tc_interrupt_handler+0x30>)
    25de:	4798      	blx	r3
    25e0:	4603      	mov	r3, r0
    25e2:	2b00      	cmp	r3, #0
    25e4:	d006      	beq.n	25f4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    25e6:	68f8      	ldr	r0, [r7, #12]
    25e8:	4b05      	ldr	r3, [pc, #20]	; (2600 <tc_interrupt_handler+0x34>)
    25ea:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	6878      	ldr	r0, [r7, #4]
    25f2:	4798      	blx	r3
	}
}
    25f4:	bf00      	nop
    25f6:	3710      	adds	r7, #16
    25f8:	46bd      	mov	sp, r7
    25fa:	bd80      	pop	{r7, pc}
    25fc:	0000201d 	.word	0x0000201d
    2600:	00002045 	.word	0x00002045

00002604 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    2604:	b580      	push	{r7, lr}
    2606:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    2608:	4b03      	ldr	r3, [pc, #12]	; (2618 <TC0_Handler+0x14>)
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	4618      	mov	r0, r3
    260e:	4b03      	ldr	r3, [pc, #12]	; (261c <TC0_Handler+0x18>)
    2610:	4798      	blx	r3
}
    2612:	bf00      	nop
    2614:	bd80      	pop	{r7, pc}
    2616:	bf00      	nop
    2618:	20000064 	.word	0x20000064
    261c:	000025cd 	.word	0x000025cd

00002620 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    2620:	b580      	push	{r7, lr}
    2622:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    2624:	4b03      	ldr	r3, [pc, #12]	; (2634 <TC2_Handler+0x14>)
    2626:	681b      	ldr	r3, [r3, #0]
    2628:	4618      	mov	r0, r3
    262a:	4b03      	ldr	r3, [pc, #12]	; (2638 <TC2_Handler+0x18>)
    262c:	4798      	blx	r3
}
    262e:	bf00      	nop
    2630:	bd80      	pop	{r7, pc}
    2632:	bf00      	nop
    2634:	20000068 	.word	0x20000068
    2638:	000025cd 	.word	0x000025cd

0000263c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    263c:	b580      	push	{r7, lr}
    263e:	b084      	sub	sp, #16
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    2644:	6878      	ldr	r0, [r7, #4]
    2646:	4b13      	ldr	r3, [pc, #76]	; (2694 <get_tc_index+0x58>)
    2648:	4798      	blx	r3
    264a:	4603      	mov	r3, r0
    264c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    264e:	2300      	movs	r3, #0
    2650:	73fb      	strb	r3, [r7, #15]
    2652:	e010      	b.n	2676 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    2654:	7bfa      	ldrb	r2, [r7, #15]
    2656:	4910      	ldr	r1, [pc, #64]	; (2698 <get_tc_index+0x5c>)
    2658:	4613      	mov	r3, r2
    265a:	009b      	lsls	r3, r3, #2
    265c:	4413      	add	r3, r2
    265e:	009b      	lsls	r3, r3, #2
    2660:	440b      	add	r3, r1
    2662:	781b      	ldrb	r3, [r3, #0]
    2664:	7bba      	ldrb	r2, [r7, #14]
    2666:	429a      	cmp	r2, r3
    2668:	d102      	bne.n	2670 <get_tc_index+0x34>
			return i;
    266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    266e:	e00d      	b.n	268c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2670:	7bfb      	ldrb	r3, [r7, #15]
    2672:	3301      	adds	r3, #1
    2674:	73fb      	strb	r3, [r7, #15]
    2676:	7bfb      	ldrb	r3, [r7, #15]
    2678:	2b01      	cmp	r3, #1
    267a:	d9eb      	bls.n	2654 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    267c:	f44f 72a3 	mov.w	r2, #326	; 0x146
    2680:	4906      	ldr	r1, [pc, #24]	; (269c <get_tc_index+0x60>)
    2682:	2000      	movs	r0, #0
    2684:	4b06      	ldr	r3, [pc, #24]	; (26a0 <get_tc_index+0x64>)
    2686:	4798      	blx	r3
	return -1;
    2688:	f04f 33ff 	mov.w	r3, #4294967295
}
    268c:	4618      	mov	r0, r3
    268e:	3710      	adds	r7, #16
    2690:	46bd      	mov	sp, r7
    2692:	bd80      	pop	{r7, pc}
    2694:	000026e9 	.word	0x000026e9
    2698:	20000018 	.word	0x20000018
    269c:	00002b78 	.word	0x00002b78
    26a0:	000012f1 	.word	0x000012f1

000026a4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    26a4:	b480      	push	{r7}
    26a6:	b083      	sub	sp, #12
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
    26ac:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	4a09      	ldr	r2, [pc, #36]	; (26d8 <_tc_init_irq_param+0x34>)
    26b2:	4293      	cmp	r3, r2
    26b4:	d102      	bne.n	26bc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    26b6:	4a09      	ldr	r2, [pc, #36]	; (26dc <_tc_init_irq_param+0x38>)
    26b8:	683b      	ldr	r3, [r7, #0]
    26ba:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    26bc:	687b      	ldr	r3, [r7, #4]
    26be:	4a08      	ldr	r2, [pc, #32]	; (26e0 <_tc_init_irq_param+0x3c>)
    26c0:	4293      	cmp	r3, r2
    26c2:	d102      	bne.n	26ca <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    26c4:	4a07      	ldr	r2, [pc, #28]	; (26e4 <_tc_init_irq_param+0x40>)
    26c6:	683b      	ldr	r3, [r7, #0]
    26c8:	6013      	str	r3, [r2, #0]
	}
}
    26ca:	bf00      	nop
    26cc:	370c      	adds	r7, #12
    26ce:	46bd      	mov	sp, r7
    26d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop
    26d8:	40003800 	.word	0x40003800
    26dc:	20000064 	.word	0x20000064
    26e0:	4101a000 	.word	0x4101a000
    26e4:	20000068 	.word	0x20000068

000026e8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    26e8:	b4b0      	push	{r4, r5, r7}
    26ea:	b08d      	sub	sp, #52	; 0x34
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    26f0:	4b13      	ldr	r3, [pc, #76]	; (2740 <_get_hardware_offset+0x58>)
    26f2:	f107 040c 	add.w	r4, r7, #12
    26f6:	461d      	mov	r5, r3
    26f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    26fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    26fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2704:	2300      	movs	r3, #0
    2706:	62fb      	str	r3, [r7, #44]	; 0x2c
    2708:	e010      	b.n	272c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    270c:	009b      	lsls	r3, r3, #2
    270e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2712:	4413      	add	r3, r2
    2714:	f853 3c24 	ldr.w	r3, [r3, #-36]
    2718:	461a      	mov	r2, r3
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	429a      	cmp	r2, r3
    271e:	d102      	bne.n	2726 <_get_hardware_offset+0x3e>
			return i;
    2720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2722:	b2db      	uxtb	r3, r3
    2724:	e006      	b.n	2734 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2728:	3301      	adds	r3, #1
    272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    272e:	2b07      	cmp	r3, #7
    2730:	d9eb      	bls.n	270a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    2732:	2300      	movs	r3, #0
}
    2734:	4618      	mov	r0, r3
    2736:	3734      	adds	r7, #52	; 0x34
    2738:	46bd      	mov	sp, r7
    273a:	bcb0      	pop	{r4, r5, r7}
    273c:	4770      	bx	lr
    273e:	bf00      	nop
    2740:	00002b8c 	.word	0x00002b8c

00002744 <hri_port_set_OUT_reg>:
{
    2744:	b480      	push	{r7}
    2746:	b085      	sub	sp, #20
    2748:	af00      	add	r7, sp, #0
    274a:	60f8      	str	r0, [r7, #12]
    274c:	460b      	mov	r3, r1
    274e:	607a      	str	r2, [r7, #4]
    2750:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2752:	7afb      	ldrb	r3, [r7, #11]
    2754:	68fa      	ldr	r2, [r7, #12]
    2756:	01db      	lsls	r3, r3, #7
    2758:	4413      	add	r3, r2
    275a:	3318      	adds	r3, #24
    275c:	687a      	ldr	r2, [r7, #4]
    275e:	601a      	str	r2, [r3, #0]
}
    2760:	bf00      	nop
    2762:	3714      	adds	r7, #20
    2764:	46bd      	mov	sp, r7
    2766:	f85d 7b04 	ldr.w	r7, [sp], #4
    276a:	4770      	bx	lr

0000276c <hri_port_clear_OUT_reg>:
{
    276c:	b480      	push	{r7}
    276e:	b085      	sub	sp, #20
    2770:	af00      	add	r7, sp, #0
    2772:	60f8      	str	r0, [r7, #12]
    2774:	460b      	mov	r3, r1
    2776:	607a      	str	r2, [r7, #4]
    2778:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    277a:	7afb      	ldrb	r3, [r7, #11]
    277c:	68fa      	ldr	r2, [r7, #12]
    277e:	01db      	lsls	r3, r3, #7
    2780:	4413      	add	r3, r2
    2782:	3314      	adds	r3, #20
    2784:	687a      	ldr	r2, [r7, #4]
    2786:	601a      	str	r2, [r3, #0]
}
    2788:	bf00      	nop
    278a:	3714      	adds	r7, #20
    278c:	46bd      	mov	sp, r7
    278e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2792:	4770      	bx	lr

00002794 <_gpio_set_level>:
{
    2794:	b580      	push	{r7, lr}
    2796:	b082      	sub	sp, #8
    2798:	af00      	add	r7, sp, #0
    279a:	4603      	mov	r3, r0
    279c:	6039      	str	r1, [r7, #0]
    279e:	71fb      	strb	r3, [r7, #7]
    27a0:	4613      	mov	r3, r2
    27a2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    27a4:	79bb      	ldrb	r3, [r7, #6]
    27a6:	2b00      	cmp	r3, #0
    27a8:	d006      	beq.n	27b8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    27aa:	79fb      	ldrb	r3, [r7, #7]
    27ac:	683a      	ldr	r2, [r7, #0]
    27ae:	4619      	mov	r1, r3
    27b0:	4806      	ldr	r0, [pc, #24]	; (27cc <_gpio_set_level+0x38>)
    27b2:	4b07      	ldr	r3, [pc, #28]	; (27d0 <_gpio_set_level+0x3c>)
    27b4:	4798      	blx	r3
}
    27b6:	e005      	b.n	27c4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    27b8:	79fb      	ldrb	r3, [r7, #7]
    27ba:	683a      	ldr	r2, [r7, #0]
    27bc:	4619      	mov	r1, r3
    27be:	4803      	ldr	r0, [pc, #12]	; (27cc <_gpio_set_level+0x38>)
    27c0:	4b04      	ldr	r3, [pc, #16]	; (27d4 <_gpio_set_level+0x40>)
    27c2:	4798      	blx	r3
}
    27c4:	bf00      	nop
    27c6:	3708      	adds	r7, #8
    27c8:	46bd      	mov	sp, r7
    27ca:	bd80      	pop	{r7, pc}
    27cc:	41008000 	.word	0x41008000
    27d0:	00002745 	.word	0x00002745
    27d4:	0000276d 	.word	0x0000276d

000027d8 <gpio_set_pin_level>:
{
    27d8:	b580      	push	{r7, lr}
    27da:	b082      	sub	sp, #8
    27dc:	af00      	add	r7, sp, #0
    27de:	4603      	mov	r3, r0
    27e0:	460a      	mov	r2, r1
    27e2:	71fb      	strb	r3, [r7, #7]
    27e4:	4613      	mov	r3, r2
    27e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    27e8:	79fb      	ldrb	r3, [r7, #7]
    27ea:	095b      	lsrs	r3, r3, #5
    27ec:	b2d8      	uxtb	r0, r3
    27ee:	79fb      	ldrb	r3, [r7, #7]
    27f0:	f003 031f 	and.w	r3, r3, #31
    27f4:	2201      	movs	r2, #1
    27f6:	fa02 f303 	lsl.w	r3, r2, r3
    27fa:	79ba      	ldrb	r2, [r7, #6]
    27fc:	4619      	mov	r1, r3
    27fe:	4b03      	ldr	r3, [pc, #12]	; (280c <gpio_set_pin_level+0x34>)
    2800:	4798      	blx	r3
}
    2802:	bf00      	nop
    2804:	3708      	adds	r7, #8
    2806:	46bd      	mov	sp, r7
    2808:	bd80      	pop	{r7, pc}
    280a:	bf00      	nop
    280c:	00002795 	.word	0x00002795

00002810 <timer_task2_cb>:

static bool led = 0;


static bool timer_task2_cb(const struct timer_task *const timer_task)
{
    2810:	b580      	push	{r7, lr}
    2812:	b082      	sub	sp, #8
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(LED_green2,1);
    2818:	2101      	movs	r1, #1
    281a:	2024      	movs	r0, #36	; 0x24
    281c:	4b03      	ldr	r3, [pc, #12]	; (282c <timer_task2_cb+0x1c>)
    281e:	4798      	blx	r3
}
    2820:	bf00      	nop
    2822:	4618      	mov	r0, r3
    2824:	3708      	adds	r7, #8
    2826:	46bd      	mov	sp, r7
    2828:	bd80      	pop	{r7, pc}
    282a:	bf00      	nop
    282c:	000027d9 	.word	0x000027d9

00002830 <timer_task1_cb>:

static bool timer_task1_cb(const struct timer_task *const timer_task)
{
    2830:	b580      	push	{r7, lr}
    2832:	b084      	sub	sp, #16
    2834:	af00      	add	r7, sp, #0
    2836:	6078      	str	r0, [r7, #4]
	// Set up Timer Function
	task2.interval = 10;
    2838:	4b1e      	ldr	r3, [pc, #120]	; (28b4 <timer_task1_cb+0x84>)
    283a:	220a      	movs	r2, #10
    283c:	609a      	str	r2, [r3, #8]
	task2.cb = timer_task2_cb;
    283e:	4b1d      	ldr	r3, [pc, #116]	; (28b4 <timer_task1_cb+0x84>)
    2840:	4a1d      	ldr	r2, [pc, #116]	; (28b8 <timer_task1_cb+0x88>)
    2842:	60da      	str	r2, [r3, #12]
	task2.mode = TIMER_TASK_ONE_SHOT;
    2844:	4b1b      	ldr	r3, [pc, #108]	; (28b4 <timer_task1_cb+0x84>)
    2846:	2200      	movs	r2, #0
    2848:	741a      	strb	r2, [r3, #16]
	bool input = 0;
    284a:	2300      	movs	r3, #0
    284c:	73fb      	strb	r3, [r7, #15]
	
	// Toggle green LED2
	gpio_set_pin_level(LED_green2,0);
    284e:	2100      	movs	r1, #0
    2850:	2024      	movs	r0, #36	; 0x24
    2852:	4b1a      	ldr	r3, [pc, #104]	; (28bc <timer_task1_cb+0x8c>)
    2854:	4798      	blx	r3
	
	input = (PORT->Group[CODE_INPUT/32].IN.reg & (1<<(CODE_INPUT%32)));   //get the input from DIP_SWITCH
    2856:	4b1a      	ldr	r3, [pc, #104]	; (28c0 <timer_task1_cb+0x90>)
    2858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    285c:	f003 0320 	and.w	r3, r3, #32
    2860:	2b00      	cmp	r3, #0
    2862:	bf14      	ite	ne
    2864:	2301      	movne	r3, #1
    2866:	2300      	moveq	r3, #0
    2868:	73fb      	strb	r3, [r7, #15]
	led = HandleEvent(input);                                             //check into the state machine the input sequence and store the output
    286a:	7bfb      	ldrb	r3, [r7, #15]
    286c:	4618      	mov	r0, r3
    286e:	4b15      	ldr	r3, [pc, #84]	; (28c4 <timer_task1_cb+0x94>)
    2870:	4798      	blx	r3
    2872:	4603      	mov	r3, r0
    2874:	461a      	mov	r2, r3
    2876:	4b14      	ldr	r3, [pc, #80]	; (28c8 <timer_task1_cb+0x98>)
    2878:	701a      	strb	r2, [r3, #0]
	
	if(led){
    287a:	4b13      	ldr	r3, [pc, #76]	; (28c8 <timer_task1_cb+0x98>)
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	2b00      	cmp	r3, #0
    2880:	d005      	beq.n	288e <timer_task1_cb+0x5e>
		//Set compare value of the PWM to blink the red LED at 100Hz
		//tcc_set_compare_value(TCC0, 0x1770/50, 0);
		tcc_set_compare_value(TCC0, 0x1770/100, 0);
    2882:	2200      	movs	r2, #0
    2884:	213c      	movs	r1, #60	; 0x3c
    2886:	4811      	ldr	r0, [pc, #68]	; (28cc <timer_task1_cb+0x9c>)
    2888:	4b11      	ldr	r3, [pc, #68]	; (28d0 <timer_task1_cb+0xa0>)
    288a:	4798      	blx	r3
    288c:	e004      	b.n	2898 <timer_task1_cb+0x68>
		}else{
		//Turn off the led
		tcc_set_compare_value(TCC0, 0x1770/50, 0);
    288e:	2200      	movs	r2, #0
    2890:	2178      	movs	r1, #120	; 0x78
    2892:	480e      	ldr	r0, [pc, #56]	; (28cc <timer_task1_cb+0x9c>)
    2894:	4b0e      	ldr	r3, [pc, #56]	; (28d0 <timer_task1_cb+0xa0>)
    2896:	4798      	blx	r3
	}
	
	timer_add_task(&TIMER_1, &task2);
    2898:	4906      	ldr	r1, [pc, #24]	; (28b4 <timer_task1_cb+0x84>)
    289a:	480e      	ldr	r0, [pc, #56]	; (28d4 <timer_task1_cb+0xa4>)
    289c:	4b0e      	ldr	r3, [pc, #56]	; (28d8 <timer_task1_cb+0xa8>)
    289e:	4798      	blx	r3
	timer_start(&TIMER_1);
    28a0:	480c      	ldr	r0, [pc, #48]	; (28d4 <timer_task1_cb+0xa4>)
    28a2:	4b0e      	ldr	r3, [pc, #56]	; (28dc <timer_task1_cb+0xac>)
    28a4:	4798      	blx	r3
	
	return led;
    28a6:	4b08      	ldr	r3, [pc, #32]	; (28c8 <timer_task1_cb+0x98>)
    28a8:	781b      	ldrb	r3, [r3, #0]
}
    28aa:	4618      	mov	r0, r3
    28ac:	3710      	adds	r7, #16
    28ae:	46bd      	mov	sp, r7
    28b0:	bd80      	pop	{r7, pc}
    28b2:	bf00      	nop
    28b4:	20000080 	.word	0x20000080
    28b8:	00002811 	.word	0x00002811
    28bc:	000027d9 	.word	0x000027d9
    28c0:	41008000 	.word	0x41008000
    28c4:	000002e1 	.word	0x000002e1
    28c8:	20000094 	.word	0x20000094
    28cc:	41016000 	.word	0x41016000
    28d0:	000029cd 	.word	0x000029cd
    28d4:	20000098 	.word	0x20000098
    28d8:	00000ec1 	.word	0x00000ec1
    28dc:	00000e6d 	.word	0x00000e6d

000028e0 <main>:


int main(void)
{
    28e0:	b580      	push	{r7, lr}
    28e2:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    28e4:	4b0b      	ldr	r3, [pc, #44]	; (2914 <main+0x34>)
    28e6:	4798      	blx	r3
	
	task1.interval = 25;
    28e8:	4b0b      	ldr	r3, [pc, #44]	; (2918 <main+0x38>)
    28ea:	2219      	movs	r2, #25
    28ec:	609a      	str	r2, [r3, #8]
	task1.cb = timer_task1_cb;
    28ee:	4b0a      	ldr	r3, [pc, #40]	; (2918 <main+0x38>)
    28f0:	4a0a      	ldr	r2, [pc, #40]	; (291c <main+0x3c>)
    28f2:	60da      	str	r2, [r3, #12]
	task1.mode = TIMER_TASK_REPEAT;
    28f4:	4b08      	ldr	r3, [pc, #32]	; (2918 <main+0x38>)
    28f6:	2201      	movs	r2, #1
    28f8:	741a      	strb	r2, [r3, #16]
	
	// Add timer task
	timer_add_task(&TIMER_0, &task1);
    28fa:	4907      	ldr	r1, [pc, #28]	; (2918 <main+0x38>)
    28fc:	4808      	ldr	r0, [pc, #32]	; (2920 <main+0x40>)
    28fe:	4b09      	ldr	r3, [pc, #36]	; (2924 <main+0x44>)
    2900:	4798      	blx	r3
	timer_start(&TIMER_0);
    2902:	4807      	ldr	r0, [pc, #28]	; (2920 <main+0x40>)
    2904:	4b08      	ldr	r3, [pc, #32]	; (2928 <main+0x48>)
    2906:	4798      	blx	r3
	
	tcc_set_period_value(TCC0, 0x1770/50);  
    2908:	2178      	movs	r1, #120	; 0x78
    290a:	4808      	ldr	r0, [pc, #32]	; (292c <main+0x4c>)
    290c:	4b08      	ldr	r3, [pc, #32]	; (2930 <main+0x50>)
    290e:	4798      	blx	r3

	while (1){}	
    2910:	e7fe      	b.n	2910 <main+0x30>
    2912:	bf00      	nop
    2914:	000002d1 	.word	0x000002d1
    2918:	2000006c 	.word	0x2000006c
    291c:	00002831 	.word	0x00002831
    2920:	200000c0 	.word	0x200000c0
    2924:	00000ec1 	.word	0x00000ec1
    2928:	00000e6d 	.word	0x00000e6d
    292c:	41016000 	.word	0x41016000
    2930:	00002a0d 	.word	0x00002a0d

00002934 <hri_tcc_wait_for_sync>:
{
    2934:	b480      	push	{r7}
    2936:	b083      	sub	sp, #12
    2938:	af00      	add	r7, sp, #0
    293a:	6078      	str	r0, [r7, #4]
    293c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    293e:	bf00      	nop
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	689a      	ldr	r2, [r3, #8]
    2944:	683b      	ldr	r3, [r7, #0]
    2946:	4013      	ands	r3, r2
    2948:	2b00      	cmp	r3, #0
    294a:	d1f9      	bne.n	2940 <hri_tcc_wait_for_sync+0xc>
}
    294c:	bf00      	nop
    294e:	370c      	adds	r7, #12
    2950:	46bd      	mov	sp, r7
    2952:	f85d 7b04 	ldr.w	r7, [sp], #4
    2956:	4770      	bx	lr

00002958 <hri_tcc_clear_INTFLAG_reg>:
{
    2958:	b480      	push	{r7}
    295a:	b083      	sub	sp, #12
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
    2960:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2968:	bf00      	nop
    296a:	370c      	adds	r7, #12
    296c:	46bd      	mov	sp, r7
    296e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2972:	4770      	bx	lr

00002974 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    2974:	b580      	push	{r7, lr}
    2976:	b082      	sub	sp, #8
    2978:	af00      	add	r7, sp, #0
    297a:	6078      	str	r0, [r7, #4]
    297c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	683a      	ldr	r2, [r7, #0]
    2982:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2984:	2180      	movs	r1, #128	; 0x80
    2986:	6878      	ldr	r0, [r7, #4]
    2988:	4b02      	ldr	r3, [pc, #8]	; (2994 <hri_tcc_write_PER_reg+0x20>)
    298a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    298c:	bf00      	nop
    298e:	3708      	adds	r7, #8
    2990:	46bd      	mov	sp, r7
    2992:	bd80      	pop	{r7, pc}
    2994:	00002935 	.word	0x00002935

00002998 <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    2998:	b580      	push	{r7, lr}
    299a:	b084      	sub	sp, #16
    299c:	af00      	add	r7, sp, #0
    299e:	60f8      	str	r0, [r7, #12]
    29a0:	460b      	mov	r3, r1
    29a2:	607a      	str	r2, [r7, #4]
    29a4:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    29a6:	7afb      	ldrb	r3, [r7, #11]
    29a8:	68fa      	ldr	r2, [r7, #12]
    29aa:	3310      	adds	r3, #16
    29ac:	009b      	lsls	r3, r3, #2
    29ae:	4413      	add	r3, r2
    29b0:	687a      	ldr	r2, [r7, #4]
    29b2:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    29b4:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    29b8:	68f8      	ldr	r0, [r7, #12]
    29ba:	4b03      	ldr	r3, [pc, #12]	; (29c8 <hri_tcc_write_CC_reg+0x30>)
    29bc:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    29be:	bf00      	nop
    29c0:	3710      	adds	r7, #16
    29c2:	46bd      	mov	sp, r7
    29c4:	bd80      	pop	{r7, pc}
    29c6:	bf00      	nop
    29c8:	00002935 	.word	0x00002935

000029cc <tcc_set_compare_value>:
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
    29cc:	b580      	push	{r7, lr}
    29ce:	b084      	sub	sp, #16
    29d0:	af00      	add	r7, sp, #0
    29d2:	60f8      	str	r0, [r7, #12]
    29d4:	60b9      	str	r1, [r7, #8]
    29d6:	4613      	mov	r3, r2
    29d8:	71fb      	strb	r3, [r7, #7]
	hri_tcc_write_CC_reg(hw, channel_index, value);
    29da:	79fb      	ldrb	r3, [r7, #7]
    29dc:	68ba      	ldr	r2, [r7, #8]
    29de:	4619      	mov	r1, r3
    29e0:	68f8      	ldr	r0, [r7, #12]
    29e2:	4b08      	ldr	r3, [pc, #32]	; (2a04 <tcc_set_compare_value+0x38>)
    29e4:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    29e6:	79fb      	ldrb	r3, [r7, #7]
    29e8:	2201      	movs	r2, #1
    29ea:	fa02 f303 	lsl.w	r3, r2, r3
    29ee:	021b      	lsls	r3, r3, #8
    29f0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    29f4:	4619      	mov	r1, r3
    29f6:	68f8      	ldr	r0, [r7, #12]
    29f8:	4b03      	ldr	r3, [pc, #12]	; (2a08 <tcc_set_compare_value+0x3c>)
    29fa:	4798      	blx	r3
}
    29fc:	bf00      	nop
    29fe:	3710      	adds	r7, #16
    2a00:	46bd      	mov	sp, r7
    2a02:	bd80      	pop	{r7, pc}
    2a04:	00002999 	.word	0x00002999
    2a08:	00002935 	.word	0x00002935

00002a0c <tcc_set_period_value>:
{
	hri_tcc_write_CCBUF_reg(hw, channel_index, value);
}

void tcc_set_period_value(void *const hw, uint32_t value)
{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b082      	sub	sp, #8
    2a10:	af00      	add	r7, sp, #0
    2a12:	6078      	str	r0, [r7, #4]
    2a14:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(hw, value);
    2a16:	6839      	ldr	r1, [r7, #0]
    2a18:	6878      	ldr	r0, [r7, #4]
    2a1a:	4b05      	ldr	r3, [pc, #20]	; (2a30 <tcc_set_period_value+0x24>)
    2a1c:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2a1e:	2180      	movs	r1, #128	; 0x80
    2a20:	6878      	ldr	r0, [r7, #4]
    2a22:	4b04      	ldr	r3, [pc, #16]	; (2a34 <tcc_set_period_value+0x28>)
    2a24:	4798      	blx	r3
}
    2a26:	bf00      	nop
    2a28:	3708      	adds	r7, #8
    2a2a:	46bd      	mov	sp, r7
    2a2c:	bd80      	pop	{r7, pc}
    2a2e:	bf00      	nop
    2a30:	00002975 	.word	0x00002975
    2a34:	00002935 	.word	0x00002935

00002a38 <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    2a3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2a40:	4804      	ldr	r0, [pc, #16]	; (2a54 <TCC0_1_Handler+0x1c>)
    2a42:	4b05      	ldr	r3, [pc, #20]	; (2a58 <TCC0_1_Handler+0x20>)
    2a44:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <TCC0_1_Handler+0x24>)
    2a48:	681b      	ldr	r3, [r3, #0]
    2a4a:	4802      	ldr	r0, [pc, #8]	; (2a54 <TCC0_1_Handler+0x1c>)
    2a4c:	4798      	blx	r3
}
    2a4e:	bf00      	nop
    2a50:	bd80      	pop	{r7, pc}
    2a52:	bf00      	nop
    2a54:	41016000 	.word	0x41016000
    2a58:	00002959 	.word	0x00002959
    2a5c:	200000ec 	.word	0x200000ec

00002a60 <__libc_init_array>:
    2a60:	b570      	push	{r4, r5, r6, lr}
    2a62:	4e0d      	ldr	r6, [pc, #52]	; (2a98 <__libc_init_array+0x38>)
    2a64:	4c0d      	ldr	r4, [pc, #52]	; (2a9c <__libc_init_array+0x3c>)
    2a66:	1ba4      	subs	r4, r4, r6
    2a68:	10a4      	asrs	r4, r4, #2
    2a6a:	2500      	movs	r5, #0
    2a6c:	42a5      	cmp	r5, r4
    2a6e:	d109      	bne.n	2a84 <__libc_init_array+0x24>
    2a70:	4e0b      	ldr	r6, [pc, #44]	; (2aa0 <__libc_init_array+0x40>)
    2a72:	4c0c      	ldr	r4, [pc, #48]	; (2aa4 <__libc_init_array+0x44>)
    2a74:	f000 f89a 	bl	2bac <_init>
    2a78:	1ba4      	subs	r4, r4, r6
    2a7a:	10a4      	asrs	r4, r4, #2
    2a7c:	2500      	movs	r5, #0
    2a7e:	42a5      	cmp	r5, r4
    2a80:	d105      	bne.n	2a8e <__libc_init_array+0x2e>
    2a82:	bd70      	pop	{r4, r5, r6, pc}
    2a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2a88:	4798      	blx	r3
    2a8a:	3501      	adds	r5, #1
    2a8c:	e7ee      	b.n	2a6c <__libc_init_array+0xc>
    2a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2a92:	4798      	blx	r3
    2a94:	3501      	adds	r5, #1
    2a96:	e7f2      	b.n	2a7e <__libc_init_array+0x1e>
    2a98:	00002bb8 	.word	0x00002bb8
    2a9c:	00002bb8 	.word	0x00002bb8
    2aa0:	00002bb8 	.word	0x00002bb8
    2aa4:	00002bbc 	.word	0x00002bbc
    2aa8:	01000100 	.word	0x01000100
    2aac:	00000001 	.word	0x00000001
    2ab0:	00010100 	.word	0x00010100
    2ab4:	00000001 	.word	0x00000001
    2ab8:	682f2e2e 	.word	0x682f2e2e
    2abc:	702f6c70 	.word	0x702f6c70
    2ac0:	2f74726f 	.word	0x2f74726f
    2ac4:	5f6c7068 	.word	0x5f6c7068
    2ac8:	6f697067 	.word	0x6f697067
    2acc:	7361625f 	.word	0x7361625f
    2ad0:	00682e65 	.word	0x00682e65
    2ad4:	682f2e2e 	.word	0x682f2e2e
    2ad8:	732f6c61 	.word	0x732f6c61
    2adc:	682f6372 	.word	0x682f6372
    2ae0:	745f6c61 	.word	0x745f6c61
    2ae4:	72656d69 	.word	0x72656d69
    2ae8:	0000632e 	.word	0x0000632e
    2aec:	682f2e2e 	.word	0x682f2e2e
    2af0:	732f6c61 	.word	0x732f6c61
    2af4:	682f6372 	.word	0x682f6372
    2af8:	755f6c61 	.word	0x755f6c61
    2afc:	74726173 	.word	0x74726173
    2b00:	6e79735f 	.word	0x6e79735f
    2b04:	00632e63 	.word	0x00632e63
    2b08:	682f2e2e 	.word	0x682f2e2e
    2b0c:	752f6c61 	.word	0x752f6c61
    2b10:	736c6974 	.word	0x736c6974
    2b14:	6372732f 	.word	0x6372732f
    2b18:	6974752f 	.word	0x6974752f
    2b1c:	6c5f736c 	.word	0x6c5f736c
    2b20:	2e747369 	.word	0x2e747369
    2b24:	00000063 	.word	0x00000063
    2b28:	682f2e2e 	.word	0x682f2e2e
    2b2c:	732f6c70 	.word	0x732f6c70
    2b30:	6f637265 	.word	0x6f637265
    2b34:	70682f6d 	.word	0x70682f6d
    2b38:	65735f6c 	.word	0x65735f6c
    2b3c:	6d6f6372 	.word	0x6d6f6372
    2b40:	0000632e 	.word	0x0000632e
    2b44:	40003000 	.word	0x40003000
    2b48:	40003400 	.word	0x40003400
    2b4c:	41012000 	.word	0x41012000
    2b50:	41014000 	.word	0x41014000
    2b54:	43000000 	.word	0x43000000
    2b58:	43000400 	.word	0x43000400
    2b5c:	43000800 	.word	0x43000800
    2b60:	43000c00 	.word	0x43000c00

00002b64 <sercomspi_regs>:
	...
    2b78:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    2b88:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    2b98:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    2ba8:	43001800                                ...C

00002bac <_init>:
    2bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bae:	bf00      	nop
    2bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bb2:	bc08      	pop	{r3}
    2bb4:	469e      	mov	lr, r3
    2bb6:	4770      	bx	lr

00002bb8 <__init_array_start>:
    2bb8:	00000289 	.word	0x00000289

00002bbc <_fini>:
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bbe:	bf00      	nop
    2bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bc2:	bc08      	pop	{r3}
    2bc4:	469e      	mov	lr, r3
    2bc6:	4770      	bx	lr

00002bc8 <__fini_array_start>:
    2bc8:	00000265 	.word	0x00000265
