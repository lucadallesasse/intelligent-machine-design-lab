
LED_Switcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035c4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a4  20000000  000035c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200a4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200a4  2**0
                  CONTENTS
  4 .bss          000000b8  200000a4  00003668  000200a4  2**2
                  ALLOC
  5 .stack        00010004  2000015c  00003720  000200a4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f6e5  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002f51  00000000  00000000  0003f810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ab80  00000000  00000000  00042761  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001318  00000000  00000000  0004d2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011a0  00000000  00000000  0004e5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000348e0  00000000  00000000  0004f799  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015cc4  00000000  00000000  00084079  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a851  00000000  00000000  00099d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005368  00000000  00000000  001b4590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 01 01 20 95 03 00 00 31 04 00 00 31 04 00 00     `.. ....1...1...
      10:	31 04 00 00 31 04 00 00 31 04 00 00 00 00 00 00     1...1...1.......
	...
      2c:	31 04 00 00 31 04 00 00 00 00 00 00 31 04 00 00     1...1.......1...
      3c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      4c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      5c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      6c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      7c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      8c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      9c:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      ac:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      bc:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      cc:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
      dc:	31 04 00 00 31 04 00 00 31 04 00 00 00 00 00 00     1...1...1.......
	...
      f4:	41 18 00 00 31 04 00 00 31 04 00 00 31 04 00 00     A...1...1...1...
     104:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     114:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     124:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     134:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     144:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     154:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     164:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     174:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     184:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     194:	31 04 00 00 a5 2a 00 00 31 04 00 00 31 04 00 00     1....*..1...1...
     1a4:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     1b4:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     1c4:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     1d4:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     1e4:	31 04 00 00 31 04 00 00 89 27 00 00 31 04 00 00     1...1....'..1...
     1f4:	a5 27 00 00 31 04 00 00 31 04 00 00 31 04 00 00     .'..1...1...1...
     204:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     214:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     224:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     234:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     244:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...
     254:	31 04 00 00 31 04 00 00 31 04 00 00 31 04 00 00     1...1...1...1...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000a4 	.word	0x200000a4
     280:	00000000 	.word	0x00000000
     284:	000035c4 	.word	0x000035c4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000035c4 	.word	0x000035c4
     2c4:	200000a8 	.word	0x200000a8
     2c8:	000035c4 	.word	0x000035c4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000bf9 	.word	0x00000bf9

000002e0 <edge_detector>:
		break;
	}
	return output;
}

bool edge_detector(bool edge_input, int i){
     2e0:	b480      	push	{r7}
     2e2:	b085      	sub	sp, #20
     2e4:	af00      	add	r7, sp, #0
     2e6:	4603      	mov	r3, r0
     2e8:	6039      	str	r1, [r7, #0]
     2ea:	71fb      	strb	r3, [r7, #7]

	static bool clock_state[3] = {0};
	
	bool edge_detected[3] = {0};
     2ec:	f107 030c 	add.w	r3, r7, #12
     2f0:	2100      	movs	r1, #0
     2f2:	460a      	mov	r2, r1
     2f4:	801a      	strh	r2, [r3, #0]
     2f6:	460a      	mov	r2, r1
     2f8:	709a      	strb	r2, [r3, #2]
	
	
	switch(clock_state[i]){
     2fa:	4a25      	ldr	r2, [pc, #148]	; (390 <edge_detector+0xb0>)
     2fc:	683b      	ldr	r3, [r7, #0]
     2fe:	4413      	add	r3, r2
     300:	781b      	ldrb	r3, [r3, #0]
     302:	2b01      	cmp	r3, #1
     304:	d01d      	beq.n	342 <edge_detector+0x62>
		case 0:
		if(edge_input == 0){
     306:	79fb      	ldrb	r3, [r7, #7]
     308:	f083 0301 	eor.w	r3, r3, #1
     30c:	b2db      	uxtb	r3, r3
     30e:	2b00      	cmp	r3, #0
     310:	d00b      	beq.n	32a <edge_detector+0x4a>
			clock_state[i] = 0;
     312:	4a1f      	ldr	r2, [pc, #124]	; (390 <edge_detector+0xb0>)
     314:	683b      	ldr	r3, [r7, #0]
     316:	4413      	add	r3, r2
     318:	2200      	movs	r2, #0
     31a:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 0;
     31c:	f107 020c 	add.w	r2, r7, #12
     320:	683b      	ldr	r3, [r7, #0]
     322:	4413      	add	r3, r2
     324:	2200      	movs	r2, #0
     326:	701a      	strb	r2, [r3, #0]
			}else{
			clock_state[i] = 1;
			edge_detected[i] = 1;
		}
		break;
     328:	e026      	b.n	378 <edge_detector+0x98>
			clock_state[i] = 1;
     32a:	4a19      	ldr	r2, [pc, #100]	; (390 <edge_detector+0xb0>)
     32c:	683b      	ldr	r3, [r7, #0]
     32e:	4413      	add	r3, r2
     330:	2201      	movs	r2, #1
     332:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 1;
     334:	f107 020c 	add.w	r2, r7, #12
     338:	683b      	ldr	r3, [r7, #0]
     33a:	4413      	add	r3, r2
     33c:	2201      	movs	r2, #1
     33e:	701a      	strb	r2, [r3, #0]
		break;
     340:	e01a      	b.n	378 <edge_detector+0x98>
		case 1:
		if(edge_input == 1){
     342:	79fb      	ldrb	r3, [r7, #7]
     344:	2b00      	cmp	r3, #0
     346:	d00b      	beq.n	360 <edge_detector+0x80>
			clock_state[i] = 1;
     348:	4a11      	ldr	r2, [pc, #68]	; (390 <edge_detector+0xb0>)
     34a:	683b      	ldr	r3, [r7, #0]
     34c:	4413      	add	r3, r2
     34e:	2201      	movs	r2, #1
     350:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 0;
     352:	f107 020c 	add.w	r2, r7, #12
     356:	683b      	ldr	r3, [r7, #0]
     358:	4413      	add	r3, r2
     35a:	2200      	movs	r2, #0
     35c:	701a      	strb	r2, [r3, #0]
			}else{
			clock_state[i] = 0;
			edge_detected[i] = 0;
		}
		break;
     35e:	e00a      	b.n	376 <edge_detector+0x96>
			clock_state[i] = 0;
     360:	4a0b      	ldr	r2, [pc, #44]	; (390 <edge_detector+0xb0>)
     362:	683b      	ldr	r3, [r7, #0]
     364:	4413      	add	r3, r2
     366:	2200      	movs	r2, #0
     368:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 0;
     36a:	f107 020c 	add.w	r2, r7, #12
     36e:	683b      	ldr	r3, [r7, #0]
     370:	4413      	add	r3, r2
     372:	2200      	movs	r2, #0
     374:	701a      	strb	r2, [r3, #0]
		break;
     376:	bf00      	nop
	}
	return edge_detected[i];
     378:	f107 020c 	add.w	r2, r7, #12
     37c:	683b      	ldr	r3, [r7, #0]
     37e:	4413      	add	r3, r2
     380:	781b      	ldrb	r3, [r3, #0]
}
     382:	4618      	mov	r0, r3
     384:	3714      	adds	r7, #20
     386:	46bd      	mov	sp, r7
     388:	f85d 7b04 	ldr.w	r7, [sp], #4
     38c:	4770      	bx	lr
     38e:	bf00      	nop
     390:	200000c4 	.word	0x200000c4

00000394 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     39a:	4b1c      	ldr	r3, [pc, #112]	; (40c <Reset_Handler+0x78>)
     39c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     39e:	4b1c      	ldr	r3, [pc, #112]	; (410 <Reset_Handler+0x7c>)
     3a0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     3a2:	687a      	ldr	r2, [r7, #4]
     3a4:	683b      	ldr	r3, [r7, #0]
     3a6:	429a      	cmp	r2, r3
     3a8:	d00c      	beq.n	3c4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     3aa:	e007      	b.n	3bc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     3ac:	683b      	ldr	r3, [r7, #0]
     3ae:	1d1a      	adds	r2, r3, #4
     3b0:	603a      	str	r2, [r7, #0]
     3b2:	687a      	ldr	r2, [r7, #4]
     3b4:	1d11      	adds	r1, r2, #4
     3b6:	6079      	str	r1, [r7, #4]
     3b8:	6812      	ldr	r2, [r2, #0]
     3ba:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     3bc:	683b      	ldr	r3, [r7, #0]
     3be:	4a15      	ldr	r2, [pc, #84]	; (414 <Reset_Handler+0x80>)
     3c0:	4293      	cmp	r3, r2
     3c2:	d3f3      	bcc.n	3ac <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     3c4:	4b14      	ldr	r3, [pc, #80]	; (418 <Reset_Handler+0x84>)
     3c6:	603b      	str	r3, [r7, #0]
     3c8:	e004      	b.n	3d4 <Reset_Handler+0x40>
                *pDest++ = 0;
     3ca:	683b      	ldr	r3, [r7, #0]
     3cc:	1d1a      	adds	r2, r3, #4
     3ce:	603a      	str	r2, [r7, #0]
     3d0:	2200      	movs	r2, #0
     3d2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     3d4:	683b      	ldr	r3, [r7, #0]
     3d6:	4a11      	ldr	r2, [pc, #68]	; (41c <Reset_Handler+0x88>)
     3d8:	4293      	cmp	r3, r2
     3da:	d3f6      	bcc.n	3ca <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     3dc:	4b10      	ldr	r3, [pc, #64]	; (420 <Reset_Handler+0x8c>)
     3de:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3e0:	4a10      	ldr	r2, [pc, #64]	; (424 <Reset_Handler+0x90>)
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     3e8:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     3ea:	4a0e      	ldr	r2, [pc, #56]	; (424 <Reset_Handler+0x90>)
     3ec:	4b0d      	ldr	r3, [pc, #52]	; (424 <Reset_Handler+0x90>)
     3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     3f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     3f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     3fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     3fe:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     402:	4b09      	ldr	r3, [pc, #36]	; (428 <Reset_Handler+0x94>)
     404:	4798      	blx	r3

        /* Branch to main function */
        main();
     406:	4b09      	ldr	r3, [pc, #36]	; (42c <Reset_Handler+0x98>)
     408:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     40a:	e7fe      	b.n	40a <Reset_Handler+0x76>
     40c:	000035c4 	.word	0x000035c4
     410:	20000000 	.word	0x20000000
     414:	200000a4 	.word	0x200000a4
     418:	200000a4 	.word	0x200000a4
     41c:	2000015c 	.word	0x2000015c
     420:	00000000 	.word	0x00000000
     424:	e000ed00 	.word	0xe000ed00
     428:	00002acd 	.word	0x00002acd
     42c:	00002935 	.word	0x00002935

00000430 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     430:	b480      	push	{r7}
     432:	af00      	add	r7, sp, #0
        while (1) {
     434:	e7fe      	b.n	434 <Dummy_Handler+0x4>

00000436 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     436:	b480      	push	{r7}
     438:	b085      	sub	sp, #20
     43a:	af00      	add	r7, sp, #0
     43c:	60f8      	str	r0, [r7, #12]
     43e:	460b      	mov	r3, r1
     440:	607a      	str	r2, [r7, #4]
     442:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     444:	7afa      	ldrb	r2, [r7, #11]
     446:	68fb      	ldr	r3, [r7, #12]
     448:	3220      	adds	r2, #32
     44a:	6879      	ldr	r1, [r7, #4]
     44c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     450:	bf00      	nop
     452:	3714      	adds	r7, #20
     454:	46bd      	mov	sp, r7
     456:	f85d 7b04 	ldr.w	r7, [sp], #4
     45a:	4770      	bx	lr

0000045c <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     45c:	b480      	push	{r7}
     45e:	b083      	sub	sp, #12
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     464:	687b      	ldr	r3, [r7, #4]
     466:	695b      	ldr	r3, [r3, #20]
     468:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     470:	bf00      	nop
     472:	370c      	adds	r7, #12
     474:	46bd      	mov	sp, r7
     476:	f85d 7b04 	ldr.w	r7, [sp], #4
     47a:	4770      	bx	lr

0000047c <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     47c:	b480      	push	{r7}
     47e:	b083      	sub	sp, #12
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     484:	687b      	ldr	r3, [r7, #4]
     486:	699b      	ldr	r3, [r3, #24]
     488:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     490:	bf00      	nop
     492:	370c      	adds	r7, #12
     494:	46bd      	mov	sp, r7
     496:	f85d 7b04 	ldr.w	r7, [sp], #4
     49a:	4770      	bx	lr

0000049c <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     49c:	b480      	push	{r7}
     49e:	b083      	sub	sp, #12
     4a0:	af00      	add	r7, sp, #0
     4a2:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	699b      	ldr	r3, [r3, #24]
     4a8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4b0:	bf00      	nop
     4b2:	370c      	adds	r7, #12
     4b4:	46bd      	mov	sp, r7
     4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ba:	4770      	bx	lr

000004bc <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     4bc:	b480      	push	{r7}
     4be:	b083      	sub	sp, #12
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	699b      	ldr	r3, [r3, #24]
     4c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4d0:	bf00      	nop
     4d2:	370c      	adds	r7, #12
     4d4:	46bd      	mov	sp, r7
     4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     4da:	4770      	bx	lr

000004dc <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     4dc:	b480      	push	{r7}
     4de:	b085      	sub	sp, #20
     4e0:	af00      	add	r7, sp, #0
     4e2:	60f8      	str	r0, [r7, #12]
     4e4:	460b      	mov	r3, r1
     4e6:	607a      	str	r2, [r7, #4]
     4e8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ea:	7afb      	ldrb	r3, [r7, #11]
     4ec:	68fa      	ldr	r2, [r7, #12]
     4ee:	01db      	lsls	r3, r3, #7
     4f0:	4413      	add	r3, r2
     4f2:	3308      	adds	r3, #8
     4f4:	687a      	ldr	r2, [r7, #4]
     4f6:	601a      	str	r2, [r3, #0]
}
     4f8:	bf00      	nop
     4fa:	3714      	adds	r7, #20
     4fc:	46bd      	mov	sp, r7
     4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
     502:	4770      	bx	lr

00000504 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     504:	b480      	push	{r7}
     506:	b085      	sub	sp, #20
     508:	af00      	add	r7, sp, #0
     50a:	60f8      	str	r0, [r7, #12]
     50c:	460b      	mov	r3, r1
     50e:	607a      	str	r2, [r7, #4]
     510:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     512:	7afb      	ldrb	r3, [r7, #11]
     514:	68fa      	ldr	r2, [r7, #12]
     516:	01db      	lsls	r3, r3, #7
     518:	4413      	add	r3, r2
     51a:	3304      	adds	r3, #4
     51c:	687a      	ldr	r2, [r7, #4]
     51e:	601a      	str	r2, [r3, #0]
}
     520:	bf00      	nop
     522:	3714      	adds	r7, #20
     524:	46bd      	mov	sp, r7
     526:	f85d 7b04 	ldr.w	r7, [sp], #4
     52a:	4770      	bx	lr

0000052c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     52c:	b480      	push	{r7}
     52e:	b085      	sub	sp, #20
     530:	af00      	add	r7, sp, #0
     532:	60f8      	str	r0, [r7, #12]
     534:	460b      	mov	r3, r1
     536:	607a      	str	r2, [r7, #4]
     538:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     53a:	7afb      	ldrb	r3, [r7, #11]
     53c:	68fa      	ldr	r2, [r7, #12]
     53e:	01db      	lsls	r3, r3, #7
     540:	4413      	add	r3, r2
     542:	3318      	adds	r3, #24
     544:	687a      	ldr	r2, [r7, #4]
     546:	601a      	str	r2, [r3, #0]
}
     548:	bf00      	nop
     54a:	3714      	adds	r7, #20
     54c:	46bd      	mov	sp, r7
     54e:	f85d 7b04 	ldr.w	r7, [sp], #4
     552:	4770      	bx	lr

00000554 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     554:	b480      	push	{r7}
     556:	b085      	sub	sp, #20
     558:	af00      	add	r7, sp, #0
     55a:	60f8      	str	r0, [r7, #12]
     55c:	460b      	mov	r3, r1
     55e:	607a      	str	r2, [r7, #4]
     560:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     562:	7afb      	ldrb	r3, [r7, #11]
     564:	68fa      	ldr	r2, [r7, #12]
     566:	01db      	lsls	r3, r3, #7
     568:	4413      	add	r3, r2
     56a:	3314      	adds	r3, #20
     56c:	687a      	ldr	r2, [r7, #4]
     56e:	601a      	str	r2, [r3, #0]
}
     570:	bf00      	nop
     572:	3714      	adds	r7, #20
     574:	46bd      	mov	sp, r7
     576:	f85d 7b04 	ldr.w	r7, [sp], #4
     57a:	4770      	bx	lr

0000057c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     57c:	b480      	push	{r7}
     57e:	b085      	sub	sp, #20
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
     584:	4608      	mov	r0, r1
     586:	4611      	mov	r1, r2
     588:	461a      	mov	r2, r3
     58a:	4603      	mov	r3, r0
     58c:	70fb      	strb	r3, [r7, #3]
     58e:	460b      	mov	r3, r1
     590:	70bb      	strb	r3, [r7, #2]
     592:	4613      	mov	r3, r2
     594:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     596:	78fa      	ldrb	r2, [r7, #3]
     598:	78bb      	ldrb	r3, [r7, #2]
     59a:	6879      	ldr	r1, [r7, #4]
     59c:	01d2      	lsls	r2, r2, #7
     59e:	440a      	add	r2, r1
     5a0:	4413      	add	r3, r2
     5a2:	3330      	adds	r3, #48	; 0x30
     5a4:	781b      	ldrb	r3, [r3, #0]
     5a6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a8:	7bfb      	ldrb	r3, [r7, #15]
     5aa:	f023 030f 	bic.w	r3, r3, #15
     5ae:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     5b0:	787b      	ldrb	r3, [r7, #1]
     5b2:	f003 030f 	and.w	r3, r3, #15
     5b6:	b2da      	uxtb	r2, r3
     5b8:	7bfb      	ldrb	r3, [r7, #15]
     5ba:	4313      	orrs	r3, r2
     5bc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5be:	78fa      	ldrb	r2, [r7, #3]
     5c0:	78bb      	ldrb	r3, [r7, #2]
     5c2:	6879      	ldr	r1, [r7, #4]
     5c4:	01d2      	lsls	r2, r2, #7
     5c6:	440a      	add	r2, r1
     5c8:	4413      	add	r3, r2
     5ca:	3330      	adds	r3, #48	; 0x30
     5cc:	7bfa      	ldrb	r2, [r7, #15]
     5ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5d0:	bf00      	nop
     5d2:	3714      	adds	r7, #20
     5d4:	46bd      	mov	sp, r7
     5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     5da:	4770      	bx	lr

000005dc <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     5dc:	b480      	push	{r7}
     5de:	b085      	sub	sp, #20
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
     5e4:	4608      	mov	r0, r1
     5e6:	4611      	mov	r1, r2
     5e8:	461a      	mov	r2, r3
     5ea:	4603      	mov	r3, r0
     5ec:	70fb      	strb	r3, [r7, #3]
     5ee:	460b      	mov	r3, r1
     5f0:	70bb      	strb	r3, [r7, #2]
     5f2:	4613      	mov	r3, r2
     5f4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f6:	78fa      	ldrb	r2, [r7, #3]
     5f8:	78bb      	ldrb	r3, [r7, #2]
     5fa:	6879      	ldr	r1, [r7, #4]
     5fc:	01d2      	lsls	r2, r2, #7
     5fe:	440a      	add	r2, r1
     600:	4413      	add	r3, r2
     602:	3330      	adds	r3, #48	; 0x30
     604:	781b      	ldrb	r3, [r3, #0]
     606:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     608:	7bfb      	ldrb	r3, [r7, #15]
     60a:	f003 030f 	and.w	r3, r3, #15
     60e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     610:	787b      	ldrb	r3, [r7, #1]
     612:	011b      	lsls	r3, r3, #4
     614:	b2da      	uxtb	r2, r3
     616:	7bfb      	ldrb	r3, [r7, #15]
     618:	4313      	orrs	r3, r2
     61a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61c:	78fa      	ldrb	r2, [r7, #3]
     61e:	78bb      	ldrb	r3, [r7, #2]
     620:	6879      	ldr	r1, [r7, #4]
     622:	01d2      	lsls	r2, r2, #7
     624:	440a      	add	r2, r1
     626:	4413      	add	r3, r2
     628:	3330      	adds	r3, #48	; 0x30
     62a:	7bfa      	ldrb	r2, [r7, #15]
     62c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     62e:	bf00      	nop
     630:	3714      	adds	r7, #20
     632:	46bd      	mov	sp, r7
     634:	f85d 7b04 	ldr.w	r7, [sp], #4
     638:	4770      	bx	lr

0000063a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     63a:	b480      	push	{r7}
     63c:	b085      	sub	sp, #20
     63e:	af00      	add	r7, sp, #0
     640:	6078      	str	r0, [r7, #4]
     642:	4608      	mov	r0, r1
     644:	4611      	mov	r1, r2
     646:	461a      	mov	r2, r3
     648:	4603      	mov	r3, r0
     64a:	70fb      	strb	r3, [r7, #3]
     64c:	460b      	mov	r3, r1
     64e:	70bb      	strb	r3, [r7, #2]
     650:	4613      	mov	r3, r2
     652:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     654:	78fa      	ldrb	r2, [r7, #3]
     656:	78bb      	ldrb	r3, [r7, #2]
     658:	6879      	ldr	r1, [r7, #4]
     65a:	01d2      	lsls	r2, r2, #7
     65c:	440a      	add	r2, r1
     65e:	4413      	add	r3, r2
     660:	3340      	adds	r3, #64	; 0x40
     662:	781b      	ldrb	r3, [r3, #0]
     664:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     666:	7bfb      	ldrb	r3, [r7, #15]
     668:	f023 0301 	bic.w	r3, r3, #1
     66c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     66e:	787a      	ldrb	r2, [r7, #1]
     670:	7bfb      	ldrb	r3, [r7, #15]
     672:	4313      	orrs	r3, r2
     674:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     676:	78fa      	ldrb	r2, [r7, #3]
     678:	78bb      	ldrb	r3, [r7, #2]
     67a:	6879      	ldr	r1, [r7, #4]
     67c:	01d2      	lsls	r2, r2, #7
     67e:	440a      	add	r2, r1
     680:	4413      	add	r3, r2
     682:	3340      	adds	r3, #64	; 0x40
     684:	7bfa      	ldrb	r2, [r7, #15]
     686:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     688:	bf00      	nop
     68a:	3714      	adds	r7, #20
     68c:	46bd      	mov	sp, r7
     68e:	f85d 7b04 	ldr.w	r7, [sp], #4
     692:	4770      	bx	lr

00000694 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     694:	b490      	push	{r4, r7}
     696:	b082      	sub	sp, #8
     698:	af00      	add	r7, sp, #0
     69a:	6078      	str	r0, [r7, #4]
     69c:	460b      	mov	r3, r1
     69e:	70fb      	strb	r3, [r7, #3]
     6a0:	4613      	mov	r3, r2
     6a2:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     6a4:	78fa      	ldrb	r2, [r7, #3]
     6a6:	78bb      	ldrb	r3, [r7, #2]
     6a8:	78f8      	ldrb	r0, [r7, #3]
     6aa:	78b9      	ldrb	r1, [r7, #2]
     6ac:	687c      	ldr	r4, [r7, #4]
     6ae:	01c0      	lsls	r0, r0, #7
     6b0:	4420      	add	r0, r4
     6b2:	4401      	add	r1, r0
     6b4:	3140      	adds	r1, #64	; 0x40
     6b6:	7809      	ldrb	r1, [r1, #0]
     6b8:	b2c9      	uxtb	r1, r1
     6ba:	f041 0104 	orr.w	r1, r1, #4
     6be:	b2c8      	uxtb	r0, r1
     6c0:	6879      	ldr	r1, [r7, #4]
     6c2:	01d2      	lsls	r2, r2, #7
     6c4:	440a      	add	r2, r1
     6c6:	4413      	add	r3, r2
     6c8:	3340      	adds	r3, #64	; 0x40
     6ca:	4602      	mov	r2, r0
     6cc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6ce:	bf00      	nop
     6d0:	3708      	adds	r7, #8
     6d2:	46bd      	mov	sp, r7
     6d4:	bc90      	pop	{r4, r7}
     6d6:	4770      	bx	lr

000006d8 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     6d8:	b490      	push	{r4, r7}
     6da:	b082      	sub	sp, #8
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
     6e0:	460b      	mov	r3, r1
     6e2:	70fb      	strb	r3, [r7, #3]
     6e4:	4613      	mov	r3, r2
     6e6:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6e8:	78fa      	ldrb	r2, [r7, #3]
     6ea:	78bb      	ldrb	r3, [r7, #2]
     6ec:	78f8      	ldrb	r0, [r7, #3]
     6ee:	78b9      	ldrb	r1, [r7, #2]
     6f0:	687c      	ldr	r4, [r7, #4]
     6f2:	01c0      	lsls	r0, r0, #7
     6f4:	4420      	add	r0, r4
     6f6:	4401      	add	r1, r0
     6f8:	3140      	adds	r1, #64	; 0x40
     6fa:	7809      	ldrb	r1, [r1, #0]
     6fc:	b2c9      	uxtb	r1, r1
     6fe:	f021 0104 	bic.w	r1, r1, #4
     702:	b2c8      	uxtb	r0, r1
     704:	6879      	ldr	r1, [r7, #4]
     706:	01d2      	lsls	r2, r2, #7
     708:	440a      	add	r2, r1
     70a:	4413      	add	r3, r2
     70c:	3340      	adds	r3, #64	; 0x40
     70e:	4602      	mov	r2, r0
     710:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     712:	bf00      	nop
     714:	3708      	adds	r7, #8
     716:	46bd      	mov	sp, r7
     718:	bc90      	pop	{r4, r7}
     71a:	4770      	bx	lr

0000071c <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     71c:	b480      	push	{r7}
     71e:	b085      	sub	sp, #20
     720:	af00      	add	r7, sp, #0
     722:	60f8      	str	r0, [r7, #12]
     724:	460b      	mov	r3, r1
     726:	607a      	str	r2, [r7, #4]
     728:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     72a:	7afb      	ldrb	r3, [r7, #11]
     72c:	68fa      	ldr	r2, [r7, #12]
     72e:	01db      	lsls	r3, r3, #7
     730:	4413      	add	r3, r2
     732:	3328      	adds	r3, #40	; 0x28
     734:	687a      	ldr	r2, [r7, #4]
     736:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     738:	bf00      	nop
     73a:	3714      	adds	r7, #20
     73c:	46bd      	mov	sp, r7
     73e:	f85d 7b04 	ldr.w	r7, [sp], #4
     742:	4770      	bx	lr

00000744 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     744:	b580      	push	{r7, lr}
     746:	b082      	sub	sp, #8
     748:	af00      	add	r7, sp, #0
     74a:	4603      	mov	r3, r0
     74c:	6039      	str	r1, [r7, #0]
     74e:	71fb      	strb	r3, [r7, #7]
     750:	4613      	mov	r3, r2
     752:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     754:	79bb      	ldrb	r3, [r7, #6]
     756:	2b01      	cmp	r3, #1
     758:	d01c      	beq.n	794 <_gpio_set_direction+0x50>
     75a:	2b02      	cmp	r3, #2
     75c:	d037      	beq.n	7ce <_gpio_set_direction+0x8a>
     75e:	2b00      	cmp	r3, #0
     760:	d14e      	bne.n	800 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     762:	79fb      	ldrb	r3, [r7, #7]
     764:	683a      	ldr	r2, [r7, #0]
     766:	4619      	mov	r1, r3
     768:	482a      	ldr	r0, [pc, #168]	; (814 <_gpio_set_direction+0xd0>)
     76a:	4b2b      	ldr	r3, [pc, #172]	; (818 <_gpio_set_direction+0xd4>)
     76c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     76e:	683b      	ldr	r3, [r7, #0]
     770:	b29b      	uxth	r3, r3
     772:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     776:	79fb      	ldrb	r3, [r7, #7]
     778:	4619      	mov	r1, r3
     77a:	4826      	ldr	r0, [pc, #152]	; (814 <_gpio_set_direction+0xd0>)
     77c:	4b27      	ldr	r3, [pc, #156]	; (81c <_gpio_set_direction+0xd8>)
     77e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     780:	683b      	ldr	r3, [r7, #0]
     782:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     784:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     788:	79fb      	ldrb	r3, [r7, #7]
     78a:	4619      	mov	r1, r3
     78c:	4821      	ldr	r0, [pc, #132]	; (814 <_gpio_set_direction+0xd0>)
     78e:	4b23      	ldr	r3, [pc, #140]	; (81c <_gpio_set_direction+0xd8>)
     790:	4798      	blx	r3
		break;
     792:	e03a      	b.n	80a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     794:	79fb      	ldrb	r3, [r7, #7]
     796:	683a      	ldr	r2, [r7, #0]
     798:	4619      	mov	r1, r3
     79a:	481e      	ldr	r0, [pc, #120]	; (814 <_gpio_set_direction+0xd0>)
     79c:	4b1e      	ldr	r3, [pc, #120]	; (818 <_gpio_set_direction+0xd4>)
     79e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     7a0:	683b      	ldr	r3, [r7, #0]
     7a2:	b29b      	uxth	r3, r3
     7a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     7a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     7ac:	79f9      	ldrb	r1, [r7, #7]
     7ae:	461a      	mov	r2, r3
     7b0:	4818      	ldr	r0, [pc, #96]	; (814 <_gpio_set_direction+0xd0>)
     7b2:	4b1a      	ldr	r3, [pc, #104]	; (81c <_gpio_set_direction+0xd8>)
     7b4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     7ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     7be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     7c2:	79f9      	ldrb	r1, [r7, #7]
     7c4:	461a      	mov	r2, r3
     7c6:	4813      	ldr	r0, [pc, #76]	; (814 <_gpio_set_direction+0xd0>)
     7c8:	4b14      	ldr	r3, [pc, #80]	; (81c <_gpio_set_direction+0xd8>)
     7ca:	4798      	blx	r3
		break;
     7cc:	e01d      	b.n	80a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     7ce:	79fb      	ldrb	r3, [r7, #7]
     7d0:	683a      	ldr	r2, [r7, #0]
     7d2:	4619      	mov	r1, r3
     7d4:	480f      	ldr	r0, [pc, #60]	; (814 <_gpio_set_direction+0xd0>)
     7d6:	4b12      	ldr	r3, [pc, #72]	; (820 <_gpio_set_direction+0xdc>)
     7d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     7da:	683b      	ldr	r3, [r7, #0]
     7dc:	b29b      	uxth	r3, r3
     7de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     7e2:	79fb      	ldrb	r3, [r7, #7]
     7e4:	4619      	mov	r1, r3
     7e6:	480b      	ldr	r0, [pc, #44]	; (814 <_gpio_set_direction+0xd0>)
     7e8:	4b0c      	ldr	r3, [pc, #48]	; (81c <_gpio_set_direction+0xd8>)
     7ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     7ec:	683b      	ldr	r3, [r7, #0]
     7ee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     7f0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     7f4:	79fb      	ldrb	r3, [r7, #7]
     7f6:	4619      	mov	r1, r3
     7f8:	4806      	ldr	r0, [pc, #24]	; (814 <_gpio_set_direction+0xd0>)
     7fa:	4b08      	ldr	r3, [pc, #32]	; (81c <_gpio_set_direction+0xd8>)
     7fc:	4798      	blx	r3
		break;
     7fe:	e004      	b.n	80a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     800:	2246      	movs	r2, #70	; 0x46
     802:	4908      	ldr	r1, [pc, #32]	; (824 <_gpio_set_direction+0xe0>)
     804:	2000      	movs	r0, #0
     806:	4b08      	ldr	r3, [pc, #32]	; (828 <_gpio_set_direction+0xe4>)
     808:	4798      	blx	r3
	}
}
     80a:	bf00      	nop
     80c:	3708      	adds	r7, #8
     80e:	46bd      	mov	sp, r7
     810:	bd80      	pop	{r7, pc}
     812:	bf00      	nop
     814:	41008000 	.word	0x41008000
     818:	00000505 	.word	0x00000505
     81c:	0000071d 	.word	0x0000071d
     820:	000004dd 	.word	0x000004dd
     824:	000033fc 	.word	0x000033fc
     828:	000013cd 	.word	0x000013cd

0000082c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     82c:	b580      	push	{r7, lr}
     82e:	b082      	sub	sp, #8
     830:	af00      	add	r7, sp, #0
     832:	4603      	mov	r3, r0
     834:	6039      	str	r1, [r7, #0]
     836:	71fb      	strb	r3, [r7, #7]
     838:	4613      	mov	r3, r2
     83a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     83c:	79bb      	ldrb	r3, [r7, #6]
     83e:	2b00      	cmp	r3, #0
     840:	d006      	beq.n	850 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     842:	79fb      	ldrb	r3, [r7, #7]
     844:	683a      	ldr	r2, [r7, #0]
     846:	4619      	mov	r1, r3
     848:	4806      	ldr	r0, [pc, #24]	; (864 <_gpio_set_level+0x38>)
     84a:	4b07      	ldr	r3, [pc, #28]	; (868 <_gpio_set_level+0x3c>)
     84c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     84e:	e005      	b.n	85c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     850:	79fb      	ldrb	r3, [r7, #7]
     852:	683a      	ldr	r2, [r7, #0]
     854:	4619      	mov	r1, r3
     856:	4803      	ldr	r0, [pc, #12]	; (864 <_gpio_set_level+0x38>)
     858:	4b04      	ldr	r3, [pc, #16]	; (86c <_gpio_set_level+0x40>)
     85a:	4798      	blx	r3
}
     85c:	bf00      	nop
     85e:	3708      	adds	r7, #8
     860:	46bd      	mov	sp, r7
     862:	bd80      	pop	{r7, pc}
     864:	41008000 	.word	0x41008000
     868:	0000052d 	.word	0x0000052d
     86c:	00000555 	.word	0x00000555

00000870 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     870:	b580      	push	{r7, lr}
     872:	b082      	sub	sp, #8
     874:	af00      	add	r7, sp, #0
     876:	4603      	mov	r3, r0
     878:	71fb      	strb	r3, [r7, #7]
     87a:	460b      	mov	r3, r1
     87c:	71bb      	strb	r3, [r7, #6]
     87e:	4613      	mov	r3, r2
     880:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     882:	797b      	ldrb	r3, [r7, #5]
     884:	2b01      	cmp	r3, #1
     886:	d00a      	beq.n	89e <_gpio_set_pin_pull_mode+0x2e>
     888:	2b02      	cmp	r3, #2
     88a:	d01f      	beq.n	8cc <_gpio_set_pin_pull_mode+0x5c>
     88c:	2b00      	cmp	r3, #0
     88e:	d134      	bne.n	8fa <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     890:	79ba      	ldrb	r2, [r7, #6]
     892:	79fb      	ldrb	r3, [r7, #7]
     894:	4619      	mov	r1, r3
     896:	481e      	ldr	r0, [pc, #120]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     898:	4b1e      	ldr	r3, [pc, #120]	; (914 <_gpio_set_pin_pull_mode+0xa4>)
     89a:	4798      	blx	r3
		break;
     89c:	e033      	b.n	906 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     89e:	79bb      	ldrb	r3, [r7, #6]
     8a0:	2201      	movs	r2, #1
     8a2:	409a      	lsls	r2, r3
     8a4:	79fb      	ldrb	r3, [r7, #7]
     8a6:	4619      	mov	r1, r3
     8a8:	4819      	ldr	r0, [pc, #100]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     8aa:	4b1b      	ldr	r3, [pc, #108]	; (918 <_gpio_set_pin_pull_mode+0xa8>)
     8ac:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     8ae:	79ba      	ldrb	r2, [r7, #6]
     8b0:	79fb      	ldrb	r3, [r7, #7]
     8b2:	4619      	mov	r1, r3
     8b4:	4816      	ldr	r0, [pc, #88]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     8b6:	4b19      	ldr	r3, [pc, #100]	; (91c <_gpio_set_pin_pull_mode+0xac>)
     8b8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     8ba:	79bb      	ldrb	r3, [r7, #6]
     8bc:	2201      	movs	r2, #1
     8be:	409a      	lsls	r2, r3
     8c0:	79fb      	ldrb	r3, [r7, #7]
     8c2:	4619      	mov	r1, r3
     8c4:	4812      	ldr	r0, [pc, #72]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     8c6:	4b16      	ldr	r3, [pc, #88]	; (920 <_gpio_set_pin_pull_mode+0xb0>)
     8c8:	4798      	blx	r3
		break;
     8ca:	e01c      	b.n	906 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     8cc:	79bb      	ldrb	r3, [r7, #6]
     8ce:	2201      	movs	r2, #1
     8d0:	409a      	lsls	r2, r3
     8d2:	79fb      	ldrb	r3, [r7, #7]
     8d4:	4619      	mov	r1, r3
     8d6:	480e      	ldr	r0, [pc, #56]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     8d8:	4b0f      	ldr	r3, [pc, #60]	; (918 <_gpio_set_pin_pull_mode+0xa8>)
     8da:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     8dc:	79ba      	ldrb	r2, [r7, #6]
     8de:	79fb      	ldrb	r3, [r7, #7]
     8e0:	4619      	mov	r1, r3
     8e2:	480b      	ldr	r0, [pc, #44]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     8e4:	4b0d      	ldr	r3, [pc, #52]	; (91c <_gpio_set_pin_pull_mode+0xac>)
     8e6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     8e8:	79bb      	ldrb	r3, [r7, #6]
     8ea:	2201      	movs	r2, #1
     8ec:	409a      	lsls	r2, r3
     8ee:	79fb      	ldrb	r3, [r7, #7]
     8f0:	4619      	mov	r1, r3
     8f2:	4807      	ldr	r0, [pc, #28]	; (910 <_gpio_set_pin_pull_mode+0xa0>)
     8f4:	4b0b      	ldr	r3, [pc, #44]	; (924 <_gpio_set_pin_pull_mode+0xb4>)
     8f6:	4798      	blx	r3
		break;
     8f8:	e005      	b.n	906 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     8fa:	2289      	movs	r2, #137	; 0x89
     8fc:	490a      	ldr	r1, [pc, #40]	; (928 <_gpio_set_pin_pull_mode+0xb8>)
     8fe:	2000      	movs	r0, #0
     900:	4b0a      	ldr	r3, [pc, #40]	; (92c <_gpio_set_pin_pull_mode+0xbc>)
     902:	4798      	blx	r3
		break;
     904:	bf00      	nop
	}
}
     906:	bf00      	nop
     908:	3708      	adds	r7, #8
     90a:	46bd      	mov	sp, r7
     90c:	bd80      	pop	{r7, pc}
     90e:	bf00      	nop
     910:	41008000 	.word	0x41008000
     914:	000006d9 	.word	0x000006d9
     918:	00000505 	.word	0x00000505
     91c:	00000695 	.word	0x00000695
     920:	0000052d 	.word	0x0000052d
     924:	00000555 	.word	0x00000555
     928:	000033fc 	.word	0x000033fc
     92c:	000013cd 	.word	0x000013cd

00000930 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     930:	b590      	push	{r4, r7, lr}
     932:	b085      	sub	sp, #20
     934:	af00      	add	r7, sp, #0
     936:	6078      	str	r0, [r7, #4]
     938:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	095b      	lsrs	r3, r3, #5
     93e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     940:	687b      	ldr	r3, [r7, #4]
     942:	b2db      	uxtb	r3, r3
     944:	f003 031f 	and.w	r3, r3, #31
     948:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     94a:	683b      	ldr	r3, [r7, #0]
     94c:	f1b3 3fff 	cmp.w	r3, #4294967295
     950:	d106      	bne.n	960 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     952:	7bba      	ldrb	r2, [r7, #14]
     954:	7bf9      	ldrb	r1, [r7, #15]
     956:	2300      	movs	r3, #0
     958:	4812      	ldr	r0, [pc, #72]	; (9a4 <_gpio_set_pin_function+0x74>)
     95a:	4c13      	ldr	r4, [pc, #76]	; (9a8 <_gpio_set_pin_function+0x78>)
     95c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     95e:	e01d      	b.n	99c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     960:	7bba      	ldrb	r2, [r7, #14]
     962:	7bf9      	ldrb	r1, [r7, #15]
     964:	2301      	movs	r3, #1
     966:	480f      	ldr	r0, [pc, #60]	; (9a4 <_gpio_set_pin_function+0x74>)
     968:	4c0f      	ldr	r4, [pc, #60]	; (9a8 <_gpio_set_pin_function+0x78>)
     96a:	47a0      	blx	r4
		if (pin & 1) {
     96c:	7bbb      	ldrb	r3, [r7, #14]
     96e:	f003 0301 	and.w	r3, r3, #1
     972:	2b00      	cmp	r3, #0
     974:	d009      	beq.n	98a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     976:	7bbb      	ldrb	r3, [r7, #14]
     978:	085b      	lsrs	r3, r3, #1
     97a:	b2da      	uxtb	r2, r3
     97c:	683b      	ldr	r3, [r7, #0]
     97e:	b2db      	uxtb	r3, r3
     980:	7bf9      	ldrb	r1, [r7, #15]
     982:	4808      	ldr	r0, [pc, #32]	; (9a4 <_gpio_set_pin_function+0x74>)
     984:	4c09      	ldr	r4, [pc, #36]	; (9ac <_gpio_set_pin_function+0x7c>)
     986:	47a0      	blx	r4
}
     988:	e008      	b.n	99c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     98a:	7bbb      	ldrb	r3, [r7, #14]
     98c:	085b      	lsrs	r3, r3, #1
     98e:	b2da      	uxtb	r2, r3
     990:	683b      	ldr	r3, [r7, #0]
     992:	b2db      	uxtb	r3, r3
     994:	7bf9      	ldrb	r1, [r7, #15]
     996:	4803      	ldr	r0, [pc, #12]	; (9a4 <_gpio_set_pin_function+0x74>)
     998:	4c05      	ldr	r4, [pc, #20]	; (9b0 <_gpio_set_pin_function+0x80>)
     99a:	47a0      	blx	r4
}
     99c:	bf00      	nop
     99e:	3714      	adds	r7, #20
     9a0:	46bd      	mov	sp, r7
     9a2:	bd90      	pop	{r4, r7, pc}
     9a4:	41008000 	.word	0x41008000
     9a8:	0000063b 	.word	0x0000063b
     9ac:	000005dd 	.word	0x000005dd
     9b0:	0000057d 	.word	0x0000057d

000009b4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	b082      	sub	sp, #8
     9b8:	af00      	add	r7, sp, #0
     9ba:	4603      	mov	r3, r0
     9bc:	460a      	mov	r2, r1
     9be:	71fb      	strb	r3, [r7, #7]
     9c0:	4613      	mov	r3, r2
     9c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     9c4:	79fb      	ldrb	r3, [r7, #7]
     9c6:	095b      	lsrs	r3, r3, #5
     9c8:	b2d8      	uxtb	r0, r3
     9ca:	79fb      	ldrb	r3, [r7, #7]
     9cc:	f003 031f 	and.w	r3, r3, #31
     9d0:	b2db      	uxtb	r3, r3
     9d2:	79ba      	ldrb	r2, [r7, #6]
     9d4:	4619      	mov	r1, r3
     9d6:	4b03      	ldr	r3, [pc, #12]	; (9e4 <gpio_set_pin_pull_mode+0x30>)
     9d8:	4798      	blx	r3
}
     9da:	bf00      	nop
     9dc:	3708      	adds	r7, #8
     9de:	46bd      	mov	sp, r7
     9e0:	bd80      	pop	{r7, pc}
     9e2:	bf00      	nop
     9e4:	00000871 	.word	0x00000871

000009e8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     9e8:	b580      	push	{r7, lr}
     9ea:	b082      	sub	sp, #8
     9ec:	af00      	add	r7, sp, #0
     9ee:	6078      	str	r0, [r7, #4]
     9f0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     9f2:	6839      	ldr	r1, [r7, #0]
     9f4:	6878      	ldr	r0, [r7, #4]
     9f6:	4b03      	ldr	r3, [pc, #12]	; (a04 <gpio_set_pin_function+0x1c>)
     9f8:	4798      	blx	r3
}
     9fa:	bf00      	nop
     9fc:	3708      	adds	r7, #8
     9fe:	46bd      	mov	sp, r7
     a00:	bd80      	pop	{r7, pc}
     a02:	bf00      	nop
     a04:	00000931 	.word	0x00000931

00000a08 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     a08:	b580      	push	{r7, lr}
     a0a:	b082      	sub	sp, #8
     a0c:	af00      	add	r7, sp, #0
     a0e:	4603      	mov	r3, r0
     a10:	460a      	mov	r2, r1
     a12:	71fb      	strb	r3, [r7, #7]
     a14:	4613      	mov	r3, r2
     a16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     a18:	79fb      	ldrb	r3, [r7, #7]
     a1a:	095b      	lsrs	r3, r3, #5
     a1c:	b2d8      	uxtb	r0, r3
     a1e:	79fb      	ldrb	r3, [r7, #7]
     a20:	f003 031f 	and.w	r3, r3, #31
     a24:	2201      	movs	r2, #1
     a26:	fa02 f303 	lsl.w	r3, r2, r3
     a2a:	79ba      	ldrb	r2, [r7, #6]
     a2c:	4619      	mov	r1, r3
     a2e:	4b03      	ldr	r3, [pc, #12]	; (a3c <gpio_set_pin_direction+0x34>)
     a30:	4798      	blx	r3
}
     a32:	bf00      	nop
     a34:	3708      	adds	r7, #8
     a36:	46bd      	mov	sp, r7
     a38:	bd80      	pop	{r7, pc}
     a3a:	bf00      	nop
     a3c:	00000745 	.word	0x00000745

00000a40 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	4603      	mov	r3, r0
     a48:	460a      	mov	r2, r1
     a4a:	71fb      	strb	r3, [r7, #7]
     a4c:	4613      	mov	r3, r2
     a4e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     a50:	79fb      	ldrb	r3, [r7, #7]
     a52:	095b      	lsrs	r3, r3, #5
     a54:	b2d8      	uxtb	r0, r3
     a56:	79fb      	ldrb	r3, [r7, #7]
     a58:	f003 031f 	and.w	r3, r3, #31
     a5c:	2201      	movs	r2, #1
     a5e:	fa02 f303 	lsl.w	r3, r2, r3
     a62:	79ba      	ldrb	r2, [r7, #6]
     a64:	4619      	mov	r1, r3
     a66:	4b03      	ldr	r3, [pc, #12]	; (a74 <gpio_set_pin_level+0x34>)
     a68:	4798      	blx	r3
}
     a6a:	bf00      	nop
     a6c:	3708      	adds	r7, #8
     a6e:	46bd      	mov	sp, r7
     a70:	bd80      	pop	{r7, pc}
     a72:	bf00      	nop
     a74:	0000082d 	.word	0x0000082d

00000a78 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     a78:	b580      	push	{r7, lr}
     a7a:	af00      	add	r7, sp, #0
	_init_chip();
     a7c:	4b01      	ldr	r3, [pc, #4]	; (a84 <init_mcu+0xc>)
     a7e:	4798      	blx	r3
}
     a80:	bf00      	nop
     a82:	bd80      	pop	{r7, pc}
     a84:	000015ad 	.word	0x000015ad

00000a88 <USART_0_PORT_init>:
struct timer_descriptor TIMER_0;

struct usart_sync_descriptor USART_0;

void USART_0_PORT_init(void)
{
     a88:	b580      	push	{r7, lr}
     a8a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     a8c:	4904      	ldr	r1, [pc, #16]	; (aa0 <USART_0_PORT_init+0x18>)
     a8e:	2039      	movs	r0, #57	; 0x39
     a90:	4b04      	ldr	r3, [pc, #16]	; (aa4 <USART_0_PORT_init+0x1c>)
     a92:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     a94:	4904      	ldr	r1, [pc, #16]	; (aa8 <USART_0_PORT_init+0x20>)
     a96:	2038      	movs	r0, #56	; 0x38
     a98:	4b02      	ldr	r3, [pc, #8]	; (aa4 <USART_0_PORT_init+0x1c>)
     a9a:	4798      	blx	r3
}
     a9c:	bf00      	nop
     a9e:	bd80      	pop	{r7, pc}
     aa0:	00390003 	.word	0x00390003
     aa4:	000009e9 	.word	0x000009e9
     aa8:	00380003 	.word	0x00380003

00000aac <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     aac:	b580      	push	{r7, lr}
     aae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ab0:	2240      	movs	r2, #64	; 0x40
     ab2:	2117      	movs	r1, #23
     ab4:	4806      	ldr	r0, [pc, #24]	; (ad0 <USART_0_CLOCK_init+0x24>)
     ab6:	4b07      	ldr	r3, [pc, #28]	; (ad4 <USART_0_CLOCK_init+0x28>)
     ab8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aba:	2243      	movs	r2, #67	; 0x43
     abc:	2103      	movs	r1, #3
     abe:	4804      	ldr	r0, [pc, #16]	; (ad0 <USART_0_CLOCK_init+0x24>)
     ac0:	4b04      	ldr	r3, [pc, #16]	; (ad4 <USART_0_CLOCK_init+0x28>)
     ac2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     ac4:	4804      	ldr	r0, [pc, #16]	; (ad8 <USART_0_CLOCK_init+0x2c>)
     ac6:	4b05      	ldr	r3, [pc, #20]	; (adc <USART_0_CLOCK_init+0x30>)
     ac8:	4798      	blx	r3
}
     aca:	bf00      	nop
     acc:	bd80      	pop	{r7, pc}
     ace:	bf00      	nop
     ad0:	40001c00 	.word	0x40001c00
     ad4:	00000437 	.word	0x00000437
     ad8:	40000800 	.word	0x40000800
     adc:	0000047d 	.word	0x0000047d

00000ae0 <USART_0_init>:

void USART_0_init(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     ae4:	4b05      	ldr	r3, [pc, #20]	; (afc <USART_0_init+0x1c>)
     ae6:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     ae8:	2200      	movs	r2, #0
     aea:	4905      	ldr	r1, [pc, #20]	; (b00 <USART_0_init+0x20>)
     aec:	4805      	ldr	r0, [pc, #20]	; (b04 <USART_0_init+0x24>)
     aee:	4b06      	ldr	r3, [pc, #24]	; (b08 <USART_0_init+0x28>)
     af0:	4798      	blx	r3
	USART_0_PORT_init();
     af2:	4b06      	ldr	r3, [pc, #24]	; (b0c <USART_0_init+0x2c>)
     af4:	4798      	blx	r3
}
     af6:	bf00      	nop
     af8:	bd80      	pop	{r7, pc}
     afa:	bf00      	nop
     afc:	00000aad 	.word	0x00000aad
     b00:	41012000 	.word	0x41012000
     b04:	2000011c 	.word	0x2000011c
     b08:	0000117d 	.word	0x0000117d
     b0c:	00000a89 	.word	0x00000a89

00000b10 <delay_driver_init>:

void delay_driver_init(void)
{
     b10:	b580      	push	{r7, lr}
     b12:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     b14:	4802      	ldr	r0, [pc, #8]	; (b20 <delay_driver_init+0x10>)
     b16:	4b03      	ldr	r3, [pc, #12]	; (b24 <delay_driver_init+0x14>)
     b18:	4798      	blx	r3
}
     b1a:	bf00      	nop
     b1c:	bd80      	pop	{r7, pc}
     b1e:	bf00      	nop
     b20:	e000e010 	.word	0xe000e010
     b24:	00000d55 	.word	0x00000d55

00000b28 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     b28:	b580      	push	{r7, lr}
     b2a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     b2c:	4808      	ldr	r0, [pc, #32]	; (b50 <TIMER_1_init+0x28>)
     b2e:	4b09      	ldr	r3, [pc, #36]	; (b54 <TIMER_1_init+0x2c>)
     b30:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b32:	2240      	movs	r2, #64	; 0x40
     b34:	2109      	movs	r1, #9
     b36:	4808      	ldr	r0, [pc, #32]	; (b58 <TIMER_1_init+0x30>)
     b38:	4b08      	ldr	r3, [pc, #32]	; (b5c <TIMER_1_init+0x34>)
     b3a:	4798      	blx	r3

	timer_init(&TIMER_1, TC0, _tc_get_timer());
     b3c:	4b08      	ldr	r3, [pc, #32]	; (b60 <TIMER_1_init+0x38>)
     b3e:	4798      	blx	r3
     b40:	4603      	mov	r3, r0
     b42:	461a      	mov	r2, r3
     b44:	4907      	ldr	r1, [pc, #28]	; (b64 <TIMER_1_init+0x3c>)
     b46:	4808      	ldr	r0, [pc, #32]	; (b68 <TIMER_1_init+0x40>)
     b48:	4b08      	ldr	r3, [pc, #32]	; (b6c <TIMER_1_init+0x44>)
     b4a:	4798      	blx	r3
}
     b4c:	bf00      	nop
     b4e:	bd80      	pop	{r7, pc}
     b50:	40000800 	.word	0x40000800
     b54:	0000045d 	.word	0x0000045d
     b58:	40001c00 	.word	0x40001c00
     b5c:	00000437 	.word	0x00000437
     b60:	000026e1 	.word	0x000026e1
     b64:	40003800 	.word	0x40003800
     b68:	20000100 	.word	0x20000100
     b6c:	00000e09 	.word	0x00000e09

00000b70 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     b70:	b580      	push	{r7, lr}
     b72:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
     b74:	4808      	ldr	r0, [pc, #32]	; (b98 <TIMER_0_init+0x28>)
     b76:	4b09      	ldr	r3, [pc, #36]	; (b9c <TIMER_0_init+0x2c>)
     b78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b7a:	2240      	movs	r2, #64	; 0x40
     b7c:	211a      	movs	r1, #26
     b7e:	4808      	ldr	r0, [pc, #32]	; (ba0 <TIMER_0_init+0x30>)
     b80:	4b08      	ldr	r3, [pc, #32]	; (ba4 <TIMER_0_init+0x34>)
     b82:	4798      	blx	r3

	timer_init(&TIMER_0, TC2, _tc_get_timer());
     b84:	4b08      	ldr	r3, [pc, #32]	; (ba8 <TIMER_0_init+0x38>)
     b86:	4798      	blx	r3
     b88:	4603      	mov	r3, r0
     b8a:	461a      	mov	r2, r3
     b8c:	4907      	ldr	r1, [pc, #28]	; (bac <TIMER_0_init+0x3c>)
     b8e:	4808      	ldr	r0, [pc, #32]	; (bb0 <TIMER_0_init+0x40>)
     b90:	4b08      	ldr	r3, [pc, #32]	; (bb4 <TIMER_0_init+0x44>)
     b92:	4798      	blx	r3
}
     b94:	bf00      	nop
     b96:	bd80      	pop	{r7, pc}
     b98:	40000800 	.word	0x40000800
     b9c:	000004bd 	.word	0x000004bd
     ba0:	40001c00 	.word	0x40001c00
     ba4:	00000437 	.word	0x00000437
     ba8:	000026e1 	.word	0x000026e1
     bac:	4101a000 	.word	0x4101a000
     bb0:	20000128 	.word	0x20000128
     bb4:	00000e09 	.word	0x00000e09

00000bb8 <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     bb8:	b580      	push	{r7, lr}
     bba:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     bbc:	4902      	ldr	r1, [pc, #8]	; (bc8 <PWM_0_PORT_init+0x10>)
     bbe:	204a      	movs	r0, #74	; 0x4a
     bc0:	4b02      	ldr	r3, [pc, #8]	; (bcc <PWM_0_PORT_init+0x14>)
     bc2:	4798      	blx	r3
}
     bc4:	bf00      	nop
     bc6:	bd80      	pop	{r7, pc}
     bc8:	004a0005 	.word	0x004a0005
     bcc:	000009e9 	.word	0x000009e9

00000bd0 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     bd0:	b580      	push	{r7, lr}
     bd2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     bd4:	4804      	ldr	r0, [pc, #16]	; (be8 <PWM_0_CLOCK_init+0x18>)
     bd6:	4b05      	ldr	r3, [pc, #20]	; (bec <PWM_0_CLOCK_init+0x1c>)
     bd8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bda:	2240      	movs	r2, #64	; 0x40
     bdc:	2119      	movs	r1, #25
     bde:	4804      	ldr	r0, [pc, #16]	; (bf0 <PWM_0_CLOCK_init+0x20>)
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <PWM_0_CLOCK_init+0x24>)
     be2:	4798      	blx	r3
}
     be4:	bf00      	nop
     be6:	bd80      	pop	{r7, pc}
     be8:	40000800 	.word	0x40000800
     bec:	0000049d 	.word	0x0000049d
     bf0:	40001c00 	.word	0x40001c00
     bf4:	00000437 	.word	0x00000437

00000bf8 <system_init>:

void system_init(void)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	af00      	add	r7, sp, #0
	init_mcu();
     bfc:	4b36      	ldr	r3, [pc, #216]	; (cd8 <system_init+0xe0>)
     bfe:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     c00:	2101      	movs	r1, #1
     c02:	2021      	movs	r0, #33	; 0x21
     c04:	4b35      	ldr	r3, [pc, #212]	; (cdc <system_init+0xe4>)
     c06:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     c08:	2100      	movs	r1, #0
     c0a:	2021      	movs	r0, #33	; 0x21
     c0c:	4b34      	ldr	r3, [pc, #208]	; (ce0 <system_init+0xe8>)
     c0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     c10:	f04f 31ff 	mov.w	r1, #4294967295
     c14:	2021      	movs	r0, #33	; 0x21
     c16:	4b33      	ldr	r3, [pc, #204]	; (ce4 <system_init+0xec>)
     c18:	4798      	blx	r3

	// GPIO on PB04

	gpio_set_pin_level(LED_green2,
     c1a:	2100      	movs	r1, #0
     c1c:	2024      	movs	r0, #36	; 0x24
     c1e:	4b32      	ldr	r3, [pc, #200]	; (ce8 <system_init+0xf0>)
     c20:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED_green2, GPIO_DIRECTION_OUT);
     c22:	2102      	movs	r1, #2
     c24:	2024      	movs	r0, #36	; 0x24
     c26:	4b2d      	ldr	r3, [pc, #180]	; (cdc <system_init+0xe4>)
     c28:	4798      	blx	r3

	gpio_set_pin_function(LED_green2, GPIO_PIN_FUNCTION_OFF);
     c2a:	f04f 31ff 	mov.w	r1, #4294967295
     c2e:	2024      	movs	r0, #36	; 0x24
     c30:	4b2c      	ldr	r3, [pc, #176]	; (ce4 <system_init+0xec>)
     c32:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT1, GPIO_DIRECTION_IN);
     c34:	2101      	movs	r1, #1
     c36:	2025      	movs	r0, #37	; 0x25
     c38:	4b28      	ldr	r3, [pc, #160]	; (cdc <system_init+0xe4>)
     c3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT1,
     c3c:	2101      	movs	r1, #1
     c3e:	2025      	movs	r0, #37	; 0x25
     c40:	4b27      	ldr	r3, [pc, #156]	; (ce0 <system_init+0xe8>)
     c42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT1, GPIO_PIN_FUNCTION_OFF);
     c44:	f04f 31ff 	mov.w	r1, #4294967295
     c48:	2025      	movs	r0, #37	; 0x25
     c4a:	4b26      	ldr	r3, [pc, #152]	; (ce4 <system_init+0xec>)
     c4c:	4798      	blx	r3

	// GPIO on PB14

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT2, GPIO_DIRECTION_IN);
     c4e:	2101      	movs	r1, #1
     c50:	202e      	movs	r0, #46	; 0x2e
     c52:	4b22      	ldr	r3, [pc, #136]	; (cdc <system_init+0xe4>)
     c54:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT2,
     c56:	2101      	movs	r1, #1
     c58:	202e      	movs	r0, #46	; 0x2e
     c5a:	4b21      	ldr	r3, [pc, #132]	; (ce0 <system_init+0xe8>)
     c5c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT2, GPIO_PIN_FUNCTION_OFF);
     c5e:	f04f 31ff 	mov.w	r1, #4294967295
     c62:	202e      	movs	r0, #46	; 0x2e
     c64:	4b1f      	ldr	r3, [pc, #124]	; (ce4 <system_init+0xec>)
     c66:	4798      	blx	r3

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT3, GPIO_DIRECTION_IN);
     c68:	2101      	movs	r1, #1
     c6a:	202f      	movs	r0, #47	; 0x2f
     c6c:	4b1b      	ldr	r3, [pc, #108]	; (cdc <system_init+0xe4>)
     c6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT3,
     c70:	2101      	movs	r1, #1
     c72:	202f      	movs	r0, #47	; 0x2f
     c74:	4b1a      	ldr	r3, [pc, #104]	; (ce0 <system_init+0xe8>)
     c76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT3, GPIO_PIN_FUNCTION_OFF);
     c78:	f04f 31ff 	mov.w	r1, #4294967295
     c7c:	202f      	movs	r0, #47	; 0x2f
     c7e:	4b19      	ldr	r3, [pc, #100]	; (ce4 <system_init+0xec>)
     c80:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     c82:	2101      	movs	r1, #1
     c84:	203f      	movs	r0, #63	; 0x3f
     c86:	4b15      	ldr	r3, [pc, #84]	; (cdc <system_init+0xe4>)
     c88:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     c8a:	2101      	movs	r1, #1
     c8c:	203f      	movs	r0, #63	; 0x3f
     c8e:	4b14      	ldr	r3, [pc, #80]	; (ce0 <system_init+0xe8>)
     c90:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     c92:	f04f 31ff 	mov.w	r1, #4294967295
     c96:	203f      	movs	r0, #63	; 0x3f
     c98:	4b12      	ldr	r3, [pc, #72]	; (ce4 <system_init+0xec>)
     c9a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     c9c:	2100      	movs	r1, #0
     c9e:	2052      	movs	r0, #82	; 0x52
     ca0:	4b11      	ldr	r3, [pc, #68]	; (ce8 <system_init+0xf0>)
     ca2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     ca4:	2102      	movs	r1, #2
     ca6:	2052      	movs	r0, #82	; 0x52
     ca8:	4b0c      	ldr	r3, [pc, #48]	; (cdc <system_init+0xe4>)
     caa:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     cac:	f04f 31ff 	mov.w	r1, #4294967295
     cb0:	2052      	movs	r0, #82	; 0x52
     cb2:	4b0c      	ldr	r3, [pc, #48]	; (ce4 <system_init+0xec>)
     cb4:	4798      	blx	r3

	USART_0_init();
     cb6:	4b0d      	ldr	r3, [pc, #52]	; (cec <system_init+0xf4>)
     cb8:	4798      	blx	r3

	delay_driver_init();
     cba:	4b0d      	ldr	r3, [pc, #52]	; (cf0 <system_init+0xf8>)
     cbc:	4798      	blx	r3

	TIMER_1_init();
     cbe:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <system_init+0xfc>)
     cc0:	4798      	blx	r3
	TIMER_0_init();
     cc2:	4b0d      	ldr	r3, [pc, #52]	; (cf8 <system_init+0x100>)
     cc4:	4798      	blx	r3
	PWM_0_CLOCK_init();
     cc6:	4b0d      	ldr	r3, [pc, #52]	; (cfc <system_init+0x104>)
     cc8:	4798      	blx	r3

	PWM_0_PORT_init();
     cca:	4b0d      	ldr	r3, [pc, #52]	; (d00 <system_init+0x108>)
     ccc:	4798      	blx	r3

	PWM_0_init();
     cce:	4b0d      	ldr	r3, [pc, #52]	; (d04 <system_init+0x10c>)
     cd0:	4798      	blx	r3
}
     cd2:	bf00      	nop
     cd4:	bd80      	pop	{r7, pc}
     cd6:	bf00      	nop
     cd8:	00000a79 	.word	0x00000a79
     cdc:	00000a09 	.word	0x00000a09
     ce0:	000009b5 	.word	0x000009b5
     ce4:	000009e9 	.word	0x000009e9
     ce8:	00000a41 	.word	0x00000a41
     cec:	00000ae1 	.word	0x00000ae1
     cf0:	00000b11 	.word	0x00000b11
     cf4:	00000b29 	.word	0x00000b29
     cf8:	00000b71 	.word	0x00000b71
     cfc:	00000bd1 	.word	0x00000bd1
     d00:	00000bb9 	.word	0x00000bb9
     d04:	00001ff5 	.word	0x00001ff5

00000d08 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     d08:	b480      	push	{r7}
     d0a:	b085      	sub	sp, #20
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d10:	f3ef 8310 	mrs	r3, PRIMASK
     d14:	60fb      	str	r3, [r7, #12]
  return(result);
     d16:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d1c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d1e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d22:	bf00      	nop
     d24:	3714      	adds	r7, #20
     d26:	46bd      	mov	sp, r7
     d28:	f85d 7b04 	ldr.w	r7, [sp], #4
     d2c:	4770      	bx	lr

00000d2e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     d2e:	b480      	push	{r7}
     d30:	b085      	sub	sp, #20
     d32:	af00      	add	r7, sp, #0
     d34:	6078      	str	r0, [r7, #4]
     d36:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d40:	68fb      	ldr	r3, [r7, #12]
     d42:	f383 8810 	msr	PRIMASK, r3
}
     d46:	bf00      	nop
     d48:	3714      	adds	r7, #20
     d4a:	46bd      	mov	sp, r7
     d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d50:	4770      	bx	lr
	...

00000d54 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d54:	b580      	push	{r7, lr}
     d56:	b082      	sub	sp, #8
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     d5c:	4a05      	ldr	r2, [pc, #20]	; (d74 <delay_init+0x20>)
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	6013      	str	r3, [r2, #0]
     d62:	4b04      	ldr	r3, [pc, #16]	; (d74 <delay_init+0x20>)
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	4618      	mov	r0, r3
     d68:	4b03      	ldr	r3, [pc, #12]	; (d78 <delay_init+0x24>)
     d6a:	4798      	blx	r3
}
     d6c:	bf00      	nop
     d6e:	3708      	adds	r7, #8
     d70:	46bd      	mov	sp, r7
     d72:	bd80      	pop	{r7, pc}
     d74:	200000c8 	.word	0x200000c8
     d78:	00001ea9 	.word	0x00001ea9

00000d7c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	b084      	sub	sp, #16
     d80:	af00      	add	r7, sp, #0
     d82:	60f8      	str	r0, [r7, #12]
     d84:	60b9      	str	r1, [r7, #8]
     d86:	4613      	mov	r3, r2
     d88:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d004      	beq.n	d9a <io_write+0x1e>
     d90:	68bb      	ldr	r3, [r7, #8]
     d92:	2b00      	cmp	r3, #0
     d94:	d001      	beq.n	d9a <io_write+0x1e>
     d96:	2301      	movs	r3, #1
     d98:	e000      	b.n	d9c <io_write+0x20>
     d9a:	2300      	movs	r3, #0
     d9c:	f003 0301 	and.w	r3, r3, #1
     da0:	b2db      	uxtb	r3, r3
     da2:	2234      	movs	r2, #52	; 0x34
     da4:	4907      	ldr	r1, [pc, #28]	; (dc4 <io_write+0x48>)
     da6:	4618      	mov	r0, r3
     da8:	4b07      	ldr	r3, [pc, #28]	; (dc8 <io_write+0x4c>)
     daa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     dac:	68fb      	ldr	r3, [r7, #12]
     dae:	681b      	ldr	r3, [r3, #0]
     db0:	88fa      	ldrh	r2, [r7, #6]
     db2:	68b9      	ldr	r1, [r7, #8]
     db4:	68f8      	ldr	r0, [r7, #12]
     db6:	4798      	blx	r3
     db8:	4603      	mov	r3, r0
}
     dba:	4618      	mov	r0, r3
     dbc:	3710      	adds	r7, #16
     dbe:	46bd      	mov	sp, r7
     dc0:	bd80      	pop	{r7, pc}
     dc2:	bf00      	nop
     dc4:	00003418 	.word	0x00003418
     dc8:	000013cd 	.word	0x000013cd

00000dcc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     dcc:	b480      	push	{r7}
     dce:	b083      	sub	sp, #12
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	681b      	ldr	r3, [r3, #0]
}
     dd8:	4618      	mov	r0, r3
     dda:	370c      	adds	r7, #12
     ddc:	46bd      	mov	sp, r7
     dde:	f85d 7b04 	ldr.w	r7, [sp], #4
     de2:	4770      	bx	lr

00000de4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     de4:	b480      	push	{r7}
     de6:	b083      	sub	sp, #12
     de8:	af00      	add	r7, sp, #0
     dea:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	2b00      	cmp	r3, #0
     df0:	d002      	beq.n	df8 <list_get_next_element+0x14>
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	e000      	b.n	dfa <list_get_next_element+0x16>
     df8:	2300      	movs	r3, #0
}
     dfa:	4618      	mov	r0, r3
     dfc:	370c      	adds	r7, #12
     dfe:	46bd      	mov	sp, r7
     e00:	f85d 7b04 	ldr.w	r7, [sp], #4
     e04:	4770      	bx	lr
	...

00000e08 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     e08:	b580      	push	{r7, lr}
     e0a:	b084      	sub	sp, #16
     e0c:	af00      	add	r7, sp, #0
     e0e:	60f8      	str	r0, [r7, #12]
     e10:	60b9      	str	r1, [r7, #8]
     e12:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     e14:	68fb      	ldr	r3, [r7, #12]
     e16:	2b00      	cmp	r3, #0
     e18:	d004      	beq.n	e24 <timer_init+0x1c>
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d001      	beq.n	e24 <timer_init+0x1c>
     e20:	2301      	movs	r3, #1
     e22:	e000      	b.n	e26 <timer_init+0x1e>
     e24:	2300      	movs	r3, #0
     e26:	f003 0301 	and.w	r3, r3, #1
     e2a:	b2db      	uxtb	r3, r3
     e2c:	223b      	movs	r2, #59	; 0x3b
     e2e:	490a      	ldr	r1, [pc, #40]	; (e58 <timer_init+0x50>)
     e30:	4618      	mov	r0, r3
     e32:	4b0a      	ldr	r3, [pc, #40]	; (e5c <timer_init+0x54>)
     e34:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     e36:	68fb      	ldr	r3, [r7, #12]
     e38:	68b9      	ldr	r1, [r7, #8]
     e3a:	4618      	mov	r0, r3
     e3c:	4b08      	ldr	r3, [pc, #32]	; (e60 <timer_init+0x58>)
     e3e:	4798      	blx	r3
	descr->time                           = 0;
     e40:	68fb      	ldr	r3, [r7, #12]
     e42:	2200      	movs	r2, #0
     e44:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	4a06      	ldr	r2, [pc, #24]	; (e64 <timer_init+0x5c>)
     e4a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     e4c:	2300      	movs	r3, #0
}
     e4e:	4618      	mov	r0, r3
     e50:	3710      	adds	r7, #16
     e52:	46bd      	mov	sp, r7
     e54:	bd80      	pop	{r7, pc}
     e56:	bf00      	nop
     e58:	0000342c 	.word	0x0000342c
     e5c:	000013cd 	.word	0x000013cd
     e60:	000023d1 	.word	0x000023d1
     e64:	000010c1 	.word	0x000010c1

00000e68 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
     e68:	b580      	push	{r7, lr}
     e6a:	b082      	sub	sp, #8
     e6c:	af00      	add	r7, sp, #0
     e6e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	2b00      	cmp	r3, #0
     e74:	bf14      	ite	ne
     e76:	2301      	movne	r3, #1
     e78:	2300      	moveq	r3, #0
     e7a:	b2db      	uxtb	r3, r3
     e7c:	2253      	movs	r2, #83	; 0x53
     e7e:	490b      	ldr	r1, [pc, #44]	; (eac <timer_start+0x44>)
     e80:	4618      	mov	r0, r3
     e82:	4b0b      	ldr	r3, [pc, #44]	; (eb0 <timer_start+0x48>)
     e84:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	4618      	mov	r0, r3
     e8a:	4b0a      	ldr	r3, [pc, #40]	; (eb4 <timer_start+0x4c>)
     e8c:	4798      	blx	r3
     e8e:	4603      	mov	r3, r0
     e90:	2b00      	cmp	r3, #0
     e92:	d002      	beq.n	e9a <timer_start+0x32>
		return ERR_DENIED;
     e94:	f06f 0310 	mvn.w	r3, #16
     e98:	e004      	b.n	ea4 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	4618      	mov	r0, r3
     e9e:	4b06      	ldr	r3, [pc, #24]	; (eb8 <timer_start+0x50>)
     ea0:	4798      	blx	r3

	return ERR_NONE;
     ea2:	2300      	movs	r3, #0
}
     ea4:	4618      	mov	r0, r3
     ea6:	3708      	adds	r7, #8
     ea8:	46bd      	mov	sp, r7
     eaa:	bd80      	pop	{r7, pc}
     eac:	0000342c 	.word	0x0000342c
     eb0:	000013cd 	.word	0x000013cd
     eb4:	000026c1 	.word	0x000026c1
     eb8:	00002681 	.word	0x00002681

00000ebc <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
     ebc:	b580      	push	{r7, lr}
     ebe:	b082      	sub	sp, #8
     ec0:	af00      	add	r7, sp, #0
     ec2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	2b00      	cmp	r3, #0
     ec8:	bf14      	ite	ne
     eca:	2301      	movne	r3, #1
     ecc:	2300      	moveq	r3, #0
     ece:	b2db      	uxtb	r3, r3
     ed0:	2261      	movs	r2, #97	; 0x61
     ed2:	490d      	ldr	r1, [pc, #52]	; (f08 <timer_stop+0x4c>)
     ed4:	4618      	mov	r0, r3
     ed6:	4b0d      	ldr	r3, [pc, #52]	; (f0c <timer_stop+0x50>)
     ed8:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	4618      	mov	r0, r3
     ede:	4b0c      	ldr	r3, [pc, #48]	; (f10 <timer_stop+0x54>)
     ee0:	4798      	blx	r3
     ee2:	4603      	mov	r3, r0
     ee4:	f083 0301 	eor.w	r3, r3, #1
     ee8:	b2db      	uxtb	r3, r3
     eea:	2b00      	cmp	r3, #0
     eec:	d002      	beq.n	ef4 <timer_stop+0x38>
		return ERR_DENIED;
     eee:	f06f 0310 	mvn.w	r3, #16
     ef2:	e004      	b.n	efe <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	4618      	mov	r0, r3
     ef8:	4b06      	ldr	r3, [pc, #24]	; (f14 <timer_stop+0x58>)
     efa:	4798      	blx	r3

	return ERR_NONE;
     efc:	2300      	movs	r3, #0
}
     efe:	4618      	mov	r0, r3
     f00:	3708      	adds	r7, #8
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop
     f08:	0000342c 	.word	0x0000342c
     f0c:	000013cd 	.word	0x000013cd
     f10:	000026c1 	.word	0x000026c1
     f14:	000026a1 	.word	0x000026a1

00000f18 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
     f18:	b580      	push	{r7, lr}
     f1a:	b084      	sub	sp, #16
     f1c:	af00      	add	r7, sp, #0
     f1e:	6078      	str	r0, [r7, #4]
     f20:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	2b00      	cmp	r3, #0
     f26:	d004      	beq.n	f32 <timer_add_task+0x1a>
     f28:	683b      	ldr	r3, [r7, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d001      	beq.n	f32 <timer_add_task+0x1a>
     f2e:	2301      	movs	r3, #1
     f30:	e000      	b.n	f34 <timer_add_task+0x1c>
     f32:	2300      	movs	r3, #0
     f34:	f003 0301 	and.w	r3, r3, #1
     f38:	b2db      	uxtb	r3, r3
     f3a:	227a      	movs	r2, #122	; 0x7a
     f3c:	492d      	ldr	r1, [pc, #180]	; (ff4 <timer_add_task+0xdc>)
     f3e:	4618      	mov	r0, r3
     f40:	4b2d      	ldr	r3, [pc, #180]	; (ff8 <timer_add_task+0xe0>)
     f42:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     f44:	687b      	ldr	r3, [r7, #4]
     f46:	7e1b      	ldrb	r3, [r3, #24]
     f48:	b2db      	uxtb	r3, r3
     f4a:	f043 0301 	orr.w	r3, r3, #1
     f4e:	b2da      	uxtb	r2, r3
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	3314      	adds	r3, #20
     f58:	6839      	ldr	r1, [r7, #0]
     f5a:	4618      	mov	r0, r3
     f5c:	4b27      	ldr	r3, [pc, #156]	; (ffc <timer_add_task+0xe4>)
     f5e:	4798      	blx	r3
     f60:	4603      	mov	r3, r0
     f62:	2b00      	cmp	r3, #0
     f64:	d00f      	beq.n	f86 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	7e1b      	ldrb	r3, [r3, #24]
     f6a:	b2db      	uxtb	r3, r3
     f6c:	f023 0301 	bic.w	r3, r3, #1
     f70:	b2da      	uxtb	r2, r3
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
     f76:	227f      	movs	r2, #127	; 0x7f
     f78:	491e      	ldr	r1, [pc, #120]	; (ff4 <timer_add_task+0xdc>)
     f7a:	2000      	movs	r0, #0
     f7c:	4b1e      	ldr	r3, [pc, #120]	; (ff8 <timer_add_task+0xe0>)
     f7e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     f80:	f06f 0311 	mvn.w	r3, #17
     f84:	e032      	b.n	fec <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	691a      	ldr	r2, [r3, #16]
     f8a:	683b      	ldr	r3, [r7, #0]
     f8c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	f103 0014 	add.w	r0, r3, #20
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	691b      	ldr	r3, [r3, #16]
     f98:	461a      	mov	r2, r3
     f9a:	6839      	ldr	r1, [r7, #0]
     f9c:	4b18      	ldr	r3, [pc, #96]	; (1000 <timer_add_task+0xe8>)
     f9e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	7e1b      	ldrb	r3, [r3, #24]
     fa4:	b2db      	uxtb	r3, r3
     fa6:	f023 0301 	bic.w	r3, r3, #1
     faa:	b2da      	uxtb	r2, r3
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	7e1b      	ldrb	r3, [r3, #24]
     fb4:	b2db      	uxtb	r3, r3
     fb6:	f003 0302 	and.w	r3, r3, #2
     fba:	2b00      	cmp	r3, #0
     fbc:	d015      	beq.n	fea <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
     fbe:	f107 030c 	add.w	r3, r7, #12
     fc2:	4618      	mov	r0, r3
     fc4:	4b0f      	ldr	r3, [pc, #60]	; (1004 <timer_add_task+0xec>)
     fc6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	7e1b      	ldrb	r3, [r3, #24]
     fcc:	b2db      	uxtb	r3, r3
     fce:	f023 0302 	bic.w	r3, r3, #2
     fd2:	b2da      	uxtb	r2, r3
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	4618      	mov	r0, r3
     fdc:	4b0a      	ldr	r3, [pc, #40]	; (1008 <timer_add_task+0xf0>)
     fde:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     fe0:	f107 030c 	add.w	r3, r7, #12
     fe4:	4618      	mov	r0, r3
     fe6:	4b09      	ldr	r3, [pc, #36]	; (100c <timer_add_task+0xf4>)
     fe8:	4798      	blx	r3
	}

	return ERR_NONE;
     fea:	2300      	movs	r3, #0
}
     fec:	4618      	mov	r0, r3
     fee:	3710      	adds	r7, #16
     ff0:	46bd      	mov	sp, r7
     ff2:	bd80      	pop	{r7, pc}
     ff4:	0000342c 	.word	0x0000342c
     ff8:	000013cd 	.word	0x000013cd
     ffc:	000013f5 	.word	0x000013f5
    1000:	00001011 	.word	0x00001011
    1004:	00000d09 	.word	0x00000d09
    1008:	000026f1 	.word	0x000026f1
    100c:	00000d2f 	.word	0x00000d2f

00001010 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1010:	b580      	push	{r7, lr}
    1012:	b088      	sub	sp, #32
    1014:	af00      	add	r7, sp, #0
    1016:	60f8      	str	r0, [r7, #12]
    1018:	60b9      	str	r1, [r7, #8]
    101a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    101c:	2300      	movs	r3, #0
    101e:	61bb      	str	r3, [r7, #24]
    1020:	68f8      	ldr	r0, [r7, #12]
    1022:	4b23      	ldr	r3, [pc, #140]	; (10b0 <timer_add_timer_task+0xa0>)
    1024:	4798      	blx	r3
    1026:	6138      	str	r0, [r7, #16]

	if (!head) {
    1028:	693b      	ldr	r3, [r7, #16]
    102a:	2b00      	cmp	r3, #0
    102c:	d104      	bne.n	1038 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    102e:	68b9      	ldr	r1, [r7, #8]
    1030:	68f8      	ldr	r0, [r7, #12]
    1032:	4b20      	ldr	r3, [pc, #128]	; (10b4 <timer_add_timer_task+0xa4>)
    1034:	4798      	blx	r3
		return;
    1036:	e037      	b.n	10a8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1038:	693b      	ldr	r3, [r7, #16]
    103a:	61fb      	str	r3, [r7, #28]
    103c:	e022      	b.n	1084 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    103e:	69fb      	ldr	r3, [r7, #28]
    1040:	685a      	ldr	r2, [r3, #4]
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	429a      	cmp	r2, r3
    1046:	d808      	bhi.n	105a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    1048:	69fb      	ldr	r3, [r7, #28]
    104a:	689a      	ldr	r2, [r3, #8]
    104c:	69fb      	ldr	r3, [r7, #28]
    104e:	6859      	ldr	r1, [r3, #4]
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	1acb      	subs	r3, r1, r3
    1054:	4413      	add	r3, r2
    1056:	617b      	str	r3, [r7, #20]
    1058:	e009      	b.n	106e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    105a:	69fb      	ldr	r3, [r7, #28]
    105c:	689a      	ldr	r2, [r3, #8]
    105e:	69fb      	ldr	r3, [r7, #28]
    1060:	685b      	ldr	r3, [r3, #4]
    1062:	441a      	add	r2, r3
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	425b      	negs	r3, r3
    1068:	4413      	add	r3, r2
    106a:	3301      	adds	r3, #1
    106c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    106e:	68bb      	ldr	r3, [r7, #8]
    1070:	689a      	ldr	r2, [r3, #8]
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	429a      	cmp	r2, r3
    1076:	d909      	bls.n	108c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    1078:	69fb      	ldr	r3, [r7, #28]
    107a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    107c:	69f8      	ldr	r0, [r7, #28]
    107e:	4b0e      	ldr	r3, [pc, #56]	; (10b8 <timer_add_timer_task+0xa8>)
    1080:	4798      	blx	r3
    1082:	61f8      	str	r0, [r7, #28]
    1084:	69fb      	ldr	r3, [r7, #28]
    1086:	2b00      	cmp	r3, #0
    1088:	d1d9      	bne.n	103e <timer_add_timer_task+0x2e>
    108a:	e000      	b.n	108e <timer_add_timer_task+0x7e>
			break;
    108c:	bf00      	nop
	}

	if (it == head) {
    108e:	69fa      	ldr	r2, [r7, #28]
    1090:	693b      	ldr	r3, [r7, #16]
    1092:	429a      	cmp	r2, r3
    1094:	d104      	bne.n	10a0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    1096:	68b9      	ldr	r1, [r7, #8]
    1098:	68f8      	ldr	r0, [r7, #12]
    109a:	4b06      	ldr	r3, [pc, #24]	; (10b4 <timer_add_timer_task+0xa4>)
    109c:	4798      	blx	r3
    109e:	e003      	b.n	10a8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    10a0:	68b9      	ldr	r1, [r7, #8]
    10a2:	69b8      	ldr	r0, [r7, #24]
    10a4:	4b05      	ldr	r3, [pc, #20]	; (10bc <timer_add_timer_task+0xac>)
    10a6:	4798      	blx	r3
	}
}
    10a8:	3720      	adds	r7, #32
    10aa:	46bd      	mov	sp, r7
    10ac:	bd80      	pop	{r7, pc}
    10ae:	bf00      	nop
    10b0:	00000dcd 	.word	0x00000dcd
    10b4:	0000142d 	.word	0x0000142d
    10b8:	00000de5 	.word	0x00000de5
    10bc:	00001485 	.word	0x00001485

000010c0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    10c0:	b580      	push	{r7, lr}
    10c2:	b086      	sub	sp, #24
    10c4:	af00      	add	r7, sp, #0
    10c6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    10cc:	693b      	ldr	r3, [r7, #16]
    10ce:	3314      	adds	r3, #20
    10d0:	4618      	mov	r0, r3
    10d2:	4b27      	ldr	r3, [pc, #156]	; (1170 <timer_process_counted+0xb0>)
    10d4:	4798      	blx	r3
    10d6:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    10d8:	693b      	ldr	r3, [r7, #16]
    10da:	691b      	ldr	r3, [r3, #16]
    10dc:	1c5a      	adds	r2, r3, #1
    10de:	693b      	ldr	r3, [r7, #16]
    10e0:	611a      	str	r2, [r3, #16]
    10e2:	693b      	ldr	r3, [r7, #16]
    10e4:	691b      	ldr	r3, [r3, #16]
    10e6:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    10e8:	693b      	ldr	r3, [r7, #16]
    10ea:	7e1b      	ldrb	r3, [r3, #24]
    10ec:	b2db      	uxtb	r3, r3
    10ee:	f003 0301 	and.w	r3, r3, #1
    10f2:	2b00      	cmp	r3, #0
    10f4:	d106      	bne.n	1104 <timer_process_counted+0x44>
    10f6:	693b      	ldr	r3, [r7, #16]
    10f8:	7e1b      	ldrb	r3, [r3, #24]
    10fa:	b2db      	uxtb	r3, r3
    10fc:	f003 0302 	and.w	r3, r3, #2
    1100:	2b00      	cmp	r3, #0
    1102:	d027      	beq.n	1154 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1104:	693b      	ldr	r3, [r7, #16]
    1106:	7e1b      	ldrb	r3, [r3, #24]
    1108:	b2db      	uxtb	r3, r3
    110a:	f043 0302 	orr.w	r3, r3, #2
    110e:	b2da      	uxtb	r2, r3
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	761a      	strb	r2, [r3, #24]
		return;
    1114:	e029      	b.n	116a <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1116:	697b      	ldr	r3, [r7, #20]
    1118:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    111a:	693b      	ldr	r3, [r7, #16]
    111c:	3314      	adds	r3, #20
    111e:	4618      	mov	r0, r3
    1120:	4b14      	ldr	r3, [pc, #80]	; (1174 <timer_process_counted+0xb4>)
    1122:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1124:	68bb      	ldr	r3, [r7, #8]
    1126:	7c1b      	ldrb	r3, [r3, #16]
    1128:	2b01      	cmp	r3, #1
    112a:	d109      	bne.n	1140 <timer_process_counted+0x80>
			tmp->time_label = time;
    112c:	68bb      	ldr	r3, [r7, #8]
    112e:	68fa      	ldr	r2, [r7, #12]
    1130:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1132:	693b      	ldr	r3, [r7, #16]
    1134:	3314      	adds	r3, #20
    1136:	68fa      	ldr	r2, [r7, #12]
    1138:	68b9      	ldr	r1, [r7, #8]
    113a:	4618      	mov	r0, r3
    113c:	4b0e      	ldr	r3, [pc, #56]	; (1178 <timer_process_counted+0xb8>)
    113e:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1140:	693b      	ldr	r3, [r7, #16]
    1142:	3314      	adds	r3, #20
    1144:	4618      	mov	r0, r3
    1146:	4b0a      	ldr	r3, [pc, #40]	; (1170 <timer_process_counted+0xb0>)
    1148:	4798      	blx	r3
    114a:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    114c:	68bb      	ldr	r3, [r7, #8]
    114e:	68db      	ldr	r3, [r3, #12]
    1150:	68b8      	ldr	r0, [r7, #8]
    1152:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	2b00      	cmp	r3, #0
    1158:	d007      	beq.n	116a <timer_process_counted+0xaa>
    115a:	697b      	ldr	r3, [r7, #20]
    115c:	685b      	ldr	r3, [r3, #4]
    115e:	68fa      	ldr	r2, [r7, #12]
    1160:	1ad2      	subs	r2, r2, r3
    1162:	697b      	ldr	r3, [r7, #20]
    1164:	689b      	ldr	r3, [r3, #8]
    1166:	429a      	cmp	r2, r3
    1168:	d2d5      	bcs.n	1116 <timer_process_counted+0x56>
	}
}
    116a:	3718      	adds	r7, #24
    116c:	46bd      	mov	sp, r7
    116e:	bd80      	pop	{r7, pc}
    1170:	00000dcd 	.word	0x00000dcd
    1174:	000014a9 	.word	0x000014a9
    1178:	00001011 	.word	0x00001011

0000117c <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    117c:	b580      	push	{r7, lr}
    117e:	b086      	sub	sp, #24
    1180:	af00      	add	r7, sp, #0
    1182:	60f8      	str	r0, [r7, #12]
    1184:	60b9      	str	r1, [r7, #8]
    1186:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1188:	68fb      	ldr	r3, [r7, #12]
    118a:	2b00      	cmp	r3, #0
    118c:	d004      	beq.n	1198 <usart_sync_init+0x1c>
    118e:	68bb      	ldr	r3, [r7, #8]
    1190:	2b00      	cmp	r3, #0
    1192:	d001      	beq.n	1198 <usart_sync_init+0x1c>
    1194:	2301      	movs	r3, #1
    1196:	e000      	b.n	119a <usart_sync_init+0x1e>
    1198:	2300      	movs	r3, #0
    119a:	f003 0301 	and.w	r3, r3, #1
    119e:	b2db      	uxtb	r3, r3
    11a0:	2234      	movs	r2, #52	; 0x34
    11a2:	490d      	ldr	r1, [pc, #52]	; (11d8 <usart_sync_init+0x5c>)
    11a4:	4618      	mov	r0, r3
    11a6:	4b0d      	ldr	r3, [pc, #52]	; (11dc <usart_sync_init+0x60>)
    11a8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    11aa:	68fb      	ldr	r3, [r7, #12]
    11ac:	3308      	adds	r3, #8
    11ae:	68b9      	ldr	r1, [r7, #8]
    11b0:	4618      	mov	r0, r3
    11b2:	4b0b      	ldr	r3, [pc, #44]	; (11e0 <usart_sync_init+0x64>)
    11b4:	4798      	blx	r3
    11b6:	6178      	str	r0, [r7, #20]
	if (init_status) {
    11b8:	697b      	ldr	r3, [r7, #20]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d001      	beq.n	11c2 <usart_sync_init+0x46>
		return init_status;
    11be:	697b      	ldr	r3, [r7, #20]
    11c0:	e006      	b.n	11d0 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	4a07      	ldr	r2, [pc, #28]	; (11e4 <usart_sync_init+0x68>)
    11c6:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	4a07      	ldr	r2, [pc, #28]	; (11e8 <usart_sync_init+0x6c>)
    11cc:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    11ce:	2300      	movs	r3, #0
}
    11d0:	4618      	mov	r0, r3
    11d2:	3718      	adds	r7, #24
    11d4:	46bd      	mov	sp, r7
    11d6:	bd80      	pop	{r7, pc}
    11d8:	00003444 	.word	0x00003444
    11dc:	000013cd 	.word	0x000013cd
    11e0:	00001af1 	.word	0x00001af1
    11e4:	00001339 	.word	0x00001339
    11e8:	00001271 	.word	0x00001271

000011ec <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    11ec:	b580      	push	{r7, lr}
    11ee:	b082      	sub	sp, #8
    11f0:	af00      	add	r7, sp, #0
    11f2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    11f4:	687b      	ldr	r3, [r7, #4]
    11f6:	2b00      	cmp	r3, #0
    11f8:	bf14      	ite	ne
    11fa:	2301      	movne	r3, #1
    11fc:	2300      	moveq	r3, #0
    11fe:	b2db      	uxtb	r3, r3
    1200:	2253      	movs	r2, #83	; 0x53
    1202:	4907      	ldr	r1, [pc, #28]	; (1220 <usart_sync_enable+0x34>)
    1204:	4618      	mov	r0, r3
    1206:	4b07      	ldr	r3, [pc, #28]	; (1224 <usart_sync_enable+0x38>)
    1208:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	3308      	adds	r3, #8
    120e:	4618      	mov	r0, r3
    1210:	4b05      	ldr	r3, [pc, #20]	; (1228 <usart_sync_enable+0x3c>)
    1212:	4798      	blx	r3

	return ERR_NONE;
    1214:	2300      	movs	r3, #0
}
    1216:	4618      	mov	r0, r3
    1218:	3708      	adds	r7, #8
    121a:	46bd      	mov	sp, r7
    121c:	bd80      	pop	{r7, pc}
    121e:	bf00      	nop
    1220:	00003444 	.word	0x00003444
    1224:	000013cd 	.word	0x000013cd
    1228:	00001b35 	.word	0x00001b35

0000122c <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    122c:	b580      	push	{r7, lr}
    122e:	b082      	sub	sp, #8
    1230:	af00      	add	r7, sp, #0
    1232:	6078      	str	r0, [r7, #4]
    1234:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	2b00      	cmp	r3, #0
    123a:	d004      	beq.n	1246 <usart_sync_get_io_descriptor+0x1a>
    123c:	683b      	ldr	r3, [r7, #0]
    123e:	2b00      	cmp	r3, #0
    1240:	d001      	beq.n	1246 <usart_sync_get_io_descriptor+0x1a>
    1242:	2301      	movs	r3, #1
    1244:	e000      	b.n	1248 <usart_sync_get_io_descriptor+0x1c>
    1246:	2300      	movs	r3, #0
    1248:	f003 0301 	and.w	r3, r3, #1
    124c:	b2db      	uxtb	r3, r3
    124e:	2269      	movs	r2, #105	; 0x69
    1250:	4905      	ldr	r1, [pc, #20]	; (1268 <usart_sync_get_io_descriptor+0x3c>)
    1252:	4618      	mov	r0, r3
    1254:	4b05      	ldr	r3, [pc, #20]	; (126c <usart_sync_get_io_descriptor+0x40>)
    1256:	4798      	blx	r3

	*io = &descr->io;
    1258:	687a      	ldr	r2, [r7, #4]
    125a:	683b      	ldr	r3, [r7, #0]
    125c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    125e:	2300      	movs	r3, #0
}
    1260:	4618      	mov	r0, r3
    1262:	3708      	adds	r7, #8
    1264:	46bd      	mov	sp, r7
    1266:	bd80      	pop	{r7, pc}
    1268:	00003444 	.word	0x00003444
    126c:	000013cd 	.word	0x000013cd

00001270 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1270:	b580      	push	{r7, lr}
    1272:	b086      	sub	sp, #24
    1274:	af00      	add	r7, sp, #0
    1276:	60f8      	str	r0, [r7, #12]
    1278:	60b9      	str	r1, [r7, #8]
    127a:	4613      	mov	r3, r2
    127c:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    127e:	2300      	movs	r3, #0
    1280:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1286:	68fb      	ldr	r3, [r7, #12]
    1288:	2b00      	cmp	r3, #0
    128a:	d007      	beq.n	129c <usart_sync_write+0x2c>
    128c:	68bb      	ldr	r3, [r7, #8]
    128e:	2b00      	cmp	r3, #0
    1290:	d004      	beq.n	129c <usart_sync_write+0x2c>
    1292:	88fb      	ldrh	r3, [r7, #6]
    1294:	2b00      	cmp	r3, #0
    1296:	d001      	beq.n	129c <usart_sync_write+0x2c>
    1298:	2301      	movs	r3, #1
    129a:	e000      	b.n	129e <usart_sync_write+0x2e>
    129c:	2300      	movs	r3, #0
    129e:	f003 0301 	and.w	r3, r3, #1
    12a2:	b2db      	uxtb	r3, r3
    12a4:	22f1      	movs	r2, #241	; 0xf1
    12a6:	491f      	ldr	r1, [pc, #124]	; (1324 <usart_sync_write+0xb4>)
    12a8:	4618      	mov	r0, r3
    12aa:	4b1f      	ldr	r3, [pc, #124]	; (1328 <usart_sync_write+0xb8>)
    12ac:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    12ae:	bf00      	nop
    12b0:	693b      	ldr	r3, [r7, #16]
    12b2:	3308      	adds	r3, #8
    12b4:	4618      	mov	r0, r3
    12b6:	4b1d      	ldr	r3, [pc, #116]	; (132c <usart_sync_write+0xbc>)
    12b8:	4798      	blx	r3
    12ba:	4603      	mov	r3, r0
    12bc:	f083 0301 	eor.w	r3, r3, #1
    12c0:	b2db      	uxtb	r3, r3
    12c2:	2b00      	cmp	r3, #0
    12c4:	d1f4      	bne.n	12b0 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    12c6:	693b      	ldr	r3, [r7, #16]
    12c8:	f103 0008 	add.w	r0, r3, #8
    12cc:	68ba      	ldr	r2, [r7, #8]
    12ce:	697b      	ldr	r3, [r7, #20]
    12d0:	4413      	add	r3, r2
    12d2:	781b      	ldrb	r3, [r3, #0]
    12d4:	4619      	mov	r1, r3
    12d6:	4b16      	ldr	r3, [pc, #88]	; (1330 <usart_sync_write+0xc0>)
    12d8:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    12da:	bf00      	nop
    12dc:	693b      	ldr	r3, [r7, #16]
    12de:	3308      	adds	r3, #8
    12e0:	4618      	mov	r0, r3
    12e2:	4b12      	ldr	r3, [pc, #72]	; (132c <usart_sync_write+0xbc>)
    12e4:	4798      	blx	r3
    12e6:	4603      	mov	r3, r0
    12e8:	f083 0301 	eor.w	r3, r3, #1
    12ec:	b2db      	uxtb	r3, r3
    12ee:	2b00      	cmp	r3, #0
    12f0:	d1f4      	bne.n	12dc <usart_sync_write+0x6c>
			;
	} while (++offset < length);
    12f2:	697b      	ldr	r3, [r7, #20]
    12f4:	3301      	adds	r3, #1
    12f6:	617b      	str	r3, [r7, #20]
    12f8:	88fb      	ldrh	r3, [r7, #6]
    12fa:	697a      	ldr	r2, [r7, #20]
    12fc:	429a      	cmp	r2, r3
    12fe:	d3e2      	bcc.n	12c6 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1300:	bf00      	nop
    1302:	693b      	ldr	r3, [r7, #16]
    1304:	3308      	adds	r3, #8
    1306:	4618      	mov	r0, r3
    1308:	4b0a      	ldr	r3, [pc, #40]	; (1334 <usart_sync_write+0xc4>)
    130a:	4798      	blx	r3
    130c:	4603      	mov	r3, r0
    130e:	f083 0301 	eor.w	r3, r3, #1
    1312:	b2db      	uxtb	r3, r3
    1314:	2b00      	cmp	r3, #0
    1316:	d1f4      	bne.n	1302 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
    1318:	697b      	ldr	r3, [r7, #20]
}
    131a:	4618      	mov	r0, r3
    131c:	3718      	adds	r7, #24
    131e:	46bd      	mov	sp, r7
    1320:	bd80      	pop	{r7, pc}
    1322:	bf00      	nop
    1324:	00003444 	.word	0x00003444
    1328:	000013cd 	.word	0x000013cd
    132c:	00001ba1 	.word	0x00001ba1
    1330:	00001b55 	.word	0x00001b55
    1334:	00001bc1 	.word	0x00001bc1

00001338 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1338:	b590      	push	{r4, r7, lr}
    133a:	b087      	sub	sp, #28
    133c:	af00      	add	r7, sp, #0
    133e:	60f8      	str	r0, [r7, #12]
    1340:	60b9      	str	r1, [r7, #8]
    1342:	4613      	mov	r3, r2
    1344:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    1346:	2300      	movs	r3, #0
    1348:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    134a:	68fb      	ldr	r3, [r7, #12]
    134c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	2b00      	cmp	r3, #0
    1352:	d007      	beq.n	1364 <usart_sync_read+0x2c>
    1354:	68bb      	ldr	r3, [r7, #8]
    1356:	2b00      	cmp	r3, #0
    1358:	d004      	beq.n	1364 <usart_sync_read+0x2c>
    135a:	88fb      	ldrh	r3, [r7, #6]
    135c:	2b00      	cmp	r3, #0
    135e:	d001      	beq.n	1364 <usart_sync_read+0x2c>
    1360:	2301      	movs	r3, #1
    1362:	e000      	b.n	1366 <usart_sync_read+0x2e>
    1364:	2300      	movs	r3, #0
    1366:	f003 0301 	and.w	r3, r3, #1
    136a:	b2db      	uxtb	r3, r3
    136c:	f44f 7286 	mov.w	r2, #268	; 0x10c
    1370:	4912      	ldr	r1, [pc, #72]	; (13bc <usart_sync_read+0x84>)
    1372:	4618      	mov	r0, r3
    1374:	4b12      	ldr	r3, [pc, #72]	; (13c0 <usart_sync_read+0x88>)
    1376:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1378:	bf00      	nop
    137a:	693b      	ldr	r3, [r7, #16]
    137c:	3308      	adds	r3, #8
    137e:	4618      	mov	r0, r3
    1380:	4b10      	ldr	r3, [pc, #64]	; (13c4 <usart_sync_read+0x8c>)
    1382:	4798      	blx	r3
    1384:	4603      	mov	r3, r0
    1386:	f083 0301 	eor.w	r3, r3, #1
    138a:	b2db      	uxtb	r3, r3
    138c:	2b00      	cmp	r3, #0
    138e:	d1f4      	bne.n	137a <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1390:	68ba      	ldr	r2, [r7, #8]
    1392:	697b      	ldr	r3, [r7, #20]
    1394:	18d4      	adds	r4, r2, r3
    1396:	693b      	ldr	r3, [r7, #16]
    1398:	3308      	adds	r3, #8
    139a:	4618      	mov	r0, r3
    139c:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <usart_sync_read+0x90>)
    139e:	4798      	blx	r3
    13a0:	4603      	mov	r3, r0
    13a2:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    13a4:	697b      	ldr	r3, [r7, #20]
    13a6:	3301      	adds	r3, #1
    13a8:	617b      	str	r3, [r7, #20]
    13aa:	88fb      	ldrh	r3, [r7, #6]
    13ac:	697a      	ldr	r2, [r7, #20]
    13ae:	429a      	cmp	r2, r3
    13b0:	d3e2      	bcc.n	1378 <usart_sync_read+0x40>

	return (int32_t)offset;
    13b2:	697b      	ldr	r3, [r7, #20]
}
    13b4:	4618      	mov	r0, r3
    13b6:	371c      	adds	r7, #28
    13b8:	46bd      	mov	sp, r7
    13ba:	bd90      	pop	{r4, r7, pc}
    13bc:	00003444 	.word	0x00003444
    13c0:	000013cd 	.word	0x000013cd
    13c4:	00001be1 	.word	0x00001be1
    13c8:	00001b7d 	.word	0x00001b7d

000013cc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    13cc:	b480      	push	{r7}
    13ce:	b085      	sub	sp, #20
    13d0:	af00      	add	r7, sp, #0
    13d2:	4603      	mov	r3, r0
    13d4:	60b9      	str	r1, [r7, #8]
    13d6:	607a      	str	r2, [r7, #4]
    13d8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    13da:	7bfb      	ldrb	r3, [r7, #15]
    13dc:	f083 0301 	eor.w	r3, r3, #1
    13e0:	b2db      	uxtb	r3, r3
    13e2:	2b00      	cmp	r3, #0
    13e4:	d000      	beq.n	13e8 <assert+0x1c>
		__asm("BKPT #0");
    13e6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13e8:	bf00      	nop
    13ea:	3714      	adds	r7, #20
    13ec:	46bd      	mov	sp, r7
    13ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f2:	4770      	bx	lr

000013f4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    13f4:	b480      	push	{r7}
    13f6:	b085      	sub	sp, #20
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    13fc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	60fb      	str	r3, [r7, #12]
    1404:	e008      	b.n	1418 <is_list_element+0x24>
		if (it == element) {
    1406:	68fa      	ldr	r2, [r7, #12]
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	429a      	cmp	r2, r3
    140c:	d101      	bne.n	1412 <is_list_element+0x1e>
			return true;
    140e:	2301      	movs	r3, #1
    1410:	e006      	b.n	1420 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	60fb      	str	r3, [r7, #12]
    1418:	68fb      	ldr	r3, [r7, #12]
    141a:	2b00      	cmp	r3, #0
    141c:	d1f3      	bne.n	1406 <is_list_element+0x12>
		}
	}

	return false;
    141e:	2300      	movs	r3, #0
}
    1420:	4618      	mov	r0, r3
    1422:	3714      	adds	r7, #20
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    142c:	b580      	push	{r7, lr}
    142e:	b082      	sub	sp, #8
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1436:	6839      	ldr	r1, [r7, #0]
    1438:	6878      	ldr	r0, [r7, #4]
    143a:	4b0f      	ldr	r3, [pc, #60]	; (1478 <list_insert_as_head+0x4c>)
    143c:	4798      	blx	r3
    143e:	4603      	mov	r3, r0
    1440:	2b00      	cmp	r3, #0
    1442:	bf14      	ite	ne
    1444:	2301      	movne	r3, #1
    1446:	2300      	moveq	r3, #0
    1448:	b2db      	uxtb	r3, r3
    144a:	f083 0301 	eor.w	r3, r3, #1
    144e:	b2db      	uxtb	r3, r3
    1450:	f003 0301 	and.w	r3, r3, #1
    1454:	b2db      	uxtb	r3, r3
    1456:	2239      	movs	r2, #57	; 0x39
    1458:	4908      	ldr	r1, [pc, #32]	; (147c <list_insert_as_head+0x50>)
    145a:	4618      	mov	r0, r3
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <list_insert_as_head+0x54>)
    145e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	681a      	ldr	r2, [r3, #0]
    1464:	683b      	ldr	r3, [r7, #0]
    1466:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	683a      	ldr	r2, [r7, #0]
    146c:	601a      	str	r2, [r3, #0]
}
    146e:	bf00      	nop
    1470:	3708      	adds	r7, #8
    1472:	46bd      	mov	sp, r7
    1474:	bd80      	pop	{r7, pc}
    1476:	bf00      	nop
    1478:	000013f5 	.word	0x000013f5
    147c:	00003460 	.word	0x00003460
    1480:	000013cd 	.word	0x000013cd

00001484 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1484:	b480      	push	{r7}
    1486:	b083      	sub	sp, #12
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
    148c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	681a      	ldr	r2, [r3, #0]
    1492:	683b      	ldr	r3, [r7, #0]
    1494:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	683a      	ldr	r2, [r7, #0]
    149a:	601a      	str	r2, [r3, #0]
}
    149c:	bf00      	nop
    149e:	370c      	adds	r7, #12
    14a0:	46bd      	mov	sp, r7
    14a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14a6:	4770      	bx	lr

000014a8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    14a8:	b480      	push	{r7}
    14aa:	b085      	sub	sp, #20
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
	if (list->head) {
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d009      	beq.n	14cc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	681b      	ldr	r3, [r3, #0]
    14c2:	681a      	ldr	r2, [r3, #0]
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    14c8:	68fb      	ldr	r3, [r7, #12]
    14ca:	e000      	b.n	14ce <list_remove_head+0x26>
	}

	return NULL;
    14cc:	2300      	movs	r3, #0
}
    14ce:	4618      	mov	r0, r3
    14d0:	3714      	adds	r7, #20
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
	...

000014dc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    14dc:	b480      	push	{r7}
    14de:	b085      	sub	sp, #20
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    14e4:	4b0b      	ldr	r3, [pc, #44]	; (1514 <_sbrk+0x38>)
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d102      	bne.n	14f2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    14ec:	4b09      	ldr	r3, [pc, #36]	; (1514 <_sbrk+0x38>)
    14ee:	4a0a      	ldr	r2, [pc, #40]	; (1518 <_sbrk+0x3c>)
    14f0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    14f2:	4b08      	ldr	r3, [pc, #32]	; (1514 <_sbrk+0x38>)
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	60fb      	str	r3, [r7, #12]

	heap += incr;
    14f8:	4b06      	ldr	r3, [pc, #24]	; (1514 <_sbrk+0x38>)
    14fa:	681a      	ldr	r2, [r3, #0]
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	4413      	add	r3, r2
    1500:	4a04      	ldr	r2, [pc, #16]	; (1514 <_sbrk+0x38>)
    1502:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
    1504:	68fb      	ldr	r3, [r7, #12]
}
    1506:	4618      	mov	r0, r3
    1508:	3714      	adds	r7, #20
    150a:	46bd      	mov	sp, r7
    150c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1510:	4770      	bx	lr
    1512:	bf00      	nop
    1514:	200000cc 	.word	0x200000cc
    1518:	20010160 	.word	0x20010160

0000151c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
    151c:	b480      	push	{r7}
    151e:	b083      	sub	sp, #12
    1520:	af00      	add	r7, sp, #0
    1522:	4603      	mov	r3, r0
    1524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    152a:	2b00      	cmp	r3, #0
    152c:	db0c      	blt.n	1548 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152e:	4909      	ldr	r1, [pc, #36]	; (1554 <__NVIC_SetPendingIRQ+0x38>)
    1530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1534:	095b      	lsrs	r3, r3, #5
    1536:	88fa      	ldrh	r2, [r7, #6]
    1538:	f002 021f 	and.w	r2, r2, #31
    153c:	2001      	movs	r0, #1
    153e:	fa00 f202 	lsl.w	r2, r0, r2
    1542:	3340      	adds	r3, #64	; 0x40
    1544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1548:	bf00      	nop
    154a:	370c      	adds	r7, #12
    154c:	46bd      	mov	sp, r7
    154e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1552:	4770      	bx	lr
    1554:	e000e100 	.word	0xe000e100

00001558 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    1558:	b580      	push	{r7, lr}
    155a:	b082      	sub	sp, #8
    155c:	af00      	add	r7, sp, #0
    155e:	4603      	mov	r3, r0
    1560:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    1562:	79fb      	ldrb	r3, [r7, #7]
    1564:	b21b      	sxth	r3, r3
    1566:	4618      	mov	r0, r3
    1568:	4b02      	ldr	r3, [pc, #8]	; (1574 <_irq_set+0x1c>)
    156a:	4798      	blx	r3
}
    156c:	bf00      	nop
    156e:	3708      	adds	r7, #8
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}
    1574:	0000151d 	.word	0x0000151d

00001578 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1578:	b480      	push	{r7}
    157a:	b083      	sub	sp, #12
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	460b      	mov	r3, r1
    1582:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	881b      	ldrh	r3, [r3, #0]
    1588:	b29a      	uxth	r2, r3
    158a:	887b      	ldrh	r3, [r7, #2]
    158c:	021b      	lsls	r3, r3, #8
    158e:	b29b      	uxth	r3, r3
    1590:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1594:	b29b      	uxth	r3, r3
    1596:	4313      	orrs	r3, r2
    1598:	b29a      	uxth	r2, r3
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    159e:	bf00      	nop
    15a0:	370c      	adds	r7, #12
    15a2:	46bd      	mov	sp, r7
    15a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15a8:	4770      	bx	lr
	...

000015ac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    15b0:	2100      	movs	r1, #0
    15b2:	4808      	ldr	r0, [pc, #32]	; (15d4 <_init_chip+0x28>)
    15b4:	4b08      	ldr	r3, [pc, #32]	; (15d8 <_init_chip+0x2c>)
    15b6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    15b8:	4b08      	ldr	r3, [pc, #32]	; (15dc <_init_chip+0x30>)
    15ba:	4798      	blx	r3
	_oscctrl_init_sources();
    15bc:	4b08      	ldr	r3, [pc, #32]	; (15e0 <_init_chip+0x34>)
    15be:	4798      	blx	r3
	_mclk_init();
    15c0:	4b08      	ldr	r3, [pc, #32]	; (15e4 <_init_chip+0x38>)
    15c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    15c4:	4b08      	ldr	r3, [pc, #32]	; (15e8 <_init_chip+0x3c>)
    15c6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    15c8:	f640 70ff 	movw	r0, #4095	; 0xfff
    15cc:	4b07      	ldr	r3, [pc, #28]	; (15ec <_init_chip+0x40>)
    15ce:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    15d0:	bf00      	nop
    15d2:	bd80      	pop	{r7, pc}
    15d4:	41004000 	.word	0x41004000
    15d8:	00001579 	.word	0x00001579
    15dc:	00001719 	.word	0x00001719
    15e0:	000017b1 	.word	0x000017b1
    15e4:	00001695 	.word	0x00001695
    15e8:	000017f1 	.word	0x000017f1
    15ec:	00001645 	.word	0x00001645

000015f0 <hri_gclk_wait_for_sync>:
{
    15f0:	b480      	push	{r7}
    15f2:	b083      	sub	sp, #12
    15f4:	af00      	add	r7, sp, #0
    15f6:	6078      	str	r0, [r7, #4]
    15f8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15fa:	bf00      	nop
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	685a      	ldr	r2, [r3, #4]
    1600:	683b      	ldr	r3, [r7, #0]
    1602:	4013      	ands	r3, r2
    1604:	2b00      	cmp	r3, #0
    1606:	d1f9      	bne.n	15fc <hri_gclk_wait_for_sync+0xc>
}
    1608:	bf00      	nop
    160a:	370c      	adds	r7, #12
    160c:	46bd      	mov	sp, r7
    160e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1612:	4770      	bx	lr

00001614 <hri_gclk_write_GENCTRL_reg>:
{
    1614:	b580      	push	{r7, lr}
    1616:	b084      	sub	sp, #16
    1618:	af00      	add	r7, sp, #0
    161a:	60f8      	str	r0, [r7, #12]
    161c:	460b      	mov	r3, r1
    161e:	607a      	str	r2, [r7, #4]
    1620:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1622:	7afa      	ldrb	r2, [r7, #11]
    1624:	68fb      	ldr	r3, [r7, #12]
    1626:	3208      	adds	r2, #8
    1628:	6879      	ldr	r1, [r7, #4]
    162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    162e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1632:	68f8      	ldr	r0, [r7, #12]
    1634:	4b02      	ldr	r3, [pc, #8]	; (1640 <hri_gclk_write_GENCTRL_reg+0x2c>)
    1636:	4798      	blx	r3
}
    1638:	bf00      	nop
    163a:	3710      	adds	r7, #16
    163c:	46bd      	mov	sp, r7
    163e:	bd80      	pop	{r7, pc}
    1640:	000015f1 	.word	0x000015f1

00001644 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1644:	b580      	push	{r7, lr}
    1646:	b082      	sub	sp, #8
    1648:	af00      	add	r7, sp, #0
    164a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	f003 0301 	and.w	r3, r3, #1
    1652:	2b00      	cmp	r3, #0
    1654:	d004      	beq.n	1660 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1656:	4a04      	ldr	r2, [pc, #16]	; (1668 <_gclk_init_generators_by_fref+0x24>)
    1658:	2100      	movs	r1, #0
    165a:	4804      	ldr	r0, [pc, #16]	; (166c <_gclk_init_generators_by_fref+0x28>)
    165c:	4b04      	ldr	r3, [pc, #16]	; (1670 <_gclk_init_generators_by_fref+0x2c>)
    165e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1660:	bf00      	nop
    1662:	3708      	adds	r7, #8
    1664:	46bd      	mov	sp, r7
    1666:	bd80      	pop	{r7, pc}
    1668:	00010101 	.word	0x00010101
    166c:	40001c00 	.word	0x40001c00
    1670:	00001615 	.word	0x00001615

00001674 <hri_mclk_write_CPUDIV_reg>:
{
    1674:	b480      	push	{r7}
    1676:	b083      	sub	sp, #12
    1678:	af00      	add	r7, sp, #0
    167a:	6078      	str	r0, [r7, #4]
    167c:	460b      	mov	r3, r1
    167e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	78fa      	ldrb	r2, [r7, #3]
    1684:	715a      	strb	r2, [r3, #5]
}
    1686:	bf00      	nop
    1688:	370c      	adds	r7, #12
    168a:	46bd      	mov	sp, r7
    168c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1690:	4770      	bx	lr
	...

00001694 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    1694:	b580      	push	{r7, lr}
    1696:	b082      	sub	sp, #8
    1698:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    169a:	4b05      	ldr	r3, [pc, #20]	; (16b0 <_mclk_init+0x1c>)
    169c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    169e:	2101      	movs	r1, #1
    16a0:	6878      	ldr	r0, [r7, #4]
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <_mclk_init+0x20>)
    16a4:	4798      	blx	r3
}
    16a6:	bf00      	nop
    16a8:	3708      	adds	r7, #8
    16aa:	46bd      	mov	sp, r7
    16ac:	bd80      	pop	{r7, pc}
    16ae:	bf00      	nop
    16b0:	40000800 	.word	0x40000800
    16b4:	00001675 	.word	0x00001675

000016b8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    16b8:	b480      	push	{r7}
    16ba:	b083      	sub	sp, #12
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
    16c0:	460b      	mov	r3, r1
    16c2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	78fa      	ldrb	r2, [r7, #3]
    16c8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    16ca:	bf00      	nop
    16cc:	370c      	adds	r7, #12
    16ce:	46bd      	mov	sp, r7
    16d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    16d4:	4770      	bx	lr

000016d6 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    16d6:	b480      	push	{r7}
    16d8:	b085      	sub	sp, #20
    16da:	af00      	add	r7, sp, #0
    16dc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	69db      	ldr	r3, [r3, #28]
    16e2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    16e4:	68fb      	ldr	r3, [r7, #12]
    16e6:	0a1b      	lsrs	r3, r3, #8
    16e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    16ec:	60fb      	str	r3, [r7, #12]
	return tmp;
    16ee:	68fb      	ldr	r3, [r7, #12]
}
    16f0:	4618      	mov	r0, r3
    16f2:	3714      	adds	r7, #20
    16f4:	46bd      	mov	sp, r7
    16f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    16fa:	4770      	bx	lr

000016fc <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    16fc:	b480      	push	{r7}
    16fe:	b083      	sub	sp, #12
    1700:	af00      	add	r7, sp, #0
    1702:	6078      	str	r0, [r7, #4]
    1704:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	683a      	ldr	r2, [r7, #0]
    170a:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    170c:	bf00      	nop
    170e:	370c      	adds	r7, #12
    1710:	46bd      	mov	sp, r7
    1712:	f85d 7b04 	ldr.w	r7, [sp], #4
    1716:	4770      	bx	lr

00001718 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    171e:	4b0c      	ldr	r3, [pc, #48]	; (1750 <_osc32kctrl_init_sources+0x38>)
    1720:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1722:	2300      	movs	r3, #0
    1724:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    1726:	6878      	ldr	r0, [r7, #4]
    1728:	4b0a      	ldr	r3, [pc, #40]	; (1754 <_osc32kctrl_init_sources+0x3c>)
    172a:	4798      	blx	r3
    172c:	4603      	mov	r3, r0
    172e:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1730:	887b      	ldrh	r3, [r7, #2]
    1732:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1734:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1738:	4619      	mov	r1, r3
    173a:	6878      	ldr	r0, [r7, #4]
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <_osc32kctrl_init_sources+0x40>)
    173e:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1740:	2101      	movs	r1, #1
    1742:	6878      	ldr	r0, [r7, #4]
    1744:	4b05      	ldr	r3, [pc, #20]	; (175c <_osc32kctrl_init_sources+0x44>)
    1746:	4798      	blx	r3
	(void)calib;
}
    1748:	bf00      	nop
    174a:	3708      	adds	r7, #8
    174c:	46bd      	mov	sp, r7
    174e:	bd80      	pop	{r7, pc}
    1750:	40001400 	.word	0x40001400
    1754:	000016d7 	.word	0x000016d7
    1758:	000016fd 	.word	0x000016fd
    175c:	000016b9 	.word	0x000016b9

00001760 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    1760:	b480      	push	{r7}
    1762:	b083      	sub	sp, #12
    1764:	af00      	add	r7, sp, #0
    1766:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	691b      	ldr	r3, [r3, #16]
    176c:	085b      	lsrs	r3, r3, #1
    176e:	f003 0301 	and.w	r3, r3, #1
    1772:	2b00      	cmp	r3, #0
    1774:	bf14      	ite	ne
    1776:	2301      	movne	r3, #1
    1778:	2300      	moveq	r3, #0
    177a:	b2db      	uxtb	r3, r3
}
    177c:	4618      	mov	r0, r3
    177e:	370c      	adds	r7, #12
    1780:	46bd      	mov	sp, r7
    1782:	f85d 7b04 	ldr.w	r7, [sp], #4
    1786:	4770      	bx	lr

00001788 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    1788:	b480      	push	{r7}
    178a:	b085      	sub	sp, #20
    178c:	af00      	add	r7, sp, #0
    178e:	60f8      	str	r0, [r7, #12]
    1790:	460b      	mov	r3, r1
    1792:	607a      	str	r2, [r7, #4]
    1794:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1796:	7afb      	ldrb	r3, [r7, #11]
    1798:	68fa      	ldr	r2, [r7, #12]
    179a:	3304      	adds	r3, #4
    179c:	009b      	lsls	r3, r3, #2
    179e:	4413      	add	r3, r2
    17a0:	687a      	ldr	r2, [r7, #4]
    17a2:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    17a4:	bf00      	nop
    17a6:	3714      	adds	r7, #20
    17a8:	46bd      	mov	sp, r7
    17aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ae:	4770      	bx	lr

000017b0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	b082      	sub	sp, #8
    17b4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    17b6:	4b0a      	ldr	r3, [pc, #40]	; (17e0 <_oscctrl_init_sources+0x30>)
    17b8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    17ba:	4a0a      	ldr	r2, [pc, #40]	; (17e4 <_oscctrl_init_sources+0x34>)
    17bc:	2101      	movs	r1, #1
    17be:	6878      	ldr	r0, [r7, #4]
    17c0:	4b09      	ldr	r3, [pc, #36]	; (17e8 <_oscctrl_init_sources+0x38>)
    17c2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    17c4:	bf00      	nop
    17c6:	6878      	ldr	r0, [r7, #4]
    17c8:	4b08      	ldr	r3, [pc, #32]	; (17ec <_oscctrl_init_sources+0x3c>)
    17ca:	4798      	blx	r3
    17cc:	4603      	mov	r3, r0
    17ce:	f083 0301 	eor.w	r3, r3, #1
    17d2:	b2db      	uxtb	r3, r3
    17d4:	2b00      	cmp	r3, #0
    17d6:	d1f6      	bne.n	17c6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    17d8:	bf00      	nop
    17da:	3708      	adds	r7, #8
    17dc:	46bd      	mov	sp, r7
    17de:	bd80      	pop	{r7, pc}
    17e0:	40001000 	.word	0x40001000
    17e4:	03002606 	.word	0x03002606
    17e8:	00001789 	.word	0x00001789
    17ec:	00001761 	.word	0x00001761

000017f0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    17f0:	b480      	push	{r7}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    17f6:	4b04      	ldr	r3, [pc, #16]	; (1808 <_oscctrl_init_referenced_generators+0x18>)
    17f8:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    17fa:	bf00      	nop
    17fc:	370c      	adds	r7, #12
    17fe:	46bd      	mov	sp, r7
    1800:	f85d 7b04 	ldr.w	r7, [sp], #4
    1804:	4770      	bx	lr
    1806:	bf00      	nop
    1808:	40001000 	.word	0x40001000

0000180c <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    180c:	b480      	push	{r7}
    180e:	b083      	sub	sp, #12
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	789b      	ldrb	r3, [r3, #2]
    1818:	b2db      	uxtb	r3, r3
}
    181a:	4618      	mov	r0, r3
    181c:	370c      	adds	r7, #12
    181e:	46bd      	mov	sp, r7
    1820:	f85d 7b04 	ldr.w	r7, [sp], #4
    1824:	4770      	bx	lr

00001826 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    1826:	b480      	push	{r7}
    1828:	b083      	sub	sp, #12
    182a:	af00      	add	r7, sp, #0
    182c:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	685b      	ldr	r3, [r3, #4]
}
    1832:	4618      	mov	r0, r3
    1834:	370c      	adds	r7, #12
    1836:	46bd      	mov	sp, r7
    1838:	f85d 7b04 	ldr.w	r7, [sp], #4
    183c:	4770      	bx	lr
	...

00001840 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1840:	b590      	push	{r4, r7, lr}
    1842:	b083      	sub	sp, #12
    1844:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    1846:	4b17      	ldr	r3, [pc, #92]	; (18a4 <RAMECC_Handler+0x64>)
    1848:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    184a:	4817      	ldr	r0, [pc, #92]	; (18a8 <RAMECC_Handler+0x68>)
    184c:	4b17      	ldr	r3, [pc, #92]	; (18ac <RAMECC_Handler+0x6c>)
    184e:	4798      	blx	r3
    1850:	4603      	mov	r3, r0
    1852:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1854:	683b      	ldr	r3, [r7, #0]
    1856:	f003 0302 	and.w	r3, r3, #2
    185a:	2b00      	cmp	r3, #0
    185c:	d00c      	beq.n	1878 <RAMECC_Handler+0x38>
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d008      	beq.n	1878 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	681c      	ldr	r4, [r3, #0]
    186a:	480f      	ldr	r0, [pc, #60]	; (18a8 <RAMECC_Handler+0x68>)
    186c:	4b10      	ldr	r3, [pc, #64]	; (18b0 <RAMECC_Handler+0x70>)
    186e:	4798      	blx	r3
    1870:	4603      	mov	r3, r0
    1872:	4618      	mov	r0, r3
    1874:	47a0      	blx	r4
    1876:	e012      	b.n	189e <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1878:	683b      	ldr	r3, [r7, #0]
    187a:	f003 0301 	and.w	r3, r3, #1
    187e:	2b00      	cmp	r3, #0
    1880:	d00c      	beq.n	189c <RAMECC_Handler+0x5c>
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	685b      	ldr	r3, [r3, #4]
    1886:	2b00      	cmp	r3, #0
    1888:	d008      	beq.n	189c <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	685c      	ldr	r4, [r3, #4]
    188e:	4806      	ldr	r0, [pc, #24]	; (18a8 <RAMECC_Handler+0x68>)
    1890:	4b07      	ldr	r3, [pc, #28]	; (18b0 <RAMECC_Handler+0x70>)
    1892:	4798      	blx	r3
    1894:	4603      	mov	r3, r0
    1896:	4618      	mov	r0, r3
    1898:	47a0      	blx	r4
    189a:	e000      	b.n	189e <RAMECC_Handler+0x5e>
	} else {
		return;
    189c:	bf00      	nop
	}
}
    189e:	370c      	adds	r7, #12
    18a0:	46bd      	mov	sp, r7
    18a2:	bd90      	pop	{r4, r7, pc}
    18a4:	20000144 	.word	0x20000144
    18a8:	41020000 	.word	0x41020000
    18ac:	0000180d 	.word	0x0000180d
    18b0:	00001827 	.word	0x00001827

000018b4 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    18b4:	b480      	push	{r7}
    18b6:	b083      	sub	sp, #12
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
    18bc:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    18be:	bf00      	nop
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	69da      	ldr	r2, [r3, #28]
    18c4:	683b      	ldr	r3, [r7, #0]
    18c6:	4013      	ands	r3, r2
    18c8:	2b00      	cmp	r3, #0
    18ca:	d1f9      	bne.n	18c0 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    18cc:	bf00      	nop
    18ce:	370c      	adds	r7, #12
    18d0:	46bd      	mov	sp, r7
    18d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d6:	4770      	bx	lr

000018d8 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    18d8:	b480      	push	{r7}
    18da:	b083      	sub	sp, #12
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
    18e0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	69da      	ldr	r2, [r3, #28]
    18e6:	683b      	ldr	r3, [r7, #0]
    18e8:	4013      	ands	r3, r2
    18ea:	2b00      	cmp	r3, #0
    18ec:	bf14      	ite	ne
    18ee:	2301      	movne	r3, #1
    18f0:	2300      	moveq	r3, #0
    18f2:	b2db      	uxtb	r3, r3
}
    18f4:	4618      	mov	r0, r3
    18f6:	370c      	adds	r7, #12
    18f8:	46bd      	mov	sp, r7
    18fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    18fe:	4770      	bx	lr

00001900 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    1900:	b480      	push	{r7}
    1902:	b083      	sub	sp, #12
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	7e1b      	ldrb	r3, [r3, #24]
    190c:	b2db      	uxtb	r3, r3
    190e:	f003 0301 	and.w	r3, r3, #1
    1912:	2b00      	cmp	r3, #0
    1914:	bf14      	ite	ne
    1916:	2301      	movne	r3, #1
    1918:	2300      	moveq	r3, #0
    191a:	b2db      	uxtb	r3, r3
}
    191c:	4618      	mov	r0, r3
    191e:	370c      	adds	r7, #12
    1920:	46bd      	mov	sp, r7
    1922:	f85d 7b04 	ldr.w	r7, [sp], #4
    1926:	4770      	bx	lr

00001928 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1928:	b480      	push	{r7}
    192a:	b083      	sub	sp, #12
    192c:	af00      	add	r7, sp, #0
    192e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	7e1b      	ldrb	r3, [r3, #24]
    1934:	b2db      	uxtb	r3, r3
    1936:	085b      	lsrs	r3, r3, #1
    1938:	f003 0301 	and.w	r3, r3, #1
    193c:	2b00      	cmp	r3, #0
    193e:	bf14      	ite	ne
    1940:	2301      	movne	r3, #1
    1942:	2300      	moveq	r3, #0
    1944:	b2db      	uxtb	r3, r3
}
    1946:	4618      	mov	r0, r3
    1948:	370c      	adds	r7, #12
    194a:	46bd      	mov	sp, r7
    194c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1950:	4770      	bx	lr

00001952 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    1952:	b480      	push	{r7}
    1954:	b083      	sub	sp, #12
    1956:	af00      	add	r7, sp, #0
    1958:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	7e1b      	ldrb	r3, [r3, #24]
    195e:	b2db      	uxtb	r3, r3
    1960:	089b      	lsrs	r3, r3, #2
    1962:	f003 0301 	and.w	r3, r3, #1
    1966:	2b00      	cmp	r3, #0
    1968:	bf14      	ite	ne
    196a:	2301      	movne	r3, #1
    196c:	2300      	moveq	r3, #0
    196e:	b2db      	uxtb	r3, r3
}
    1970:	4618      	mov	r0, r3
    1972:	370c      	adds	r7, #12
    1974:	46bd      	mov	sp, r7
    1976:	f85d 7b04 	ldr.w	r7, [sp], #4
    197a:	4770      	bx	lr

0000197c <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    197c:	b580      	push	{r7, lr}
    197e:	b082      	sub	sp, #8
    1980:	af00      	add	r7, sp, #0
    1982:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	681b      	ldr	r3, [r3, #0]
    1988:	f043 0202 	orr.w	r2, r3, #2
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1990:	2103      	movs	r1, #3
    1992:	6878      	ldr	r0, [r7, #4]
    1994:	4b02      	ldr	r3, [pc, #8]	; (19a0 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    1996:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1998:	bf00      	nop
    199a:	3708      	adds	r7, #8
    199c:	46bd      	mov	sp, r7
    199e:	bd80      	pop	{r7, pc}
    19a0:	000018b5 	.word	0x000018b5

000019a4 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    19a4:	b580      	push	{r7, lr}
    19a6:	b082      	sub	sp, #8
    19a8:	af00      	add	r7, sp, #0
    19aa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	681b      	ldr	r3, [r3, #0]
    19b0:	f023 0202 	bic.w	r2, r3, #2
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    19b8:	2103      	movs	r1, #3
    19ba:	6878      	ldr	r0, [r7, #4]
    19bc:	4b02      	ldr	r3, [pc, #8]	; (19c8 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    19be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19c0:	bf00      	nop
    19c2:	3708      	adds	r7, #8
    19c4:	46bd      	mov	sp, r7
    19c6:	bd80      	pop	{r7, pc}
    19c8:	000018b5 	.word	0x000018b5

000019cc <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b084      	sub	sp, #16
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
    19d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    19d6:	2103      	movs	r1, #3
    19d8:	6878      	ldr	r0, [r7, #4]
    19da:	4b07      	ldr	r3, [pc, #28]	; (19f8 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    19dc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    19e4:	68fa      	ldr	r2, [r7, #12]
    19e6:	683b      	ldr	r3, [r7, #0]
    19e8:	4013      	ands	r3, r2
    19ea:	60fb      	str	r3, [r7, #12]
	return tmp;
    19ec:	68fb      	ldr	r3, [r7, #12]
}
    19ee:	4618      	mov	r0, r3
    19f0:	3710      	adds	r7, #16
    19f2:	46bd      	mov	sp, r7
    19f4:	bd80      	pop	{r7, pc}
    19f6:	bf00      	nop
    19f8:	000018b5 	.word	0x000018b5

000019fc <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	b082      	sub	sp, #8
    1a00:	af00      	add	r7, sp, #0
    1a02:	6078      	str	r0, [r7, #4]
    1a04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	683a      	ldr	r2, [r7, #0]
    1a0a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1a0c:	2103      	movs	r1, #3
    1a0e:	6878      	ldr	r0, [r7, #4]
    1a10:	4b02      	ldr	r3, [pc, #8]	; (1a1c <hri_sercomusart_write_CTRLA_reg+0x20>)
    1a12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a14:	bf00      	nop
    1a16:	3708      	adds	r7, #8
    1a18:	46bd      	mov	sp, r7
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	000018b5 	.word	0x000018b5

00001a20 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
    1a28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	683a      	ldr	r2, [r7, #0]
    1a2e:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    1a30:	211f      	movs	r1, #31
    1a32:	6878      	ldr	r0, [r7, #4]
    1a34:	4b02      	ldr	r3, [pc, #8]	; (1a40 <hri_sercomusart_write_CTRLB_reg+0x20>)
    1a36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a38:	bf00      	nop
    1a3a:	3708      	adds	r7, #8
    1a3c:	46bd      	mov	sp, r7
    1a3e:	bd80      	pop	{r7, pc}
    1a40:	000018b5 	.word	0x000018b5

00001a44 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1a4e:	687b      	ldr	r3, [r7, #4]
    1a50:	683a      	ldr	r2, [r7, #0]
    1a52:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a54:	bf00      	nop
    1a56:	370c      	adds	r7, #12
    1a58:	46bd      	mov	sp, r7
    1a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a5e:	4770      	bx	lr

00001a60 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    1a60:	b480      	push	{r7}
    1a62:	b083      	sub	sp, #12
    1a64:	af00      	add	r7, sp, #0
    1a66:	6078      	str	r0, [r7, #4]
    1a68:	460b      	mov	r3, r1
    1a6a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	887a      	ldrh	r2, [r7, #2]
    1a70:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a72:	bf00      	nop
    1a74:	370c      	adds	r7, #12
    1a76:	46bd      	mov	sp, r7
    1a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a7c:	4770      	bx	lr

00001a7e <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1a7e:	b480      	push	{r7}
    1a80:	b083      	sub	sp, #12
    1a82:	af00      	add	r7, sp, #0
    1a84:	6078      	str	r0, [r7, #4]
    1a86:	460b      	mov	r3, r1
    1a88:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	78fa      	ldrb	r2, [r7, #3]
    1a8e:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a90:	bf00      	nop
    1a92:	370c      	adds	r7, #12
    1a94:	46bd      	mov	sp, r7
    1a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a9a:	4770      	bx	lr

00001a9c <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1a9c:	b480      	push	{r7}
    1a9e:	b083      	sub	sp, #12
    1aa0:	af00      	add	r7, sp, #0
    1aa2:	6078      	str	r0, [r7, #4]
    1aa4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	683a      	ldr	r2, [r7, #0]
    1aaa:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1aac:	bf00      	nop
    1aae:	370c      	adds	r7, #12
    1ab0:	46bd      	mov	sp, r7
    1ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ab6:	4770      	bx	lr

00001ab8 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1ab8:	b480      	push	{r7}
    1aba:	b083      	sub	sp, #12
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1ac4:	4618      	mov	r0, r3
    1ac6:	370c      	adds	r7, #12
    1ac8:	46bd      	mov	sp, r7
    1aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ace:	4770      	bx	lr

00001ad0 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1ad0:	b480      	push	{r7}
    1ad2:	b083      	sub	sp, #12
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
    1ad8:	460b      	mov	r3, r1
    1ada:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	78fa      	ldrb	r2, [r7, #3]
    1ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ae4:	bf00      	nop
    1ae6:	370c      	adds	r7, #12
    1ae8:	46bd      	mov	sp, r7
    1aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    1aee:	4770      	bx	lr

00001af0 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	b082      	sub	sp, #8
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
    1af8:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	2b00      	cmp	r3, #0
    1afe:	bf14      	ite	ne
    1b00:	2301      	movne	r3, #1
    1b02:	2300      	moveq	r3, #0
    1b04:	b2db      	uxtb	r3, r3
    1b06:	22bb      	movs	r2, #187	; 0xbb
    1b08:	4907      	ldr	r1, [pc, #28]	; (1b28 <_usart_sync_init+0x38>)
    1b0a:	4618      	mov	r0, r3
    1b0c:	4b07      	ldr	r3, [pc, #28]	; (1b2c <_usart_sync_init+0x3c>)
    1b0e:	4798      	blx	r3

	device->hw = hw;
    1b10:	687b      	ldr	r3, [r7, #4]
    1b12:	683a      	ldr	r2, [r7, #0]
    1b14:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    1b16:	6838      	ldr	r0, [r7, #0]
    1b18:	4b05      	ldr	r3, [pc, #20]	; (1b30 <_usart_sync_init+0x40>)
    1b1a:	4798      	blx	r3
    1b1c:	4603      	mov	r3, r0
}
    1b1e:	4618      	mov	r0, r3
    1b20:	3708      	adds	r7, #8
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	bf00      	nop
    1b28:	00003480 	.word	0x00003480
    1b2c:	000013cd 	.word	0x000013cd
    1b30:	00001cc1 	.word	0x00001cc1

00001b34 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b082      	sub	sp, #8
    1b38:	af00      	add	r7, sp, #0
    1b3a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	4618      	mov	r0, r3
    1b42:	4b03      	ldr	r3, [pc, #12]	; (1b50 <_usart_sync_enable+0x1c>)
    1b44:	4798      	blx	r3
}
    1b46:	bf00      	nop
    1b48:	3708      	adds	r7, #8
    1b4a:	46bd      	mov	sp, r7
    1b4c:	bd80      	pop	{r7, pc}
    1b4e:	bf00      	nop
    1b50:	0000197d 	.word	0x0000197d

00001b54 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    1b54:	b580      	push	{r7, lr}
    1b56:	b082      	sub	sp, #8
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
    1b5c:	460b      	mov	r3, r1
    1b5e:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	78fa      	ldrb	r2, [r7, #3]
    1b66:	4611      	mov	r1, r2
    1b68:	4618      	mov	r0, r3
    1b6a:	4b03      	ldr	r3, [pc, #12]	; (1b78 <_usart_sync_write_byte+0x24>)
    1b6c:	4798      	blx	r3
}
    1b6e:	bf00      	nop
    1b70:	3708      	adds	r7, #8
    1b72:	46bd      	mov	sp, r7
    1b74:	bd80      	pop	{r7, pc}
    1b76:	bf00      	nop
    1b78:	00001a9d 	.word	0x00001a9d

00001b7c <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
    1b82:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	4618      	mov	r0, r3
    1b8a:	4b04      	ldr	r3, [pc, #16]	; (1b9c <_usart_sync_read_byte+0x20>)
    1b8c:	4798      	blx	r3
    1b8e:	4603      	mov	r3, r0
    1b90:	b2db      	uxtb	r3, r3
}
    1b92:	4618      	mov	r0, r3
    1b94:	3708      	adds	r7, #8
    1b96:	46bd      	mov	sp, r7
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	bf00      	nop
    1b9c:	00001ab9 	.word	0x00001ab9

00001ba0 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b082      	sub	sp, #8
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	4618      	mov	r0, r3
    1bae:	4b03      	ldr	r3, [pc, #12]	; (1bbc <_usart_sync_is_ready_to_send+0x1c>)
    1bb0:	4798      	blx	r3
    1bb2:	4603      	mov	r3, r0
}
    1bb4:	4618      	mov	r0, r3
    1bb6:	3708      	adds	r7, #8
    1bb8:	46bd      	mov	sp, r7
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	00001901 	.word	0x00001901

00001bc0 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	b082      	sub	sp, #8
    1bc4:	af00      	add	r7, sp, #0
    1bc6:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	4618      	mov	r0, r3
    1bce:	4b03      	ldr	r3, [pc, #12]	; (1bdc <_usart_sync_is_transmit_done+0x1c>)
    1bd0:	4798      	blx	r3
    1bd2:	4603      	mov	r3, r0
}
    1bd4:	4618      	mov	r0, r3
    1bd6:	3708      	adds	r7, #8
    1bd8:	46bd      	mov	sp, r7
    1bda:	bd80      	pop	{r7, pc}
    1bdc:	00001929 	.word	0x00001929

00001be0 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	b082      	sub	sp, #8
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	4618      	mov	r0, r3
    1bee:	4b03      	ldr	r3, [pc, #12]	; (1bfc <_usart_sync_is_byte_received+0x1c>)
    1bf0:	4798      	blx	r3
    1bf2:	4603      	mov	r3, r0
}
    1bf4:	4618      	mov	r0, r3
    1bf6:	3708      	adds	r7, #8
    1bf8:	46bd      	mov	sp, r7
    1bfa:	bd80      	pop	{r7, pc}
    1bfc:	00001953 	.word	0x00001953

00001c00 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c00:	b4b0      	push	{r4, r5, r7}
    1c02:	b08d      	sub	sp, #52	; 0x34
    1c04:	af00      	add	r7, sp, #0
    1c06:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c08:	4b13      	ldr	r3, [pc, #76]	; (1c58 <_sercom_get_hardware_index+0x58>)
    1c0a:	f107 040c 	add.w	r4, r7, #12
    1c0e:	461d      	mov	r5, r3
    1c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c1c:	2300      	movs	r3, #0
    1c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c20:	e010      	b.n	1c44 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c24:	009b      	lsls	r3, r3, #2
    1c26:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1c2a:	4413      	add	r3, r2
    1c2c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1c30:	461a      	mov	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	429a      	cmp	r2, r3
    1c36:	d102      	bne.n	1c3e <_sercom_get_hardware_index+0x3e>
			return i;
    1c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c3a:	b2db      	uxtb	r3, r3
    1c3c:	e006      	b.n	1c4c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c40:	3301      	adds	r3, #1
    1c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c46:	2b07      	cmp	r3, #7
    1c48:	d9eb      	bls.n	1c22 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1c4a:	2300      	movs	r3, #0
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	3734      	adds	r7, #52	; 0x34
    1c50:	46bd      	mov	sp, r7
    1c52:	bcb0      	pop	{r4, r5, r7}
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop
    1c58:	0000349c 	.word	0x0000349c

00001c5c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b084      	sub	sp, #16
    1c60:	af00      	add	r7, sp, #0
    1c62:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1c64:	6878      	ldr	r0, [r7, #4]
    1c66:	4b12      	ldr	r3, [pc, #72]	; (1cb0 <_get_sercom_index+0x54>)
    1c68:	4798      	blx	r3
    1c6a:	4603      	mov	r3, r0
    1c6c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1c6e:	2300      	movs	r3, #0
    1c70:	73fb      	strb	r3, [r7, #15]
    1c72:	e00f      	b.n	1c94 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    1c74:	7bfa      	ldrb	r2, [r7, #15]
    1c76:	490f      	ldr	r1, [pc, #60]	; (1cb4 <_get_sercom_index+0x58>)
    1c78:	4613      	mov	r3, r2
    1c7a:	005b      	lsls	r3, r3, #1
    1c7c:	4413      	add	r3, r2
    1c7e:	00db      	lsls	r3, r3, #3
    1c80:	440b      	add	r3, r1
    1c82:	781b      	ldrb	r3, [r3, #0]
    1c84:	7bba      	ldrb	r2, [r7, #14]
    1c86:	429a      	cmp	r2, r3
    1c88:	d101      	bne.n	1c8e <_get_sercom_index+0x32>
			return i;
    1c8a:	7bfb      	ldrb	r3, [r7, #15]
    1c8c:	e00c      	b.n	1ca8 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1c8e:	7bfb      	ldrb	r3, [r7, #15]
    1c90:	3301      	adds	r3, #1
    1c92:	73fb      	strb	r3, [r7, #15]
    1c94:	7bfb      	ldrb	r3, [r7, #15]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d0ec      	beq.n	1c74 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1c9a:	f240 2247 	movw	r2, #583	; 0x247
    1c9e:	4906      	ldr	r1, [pc, #24]	; (1cb8 <_get_sercom_index+0x5c>)
    1ca0:	2000      	movs	r0, #0
    1ca2:	4b06      	ldr	r3, [pc, #24]	; (1cbc <_get_sercom_index+0x60>)
    1ca4:	4798      	blx	r3
	return 0;
    1ca6:	2300      	movs	r3, #0
}
    1ca8:	4618      	mov	r0, r3
    1caa:	3710      	adds	r7, #16
    1cac:	46bd      	mov	sp, r7
    1cae:	bd80      	pop	{r7, pc}
    1cb0:	00001c01 	.word	0x00001c01
    1cb4:	20000000 	.word	0x20000000
    1cb8:	00003480 	.word	0x00003480
    1cbc:	000013cd 	.word	0x000013cd

00001cc0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	b084      	sub	sp, #16
    1cc4:	af00      	add	r7, sp, #0
    1cc6:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1cc8:	6878      	ldr	r0, [r7, #4]
    1cca:	4b61      	ldr	r3, [pc, #388]	; (1e50 <_usart_init+0x190>)
    1ccc:	4798      	blx	r3
    1cce:	4603      	mov	r3, r0
    1cd0:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1cd2:	2101      	movs	r1, #1
    1cd4:	6878      	ldr	r0, [r7, #4]
    1cd6:	4b5f      	ldr	r3, [pc, #380]	; (1e54 <_usart_init+0x194>)
    1cd8:	4798      	blx	r3
    1cda:	4603      	mov	r3, r0
    1cdc:	f083 0301 	eor.w	r3, r3, #1
    1ce0:	b2db      	uxtb	r3, r3
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d020      	beq.n	1d28 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1ce6:	7bfa      	ldrb	r2, [r7, #15]
    1ce8:	495b      	ldr	r1, [pc, #364]	; (1e58 <_usart_init+0x198>)
    1cea:	4613      	mov	r3, r2
    1cec:	005b      	lsls	r3, r3, #1
    1cee:	4413      	add	r3, r2
    1cf0:	00db      	lsls	r3, r3, #3
    1cf2:	440b      	add	r3, r1
    1cf4:	3304      	adds	r3, #4
    1cf6:	681b      	ldr	r3, [r3, #0]
    1cf8:	f003 031c 	and.w	r3, r3, #28
    1cfc:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1cfe:	2102      	movs	r1, #2
    1d00:	6878      	ldr	r0, [r7, #4]
    1d02:	4b56      	ldr	r3, [pc, #344]	; (1e5c <_usart_init+0x19c>)
    1d04:	4798      	blx	r3
    1d06:	4603      	mov	r3, r0
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d006      	beq.n	1d1a <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1d0c:	6878      	ldr	r0, [r7, #4]
    1d0e:	4b54      	ldr	r3, [pc, #336]	; (1e60 <_usart_init+0x1a0>)
    1d10:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1d12:	2102      	movs	r1, #2
    1d14:	6878      	ldr	r0, [r7, #4]
    1d16:	4b53      	ldr	r3, [pc, #332]	; (1e64 <_usart_init+0x1a4>)
    1d18:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1d1a:	68bb      	ldr	r3, [r7, #8]
    1d1c:	f043 0301 	orr.w	r3, r3, #1
    1d20:	4619      	mov	r1, r3
    1d22:	6878      	ldr	r0, [r7, #4]
    1d24:	4b50      	ldr	r3, [pc, #320]	; (1e68 <_usart_init+0x1a8>)
    1d26:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1d28:	2101      	movs	r1, #1
    1d2a:	6878      	ldr	r0, [r7, #4]
    1d2c:	4b4d      	ldr	r3, [pc, #308]	; (1e64 <_usart_init+0x1a4>)
    1d2e:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1d30:	7bfa      	ldrb	r2, [r7, #15]
    1d32:	4949      	ldr	r1, [pc, #292]	; (1e58 <_usart_init+0x198>)
    1d34:	4613      	mov	r3, r2
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	4413      	add	r3, r2
    1d3a:	00db      	lsls	r3, r3, #3
    1d3c:	440b      	add	r3, r1
    1d3e:	3304      	adds	r3, #4
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	4619      	mov	r1, r3
    1d44:	6878      	ldr	r0, [r7, #4]
    1d46:	4b48      	ldr	r3, [pc, #288]	; (1e68 <_usart_init+0x1a8>)
    1d48:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1d4a:	7bfa      	ldrb	r2, [r7, #15]
    1d4c:	4942      	ldr	r1, [pc, #264]	; (1e58 <_usart_init+0x198>)
    1d4e:	4613      	mov	r3, r2
    1d50:	005b      	lsls	r3, r3, #1
    1d52:	4413      	add	r3, r2
    1d54:	00db      	lsls	r3, r3, #3
    1d56:	440b      	add	r3, r1
    1d58:	3308      	adds	r3, #8
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	4619      	mov	r1, r3
    1d5e:	6878      	ldr	r0, [r7, #4]
    1d60:	4b42      	ldr	r3, [pc, #264]	; (1e6c <_usart_init+0x1ac>)
    1d62:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1d64:	7bfa      	ldrb	r2, [r7, #15]
    1d66:	493c      	ldr	r1, [pc, #240]	; (1e58 <_usart_init+0x198>)
    1d68:	4613      	mov	r3, r2
    1d6a:	005b      	lsls	r3, r3, #1
    1d6c:	4413      	add	r3, r2
    1d6e:	00db      	lsls	r3, r3, #3
    1d70:	440b      	add	r3, r1
    1d72:	330c      	adds	r3, #12
    1d74:	681b      	ldr	r3, [r3, #0]
    1d76:	4619      	mov	r1, r3
    1d78:	6878      	ldr	r0, [r7, #4]
    1d7a:	4b3d      	ldr	r3, [pc, #244]	; (1e70 <_usart_init+0x1b0>)
    1d7c:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1d7e:	7bfa      	ldrb	r2, [r7, #15]
    1d80:	4935      	ldr	r1, [pc, #212]	; (1e58 <_usart_init+0x198>)
    1d82:	4613      	mov	r3, r2
    1d84:	005b      	lsls	r3, r3, #1
    1d86:	4413      	add	r3, r2
    1d88:	00db      	lsls	r3, r3, #3
    1d8a:	440b      	add	r3, r1
    1d8c:	3304      	adds	r3, #4
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1d94:	2b00      	cmp	r3, #0
    1d96:	d10c      	bne.n	1db2 <_usart_init+0xf2>
    1d98:	7bfa      	ldrb	r2, [r7, #15]
    1d9a:	492f      	ldr	r1, [pc, #188]	; (1e58 <_usart_init+0x198>)
    1d9c:	4613      	mov	r3, r2
    1d9e:	005b      	lsls	r3, r3, #1
    1da0:	4413      	add	r3, r2
    1da2:	00db      	lsls	r3, r3, #3
    1da4:	440b      	add	r3, r1
    1da6:	3304      	adds	r3, #4
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1dae:	2b00      	cmp	r3, #0
    1db0:	d022      	beq.n	1df8 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1db2:	7bfa      	ldrb	r2, [r7, #15]
    1db4:	4928      	ldr	r1, [pc, #160]	; (1e58 <_usart_init+0x198>)
    1db6:	4613      	mov	r3, r2
    1db8:	005b      	lsls	r3, r3, #1
    1dba:	4413      	add	r3, r2
    1dbc:	00db      	lsls	r3, r3, #3
    1dbe:	440b      	add	r3, r1
    1dc0:	3310      	adds	r3, #16
    1dc2:	881b      	ldrh	r3, [r3, #0]
    1dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1dc8:	b299      	uxth	r1, r3
    1dca:	687a      	ldr	r2, [r7, #4]
    1dcc:	8993      	ldrh	r3, [r2, #12]
    1dce:	f361 030c 	bfi	r3, r1, #0, #13
    1dd2:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1dd4:	7bfa      	ldrb	r2, [r7, #15]
    1dd6:	4920      	ldr	r1, [pc, #128]	; (1e58 <_usart_init+0x198>)
    1dd8:	4613      	mov	r3, r2
    1dda:	005b      	lsls	r3, r3, #1
    1ddc:	4413      	add	r3, r2
    1dde:	00db      	lsls	r3, r3, #3
    1de0:	440b      	add	r3, r1
    1de2:	3312      	adds	r3, #18
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	f003 0307 	and.w	r3, r3, #7
    1dea:	b2d9      	uxtb	r1, r3
    1dec:	687a      	ldr	r2, [r7, #4]
    1dee:	8993      	ldrh	r3, [r2, #12]
    1df0:	f361 334f 	bfi	r3, r1, #13, #3
    1df4:	8193      	strh	r3, [r2, #12]
    1df6:	e00c      	b.n	1e12 <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1df8:	7bfa      	ldrb	r2, [r7, #15]
    1dfa:	4917      	ldr	r1, [pc, #92]	; (1e58 <_usart_init+0x198>)
    1dfc:	4613      	mov	r3, r2
    1dfe:	005b      	lsls	r3, r3, #1
    1e00:	4413      	add	r3, r2
    1e02:	00db      	lsls	r3, r3, #3
    1e04:	440b      	add	r3, r1
    1e06:	3310      	adds	r3, #16
    1e08:	881b      	ldrh	r3, [r3, #0]
    1e0a:	4619      	mov	r1, r3
    1e0c:	6878      	ldr	r0, [r7, #4]
    1e0e:	4b19      	ldr	r3, [pc, #100]	; (1e74 <_usart_init+0x1b4>)
    1e10:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1e12:	7bfa      	ldrb	r2, [r7, #15]
    1e14:	4910      	ldr	r1, [pc, #64]	; (1e58 <_usart_init+0x198>)
    1e16:	4613      	mov	r3, r2
    1e18:	005b      	lsls	r3, r3, #1
    1e1a:	4413      	add	r3, r2
    1e1c:	00db      	lsls	r3, r3, #3
    1e1e:	440b      	add	r3, r1
    1e20:	3313      	adds	r3, #19
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	4619      	mov	r1, r3
    1e26:	6878      	ldr	r0, [r7, #4]
    1e28:	4b13      	ldr	r3, [pc, #76]	; (1e78 <_usart_init+0x1b8>)
    1e2a:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1e2c:	7bfa      	ldrb	r2, [r7, #15]
    1e2e:	490a      	ldr	r1, [pc, #40]	; (1e58 <_usart_init+0x198>)
    1e30:	4613      	mov	r3, r2
    1e32:	005b      	lsls	r3, r3, #1
    1e34:	4413      	add	r3, r2
    1e36:	00db      	lsls	r3, r3, #3
    1e38:	440b      	add	r3, r1
    1e3a:	3314      	adds	r3, #20
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	4619      	mov	r1, r3
    1e40:	6878      	ldr	r0, [r7, #4]
    1e42:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <_usart_init+0x1bc>)
    1e44:	4798      	blx	r3

	return ERR_NONE;
    1e46:	2300      	movs	r3, #0
}
    1e48:	4618      	mov	r0, r3
    1e4a:	3710      	adds	r7, #16
    1e4c:	46bd      	mov	sp, r7
    1e4e:	bd80      	pop	{r7, pc}
    1e50:	00001c5d 	.word	0x00001c5d
    1e54:	000018d9 	.word	0x000018d9
    1e58:	20000000 	.word	0x20000000
    1e5c:	000019cd 	.word	0x000019cd
    1e60:	000019a5 	.word	0x000019a5
    1e64:	000018b5 	.word	0x000018b5
    1e68:	000019fd 	.word	0x000019fd
    1e6c:	00001a21 	.word	0x00001a21
    1e70:	00001a45 	.word	0x00001a45
    1e74:	00001a61 	.word	0x00001a61
    1e78:	00001a7f 	.word	0x00001a7f
    1e7c:	00001ad1 	.word	0x00001ad1

00001e80 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1e80:	b480      	push	{r7}
    1e82:	b083      	sub	sp, #12
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1e88:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <_system_time_init+0x24>)
    1e8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1e8e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <_system_time_init+0x24>)
    1e92:	2205      	movs	r2, #5
    1e94:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1e96:	bf00      	nop
    1e98:	370c      	adds	r7, #12
    1e9a:	46bd      	mov	sp, r7
    1e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea0:	4770      	bx	lr
    1ea2:	bf00      	nop
    1ea4:	e000e010 	.word	0xe000e010

00001ea8 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b082      	sub	sp, #8
    1eac:	af00      	add	r7, sp, #0
    1eae:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    1eb0:	6878      	ldr	r0, [r7, #4]
    1eb2:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <_delay_init+0x18>)
    1eb4:	4798      	blx	r3
}
    1eb6:	bf00      	nop
    1eb8:	3708      	adds	r7, #8
    1eba:	46bd      	mov	sp, r7
    1ebc:	bd80      	pop	{r7, pc}
    1ebe:	bf00      	nop
    1ec0:	00001e81 	.word	0x00001e81

00001ec4 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1ec4:	b480      	push	{r7}
    1ec6:	b083      	sub	sp, #12
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
    1ecc:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1ece:	bf00      	nop
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	689a      	ldr	r2, [r3, #8]
    1ed4:	683b      	ldr	r3, [r7, #0]
    1ed6:	4013      	ands	r3, r2
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d1f9      	bne.n	1ed0 <hri_tcc_wait_for_sync+0xc>
	};
}
    1edc:	bf00      	nop
    1ede:	370c      	adds	r7, #12
    1ee0:	46bd      	mov	sp, r7
    1ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ee6:	4770      	bx	lr

00001ee8 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1ee8:	b480      	push	{r7}
    1eea:	b083      	sub	sp, #12
    1eec:	af00      	add	r7, sp, #0
    1eee:	6078      	str	r0, [r7, #4]
    1ef0:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	689a      	ldr	r2, [r3, #8]
    1ef6:	683b      	ldr	r3, [r7, #0]
    1ef8:	4013      	ands	r3, r2
    1efa:	2b00      	cmp	r3, #0
    1efc:	bf14      	ite	ne
    1efe:	2301      	movne	r3, #1
    1f00:	2300      	moveq	r3, #0
    1f02:	b2db      	uxtb	r3, r3
}
    1f04:	4618      	mov	r0, r3
    1f06:	370c      	adds	r7, #12
    1f08:	46bd      	mov	sp, r7
    1f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f0e:	4770      	bx	lr

00001f10 <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	b084      	sub	sp, #16
    1f14:	af00      	add	r7, sp, #0
    1f16:	6078      	str	r0, [r7, #4]
    1f18:	460b      	mov	r3, r1
    1f1a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    1f22:	68fb      	ldr	r3, [r7, #12]
    1f24:	f023 0302 	bic.w	r3, r3, #2
    1f28:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    1f2a:	78fb      	ldrb	r3, [r7, #3]
    1f2c:	005b      	lsls	r3, r3, #1
    1f2e:	461a      	mov	r2, r3
    1f30:	68fb      	ldr	r3, [r7, #12]
    1f32:	4313      	orrs	r3, r2
    1f34:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	68fa      	ldr	r2, [r7, #12]
    1f3a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1f3c:	2103      	movs	r1, #3
    1f3e:	6878      	ldr	r0, [r7, #4]
    1f40:	4b02      	ldr	r3, [pc, #8]	; (1f4c <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    1f42:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1f44:	bf00      	nop
    1f46:	3710      	adds	r7, #16
    1f48:	46bd      	mov	sp, r7
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00001ec5 	.word	0x00001ec5

00001f50 <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b082      	sub	sp, #8
    1f54:	af00      	add	r7, sp, #0
    1f56:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1f58:	687b      	ldr	r3, [r7, #4]
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	f023 0202 	bic.w	r2, r3, #2
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1f64:	2103      	movs	r1, #3
    1f66:	6878      	ldr	r0, [r7, #4]
    1f68:	4b02      	ldr	r3, [pc, #8]	; (1f74 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    1f6a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1f6c:	bf00      	nop
    1f6e:	3708      	adds	r7, #8
    1f70:	46bd      	mov	sp, r7
    1f72:	bd80      	pop	{r7, pc}
    1f74:	00001ec5 	.word	0x00001ec5

00001f78 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b084      	sub	sp, #16
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
    1f80:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1f82:	2103      	movs	r1, #3
    1f84:	6878      	ldr	r0, [r7, #4]
    1f86:	4b07      	ldr	r3, [pc, #28]	; (1fa4 <hri_tcc_get_CTRLA_reg+0x2c>)
    1f88:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1f90:	68fa      	ldr	r2, [r7, #12]
    1f92:	683b      	ldr	r3, [r7, #0]
    1f94:	4013      	ands	r3, r2
    1f96:	60fb      	str	r3, [r7, #12]
	return tmp;
    1f98:	68fb      	ldr	r3, [r7, #12]
}
    1f9a:	4618      	mov	r0, r3
    1f9c:	3710      	adds	r7, #16
    1f9e:	46bd      	mov	sp, r7
    1fa0:	bd80      	pop	{r7, pc}
    1fa2:	bf00      	nop
    1fa4:	00001ec5 	.word	0x00001ec5

00001fa8 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	b082      	sub	sp, #8
    1fac:	af00      	add	r7, sp, #0
    1fae:	6078      	str	r0, [r7, #4]
    1fb0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	683a      	ldr	r2, [r7, #0]
    1fb6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1fb8:	2103      	movs	r1, #3
    1fba:	6878      	ldr	r0, [r7, #4]
    1fbc:	4b02      	ldr	r3, [pc, #8]	; (1fc8 <hri_tcc_write_CTRLA_reg+0x20>)
    1fbe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1fc0:	bf00      	nop
    1fc2:	3708      	adds	r7, #8
    1fc4:	46bd      	mov	sp, r7
    1fc6:	bd80      	pop	{r7, pc}
    1fc8:	00001ec5 	.word	0x00001ec5

00001fcc <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b082      	sub	sp, #8
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
    1fd4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	683a      	ldr	r2, [r7, #0]
    1fda:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    1fdc:	f643 71ff 	movw	r1, #16383	; 0x3fff
    1fe0:	6878      	ldr	r0, [r7, #4]
    1fe2:	4b03      	ldr	r3, [pc, #12]	; (1ff0 <hri_tcc_write_WAVE_reg+0x24>)
    1fe4:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1fe6:	bf00      	nop
    1fe8:	3708      	adds	r7, #8
    1fea:	46bd      	mov	sp, r7
    1fec:	bd80      	pop	{r7, pc}
    1fee:	bf00      	nop
    1ff0:	00001ec5 	.word	0x00001ec5

00001ff4 <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    1ff8:	2101      	movs	r1, #1
    1ffa:	4817      	ldr	r0, [pc, #92]	; (2058 <PWM_0_init+0x64>)
    1ffc:	4b17      	ldr	r3, [pc, #92]	; (205c <PWM_0_init+0x68>)
    1ffe:	4798      	blx	r3
    2000:	4603      	mov	r3, r0
    2002:	f083 0301 	eor.w	r3, r3, #1
    2006:	b2db      	uxtb	r3, r3
    2008:	2b00      	cmp	r3, #0
    200a:	d011      	beq.n	2030 <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    200c:	2102      	movs	r1, #2
    200e:	4812      	ldr	r0, [pc, #72]	; (2058 <PWM_0_init+0x64>)
    2010:	4b13      	ldr	r3, [pc, #76]	; (2060 <PWM_0_init+0x6c>)
    2012:	4798      	blx	r3
    2014:	4603      	mov	r3, r0
    2016:	2b00      	cmp	r3, #0
    2018:	d006      	beq.n	2028 <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    201a:	480f      	ldr	r0, [pc, #60]	; (2058 <PWM_0_init+0x64>)
    201c:	4b11      	ldr	r3, [pc, #68]	; (2064 <PWM_0_init+0x70>)
    201e:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    2020:	2102      	movs	r1, #2
    2022:	480d      	ldr	r0, [pc, #52]	; (2058 <PWM_0_init+0x64>)
    2024:	4b10      	ldr	r3, [pc, #64]	; (2068 <PWM_0_init+0x74>)
    2026:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    2028:	2101      	movs	r1, #1
    202a:	480b      	ldr	r0, [pc, #44]	; (2058 <PWM_0_init+0x64>)
    202c:	4b0f      	ldr	r3, [pc, #60]	; (206c <PWM_0_init+0x78>)
    202e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    2030:	2101      	movs	r1, #1
    2032:	4809      	ldr	r0, [pc, #36]	; (2058 <PWM_0_init+0x64>)
    2034:	4b0c      	ldr	r3, [pc, #48]	; (2068 <PWM_0_init+0x74>)
    2036:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    2038:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    203c:	4806      	ldr	r0, [pc, #24]	; (2058 <PWM_0_init+0x64>)
    203e:	4b0b      	ldr	r3, [pc, #44]	; (206c <PWM_0_init+0x78>)
    2040:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    2042:	2102      	movs	r1, #2
    2044:	4804      	ldr	r0, [pc, #16]	; (2058 <PWM_0_init+0x64>)
    2046:	4b0a      	ldr	r3, [pc, #40]	; (2070 <PWM_0_init+0x7c>)
    2048:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    204a:	2101      	movs	r1, #1
    204c:	4802      	ldr	r0, [pc, #8]	; (2058 <PWM_0_init+0x64>)
    204e:	4b09      	ldr	r3, [pc, #36]	; (2074 <PWM_0_init+0x80>)
    2050:	4798      	blx	r3

	return 0;
    2052:	2300      	movs	r3, #0
}
    2054:	4618      	mov	r0, r3
    2056:	bd80      	pop	{r7, pc}
    2058:	41016000 	.word	0x41016000
    205c:	00001ee9 	.word	0x00001ee9
    2060:	00001f79 	.word	0x00001f79
    2064:	00001f51 	.word	0x00001f51
    2068:	00001ec5 	.word	0x00001ec5
    206c:	00001fa9 	.word	0x00001fa9
    2070:	00001fcd 	.word	0x00001fcd
    2074:	00001f11 	.word	0x00001f11

00002078 <__NVIC_EnableIRQ>:
{
    2078:	b480      	push	{r7}
    207a:	b083      	sub	sp, #12
    207c:	af00      	add	r7, sp, #0
    207e:	4603      	mov	r3, r0
    2080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2086:	2b00      	cmp	r3, #0
    2088:	db0b      	blt.n	20a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    208a:	4909      	ldr	r1, [pc, #36]	; (20b0 <__NVIC_EnableIRQ+0x38>)
    208c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2090:	095b      	lsrs	r3, r3, #5
    2092:	88fa      	ldrh	r2, [r7, #6]
    2094:	f002 021f 	and.w	r2, r2, #31
    2098:	2001      	movs	r0, #1
    209a:	fa00 f202 	lsl.w	r2, r0, r2
    209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    20a2:	bf00      	nop
    20a4:	370c      	adds	r7, #12
    20a6:	46bd      	mov	sp, r7
    20a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ac:	4770      	bx	lr
    20ae:	bf00      	nop
    20b0:	e000e100 	.word	0xe000e100

000020b4 <__NVIC_DisableIRQ>:
{
    20b4:	b480      	push	{r7}
    20b6:	b083      	sub	sp, #12
    20b8:	af00      	add	r7, sp, #0
    20ba:	4603      	mov	r3, r0
    20bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    20be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    20c2:	2b00      	cmp	r3, #0
    20c4:	db10      	blt.n	20e8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20c6:	490b      	ldr	r1, [pc, #44]	; (20f4 <__NVIC_DisableIRQ+0x40>)
    20c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    20cc:	095b      	lsrs	r3, r3, #5
    20ce:	88fa      	ldrh	r2, [r7, #6]
    20d0:	f002 021f 	and.w	r2, r2, #31
    20d4:	2001      	movs	r0, #1
    20d6:	fa00 f202 	lsl.w	r2, r0, r2
    20da:	3320      	adds	r3, #32
    20dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    20e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20e4:	f3bf 8f6f 	isb	sy
}
    20e8:	bf00      	nop
    20ea:	370c      	adds	r7, #12
    20ec:	46bd      	mov	sp, r7
    20ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    20f2:	4770      	bx	lr
    20f4:	e000e100 	.word	0xe000e100

000020f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    20f8:	b480      	push	{r7}
    20fa:	b083      	sub	sp, #12
    20fc:	af00      	add	r7, sp, #0
    20fe:	4603      	mov	r3, r0
    2100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2106:	2b00      	cmp	r3, #0
    2108:	db0c      	blt.n	2124 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    210a:	4909      	ldr	r1, [pc, #36]	; (2130 <__NVIC_ClearPendingIRQ+0x38>)
    210c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2110:	095b      	lsrs	r3, r3, #5
    2112:	88fa      	ldrh	r2, [r7, #6]
    2114:	f002 021f 	and.w	r2, r2, #31
    2118:	2001      	movs	r0, #1
    211a:	fa00 f202 	lsl.w	r2, r0, r2
    211e:	3360      	adds	r3, #96	; 0x60
    2120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2124:	bf00      	nop
    2126:	370c      	adds	r7, #12
    2128:	46bd      	mov	sp, r7
    212a:	f85d 7b04 	ldr.w	r7, [sp], #4
    212e:	4770      	bx	lr
    2130:	e000e100 	.word	0xe000e100

00002134 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
    213c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    213e:	bf00      	nop
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	691a      	ldr	r2, [r3, #16]
    2144:	683b      	ldr	r3, [r7, #0]
    2146:	4013      	ands	r3, r2
    2148:	2b00      	cmp	r3, #0
    214a:	d1f9      	bne.n	2140 <hri_tc_wait_for_sync+0xc>
	};
}
    214c:	bf00      	nop
    214e:	370c      	adds	r7, #12
    2150:	46bd      	mov	sp, r7
    2152:	f85d 7b04 	ldr.w	r7, [sp], #4
    2156:	4770      	bx	lr

00002158 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2158:	b480      	push	{r7}
    215a:	b083      	sub	sp, #12
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
    2160:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	691a      	ldr	r2, [r3, #16]
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	4013      	ands	r3, r2
    216a:	2b00      	cmp	r3, #0
    216c:	bf14      	ite	ne
    216e:	2301      	movne	r3, #1
    2170:	2300      	moveq	r3, #0
    2172:	b2db      	uxtb	r3, r3
}
    2174:	4618      	mov	r0, r3
    2176:	370c      	adds	r7, #12
    2178:	46bd      	mov	sp, r7
    217a:	f85d 7b04 	ldr.w	r7, [sp], #4
    217e:	4770      	bx	lr

00002180 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    2180:	b480      	push	{r7}
    2182:	b083      	sub	sp, #12
    2184:	af00      	add	r7, sp, #0
    2186:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	7a9b      	ldrb	r3, [r3, #10]
    218c:	b2db      	uxtb	r3, r3
    218e:	f003 0301 	and.w	r3, r3, #1
    2192:	2b00      	cmp	r3, #0
    2194:	bf14      	ite	ne
    2196:	2301      	movne	r3, #1
    2198:	2300      	moveq	r3, #0
    219a:	b2db      	uxtb	r3, r3
}
    219c:	4618      	mov	r0, r3
    219e:	370c      	adds	r7, #12
    21a0:	46bd      	mov	sp, r7
    21a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    21a6:	4770      	bx	lr

000021a8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    21a8:	b480      	push	{r7}
    21aa:	b083      	sub	sp, #12
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2201      	movs	r2, #1
    21b4:	729a      	strb	r2, [r3, #10]
}
    21b6:	bf00      	nop
    21b8:	370c      	adds	r7, #12
    21ba:	46bd      	mov	sp, r7
    21bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    21c0:	4770      	bx	lr

000021c2 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    21c2:	b480      	push	{r7}
    21c4:	b083      	sub	sp, #12
    21c6:	af00      	add	r7, sp, #0
    21c8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	2201      	movs	r2, #1
    21ce:	725a      	strb	r2, [r3, #9]
}
    21d0:	bf00      	nop
    21d2:	370c      	adds	r7, #12
    21d4:	46bd      	mov	sp, r7
    21d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21da:	4770      	bx	lr

000021dc <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    21dc:	b580      	push	{r7, lr}
    21de:	b082      	sub	sp, #8
    21e0:	af00      	add	r7, sp, #0
    21e2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	681b      	ldr	r3, [r3, #0]
    21e8:	f043 0202 	orr.w	r2, r3, #2
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    21f0:	2103      	movs	r1, #3
    21f2:	6878      	ldr	r0, [r7, #4]
    21f4:	4b02      	ldr	r3, [pc, #8]	; (2200 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    21f6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    21f8:	bf00      	nop
    21fa:	3708      	adds	r7, #8
    21fc:	46bd      	mov	sp, r7
    21fe:	bd80      	pop	{r7, pc}
    2200:	00002135 	.word	0x00002135

00002204 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2204:	b580      	push	{r7, lr}
    2206:	b084      	sub	sp, #16
    2208:	af00      	add	r7, sp, #0
    220a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    220c:	2103      	movs	r1, #3
    220e:	6878      	ldr	r0, [r7, #4]
    2210:	4b09      	ldr	r3, [pc, #36]	; (2238 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    2212:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    221a:	68fb      	ldr	r3, [r7, #12]
    221c:	085b      	lsrs	r3, r3, #1
    221e:	f003 0301 	and.w	r3, r3, #1
    2222:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    2224:	68fb      	ldr	r3, [r7, #12]
    2226:	2b00      	cmp	r3, #0
    2228:	bf14      	ite	ne
    222a:	2301      	movne	r3, #1
    222c:	2300      	moveq	r3, #0
    222e:	b2db      	uxtb	r3, r3
}
    2230:	4618      	mov	r0, r3
    2232:	3710      	adds	r7, #16
    2234:	46bd      	mov	sp, r7
    2236:	bd80      	pop	{r7, pc}
    2238:	00002135 	.word	0x00002135

0000223c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
    2242:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	f023 0202 	bic.w	r2, r3, #2
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    2250:	2103      	movs	r1, #3
    2252:	6878      	ldr	r0, [r7, #4]
    2254:	4b02      	ldr	r3, [pc, #8]	; (2260 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    2256:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2258:	bf00      	nop
    225a:	3708      	adds	r7, #8
    225c:	46bd      	mov	sp, r7
    225e:	bd80      	pop	{r7, pc}
    2260:	00002135 	.word	0x00002135

00002264 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    2264:	b580      	push	{r7, lr}
    2266:	b084      	sub	sp, #16
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    226e:	2103      	movs	r1, #3
    2270:	6878      	ldr	r0, [r7, #4]
    2272:	4b07      	ldr	r3, [pc, #28]	; (2290 <hri_tc_get_CTRLA_reg+0x2c>)
    2274:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    227c:	68fa      	ldr	r2, [r7, #12]
    227e:	683b      	ldr	r3, [r7, #0]
    2280:	4013      	ands	r3, r2
    2282:	60fb      	str	r3, [r7, #12]
	return tmp;
    2284:	68fb      	ldr	r3, [r7, #12]
}
    2286:	4618      	mov	r0, r3
    2288:	3710      	adds	r7, #16
    228a:	46bd      	mov	sp, r7
    228c:	bd80      	pop	{r7, pc}
    228e:	bf00      	nop
    2290:	00002135 	.word	0x00002135

00002294 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    2294:	b580      	push	{r7, lr}
    2296:	b082      	sub	sp, #8
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
    229c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	683a      	ldr	r2, [r7, #0]
    22a2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    22a4:	2103      	movs	r1, #3
    22a6:	6878      	ldr	r0, [r7, #4]
    22a8:	4b02      	ldr	r3, [pc, #8]	; (22b4 <hri_tc_write_CTRLA_reg+0x20>)
    22aa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    22ac:	bf00      	nop
    22ae:	3708      	adds	r7, #8
    22b0:	46bd      	mov	sp, r7
    22b2:	bd80      	pop	{r7, pc}
    22b4:	00002135 	.word	0x00002135

000022b8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    22b8:	b480      	push	{r7}
    22ba:	b083      	sub	sp, #12
    22bc:	af00      	add	r7, sp, #0
    22be:	6078      	str	r0, [r7, #4]
    22c0:	460b      	mov	r3, r1
    22c2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	887a      	ldrh	r2, [r7, #2]
    22c8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    22ca:	bf00      	nop
    22cc:	370c      	adds	r7, #12
    22ce:	46bd      	mov	sp, r7
    22d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    22d4:	4770      	bx	lr

000022d6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    22d6:	b480      	push	{r7}
    22d8:	b083      	sub	sp, #12
    22da:	af00      	add	r7, sp, #0
    22dc:	6078      	str	r0, [r7, #4]
    22de:	460b      	mov	r3, r1
    22e0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	78fa      	ldrb	r2, [r7, #3]
    22e6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    22e8:	bf00      	nop
    22ea:	370c      	adds	r7, #12
    22ec:	46bd      	mov	sp, r7
    22ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f2:	4770      	bx	lr

000022f4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    22f4:	b480      	push	{r7}
    22f6:	b083      	sub	sp, #12
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
    22fc:	460b      	mov	r3, r1
    22fe:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	78fa      	ldrb	r2, [r7, #3]
    2304:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    2306:	bf00      	nop
    2308:	370c      	adds	r7, #12
    230a:	46bd      	mov	sp, r7
    230c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2310:	4770      	bx	lr
	...

00002314 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    2314:	b580      	push	{r7, lr}
    2316:	b082      	sub	sp, #8
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    231c:	460b      	mov	r3, r1
    231e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	78fa      	ldrb	r2, [r7, #3]
    2324:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    2326:	2120      	movs	r1, #32
    2328:	6878      	ldr	r0, [r7, #4]
    232a:	4b03      	ldr	r3, [pc, #12]	; (2338 <hri_tccount8_write_PER_reg+0x24>)
    232c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    232e:	bf00      	nop
    2330:	3708      	adds	r7, #8
    2332:	46bd      	mov	sp, r7
    2334:	bd80      	pop	{r7, pc}
    2336:	bf00      	nop
    2338:	00002135 	.word	0x00002135

0000233c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    233c:	b580      	push	{r7, lr}
    233e:	b082      	sub	sp, #8
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	460b      	mov	r3, r1
    2346:	70fb      	strb	r3, [r7, #3]
    2348:	4613      	mov	r3, r2
    234a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    234c:	78fb      	ldrb	r3, [r7, #3]
    234e:	687a      	ldr	r2, [r7, #4]
    2350:	4413      	add	r3, r2
    2352:	78ba      	ldrb	r2, [r7, #2]
    2354:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2356:	21c0      	movs	r1, #192	; 0xc0
    2358:	6878      	ldr	r0, [r7, #4]
    235a:	4b03      	ldr	r3, [pc, #12]	; (2368 <hri_tccount8_write_CC_reg+0x2c>)
    235c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    235e:	bf00      	nop
    2360:	3708      	adds	r7, #8
    2362:	46bd      	mov	sp, r7
    2364:	bd80      	pop	{r7, pc}
    2366:	bf00      	nop
    2368:	00002135 	.word	0x00002135

0000236c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    236c:	b580      	push	{r7, lr}
    236e:	b082      	sub	sp, #8
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
    2374:	460b      	mov	r3, r1
    2376:	70fb      	strb	r3, [r7, #3]
    2378:	4613      	mov	r3, r2
    237a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    237c:	78fb      	ldrb	r3, [r7, #3]
    237e:	687a      	ldr	r2, [r7, #4]
    2380:	330c      	adds	r3, #12
    2382:	005b      	lsls	r3, r3, #1
    2384:	4413      	add	r3, r2
    2386:	883a      	ldrh	r2, [r7, #0]
    2388:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    238a:	21c0      	movs	r1, #192	; 0xc0
    238c:	6878      	ldr	r0, [r7, #4]
    238e:	4b03      	ldr	r3, [pc, #12]	; (239c <hri_tccount16_write_CC_reg+0x30>)
    2390:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2392:	bf00      	nop
    2394:	3708      	adds	r7, #8
    2396:	46bd      	mov	sp, r7
    2398:	bd80      	pop	{r7, pc}
    239a:	bf00      	nop
    239c:	00002135 	.word	0x00002135

000023a0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b084      	sub	sp, #16
    23a4:	af00      	add	r7, sp, #0
    23a6:	60f8      	str	r0, [r7, #12]
    23a8:	460b      	mov	r3, r1
    23aa:	607a      	str	r2, [r7, #4]
    23ac:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    23ae:	7afb      	ldrb	r3, [r7, #11]
    23b0:	68fa      	ldr	r2, [r7, #12]
    23b2:	3306      	adds	r3, #6
    23b4:	009b      	lsls	r3, r3, #2
    23b6:	4413      	add	r3, r2
    23b8:	687a      	ldr	r2, [r7, #4]
    23ba:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    23bc:	21c0      	movs	r1, #192	; 0xc0
    23be:	68f8      	ldr	r0, [r7, #12]
    23c0:	4b02      	ldr	r3, [pc, #8]	; (23cc <hri_tccount32_write_CC_reg+0x2c>)
    23c2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    23c4:	bf00      	nop
    23c6:	3710      	adds	r7, #16
    23c8:	46bd      	mov	sp, r7
    23ca:	bd80      	pop	{r7, pc}
    23cc:	00002135 	.word	0x00002135

000023d0 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b084      	sub	sp, #16
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
    23d8:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    23da:	6838      	ldr	r0, [r7, #0]
    23dc:	4b93      	ldr	r3, [pc, #588]	; (262c <_timer_init+0x25c>)
    23de:	4798      	blx	r3
    23e0:	4603      	mov	r3, r0
    23e2:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	683a      	ldr	r2, [r7, #0]
    23e8:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    23ea:	228f      	movs	r2, #143	; 0x8f
    23ec:	4990      	ldr	r1, [pc, #576]	; (2630 <_timer_init+0x260>)
    23ee:	2001      	movs	r0, #1
    23f0:	4b90      	ldr	r3, [pc, #576]	; (2634 <_timer_init+0x264>)
    23f2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    23f4:	2101      	movs	r1, #1
    23f6:	6838      	ldr	r0, [r7, #0]
    23f8:	4b8f      	ldr	r3, [pc, #572]	; (2638 <_timer_init+0x268>)
    23fa:	4798      	blx	r3
    23fc:	4603      	mov	r3, r0
    23fe:	f083 0301 	eor.w	r3, r3, #1
    2402:	b2db      	uxtb	r3, r3
    2404:	2b00      	cmp	r3, #0
    2406:	d011      	beq.n	242c <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2408:	2102      	movs	r1, #2
    240a:	6838      	ldr	r0, [r7, #0]
    240c:	4b8b      	ldr	r3, [pc, #556]	; (263c <_timer_init+0x26c>)
    240e:	4798      	blx	r3
    2410:	4603      	mov	r3, r0
    2412:	2b00      	cmp	r3, #0
    2414:	d006      	beq.n	2424 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    2416:	6838      	ldr	r0, [r7, #0]
    2418:	4b89      	ldr	r3, [pc, #548]	; (2640 <_timer_init+0x270>)
    241a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    241c:	2102      	movs	r1, #2
    241e:	6838      	ldr	r0, [r7, #0]
    2420:	4b88      	ldr	r3, [pc, #544]	; (2644 <_timer_init+0x274>)
    2422:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    2424:	2101      	movs	r1, #1
    2426:	6838      	ldr	r0, [r7, #0]
    2428:	4b87      	ldr	r3, [pc, #540]	; (2648 <_timer_init+0x278>)
    242a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    242c:	2101      	movs	r1, #1
    242e:	6838      	ldr	r0, [r7, #0]
    2430:	4b84      	ldr	r3, [pc, #528]	; (2644 <_timer_init+0x274>)
    2432:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2434:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2438:	4984      	ldr	r1, [pc, #528]	; (264c <_timer_init+0x27c>)
    243a:	4613      	mov	r3, r2
    243c:	009b      	lsls	r3, r3, #2
    243e:	4413      	add	r3, r2
    2440:	009b      	lsls	r3, r3, #2
    2442:	440b      	add	r3, r1
    2444:	3304      	adds	r3, #4
    2446:	681b      	ldr	r3, [r3, #0]
    2448:	4619      	mov	r1, r3
    244a:	6838      	ldr	r0, [r7, #0]
    244c:	4b7e      	ldr	r3, [pc, #504]	; (2648 <_timer_init+0x278>)
    244e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2450:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2454:	497d      	ldr	r1, [pc, #500]	; (264c <_timer_init+0x27c>)
    2456:	4613      	mov	r3, r2
    2458:	009b      	lsls	r3, r3, #2
    245a:	4413      	add	r3, r2
    245c:	009b      	lsls	r3, r3, #2
    245e:	440b      	add	r3, r1
    2460:	330a      	adds	r3, #10
    2462:	781b      	ldrb	r3, [r3, #0]
    2464:	4619      	mov	r1, r3
    2466:	6838      	ldr	r0, [r7, #0]
    2468:	4b79      	ldr	r3, [pc, #484]	; (2650 <_timer_init+0x280>)
    246a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    246c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2470:	4976      	ldr	r1, [pc, #472]	; (264c <_timer_init+0x27c>)
    2472:	4613      	mov	r3, r2
    2474:	009b      	lsls	r3, r3, #2
    2476:	4413      	add	r3, r2
    2478:	009b      	lsls	r3, r3, #2
    247a:	440b      	add	r3, r1
    247c:	3308      	adds	r3, #8
    247e:	881b      	ldrh	r3, [r3, #0]
    2480:	4619      	mov	r1, r3
    2482:	6838      	ldr	r0, [r7, #0]
    2484:	4b73      	ldr	r3, [pc, #460]	; (2654 <_timer_init+0x284>)
    2486:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    2488:	2101      	movs	r1, #1
    248a:	6838      	ldr	r0, [r7, #0]
    248c:	4b72      	ldr	r3, [pc, #456]	; (2658 <_timer_init+0x288>)
    248e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2490:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2494:	496d      	ldr	r1, [pc, #436]	; (264c <_timer_init+0x27c>)
    2496:	4613      	mov	r3, r2
    2498:	009b      	lsls	r3, r3, #2
    249a:	4413      	add	r3, r2
    249c:	009b      	lsls	r3, r3, #2
    249e:	440b      	add	r3, r1
    24a0:	3304      	adds	r3, #4
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	f003 030c 	and.w	r3, r3, #12
    24a8:	2b08      	cmp	r3, #8
    24aa:	d11e      	bne.n	24ea <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    24ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24b0:	4966      	ldr	r1, [pc, #408]	; (264c <_timer_init+0x27c>)
    24b2:	4613      	mov	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	4413      	add	r3, r2
    24b8:	009b      	lsls	r3, r3, #2
    24ba:	440b      	add	r3, r1
    24bc:	330c      	adds	r3, #12
    24be:	681b      	ldr	r3, [r3, #0]
    24c0:	461a      	mov	r2, r3
    24c2:	2100      	movs	r1, #0
    24c4:	6838      	ldr	r0, [r7, #0]
    24c6:	4b65      	ldr	r3, [pc, #404]	; (265c <_timer_init+0x28c>)
    24c8:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    24ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24ce:	495f      	ldr	r1, [pc, #380]	; (264c <_timer_init+0x27c>)
    24d0:	4613      	mov	r3, r2
    24d2:	009b      	lsls	r3, r3, #2
    24d4:	4413      	add	r3, r2
    24d6:	009b      	lsls	r3, r3, #2
    24d8:	440b      	add	r3, r1
    24da:	3310      	adds	r3, #16
    24dc:	681b      	ldr	r3, [r3, #0]
    24de:	461a      	mov	r2, r3
    24e0:	2101      	movs	r1, #1
    24e2:	6838      	ldr	r0, [r7, #0]
    24e4:	4b5d      	ldr	r3, [pc, #372]	; (265c <_timer_init+0x28c>)
    24e6:	4798      	blx	r3
    24e8:	e06a      	b.n	25c0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    24ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24ee:	4957      	ldr	r1, [pc, #348]	; (264c <_timer_init+0x27c>)
    24f0:	4613      	mov	r3, r2
    24f2:	009b      	lsls	r3, r3, #2
    24f4:	4413      	add	r3, r2
    24f6:	009b      	lsls	r3, r3, #2
    24f8:	440b      	add	r3, r1
    24fa:	3304      	adds	r3, #4
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	f003 030c 	and.w	r3, r3, #12
    2502:	2b00      	cmp	r3, #0
    2504:	d120      	bne.n	2548 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2506:	f997 200f 	ldrsb.w	r2, [r7, #15]
    250a:	4950      	ldr	r1, [pc, #320]	; (264c <_timer_init+0x27c>)
    250c:	4613      	mov	r3, r2
    250e:	009b      	lsls	r3, r3, #2
    2510:	4413      	add	r3, r2
    2512:	009b      	lsls	r3, r3, #2
    2514:	440b      	add	r3, r1
    2516:	330c      	adds	r3, #12
    2518:	681b      	ldr	r3, [r3, #0]
    251a:	b29b      	uxth	r3, r3
    251c:	461a      	mov	r2, r3
    251e:	2100      	movs	r1, #0
    2520:	6838      	ldr	r0, [r7, #0]
    2522:	4b4f      	ldr	r3, [pc, #316]	; (2660 <_timer_init+0x290>)
    2524:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2526:	f997 200f 	ldrsb.w	r2, [r7, #15]
    252a:	4948      	ldr	r1, [pc, #288]	; (264c <_timer_init+0x27c>)
    252c:	4613      	mov	r3, r2
    252e:	009b      	lsls	r3, r3, #2
    2530:	4413      	add	r3, r2
    2532:	009b      	lsls	r3, r3, #2
    2534:	440b      	add	r3, r1
    2536:	3310      	adds	r3, #16
    2538:	681b      	ldr	r3, [r3, #0]
    253a:	b29b      	uxth	r3, r3
    253c:	461a      	mov	r2, r3
    253e:	2101      	movs	r1, #1
    2540:	6838      	ldr	r0, [r7, #0]
    2542:	4b47      	ldr	r3, [pc, #284]	; (2660 <_timer_init+0x290>)
    2544:	4798      	blx	r3
    2546:	e03b      	b.n	25c0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2548:	f997 200f 	ldrsb.w	r2, [r7, #15]
    254c:	493f      	ldr	r1, [pc, #252]	; (264c <_timer_init+0x27c>)
    254e:	4613      	mov	r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	4413      	add	r3, r2
    2554:	009b      	lsls	r3, r3, #2
    2556:	440b      	add	r3, r1
    2558:	3304      	adds	r3, #4
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	f003 030c 	and.w	r3, r3, #12
    2560:	2b04      	cmp	r3, #4
    2562:	d12d      	bne.n	25c0 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2564:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2568:	4938      	ldr	r1, [pc, #224]	; (264c <_timer_init+0x27c>)
    256a:	4613      	mov	r3, r2
    256c:	009b      	lsls	r3, r3, #2
    256e:	4413      	add	r3, r2
    2570:	009b      	lsls	r3, r3, #2
    2572:	440b      	add	r3, r1
    2574:	330c      	adds	r3, #12
    2576:	681b      	ldr	r3, [r3, #0]
    2578:	b2db      	uxtb	r3, r3
    257a:	461a      	mov	r2, r3
    257c:	2100      	movs	r1, #0
    257e:	6838      	ldr	r0, [r7, #0]
    2580:	4b38      	ldr	r3, [pc, #224]	; (2664 <_timer_init+0x294>)
    2582:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2584:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2588:	4930      	ldr	r1, [pc, #192]	; (264c <_timer_init+0x27c>)
    258a:	4613      	mov	r3, r2
    258c:	009b      	lsls	r3, r3, #2
    258e:	4413      	add	r3, r2
    2590:	009b      	lsls	r3, r3, #2
    2592:	440b      	add	r3, r1
    2594:	3310      	adds	r3, #16
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	b2db      	uxtb	r3, r3
    259a:	461a      	mov	r2, r3
    259c:	2101      	movs	r1, #1
    259e:	6838      	ldr	r0, [r7, #0]
    25a0:	4b30      	ldr	r3, [pc, #192]	; (2664 <_timer_init+0x294>)
    25a2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    25a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    25a8:	4928      	ldr	r1, [pc, #160]	; (264c <_timer_init+0x27c>)
    25aa:	4613      	mov	r3, r2
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	4413      	add	r3, r2
    25b0:	009b      	lsls	r3, r3, #2
    25b2:	440b      	add	r3, r1
    25b4:	330b      	adds	r3, #11
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	4619      	mov	r1, r3
    25ba:	6838      	ldr	r0, [r7, #0]
    25bc:	4b2a      	ldr	r3, [pc, #168]	; (2668 <_timer_init+0x298>)
    25be:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    25c0:	6838      	ldr	r0, [r7, #0]
    25c2:	4b2a      	ldr	r3, [pc, #168]	; (266c <_timer_init+0x29c>)
    25c4:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    25c6:	6879      	ldr	r1, [r7, #4]
    25c8:	6838      	ldr	r0, [r7, #0]
    25ca:	4b29      	ldr	r3, [pc, #164]	; (2670 <_timer_init+0x2a0>)
    25cc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    25ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    25d2:	491e      	ldr	r1, [pc, #120]	; (264c <_timer_init+0x27c>)
    25d4:	4613      	mov	r3, r2
    25d6:	009b      	lsls	r3, r3, #2
    25d8:	4413      	add	r3, r2
    25da:	009b      	lsls	r3, r3, #2
    25dc:	440b      	add	r3, r1
    25de:	3302      	adds	r3, #2
    25e0:	f9b3 3000 	ldrsh.w	r3, [r3]
    25e4:	4618      	mov	r0, r3
    25e6:	4b23      	ldr	r3, [pc, #140]	; (2674 <_timer_init+0x2a4>)
    25e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    25ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    25ee:	4917      	ldr	r1, [pc, #92]	; (264c <_timer_init+0x27c>)
    25f0:	4613      	mov	r3, r2
    25f2:	009b      	lsls	r3, r3, #2
    25f4:	4413      	add	r3, r2
    25f6:	009b      	lsls	r3, r3, #2
    25f8:	440b      	add	r3, r1
    25fa:	3302      	adds	r3, #2
    25fc:	f9b3 3000 	ldrsh.w	r3, [r3]
    2600:	4618      	mov	r0, r3
    2602:	4b1d      	ldr	r3, [pc, #116]	; (2678 <_timer_init+0x2a8>)
    2604:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    2606:	f997 200f 	ldrsb.w	r2, [r7, #15]
    260a:	4910      	ldr	r1, [pc, #64]	; (264c <_timer_init+0x27c>)
    260c:	4613      	mov	r3, r2
    260e:	009b      	lsls	r3, r3, #2
    2610:	4413      	add	r3, r2
    2612:	009b      	lsls	r3, r3, #2
    2614:	440b      	add	r3, r1
    2616:	3302      	adds	r3, #2
    2618:	f9b3 3000 	ldrsh.w	r3, [r3]
    261c:	4618      	mov	r0, r3
    261e:	4b17      	ldr	r3, [pc, #92]	; (267c <_timer_init+0x2ac>)
    2620:	4798      	blx	r3

	return ERR_NONE;
    2622:	2300      	movs	r3, #0
}
    2624:	4618      	mov	r0, r3
    2626:	3710      	adds	r7, #16
    2628:	46bd      	mov	sp, r7
    262a:	bd80      	pop	{r7, pc}
    262c:	000027c1 	.word	0x000027c1
    2630:	000034d0 	.word	0x000034d0
    2634:	000013cd 	.word	0x000013cd
    2638:	00002159 	.word	0x00002159
    263c:	00002265 	.word	0x00002265
    2640:	0000223d 	.word	0x0000223d
    2644:	00002135 	.word	0x00002135
    2648:	00002295 	.word	0x00002295
    264c:	20000018 	.word	0x20000018
    2650:	000022f5 	.word	0x000022f5
    2654:	000022b9 	.word	0x000022b9
    2658:	000022d7 	.word	0x000022d7
    265c:	000023a1 	.word	0x000023a1
    2660:	0000236d 	.word	0x0000236d
    2664:	0000233d 	.word	0x0000233d
    2668:	00002315 	.word	0x00002315
    266c:	000021c3 	.word	0x000021c3
    2670:	00002829 	.word	0x00002829
    2674:	000020b5 	.word	0x000020b5
    2678:	000020f9 	.word	0x000020f9
    267c:	00002079 	.word	0x00002079

00002680 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    2680:	b580      	push	{r7, lr}
    2682:	b082      	sub	sp, #8
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	68db      	ldr	r3, [r3, #12]
    268c:	4618      	mov	r0, r3
    268e:	4b03      	ldr	r3, [pc, #12]	; (269c <_timer_start+0x1c>)
    2690:	4798      	blx	r3
}
    2692:	bf00      	nop
    2694:	3708      	adds	r7, #8
    2696:	46bd      	mov	sp, r7
    2698:	bd80      	pop	{r7, pc}
    269a:	bf00      	nop
    269c:	000021dd 	.word	0x000021dd

000026a0 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    26a0:	b580      	push	{r7, lr}
    26a2:	b082      	sub	sp, #8
    26a4:	af00      	add	r7, sp, #0
    26a6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	68db      	ldr	r3, [r3, #12]
    26ac:	4618      	mov	r0, r3
    26ae:	4b03      	ldr	r3, [pc, #12]	; (26bc <_timer_stop+0x1c>)
    26b0:	4798      	blx	r3
}
    26b2:	bf00      	nop
    26b4:	3708      	adds	r7, #8
    26b6:	46bd      	mov	sp, r7
    26b8:	bd80      	pop	{r7, pc}
    26ba:	bf00      	nop
    26bc:	0000223d 	.word	0x0000223d

000026c0 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    26c0:	b580      	push	{r7, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	68db      	ldr	r3, [r3, #12]
    26cc:	4618      	mov	r0, r3
    26ce:	4b03      	ldr	r3, [pc, #12]	; (26dc <_timer_is_started+0x1c>)
    26d0:	4798      	blx	r3
    26d2:	4603      	mov	r3, r0
}
    26d4:	4618      	mov	r0, r3
    26d6:	3708      	adds	r7, #8
    26d8:	46bd      	mov	sp, r7
    26da:	bd80      	pop	{r7, pc}
    26dc:	00002205 	.word	0x00002205

000026e0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    26e0:	b480      	push	{r7}
    26e2:	af00      	add	r7, sp, #0
	return NULL;
    26e4:	2300      	movs	r3, #0
}
    26e6:	4618      	mov	r0, r3
    26e8:	46bd      	mov	sp, r7
    26ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ee:	4770      	bx	lr

000026f0 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    26f0:	b580      	push	{r7, lr}
    26f2:	b084      	sub	sp, #16
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	68db      	ldr	r3, [r3, #12]
    26fc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    26fe:	68f8      	ldr	r0, [r7, #12]
    2700:	4b0e      	ldr	r3, [pc, #56]	; (273c <_timer_set_irq+0x4c>)
    2702:	4798      	blx	r3
    2704:	4603      	mov	r3, r0
    2706:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    2708:	f240 1211 	movw	r2, #273	; 0x111
    270c:	490c      	ldr	r1, [pc, #48]	; (2740 <_timer_set_irq+0x50>)
    270e:	2001      	movs	r0, #1
    2710:	4b0c      	ldr	r3, [pc, #48]	; (2744 <_timer_set_irq+0x54>)
    2712:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    2714:	f997 200b 	ldrsb.w	r2, [r7, #11]
    2718:	490b      	ldr	r1, [pc, #44]	; (2748 <_timer_set_irq+0x58>)
    271a:	4613      	mov	r3, r2
    271c:	009b      	lsls	r3, r3, #2
    271e:	4413      	add	r3, r2
    2720:	009b      	lsls	r3, r3, #2
    2722:	440b      	add	r3, r1
    2724:	3302      	adds	r3, #2
    2726:	f9b3 3000 	ldrsh.w	r3, [r3]
    272a:	b2db      	uxtb	r3, r3
    272c:	4618      	mov	r0, r3
    272e:	4b07      	ldr	r3, [pc, #28]	; (274c <_timer_set_irq+0x5c>)
    2730:	4798      	blx	r3
}
    2732:	bf00      	nop
    2734:	3710      	adds	r7, #16
    2736:	46bd      	mov	sp, r7
    2738:	bd80      	pop	{r7, pc}
    273a:	bf00      	nop
    273c:	000027c1 	.word	0x000027c1
    2740:	000034d0 	.word	0x000034d0
    2744:	000013cd 	.word	0x000013cd
    2748:	20000018 	.word	0x20000018
    274c:	00001559 	.word	0x00001559

00002750 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2750:	b580      	push	{r7, lr}
    2752:	b084      	sub	sp, #16
    2754:	af00      	add	r7, sp, #0
    2756:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	68db      	ldr	r3, [r3, #12]
    275c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    275e:	68f8      	ldr	r0, [r7, #12]
    2760:	4b07      	ldr	r3, [pc, #28]	; (2780 <tc_interrupt_handler+0x30>)
    2762:	4798      	blx	r3
    2764:	4603      	mov	r3, r0
    2766:	2b00      	cmp	r3, #0
    2768:	d006      	beq.n	2778 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    276a:	68f8      	ldr	r0, [r7, #12]
    276c:	4b05      	ldr	r3, [pc, #20]	; (2784 <tc_interrupt_handler+0x34>)
    276e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	681b      	ldr	r3, [r3, #0]
    2774:	6878      	ldr	r0, [r7, #4]
    2776:	4798      	blx	r3
	}
}
    2778:	bf00      	nop
    277a:	3710      	adds	r7, #16
    277c:	46bd      	mov	sp, r7
    277e:	bd80      	pop	{r7, pc}
    2780:	00002181 	.word	0x00002181
    2784:	000021a9 	.word	0x000021a9

00002788 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    2788:	b580      	push	{r7, lr}
    278a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    278c:	4b03      	ldr	r3, [pc, #12]	; (279c <TC0_Handler+0x14>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	4618      	mov	r0, r3
    2792:	4b03      	ldr	r3, [pc, #12]	; (27a0 <TC0_Handler+0x18>)
    2794:	4798      	blx	r3
}
    2796:	bf00      	nop
    2798:	bd80      	pop	{r7, pc}
    279a:	bf00      	nop
    279c:	200000d0 	.word	0x200000d0
    27a0:	00002751 	.word	0x00002751

000027a4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    27a8:	4b03      	ldr	r3, [pc, #12]	; (27b8 <TC2_Handler+0x14>)
    27aa:	681b      	ldr	r3, [r3, #0]
    27ac:	4618      	mov	r0, r3
    27ae:	4b03      	ldr	r3, [pc, #12]	; (27bc <TC2_Handler+0x18>)
    27b0:	4798      	blx	r3
}
    27b2:	bf00      	nop
    27b4:	bd80      	pop	{r7, pc}
    27b6:	bf00      	nop
    27b8:	200000d4 	.word	0x200000d4
    27bc:	00002751 	.word	0x00002751

000027c0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	b084      	sub	sp, #16
    27c4:	af00      	add	r7, sp, #0
    27c6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    27c8:	6878      	ldr	r0, [r7, #4]
    27ca:	4b13      	ldr	r3, [pc, #76]	; (2818 <get_tc_index+0x58>)
    27cc:	4798      	blx	r3
    27ce:	4603      	mov	r3, r0
    27d0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    27d2:	2300      	movs	r3, #0
    27d4:	73fb      	strb	r3, [r7, #15]
    27d6:	e010      	b.n	27fa <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    27d8:	7bfa      	ldrb	r2, [r7, #15]
    27da:	4910      	ldr	r1, [pc, #64]	; (281c <get_tc_index+0x5c>)
    27dc:	4613      	mov	r3, r2
    27de:	009b      	lsls	r3, r3, #2
    27e0:	4413      	add	r3, r2
    27e2:	009b      	lsls	r3, r3, #2
    27e4:	440b      	add	r3, r1
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	7bba      	ldrb	r2, [r7, #14]
    27ea:	429a      	cmp	r2, r3
    27ec:	d102      	bne.n	27f4 <get_tc_index+0x34>
			return i;
    27ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27f2:	e00d      	b.n	2810 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    27f4:	7bfb      	ldrb	r3, [r7, #15]
    27f6:	3301      	adds	r3, #1
    27f8:	73fb      	strb	r3, [r7, #15]
    27fa:	7bfb      	ldrb	r3, [r7, #15]
    27fc:	2b01      	cmp	r3, #1
    27fe:	d9eb      	bls.n	27d8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    2800:	f44f 72a3 	mov.w	r2, #326	; 0x146
    2804:	4906      	ldr	r1, [pc, #24]	; (2820 <get_tc_index+0x60>)
    2806:	2000      	movs	r0, #0
    2808:	4b06      	ldr	r3, [pc, #24]	; (2824 <get_tc_index+0x64>)
    280a:	4798      	blx	r3
	return -1;
    280c:	f04f 33ff 	mov.w	r3, #4294967295
}
    2810:	4618      	mov	r0, r3
    2812:	3710      	adds	r7, #16
    2814:	46bd      	mov	sp, r7
    2816:	bd80      	pop	{r7, pc}
    2818:	0000286d 	.word	0x0000286d
    281c:	20000018 	.word	0x20000018
    2820:	000034d0 	.word	0x000034d0
    2824:	000013cd 	.word	0x000013cd

00002828 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    2828:	b480      	push	{r7}
    282a:	b083      	sub	sp, #12
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
    2830:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	4a09      	ldr	r2, [pc, #36]	; (285c <_tc_init_irq_param+0x34>)
    2836:	4293      	cmp	r3, r2
    2838:	d102      	bne.n	2840 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    283a:	4a09      	ldr	r2, [pc, #36]	; (2860 <_tc_init_irq_param+0x38>)
    283c:	683b      	ldr	r3, [r7, #0]
    283e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	4a08      	ldr	r2, [pc, #32]	; (2864 <_tc_init_irq_param+0x3c>)
    2844:	4293      	cmp	r3, r2
    2846:	d102      	bne.n	284e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    2848:	4a07      	ldr	r2, [pc, #28]	; (2868 <_tc_init_irq_param+0x40>)
    284a:	683b      	ldr	r3, [r7, #0]
    284c:	6013      	str	r3, [r2, #0]
	}
}
    284e:	bf00      	nop
    2850:	370c      	adds	r7, #12
    2852:	46bd      	mov	sp, r7
    2854:	f85d 7b04 	ldr.w	r7, [sp], #4
    2858:	4770      	bx	lr
    285a:	bf00      	nop
    285c:	40003800 	.word	0x40003800
    2860:	200000d0 	.word	0x200000d0
    2864:	4101a000 	.word	0x4101a000
    2868:	200000d4 	.word	0x200000d4

0000286c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    286c:	b4b0      	push	{r4, r5, r7}
    286e:	b08d      	sub	sp, #52	; 0x34
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2874:	4b13      	ldr	r3, [pc, #76]	; (28c4 <_get_hardware_offset+0x58>)
    2876:	f107 040c 	add.w	r4, r7, #12
    287a:	461d      	mov	r5, r3
    287c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    287e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2880:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2888:	2300      	movs	r3, #0
    288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    288c:	e010      	b.n	28b0 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2890:	009b      	lsls	r3, r3, #2
    2892:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2896:	4413      	add	r3, r2
    2898:	f853 3c24 	ldr.w	r3, [r3, #-36]
    289c:	461a      	mov	r2, r3
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	429a      	cmp	r2, r3
    28a2:	d102      	bne.n	28aa <_get_hardware_offset+0x3e>
			return i;
    28a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28a6:	b2db      	uxtb	r3, r3
    28a8:	e006      	b.n	28b8 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    28aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28ac:	3301      	adds	r3, #1
    28ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    28b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28b2:	2b07      	cmp	r3, #7
    28b4:	d9eb      	bls.n	288e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    28b6:	2300      	movs	r3, #0
}
    28b8:	4618      	mov	r0, r3
    28ba:	3734      	adds	r7, #52	; 0x34
    28bc:	46bd      	mov	sp, r7
    28be:	bcb0      	pop	{r4, r5, r7}
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop
    28c4:	000034e4 	.word	0x000034e4

000028c8 <timer_task1_cb>:
static int s = 0;
static int min = 0;
static struct io_descriptor *io;

static void timer_task1_cb(const struct timer_task *const timer_task)
{	
    28c8:	b590      	push	{r4, r7, lr}
    28ca:	b085      	sub	sp, #20
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
	s += 1;
    28d0:	4b12      	ldr	r3, [pc, #72]	; (291c <timer_task1_cb+0x54>)
    28d2:	681b      	ldr	r3, [r3, #0]
    28d4:	3301      	adds	r3, #1
    28d6:	4a11      	ldr	r2, [pc, #68]	; (291c <timer_task1_cb+0x54>)
    28d8:	6013      	str	r3, [r2, #0]
	
	if(s < 60){
    28da:	4b10      	ldr	r3, [pc, #64]	; (291c <timer_task1_cb+0x54>)
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	2b3b      	cmp	r3, #59	; 0x3b
    28e0:	dd07      	ble.n	28f2 <timer_task1_cb+0x2a>
	}else{
		s = 0;
    28e2:	4b0e      	ldr	r3, [pc, #56]	; (291c <timer_task1_cb+0x54>)
    28e4:	2200      	movs	r2, #0
    28e6:	601a      	str	r2, [r3, #0]
		min += 1;
    28e8:	4b0d      	ldr	r3, [pc, #52]	; (2920 <timer_task1_cb+0x58>)
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	3301      	adds	r3, #1
    28ee:	4a0c      	ldr	r2, [pc, #48]	; (2920 <timer_task1_cb+0x58>)
    28f0:	6013      	str	r3, [r2, #0]
	}
	
	char timeString[6];
	sprintf(timeString, "%02d:%02d\n", min, s);
    28f2:	4b0b      	ldr	r3, [pc, #44]	; (2920 <timer_task1_cb+0x58>)
    28f4:	681a      	ldr	r2, [r3, #0]
    28f6:	4b09      	ldr	r3, [pc, #36]	; (291c <timer_task1_cb+0x54>)
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	f107 0008 	add.w	r0, r7, #8
    28fe:	4909      	ldr	r1, [pc, #36]	; (2924 <timer_task1_cb+0x5c>)
    2900:	4c09      	ldr	r4, [pc, #36]	; (2928 <timer_task1_cb+0x60>)
    2902:	47a0      	blx	r4
	io_write(io, (uint8_t *)timeString, 6);
    2904:	4b09      	ldr	r3, [pc, #36]	; (292c <timer_task1_cb+0x64>)
    2906:	681b      	ldr	r3, [r3, #0]
    2908:	f107 0108 	add.w	r1, r7, #8
    290c:	2206      	movs	r2, #6
    290e:	4618      	mov	r0, r3
    2910:	4b07      	ldr	r3, [pc, #28]	; (2930 <timer_task1_cb+0x68>)
    2912:	4798      	blx	r3
}
    2914:	bf00      	nop
    2916:	3714      	adds	r7, #20
    2918:	46bd      	mov	sp, r7
    291a:	bd90      	pop	{r4, r7, pc}
    291c:	200000ec 	.word	0x200000ec
    2920:	200000f0 	.word	0x200000f0
    2924:	00003504 	.word	0x00003504
    2928:	00002b15 	.word	0x00002b15
    292c:	200000f4 	.word	0x200000f4
    2930:	00000d7d 	.word	0x00000d7d

00002934 <main>:


int main(void)
{
    2934:	b580      	push	{r7, lr}
    2936:	b082      	sub	sp, #8
    2938:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    293a:	4b44      	ldr	r3, [pc, #272]	; (2a4c <main+0x118>)
    293c:	4798      	blx	r3
	
	bool clock_edge_event1 = 0;
    293e:	2300      	movs	r3, #0
    2940:	71fb      	strb	r3, [r7, #7]
	bool clock_edge_event2 = 0;
    2942:	2300      	movs	r3, #0
    2944:	71bb      	strb	r3, [r7, #6]
	bool clock_edge_event3 = 0;
    2946:	2300      	movs	r3, #0
    2948:	717b      	strb	r3, [r7, #5]
	
	/* Initialization of the UART communication */
	usart_sync_get_io_descriptor(&USART_0, &io);
    294a:	4941      	ldr	r1, [pc, #260]	; (2a50 <main+0x11c>)
    294c:	4841      	ldr	r0, [pc, #260]	; (2a54 <main+0x120>)
    294e:	4b42      	ldr	r3, [pc, #264]	; (2a58 <main+0x124>)
    2950:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    2952:	4840      	ldr	r0, [pc, #256]	; (2a54 <main+0x120>)
    2954:	4b41      	ldr	r3, [pc, #260]	; (2a5c <main+0x128>)
    2956:	4798      	blx	r3
	
	task1.interval = 25;
    2958:	4b41      	ldr	r3, [pc, #260]	; (2a60 <main+0x12c>)
    295a:	2219      	movs	r2, #25
    295c:	609a      	str	r2, [r3, #8]
	task1.cb = timer_task1_cb;
    295e:	4b40      	ldr	r3, [pc, #256]	; (2a60 <main+0x12c>)
    2960:	4a40      	ldr	r2, [pc, #256]	; (2a64 <main+0x130>)
    2962:	60da      	str	r2, [r3, #12]
	task1.mode = TIMER_TASK_REPEAT;
    2964:	4b3e      	ldr	r3, [pc, #248]	; (2a60 <main+0x12c>)
    2966:	2201      	movs	r2, #1
    2968:	741a      	strb	r2, [r3, #16]
	
	// Add timer task
	timer_add_task(&TIMER_0, &task1);
    296a:	493d      	ldr	r1, [pc, #244]	; (2a60 <main+0x12c>)
    296c:	483e      	ldr	r0, [pc, #248]	; (2a68 <main+0x134>)
    296e:	4b3f      	ldr	r3, [pc, #252]	; (2a6c <main+0x138>)
    2970:	4798      	blx	r3
	
	while (1){
		
		clock_edge_event1 = edge_detector(PORT->Group[CODE_INPUT1/32].IN.reg & (1<<(CODE_INPUT1%32)),0);
    2972:	4b3f      	ldr	r3, [pc, #252]	; (2a70 <main+0x13c>)
    2974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2978:	f003 0320 	and.w	r3, r3, #32
    297c:	2b00      	cmp	r3, #0
    297e:	bf14      	ite	ne
    2980:	2301      	movne	r3, #1
    2982:	2300      	moveq	r3, #0
    2984:	b2db      	uxtb	r3, r3
    2986:	2100      	movs	r1, #0
    2988:	4618      	mov	r0, r3
    298a:	4b3a      	ldr	r3, [pc, #232]	; (2a74 <main+0x140>)
    298c:	4798      	blx	r3
    298e:	4603      	mov	r3, r0
    2990:	71fb      	strb	r3, [r7, #7]
		clock_edge_event2 = edge_detector(PORT->Group[CODE_INPUT2/32].IN.reg & (1<<(CODE_INPUT2%32)),1);
    2992:	4b37      	ldr	r3, [pc, #220]	; (2a70 <main+0x13c>)
    2994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    299c:	2b00      	cmp	r3, #0
    299e:	bf14      	ite	ne
    29a0:	2301      	movne	r3, #1
    29a2:	2300      	moveq	r3, #0
    29a4:	b2db      	uxtb	r3, r3
    29a6:	2101      	movs	r1, #1
    29a8:	4618      	mov	r0, r3
    29aa:	4b32      	ldr	r3, [pc, #200]	; (2a74 <main+0x140>)
    29ac:	4798      	blx	r3
    29ae:	4603      	mov	r3, r0
    29b0:	71bb      	strb	r3, [r7, #6]
		clock_edge_event3 = edge_detector(PORT->Group[CODE_INPUT3/32].IN.reg & (1<<(CODE_INPUT3%32)),2);
    29b2:	4b2f      	ldr	r3, [pc, #188]	; (2a70 <main+0x13c>)
    29b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    29b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    29bc:	2b00      	cmp	r3, #0
    29be:	bf14      	ite	ne
    29c0:	2301      	movne	r3, #1
    29c2:	2300      	moveq	r3, #0
    29c4:	b2db      	uxtb	r3, r3
    29c6:	2102      	movs	r1, #2
    29c8:	4618      	mov	r0, r3
    29ca:	4b2a      	ldr	r3, [pc, #168]	; (2a74 <main+0x140>)
    29cc:	4798      	blx	r3
    29ce:	4603      	mov	r3, r0
    29d0:	717b      	strb	r3, [r7, #5]
		
		if(clock_edge_event1 && !clock_edge_event2 && !clock_edge_event3){
    29d2:	79fb      	ldrb	r3, [r7, #7]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d00f      	beq.n	29f8 <main+0xc4>
    29d8:	79bb      	ldrb	r3, [r7, #6]
    29da:	f083 0301 	eor.w	r3, r3, #1
    29de:	b2db      	uxtb	r3, r3
    29e0:	2b00      	cmp	r3, #0
    29e2:	d009      	beq.n	29f8 <main+0xc4>
    29e4:	797b      	ldrb	r3, [r7, #5]
    29e6:	f083 0301 	eor.w	r3, r3, #1
    29ea:	b2db      	uxtb	r3, r3
    29ec:	2b00      	cmp	r3, #0
    29ee:	d003      	beq.n	29f8 <main+0xc4>
			timer_start(&TIMER_0);
    29f0:	481d      	ldr	r0, [pc, #116]	; (2a68 <main+0x134>)
    29f2:	4b21      	ldr	r3, [pc, #132]	; (2a78 <main+0x144>)
    29f4:	4798      	blx	r3
    29f6:	e027      	b.n	2a48 <main+0x114>
		}else if(!clock_edge_event1 && clock_edge_event2 && !clock_edge_event3){
    29f8:	79fb      	ldrb	r3, [r7, #7]
    29fa:	f083 0301 	eor.w	r3, r3, #1
    29fe:	b2db      	uxtb	r3, r3
    2a00:	2b00      	cmp	r3, #0
    2a02:	d00c      	beq.n	2a1e <main+0xea>
    2a04:	79bb      	ldrb	r3, [r7, #6]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d009      	beq.n	2a1e <main+0xea>
    2a0a:	797b      	ldrb	r3, [r7, #5]
    2a0c:	f083 0301 	eor.w	r3, r3, #1
    2a10:	b2db      	uxtb	r3, r3
    2a12:	2b00      	cmp	r3, #0
    2a14:	d003      	beq.n	2a1e <main+0xea>
			timer_stop(&TIMER_0);
    2a16:	4814      	ldr	r0, [pc, #80]	; (2a68 <main+0x134>)
    2a18:	4b18      	ldr	r3, [pc, #96]	; (2a7c <main+0x148>)
    2a1a:	4798      	blx	r3
    2a1c:	e014      	b.n	2a48 <main+0x114>
		}else if(!clock_edge_event1 && !clock_edge_event2 && clock_edge_event3){
    2a1e:	79fb      	ldrb	r3, [r7, #7]
    2a20:	f083 0301 	eor.w	r3, r3, #1
    2a24:	b2db      	uxtb	r3, r3
    2a26:	2b00      	cmp	r3, #0
    2a28:	d0a3      	beq.n	2972 <main+0x3e>
    2a2a:	79bb      	ldrb	r3, [r7, #6]
    2a2c:	f083 0301 	eor.w	r3, r3, #1
    2a30:	b2db      	uxtb	r3, r3
    2a32:	2b00      	cmp	r3, #0
    2a34:	d09d      	beq.n	2972 <main+0x3e>
    2a36:	797b      	ldrb	r3, [r7, #5]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d09a      	beq.n	2972 <main+0x3e>
			min = 0;
    2a3c:	4b10      	ldr	r3, [pc, #64]	; (2a80 <main+0x14c>)
    2a3e:	2200      	movs	r2, #0
    2a40:	601a      	str	r2, [r3, #0]
			s = 0;
    2a42:	4b10      	ldr	r3, [pc, #64]	; (2a84 <main+0x150>)
    2a44:	2200      	movs	r2, #0
    2a46:	601a      	str	r2, [r3, #0]
		clock_edge_event1 = edge_detector(PORT->Group[CODE_INPUT1/32].IN.reg & (1<<(CODE_INPUT1%32)),0);
    2a48:	e793      	b.n	2972 <main+0x3e>
    2a4a:	bf00      	nop
    2a4c:	000002d1 	.word	0x000002d1
    2a50:	200000f4 	.word	0x200000f4
    2a54:	2000011c 	.word	0x2000011c
    2a58:	0000122d 	.word	0x0000122d
    2a5c:	000011ed 	.word	0x000011ed
    2a60:	200000d8 	.word	0x200000d8
    2a64:	000028c9 	.word	0x000028c9
    2a68:	20000128 	.word	0x20000128
    2a6c:	00000f19 	.word	0x00000f19
    2a70:	41008000 	.word	0x41008000
    2a74:	000002e1 	.word	0x000002e1
    2a78:	00000e69 	.word	0x00000e69
    2a7c:	00000ebd 	.word	0x00000ebd
    2a80:	200000f0 	.word	0x200000f0
    2a84:	200000ec 	.word	0x200000ec

00002a88 <hri_tcc_clear_INTFLAG_reg>:
{
    2a88:	b480      	push	{r7}
    2a8a:	b083      	sub	sp, #12
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
    2a90:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	683a      	ldr	r2, [r7, #0]
    2a96:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2a98:	bf00      	nop
    2a9a:	370c      	adds	r7, #12
    2a9c:	46bd      	mov	sp, r7
    2a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aa2:	4770      	bx	lr

00002aa4 <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    2aa8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2aac:	4804      	ldr	r0, [pc, #16]	; (2ac0 <TCC0_1_Handler+0x1c>)
    2aae:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <TCC0_1_Handler+0x20>)
    2ab0:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    2ab2:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <TCC0_1_Handler+0x24>)
    2ab4:	681b      	ldr	r3, [r3, #0]
    2ab6:	4802      	ldr	r0, [pc, #8]	; (2ac0 <TCC0_1_Handler+0x1c>)
    2ab8:	4798      	blx	r3
}
    2aba:	bf00      	nop
    2abc:	bd80      	pop	{r7, pc}
    2abe:	bf00      	nop
    2ac0:	41016000 	.word	0x41016000
    2ac4:	00002a89 	.word	0x00002a89
    2ac8:	20000154 	.word	0x20000154

00002acc <__libc_init_array>:
    2acc:	b570      	push	{r4, r5, r6, lr}
    2ace:	4e0d      	ldr	r6, [pc, #52]	; (2b04 <__libc_init_array+0x38>)
    2ad0:	4c0d      	ldr	r4, [pc, #52]	; (2b08 <__libc_init_array+0x3c>)
    2ad2:	1ba4      	subs	r4, r4, r6
    2ad4:	10a4      	asrs	r4, r4, #2
    2ad6:	2500      	movs	r5, #0
    2ad8:	42a5      	cmp	r5, r4
    2ada:	d109      	bne.n	2af0 <__libc_init_array+0x24>
    2adc:	4e0b      	ldr	r6, [pc, #44]	; (2b0c <__libc_init_array+0x40>)
    2ade:	4c0c      	ldr	r4, [pc, #48]	; (2b10 <__libc_init_array+0x44>)
    2ae0:	f000 fd60 	bl	35a4 <_init>
    2ae4:	1ba4      	subs	r4, r4, r6
    2ae6:	10a4      	asrs	r4, r4, #2
    2ae8:	2500      	movs	r5, #0
    2aea:	42a5      	cmp	r5, r4
    2aec:	d105      	bne.n	2afa <__libc_init_array+0x2e>
    2aee:	bd70      	pop	{r4, r5, r6, pc}
    2af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2af4:	4798      	blx	r3
    2af6:	3501      	adds	r5, #1
    2af8:	e7ee      	b.n	2ad8 <__libc_init_array+0xc>
    2afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2afe:	4798      	blx	r3
    2b00:	3501      	adds	r5, #1
    2b02:	e7f2      	b.n	2aea <__libc_init_array+0x1e>
    2b04:	000035b0 	.word	0x000035b0
    2b08:	000035b0 	.word	0x000035b0
    2b0c:	000035b0 	.word	0x000035b0
    2b10:	000035b4 	.word	0x000035b4

00002b14 <siprintf>:
    2b14:	b40e      	push	{r1, r2, r3}
    2b16:	b500      	push	{lr}
    2b18:	b09c      	sub	sp, #112	; 0x70
    2b1a:	f44f 7102 	mov.w	r1, #520	; 0x208
    2b1e:	ab1d      	add	r3, sp, #116	; 0x74
    2b20:	f8ad 1014 	strh.w	r1, [sp, #20]
    2b24:	9002      	str	r0, [sp, #8]
    2b26:	9006      	str	r0, [sp, #24]
    2b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2b2c:	480a      	ldr	r0, [pc, #40]	; (2b58 <siprintf+0x44>)
    2b2e:	9104      	str	r1, [sp, #16]
    2b30:	9107      	str	r1, [sp, #28]
    2b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2b36:	f853 2b04 	ldr.w	r2, [r3], #4
    2b3a:	f8ad 1016 	strh.w	r1, [sp, #22]
    2b3e:	6800      	ldr	r0, [r0, #0]
    2b40:	9301      	str	r3, [sp, #4]
    2b42:	a902      	add	r1, sp, #8
    2b44:	f000 f8c4 	bl	2cd0 <_svfiprintf_r>
    2b48:	9b02      	ldr	r3, [sp, #8]
    2b4a:	2200      	movs	r2, #0
    2b4c:	701a      	strb	r2, [r3, #0]
    2b4e:	b01c      	add	sp, #112	; 0x70
    2b50:	f85d eb04 	ldr.w	lr, [sp], #4
    2b54:	b003      	add	sp, #12
    2b56:	4770      	bx	lr
    2b58:	20000040 	.word	0x20000040

00002b5c <_malloc_r>:
    2b5c:	b570      	push	{r4, r5, r6, lr}
    2b5e:	1ccd      	adds	r5, r1, #3
    2b60:	f025 0503 	bic.w	r5, r5, #3
    2b64:	3508      	adds	r5, #8
    2b66:	2d0c      	cmp	r5, #12
    2b68:	bf38      	it	cc
    2b6a:	250c      	movcc	r5, #12
    2b6c:	2d00      	cmp	r5, #0
    2b6e:	4606      	mov	r6, r0
    2b70:	db01      	blt.n	2b76 <_malloc_r+0x1a>
    2b72:	42a9      	cmp	r1, r5
    2b74:	d903      	bls.n	2b7e <_malloc_r+0x22>
    2b76:	230c      	movs	r3, #12
    2b78:	6033      	str	r3, [r6, #0]
    2b7a:	2000      	movs	r0, #0
    2b7c:	bd70      	pop	{r4, r5, r6, pc}
    2b7e:	f000 fbbc 	bl	32fa <__malloc_lock>
    2b82:	4a23      	ldr	r2, [pc, #140]	; (2c10 <_malloc_r+0xb4>)
    2b84:	6814      	ldr	r4, [r2, #0]
    2b86:	4621      	mov	r1, r4
    2b88:	b991      	cbnz	r1, 2bb0 <_malloc_r+0x54>
    2b8a:	4c22      	ldr	r4, [pc, #136]	; (2c14 <_malloc_r+0xb8>)
    2b8c:	6823      	ldr	r3, [r4, #0]
    2b8e:	b91b      	cbnz	r3, 2b98 <_malloc_r+0x3c>
    2b90:	4630      	mov	r0, r6
    2b92:	f000 fb27 	bl	31e4 <_sbrk_r>
    2b96:	6020      	str	r0, [r4, #0]
    2b98:	4629      	mov	r1, r5
    2b9a:	4630      	mov	r0, r6
    2b9c:	f000 fb22 	bl	31e4 <_sbrk_r>
    2ba0:	1c43      	adds	r3, r0, #1
    2ba2:	d126      	bne.n	2bf2 <_malloc_r+0x96>
    2ba4:	230c      	movs	r3, #12
    2ba6:	6033      	str	r3, [r6, #0]
    2ba8:	4630      	mov	r0, r6
    2baa:	f000 fba7 	bl	32fc <__malloc_unlock>
    2bae:	e7e4      	b.n	2b7a <_malloc_r+0x1e>
    2bb0:	680b      	ldr	r3, [r1, #0]
    2bb2:	1b5b      	subs	r3, r3, r5
    2bb4:	d41a      	bmi.n	2bec <_malloc_r+0x90>
    2bb6:	2b0b      	cmp	r3, #11
    2bb8:	d90f      	bls.n	2bda <_malloc_r+0x7e>
    2bba:	600b      	str	r3, [r1, #0]
    2bbc:	50cd      	str	r5, [r1, r3]
    2bbe:	18cc      	adds	r4, r1, r3
    2bc0:	4630      	mov	r0, r6
    2bc2:	f000 fb9b 	bl	32fc <__malloc_unlock>
    2bc6:	f104 000b 	add.w	r0, r4, #11
    2bca:	1d23      	adds	r3, r4, #4
    2bcc:	f020 0007 	bic.w	r0, r0, #7
    2bd0:	1ac3      	subs	r3, r0, r3
    2bd2:	d01b      	beq.n	2c0c <_malloc_r+0xb0>
    2bd4:	425a      	negs	r2, r3
    2bd6:	50e2      	str	r2, [r4, r3]
    2bd8:	bd70      	pop	{r4, r5, r6, pc}
    2bda:	428c      	cmp	r4, r1
    2bdc:	bf0d      	iteet	eq
    2bde:	6863      	ldreq	r3, [r4, #4]
    2be0:	684b      	ldrne	r3, [r1, #4]
    2be2:	6063      	strne	r3, [r4, #4]
    2be4:	6013      	streq	r3, [r2, #0]
    2be6:	bf18      	it	ne
    2be8:	460c      	movne	r4, r1
    2bea:	e7e9      	b.n	2bc0 <_malloc_r+0x64>
    2bec:	460c      	mov	r4, r1
    2bee:	6849      	ldr	r1, [r1, #4]
    2bf0:	e7ca      	b.n	2b88 <_malloc_r+0x2c>
    2bf2:	1cc4      	adds	r4, r0, #3
    2bf4:	f024 0403 	bic.w	r4, r4, #3
    2bf8:	42a0      	cmp	r0, r4
    2bfa:	d005      	beq.n	2c08 <_malloc_r+0xac>
    2bfc:	1a21      	subs	r1, r4, r0
    2bfe:	4630      	mov	r0, r6
    2c00:	f000 faf0 	bl	31e4 <_sbrk_r>
    2c04:	3001      	adds	r0, #1
    2c06:	d0cd      	beq.n	2ba4 <_malloc_r+0x48>
    2c08:	6025      	str	r5, [r4, #0]
    2c0a:	e7d9      	b.n	2bc0 <_malloc_r+0x64>
    2c0c:	bd70      	pop	{r4, r5, r6, pc}
    2c0e:	bf00      	nop
    2c10:	200000f8 	.word	0x200000f8
    2c14:	200000fc 	.word	0x200000fc

00002c18 <__ssputs_r>:
    2c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c1c:	688e      	ldr	r6, [r1, #8]
    2c1e:	429e      	cmp	r6, r3
    2c20:	4682      	mov	sl, r0
    2c22:	460c      	mov	r4, r1
    2c24:	4691      	mov	r9, r2
    2c26:	4698      	mov	r8, r3
    2c28:	d835      	bhi.n	2c96 <__ssputs_r+0x7e>
    2c2a:	898a      	ldrh	r2, [r1, #12]
    2c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
    2c30:	d031      	beq.n	2c96 <__ssputs_r+0x7e>
    2c32:	6825      	ldr	r5, [r4, #0]
    2c34:	6909      	ldr	r1, [r1, #16]
    2c36:	1a6f      	subs	r7, r5, r1
    2c38:	6965      	ldr	r5, [r4, #20]
    2c3a:	2302      	movs	r3, #2
    2c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2c40:	fb95 f5f3 	sdiv	r5, r5, r3
    2c44:	f108 0301 	add.w	r3, r8, #1
    2c48:	443b      	add	r3, r7
    2c4a:	429d      	cmp	r5, r3
    2c4c:	bf38      	it	cc
    2c4e:	461d      	movcc	r5, r3
    2c50:	0553      	lsls	r3, r2, #21
    2c52:	d531      	bpl.n	2cb8 <__ssputs_r+0xa0>
    2c54:	4629      	mov	r1, r5
    2c56:	f7ff ff81 	bl	2b5c <_malloc_r>
    2c5a:	4606      	mov	r6, r0
    2c5c:	b950      	cbnz	r0, 2c74 <__ssputs_r+0x5c>
    2c5e:	230c      	movs	r3, #12
    2c60:	f8ca 3000 	str.w	r3, [sl]
    2c64:	89a3      	ldrh	r3, [r4, #12]
    2c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c6a:	81a3      	strh	r3, [r4, #12]
    2c6c:	f04f 30ff 	mov.w	r0, #4294967295
    2c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c74:	463a      	mov	r2, r7
    2c76:	6921      	ldr	r1, [r4, #16]
    2c78:	f000 fb1a 	bl	32b0 <memcpy>
    2c7c:	89a3      	ldrh	r3, [r4, #12]
    2c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    2c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c86:	81a3      	strh	r3, [r4, #12]
    2c88:	6126      	str	r6, [r4, #16]
    2c8a:	6165      	str	r5, [r4, #20]
    2c8c:	443e      	add	r6, r7
    2c8e:	1bed      	subs	r5, r5, r7
    2c90:	6026      	str	r6, [r4, #0]
    2c92:	60a5      	str	r5, [r4, #8]
    2c94:	4646      	mov	r6, r8
    2c96:	4546      	cmp	r6, r8
    2c98:	bf28      	it	cs
    2c9a:	4646      	movcs	r6, r8
    2c9c:	4632      	mov	r2, r6
    2c9e:	4649      	mov	r1, r9
    2ca0:	6820      	ldr	r0, [r4, #0]
    2ca2:	f000 fb10 	bl	32c6 <memmove>
    2ca6:	68a3      	ldr	r3, [r4, #8]
    2ca8:	1b9b      	subs	r3, r3, r6
    2caa:	60a3      	str	r3, [r4, #8]
    2cac:	6823      	ldr	r3, [r4, #0]
    2cae:	441e      	add	r6, r3
    2cb0:	6026      	str	r6, [r4, #0]
    2cb2:	2000      	movs	r0, #0
    2cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cb8:	462a      	mov	r2, r5
    2cba:	f000 fb6f 	bl	339c <_realloc_r>
    2cbe:	4606      	mov	r6, r0
    2cc0:	2800      	cmp	r0, #0
    2cc2:	d1e1      	bne.n	2c88 <__ssputs_r+0x70>
    2cc4:	6921      	ldr	r1, [r4, #16]
    2cc6:	4650      	mov	r0, sl
    2cc8:	f000 fb1a 	bl	3300 <_free_r>
    2ccc:	e7c7      	b.n	2c5e <__ssputs_r+0x46>
	...

00002cd0 <_svfiprintf_r>:
    2cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cd4:	b09d      	sub	sp, #116	; 0x74
    2cd6:	4680      	mov	r8, r0
    2cd8:	9303      	str	r3, [sp, #12]
    2cda:	898b      	ldrh	r3, [r1, #12]
    2cdc:	061c      	lsls	r4, r3, #24
    2cde:	460d      	mov	r5, r1
    2ce0:	4616      	mov	r6, r2
    2ce2:	d50f      	bpl.n	2d04 <_svfiprintf_r+0x34>
    2ce4:	690b      	ldr	r3, [r1, #16]
    2ce6:	b96b      	cbnz	r3, 2d04 <_svfiprintf_r+0x34>
    2ce8:	2140      	movs	r1, #64	; 0x40
    2cea:	f7ff ff37 	bl	2b5c <_malloc_r>
    2cee:	6028      	str	r0, [r5, #0]
    2cf0:	6128      	str	r0, [r5, #16]
    2cf2:	b928      	cbnz	r0, 2d00 <_svfiprintf_r+0x30>
    2cf4:	230c      	movs	r3, #12
    2cf6:	f8c8 3000 	str.w	r3, [r8]
    2cfa:	f04f 30ff 	mov.w	r0, #4294967295
    2cfe:	e0c5      	b.n	2e8c <_svfiprintf_r+0x1bc>
    2d00:	2340      	movs	r3, #64	; 0x40
    2d02:	616b      	str	r3, [r5, #20]
    2d04:	2300      	movs	r3, #0
    2d06:	9309      	str	r3, [sp, #36]	; 0x24
    2d08:	2320      	movs	r3, #32
    2d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2d0e:	2330      	movs	r3, #48	; 0x30
    2d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2d14:	f04f 0b01 	mov.w	fp, #1
    2d18:	4637      	mov	r7, r6
    2d1a:	463c      	mov	r4, r7
    2d1c:	f814 3b01 	ldrb.w	r3, [r4], #1
    2d20:	2b00      	cmp	r3, #0
    2d22:	d13c      	bne.n	2d9e <_svfiprintf_r+0xce>
    2d24:	ebb7 0a06 	subs.w	sl, r7, r6
    2d28:	d00b      	beq.n	2d42 <_svfiprintf_r+0x72>
    2d2a:	4653      	mov	r3, sl
    2d2c:	4632      	mov	r2, r6
    2d2e:	4629      	mov	r1, r5
    2d30:	4640      	mov	r0, r8
    2d32:	f7ff ff71 	bl	2c18 <__ssputs_r>
    2d36:	3001      	adds	r0, #1
    2d38:	f000 80a3 	beq.w	2e82 <_svfiprintf_r+0x1b2>
    2d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d3e:	4453      	add	r3, sl
    2d40:	9309      	str	r3, [sp, #36]	; 0x24
    2d42:	783b      	ldrb	r3, [r7, #0]
    2d44:	2b00      	cmp	r3, #0
    2d46:	f000 809c 	beq.w	2e82 <_svfiprintf_r+0x1b2>
    2d4a:	2300      	movs	r3, #0
    2d4c:	f04f 32ff 	mov.w	r2, #4294967295
    2d50:	9304      	str	r3, [sp, #16]
    2d52:	9307      	str	r3, [sp, #28]
    2d54:	9205      	str	r2, [sp, #20]
    2d56:	9306      	str	r3, [sp, #24]
    2d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2d5c:	931a      	str	r3, [sp, #104]	; 0x68
    2d5e:	2205      	movs	r2, #5
    2d60:	7821      	ldrb	r1, [r4, #0]
    2d62:	4850      	ldr	r0, [pc, #320]	; (2ea4 <_svfiprintf_r+0x1d4>)
    2d64:	f000 fa54 	bl	3210 <memchr>
    2d68:	1c67      	adds	r7, r4, #1
    2d6a:	9b04      	ldr	r3, [sp, #16]
    2d6c:	b9d8      	cbnz	r0, 2da6 <_svfiprintf_r+0xd6>
    2d6e:	06d9      	lsls	r1, r3, #27
    2d70:	bf44      	itt	mi
    2d72:	2220      	movmi	r2, #32
    2d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2d78:	071a      	lsls	r2, r3, #28
    2d7a:	bf44      	itt	mi
    2d7c:	222b      	movmi	r2, #43	; 0x2b
    2d7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2d82:	7822      	ldrb	r2, [r4, #0]
    2d84:	2a2a      	cmp	r2, #42	; 0x2a
    2d86:	d016      	beq.n	2db6 <_svfiprintf_r+0xe6>
    2d88:	9a07      	ldr	r2, [sp, #28]
    2d8a:	2100      	movs	r1, #0
    2d8c:	200a      	movs	r0, #10
    2d8e:	4627      	mov	r7, r4
    2d90:	3401      	adds	r4, #1
    2d92:	783b      	ldrb	r3, [r7, #0]
    2d94:	3b30      	subs	r3, #48	; 0x30
    2d96:	2b09      	cmp	r3, #9
    2d98:	d951      	bls.n	2e3e <_svfiprintf_r+0x16e>
    2d9a:	b1c9      	cbz	r1, 2dd0 <_svfiprintf_r+0x100>
    2d9c:	e011      	b.n	2dc2 <_svfiprintf_r+0xf2>
    2d9e:	2b25      	cmp	r3, #37	; 0x25
    2da0:	d0c0      	beq.n	2d24 <_svfiprintf_r+0x54>
    2da2:	4627      	mov	r7, r4
    2da4:	e7b9      	b.n	2d1a <_svfiprintf_r+0x4a>
    2da6:	4a3f      	ldr	r2, [pc, #252]	; (2ea4 <_svfiprintf_r+0x1d4>)
    2da8:	1a80      	subs	r0, r0, r2
    2daa:	fa0b f000 	lsl.w	r0, fp, r0
    2dae:	4318      	orrs	r0, r3
    2db0:	9004      	str	r0, [sp, #16]
    2db2:	463c      	mov	r4, r7
    2db4:	e7d3      	b.n	2d5e <_svfiprintf_r+0x8e>
    2db6:	9a03      	ldr	r2, [sp, #12]
    2db8:	1d11      	adds	r1, r2, #4
    2dba:	6812      	ldr	r2, [r2, #0]
    2dbc:	9103      	str	r1, [sp, #12]
    2dbe:	2a00      	cmp	r2, #0
    2dc0:	db01      	blt.n	2dc6 <_svfiprintf_r+0xf6>
    2dc2:	9207      	str	r2, [sp, #28]
    2dc4:	e004      	b.n	2dd0 <_svfiprintf_r+0x100>
    2dc6:	4252      	negs	r2, r2
    2dc8:	f043 0302 	orr.w	r3, r3, #2
    2dcc:	9207      	str	r2, [sp, #28]
    2dce:	9304      	str	r3, [sp, #16]
    2dd0:	783b      	ldrb	r3, [r7, #0]
    2dd2:	2b2e      	cmp	r3, #46	; 0x2e
    2dd4:	d10e      	bne.n	2df4 <_svfiprintf_r+0x124>
    2dd6:	787b      	ldrb	r3, [r7, #1]
    2dd8:	2b2a      	cmp	r3, #42	; 0x2a
    2dda:	f107 0101 	add.w	r1, r7, #1
    2dde:	d132      	bne.n	2e46 <_svfiprintf_r+0x176>
    2de0:	9b03      	ldr	r3, [sp, #12]
    2de2:	1d1a      	adds	r2, r3, #4
    2de4:	681b      	ldr	r3, [r3, #0]
    2de6:	9203      	str	r2, [sp, #12]
    2de8:	2b00      	cmp	r3, #0
    2dea:	bfb8      	it	lt
    2dec:	f04f 33ff 	movlt.w	r3, #4294967295
    2df0:	3702      	adds	r7, #2
    2df2:	9305      	str	r3, [sp, #20]
    2df4:	4c2c      	ldr	r4, [pc, #176]	; (2ea8 <_svfiprintf_r+0x1d8>)
    2df6:	7839      	ldrb	r1, [r7, #0]
    2df8:	2203      	movs	r2, #3
    2dfa:	4620      	mov	r0, r4
    2dfc:	f000 fa08 	bl	3210 <memchr>
    2e00:	b138      	cbz	r0, 2e12 <_svfiprintf_r+0x142>
    2e02:	2340      	movs	r3, #64	; 0x40
    2e04:	1b00      	subs	r0, r0, r4
    2e06:	fa03 f000 	lsl.w	r0, r3, r0
    2e0a:	9b04      	ldr	r3, [sp, #16]
    2e0c:	4303      	orrs	r3, r0
    2e0e:	9304      	str	r3, [sp, #16]
    2e10:	3701      	adds	r7, #1
    2e12:	7839      	ldrb	r1, [r7, #0]
    2e14:	4825      	ldr	r0, [pc, #148]	; (2eac <_svfiprintf_r+0x1dc>)
    2e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2e1a:	2206      	movs	r2, #6
    2e1c:	1c7e      	adds	r6, r7, #1
    2e1e:	f000 f9f7 	bl	3210 <memchr>
    2e22:	2800      	cmp	r0, #0
    2e24:	d035      	beq.n	2e92 <_svfiprintf_r+0x1c2>
    2e26:	4b22      	ldr	r3, [pc, #136]	; (2eb0 <_svfiprintf_r+0x1e0>)
    2e28:	b9fb      	cbnz	r3, 2e6a <_svfiprintf_r+0x19a>
    2e2a:	9b03      	ldr	r3, [sp, #12]
    2e2c:	3307      	adds	r3, #7
    2e2e:	f023 0307 	bic.w	r3, r3, #7
    2e32:	3308      	adds	r3, #8
    2e34:	9303      	str	r3, [sp, #12]
    2e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e38:	444b      	add	r3, r9
    2e3a:	9309      	str	r3, [sp, #36]	; 0x24
    2e3c:	e76c      	b.n	2d18 <_svfiprintf_r+0x48>
    2e3e:	fb00 3202 	mla	r2, r0, r2, r3
    2e42:	2101      	movs	r1, #1
    2e44:	e7a3      	b.n	2d8e <_svfiprintf_r+0xbe>
    2e46:	2300      	movs	r3, #0
    2e48:	9305      	str	r3, [sp, #20]
    2e4a:	4618      	mov	r0, r3
    2e4c:	240a      	movs	r4, #10
    2e4e:	460f      	mov	r7, r1
    2e50:	3101      	adds	r1, #1
    2e52:	783a      	ldrb	r2, [r7, #0]
    2e54:	3a30      	subs	r2, #48	; 0x30
    2e56:	2a09      	cmp	r2, #9
    2e58:	d903      	bls.n	2e62 <_svfiprintf_r+0x192>
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d0ca      	beq.n	2df4 <_svfiprintf_r+0x124>
    2e5e:	9005      	str	r0, [sp, #20]
    2e60:	e7c8      	b.n	2df4 <_svfiprintf_r+0x124>
    2e62:	fb04 2000 	mla	r0, r4, r0, r2
    2e66:	2301      	movs	r3, #1
    2e68:	e7f1      	b.n	2e4e <_svfiprintf_r+0x17e>
    2e6a:	ab03      	add	r3, sp, #12
    2e6c:	9300      	str	r3, [sp, #0]
    2e6e:	462a      	mov	r2, r5
    2e70:	4b10      	ldr	r3, [pc, #64]	; (2eb4 <_svfiprintf_r+0x1e4>)
    2e72:	a904      	add	r1, sp, #16
    2e74:	4640      	mov	r0, r8
    2e76:	f3af 8000 	nop.w
    2e7a:	f1b0 3fff 	cmp.w	r0, #4294967295
    2e7e:	4681      	mov	r9, r0
    2e80:	d1d9      	bne.n	2e36 <_svfiprintf_r+0x166>
    2e82:	89ab      	ldrh	r3, [r5, #12]
    2e84:	065b      	lsls	r3, r3, #25
    2e86:	f53f af38 	bmi.w	2cfa <_svfiprintf_r+0x2a>
    2e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e8c:	b01d      	add	sp, #116	; 0x74
    2e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e92:	ab03      	add	r3, sp, #12
    2e94:	9300      	str	r3, [sp, #0]
    2e96:	462a      	mov	r2, r5
    2e98:	4b06      	ldr	r3, [pc, #24]	; (2eb4 <_svfiprintf_r+0x1e4>)
    2e9a:	a904      	add	r1, sp, #16
    2e9c:	4640      	mov	r0, r8
    2e9e:	f000 f881 	bl	2fa4 <_printf_i>
    2ea2:	e7ea      	b.n	2e7a <_svfiprintf_r+0x1aa>
    2ea4:	00003570 	.word	0x00003570
    2ea8:	00003576 	.word	0x00003576
    2eac:	0000357a 	.word	0x0000357a
    2eb0:	00000000 	.word	0x00000000
    2eb4:	00002c19 	.word	0x00002c19

00002eb8 <_printf_common>:
    2eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ebc:	4691      	mov	r9, r2
    2ebe:	461f      	mov	r7, r3
    2ec0:	688a      	ldr	r2, [r1, #8]
    2ec2:	690b      	ldr	r3, [r1, #16]
    2ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2ec8:	4293      	cmp	r3, r2
    2eca:	bfb8      	it	lt
    2ecc:	4613      	movlt	r3, r2
    2ece:	f8c9 3000 	str.w	r3, [r9]
    2ed2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2ed6:	4606      	mov	r6, r0
    2ed8:	460c      	mov	r4, r1
    2eda:	b112      	cbz	r2, 2ee2 <_printf_common+0x2a>
    2edc:	3301      	adds	r3, #1
    2ede:	f8c9 3000 	str.w	r3, [r9]
    2ee2:	6823      	ldr	r3, [r4, #0]
    2ee4:	0699      	lsls	r1, r3, #26
    2ee6:	bf42      	ittt	mi
    2ee8:	f8d9 3000 	ldrmi.w	r3, [r9]
    2eec:	3302      	addmi	r3, #2
    2eee:	f8c9 3000 	strmi.w	r3, [r9]
    2ef2:	6825      	ldr	r5, [r4, #0]
    2ef4:	f015 0506 	ands.w	r5, r5, #6
    2ef8:	d107      	bne.n	2f0a <_printf_common+0x52>
    2efa:	f104 0a19 	add.w	sl, r4, #25
    2efe:	68e3      	ldr	r3, [r4, #12]
    2f00:	f8d9 2000 	ldr.w	r2, [r9]
    2f04:	1a9b      	subs	r3, r3, r2
    2f06:	429d      	cmp	r5, r3
    2f08:	db29      	blt.n	2f5e <_printf_common+0xa6>
    2f0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2f0e:	6822      	ldr	r2, [r4, #0]
    2f10:	3300      	adds	r3, #0
    2f12:	bf18      	it	ne
    2f14:	2301      	movne	r3, #1
    2f16:	0692      	lsls	r2, r2, #26
    2f18:	d42e      	bmi.n	2f78 <_printf_common+0xc0>
    2f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2f1e:	4639      	mov	r1, r7
    2f20:	4630      	mov	r0, r6
    2f22:	47c0      	blx	r8
    2f24:	3001      	adds	r0, #1
    2f26:	d021      	beq.n	2f6c <_printf_common+0xb4>
    2f28:	6823      	ldr	r3, [r4, #0]
    2f2a:	68e5      	ldr	r5, [r4, #12]
    2f2c:	f8d9 2000 	ldr.w	r2, [r9]
    2f30:	f003 0306 	and.w	r3, r3, #6
    2f34:	2b04      	cmp	r3, #4
    2f36:	bf08      	it	eq
    2f38:	1aad      	subeq	r5, r5, r2
    2f3a:	68a3      	ldr	r3, [r4, #8]
    2f3c:	6922      	ldr	r2, [r4, #16]
    2f3e:	bf0c      	ite	eq
    2f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2f44:	2500      	movne	r5, #0
    2f46:	4293      	cmp	r3, r2
    2f48:	bfc4      	itt	gt
    2f4a:	1a9b      	subgt	r3, r3, r2
    2f4c:	18ed      	addgt	r5, r5, r3
    2f4e:	f04f 0900 	mov.w	r9, #0
    2f52:	341a      	adds	r4, #26
    2f54:	454d      	cmp	r5, r9
    2f56:	d11b      	bne.n	2f90 <_printf_common+0xd8>
    2f58:	2000      	movs	r0, #0
    2f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f5e:	2301      	movs	r3, #1
    2f60:	4652      	mov	r2, sl
    2f62:	4639      	mov	r1, r7
    2f64:	4630      	mov	r0, r6
    2f66:	47c0      	blx	r8
    2f68:	3001      	adds	r0, #1
    2f6a:	d103      	bne.n	2f74 <_printf_common+0xbc>
    2f6c:	f04f 30ff 	mov.w	r0, #4294967295
    2f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f74:	3501      	adds	r5, #1
    2f76:	e7c2      	b.n	2efe <_printf_common+0x46>
    2f78:	18e1      	adds	r1, r4, r3
    2f7a:	1c5a      	adds	r2, r3, #1
    2f7c:	2030      	movs	r0, #48	; 0x30
    2f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2f82:	4422      	add	r2, r4
    2f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2f8c:	3302      	adds	r3, #2
    2f8e:	e7c4      	b.n	2f1a <_printf_common+0x62>
    2f90:	2301      	movs	r3, #1
    2f92:	4622      	mov	r2, r4
    2f94:	4639      	mov	r1, r7
    2f96:	4630      	mov	r0, r6
    2f98:	47c0      	blx	r8
    2f9a:	3001      	adds	r0, #1
    2f9c:	d0e6      	beq.n	2f6c <_printf_common+0xb4>
    2f9e:	f109 0901 	add.w	r9, r9, #1
    2fa2:	e7d7      	b.n	2f54 <_printf_common+0x9c>

00002fa4 <_printf_i>:
    2fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fa8:	4617      	mov	r7, r2
    2faa:	7e0a      	ldrb	r2, [r1, #24]
    2fac:	b085      	sub	sp, #20
    2fae:	2a6e      	cmp	r2, #110	; 0x6e
    2fb0:	4698      	mov	r8, r3
    2fb2:	4606      	mov	r6, r0
    2fb4:	460c      	mov	r4, r1
    2fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2fb8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2fbc:	f000 80bc 	beq.w	3138 <_printf_i+0x194>
    2fc0:	d81a      	bhi.n	2ff8 <_printf_i+0x54>
    2fc2:	2a63      	cmp	r2, #99	; 0x63
    2fc4:	d02e      	beq.n	3024 <_printf_i+0x80>
    2fc6:	d80a      	bhi.n	2fde <_printf_i+0x3a>
    2fc8:	2a00      	cmp	r2, #0
    2fca:	f000 80c8 	beq.w	315e <_printf_i+0x1ba>
    2fce:	2a58      	cmp	r2, #88	; 0x58
    2fd0:	f000 808a 	beq.w	30e8 <_printf_i+0x144>
    2fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2fd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    2fdc:	e02a      	b.n	3034 <_printf_i+0x90>
    2fde:	2a64      	cmp	r2, #100	; 0x64
    2fe0:	d001      	beq.n	2fe6 <_printf_i+0x42>
    2fe2:	2a69      	cmp	r2, #105	; 0x69
    2fe4:	d1f6      	bne.n	2fd4 <_printf_i+0x30>
    2fe6:	6821      	ldr	r1, [r4, #0]
    2fe8:	681a      	ldr	r2, [r3, #0]
    2fea:	f011 0f80 	tst.w	r1, #128	; 0x80
    2fee:	d023      	beq.n	3038 <_printf_i+0x94>
    2ff0:	1d11      	adds	r1, r2, #4
    2ff2:	6019      	str	r1, [r3, #0]
    2ff4:	6813      	ldr	r3, [r2, #0]
    2ff6:	e027      	b.n	3048 <_printf_i+0xa4>
    2ff8:	2a73      	cmp	r2, #115	; 0x73
    2ffa:	f000 80b4 	beq.w	3166 <_printf_i+0x1c2>
    2ffe:	d808      	bhi.n	3012 <_printf_i+0x6e>
    3000:	2a6f      	cmp	r2, #111	; 0x6f
    3002:	d02a      	beq.n	305a <_printf_i+0xb6>
    3004:	2a70      	cmp	r2, #112	; 0x70
    3006:	d1e5      	bne.n	2fd4 <_printf_i+0x30>
    3008:	680a      	ldr	r2, [r1, #0]
    300a:	f042 0220 	orr.w	r2, r2, #32
    300e:	600a      	str	r2, [r1, #0]
    3010:	e003      	b.n	301a <_printf_i+0x76>
    3012:	2a75      	cmp	r2, #117	; 0x75
    3014:	d021      	beq.n	305a <_printf_i+0xb6>
    3016:	2a78      	cmp	r2, #120	; 0x78
    3018:	d1dc      	bne.n	2fd4 <_printf_i+0x30>
    301a:	2278      	movs	r2, #120	; 0x78
    301c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3020:	496e      	ldr	r1, [pc, #440]	; (31dc <_printf_i+0x238>)
    3022:	e064      	b.n	30ee <_printf_i+0x14a>
    3024:	681a      	ldr	r2, [r3, #0]
    3026:	f101 0542 	add.w	r5, r1, #66	; 0x42
    302a:	1d11      	adds	r1, r2, #4
    302c:	6019      	str	r1, [r3, #0]
    302e:	6813      	ldr	r3, [r2, #0]
    3030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3034:	2301      	movs	r3, #1
    3036:	e0a3      	b.n	3180 <_printf_i+0x1dc>
    3038:	f011 0f40 	tst.w	r1, #64	; 0x40
    303c:	f102 0104 	add.w	r1, r2, #4
    3040:	6019      	str	r1, [r3, #0]
    3042:	d0d7      	beq.n	2ff4 <_printf_i+0x50>
    3044:	f9b2 3000 	ldrsh.w	r3, [r2]
    3048:	2b00      	cmp	r3, #0
    304a:	da03      	bge.n	3054 <_printf_i+0xb0>
    304c:	222d      	movs	r2, #45	; 0x2d
    304e:	425b      	negs	r3, r3
    3050:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3054:	4962      	ldr	r1, [pc, #392]	; (31e0 <_printf_i+0x23c>)
    3056:	220a      	movs	r2, #10
    3058:	e017      	b.n	308a <_printf_i+0xe6>
    305a:	6820      	ldr	r0, [r4, #0]
    305c:	6819      	ldr	r1, [r3, #0]
    305e:	f010 0f80 	tst.w	r0, #128	; 0x80
    3062:	d003      	beq.n	306c <_printf_i+0xc8>
    3064:	1d08      	adds	r0, r1, #4
    3066:	6018      	str	r0, [r3, #0]
    3068:	680b      	ldr	r3, [r1, #0]
    306a:	e006      	b.n	307a <_printf_i+0xd6>
    306c:	f010 0f40 	tst.w	r0, #64	; 0x40
    3070:	f101 0004 	add.w	r0, r1, #4
    3074:	6018      	str	r0, [r3, #0]
    3076:	d0f7      	beq.n	3068 <_printf_i+0xc4>
    3078:	880b      	ldrh	r3, [r1, #0]
    307a:	4959      	ldr	r1, [pc, #356]	; (31e0 <_printf_i+0x23c>)
    307c:	2a6f      	cmp	r2, #111	; 0x6f
    307e:	bf14      	ite	ne
    3080:	220a      	movne	r2, #10
    3082:	2208      	moveq	r2, #8
    3084:	2000      	movs	r0, #0
    3086:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    308a:	6865      	ldr	r5, [r4, #4]
    308c:	60a5      	str	r5, [r4, #8]
    308e:	2d00      	cmp	r5, #0
    3090:	f2c0 809c 	blt.w	31cc <_printf_i+0x228>
    3094:	6820      	ldr	r0, [r4, #0]
    3096:	f020 0004 	bic.w	r0, r0, #4
    309a:	6020      	str	r0, [r4, #0]
    309c:	2b00      	cmp	r3, #0
    309e:	d13f      	bne.n	3120 <_printf_i+0x17c>
    30a0:	2d00      	cmp	r5, #0
    30a2:	f040 8095 	bne.w	31d0 <_printf_i+0x22c>
    30a6:	4675      	mov	r5, lr
    30a8:	2a08      	cmp	r2, #8
    30aa:	d10b      	bne.n	30c4 <_printf_i+0x120>
    30ac:	6823      	ldr	r3, [r4, #0]
    30ae:	07da      	lsls	r2, r3, #31
    30b0:	d508      	bpl.n	30c4 <_printf_i+0x120>
    30b2:	6923      	ldr	r3, [r4, #16]
    30b4:	6862      	ldr	r2, [r4, #4]
    30b6:	429a      	cmp	r2, r3
    30b8:	bfde      	ittt	le
    30ba:	2330      	movle	r3, #48	; 0x30
    30bc:	f805 3c01 	strble.w	r3, [r5, #-1]
    30c0:	f105 35ff 	addle.w	r5, r5, #4294967295
    30c4:	ebae 0305 	sub.w	r3, lr, r5
    30c8:	6123      	str	r3, [r4, #16]
    30ca:	f8cd 8000 	str.w	r8, [sp]
    30ce:	463b      	mov	r3, r7
    30d0:	aa03      	add	r2, sp, #12
    30d2:	4621      	mov	r1, r4
    30d4:	4630      	mov	r0, r6
    30d6:	f7ff feef 	bl	2eb8 <_printf_common>
    30da:	3001      	adds	r0, #1
    30dc:	d155      	bne.n	318a <_printf_i+0x1e6>
    30de:	f04f 30ff 	mov.w	r0, #4294967295
    30e2:	b005      	add	sp, #20
    30e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    30e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    30ec:	493c      	ldr	r1, [pc, #240]	; (31e0 <_printf_i+0x23c>)
    30ee:	6822      	ldr	r2, [r4, #0]
    30f0:	6818      	ldr	r0, [r3, #0]
    30f2:	f012 0f80 	tst.w	r2, #128	; 0x80
    30f6:	f100 0504 	add.w	r5, r0, #4
    30fa:	601d      	str	r5, [r3, #0]
    30fc:	d001      	beq.n	3102 <_printf_i+0x15e>
    30fe:	6803      	ldr	r3, [r0, #0]
    3100:	e002      	b.n	3108 <_printf_i+0x164>
    3102:	0655      	lsls	r5, r2, #25
    3104:	d5fb      	bpl.n	30fe <_printf_i+0x15a>
    3106:	8803      	ldrh	r3, [r0, #0]
    3108:	07d0      	lsls	r0, r2, #31
    310a:	bf44      	itt	mi
    310c:	f042 0220 	orrmi.w	r2, r2, #32
    3110:	6022      	strmi	r2, [r4, #0]
    3112:	b91b      	cbnz	r3, 311c <_printf_i+0x178>
    3114:	6822      	ldr	r2, [r4, #0]
    3116:	f022 0220 	bic.w	r2, r2, #32
    311a:	6022      	str	r2, [r4, #0]
    311c:	2210      	movs	r2, #16
    311e:	e7b1      	b.n	3084 <_printf_i+0xe0>
    3120:	4675      	mov	r5, lr
    3122:	fbb3 f0f2 	udiv	r0, r3, r2
    3126:	fb02 3310 	mls	r3, r2, r0, r3
    312a:	5ccb      	ldrb	r3, [r1, r3]
    312c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3130:	4603      	mov	r3, r0
    3132:	2800      	cmp	r0, #0
    3134:	d1f5      	bne.n	3122 <_printf_i+0x17e>
    3136:	e7b7      	b.n	30a8 <_printf_i+0x104>
    3138:	6808      	ldr	r0, [r1, #0]
    313a:	681a      	ldr	r2, [r3, #0]
    313c:	6949      	ldr	r1, [r1, #20]
    313e:	f010 0f80 	tst.w	r0, #128	; 0x80
    3142:	d004      	beq.n	314e <_printf_i+0x1aa>
    3144:	1d10      	adds	r0, r2, #4
    3146:	6018      	str	r0, [r3, #0]
    3148:	6813      	ldr	r3, [r2, #0]
    314a:	6019      	str	r1, [r3, #0]
    314c:	e007      	b.n	315e <_printf_i+0x1ba>
    314e:	f010 0f40 	tst.w	r0, #64	; 0x40
    3152:	f102 0004 	add.w	r0, r2, #4
    3156:	6018      	str	r0, [r3, #0]
    3158:	6813      	ldr	r3, [r2, #0]
    315a:	d0f6      	beq.n	314a <_printf_i+0x1a6>
    315c:	8019      	strh	r1, [r3, #0]
    315e:	2300      	movs	r3, #0
    3160:	6123      	str	r3, [r4, #16]
    3162:	4675      	mov	r5, lr
    3164:	e7b1      	b.n	30ca <_printf_i+0x126>
    3166:	681a      	ldr	r2, [r3, #0]
    3168:	1d11      	adds	r1, r2, #4
    316a:	6019      	str	r1, [r3, #0]
    316c:	6815      	ldr	r5, [r2, #0]
    316e:	6862      	ldr	r2, [r4, #4]
    3170:	2100      	movs	r1, #0
    3172:	4628      	mov	r0, r5
    3174:	f000 f84c 	bl	3210 <memchr>
    3178:	b108      	cbz	r0, 317e <_printf_i+0x1da>
    317a:	1b40      	subs	r0, r0, r5
    317c:	6060      	str	r0, [r4, #4]
    317e:	6863      	ldr	r3, [r4, #4]
    3180:	6123      	str	r3, [r4, #16]
    3182:	2300      	movs	r3, #0
    3184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3188:	e79f      	b.n	30ca <_printf_i+0x126>
    318a:	6923      	ldr	r3, [r4, #16]
    318c:	462a      	mov	r2, r5
    318e:	4639      	mov	r1, r7
    3190:	4630      	mov	r0, r6
    3192:	47c0      	blx	r8
    3194:	3001      	adds	r0, #1
    3196:	d0a2      	beq.n	30de <_printf_i+0x13a>
    3198:	6823      	ldr	r3, [r4, #0]
    319a:	079b      	lsls	r3, r3, #30
    319c:	d507      	bpl.n	31ae <_printf_i+0x20a>
    319e:	2500      	movs	r5, #0
    31a0:	f104 0919 	add.w	r9, r4, #25
    31a4:	68e3      	ldr	r3, [r4, #12]
    31a6:	9a03      	ldr	r2, [sp, #12]
    31a8:	1a9b      	subs	r3, r3, r2
    31aa:	429d      	cmp	r5, r3
    31ac:	db05      	blt.n	31ba <_printf_i+0x216>
    31ae:	68e0      	ldr	r0, [r4, #12]
    31b0:	9b03      	ldr	r3, [sp, #12]
    31b2:	4298      	cmp	r0, r3
    31b4:	bfb8      	it	lt
    31b6:	4618      	movlt	r0, r3
    31b8:	e793      	b.n	30e2 <_printf_i+0x13e>
    31ba:	2301      	movs	r3, #1
    31bc:	464a      	mov	r2, r9
    31be:	4639      	mov	r1, r7
    31c0:	4630      	mov	r0, r6
    31c2:	47c0      	blx	r8
    31c4:	3001      	adds	r0, #1
    31c6:	d08a      	beq.n	30de <_printf_i+0x13a>
    31c8:	3501      	adds	r5, #1
    31ca:	e7eb      	b.n	31a4 <_printf_i+0x200>
    31cc:	2b00      	cmp	r3, #0
    31ce:	d1a7      	bne.n	3120 <_printf_i+0x17c>
    31d0:	780b      	ldrb	r3, [r1, #0]
    31d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    31d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    31da:	e765      	b.n	30a8 <_printf_i+0x104>
    31dc:	00003592 	.word	0x00003592
    31e0:	00003581 	.word	0x00003581

000031e4 <_sbrk_r>:
    31e4:	b538      	push	{r3, r4, r5, lr}
    31e6:	4c06      	ldr	r4, [pc, #24]	; (3200 <_sbrk_r+0x1c>)
    31e8:	2300      	movs	r3, #0
    31ea:	4605      	mov	r5, r0
    31ec:	4608      	mov	r0, r1
    31ee:	6023      	str	r3, [r4, #0]
    31f0:	f7fe f974 	bl	14dc <_sbrk>
    31f4:	1c43      	adds	r3, r0, #1
    31f6:	d102      	bne.n	31fe <_sbrk_r+0x1a>
    31f8:	6823      	ldr	r3, [r4, #0]
    31fa:	b103      	cbz	r3, 31fe <_sbrk_r+0x1a>
    31fc:	602b      	str	r3, [r5, #0]
    31fe:	bd38      	pop	{r3, r4, r5, pc}
    3200:	20000158 	.word	0x20000158
	...

00003210 <memchr>:
    3210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3214:	2a10      	cmp	r2, #16
    3216:	db2b      	blt.n	3270 <memchr+0x60>
    3218:	f010 0f07 	tst.w	r0, #7
    321c:	d008      	beq.n	3230 <memchr+0x20>
    321e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3222:	3a01      	subs	r2, #1
    3224:	428b      	cmp	r3, r1
    3226:	d02d      	beq.n	3284 <memchr+0x74>
    3228:	f010 0f07 	tst.w	r0, #7
    322c:	b342      	cbz	r2, 3280 <memchr+0x70>
    322e:	d1f6      	bne.n	321e <memchr+0xe>
    3230:	b4f0      	push	{r4, r5, r6, r7}
    3232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    323a:	f022 0407 	bic.w	r4, r2, #7
    323e:	f07f 0700 	mvns.w	r7, #0
    3242:	2300      	movs	r3, #0
    3244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3248:	3c08      	subs	r4, #8
    324a:	ea85 0501 	eor.w	r5, r5, r1
    324e:	ea86 0601 	eor.w	r6, r6, r1
    3252:	fa85 f547 	uadd8	r5, r5, r7
    3256:	faa3 f587 	sel	r5, r3, r7
    325a:	fa86 f647 	uadd8	r6, r6, r7
    325e:	faa5 f687 	sel	r6, r5, r7
    3262:	b98e      	cbnz	r6, 3288 <memchr+0x78>
    3264:	d1ee      	bne.n	3244 <memchr+0x34>
    3266:	bcf0      	pop	{r4, r5, r6, r7}
    3268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    326c:	f002 0207 	and.w	r2, r2, #7
    3270:	b132      	cbz	r2, 3280 <memchr+0x70>
    3272:	f810 3b01 	ldrb.w	r3, [r0], #1
    3276:	3a01      	subs	r2, #1
    3278:	ea83 0301 	eor.w	r3, r3, r1
    327c:	b113      	cbz	r3, 3284 <memchr+0x74>
    327e:	d1f8      	bne.n	3272 <memchr+0x62>
    3280:	2000      	movs	r0, #0
    3282:	4770      	bx	lr
    3284:	3801      	subs	r0, #1
    3286:	4770      	bx	lr
    3288:	2d00      	cmp	r5, #0
    328a:	bf06      	itte	eq
    328c:	4635      	moveq	r5, r6
    328e:	3803      	subeq	r0, #3
    3290:	3807      	subne	r0, #7
    3292:	f015 0f01 	tst.w	r5, #1
    3296:	d107      	bne.n	32a8 <memchr+0x98>
    3298:	3001      	adds	r0, #1
    329a:	f415 7f80 	tst.w	r5, #256	; 0x100
    329e:	bf02      	ittt	eq
    32a0:	3001      	addeq	r0, #1
    32a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    32a6:	3001      	addeq	r0, #1
    32a8:	bcf0      	pop	{r4, r5, r6, r7}
    32aa:	3801      	subs	r0, #1
    32ac:	4770      	bx	lr
    32ae:	bf00      	nop

000032b0 <memcpy>:
    32b0:	b510      	push	{r4, lr}
    32b2:	1e43      	subs	r3, r0, #1
    32b4:	440a      	add	r2, r1
    32b6:	4291      	cmp	r1, r2
    32b8:	d100      	bne.n	32bc <memcpy+0xc>
    32ba:	bd10      	pop	{r4, pc}
    32bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    32c0:	f803 4f01 	strb.w	r4, [r3, #1]!
    32c4:	e7f7      	b.n	32b6 <memcpy+0x6>

000032c6 <memmove>:
    32c6:	4288      	cmp	r0, r1
    32c8:	b510      	push	{r4, lr}
    32ca:	eb01 0302 	add.w	r3, r1, r2
    32ce:	d803      	bhi.n	32d8 <memmove+0x12>
    32d0:	1e42      	subs	r2, r0, #1
    32d2:	4299      	cmp	r1, r3
    32d4:	d10c      	bne.n	32f0 <memmove+0x2a>
    32d6:	bd10      	pop	{r4, pc}
    32d8:	4298      	cmp	r0, r3
    32da:	d2f9      	bcs.n	32d0 <memmove+0xa>
    32dc:	1881      	adds	r1, r0, r2
    32de:	1ad2      	subs	r2, r2, r3
    32e0:	42d3      	cmn	r3, r2
    32e2:	d100      	bne.n	32e6 <memmove+0x20>
    32e4:	bd10      	pop	{r4, pc}
    32e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    32ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
    32ee:	e7f7      	b.n	32e0 <memmove+0x1a>
    32f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    32f4:	f802 4f01 	strb.w	r4, [r2, #1]!
    32f8:	e7eb      	b.n	32d2 <memmove+0xc>

000032fa <__malloc_lock>:
    32fa:	4770      	bx	lr

000032fc <__malloc_unlock>:
    32fc:	4770      	bx	lr
	...

00003300 <_free_r>:
    3300:	b538      	push	{r3, r4, r5, lr}
    3302:	4605      	mov	r5, r0
    3304:	2900      	cmp	r1, #0
    3306:	d045      	beq.n	3394 <_free_r+0x94>
    3308:	f851 3c04 	ldr.w	r3, [r1, #-4]
    330c:	1f0c      	subs	r4, r1, #4
    330e:	2b00      	cmp	r3, #0
    3310:	bfb8      	it	lt
    3312:	18e4      	addlt	r4, r4, r3
    3314:	f7ff fff1 	bl	32fa <__malloc_lock>
    3318:	4a1f      	ldr	r2, [pc, #124]	; (3398 <_free_r+0x98>)
    331a:	6813      	ldr	r3, [r2, #0]
    331c:	4610      	mov	r0, r2
    331e:	b933      	cbnz	r3, 332e <_free_r+0x2e>
    3320:	6063      	str	r3, [r4, #4]
    3322:	6014      	str	r4, [r2, #0]
    3324:	4628      	mov	r0, r5
    3326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    332a:	f7ff bfe7 	b.w	32fc <__malloc_unlock>
    332e:	42a3      	cmp	r3, r4
    3330:	d90c      	bls.n	334c <_free_r+0x4c>
    3332:	6821      	ldr	r1, [r4, #0]
    3334:	1862      	adds	r2, r4, r1
    3336:	4293      	cmp	r3, r2
    3338:	bf04      	itt	eq
    333a:	681a      	ldreq	r2, [r3, #0]
    333c:	685b      	ldreq	r3, [r3, #4]
    333e:	6063      	str	r3, [r4, #4]
    3340:	bf04      	itt	eq
    3342:	1852      	addeq	r2, r2, r1
    3344:	6022      	streq	r2, [r4, #0]
    3346:	6004      	str	r4, [r0, #0]
    3348:	e7ec      	b.n	3324 <_free_r+0x24>
    334a:	4613      	mov	r3, r2
    334c:	685a      	ldr	r2, [r3, #4]
    334e:	b10a      	cbz	r2, 3354 <_free_r+0x54>
    3350:	42a2      	cmp	r2, r4
    3352:	d9fa      	bls.n	334a <_free_r+0x4a>
    3354:	6819      	ldr	r1, [r3, #0]
    3356:	1858      	adds	r0, r3, r1
    3358:	42a0      	cmp	r0, r4
    335a:	d10b      	bne.n	3374 <_free_r+0x74>
    335c:	6820      	ldr	r0, [r4, #0]
    335e:	4401      	add	r1, r0
    3360:	1858      	adds	r0, r3, r1
    3362:	4282      	cmp	r2, r0
    3364:	6019      	str	r1, [r3, #0]
    3366:	d1dd      	bne.n	3324 <_free_r+0x24>
    3368:	6810      	ldr	r0, [r2, #0]
    336a:	6852      	ldr	r2, [r2, #4]
    336c:	605a      	str	r2, [r3, #4]
    336e:	4401      	add	r1, r0
    3370:	6019      	str	r1, [r3, #0]
    3372:	e7d7      	b.n	3324 <_free_r+0x24>
    3374:	d902      	bls.n	337c <_free_r+0x7c>
    3376:	230c      	movs	r3, #12
    3378:	602b      	str	r3, [r5, #0]
    337a:	e7d3      	b.n	3324 <_free_r+0x24>
    337c:	6820      	ldr	r0, [r4, #0]
    337e:	1821      	adds	r1, r4, r0
    3380:	428a      	cmp	r2, r1
    3382:	bf04      	itt	eq
    3384:	6811      	ldreq	r1, [r2, #0]
    3386:	6852      	ldreq	r2, [r2, #4]
    3388:	6062      	str	r2, [r4, #4]
    338a:	bf04      	itt	eq
    338c:	1809      	addeq	r1, r1, r0
    338e:	6021      	streq	r1, [r4, #0]
    3390:	605c      	str	r4, [r3, #4]
    3392:	e7c7      	b.n	3324 <_free_r+0x24>
    3394:	bd38      	pop	{r3, r4, r5, pc}
    3396:	bf00      	nop
    3398:	200000f8 	.word	0x200000f8

0000339c <_realloc_r>:
    339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    339e:	4607      	mov	r7, r0
    33a0:	4614      	mov	r4, r2
    33a2:	460e      	mov	r6, r1
    33a4:	b921      	cbnz	r1, 33b0 <_realloc_r+0x14>
    33a6:	4611      	mov	r1, r2
    33a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    33ac:	f7ff bbd6 	b.w	2b5c <_malloc_r>
    33b0:	b922      	cbnz	r2, 33bc <_realloc_r+0x20>
    33b2:	f7ff ffa5 	bl	3300 <_free_r>
    33b6:	4625      	mov	r5, r4
    33b8:	4628      	mov	r0, r5
    33ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33bc:	f000 f814 	bl	33e8 <_malloc_usable_size_r>
    33c0:	4284      	cmp	r4, r0
    33c2:	d90f      	bls.n	33e4 <_realloc_r+0x48>
    33c4:	4621      	mov	r1, r4
    33c6:	4638      	mov	r0, r7
    33c8:	f7ff fbc8 	bl	2b5c <_malloc_r>
    33cc:	4605      	mov	r5, r0
    33ce:	2800      	cmp	r0, #0
    33d0:	d0f2      	beq.n	33b8 <_realloc_r+0x1c>
    33d2:	4631      	mov	r1, r6
    33d4:	4622      	mov	r2, r4
    33d6:	f7ff ff6b 	bl	32b0 <memcpy>
    33da:	4631      	mov	r1, r6
    33dc:	4638      	mov	r0, r7
    33de:	f7ff ff8f 	bl	3300 <_free_r>
    33e2:	e7e9      	b.n	33b8 <_realloc_r+0x1c>
    33e4:	4635      	mov	r5, r6
    33e6:	e7e7      	b.n	33b8 <_realloc_r+0x1c>

000033e8 <_malloc_usable_size_r>:
    33e8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    33ec:	2800      	cmp	r0, #0
    33ee:	f1a0 0004 	sub.w	r0, r0, #4
    33f2:	bfbc      	itt	lt
    33f4:	580b      	ldrlt	r3, [r1, r0]
    33f6:	18c0      	addlt	r0, r0, r3
    33f8:	4770      	bx	lr
    33fa:	0000      	movs	r0, r0
    33fc:	682f2e2e 	.word	0x682f2e2e
    3400:	702f6c70 	.word	0x702f6c70
    3404:	2f74726f 	.word	0x2f74726f
    3408:	5f6c7068 	.word	0x5f6c7068
    340c:	6f697067 	.word	0x6f697067
    3410:	7361625f 	.word	0x7361625f
    3414:	00682e65 	.word	0x00682e65
    3418:	682f2e2e 	.word	0x682f2e2e
    341c:	732f6c61 	.word	0x732f6c61
    3420:	682f6372 	.word	0x682f6372
    3424:	695f6c61 	.word	0x695f6c61
    3428:	00632e6f 	.word	0x00632e6f
    342c:	682f2e2e 	.word	0x682f2e2e
    3430:	732f6c61 	.word	0x732f6c61
    3434:	682f6372 	.word	0x682f6372
    3438:	745f6c61 	.word	0x745f6c61
    343c:	72656d69 	.word	0x72656d69
    3440:	0000632e 	.word	0x0000632e
    3444:	682f2e2e 	.word	0x682f2e2e
    3448:	732f6c61 	.word	0x732f6c61
    344c:	682f6372 	.word	0x682f6372
    3450:	755f6c61 	.word	0x755f6c61
    3454:	74726173 	.word	0x74726173
    3458:	6e79735f 	.word	0x6e79735f
    345c:	00632e63 	.word	0x00632e63
    3460:	682f2e2e 	.word	0x682f2e2e
    3464:	752f6c61 	.word	0x752f6c61
    3468:	736c6974 	.word	0x736c6974
    346c:	6372732f 	.word	0x6372732f
    3470:	6974752f 	.word	0x6974752f
    3474:	6c5f736c 	.word	0x6c5f736c
    3478:	2e747369 	.word	0x2e747369
    347c:	00000063 	.word	0x00000063
    3480:	682f2e2e 	.word	0x682f2e2e
    3484:	732f6c70 	.word	0x732f6c70
    3488:	6f637265 	.word	0x6f637265
    348c:	70682f6d 	.word	0x70682f6d
    3490:	65735f6c 	.word	0x65735f6c
    3494:	6d6f6372 	.word	0x6d6f6372
    3498:	0000632e 	.word	0x0000632e
    349c:	40003000 	.word	0x40003000
    34a0:	40003400 	.word	0x40003400
    34a4:	41012000 	.word	0x41012000
    34a8:	41014000 	.word	0x41014000
    34ac:	43000000 	.word	0x43000000
    34b0:	43000400 	.word	0x43000400
    34b4:	43000800 	.word	0x43000800
    34b8:	43000c00 	.word	0x43000c00

000034bc <sercomspi_regs>:
	...
    34d0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    34e0:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    34f0:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    3500:	43001800 64323025 3230253a 00000a64     ...C%02d:%02d...

00003510 <__sf_fake_stderr>:
	...

00003530 <__sf_fake_stdin>:
	...

00003550 <__sf_fake_stdout>:
	...
    3570:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3580:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3590:	31300046 35343332 39383736 64636261     F.0123456789abcd
    35a0:	00006665                                ef..

000035a4 <_init>:
    35a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35a6:	bf00      	nop
    35a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    35aa:	bc08      	pop	{r3}
    35ac:	469e      	mov	lr, r3
    35ae:	4770      	bx	lr

000035b0 <__init_array_start>:
    35b0:	00000289 	.word	0x00000289

000035b4 <_fini>:
    35b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35b6:	bf00      	nop
    35b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    35ba:	bc08      	pop	{r3}
    35bc:	469e      	mov	lr, r3
    35be:	4770      	bx	lr

000035c0 <__fini_array_start>:
    35c0:	00000265 	.word	0x00000265
