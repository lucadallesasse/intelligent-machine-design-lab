
Infrared digital sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003698  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00003698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200a8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200a8  2**0
                  CONTENTS
  4 .bss          000000bc  200000a8  00003740  000200a8  2**2
                  ALLOC
  5 .stack        00010004  20000164  000037fc  000200a8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200d6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f738  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002f62  00000000  00000000  0003f867  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ab80  00000000  00000000  000427c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001318  00000000  00000000  0004d349  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011a0  00000000  00000000  0004e661  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000348f2  00000000  00000000  0004f801  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015cee  00000000  00000000  000840f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a8f7  00000000  00000000  00099de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005368  00000000  00000000  001b46d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 01 01 20 89 03 00 00 25 04 00 00 25 04 00 00     h.. ....%...%...
      10:	25 04 00 00 25 04 00 00 25 04 00 00 00 00 00 00     %...%...%.......
	...
      2c:	25 04 00 00 25 04 00 00 00 00 00 00 25 04 00 00     %...%.......%...
      3c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      4c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      5c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      6c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      7c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      8c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      9c:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      ac:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      bc:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      cc:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
      dc:	25 04 00 00 25 04 00 00 25 04 00 00 00 00 00 00     %...%...%.......
	...
      f4:	4d 18 00 00 25 04 00 00 25 04 00 00 25 04 00 00     M...%...%...%...
     104:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     114:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     124:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     134:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     144:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     154:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     164:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     174:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     184:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     194:	25 04 00 00 75 2b 00 00 25 04 00 00 25 04 00 00     %...u+..%...%...
     1a4:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     1b4:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     1c4:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     1d4:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     1e4:	25 04 00 00 25 04 00 00 95 27 00 00 25 04 00 00     %...%....'..%...
     1f4:	b1 27 00 00 25 04 00 00 25 04 00 00 25 04 00 00     .'..%...%...%...
     204:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     214:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     224:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     234:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     244:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...
     254:	25 04 00 00 25 04 00 00 25 04 00 00 25 04 00 00     %...%...%...%...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000a8 	.word	0x200000a8
     280:	00000000 	.word	0x00000000
     284:	00003698 	.word	0x00003698

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003698 	.word	0x00003698
     2c4:	200000ac 	.word	0x200000ac
     2c8:	00003698 	.word	0x00003698
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000bed 	.word	0x00000bed

000002e0 <edge_detector>:
		break;
	}
	return output;
}

bool edge_detector(bool edge_input, int i){
     2e0:	b480      	push	{r7}
     2e2:	b085      	sub	sp, #20
     2e4:	af00      	add	r7, sp, #0
     2e6:	4603      	mov	r3, r0
     2e8:	6039      	str	r1, [r7, #0]
     2ea:	71fb      	strb	r3, [r7, #7]

	static bool clock_state[4] = {0};
	
	bool edge_detected[4] = {0};
     2ec:	2300      	movs	r3, #0
     2ee:	60fb      	str	r3, [r7, #12]
	
	
	switch(clock_state[i]){
     2f0:	4a24      	ldr	r2, [pc, #144]	; (384 <edge_detector+0xa4>)
     2f2:	683b      	ldr	r3, [r7, #0]
     2f4:	4413      	add	r3, r2
     2f6:	781b      	ldrb	r3, [r3, #0]
     2f8:	2b01      	cmp	r3, #1
     2fa:	d01d      	beq.n	338 <edge_detector+0x58>
		case 0:
		if(edge_input == 0){
     2fc:	79fb      	ldrb	r3, [r7, #7]
     2fe:	f083 0301 	eor.w	r3, r3, #1
     302:	b2db      	uxtb	r3, r3
     304:	2b00      	cmp	r3, #0
     306:	d00b      	beq.n	320 <edge_detector+0x40>
			clock_state[i] = 0;
     308:	4a1e      	ldr	r2, [pc, #120]	; (384 <edge_detector+0xa4>)
     30a:	683b      	ldr	r3, [r7, #0]
     30c:	4413      	add	r3, r2
     30e:	2200      	movs	r2, #0
     310:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 0;
     312:	f107 020c 	add.w	r2, r7, #12
     316:	683b      	ldr	r3, [r7, #0]
     318:	4413      	add	r3, r2
     31a:	2200      	movs	r2, #0
     31c:	701a      	strb	r2, [r3, #0]
			}else{
			clock_state[i] = 1;
			edge_detected[i] = 1;
		}
		break;
     31e:	e026      	b.n	36e <edge_detector+0x8e>
			clock_state[i] = 1;
     320:	4a18      	ldr	r2, [pc, #96]	; (384 <edge_detector+0xa4>)
     322:	683b      	ldr	r3, [r7, #0]
     324:	4413      	add	r3, r2
     326:	2201      	movs	r2, #1
     328:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 1;
     32a:	f107 020c 	add.w	r2, r7, #12
     32e:	683b      	ldr	r3, [r7, #0]
     330:	4413      	add	r3, r2
     332:	2201      	movs	r2, #1
     334:	701a      	strb	r2, [r3, #0]
		break;
     336:	e01a      	b.n	36e <edge_detector+0x8e>
		case 1:
		if(edge_input == 1){
     338:	79fb      	ldrb	r3, [r7, #7]
     33a:	2b00      	cmp	r3, #0
     33c:	d00b      	beq.n	356 <edge_detector+0x76>
			clock_state[i] = 1;
     33e:	4a11      	ldr	r2, [pc, #68]	; (384 <edge_detector+0xa4>)
     340:	683b      	ldr	r3, [r7, #0]
     342:	4413      	add	r3, r2
     344:	2201      	movs	r2, #1
     346:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 0;
     348:	f107 020c 	add.w	r2, r7, #12
     34c:	683b      	ldr	r3, [r7, #0]
     34e:	4413      	add	r3, r2
     350:	2200      	movs	r2, #0
     352:	701a      	strb	r2, [r3, #0]
			}else{
			clock_state[i] = 0;
			edge_detected[i] = 0;
		}
		break;
     354:	e00a      	b.n	36c <edge_detector+0x8c>
			clock_state[i] = 0;
     356:	4a0b      	ldr	r2, [pc, #44]	; (384 <edge_detector+0xa4>)
     358:	683b      	ldr	r3, [r7, #0]
     35a:	4413      	add	r3, r2
     35c:	2200      	movs	r2, #0
     35e:	701a      	strb	r2, [r3, #0]
			edge_detected[i] = 0;
     360:	f107 020c 	add.w	r2, r7, #12
     364:	683b      	ldr	r3, [r7, #0]
     366:	4413      	add	r3, r2
     368:	2200      	movs	r2, #0
     36a:	701a      	strb	r2, [r3, #0]
		break;
     36c:	bf00      	nop
	}
	return edge_detected[i];
     36e:	f107 020c 	add.w	r2, r7, #12
     372:	683b      	ldr	r3, [r7, #0]
     374:	4413      	add	r3, r2
     376:	781b      	ldrb	r3, [r3, #0]
}
     378:	4618      	mov	r0, r3
     37a:	3714      	adds	r7, #20
     37c:	46bd      	mov	sp, r7
     37e:	f85d 7b04 	ldr.w	r7, [sp], #4
     382:	4770      	bx	lr
     384:	200000c8 	.word	0x200000c8

00000388 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     388:	b580      	push	{r7, lr}
     38a:	b082      	sub	sp, #8
     38c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     38e:	4b1c      	ldr	r3, [pc, #112]	; (400 <Reset_Handler+0x78>)
     390:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     392:	4b1c      	ldr	r3, [pc, #112]	; (404 <Reset_Handler+0x7c>)
     394:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     396:	687a      	ldr	r2, [r7, #4]
     398:	683b      	ldr	r3, [r7, #0]
     39a:	429a      	cmp	r2, r3
     39c:	d00c      	beq.n	3b8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     39e:	e007      	b.n	3b0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     3a0:	683b      	ldr	r3, [r7, #0]
     3a2:	1d1a      	adds	r2, r3, #4
     3a4:	603a      	str	r2, [r7, #0]
     3a6:	687a      	ldr	r2, [r7, #4]
     3a8:	1d11      	adds	r1, r2, #4
     3aa:	6079      	str	r1, [r7, #4]
     3ac:	6812      	ldr	r2, [r2, #0]
     3ae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     3b0:	683b      	ldr	r3, [r7, #0]
     3b2:	4a15      	ldr	r2, [pc, #84]	; (408 <Reset_Handler+0x80>)
     3b4:	4293      	cmp	r3, r2
     3b6:	d3f3      	bcc.n	3a0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     3b8:	4b14      	ldr	r3, [pc, #80]	; (40c <Reset_Handler+0x84>)
     3ba:	603b      	str	r3, [r7, #0]
     3bc:	e004      	b.n	3c8 <Reset_Handler+0x40>
                *pDest++ = 0;
     3be:	683b      	ldr	r3, [r7, #0]
     3c0:	1d1a      	adds	r2, r3, #4
     3c2:	603a      	str	r2, [r7, #0]
     3c4:	2200      	movs	r2, #0
     3c6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     3c8:	683b      	ldr	r3, [r7, #0]
     3ca:	4a11      	ldr	r2, [pc, #68]	; (410 <Reset_Handler+0x88>)
     3cc:	4293      	cmp	r3, r2
     3ce:	d3f6      	bcc.n	3be <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     3d0:	4b10      	ldr	r3, [pc, #64]	; (414 <Reset_Handler+0x8c>)
     3d2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3d4:	4a10      	ldr	r2, [pc, #64]	; (418 <Reset_Handler+0x90>)
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     3dc:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     3de:	4a0e      	ldr	r2, [pc, #56]	; (418 <Reset_Handler+0x90>)
     3e0:	4b0d      	ldr	r3, [pc, #52]	; (418 <Reset_Handler+0x90>)
     3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     3e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     3ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     3ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     3f2:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     3f6:	4b09      	ldr	r3, [pc, #36]	; (41c <Reset_Handler+0x94>)
     3f8:	4798      	blx	r3

        /* Branch to main function */
        main();
     3fa:	4b09      	ldr	r3, [pc, #36]	; (420 <Reset_Handler+0x98>)
     3fc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     3fe:	e7fe      	b.n	3fe <Reset_Handler+0x76>
     400:	00003698 	.word	0x00003698
     404:	20000000 	.word	0x20000000
     408:	200000a8 	.word	0x200000a8
     40c:	200000a8 	.word	0x200000a8
     410:	20000164 	.word	0x20000164
     414:	00000000 	.word	0x00000000
     418:	e000ed00 	.word	0xe000ed00
     41c:	00002b9d 	.word	0x00002b9d
     420:	00002959 	.word	0x00002959

00000424 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     424:	b480      	push	{r7}
     426:	af00      	add	r7, sp, #0
        while (1) {
     428:	e7fe      	b.n	428 <Dummy_Handler+0x4>

0000042a <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     42a:	b480      	push	{r7}
     42c:	b085      	sub	sp, #20
     42e:	af00      	add	r7, sp, #0
     430:	60f8      	str	r0, [r7, #12]
     432:	460b      	mov	r3, r1
     434:	607a      	str	r2, [r7, #4]
     436:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     438:	7afa      	ldrb	r2, [r7, #11]
     43a:	68fb      	ldr	r3, [r7, #12]
     43c:	3220      	adds	r2, #32
     43e:	6879      	ldr	r1, [r7, #4]
     440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     444:	bf00      	nop
     446:	3714      	adds	r7, #20
     448:	46bd      	mov	sp, r7
     44a:	f85d 7b04 	ldr.w	r7, [sp], #4
     44e:	4770      	bx	lr

00000450 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     450:	b480      	push	{r7}
     452:	b083      	sub	sp, #12
     454:	af00      	add	r7, sp, #0
     456:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     458:	687b      	ldr	r3, [r7, #4]
     45a:	695b      	ldr	r3, [r3, #20]
     45c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     460:	687b      	ldr	r3, [r7, #4]
     462:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     464:	bf00      	nop
     466:	370c      	adds	r7, #12
     468:	46bd      	mov	sp, r7
     46a:	f85d 7b04 	ldr.w	r7, [sp], #4
     46e:	4770      	bx	lr

00000470 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     470:	b480      	push	{r7}
     472:	b083      	sub	sp, #12
     474:	af00      	add	r7, sp, #0
     476:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     478:	687b      	ldr	r3, [r7, #4]
     47a:	699b      	ldr	r3, [r3, #24]
     47c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     480:	687b      	ldr	r3, [r7, #4]
     482:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     484:	bf00      	nop
     486:	370c      	adds	r7, #12
     488:	46bd      	mov	sp, r7
     48a:	f85d 7b04 	ldr.w	r7, [sp], #4
     48e:	4770      	bx	lr

00000490 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     490:	b480      	push	{r7}
     492:	b083      	sub	sp, #12
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     498:	687b      	ldr	r3, [r7, #4]
     49a:	699b      	ldr	r3, [r3, #24]
     49c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4a4:	bf00      	nop
     4a6:	370c      	adds	r7, #12
     4a8:	46bd      	mov	sp, r7
     4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ae:	4770      	bx	lr

000004b0 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     4b0:	b480      	push	{r7}
     4b2:	b083      	sub	sp, #12
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	699b      	ldr	r3, [r3, #24]
     4bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4c4:	bf00      	nop
     4c6:	370c      	adds	r7, #12
     4c8:	46bd      	mov	sp, r7
     4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ce:	4770      	bx	lr

000004d0 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     4d0:	b480      	push	{r7}
     4d2:	b085      	sub	sp, #20
     4d4:	af00      	add	r7, sp, #0
     4d6:	60f8      	str	r0, [r7, #12]
     4d8:	460b      	mov	r3, r1
     4da:	607a      	str	r2, [r7, #4]
     4dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4de:	7afb      	ldrb	r3, [r7, #11]
     4e0:	68fa      	ldr	r2, [r7, #12]
     4e2:	01db      	lsls	r3, r3, #7
     4e4:	4413      	add	r3, r2
     4e6:	3308      	adds	r3, #8
     4e8:	687a      	ldr	r2, [r7, #4]
     4ea:	601a      	str	r2, [r3, #0]
}
     4ec:	bf00      	nop
     4ee:	3714      	adds	r7, #20
     4f0:	46bd      	mov	sp, r7
     4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f6:	4770      	bx	lr

000004f8 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     4f8:	b480      	push	{r7}
     4fa:	b085      	sub	sp, #20
     4fc:	af00      	add	r7, sp, #0
     4fe:	60f8      	str	r0, [r7, #12]
     500:	460b      	mov	r3, r1
     502:	607a      	str	r2, [r7, #4]
     504:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     506:	7afb      	ldrb	r3, [r7, #11]
     508:	68fa      	ldr	r2, [r7, #12]
     50a:	01db      	lsls	r3, r3, #7
     50c:	4413      	add	r3, r2
     50e:	3304      	adds	r3, #4
     510:	687a      	ldr	r2, [r7, #4]
     512:	601a      	str	r2, [r3, #0]
}
     514:	bf00      	nop
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     520:	b480      	push	{r7}
     522:	b085      	sub	sp, #20
     524:	af00      	add	r7, sp, #0
     526:	60f8      	str	r0, [r7, #12]
     528:	460b      	mov	r3, r1
     52a:	607a      	str	r2, [r7, #4]
     52c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     52e:	7afb      	ldrb	r3, [r7, #11]
     530:	68fa      	ldr	r2, [r7, #12]
     532:	01db      	lsls	r3, r3, #7
     534:	4413      	add	r3, r2
     536:	3318      	adds	r3, #24
     538:	687a      	ldr	r2, [r7, #4]
     53a:	601a      	str	r2, [r3, #0]
}
     53c:	bf00      	nop
     53e:	3714      	adds	r7, #20
     540:	46bd      	mov	sp, r7
     542:	f85d 7b04 	ldr.w	r7, [sp], #4
     546:	4770      	bx	lr

00000548 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     548:	b480      	push	{r7}
     54a:	b085      	sub	sp, #20
     54c:	af00      	add	r7, sp, #0
     54e:	60f8      	str	r0, [r7, #12]
     550:	460b      	mov	r3, r1
     552:	607a      	str	r2, [r7, #4]
     554:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     556:	7afb      	ldrb	r3, [r7, #11]
     558:	68fa      	ldr	r2, [r7, #12]
     55a:	01db      	lsls	r3, r3, #7
     55c:	4413      	add	r3, r2
     55e:	3314      	adds	r3, #20
     560:	687a      	ldr	r2, [r7, #4]
     562:	601a      	str	r2, [r3, #0]
}
     564:	bf00      	nop
     566:	3714      	adds	r7, #20
     568:	46bd      	mov	sp, r7
     56a:	f85d 7b04 	ldr.w	r7, [sp], #4
     56e:	4770      	bx	lr

00000570 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     570:	b480      	push	{r7}
     572:	b085      	sub	sp, #20
     574:	af00      	add	r7, sp, #0
     576:	6078      	str	r0, [r7, #4]
     578:	4608      	mov	r0, r1
     57a:	4611      	mov	r1, r2
     57c:	461a      	mov	r2, r3
     57e:	4603      	mov	r3, r0
     580:	70fb      	strb	r3, [r7, #3]
     582:	460b      	mov	r3, r1
     584:	70bb      	strb	r3, [r7, #2]
     586:	4613      	mov	r3, r2
     588:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     58a:	78fa      	ldrb	r2, [r7, #3]
     58c:	78bb      	ldrb	r3, [r7, #2]
     58e:	6879      	ldr	r1, [r7, #4]
     590:	01d2      	lsls	r2, r2, #7
     592:	440a      	add	r2, r1
     594:	4413      	add	r3, r2
     596:	3330      	adds	r3, #48	; 0x30
     598:	781b      	ldrb	r3, [r3, #0]
     59a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     59c:	7bfb      	ldrb	r3, [r7, #15]
     59e:	f023 030f 	bic.w	r3, r3, #15
     5a2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     5a4:	787b      	ldrb	r3, [r7, #1]
     5a6:	f003 030f 	and.w	r3, r3, #15
     5aa:	b2da      	uxtb	r2, r3
     5ac:	7bfb      	ldrb	r3, [r7, #15]
     5ae:	4313      	orrs	r3, r2
     5b0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b2:	78fa      	ldrb	r2, [r7, #3]
     5b4:	78bb      	ldrb	r3, [r7, #2]
     5b6:	6879      	ldr	r1, [r7, #4]
     5b8:	01d2      	lsls	r2, r2, #7
     5ba:	440a      	add	r2, r1
     5bc:	4413      	add	r3, r2
     5be:	3330      	adds	r3, #48	; 0x30
     5c0:	7bfa      	ldrb	r2, [r7, #15]
     5c2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5c4:	bf00      	nop
     5c6:	3714      	adds	r7, #20
     5c8:	46bd      	mov	sp, r7
     5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     5ce:	4770      	bx	lr

000005d0 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     5d0:	b480      	push	{r7}
     5d2:	b085      	sub	sp, #20
     5d4:	af00      	add	r7, sp, #0
     5d6:	6078      	str	r0, [r7, #4]
     5d8:	4608      	mov	r0, r1
     5da:	4611      	mov	r1, r2
     5dc:	461a      	mov	r2, r3
     5de:	4603      	mov	r3, r0
     5e0:	70fb      	strb	r3, [r7, #3]
     5e2:	460b      	mov	r3, r1
     5e4:	70bb      	strb	r3, [r7, #2]
     5e6:	4613      	mov	r3, r2
     5e8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ea:	78fa      	ldrb	r2, [r7, #3]
     5ec:	78bb      	ldrb	r3, [r7, #2]
     5ee:	6879      	ldr	r1, [r7, #4]
     5f0:	01d2      	lsls	r2, r2, #7
     5f2:	440a      	add	r2, r1
     5f4:	4413      	add	r3, r2
     5f6:	3330      	adds	r3, #48	; 0x30
     5f8:	781b      	ldrb	r3, [r3, #0]
     5fa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5fc:	7bfb      	ldrb	r3, [r7, #15]
     5fe:	f003 030f 	and.w	r3, r3, #15
     602:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     604:	787b      	ldrb	r3, [r7, #1]
     606:	011b      	lsls	r3, r3, #4
     608:	b2da      	uxtb	r2, r3
     60a:	7bfb      	ldrb	r3, [r7, #15]
     60c:	4313      	orrs	r3, r2
     60e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     610:	78fa      	ldrb	r2, [r7, #3]
     612:	78bb      	ldrb	r3, [r7, #2]
     614:	6879      	ldr	r1, [r7, #4]
     616:	01d2      	lsls	r2, r2, #7
     618:	440a      	add	r2, r1
     61a:	4413      	add	r3, r2
     61c:	3330      	adds	r3, #48	; 0x30
     61e:	7bfa      	ldrb	r2, [r7, #15]
     620:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     622:	bf00      	nop
     624:	3714      	adds	r7, #20
     626:	46bd      	mov	sp, r7
     628:	f85d 7b04 	ldr.w	r7, [sp], #4
     62c:	4770      	bx	lr

0000062e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     62e:	b480      	push	{r7}
     630:	b085      	sub	sp, #20
     632:	af00      	add	r7, sp, #0
     634:	6078      	str	r0, [r7, #4]
     636:	4608      	mov	r0, r1
     638:	4611      	mov	r1, r2
     63a:	461a      	mov	r2, r3
     63c:	4603      	mov	r3, r0
     63e:	70fb      	strb	r3, [r7, #3]
     640:	460b      	mov	r3, r1
     642:	70bb      	strb	r3, [r7, #2]
     644:	4613      	mov	r3, r2
     646:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     648:	78fa      	ldrb	r2, [r7, #3]
     64a:	78bb      	ldrb	r3, [r7, #2]
     64c:	6879      	ldr	r1, [r7, #4]
     64e:	01d2      	lsls	r2, r2, #7
     650:	440a      	add	r2, r1
     652:	4413      	add	r3, r2
     654:	3340      	adds	r3, #64	; 0x40
     656:	781b      	ldrb	r3, [r3, #0]
     658:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     65a:	7bfb      	ldrb	r3, [r7, #15]
     65c:	f023 0301 	bic.w	r3, r3, #1
     660:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     662:	787a      	ldrb	r2, [r7, #1]
     664:	7bfb      	ldrb	r3, [r7, #15]
     666:	4313      	orrs	r3, r2
     668:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	78fa      	ldrb	r2, [r7, #3]
     66c:	78bb      	ldrb	r3, [r7, #2]
     66e:	6879      	ldr	r1, [r7, #4]
     670:	01d2      	lsls	r2, r2, #7
     672:	440a      	add	r2, r1
     674:	4413      	add	r3, r2
     676:	3340      	adds	r3, #64	; 0x40
     678:	7bfa      	ldrb	r2, [r7, #15]
     67a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     67c:	bf00      	nop
     67e:	3714      	adds	r7, #20
     680:	46bd      	mov	sp, r7
     682:	f85d 7b04 	ldr.w	r7, [sp], #4
     686:	4770      	bx	lr

00000688 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     688:	b490      	push	{r4, r7}
     68a:	b082      	sub	sp, #8
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
     690:	460b      	mov	r3, r1
     692:	70fb      	strb	r3, [r7, #3]
     694:	4613      	mov	r3, r2
     696:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     698:	78fa      	ldrb	r2, [r7, #3]
     69a:	78bb      	ldrb	r3, [r7, #2]
     69c:	78f8      	ldrb	r0, [r7, #3]
     69e:	78b9      	ldrb	r1, [r7, #2]
     6a0:	687c      	ldr	r4, [r7, #4]
     6a2:	01c0      	lsls	r0, r0, #7
     6a4:	4420      	add	r0, r4
     6a6:	4401      	add	r1, r0
     6a8:	3140      	adds	r1, #64	; 0x40
     6aa:	7809      	ldrb	r1, [r1, #0]
     6ac:	b2c9      	uxtb	r1, r1
     6ae:	f041 0104 	orr.w	r1, r1, #4
     6b2:	b2c8      	uxtb	r0, r1
     6b4:	6879      	ldr	r1, [r7, #4]
     6b6:	01d2      	lsls	r2, r2, #7
     6b8:	440a      	add	r2, r1
     6ba:	4413      	add	r3, r2
     6bc:	3340      	adds	r3, #64	; 0x40
     6be:	4602      	mov	r2, r0
     6c0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6c2:	bf00      	nop
     6c4:	3708      	adds	r7, #8
     6c6:	46bd      	mov	sp, r7
     6c8:	bc90      	pop	{r4, r7}
     6ca:	4770      	bx	lr

000006cc <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     6cc:	b490      	push	{r4, r7}
     6ce:	b082      	sub	sp, #8
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
     6d4:	460b      	mov	r3, r1
     6d6:	70fb      	strb	r3, [r7, #3]
     6d8:	4613      	mov	r3, r2
     6da:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6dc:	78fa      	ldrb	r2, [r7, #3]
     6de:	78bb      	ldrb	r3, [r7, #2]
     6e0:	78f8      	ldrb	r0, [r7, #3]
     6e2:	78b9      	ldrb	r1, [r7, #2]
     6e4:	687c      	ldr	r4, [r7, #4]
     6e6:	01c0      	lsls	r0, r0, #7
     6e8:	4420      	add	r0, r4
     6ea:	4401      	add	r1, r0
     6ec:	3140      	adds	r1, #64	; 0x40
     6ee:	7809      	ldrb	r1, [r1, #0]
     6f0:	b2c9      	uxtb	r1, r1
     6f2:	f021 0104 	bic.w	r1, r1, #4
     6f6:	b2c8      	uxtb	r0, r1
     6f8:	6879      	ldr	r1, [r7, #4]
     6fa:	01d2      	lsls	r2, r2, #7
     6fc:	440a      	add	r2, r1
     6fe:	4413      	add	r3, r2
     700:	3340      	adds	r3, #64	; 0x40
     702:	4602      	mov	r2, r0
     704:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     706:	bf00      	nop
     708:	3708      	adds	r7, #8
     70a:	46bd      	mov	sp, r7
     70c:	bc90      	pop	{r4, r7}
     70e:	4770      	bx	lr

00000710 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     710:	b480      	push	{r7}
     712:	b085      	sub	sp, #20
     714:	af00      	add	r7, sp, #0
     716:	60f8      	str	r0, [r7, #12]
     718:	460b      	mov	r3, r1
     71a:	607a      	str	r2, [r7, #4]
     71c:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     71e:	7afb      	ldrb	r3, [r7, #11]
     720:	68fa      	ldr	r2, [r7, #12]
     722:	01db      	lsls	r3, r3, #7
     724:	4413      	add	r3, r2
     726:	3328      	adds	r3, #40	; 0x28
     728:	687a      	ldr	r2, [r7, #4]
     72a:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     72c:	bf00      	nop
     72e:	3714      	adds	r7, #20
     730:	46bd      	mov	sp, r7
     732:	f85d 7b04 	ldr.w	r7, [sp], #4
     736:	4770      	bx	lr

00000738 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     738:	b580      	push	{r7, lr}
     73a:	b082      	sub	sp, #8
     73c:	af00      	add	r7, sp, #0
     73e:	4603      	mov	r3, r0
     740:	6039      	str	r1, [r7, #0]
     742:	71fb      	strb	r3, [r7, #7]
     744:	4613      	mov	r3, r2
     746:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     748:	79bb      	ldrb	r3, [r7, #6]
     74a:	2b01      	cmp	r3, #1
     74c:	d01c      	beq.n	788 <_gpio_set_direction+0x50>
     74e:	2b02      	cmp	r3, #2
     750:	d037      	beq.n	7c2 <_gpio_set_direction+0x8a>
     752:	2b00      	cmp	r3, #0
     754:	d14e      	bne.n	7f4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     756:	79fb      	ldrb	r3, [r7, #7]
     758:	683a      	ldr	r2, [r7, #0]
     75a:	4619      	mov	r1, r3
     75c:	482a      	ldr	r0, [pc, #168]	; (808 <_gpio_set_direction+0xd0>)
     75e:	4b2b      	ldr	r3, [pc, #172]	; (80c <_gpio_set_direction+0xd4>)
     760:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     762:	683b      	ldr	r3, [r7, #0]
     764:	b29b      	uxth	r3, r3
     766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     76a:	79fb      	ldrb	r3, [r7, #7]
     76c:	4619      	mov	r1, r3
     76e:	4826      	ldr	r0, [pc, #152]	; (808 <_gpio_set_direction+0xd0>)
     770:	4b27      	ldr	r3, [pc, #156]	; (810 <_gpio_set_direction+0xd8>)
     772:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     774:	683b      	ldr	r3, [r7, #0]
     776:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     778:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     77c:	79fb      	ldrb	r3, [r7, #7]
     77e:	4619      	mov	r1, r3
     780:	4821      	ldr	r0, [pc, #132]	; (808 <_gpio_set_direction+0xd0>)
     782:	4b23      	ldr	r3, [pc, #140]	; (810 <_gpio_set_direction+0xd8>)
     784:	4798      	blx	r3
		break;
     786:	e03a      	b.n	7fe <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     788:	79fb      	ldrb	r3, [r7, #7]
     78a:	683a      	ldr	r2, [r7, #0]
     78c:	4619      	mov	r1, r3
     78e:	481e      	ldr	r0, [pc, #120]	; (808 <_gpio_set_direction+0xd0>)
     790:	4b1e      	ldr	r3, [pc, #120]	; (80c <_gpio_set_direction+0xd4>)
     792:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     794:	683b      	ldr	r3, [r7, #0]
     796:	b29b      	uxth	r3, r3
     798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     79c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     7a0:	79f9      	ldrb	r1, [r7, #7]
     7a2:	461a      	mov	r2, r3
     7a4:	4818      	ldr	r0, [pc, #96]	; (808 <_gpio_set_direction+0xd0>)
     7a6:	4b1a      	ldr	r3, [pc, #104]	; (810 <_gpio_set_direction+0xd8>)
     7a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     7aa:	683b      	ldr	r3, [r7, #0]
     7ac:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     7ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     7b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     7b6:	79f9      	ldrb	r1, [r7, #7]
     7b8:	461a      	mov	r2, r3
     7ba:	4813      	ldr	r0, [pc, #76]	; (808 <_gpio_set_direction+0xd0>)
     7bc:	4b14      	ldr	r3, [pc, #80]	; (810 <_gpio_set_direction+0xd8>)
     7be:	4798      	blx	r3
		break;
     7c0:	e01d      	b.n	7fe <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     7c2:	79fb      	ldrb	r3, [r7, #7]
     7c4:	683a      	ldr	r2, [r7, #0]
     7c6:	4619      	mov	r1, r3
     7c8:	480f      	ldr	r0, [pc, #60]	; (808 <_gpio_set_direction+0xd0>)
     7ca:	4b12      	ldr	r3, [pc, #72]	; (814 <_gpio_set_direction+0xdc>)
     7cc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     7ce:	683b      	ldr	r3, [r7, #0]
     7d0:	b29b      	uxth	r3, r3
     7d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     7d6:	79fb      	ldrb	r3, [r7, #7]
     7d8:	4619      	mov	r1, r3
     7da:	480b      	ldr	r0, [pc, #44]	; (808 <_gpio_set_direction+0xd0>)
     7dc:	4b0c      	ldr	r3, [pc, #48]	; (810 <_gpio_set_direction+0xd8>)
     7de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     7e0:	683b      	ldr	r3, [r7, #0]
     7e2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     7e4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     7e8:	79fb      	ldrb	r3, [r7, #7]
     7ea:	4619      	mov	r1, r3
     7ec:	4806      	ldr	r0, [pc, #24]	; (808 <_gpio_set_direction+0xd0>)
     7ee:	4b08      	ldr	r3, [pc, #32]	; (810 <_gpio_set_direction+0xd8>)
     7f0:	4798      	blx	r3
		break;
     7f2:	e004      	b.n	7fe <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     7f4:	2246      	movs	r2, #70	; 0x46
     7f6:	4908      	ldr	r1, [pc, #32]	; (818 <_gpio_set_direction+0xe0>)
     7f8:	2000      	movs	r0, #0
     7fa:	4b08      	ldr	r3, [pc, #32]	; (81c <_gpio_set_direction+0xe4>)
     7fc:	4798      	blx	r3
	}
}
     7fe:	bf00      	nop
     800:	3708      	adds	r7, #8
     802:	46bd      	mov	sp, r7
     804:	bd80      	pop	{r7, pc}
     806:	bf00      	nop
     808:	41008000 	.word	0x41008000
     80c:	000004f9 	.word	0x000004f9
     810:	00000711 	.word	0x00000711
     814:	000004d1 	.word	0x000004d1
     818:	000034cc 	.word	0x000034cc
     81c:	000013d9 	.word	0x000013d9

00000820 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     820:	b580      	push	{r7, lr}
     822:	b082      	sub	sp, #8
     824:	af00      	add	r7, sp, #0
     826:	4603      	mov	r3, r0
     828:	6039      	str	r1, [r7, #0]
     82a:	71fb      	strb	r3, [r7, #7]
     82c:	4613      	mov	r3, r2
     82e:	71bb      	strb	r3, [r7, #6]
	if (level) {
     830:	79bb      	ldrb	r3, [r7, #6]
     832:	2b00      	cmp	r3, #0
     834:	d006      	beq.n	844 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     836:	79fb      	ldrb	r3, [r7, #7]
     838:	683a      	ldr	r2, [r7, #0]
     83a:	4619      	mov	r1, r3
     83c:	4806      	ldr	r0, [pc, #24]	; (858 <_gpio_set_level+0x38>)
     83e:	4b07      	ldr	r3, [pc, #28]	; (85c <_gpio_set_level+0x3c>)
     840:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     842:	e005      	b.n	850 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     844:	79fb      	ldrb	r3, [r7, #7]
     846:	683a      	ldr	r2, [r7, #0]
     848:	4619      	mov	r1, r3
     84a:	4803      	ldr	r0, [pc, #12]	; (858 <_gpio_set_level+0x38>)
     84c:	4b04      	ldr	r3, [pc, #16]	; (860 <_gpio_set_level+0x40>)
     84e:	4798      	blx	r3
}
     850:	bf00      	nop
     852:	3708      	adds	r7, #8
     854:	46bd      	mov	sp, r7
     856:	bd80      	pop	{r7, pc}
     858:	41008000 	.word	0x41008000
     85c:	00000521 	.word	0x00000521
     860:	00000549 	.word	0x00000549

00000864 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     864:	b580      	push	{r7, lr}
     866:	b082      	sub	sp, #8
     868:	af00      	add	r7, sp, #0
     86a:	4603      	mov	r3, r0
     86c:	71fb      	strb	r3, [r7, #7]
     86e:	460b      	mov	r3, r1
     870:	71bb      	strb	r3, [r7, #6]
     872:	4613      	mov	r3, r2
     874:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     876:	797b      	ldrb	r3, [r7, #5]
     878:	2b01      	cmp	r3, #1
     87a:	d00a      	beq.n	892 <_gpio_set_pin_pull_mode+0x2e>
     87c:	2b02      	cmp	r3, #2
     87e:	d01f      	beq.n	8c0 <_gpio_set_pin_pull_mode+0x5c>
     880:	2b00      	cmp	r3, #0
     882:	d134      	bne.n	8ee <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     884:	79ba      	ldrb	r2, [r7, #6]
     886:	79fb      	ldrb	r3, [r7, #7]
     888:	4619      	mov	r1, r3
     88a:	481e      	ldr	r0, [pc, #120]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     88c:	4b1e      	ldr	r3, [pc, #120]	; (908 <_gpio_set_pin_pull_mode+0xa4>)
     88e:	4798      	blx	r3
		break;
     890:	e033      	b.n	8fa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     892:	79bb      	ldrb	r3, [r7, #6]
     894:	2201      	movs	r2, #1
     896:	409a      	lsls	r2, r3
     898:	79fb      	ldrb	r3, [r7, #7]
     89a:	4619      	mov	r1, r3
     89c:	4819      	ldr	r0, [pc, #100]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     89e:	4b1b      	ldr	r3, [pc, #108]	; (90c <_gpio_set_pin_pull_mode+0xa8>)
     8a0:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     8a2:	79ba      	ldrb	r2, [r7, #6]
     8a4:	79fb      	ldrb	r3, [r7, #7]
     8a6:	4619      	mov	r1, r3
     8a8:	4816      	ldr	r0, [pc, #88]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     8aa:	4b19      	ldr	r3, [pc, #100]	; (910 <_gpio_set_pin_pull_mode+0xac>)
     8ac:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     8ae:	79bb      	ldrb	r3, [r7, #6]
     8b0:	2201      	movs	r2, #1
     8b2:	409a      	lsls	r2, r3
     8b4:	79fb      	ldrb	r3, [r7, #7]
     8b6:	4619      	mov	r1, r3
     8b8:	4812      	ldr	r0, [pc, #72]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     8ba:	4b16      	ldr	r3, [pc, #88]	; (914 <_gpio_set_pin_pull_mode+0xb0>)
     8bc:	4798      	blx	r3
		break;
     8be:	e01c      	b.n	8fa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     8c0:	79bb      	ldrb	r3, [r7, #6]
     8c2:	2201      	movs	r2, #1
     8c4:	409a      	lsls	r2, r3
     8c6:	79fb      	ldrb	r3, [r7, #7]
     8c8:	4619      	mov	r1, r3
     8ca:	480e      	ldr	r0, [pc, #56]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     8cc:	4b0f      	ldr	r3, [pc, #60]	; (90c <_gpio_set_pin_pull_mode+0xa8>)
     8ce:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     8d0:	79ba      	ldrb	r2, [r7, #6]
     8d2:	79fb      	ldrb	r3, [r7, #7]
     8d4:	4619      	mov	r1, r3
     8d6:	480b      	ldr	r0, [pc, #44]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     8d8:	4b0d      	ldr	r3, [pc, #52]	; (910 <_gpio_set_pin_pull_mode+0xac>)
     8da:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     8dc:	79bb      	ldrb	r3, [r7, #6]
     8de:	2201      	movs	r2, #1
     8e0:	409a      	lsls	r2, r3
     8e2:	79fb      	ldrb	r3, [r7, #7]
     8e4:	4619      	mov	r1, r3
     8e6:	4807      	ldr	r0, [pc, #28]	; (904 <_gpio_set_pin_pull_mode+0xa0>)
     8e8:	4b0b      	ldr	r3, [pc, #44]	; (918 <_gpio_set_pin_pull_mode+0xb4>)
     8ea:	4798      	blx	r3
		break;
     8ec:	e005      	b.n	8fa <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     8ee:	2289      	movs	r2, #137	; 0x89
     8f0:	490a      	ldr	r1, [pc, #40]	; (91c <_gpio_set_pin_pull_mode+0xb8>)
     8f2:	2000      	movs	r0, #0
     8f4:	4b0a      	ldr	r3, [pc, #40]	; (920 <_gpio_set_pin_pull_mode+0xbc>)
     8f6:	4798      	blx	r3
		break;
     8f8:	bf00      	nop
	}
}
     8fa:	bf00      	nop
     8fc:	3708      	adds	r7, #8
     8fe:	46bd      	mov	sp, r7
     900:	bd80      	pop	{r7, pc}
     902:	bf00      	nop
     904:	41008000 	.word	0x41008000
     908:	000006cd 	.word	0x000006cd
     90c:	000004f9 	.word	0x000004f9
     910:	00000689 	.word	0x00000689
     914:	00000521 	.word	0x00000521
     918:	00000549 	.word	0x00000549
     91c:	000034cc 	.word	0x000034cc
     920:	000013d9 	.word	0x000013d9

00000924 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     924:	b590      	push	{r4, r7, lr}
     926:	b085      	sub	sp, #20
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
     92c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     92e:	687b      	ldr	r3, [r7, #4]
     930:	095b      	lsrs	r3, r3, #5
     932:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     934:	687b      	ldr	r3, [r7, #4]
     936:	b2db      	uxtb	r3, r3
     938:	f003 031f 	and.w	r3, r3, #31
     93c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     93e:	683b      	ldr	r3, [r7, #0]
     940:	f1b3 3fff 	cmp.w	r3, #4294967295
     944:	d106      	bne.n	954 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     946:	7bba      	ldrb	r2, [r7, #14]
     948:	7bf9      	ldrb	r1, [r7, #15]
     94a:	2300      	movs	r3, #0
     94c:	4812      	ldr	r0, [pc, #72]	; (998 <_gpio_set_pin_function+0x74>)
     94e:	4c13      	ldr	r4, [pc, #76]	; (99c <_gpio_set_pin_function+0x78>)
     950:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     952:	e01d      	b.n	990 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     954:	7bba      	ldrb	r2, [r7, #14]
     956:	7bf9      	ldrb	r1, [r7, #15]
     958:	2301      	movs	r3, #1
     95a:	480f      	ldr	r0, [pc, #60]	; (998 <_gpio_set_pin_function+0x74>)
     95c:	4c0f      	ldr	r4, [pc, #60]	; (99c <_gpio_set_pin_function+0x78>)
     95e:	47a0      	blx	r4
		if (pin & 1) {
     960:	7bbb      	ldrb	r3, [r7, #14]
     962:	f003 0301 	and.w	r3, r3, #1
     966:	2b00      	cmp	r3, #0
     968:	d009      	beq.n	97e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     96a:	7bbb      	ldrb	r3, [r7, #14]
     96c:	085b      	lsrs	r3, r3, #1
     96e:	b2da      	uxtb	r2, r3
     970:	683b      	ldr	r3, [r7, #0]
     972:	b2db      	uxtb	r3, r3
     974:	7bf9      	ldrb	r1, [r7, #15]
     976:	4808      	ldr	r0, [pc, #32]	; (998 <_gpio_set_pin_function+0x74>)
     978:	4c09      	ldr	r4, [pc, #36]	; (9a0 <_gpio_set_pin_function+0x7c>)
     97a:	47a0      	blx	r4
}
     97c:	e008      	b.n	990 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     97e:	7bbb      	ldrb	r3, [r7, #14]
     980:	085b      	lsrs	r3, r3, #1
     982:	b2da      	uxtb	r2, r3
     984:	683b      	ldr	r3, [r7, #0]
     986:	b2db      	uxtb	r3, r3
     988:	7bf9      	ldrb	r1, [r7, #15]
     98a:	4803      	ldr	r0, [pc, #12]	; (998 <_gpio_set_pin_function+0x74>)
     98c:	4c05      	ldr	r4, [pc, #20]	; (9a4 <_gpio_set_pin_function+0x80>)
     98e:	47a0      	blx	r4
}
     990:	bf00      	nop
     992:	3714      	adds	r7, #20
     994:	46bd      	mov	sp, r7
     996:	bd90      	pop	{r4, r7, pc}
     998:	41008000 	.word	0x41008000
     99c:	0000062f 	.word	0x0000062f
     9a0:	000005d1 	.word	0x000005d1
     9a4:	00000571 	.word	0x00000571

000009a8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b082      	sub	sp, #8
     9ac:	af00      	add	r7, sp, #0
     9ae:	4603      	mov	r3, r0
     9b0:	460a      	mov	r2, r1
     9b2:	71fb      	strb	r3, [r7, #7]
     9b4:	4613      	mov	r3, r2
     9b6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     9b8:	79fb      	ldrb	r3, [r7, #7]
     9ba:	095b      	lsrs	r3, r3, #5
     9bc:	b2d8      	uxtb	r0, r3
     9be:	79fb      	ldrb	r3, [r7, #7]
     9c0:	f003 031f 	and.w	r3, r3, #31
     9c4:	b2db      	uxtb	r3, r3
     9c6:	79ba      	ldrb	r2, [r7, #6]
     9c8:	4619      	mov	r1, r3
     9ca:	4b03      	ldr	r3, [pc, #12]	; (9d8 <gpio_set_pin_pull_mode+0x30>)
     9cc:	4798      	blx	r3
}
     9ce:	bf00      	nop
     9d0:	3708      	adds	r7, #8
     9d2:	46bd      	mov	sp, r7
     9d4:	bd80      	pop	{r7, pc}
     9d6:	bf00      	nop
     9d8:	00000865 	.word	0x00000865

000009dc <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     9dc:	b580      	push	{r7, lr}
     9de:	b082      	sub	sp, #8
     9e0:	af00      	add	r7, sp, #0
     9e2:	6078      	str	r0, [r7, #4]
     9e4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     9e6:	6839      	ldr	r1, [r7, #0]
     9e8:	6878      	ldr	r0, [r7, #4]
     9ea:	4b03      	ldr	r3, [pc, #12]	; (9f8 <gpio_set_pin_function+0x1c>)
     9ec:	4798      	blx	r3
}
     9ee:	bf00      	nop
     9f0:	3708      	adds	r7, #8
     9f2:	46bd      	mov	sp, r7
     9f4:	bd80      	pop	{r7, pc}
     9f6:	bf00      	nop
     9f8:	00000925 	.word	0x00000925

000009fc <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b082      	sub	sp, #8
     a00:	af00      	add	r7, sp, #0
     a02:	4603      	mov	r3, r0
     a04:	460a      	mov	r2, r1
     a06:	71fb      	strb	r3, [r7, #7]
     a08:	4613      	mov	r3, r2
     a0a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     a0c:	79fb      	ldrb	r3, [r7, #7]
     a0e:	095b      	lsrs	r3, r3, #5
     a10:	b2d8      	uxtb	r0, r3
     a12:	79fb      	ldrb	r3, [r7, #7]
     a14:	f003 031f 	and.w	r3, r3, #31
     a18:	2201      	movs	r2, #1
     a1a:	fa02 f303 	lsl.w	r3, r2, r3
     a1e:	79ba      	ldrb	r2, [r7, #6]
     a20:	4619      	mov	r1, r3
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <gpio_set_pin_direction+0x34>)
     a24:	4798      	blx	r3
}
     a26:	bf00      	nop
     a28:	3708      	adds	r7, #8
     a2a:	46bd      	mov	sp, r7
     a2c:	bd80      	pop	{r7, pc}
     a2e:	bf00      	nop
     a30:	00000739 	.word	0x00000739

00000a34 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     a34:	b580      	push	{r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	4603      	mov	r3, r0
     a3c:	460a      	mov	r2, r1
     a3e:	71fb      	strb	r3, [r7, #7]
     a40:	4613      	mov	r3, r2
     a42:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     a44:	79fb      	ldrb	r3, [r7, #7]
     a46:	095b      	lsrs	r3, r3, #5
     a48:	b2d8      	uxtb	r0, r3
     a4a:	79fb      	ldrb	r3, [r7, #7]
     a4c:	f003 031f 	and.w	r3, r3, #31
     a50:	2201      	movs	r2, #1
     a52:	fa02 f303 	lsl.w	r3, r2, r3
     a56:	79ba      	ldrb	r2, [r7, #6]
     a58:	4619      	mov	r1, r3
     a5a:	4b03      	ldr	r3, [pc, #12]	; (a68 <gpio_set_pin_level+0x34>)
     a5c:	4798      	blx	r3
}
     a5e:	bf00      	nop
     a60:	3708      	adds	r7, #8
     a62:	46bd      	mov	sp, r7
     a64:	bd80      	pop	{r7, pc}
     a66:	bf00      	nop
     a68:	00000821 	.word	0x00000821

00000a6c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     a6c:	b580      	push	{r7, lr}
     a6e:	af00      	add	r7, sp, #0
	_init_chip();
     a70:	4b01      	ldr	r3, [pc, #4]	; (a78 <init_mcu+0xc>)
     a72:	4798      	blx	r3
}
     a74:	bf00      	nop
     a76:	bd80      	pop	{r7, pc}
     a78:	000015b9 	.word	0x000015b9

00000a7c <USART_0_PORT_init>:
struct timer_descriptor TIMER_0;

struct usart_sync_descriptor USART_0;

void USART_0_PORT_init(void)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     a80:	4904      	ldr	r1, [pc, #16]	; (a94 <USART_0_PORT_init+0x18>)
     a82:	2039      	movs	r0, #57	; 0x39
     a84:	4b04      	ldr	r3, [pc, #16]	; (a98 <USART_0_PORT_init+0x1c>)
     a86:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     a88:	4904      	ldr	r1, [pc, #16]	; (a9c <USART_0_PORT_init+0x20>)
     a8a:	2038      	movs	r0, #56	; 0x38
     a8c:	4b02      	ldr	r3, [pc, #8]	; (a98 <USART_0_PORT_init+0x1c>)
     a8e:	4798      	blx	r3
}
     a90:	bf00      	nop
     a92:	bd80      	pop	{r7, pc}
     a94:	00390003 	.word	0x00390003
     a98:	000009dd 	.word	0x000009dd
     a9c:	00380003 	.word	0x00380003

00000aa0 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     aa0:	b580      	push	{r7, lr}
     aa2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aa4:	2240      	movs	r2, #64	; 0x40
     aa6:	2117      	movs	r1, #23
     aa8:	4806      	ldr	r0, [pc, #24]	; (ac4 <USART_0_CLOCK_init+0x24>)
     aaa:	4b07      	ldr	r3, [pc, #28]	; (ac8 <USART_0_CLOCK_init+0x28>)
     aac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aae:	2243      	movs	r2, #67	; 0x43
     ab0:	2103      	movs	r1, #3
     ab2:	4804      	ldr	r0, [pc, #16]	; (ac4 <USART_0_CLOCK_init+0x24>)
     ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <USART_0_CLOCK_init+0x28>)
     ab6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     ab8:	4804      	ldr	r0, [pc, #16]	; (acc <USART_0_CLOCK_init+0x2c>)
     aba:	4b05      	ldr	r3, [pc, #20]	; (ad0 <USART_0_CLOCK_init+0x30>)
     abc:	4798      	blx	r3
}
     abe:	bf00      	nop
     ac0:	bd80      	pop	{r7, pc}
     ac2:	bf00      	nop
     ac4:	40001c00 	.word	0x40001c00
     ac8:	0000042b 	.word	0x0000042b
     acc:	40000800 	.word	0x40000800
     ad0:	00000471 	.word	0x00000471

00000ad4 <USART_0_init>:

void USART_0_init(void)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <USART_0_init+0x1c>)
     ada:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     adc:	2200      	movs	r2, #0
     ade:	4905      	ldr	r1, [pc, #20]	; (af4 <USART_0_init+0x20>)
     ae0:	4805      	ldr	r0, [pc, #20]	; (af8 <USART_0_init+0x24>)
     ae2:	4b06      	ldr	r3, [pc, #24]	; (afc <USART_0_init+0x28>)
     ae4:	4798      	blx	r3
	USART_0_PORT_init();
     ae6:	4b06      	ldr	r3, [pc, #24]	; (b00 <USART_0_init+0x2c>)
     ae8:	4798      	blx	r3
}
     aea:	bf00      	nop
     aec:	bd80      	pop	{r7, pc}
     aee:	bf00      	nop
     af0:	00000aa1 	.word	0x00000aa1
     af4:	41012000 	.word	0x41012000
     af8:	20000124 	.word	0x20000124
     afc:	00001189 	.word	0x00001189
     b00:	00000a7d 	.word	0x00000a7d

00000b04 <delay_driver_init>:

void delay_driver_init(void)
{
     b04:	b580      	push	{r7, lr}
     b06:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     b08:	4802      	ldr	r0, [pc, #8]	; (b14 <delay_driver_init+0x10>)
     b0a:	4b03      	ldr	r3, [pc, #12]	; (b18 <delay_driver_init+0x14>)
     b0c:	4798      	blx	r3
}
     b0e:	bf00      	nop
     b10:	bd80      	pop	{r7, pc}
     b12:	bf00      	nop
     b14:	e000e010 	.word	0xe000e010
     b18:	00000d61 	.word	0x00000d61

00000b1c <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     b1c:	b580      	push	{r7, lr}
     b1e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     b20:	4808      	ldr	r0, [pc, #32]	; (b44 <TIMER_1_init+0x28>)
     b22:	4b09      	ldr	r3, [pc, #36]	; (b48 <TIMER_1_init+0x2c>)
     b24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b26:	2240      	movs	r2, #64	; 0x40
     b28:	2109      	movs	r1, #9
     b2a:	4808      	ldr	r0, [pc, #32]	; (b4c <TIMER_1_init+0x30>)
     b2c:	4b08      	ldr	r3, [pc, #32]	; (b50 <TIMER_1_init+0x34>)
     b2e:	4798      	blx	r3

	timer_init(&TIMER_1, TC0, _tc_get_timer());
     b30:	4b08      	ldr	r3, [pc, #32]	; (b54 <TIMER_1_init+0x38>)
     b32:	4798      	blx	r3
     b34:	4603      	mov	r3, r0
     b36:	461a      	mov	r2, r3
     b38:	4907      	ldr	r1, [pc, #28]	; (b58 <TIMER_1_init+0x3c>)
     b3a:	4808      	ldr	r0, [pc, #32]	; (b5c <TIMER_1_init+0x40>)
     b3c:	4b08      	ldr	r3, [pc, #32]	; (b60 <TIMER_1_init+0x44>)
     b3e:	4798      	blx	r3
}
     b40:	bf00      	nop
     b42:	bd80      	pop	{r7, pc}
     b44:	40000800 	.word	0x40000800
     b48:	00000451 	.word	0x00000451
     b4c:	40001c00 	.word	0x40001c00
     b50:	0000042b 	.word	0x0000042b
     b54:	000026ed 	.word	0x000026ed
     b58:	40003800 	.word	0x40003800
     b5c:	20000108 	.word	0x20000108
     b60:	00000e15 	.word	0x00000e15

00000b64 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     b64:	b580      	push	{r7, lr}
     b66:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
     b68:	4808      	ldr	r0, [pc, #32]	; (b8c <TIMER_0_init+0x28>)
     b6a:	4b09      	ldr	r3, [pc, #36]	; (b90 <TIMER_0_init+0x2c>)
     b6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b6e:	2240      	movs	r2, #64	; 0x40
     b70:	211a      	movs	r1, #26
     b72:	4808      	ldr	r0, [pc, #32]	; (b94 <TIMER_0_init+0x30>)
     b74:	4b08      	ldr	r3, [pc, #32]	; (b98 <TIMER_0_init+0x34>)
     b76:	4798      	blx	r3

	timer_init(&TIMER_0, TC2, _tc_get_timer());
     b78:	4b08      	ldr	r3, [pc, #32]	; (b9c <TIMER_0_init+0x38>)
     b7a:	4798      	blx	r3
     b7c:	4603      	mov	r3, r0
     b7e:	461a      	mov	r2, r3
     b80:	4907      	ldr	r1, [pc, #28]	; (ba0 <TIMER_0_init+0x3c>)
     b82:	4808      	ldr	r0, [pc, #32]	; (ba4 <TIMER_0_init+0x40>)
     b84:	4b08      	ldr	r3, [pc, #32]	; (ba8 <TIMER_0_init+0x44>)
     b86:	4798      	blx	r3
}
     b88:	bf00      	nop
     b8a:	bd80      	pop	{r7, pc}
     b8c:	40000800 	.word	0x40000800
     b90:	000004b1 	.word	0x000004b1
     b94:	40001c00 	.word	0x40001c00
     b98:	0000042b 	.word	0x0000042b
     b9c:	000026ed 	.word	0x000026ed
     ba0:	4101a000 	.word	0x4101a000
     ba4:	20000130 	.word	0x20000130
     ba8:	00000e15 	.word	0x00000e15

00000bac <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     bac:	b580      	push	{r7, lr}
     bae:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     bb0:	4902      	ldr	r1, [pc, #8]	; (bbc <PWM_0_PORT_init+0x10>)
     bb2:	204a      	movs	r0, #74	; 0x4a
     bb4:	4b02      	ldr	r3, [pc, #8]	; (bc0 <PWM_0_PORT_init+0x14>)
     bb6:	4798      	blx	r3
}
     bb8:	bf00      	nop
     bba:	bd80      	pop	{r7, pc}
     bbc:	004a0005 	.word	0x004a0005
     bc0:	000009dd 	.word	0x000009dd

00000bc4 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     bc8:	4804      	ldr	r0, [pc, #16]	; (bdc <PWM_0_CLOCK_init+0x18>)
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <PWM_0_CLOCK_init+0x1c>)
     bcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	2119      	movs	r1, #25
     bd2:	4804      	ldr	r0, [pc, #16]	; (be4 <PWM_0_CLOCK_init+0x20>)
     bd4:	4b04      	ldr	r3, [pc, #16]	; (be8 <PWM_0_CLOCK_init+0x24>)
     bd6:	4798      	blx	r3
}
     bd8:	bf00      	nop
     bda:	bd80      	pop	{r7, pc}
     bdc:	40000800 	.word	0x40000800
     be0:	00000491 	.word	0x00000491
     be4:	40001c00 	.word	0x40001c00
     be8:	0000042b 	.word	0x0000042b

00000bec <system_init>:

void system_init(void)
{
     bec:	b580      	push	{r7, lr}
     bee:	af00      	add	r7, sp, #0
	init_mcu();
     bf0:	4b3c      	ldr	r3, [pc, #240]	; (ce4 <system_init+0xf8>)
     bf2:	4798      	blx	r3

	// GPIO on PB04

	gpio_set_pin_level(LED_green2,
     bf4:	2100      	movs	r1, #0
     bf6:	2024      	movs	r0, #36	; 0x24
     bf8:	4b3b      	ldr	r3, [pc, #236]	; (ce8 <system_init+0xfc>)
     bfa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED_green2, GPIO_DIRECTION_OUT);
     bfc:	2102      	movs	r1, #2
     bfe:	2024      	movs	r0, #36	; 0x24
     c00:	4b3a      	ldr	r3, [pc, #232]	; (cec <system_init+0x100>)
     c02:	4798      	blx	r3

	gpio_set_pin_function(LED_green2, GPIO_PIN_FUNCTION_OFF);
     c04:	f04f 31ff 	mov.w	r1, #4294967295
     c08:	2024      	movs	r0, #36	; 0x24
     c0a:	4b39      	ldr	r3, [pc, #228]	; (cf0 <system_init+0x104>)
     c0c:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT1, GPIO_DIRECTION_IN);
     c0e:	2101      	movs	r1, #1
     c10:	2025      	movs	r0, #37	; 0x25
     c12:	4b36      	ldr	r3, [pc, #216]	; (cec <system_init+0x100>)
     c14:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT1,
     c16:	2101      	movs	r1, #1
     c18:	2025      	movs	r0, #37	; 0x25
     c1a:	4b36      	ldr	r3, [pc, #216]	; (cf4 <system_init+0x108>)
     c1c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT1, GPIO_PIN_FUNCTION_OFF);
     c1e:	f04f 31ff 	mov.w	r1, #4294967295
     c22:	2025      	movs	r0, #37	; 0x25
     c24:	4b32      	ldr	r3, [pc, #200]	; (cf0 <system_init+0x104>)
     c26:	4798      	blx	r3

	// GPIO on PB06

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT2, GPIO_DIRECTION_IN);
     c28:	2101      	movs	r1, #1
     c2a:	2026      	movs	r0, #38	; 0x26
     c2c:	4b2f      	ldr	r3, [pc, #188]	; (cec <system_init+0x100>)
     c2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT2,
     c30:	2101      	movs	r1, #1
     c32:	2026      	movs	r0, #38	; 0x26
     c34:	4b2f      	ldr	r3, [pc, #188]	; (cf4 <system_init+0x108>)
     c36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT2, GPIO_PIN_FUNCTION_OFF);
     c38:	f04f 31ff 	mov.w	r1, #4294967295
     c3c:	2026      	movs	r0, #38	; 0x26
     c3e:	4b2c      	ldr	r3, [pc, #176]	; (cf0 <system_init+0x104>)
     c40:	4798      	blx	r3

	// GPIO on PB14

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT3, GPIO_DIRECTION_IN);
     c42:	2101      	movs	r1, #1
     c44:	202e      	movs	r0, #46	; 0x2e
     c46:	4b29      	ldr	r3, [pc, #164]	; (cec <system_init+0x100>)
     c48:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT3,
     c4a:	2101      	movs	r1, #1
     c4c:	202e      	movs	r0, #46	; 0x2e
     c4e:	4b29      	ldr	r3, [pc, #164]	; (cf4 <system_init+0x108>)
     c50:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT3, GPIO_PIN_FUNCTION_OFF);
     c52:	f04f 31ff 	mov.w	r1, #4294967295
     c56:	202e      	movs	r0, #46	; 0x2e
     c58:	4b25      	ldr	r3, [pc, #148]	; (cf0 <system_init+0x104>)
     c5a:	4798      	blx	r3

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT4, GPIO_DIRECTION_IN);
     c5c:	2101      	movs	r1, #1
     c5e:	202f      	movs	r0, #47	; 0x2f
     c60:	4b22      	ldr	r3, [pc, #136]	; (cec <system_init+0x100>)
     c62:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT4,
     c64:	2101      	movs	r1, #1
     c66:	202f      	movs	r0, #47	; 0x2f
     c68:	4b22      	ldr	r3, [pc, #136]	; (cf4 <system_init+0x108>)
     c6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT4, GPIO_PIN_FUNCTION_OFF);
     c6c:	f04f 31ff 	mov.w	r1, #4294967295
     c70:	202f      	movs	r0, #47	; 0x2f
     c72:	4b1f      	ldr	r3, [pc, #124]	; (cf0 <system_init+0x104>)
     c74:	4798      	blx	r3

	// GPIO on PB16

	// Set pin direction to input
	gpio_set_pin_direction(PB16, GPIO_DIRECTION_IN);
     c76:	2101      	movs	r1, #1
     c78:	2030      	movs	r0, #48	; 0x30
     c7a:	4b1c      	ldr	r3, [pc, #112]	; (cec <system_init+0x100>)
     c7c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB16,
     c7e:	2100      	movs	r1, #0
     c80:	2030      	movs	r0, #48	; 0x30
     c82:	4b1c      	ldr	r3, [pc, #112]	; (cf4 <system_init+0x108>)
     c84:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB16, GPIO_PIN_FUNCTION_OFF);
     c86:	f04f 31ff 	mov.w	r1, #4294967295
     c8a:	2030      	movs	r0, #48	; 0x30
     c8c:	4b18      	ldr	r3, [pc, #96]	; (cf0 <system_init+0x104>)
     c8e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     c90:	2101      	movs	r1, #1
     c92:	203f      	movs	r0, #63	; 0x3f
     c94:	4b15      	ldr	r3, [pc, #84]	; (cec <system_init+0x100>)
     c96:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     c98:	2101      	movs	r1, #1
     c9a:	203f      	movs	r0, #63	; 0x3f
     c9c:	4b15      	ldr	r3, [pc, #84]	; (cf4 <system_init+0x108>)
     c9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     ca0:	f04f 31ff 	mov.w	r1, #4294967295
     ca4:	203f      	movs	r0, #63	; 0x3f
     ca6:	4b12      	ldr	r3, [pc, #72]	; (cf0 <system_init+0x104>)
     ca8:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     caa:	2100      	movs	r1, #0
     cac:	2052      	movs	r0, #82	; 0x52
     cae:	4b0e      	ldr	r3, [pc, #56]	; (ce8 <system_init+0xfc>)
     cb0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     cb2:	2102      	movs	r1, #2
     cb4:	2052      	movs	r0, #82	; 0x52
     cb6:	4b0d      	ldr	r3, [pc, #52]	; (cec <system_init+0x100>)
     cb8:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     cba:	f04f 31ff 	mov.w	r1, #4294967295
     cbe:	2052      	movs	r0, #82	; 0x52
     cc0:	4b0b      	ldr	r3, [pc, #44]	; (cf0 <system_init+0x104>)
     cc2:	4798      	blx	r3

	USART_0_init();
     cc4:	4b0c      	ldr	r3, [pc, #48]	; (cf8 <system_init+0x10c>)
     cc6:	4798      	blx	r3

	delay_driver_init();
     cc8:	4b0c      	ldr	r3, [pc, #48]	; (cfc <system_init+0x110>)
     cca:	4798      	blx	r3

	TIMER_1_init();
     ccc:	4b0c      	ldr	r3, [pc, #48]	; (d00 <system_init+0x114>)
     cce:	4798      	blx	r3
	TIMER_0_init();
     cd0:	4b0c      	ldr	r3, [pc, #48]	; (d04 <system_init+0x118>)
     cd2:	4798      	blx	r3
	PWM_0_CLOCK_init();
     cd4:	4b0c      	ldr	r3, [pc, #48]	; (d08 <system_init+0x11c>)
     cd6:	4798      	blx	r3

	PWM_0_PORT_init();
     cd8:	4b0c      	ldr	r3, [pc, #48]	; (d0c <system_init+0x120>)
     cda:	4798      	blx	r3

	PWM_0_init();
     cdc:	4b0c      	ldr	r3, [pc, #48]	; (d10 <system_init+0x124>)
     cde:	4798      	blx	r3
}
     ce0:	bf00      	nop
     ce2:	bd80      	pop	{r7, pc}
     ce4:	00000a6d 	.word	0x00000a6d
     ce8:	00000a35 	.word	0x00000a35
     cec:	000009fd 	.word	0x000009fd
     cf0:	000009dd 	.word	0x000009dd
     cf4:	000009a9 	.word	0x000009a9
     cf8:	00000ad5 	.word	0x00000ad5
     cfc:	00000b05 	.word	0x00000b05
     d00:	00000b1d 	.word	0x00000b1d
     d04:	00000b65 	.word	0x00000b65
     d08:	00000bc5 	.word	0x00000bc5
     d0c:	00000bad 	.word	0x00000bad
     d10:	00002001 	.word	0x00002001

00000d14 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     d14:	b480      	push	{r7}
     d16:	b085      	sub	sp, #20
     d18:	af00      	add	r7, sp, #0
     d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d1c:	f3ef 8310 	mrs	r3, PRIMASK
     d20:	60fb      	str	r3, [r7, #12]
  return(result);
     d22:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d28:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d2a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d2e:	bf00      	nop
     d30:	3714      	adds	r7, #20
     d32:	46bd      	mov	sp, r7
     d34:	f85d 7b04 	ldr.w	r7, [sp], #4
     d38:	4770      	bx	lr

00000d3a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     d3a:	b480      	push	{r7}
     d3c:	b085      	sub	sp, #20
     d3e:	af00      	add	r7, sp, #0
     d40:	6078      	str	r0, [r7, #4]
     d42:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d4c:	68fb      	ldr	r3, [r7, #12]
     d4e:	f383 8810 	msr	PRIMASK, r3
}
     d52:	bf00      	nop
     d54:	3714      	adds	r7, #20
     d56:	46bd      	mov	sp, r7
     d58:	f85d 7b04 	ldr.w	r7, [sp], #4
     d5c:	4770      	bx	lr
	...

00000d60 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     d68:	4a05      	ldr	r2, [pc, #20]	; (d80 <delay_init+0x20>)
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	6013      	str	r3, [r2, #0]
     d6e:	4b04      	ldr	r3, [pc, #16]	; (d80 <delay_init+0x20>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	4618      	mov	r0, r3
     d74:	4b03      	ldr	r3, [pc, #12]	; (d84 <delay_init+0x24>)
     d76:	4798      	blx	r3
}
     d78:	bf00      	nop
     d7a:	3708      	adds	r7, #8
     d7c:	46bd      	mov	sp, r7
     d7e:	bd80      	pop	{r7, pc}
     d80:	200000cc 	.word	0x200000cc
     d84:	00001eb5 	.word	0x00001eb5

00000d88 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     d88:	b580      	push	{r7, lr}
     d8a:	b084      	sub	sp, #16
     d8c:	af00      	add	r7, sp, #0
     d8e:	60f8      	str	r0, [r7, #12]
     d90:	60b9      	str	r1, [r7, #8]
     d92:	4613      	mov	r3, r2
     d94:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	2b00      	cmp	r3, #0
     d9a:	d004      	beq.n	da6 <io_write+0x1e>
     d9c:	68bb      	ldr	r3, [r7, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d001      	beq.n	da6 <io_write+0x1e>
     da2:	2301      	movs	r3, #1
     da4:	e000      	b.n	da8 <io_write+0x20>
     da6:	2300      	movs	r3, #0
     da8:	f003 0301 	and.w	r3, r3, #1
     dac:	b2db      	uxtb	r3, r3
     dae:	2234      	movs	r2, #52	; 0x34
     db0:	4907      	ldr	r1, [pc, #28]	; (dd0 <io_write+0x48>)
     db2:	4618      	mov	r0, r3
     db4:	4b07      	ldr	r3, [pc, #28]	; (dd4 <io_write+0x4c>)
     db6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	88fa      	ldrh	r2, [r7, #6]
     dbe:	68b9      	ldr	r1, [r7, #8]
     dc0:	68f8      	ldr	r0, [r7, #12]
     dc2:	4798      	blx	r3
     dc4:	4603      	mov	r3, r0
}
     dc6:	4618      	mov	r0, r3
     dc8:	3710      	adds	r7, #16
     dca:	46bd      	mov	sp, r7
     dcc:	bd80      	pop	{r7, pc}
     dce:	bf00      	nop
     dd0:	000034e8 	.word	0x000034e8
     dd4:	000013d9 	.word	0x000013d9

00000dd8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     dd8:	b480      	push	{r7}
     dda:	b083      	sub	sp, #12
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	681b      	ldr	r3, [r3, #0]
}
     de4:	4618      	mov	r0, r3
     de6:	370c      	adds	r7, #12
     de8:	46bd      	mov	sp, r7
     dea:	f85d 7b04 	ldr.w	r7, [sp], #4
     dee:	4770      	bx	lr

00000df0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     df0:	b480      	push	{r7}
     df2:	b083      	sub	sp, #12
     df4:	af00      	add	r7, sp, #0
     df6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d002      	beq.n	e04 <list_get_next_element+0x14>
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	e000      	b.n	e06 <list_get_next_element+0x16>
     e04:	2300      	movs	r3, #0
}
     e06:	4618      	mov	r0, r3
     e08:	370c      	adds	r7, #12
     e0a:	46bd      	mov	sp, r7
     e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e10:	4770      	bx	lr
	...

00000e14 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     e14:	b580      	push	{r7, lr}
     e16:	b084      	sub	sp, #16
     e18:	af00      	add	r7, sp, #0
     e1a:	60f8      	str	r0, [r7, #12]
     e1c:	60b9      	str	r1, [r7, #8]
     e1e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	2b00      	cmp	r3, #0
     e24:	d004      	beq.n	e30 <timer_init+0x1c>
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	2b00      	cmp	r3, #0
     e2a:	d001      	beq.n	e30 <timer_init+0x1c>
     e2c:	2301      	movs	r3, #1
     e2e:	e000      	b.n	e32 <timer_init+0x1e>
     e30:	2300      	movs	r3, #0
     e32:	f003 0301 	and.w	r3, r3, #1
     e36:	b2db      	uxtb	r3, r3
     e38:	223b      	movs	r2, #59	; 0x3b
     e3a:	490a      	ldr	r1, [pc, #40]	; (e64 <timer_init+0x50>)
     e3c:	4618      	mov	r0, r3
     e3e:	4b0a      	ldr	r3, [pc, #40]	; (e68 <timer_init+0x54>)
     e40:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     e42:	68fb      	ldr	r3, [r7, #12]
     e44:	68b9      	ldr	r1, [r7, #8]
     e46:	4618      	mov	r0, r3
     e48:	4b08      	ldr	r3, [pc, #32]	; (e6c <timer_init+0x58>)
     e4a:	4798      	blx	r3
	descr->time                           = 0;
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	2200      	movs	r2, #0
     e50:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     e52:	68fb      	ldr	r3, [r7, #12]
     e54:	4a06      	ldr	r2, [pc, #24]	; (e70 <timer_init+0x5c>)
     e56:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     e58:	2300      	movs	r3, #0
}
     e5a:	4618      	mov	r0, r3
     e5c:	3710      	adds	r7, #16
     e5e:	46bd      	mov	sp, r7
     e60:	bd80      	pop	{r7, pc}
     e62:	bf00      	nop
     e64:	000034fc 	.word	0x000034fc
     e68:	000013d9 	.word	0x000013d9
     e6c:	000023dd 	.word	0x000023dd
     e70:	000010cd 	.word	0x000010cd

00000e74 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
     e74:	b580      	push	{r7, lr}
     e76:	b082      	sub	sp, #8
     e78:	af00      	add	r7, sp, #0
     e7a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	2b00      	cmp	r3, #0
     e80:	bf14      	ite	ne
     e82:	2301      	movne	r3, #1
     e84:	2300      	moveq	r3, #0
     e86:	b2db      	uxtb	r3, r3
     e88:	2253      	movs	r2, #83	; 0x53
     e8a:	490b      	ldr	r1, [pc, #44]	; (eb8 <timer_start+0x44>)
     e8c:	4618      	mov	r0, r3
     e8e:	4b0b      	ldr	r3, [pc, #44]	; (ebc <timer_start+0x48>)
     e90:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	4618      	mov	r0, r3
     e96:	4b0a      	ldr	r3, [pc, #40]	; (ec0 <timer_start+0x4c>)
     e98:	4798      	blx	r3
     e9a:	4603      	mov	r3, r0
     e9c:	2b00      	cmp	r3, #0
     e9e:	d002      	beq.n	ea6 <timer_start+0x32>
		return ERR_DENIED;
     ea0:	f06f 0310 	mvn.w	r3, #16
     ea4:	e004      	b.n	eb0 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	4618      	mov	r0, r3
     eaa:	4b06      	ldr	r3, [pc, #24]	; (ec4 <timer_start+0x50>)
     eac:	4798      	blx	r3

	return ERR_NONE;
     eae:	2300      	movs	r3, #0
}
     eb0:	4618      	mov	r0, r3
     eb2:	3708      	adds	r7, #8
     eb4:	46bd      	mov	sp, r7
     eb6:	bd80      	pop	{r7, pc}
     eb8:	000034fc 	.word	0x000034fc
     ebc:	000013d9 	.word	0x000013d9
     ec0:	000026cd 	.word	0x000026cd
     ec4:	0000268d 	.word	0x0000268d

00000ec8 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
     ec8:	b580      	push	{r7, lr}
     eca:	b082      	sub	sp, #8
     ecc:	af00      	add	r7, sp, #0
     ece:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     ed0:	687b      	ldr	r3, [r7, #4]
     ed2:	2b00      	cmp	r3, #0
     ed4:	bf14      	ite	ne
     ed6:	2301      	movne	r3, #1
     ed8:	2300      	moveq	r3, #0
     eda:	b2db      	uxtb	r3, r3
     edc:	2261      	movs	r2, #97	; 0x61
     ede:	490d      	ldr	r1, [pc, #52]	; (f14 <timer_stop+0x4c>)
     ee0:	4618      	mov	r0, r3
     ee2:	4b0d      	ldr	r3, [pc, #52]	; (f18 <timer_stop+0x50>)
     ee4:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	4618      	mov	r0, r3
     eea:	4b0c      	ldr	r3, [pc, #48]	; (f1c <timer_stop+0x54>)
     eec:	4798      	blx	r3
     eee:	4603      	mov	r3, r0
     ef0:	f083 0301 	eor.w	r3, r3, #1
     ef4:	b2db      	uxtb	r3, r3
     ef6:	2b00      	cmp	r3, #0
     ef8:	d002      	beq.n	f00 <timer_stop+0x38>
		return ERR_DENIED;
     efa:	f06f 0310 	mvn.w	r3, #16
     efe:	e004      	b.n	f0a <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	4618      	mov	r0, r3
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <timer_stop+0x58>)
     f06:	4798      	blx	r3

	return ERR_NONE;
     f08:	2300      	movs	r3, #0
}
     f0a:	4618      	mov	r0, r3
     f0c:	3708      	adds	r7, #8
     f0e:	46bd      	mov	sp, r7
     f10:	bd80      	pop	{r7, pc}
     f12:	bf00      	nop
     f14:	000034fc 	.word	0x000034fc
     f18:	000013d9 	.word	0x000013d9
     f1c:	000026cd 	.word	0x000026cd
     f20:	000026ad 	.word	0x000026ad

00000f24 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
     f24:	b580      	push	{r7, lr}
     f26:	b084      	sub	sp, #16
     f28:	af00      	add	r7, sp, #0
     f2a:	6078      	str	r0, [r7, #4]
     f2c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
     f2e:	687b      	ldr	r3, [r7, #4]
     f30:	2b00      	cmp	r3, #0
     f32:	d004      	beq.n	f3e <timer_add_task+0x1a>
     f34:	683b      	ldr	r3, [r7, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	d001      	beq.n	f3e <timer_add_task+0x1a>
     f3a:	2301      	movs	r3, #1
     f3c:	e000      	b.n	f40 <timer_add_task+0x1c>
     f3e:	2300      	movs	r3, #0
     f40:	f003 0301 	and.w	r3, r3, #1
     f44:	b2db      	uxtb	r3, r3
     f46:	227a      	movs	r2, #122	; 0x7a
     f48:	492d      	ldr	r1, [pc, #180]	; (1000 <timer_add_task+0xdc>)
     f4a:	4618      	mov	r0, r3
     f4c:	4b2d      	ldr	r3, [pc, #180]	; (1004 <timer_add_task+0xe0>)
     f4e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	7e1b      	ldrb	r3, [r3, #24]
     f54:	b2db      	uxtb	r3, r3
     f56:	f043 0301 	orr.w	r3, r3, #1
     f5a:	b2da      	uxtb	r2, r3
     f5c:	687b      	ldr	r3, [r7, #4]
     f5e:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	3314      	adds	r3, #20
     f64:	6839      	ldr	r1, [r7, #0]
     f66:	4618      	mov	r0, r3
     f68:	4b27      	ldr	r3, [pc, #156]	; (1008 <timer_add_task+0xe4>)
     f6a:	4798      	blx	r3
     f6c:	4603      	mov	r3, r0
     f6e:	2b00      	cmp	r3, #0
     f70:	d00f      	beq.n	f92 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	7e1b      	ldrb	r3, [r3, #24]
     f76:	b2db      	uxtb	r3, r3
     f78:	f023 0301 	bic.w	r3, r3, #1
     f7c:	b2da      	uxtb	r2, r3
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
     f82:	227f      	movs	r2, #127	; 0x7f
     f84:	491e      	ldr	r1, [pc, #120]	; (1000 <timer_add_task+0xdc>)
     f86:	2000      	movs	r0, #0
     f88:	4b1e      	ldr	r3, [pc, #120]	; (1004 <timer_add_task+0xe0>)
     f8a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     f8c:	f06f 0311 	mvn.w	r3, #17
     f90:	e032      	b.n	ff8 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	691a      	ldr	r2, [r3, #16]
     f96:	683b      	ldr	r3, [r7, #0]
     f98:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     f9a:	687b      	ldr	r3, [r7, #4]
     f9c:	f103 0014 	add.w	r0, r3, #20
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	691b      	ldr	r3, [r3, #16]
     fa4:	461a      	mov	r2, r3
     fa6:	6839      	ldr	r1, [r7, #0]
     fa8:	4b18      	ldr	r3, [pc, #96]	; (100c <timer_add_task+0xe8>)
     faa:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	7e1b      	ldrb	r3, [r3, #24]
     fb0:	b2db      	uxtb	r3, r3
     fb2:	f023 0301 	bic.w	r3, r3, #1
     fb6:	b2da      	uxtb	r2, r3
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	7e1b      	ldrb	r3, [r3, #24]
     fc0:	b2db      	uxtb	r3, r3
     fc2:	f003 0302 	and.w	r3, r3, #2
     fc6:	2b00      	cmp	r3, #0
     fc8:	d015      	beq.n	ff6 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
     fca:	f107 030c 	add.w	r3, r7, #12
     fce:	4618      	mov	r0, r3
     fd0:	4b0f      	ldr	r3, [pc, #60]	; (1010 <timer_add_task+0xec>)
     fd2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	7e1b      	ldrb	r3, [r3, #24]
     fd8:	b2db      	uxtb	r3, r3
     fda:	f023 0302 	bic.w	r3, r3, #2
     fde:	b2da      	uxtb	r2, r3
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	4618      	mov	r0, r3
     fe8:	4b0a      	ldr	r3, [pc, #40]	; (1014 <timer_add_task+0xf0>)
     fea:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     fec:	f107 030c 	add.w	r3, r7, #12
     ff0:	4618      	mov	r0, r3
     ff2:	4b09      	ldr	r3, [pc, #36]	; (1018 <timer_add_task+0xf4>)
     ff4:	4798      	blx	r3
	}

	return ERR_NONE;
     ff6:	2300      	movs	r3, #0
}
     ff8:	4618      	mov	r0, r3
     ffa:	3710      	adds	r7, #16
     ffc:	46bd      	mov	sp, r7
     ffe:	bd80      	pop	{r7, pc}
    1000:	000034fc 	.word	0x000034fc
    1004:	000013d9 	.word	0x000013d9
    1008:	00001401 	.word	0x00001401
    100c:	0000101d 	.word	0x0000101d
    1010:	00000d15 	.word	0x00000d15
    1014:	000026fd 	.word	0x000026fd
    1018:	00000d3b 	.word	0x00000d3b

0000101c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    101c:	b580      	push	{r7, lr}
    101e:	b088      	sub	sp, #32
    1020:	af00      	add	r7, sp, #0
    1022:	60f8      	str	r0, [r7, #12]
    1024:	60b9      	str	r1, [r7, #8]
    1026:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1028:	2300      	movs	r3, #0
    102a:	61bb      	str	r3, [r7, #24]
    102c:	68f8      	ldr	r0, [r7, #12]
    102e:	4b23      	ldr	r3, [pc, #140]	; (10bc <timer_add_timer_task+0xa0>)
    1030:	4798      	blx	r3
    1032:	6138      	str	r0, [r7, #16]

	if (!head) {
    1034:	693b      	ldr	r3, [r7, #16]
    1036:	2b00      	cmp	r3, #0
    1038:	d104      	bne.n	1044 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    103a:	68b9      	ldr	r1, [r7, #8]
    103c:	68f8      	ldr	r0, [r7, #12]
    103e:	4b20      	ldr	r3, [pc, #128]	; (10c0 <timer_add_timer_task+0xa4>)
    1040:	4798      	blx	r3
		return;
    1042:	e037      	b.n	10b4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	61fb      	str	r3, [r7, #28]
    1048:	e022      	b.n	1090 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    104a:	69fb      	ldr	r3, [r7, #28]
    104c:	685a      	ldr	r2, [r3, #4]
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	429a      	cmp	r2, r3
    1052:	d808      	bhi.n	1066 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    1054:	69fb      	ldr	r3, [r7, #28]
    1056:	689a      	ldr	r2, [r3, #8]
    1058:	69fb      	ldr	r3, [r7, #28]
    105a:	6859      	ldr	r1, [r3, #4]
    105c:	687b      	ldr	r3, [r7, #4]
    105e:	1acb      	subs	r3, r1, r3
    1060:	4413      	add	r3, r2
    1062:	617b      	str	r3, [r7, #20]
    1064:	e009      	b.n	107a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1066:	69fb      	ldr	r3, [r7, #28]
    1068:	689a      	ldr	r2, [r3, #8]
    106a:	69fb      	ldr	r3, [r7, #28]
    106c:	685b      	ldr	r3, [r3, #4]
    106e:	441a      	add	r2, r3
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	425b      	negs	r3, r3
    1074:	4413      	add	r3, r2
    1076:	3301      	adds	r3, #1
    1078:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    107a:	68bb      	ldr	r3, [r7, #8]
    107c:	689a      	ldr	r2, [r3, #8]
    107e:	697b      	ldr	r3, [r7, #20]
    1080:	429a      	cmp	r2, r3
    1082:	d909      	bls.n	1098 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    1084:	69fb      	ldr	r3, [r7, #28]
    1086:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1088:	69f8      	ldr	r0, [r7, #28]
    108a:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <timer_add_timer_task+0xa8>)
    108c:	4798      	blx	r3
    108e:	61f8      	str	r0, [r7, #28]
    1090:	69fb      	ldr	r3, [r7, #28]
    1092:	2b00      	cmp	r3, #0
    1094:	d1d9      	bne.n	104a <timer_add_timer_task+0x2e>
    1096:	e000      	b.n	109a <timer_add_timer_task+0x7e>
			break;
    1098:	bf00      	nop
	}

	if (it == head) {
    109a:	69fa      	ldr	r2, [r7, #28]
    109c:	693b      	ldr	r3, [r7, #16]
    109e:	429a      	cmp	r2, r3
    10a0:	d104      	bne.n	10ac <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    10a2:	68b9      	ldr	r1, [r7, #8]
    10a4:	68f8      	ldr	r0, [r7, #12]
    10a6:	4b06      	ldr	r3, [pc, #24]	; (10c0 <timer_add_timer_task+0xa4>)
    10a8:	4798      	blx	r3
    10aa:	e003      	b.n	10b4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    10ac:	68b9      	ldr	r1, [r7, #8]
    10ae:	69b8      	ldr	r0, [r7, #24]
    10b0:	4b05      	ldr	r3, [pc, #20]	; (10c8 <timer_add_timer_task+0xac>)
    10b2:	4798      	blx	r3
	}
}
    10b4:	3720      	adds	r7, #32
    10b6:	46bd      	mov	sp, r7
    10b8:	bd80      	pop	{r7, pc}
    10ba:	bf00      	nop
    10bc:	00000dd9 	.word	0x00000dd9
    10c0:	00001439 	.word	0x00001439
    10c4:	00000df1 	.word	0x00000df1
    10c8:	00001491 	.word	0x00001491

000010cc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b086      	sub	sp, #24
    10d0:	af00      	add	r7, sp, #0
    10d2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    10d8:	693b      	ldr	r3, [r7, #16]
    10da:	3314      	adds	r3, #20
    10dc:	4618      	mov	r0, r3
    10de:	4b27      	ldr	r3, [pc, #156]	; (117c <timer_process_counted+0xb0>)
    10e0:	4798      	blx	r3
    10e2:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    10e4:	693b      	ldr	r3, [r7, #16]
    10e6:	691b      	ldr	r3, [r3, #16]
    10e8:	1c5a      	adds	r2, r3, #1
    10ea:	693b      	ldr	r3, [r7, #16]
    10ec:	611a      	str	r2, [r3, #16]
    10ee:	693b      	ldr	r3, [r7, #16]
    10f0:	691b      	ldr	r3, [r3, #16]
    10f2:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    10f4:	693b      	ldr	r3, [r7, #16]
    10f6:	7e1b      	ldrb	r3, [r3, #24]
    10f8:	b2db      	uxtb	r3, r3
    10fa:	f003 0301 	and.w	r3, r3, #1
    10fe:	2b00      	cmp	r3, #0
    1100:	d106      	bne.n	1110 <timer_process_counted+0x44>
    1102:	693b      	ldr	r3, [r7, #16]
    1104:	7e1b      	ldrb	r3, [r3, #24]
    1106:	b2db      	uxtb	r3, r3
    1108:	f003 0302 	and.w	r3, r3, #2
    110c:	2b00      	cmp	r3, #0
    110e:	d027      	beq.n	1160 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	7e1b      	ldrb	r3, [r3, #24]
    1114:	b2db      	uxtb	r3, r3
    1116:	f043 0302 	orr.w	r3, r3, #2
    111a:	b2da      	uxtb	r2, r3
    111c:	693b      	ldr	r3, [r7, #16]
    111e:	761a      	strb	r2, [r3, #24]
		return;
    1120:	e029      	b.n	1176 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1122:	697b      	ldr	r3, [r7, #20]
    1124:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1126:	693b      	ldr	r3, [r7, #16]
    1128:	3314      	adds	r3, #20
    112a:	4618      	mov	r0, r3
    112c:	4b14      	ldr	r3, [pc, #80]	; (1180 <timer_process_counted+0xb4>)
    112e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1130:	68bb      	ldr	r3, [r7, #8]
    1132:	7c1b      	ldrb	r3, [r3, #16]
    1134:	2b01      	cmp	r3, #1
    1136:	d109      	bne.n	114c <timer_process_counted+0x80>
			tmp->time_label = time;
    1138:	68bb      	ldr	r3, [r7, #8]
    113a:	68fa      	ldr	r2, [r7, #12]
    113c:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    113e:	693b      	ldr	r3, [r7, #16]
    1140:	3314      	adds	r3, #20
    1142:	68fa      	ldr	r2, [r7, #12]
    1144:	68b9      	ldr	r1, [r7, #8]
    1146:	4618      	mov	r0, r3
    1148:	4b0e      	ldr	r3, [pc, #56]	; (1184 <timer_process_counted+0xb8>)
    114a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    114c:	693b      	ldr	r3, [r7, #16]
    114e:	3314      	adds	r3, #20
    1150:	4618      	mov	r0, r3
    1152:	4b0a      	ldr	r3, [pc, #40]	; (117c <timer_process_counted+0xb0>)
    1154:	4798      	blx	r3
    1156:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    1158:	68bb      	ldr	r3, [r7, #8]
    115a:	68db      	ldr	r3, [r3, #12]
    115c:	68b8      	ldr	r0, [r7, #8]
    115e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1160:	697b      	ldr	r3, [r7, #20]
    1162:	2b00      	cmp	r3, #0
    1164:	d007      	beq.n	1176 <timer_process_counted+0xaa>
    1166:	697b      	ldr	r3, [r7, #20]
    1168:	685b      	ldr	r3, [r3, #4]
    116a:	68fa      	ldr	r2, [r7, #12]
    116c:	1ad2      	subs	r2, r2, r3
    116e:	697b      	ldr	r3, [r7, #20]
    1170:	689b      	ldr	r3, [r3, #8]
    1172:	429a      	cmp	r2, r3
    1174:	d2d5      	bcs.n	1122 <timer_process_counted+0x56>
	}
}
    1176:	3718      	adds	r7, #24
    1178:	46bd      	mov	sp, r7
    117a:	bd80      	pop	{r7, pc}
    117c:	00000dd9 	.word	0x00000dd9
    1180:	000014b5 	.word	0x000014b5
    1184:	0000101d 	.word	0x0000101d

00001188 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1188:	b580      	push	{r7, lr}
    118a:	b086      	sub	sp, #24
    118c:	af00      	add	r7, sp, #0
    118e:	60f8      	str	r0, [r7, #12]
    1190:	60b9      	str	r1, [r7, #8]
    1192:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1194:	68fb      	ldr	r3, [r7, #12]
    1196:	2b00      	cmp	r3, #0
    1198:	d004      	beq.n	11a4 <usart_sync_init+0x1c>
    119a:	68bb      	ldr	r3, [r7, #8]
    119c:	2b00      	cmp	r3, #0
    119e:	d001      	beq.n	11a4 <usart_sync_init+0x1c>
    11a0:	2301      	movs	r3, #1
    11a2:	e000      	b.n	11a6 <usart_sync_init+0x1e>
    11a4:	2300      	movs	r3, #0
    11a6:	f003 0301 	and.w	r3, r3, #1
    11aa:	b2db      	uxtb	r3, r3
    11ac:	2234      	movs	r2, #52	; 0x34
    11ae:	490d      	ldr	r1, [pc, #52]	; (11e4 <usart_sync_init+0x5c>)
    11b0:	4618      	mov	r0, r3
    11b2:	4b0d      	ldr	r3, [pc, #52]	; (11e8 <usart_sync_init+0x60>)
    11b4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    11b6:	68fb      	ldr	r3, [r7, #12]
    11b8:	3308      	adds	r3, #8
    11ba:	68b9      	ldr	r1, [r7, #8]
    11bc:	4618      	mov	r0, r3
    11be:	4b0b      	ldr	r3, [pc, #44]	; (11ec <usart_sync_init+0x64>)
    11c0:	4798      	blx	r3
    11c2:	6178      	str	r0, [r7, #20]
	if (init_status) {
    11c4:	697b      	ldr	r3, [r7, #20]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d001      	beq.n	11ce <usart_sync_init+0x46>
		return init_status;
    11ca:	697b      	ldr	r3, [r7, #20]
    11cc:	e006      	b.n	11dc <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
    11ce:	68fb      	ldr	r3, [r7, #12]
    11d0:	4a07      	ldr	r2, [pc, #28]	; (11f0 <usart_sync_init+0x68>)
    11d2:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    11d4:	68fb      	ldr	r3, [r7, #12]
    11d6:	4a07      	ldr	r2, [pc, #28]	; (11f4 <usart_sync_init+0x6c>)
    11d8:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    11da:	2300      	movs	r3, #0
}
    11dc:	4618      	mov	r0, r3
    11de:	3718      	adds	r7, #24
    11e0:	46bd      	mov	sp, r7
    11e2:	bd80      	pop	{r7, pc}
    11e4:	00003514 	.word	0x00003514
    11e8:	000013d9 	.word	0x000013d9
    11ec:	00001afd 	.word	0x00001afd
    11f0:	00001345 	.word	0x00001345
    11f4:	0000127d 	.word	0x0000127d

000011f8 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	af00      	add	r7, sp, #0
    11fe:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1200:	687b      	ldr	r3, [r7, #4]
    1202:	2b00      	cmp	r3, #0
    1204:	bf14      	ite	ne
    1206:	2301      	movne	r3, #1
    1208:	2300      	moveq	r3, #0
    120a:	b2db      	uxtb	r3, r3
    120c:	2253      	movs	r2, #83	; 0x53
    120e:	4907      	ldr	r1, [pc, #28]	; (122c <usart_sync_enable+0x34>)
    1210:	4618      	mov	r0, r3
    1212:	4b07      	ldr	r3, [pc, #28]	; (1230 <usart_sync_enable+0x38>)
    1214:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	3308      	adds	r3, #8
    121a:	4618      	mov	r0, r3
    121c:	4b05      	ldr	r3, [pc, #20]	; (1234 <usart_sync_enable+0x3c>)
    121e:	4798      	blx	r3

	return ERR_NONE;
    1220:	2300      	movs	r3, #0
}
    1222:	4618      	mov	r0, r3
    1224:	3708      	adds	r7, #8
    1226:	46bd      	mov	sp, r7
    1228:	bd80      	pop	{r7, pc}
    122a:	bf00      	nop
    122c:	00003514 	.word	0x00003514
    1230:	000013d9 	.word	0x000013d9
    1234:	00001b41 	.word	0x00001b41

00001238 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
    1240:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    1242:	687b      	ldr	r3, [r7, #4]
    1244:	2b00      	cmp	r3, #0
    1246:	d004      	beq.n	1252 <usart_sync_get_io_descriptor+0x1a>
    1248:	683b      	ldr	r3, [r7, #0]
    124a:	2b00      	cmp	r3, #0
    124c:	d001      	beq.n	1252 <usart_sync_get_io_descriptor+0x1a>
    124e:	2301      	movs	r3, #1
    1250:	e000      	b.n	1254 <usart_sync_get_io_descriptor+0x1c>
    1252:	2300      	movs	r3, #0
    1254:	f003 0301 	and.w	r3, r3, #1
    1258:	b2db      	uxtb	r3, r3
    125a:	2269      	movs	r2, #105	; 0x69
    125c:	4905      	ldr	r1, [pc, #20]	; (1274 <usart_sync_get_io_descriptor+0x3c>)
    125e:	4618      	mov	r0, r3
    1260:	4b05      	ldr	r3, [pc, #20]	; (1278 <usart_sync_get_io_descriptor+0x40>)
    1262:	4798      	blx	r3

	*io = &descr->io;
    1264:	687a      	ldr	r2, [r7, #4]
    1266:	683b      	ldr	r3, [r7, #0]
    1268:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    126a:	2300      	movs	r3, #0
}
    126c:	4618      	mov	r0, r3
    126e:	3708      	adds	r7, #8
    1270:	46bd      	mov	sp, r7
    1272:	bd80      	pop	{r7, pc}
    1274:	00003514 	.word	0x00003514
    1278:	000013d9 	.word	0x000013d9

0000127c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    127c:	b580      	push	{r7, lr}
    127e:	b086      	sub	sp, #24
    1280:	af00      	add	r7, sp, #0
    1282:	60f8      	str	r0, [r7, #12]
    1284:	60b9      	str	r1, [r7, #8]
    1286:	4613      	mov	r3, r2
    1288:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    128a:	2300      	movs	r3, #0
    128c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    128e:	68fb      	ldr	r3, [r7, #12]
    1290:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	2b00      	cmp	r3, #0
    1296:	d007      	beq.n	12a8 <usart_sync_write+0x2c>
    1298:	68bb      	ldr	r3, [r7, #8]
    129a:	2b00      	cmp	r3, #0
    129c:	d004      	beq.n	12a8 <usart_sync_write+0x2c>
    129e:	88fb      	ldrh	r3, [r7, #6]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d001      	beq.n	12a8 <usart_sync_write+0x2c>
    12a4:	2301      	movs	r3, #1
    12a6:	e000      	b.n	12aa <usart_sync_write+0x2e>
    12a8:	2300      	movs	r3, #0
    12aa:	f003 0301 	and.w	r3, r3, #1
    12ae:	b2db      	uxtb	r3, r3
    12b0:	22f1      	movs	r2, #241	; 0xf1
    12b2:	491f      	ldr	r1, [pc, #124]	; (1330 <usart_sync_write+0xb4>)
    12b4:	4618      	mov	r0, r3
    12b6:	4b1f      	ldr	r3, [pc, #124]	; (1334 <usart_sync_write+0xb8>)
    12b8:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    12ba:	bf00      	nop
    12bc:	693b      	ldr	r3, [r7, #16]
    12be:	3308      	adds	r3, #8
    12c0:	4618      	mov	r0, r3
    12c2:	4b1d      	ldr	r3, [pc, #116]	; (1338 <usart_sync_write+0xbc>)
    12c4:	4798      	blx	r3
    12c6:	4603      	mov	r3, r0
    12c8:	f083 0301 	eor.w	r3, r3, #1
    12cc:	b2db      	uxtb	r3, r3
    12ce:	2b00      	cmp	r3, #0
    12d0:	d1f4      	bne.n	12bc <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    12d2:	693b      	ldr	r3, [r7, #16]
    12d4:	f103 0008 	add.w	r0, r3, #8
    12d8:	68ba      	ldr	r2, [r7, #8]
    12da:	697b      	ldr	r3, [r7, #20]
    12dc:	4413      	add	r3, r2
    12de:	781b      	ldrb	r3, [r3, #0]
    12e0:	4619      	mov	r1, r3
    12e2:	4b16      	ldr	r3, [pc, #88]	; (133c <usart_sync_write+0xc0>)
    12e4:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    12e6:	bf00      	nop
    12e8:	693b      	ldr	r3, [r7, #16]
    12ea:	3308      	adds	r3, #8
    12ec:	4618      	mov	r0, r3
    12ee:	4b12      	ldr	r3, [pc, #72]	; (1338 <usart_sync_write+0xbc>)
    12f0:	4798      	blx	r3
    12f2:	4603      	mov	r3, r0
    12f4:	f083 0301 	eor.w	r3, r3, #1
    12f8:	b2db      	uxtb	r3, r3
    12fa:	2b00      	cmp	r3, #0
    12fc:	d1f4      	bne.n	12e8 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
    12fe:	697b      	ldr	r3, [r7, #20]
    1300:	3301      	adds	r3, #1
    1302:	617b      	str	r3, [r7, #20]
    1304:	88fb      	ldrh	r3, [r7, #6]
    1306:	697a      	ldr	r2, [r7, #20]
    1308:	429a      	cmp	r2, r3
    130a:	d3e2      	bcc.n	12d2 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
    130c:	bf00      	nop
    130e:	693b      	ldr	r3, [r7, #16]
    1310:	3308      	adds	r3, #8
    1312:	4618      	mov	r0, r3
    1314:	4b0a      	ldr	r3, [pc, #40]	; (1340 <usart_sync_write+0xc4>)
    1316:	4798      	blx	r3
    1318:	4603      	mov	r3, r0
    131a:	f083 0301 	eor.w	r3, r3, #1
    131e:	b2db      	uxtb	r3, r3
    1320:	2b00      	cmp	r3, #0
    1322:	d1f4      	bne.n	130e <usart_sync_write+0x92>
		;
	return (int32_t)offset;
    1324:	697b      	ldr	r3, [r7, #20]
}
    1326:	4618      	mov	r0, r3
    1328:	3718      	adds	r7, #24
    132a:	46bd      	mov	sp, r7
    132c:	bd80      	pop	{r7, pc}
    132e:	bf00      	nop
    1330:	00003514 	.word	0x00003514
    1334:	000013d9 	.word	0x000013d9
    1338:	00001bad 	.word	0x00001bad
    133c:	00001b61 	.word	0x00001b61
    1340:	00001bcd 	.word	0x00001bcd

00001344 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1344:	b590      	push	{r4, r7, lr}
    1346:	b087      	sub	sp, #28
    1348:	af00      	add	r7, sp, #0
    134a:	60f8      	str	r0, [r7, #12]
    134c:	60b9      	str	r1, [r7, #8]
    134e:	4613      	mov	r3, r2
    1350:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    1352:	2300      	movs	r3, #0
    1354:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1356:	68fb      	ldr	r3, [r7, #12]
    1358:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    135a:	68fb      	ldr	r3, [r7, #12]
    135c:	2b00      	cmp	r3, #0
    135e:	d007      	beq.n	1370 <usart_sync_read+0x2c>
    1360:	68bb      	ldr	r3, [r7, #8]
    1362:	2b00      	cmp	r3, #0
    1364:	d004      	beq.n	1370 <usart_sync_read+0x2c>
    1366:	88fb      	ldrh	r3, [r7, #6]
    1368:	2b00      	cmp	r3, #0
    136a:	d001      	beq.n	1370 <usart_sync_read+0x2c>
    136c:	2301      	movs	r3, #1
    136e:	e000      	b.n	1372 <usart_sync_read+0x2e>
    1370:	2300      	movs	r3, #0
    1372:	f003 0301 	and.w	r3, r3, #1
    1376:	b2db      	uxtb	r3, r3
    1378:	f44f 7286 	mov.w	r2, #268	; 0x10c
    137c:	4912      	ldr	r1, [pc, #72]	; (13c8 <usart_sync_read+0x84>)
    137e:	4618      	mov	r0, r3
    1380:	4b12      	ldr	r3, [pc, #72]	; (13cc <usart_sync_read+0x88>)
    1382:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1384:	bf00      	nop
    1386:	693b      	ldr	r3, [r7, #16]
    1388:	3308      	adds	r3, #8
    138a:	4618      	mov	r0, r3
    138c:	4b10      	ldr	r3, [pc, #64]	; (13d0 <usart_sync_read+0x8c>)
    138e:	4798      	blx	r3
    1390:	4603      	mov	r3, r0
    1392:	f083 0301 	eor.w	r3, r3, #1
    1396:	b2db      	uxtb	r3, r3
    1398:	2b00      	cmp	r3, #0
    139a:	d1f4      	bne.n	1386 <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    139c:	68ba      	ldr	r2, [r7, #8]
    139e:	697b      	ldr	r3, [r7, #20]
    13a0:	18d4      	adds	r4, r2, r3
    13a2:	693b      	ldr	r3, [r7, #16]
    13a4:	3308      	adds	r3, #8
    13a6:	4618      	mov	r0, r3
    13a8:	4b0a      	ldr	r3, [pc, #40]	; (13d4 <usart_sync_read+0x90>)
    13aa:	4798      	blx	r3
    13ac:	4603      	mov	r3, r0
    13ae:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    13b0:	697b      	ldr	r3, [r7, #20]
    13b2:	3301      	adds	r3, #1
    13b4:	617b      	str	r3, [r7, #20]
    13b6:	88fb      	ldrh	r3, [r7, #6]
    13b8:	697a      	ldr	r2, [r7, #20]
    13ba:	429a      	cmp	r2, r3
    13bc:	d3e2      	bcc.n	1384 <usart_sync_read+0x40>

	return (int32_t)offset;
    13be:	697b      	ldr	r3, [r7, #20]
}
    13c0:	4618      	mov	r0, r3
    13c2:	371c      	adds	r7, #28
    13c4:	46bd      	mov	sp, r7
    13c6:	bd90      	pop	{r4, r7, pc}
    13c8:	00003514 	.word	0x00003514
    13cc:	000013d9 	.word	0x000013d9
    13d0:	00001bed 	.word	0x00001bed
    13d4:	00001b89 	.word	0x00001b89

000013d8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    13d8:	b480      	push	{r7}
    13da:	b085      	sub	sp, #20
    13dc:	af00      	add	r7, sp, #0
    13de:	4603      	mov	r3, r0
    13e0:	60b9      	str	r1, [r7, #8]
    13e2:	607a      	str	r2, [r7, #4]
    13e4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    13e6:	7bfb      	ldrb	r3, [r7, #15]
    13e8:	f083 0301 	eor.w	r3, r3, #1
    13ec:	b2db      	uxtb	r3, r3
    13ee:	2b00      	cmp	r3, #0
    13f0:	d000      	beq.n	13f4 <assert+0x1c>
		__asm("BKPT #0");
    13f2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13f4:	bf00      	nop
    13f6:	3714      	adds	r7, #20
    13f8:	46bd      	mov	sp, r7
    13fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    13fe:	4770      	bx	lr

00001400 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1400:	b480      	push	{r7}
    1402:	b085      	sub	sp, #20
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
    1408:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	60fb      	str	r3, [r7, #12]
    1410:	e008      	b.n	1424 <is_list_element+0x24>
		if (it == element) {
    1412:	68fa      	ldr	r2, [r7, #12]
    1414:	683b      	ldr	r3, [r7, #0]
    1416:	429a      	cmp	r2, r3
    1418:	d101      	bne.n	141e <is_list_element+0x1e>
			return true;
    141a:	2301      	movs	r3, #1
    141c:	e006      	b.n	142c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    141e:	68fb      	ldr	r3, [r7, #12]
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	60fb      	str	r3, [r7, #12]
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	2b00      	cmp	r3, #0
    1428:	d1f3      	bne.n	1412 <is_list_element+0x12>
		}
	}

	return false;
    142a:	2300      	movs	r3, #0
}
    142c:	4618      	mov	r0, r3
    142e:	3714      	adds	r7, #20
    1430:	46bd      	mov	sp, r7
    1432:	f85d 7b04 	ldr.w	r7, [sp], #4
    1436:	4770      	bx	lr

00001438 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1438:	b580      	push	{r7, lr}
    143a:	b082      	sub	sp, #8
    143c:	af00      	add	r7, sp, #0
    143e:	6078      	str	r0, [r7, #4]
    1440:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1442:	6839      	ldr	r1, [r7, #0]
    1444:	6878      	ldr	r0, [r7, #4]
    1446:	4b0f      	ldr	r3, [pc, #60]	; (1484 <list_insert_as_head+0x4c>)
    1448:	4798      	blx	r3
    144a:	4603      	mov	r3, r0
    144c:	2b00      	cmp	r3, #0
    144e:	bf14      	ite	ne
    1450:	2301      	movne	r3, #1
    1452:	2300      	moveq	r3, #0
    1454:	b2db      	uxtb	r3, r3
    1456:	f083 0301 	eor.w	r3, r3, #1
    145a:	b2db      	uxtb	r3, r3
    145c:	f003 0301 	and.w	r3, r3, #1
    1460:	b2db      	uxtb	r3, r3
    1462:	2239      	movs	r2, #57	; 0x39
    1464:	4908      	ldr	r1, [pc, #32]	; (1488 <list_insert_as_head+0x50>)
    1466:	4618      	mov	r0, r3
    1468:	4b08      	ldr	r3, [pc, #32]	; (148c <list_insert_as_head+0x54>)
    146a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	681a      	ldr	r2, [r3, #0]
    1470:	683b      	ldr	r3, [r7, #0]
    1472:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	683a      	ldr	r2, [r7, #0]
    1478:	601a      	str	r2, [r3, #0]
}
    147a:	bf00      	nop
    147c:	3708      	adds	r7, #8
    147e:	46bd      	mov	sp, r7
    1480:	bd80      	pop	{r7, pc}
    1482:	bf00      	nop
    1484:	00001401 	.word	0x00001401
    1488:	00003530 	.word	0x00003530
    148c:	000013d9 	.word	0x000013d9

00001490 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1490:	b480      	push	{r7}
    1492:	b083      	sub	sp, #12
    1494:	af00      	add	r7, sp, #0
    1496:	6078      	str	r0, [r7, #4]
    1498:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	681a      	ldr	r2, [r3, #0]
    149e:	683b      	ldr	r3, [r7, #0]
    14a0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	683a      	ldr	r2, [r7, #0]
    14a6:	601a      	str	r2, [r3, #0]
}
    14a8:	bf00      	nop
    14aa:	370c      	adds	r7, #12
    14ac:	46bd      	mov	sp, r7
    14ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b2:	4770      	bx	lr

000014b4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    14b4:	b480      	push	{r7}
    14b6:	b085      	sub	sp, #20
    14b8:	af00      	add	r7, sp, #0
    14ba:	6078      	str	r0, [r7, #4]
	if (list->head) {
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d009      	beq.n	14d8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	681a      	ldr	r2, [r3, #0]
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    14d4:	68fb      	ldr	r3, [r7, #12]
    14d6:	e000      	b.n	14da <list_remove_head+0x26>
	}

	return NULL;
    14d8:	2300      	movs	r3, #0
}
    14da:	4618      	mov	r0, r3
    14dc:	3714      	adds	r7, #20
    14de:	46bd      	mov	sp, r7
    14e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    14e4:	4770      	bx	lr
	...

000014e8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    14e8:	b480      	push	{r7}
    14ea:	b085      	sub	sp, #20
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    14f0:	4b0b      	ldr	r3, [pc, #44]	; (1520 <_sbrk+0x38>)
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d102      	bne.n	14fe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    14f8:	4b09      	ldr	r3, [pc, #36]	; (1520 <_sbrk+0x38>)
    14fa:	4a0a      	ldr	r2, [pc, #40]	; (1524 <_sbrk+0x3c>)
    14fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    14fe:	4b08      	ldr	r3, [pc, #32]	; (1520 <_sbrk+0x38>)
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	60fb      	str	r3, [r7, #12]

	heap += incr;
    1504:	4b06      	ldr	r3, [pc, #24]	; (1520 <_sbrk+0x38>)
    1506:	681a      	ldr	r2, [r3, #0]
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	4413      	add	r3, r2
    150c:	4a04      	ldr	r2, [pc, #16]	; (1520 <_sbrk+0x38>)
    150e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
    1510:	68fb      	ldr	r3, [r7, #12]
}
    1512:	4618      	mov	r0, r3
    1514:	3714      	adds	r7, #20
    1516:	46bd      	mov	sp, r7
    1518:	f85d 7b04 	ldr.w	r7, [sp], #4
    151c:	4770      	bx	lr
    151e:	bf00      	nop
    1520:	200000d0 	.word	0x200000d0
    1524:	20010168 	.word	0x20010168

00001528 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
    1528:	b480      	push	{r7}
    152a:	b083      	sub	sp, #12
    152c:	af00      	add	r7, sp, #0
    152e:	4603      	mov	r3, r0
    1530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1536:	2b00      	cmp	r3, #0
    1538:	db0c      	blt.n	1554 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    153a:	4909      	ldr	r1, [pc, #36]	; (1560 <__NVIC_SetPendingIRQ+0x38>)
    153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1540:	095b      	lsrs	r3, r3, #5
    1542:	88fa      	ldrh	r2, [r7, #6]
    1544:	f002 021f 	and.w	r2, r2, #31
    1548:	2001      	movs	r0, #1
    154a:	fa00 f202 	lsl.w	r2, r0, r2
    154e:	3340      	adds	r3, #64	; 0x40
    1550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1554:	bf00      	nop
    1556:	370c      	adds	r7, #12
    1558:	46bd      	mov	sp, r7
    155a:	f85d 7b04 	ldr.w	r7, [sp], #4
    155e:	4770      	bx	lr
    1560:	e000e100 	.word	0xe000e100

00001564 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    1564:	b580      	push	{r7, lr}
    1566:	b082      	sub	sp, #8
    1568:	af00      	add	r7, sp, #0
    156a:	4603      	mov	r3, r0
    156c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    156e:	79fb      	ldrb	r3, [r7, #7]
    1570:	b21b      	sxth	r3, r3
    1572:	4618      	mov	r0, r3
    1574:	4b02      	ldr	r3, [pc, #8]	; (1580 <_irq_set+0x1c>)
    1576:	4798      	blx	r3
}
    1578:	bf00      	nop
    157a:	3708      	adds	r7, #8
    157c:	46bd      	mov	sp, r7
    157e:	bd80      	pop	{r7, pc}
    1580:	00001529 	.word	0x00001529

00001584 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1584:	b480      	push	{r7}
    1586:	b083      	sub	sp, #12
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	460b      	mov	r3, r1
    158e:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	881b      	ldrh	r3, [r3, #0]
    1594:	b29a      	uxth	r2, r3
    1596:	887b      	ldrh	r3, [r7, #2]
    1598:	021b      	lsls	r3, r3, #8
    159a:	b29b      	uxth	r3, r3
    159c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    15a0:	b29b      	uxth	r3, r3
    15a2:	4313      	orrs	r3, r2
    15a4:	b29a      	uxth	r2, r3
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    15aa:	bf00      	nop
    15ac:	370c      	adds	r7, #12
    15ae:	46bd      	mov	sp, r7
    15b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    15b4:	4770      	bx	lr
	...

000015b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    15bc:	2100      	movs	r1, #0
    15be:	4808      	ldr	r0, [pc, #32]	; (15e0 <_init_chip+0x28>)
    15c0:	4b08      	ldr	r3, [pc, #32]	; (15e4 <_init_chip+0x2c>)
    15c2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    15c4:	4b08      	ldr	r3, [pc, #32]	; (15e8 <_init_chip+0x30>)
    15c6:	4798      	blx	r3
	_oscctrl_init_sources();
    15c8:	4b08      	ldr	r3, [pc, #32]	; (15ec <_init_chip+0x34>)
    15ca:	4798      	blx	r3
	_mclk_init();
    15cc:	4b08      	ldr	r3, [pc, #32]	; (15f0 <_init_chip+0x38>)
    15ce:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    15d0:	4b08      	ldr	r3, [pc, #32]	; (15f4 <_init_chip+0x3c>)
    15d2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    15d4:	f640 70ff 	movw	r0, #4095	; 0xfff
    15d8:	4b07      	ldr	r3, [pc, #28]	; (15f8 <_init_chip+0x40>)
    15da:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    15dc:	bf00      	nop
    15de:	bd80      	pop	{r7, pc}
    15e0:	41004000 	.word	0x41004000
    15e4:	00001585 	.word	0x00001585
    15e8:	00001725 	.word	0x00001725
    15ec:	000017bd 	.word	0x000017bd
    15f0:	000016a1 	.word	0x000016a1
    15f4:	000017fd 	.word	0x000017fd
    15f8:	00001651 	.word	0x00001651

000015fc <hri_gclk_wait_for_sync>:
{
    15fc:	b480      	push	{r7}
    15fe:	b083      	sub	sp, #12
    1600:	af00      	add	r7, sp, #0
    1602:	6078      	str	r0, [r7, #4]
    1604:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1606:	bf00      	nop
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	685a      	ldr	r2, [r3, #4]
    160c:	683b      	ldr	r3, [r7, #0]
    160e:	4013      	ands	r3, r2
    1610:	2b00      	cmp	r3, #0
    1612:	d1f9      	bne.n	1608 <hri_gclk_wait_for_sync+0xc>
}
    1614:	bf00      	nop
    1616:	370c      	adds	r7, #12
    1618:	46bd      	mov	sp, r7
    161a:	f85d 7b04 	ldr.w	r7, [sp], #4
    161e:	4770      	bx	lr

00001620 <hri_gclk_write_GENCTRL_reg>:
{
    1620:	b580      	push	{r7, lr}
    1622:	b084      	sub	sp, #16
    1624:	af00      	add	r7, sp, #0
    1626:	60f8      	str	r0, [r7, #12]
    1628:	460b      	mov	r3, r1
    162a:	607a      	str	r2, [r7, #4]
    162c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    162e:	7afa      	ldrb	r2, [r7, #11]
    1630:	68fb      	ldr	r3, [r7, #12]
    1632:	3208      	adds	r2, #8
    1634:	6879      	ldr	r1, [r7, #4]
    1636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    163a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    163e:	68f8      	ldr	r0, [r7, #12]
    1640:	4b02      	ldr	r3, [pc, #8]	; (164c <hri_gclk_write_GENCTRL_reg+0x2c>)
    1642:	4798      	blx	r3
}
    1644:	bf00      	nop
    1646:	3710      	adds	r7, #16
    1648:	46bd      	mov	sp, r7
    164a:	bd80      	pop	{r7, pc}
    164c:	000015fd 	.word	0x000015fd

00001650 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1650:	b580      	push	{r7, lr}
    1652:	b082      	sub	sp, #8
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	f003 0301 	and.w	r3, r3, #1
    165e:	2b00      	cmp	r3, #0
    1660:	d004      	beq.n	166c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1662:	4a04      	ldr	r2, [pc, #16]	; (1674 <_gclk_init_generators_by_fref+0x24>)
    1664:	2100      	movs	r1, #0
    1666:	4804      	ldr	r0, [pc, #16]	; (1678 <_gclk_init_generators_by_fref+0x28>)
    1668:	4b04      	ldr	r3, [pc, #16]	; (167c <_gclk_init_generators_by_fref+0x2c>)
    166a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    166c:	bf00      	nop
    166e:	3708      	adds	r7, #8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}
    1674:	00010101 	.word	0x00010101
    1678:	40001c00 	.word	0x40001c00
    167c:	00001621 	.word	0x00001621

00001680 <hri_mclk_write_CPUDIV_reg>:
{
    1680:	b480      	push	{r7}
    1682:	b083      	sub	sp, #12
    1684:	af00      	add	r7, sp, #0
    1686:	6078      	str	r0, [r7, #4]
    1688:	460b      	mov	r3, r1
    168a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	78fa      	ldrb	r2, [r7, #3]
    1690:	715a      	strb	r2, [r3, #5]
}
    1692:	bf00      	nop
    1694:	370c      	adds	r7, #12
    1696:	46bd      	mov	sp, r7
    1698:	f85d 7b04 	ldr.w	r7, [sp], #4
    169c:	4770      	bx	lr
	...

000016a0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	b082      	sub	sp, #8
    16a4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    16a6:	4b05      	ldr	r3, [pc, #20]	; (16bc <_mclk_init+0x1c>)
    16a8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    16aa:	2101      	movs	r1, #1
    16ac:	6878      	ldr	r0, [r7, #4]
    16ae:	4b04      	ldr	r3, [pc, #16]	; (16c0 <_mclk_init+0x20>)
    16b0:	4798      	blx	r3
}
    16b2:	bf00      	nop
    16b4:	3708      	adds	r7, #8
    16b6:	46bd      	mov	sp, r7
    16b8:	bd80      	pop	{r7, pc}
    16ba:	bf00      	nop
    16bc:	40000800 	.word	0x40000800
    16c0:	00001681 	.word	0x00001681

000016c4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    16c4:	b480      	push	{r7}
    16c6:	b083      	sub	sp, #12
    16c8:	af00      	add	r7, sp, #0
    16ca:	6078      	str	r0, [r7, #4]
    16cc:	460b      	mov	r3, r1
    16ce:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	78fa      	ldrb	r2, [r7, #3]
    16d4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    16d6:	bf00      	nop
    16d8:	370c      	adds	r7, #12
    16da:	46bd      	mov	sp, r7
    16dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    16e0:	4770      	bx	lr

000016e2 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    16e2:	b480      	push	{r7}
    16e4:	b085      	sub	sp, #20
    16e6:	af00      	add	r7, sp, #0
    16e8:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	69db      	ldr	r3, [r3, #28]
    16ee:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    16f0:	68fb      	ldr	r3, [r7, #12]
    16f2:	0a1b      	lsrs	r3, r3, #8
    16f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    16f8:	60fb      	str	r3, [r7, #12]
	return tmp;
    16fa:	68fb      	ldr	r3, [r7, #12]
}
    16fc:	4618      	mov	r0, r3
    16fe:	3714      	adds	r7, #20
    1700:	46bd      	mov	sp, r7
    1702:	f85d 7b04 	ldr.w	r7, [sp], #4
    1706:	4770      	bx	lr

00001708 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    1708:	b480      	push	{r7}
    170a:	b083      	sub	sp, #12
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    1710:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	683a      	ldr	r2, [r7, #0]
    1716:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1718:	bf00      	nop
    171a:	370c      	adds	r7, #12
    171c:	46bd      	mov	sp, r7
    171e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1722:	4770      	bx	lr

00001724 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    1724:	b580      	push	{r7, lr}
    1726:	b082      	sub	sp, #8
    1728:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    172a:	4b0c      	ldr	r3, [pc, #48]	; (175c <_osc32kctrl_init_sources+0x38>)
    172c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    172e:	2300      	movs	r3, #0
    1730:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    1732:	6878      	ldr	r0, [r7, #4]
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <_osc32kctrl_init_sources+0x3c>)
    1736:	4798      	blx	r3
    1738:	4603      	mov	r3, r0
    173a:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    173c:	887b      	ldrh	r3, [r7, #2]
    173e:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1740:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1744:	4619      	mov	r1, r3
    1746:	6878      	ldr	r0, [r7, #4]
    1748:	4b06      	ldr	r3, [pc, #24]	; (1764 <_osc32kctrl_init_sources+0x40>)
    174a:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    174c:	2101      	movs	r1, #1
    174e:	6878      	ldr	r0, [r7, #4]
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <_osc32kctrl_init_sources+0x44>)
    1752:	4798      	blx	r3
	(void)calib;
}
    1754:	bf00      	nop
    1756:	3708      	adds	r7, #8
    1758:	46bd      	mov	sp, r7
    175a:	bd80      	pop	{r7, pc}
    175c:	40001400 	.word	0x40001400
    1760:	000016e3 	.word	0x000016e3
    1764:	00001709 	.word	0x00001709
    1768:	000016c5 	.word	0x000016c5

0000176c <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    176c:	b480      	push	{r7}
    176e:	b083      	sub	sp, #12
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	691b      	ldr	r3, [r3, #16]
    1778:	085b      	lsrs	r3, r3, #1
    177a:	f003 0301 	and.w	r3, r3, #1
    177e:	2b00      	cmp	r3, #0
    1780:	bf14      	ite	ne
    1782:	2301      	movne	r3, #1
    1784:	2300      	moveq	r3, #0
    1786:	b2db      	uxtb	r3, r3
}
    1788:	4618      	mov	r0, r3
    178a:	370c      	adds	r7, #12
    178c:	46bd      	mov	sp, r7
    178e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1792:	4770      	bx	lr

00001794 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    1794:	b480      	push	{r7}
    1796:	b085      	sub	sp, #20
    1798:	af00      	add	r7, sp, #0
    179a:	60f8      	str	r0, [r7, #12]
    179c:	460b      	mov	r3, r1
    179e:	607a      	str	r2, [r7, #4]
    17a0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    17a2:	7afb      	ldrb	r3, [r7, #11]
    17a4:	68fa      	ldr	r2, [r7, #12]
    17a6:	3304      	adds	r3, #4
    17a8:	009b      	lsls	r3, r3, #2
    17aa:	4413      	add	r3, r2
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    17b0:	bf00      	nop
    17b2:	3714      	adds	r7, #20
    17b4:	46bd      	mov	sp, r7
    17b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ba:	4770      	bx	lr

000017bc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    17bc:	b580      	push	{r7, lr}
    17be:	b082      	sub	sp, #8
    17c0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    17c2:	4b0a      	ldr	r3, [pc, #40]	; (17ec <_oscctrl_init_sources+0x30>)
    17c4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    17c6:	4a0a      	ldr	r2, [pc, #40]	; (17f0 <_oscctrl_init_sources+0x34>)
    17c8:	2101      	movs	r1, #1
    17ca:	6878      	ldr	r0, [r7, #4]
    17cc:	4b09      	ldr	r3, [pc, #36]	; (17f4 <_oscctrl_init_sources+0x38>)
    17ce:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    17d0:	bf00      	nop
    17d2:	6878      	ldr	r0, [r7, #4]
    17d4:	4b08      	ldr	r3, [pc, #32]	; (17f8 <_oscctrl_init_sources+0x3c>)
    17d6:	4798      	blx	r3
    17d8:	4603      	mov	r3, r0
    17da:	f083 0301 	eor.w	r3, r3, #1
    17de:	b2db      	uxtb	r3, r3
    17e0:	2b00      	cmp	r3, #0
    17e2:	d1f6      	bne.n	17d2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    17e4:	bf00      	nop
    17e6:	3708      	adds	r7, #8
    17e8:	46bd      	mov	sp, r7
    17ea:	bd80      	pop	{r7, pc}
    17ec:	40001000 	.word	0x40001000
    17f0:	03002606 	.word	0x03002606
    17f4:	00001795 	.word	0x00001795
    17f8:	0000176d 	.word	0x0000176d

000017fc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    17fc:	b480      	push	{r7}
    17fe:	b083      	sub	sp, #12
    1800:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1802:	4b04      	ldr	r3, [pc, #16]	; (1814 <_oscctrl_init_referenced_generators+0x18>)
    1804:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    1806:	bf00      	nop
    1808:	370c      	adds	r7, #12
    180a:	46bd      	mov	sp, r7
    180c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1810:	4770      	bx	lr
    1812:	bf00      	nop
    1814:	40001000 	.word	0x40001000

00001818 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    1818:	b480      	push	{r7}
    181a:	b083      	sub	sp, #12
    181c:	af00      	add	r7, sp, #0
    181e:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	789b      	ldrb	r3, [r3, #2]
    1824:	b2db      	uxtb	r3, r3
}
    1826:	4618      	mov	r0, r3
    1828:	370c      	adds	r7, #12
    182a:	46bd      	mov	sp, r7
    182c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1830:	4770      	bx	lr

00001832 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    1832:	b480      	push	{r7}
    1834:	b083      	sub	sp, #12
    1836:	af00      	add	r7, sp, #0
    1838:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	685b      	ldr	r3, [r3, #4]
}
    183e:	4618      	mov	r0, r3
    1840:	370c      	adds	r7, #12
    1842:	46bd      	mov	sp, r7
    1844:	f85d 7b04 	ldr.w	r7, [sp], #4
    1848:	4770      	bx	lr
	...

0000184c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    184c:	b590      	push	{r4, r7, lr}
    184e:	b083      	sub	sp, #12
    1850:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    1852:	4b17      	ldr	r3, [pc, #92]	; (18b0 <RAMECC_Handler+0x64>)
    1854:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1856:	4817      	ldr	r0, [pc, #92]	; (18b4 <RAMECC_Handler+0x68>)
    1858:	4b17      	ldr	r3, [pc, #92]	; (18b8 <RAMECC_Handler+0x6c>)
    185a:	4798      	blx	r3
    185c:	4603      	mov	r3, r0
    185e:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1860:	683b      	ldr	r3, [r7, #0]
    1862:	f003 0302 	and.w	r3, r3, #2
    1866:	2b00      	cmp	r3, #0
    1868:	d00c      	beq.n	1884 <RAMECC_Handler+0x38>
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	681b      	ldr	r3, [r3, #0]
    186e:	2b00      	cmp	r3, #0
    1870:	d008      	beq.n	1884 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	681c      	ldr	r4, [r3, #0]
    1876:	480f      	ldr	r0, [pc, #60]	; (18b4 <RAMECC_Handler+0x68>)
    1878:	4b10      	ldr	r3, [pc, #64]	; (18bc <RAMECC_Handler+0x70>)
    187a:	4798      	blx	r3
    187c:	4603      	mov	r3, r0
    187e:	4618      	mov	r0, r3
    1880:	47a0      	blx	r4
    1882:	e012      	b.n	18aa <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1884:	683b      	ldr	r3, [r7, #0]
    1886:	f003 0301 	and.w	r3, r3, #1
    188a:	2b00      	cmp	r3, #0
    188c:	d00c      	beq.n	18a8 <RAMECC_Handler+0x5c>
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	685b      	ldr	r3, [r3, #4]
    1892:	2b00      	cmp	r3, #0
    1894:	d008      	beq.n	18a8 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1896:	687b      	ldr	r3, [r7, #4]
    1898:	685c      	ldr	r4, [r3, #4]
    189a:	4806      	ldr	r0, [pc, #24]	; (18b4 <RAMECC_Handler+0x68>)
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <RAMECC_Handler+0x70>)
    189e:	4798      	blx	r3
    18a0:	4603      	mov	r3, r0
    18a2:	4618      	mov	r0, r3
    18a4:	47a0      	blx	r4
    18a6:	e000      	b.n	18aa <RAMECC_Handler+0x5e>
	} else {
		return;
    18a8:	bf00      	nop
	}
}
    18aa:	370c      	adds	r7, #12
    18ac:	46bd      	mov	sp, r7
    18ae:	bd90      	pop	{r4, r7, pc}
    18b0:	2000014c 	.word	0x2000014c
    18b4:	41020000 	.word	0x41020000
    18b8:	00001819 	.word	0x00001819
    18bc:	00001833 	.word	0x00001833

000018c0 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    18c0:	b480      	push	{r7}
    18c2:	b083      	sub	sp, #12
    18c4:	af00      	add	r7, sp, #0
    18c6:	6078      	str	r0, [r7, #4]
    18c8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    18ca:	bf00      	nop
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	69da      	ldr	r2, [r3, #28]
    18d0:	683b      	ldr	r3, [r7, #0]
    18d2:	4013      	ands	r3, r2
    18d4:	2b00      	cmp	r3, #0
    18d6:	d1f9      	bne.n	18cc <hri_sercomusart_wait_for_sync+0xc>
	};
}
    18d8:	bf00      	nop
    18da:	370c      	adds	r7, #12
    18dc:	46bd      	mov	sp, r7
    18de:	f85d 7b04 	ldr.w	r7, [sp], #4
    18e2:	4770      	bx	lr

000018e4 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    18e4:	b480      	push	{r7}
    18e6:	b083      	sub	sp, #12
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
    18ec:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	69da      	ldr	r2, [r3, #28]
    18f2:	683b      	ldr	r3, [r7, #0]
    18f4:	4013      	ands	r3, r2
    18f6:	2b00      	cmp	r3, #0
    18f8:	bf14      	ite	ne
    18fa:	2301      	movne	r3, #1
    18fc:	2300      	moveq	r3, #0
    18fe:	b2db      	uxtb	r3, r3
}
    1900:	4618      	mov	r0, r3
    1902:	370c      	adds	r7, #12
    1904:	46bd      	mov	sp, r7
    1906:	f85d 7b04 	ldr.w	r7, [sp], #4
    190a:	4770      	bx	lr

0000190c <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    190c:	b480      	push	{r7}
    190e:	b083      	sub	sp, #12
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	7e1b      	ldrb	r3, [r3, #24]
    1918:	b2db      	uxtb	r3, r3
    191a:	f003 0301 	and.w	r3, r3, #1
    191e:	2b00      	cmp	r3, #0
    1920:	bf14      	ite	ne
    1922:	2301      	movne	r3, #1
    1924:	2300      	moveq	r3, #0
    1926:	b2db      	uxtb	r3, r3
}
    1928:	4618      	mov	r0, r3
    192a:	370c      	adds	r7, #12
    192c:	46bd      	mov	sp, r7
    192e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1932:	4770      	bx	lr

00001934 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1934:	b480      	push	{r7}
    1936:	b083      	sub	sp, #12
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	7e1b      	ldrb	r3, [r3, #24]
    1940:	b2db      	uxtb	r3, r3
    1942:	085b      	lsrs	r3, r3, #1
    1944:	f003 0301 	and.w	r3, r3, #1
    1948:	2b00      	cmp	r3, #0
    194a:	bf14      	ite	ne
    194c:	2301      	movne	r3, #1
    194e:	2300      	moveq	r3, #0
    1950:	b2db      	uxtb	r3, r3
}
    1952:	4618      	mov	r0, r3
    1954:	370c      	adds	r7, #12
    1956:	46bd      	mov	sp, r7
    1958:	f85d 7b04 	ldr.w	r7, [sp], #4
    195c:	4770      	bx	lr

0000195e <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    195e:	b480      	push	{r7}
    1960:	b083      	sub	sp, #12
    1962:	af00      	add	r7, sp, #0
    1964:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	7e1b      	ldrb	r3, [r3, #24]
    196a:	b2db      	uxtb	r3, r3
    196c:	089b      	lsrs	r3, r3, #2
    196e:	f003 0301 	and.w	r3, r3, #1
    1972:	2b00      	cmp	r3, #0
    1974:	bf14      	ite	ne
    1976:	2301      	movne	r3, #1
    1978:	2300      	moveq	r3, #0
    197a:	b2db      	uxtb	r3, r3
}
    197c:	4618      	mov	r0, r3
    197e:	370c      	adds	r7, #12
    1980:	46bd      	mov	sp, r7
    1982:	f85d 7b04 	ldr.w	r7, [sp], #4
    1986:	4770      	bx	lr

00001988 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1988:	b580      	push	{r7, lr}
    198a:	b082      	sub	sp, #8
    198c:	af00      	add	r7, sp, #0
    198e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	f043 0202 	orr.w	r2, r3, #2
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    199c:	2103      	movs	r1, #3
    199e:	6878      	ldr	r0, [r7, #4]
    19a0:	4b02      	ldr	r3, [pc, #8]	; (19ac <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    19a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19a4:	bf00      	nop
    19a6:	3708      	adds	r7, #8
    19a8:	46bd      	mov	sp, r7
    19aa:	bd80      	pop	{r7, pc}
    19ac:	000018c1 	.word	0x000018c1

000019b0 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	b082      	sub	sp, #8
    19b4:	af00      	add	r7, sp, #0
    19b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	681b      	ldr	r3, [r3, #0]
    19bc:	f023 0202 	bic.w	r2, r3, #2
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    19c4:	2103      	movs	r1, #3
    19c6:	6878      	ldr	r0, [r7, #4]
    19c8:	4b02      	ldr	r3, [pc, #8]	; (19d4 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    19ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19cc:	bf00      	nop
    19ce:	3708      	adds	r7, #8
    19d0:	46bd      	mov	sp, r7
    19d2:	bd80      	pop	{r7, pc}
    19d4:	000018c1 	.word	0x000018c1

000019d8 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
    19e0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    19e2:	2103      	movs	r1, #3
    19e4:	6878      	ldr	r0, [r7, #4]
    19e6:	4b07      	ldr	r3, [pc, #28]	; (1a04 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    19e8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    19f0:	68fa      	ldr	r2, [r7, #12]
    19f2:	683b      	ldr	r3, [r7, #0]
    19f4:	4013      	ands	r3, r2
    19f6:	60fb      	str	r3, [r7, #12]
	return tmp;
    19f8:	68fb      	ldr	r3, [r7, #12]
}
    19fa:	4618      	mov	r0, r3
    19fc:	3710      	adds	r7, #16
    19fe:	46bd      	mov	sp, r7
    1a00:	bd80      	pop	{r7, pc}
    1a02:	bf00      	nop
    1a04:	000018c1 	.word	0x000018c1

00001a08 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	b082      	sub	sp, #8
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	6078      	str	r0, [r7, #4]
    1a10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	683a      	ldr	r2, [r7, #0]
    1a16:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1a18:	2103      	movs	r1, #3
    1a1a:	6878      	ldr	r0, [r7, #4]
    1a1c:	4b02      	ldr	r3, [pc, #8]	; (1a28 <hri_sercomusart_write_CTRLA_reg+0x20>)
    1a1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a20:	bf00      	nop
    1a22:	3708      	adds	r7, #8
    1a24:	46bd      	mov	sp, r7
    1a26:	bd80      	pop	{r7, pc}
    1a28:	000018c1 	.word	0x000018c1

00001a2c <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    1a2c:	b580      	push	{r7, lr}
    1a2e:	b082      	sub	sp, #8
    1a30:	af00      	add	r7, sp, #0
    1a32:	6078      	str	r0, [r7, #4]
    1a34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	683a      	ldr	r2, [r7, #0]
    1a3a:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    1a3c:	211f      	movs	r1, #31
    1a3e:	6878      	ldr	r0, [r7, #4]
    1a40:	4b02      	ldr	r3, [pc, #8]	; (1a4c <hri_sercomusart_write_CTRLB_reg+0x20>)
    1a42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a44:	bf00      	nop
    1a46:	3708      	adds	r7, #8
    1a48:	46bd      	mov	sp, r7
    1a4a:	bd80      	pop	{r7, pc}
    1a4c:	000018c1 	.word	0x000018c1

00001a50 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    1a50:	b480      	push	{r7}
    1a52:	b083      	sub	sp, #12
    1a54:	af00      	add	r7, sp, #0
    1a56:	6078      	str	r0, [r7, #4]
    1a58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	683a      	ldr	r2, [r7, #0]
    1a5e:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a60:	bf00      	nop
    1a62:	370c      	adds	r7, #12
    1a64:	46bd      	mov	sp, r7
    1a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a6a:	4770      	bx	lr

00001a6c <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    1a6c:	b480      	push	{r7}
    1a6e:	b083      	sub	sp, #12
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
    1a74:	460b      	mov	r3, r1
    1a76:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	887a      	ldrh	r2, [r7, #2]
    1a7c:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a7e:	bf00      	nop
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr

00001a8a <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1a8a:	b480      	push	{r7}
    1a8c:	b083      	sub	sp, #12
    1a8e:	af00      	add	r7, sp, #0
    1a90:	6078      	str	r0, [r7, #4]
    1a92:	460b      	mov	r3, r1
    1a94:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	78fa      	ldrb	r2, [r7, #3]
    1a9a:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a9c:	bf00      	nop
    1a9e:	370c      	adds	r7, #12
    1aa0:	46bd      	mov	sp, r7
    1aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1aa6:	4770      	bx	lr

00001aa8 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1aa8:	b480      	push	{r7}
    1aaa:	b083      	sub	sp, #12
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
    1ab0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	683a      	ldr	r2, [r7, #0]
    1ab6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ab8:	bf00      	nop
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1ad0:	4618      	mov	r0, r3
    1ad2:	370c      	adds	r7, #12
    1ad4:	46bd      	mov	sp, r7
    1ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ada:	4770      	bx	lr

00001adc <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1adc:	b480      	push	{r7}
    1ade:	b083      	sub	sp, #12
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	6078      	str	r0, [r7, #4]
    1ae4:	460b      	mov	r3, r1
    1ae6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	78fa      	ldrb	r2, [r7, #3]
    1aec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1af0:	bf00      	nop
    1af2:	370c      	adds	r7, #12
    1af4:	46bd      	mov	sp, r7
    1af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1afa:	4770      	bx	lr

00001afc <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b082      	sub	sp, #8
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	bf14      	ite	ne
    1b0c:	2301      	movne	r3, #1
    1b0e:	2300      	moveq	r3, #0
    1b10:	b2db      	uxtb	r3, r3
    1b12:	22bb      	movs	r2, #187	; 0xbb
    1b14:	4907      	ldr	r1, [pc, #28]	; (1b34 <_usart_sync_init+0x38>)
    1b16:	4618      	mov	r0, r3
    1b18:	4b07      	ldr	r3, [pc, #28]	; (1b38 <_usart_sync_init+0x3c>)
    1b1a:	4798      	blx	r3

	device->hw = hw;
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	683a      	ldr	r2, [r7, #0]
    1b20:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    1b22:	6838      	ldr	r0, [r7, #0]
    1b24:	4b05      	ldr	r3, [pc, #20]	; (1b3c <_usart_sync_init+0x40>)
    1b26:	4798      	blx	r3
    1b28:	4603      	mov	r3, r0
}
    1b2a:	4618      	mov	r0, r3
    1b2c:	3708      	adds	r7, #8
    1b2e:	46bd      	mov	sp, r7
    1b30:	bd80      	pop	{r7, pc}
    1b32:	bf00      	nop
    1b34:	00003550 	.word	0x00003550
    1b38:	000013d9 	.word	0x000013d9
    1b3c:	00001ccd 	.word	0x00001ccd

00001b40 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b082      	sub	sp, #8
    1b44:	af00      	add	r7, sp, #0
    1b46:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	4618      	mov	r0, r3
    1b4e:	4b03      	ldr	r3, [pc, #12]	; (1b5c <_usart_sync_enable+0x1c>)
    1b50:	4798      	blx	r3
}
    1b52:	bf00      	nop
    1b54:	3708      	adds	r7, #8
    1b56:	46bd      	mov	sp, r7
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	bf00      	nop
    1b5c:	00001989 	.word	0x00001989

00001b60 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
    1b66:	6078      	str	r0, [r7, #4]
    1b68:	460b      	mov	r3, r1
    1b6a:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	78fa      	ldrb	r2, [r7, #3]
    1b72:	4611      	mov	r1, r2
    1b74:	4618      	mov	r0, r3
    1b76:	4b03      	ldr	r3, [pc, #12]	; (1b84 <_usart_sync_write_byte+0x24>)
    1b78:	4798      	blx	r3
}
    1b7a:	bf00      	nop
    1b7c:	3708      	adds	r7, #8
    1b7e:	46bd      	mov	sp, r7
    1b80:	bd80      	pop	{r7, pc}
    1b82:	bf00      	nop
    1b84:	00001aa9 	.word	0x00001aa9

00001b88 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	b082      	sub	sp, #8
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	4618      	mov	r0, r3
    1b96:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <_usart_sync_read_byte+0x20>)
    1b98:	4798      	blx	r3
    1b9a:	4603      	mov	r3, r0
    1b9c:	b2db      	uxtb	r3, r3
}
    1b9e:	4618      	mov	r0, r3
    1ba0:	3708      	adds	r7, #8
    1ba2:	46bd      	mov	sp, r7
    1ba4:	bd80      	pop	{r7, pc}
    1ba6:	bf00      	nop
    1ba8:	00001ac5 	.word	0x00001ac5

00001bac <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	4618      	mov	r0, r3
    1bba:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <_usart_sync_is_ready_to_send+0x1c>)
    1bbc:	4798      	blx	r3
    1bbe:	4603      	mov	r3, r0
}
    1bc0:	4618      	mov	r0, r3
    1bc2:	3708      	adds	r7, #8
    1bc4:	46bd      	mov	sp, r7
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	0000190d 	.word	0x0000190d

00001bcc <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b082      	sub	sp, #8
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	681b      	ldr	r3, [r3, #0]
    1bd8:	4618      	mov	r0, r3
    1bda:	4b03      	ldr	r3, [pc, #12]	; (1be8 <_usart_sync_is_transmit_done+0x1c>)
    1bdc:	4798      	blx	r3
    1bde:	4603      	mov	r3, r0
}
    1be0:	4618      	mov	r0, r3
    1be2:	3708      	adds	r7, #8
    1be4:	46bd      	mov	sp, r7
    1be6:	bd80      	pop	{r7, pc}
    1be8:	00001935 	.word	0x00001935

00001bec <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1bec:	b580      	push	{r7, lr}
    1bee:	b082      	sub	sp, #8
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	4618      	mov	r0, r3
    1bfa:	4b03      	ldr	r3, [pc, #12]	; (1c08 <_usart_sync_is_byte_received+0x1c>)
    1bfc:	4798      	blx	r3
    1bfe:	4603      	mov	r3, r0
}
    1c00:	4618      	mov	r0, r3
    1c02:	3708      	adds	r7, #8
    1c04:	46bd      	mov	sp, r7
    1c06:	bd80      	pop	{r7, pc}
    1c08:	0000195f 	.word	0x0000195f

00001c0c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c0c:	b4b0      	push	{r4, r5, r7}
    1c0e:	b08d      	sub	sp, #52	; 0x34
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c14:	4b13      	ldr	r3, [pc, #76]	; (1c64 <_sercom_get_hardware_index+0x58>)
    1c16:	f107 040c 	add.w	r4, r7, #12
    1c1a:	461d      	mov	r5, r3
    1c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c28:	2300      	movs	r3, #0
    1c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c2c:	e010      	b.n	1c50 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c30:	009b      	lsls	r3, r3, #2
    1c32:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1c36:	4413      	add	r3, r2
    1c38:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1c3c:	461a      	mov	r2, r3
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	429a      	cmp	r2, r3
    1c42:	d102      	bne.n	1c4a <_sercom_get_hardware_index+0x3e>
			return i;
    1c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c46:	b2db      	uxtb	r3, r3
    1c48:	e006      	b.n	1c58 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c4c:	3301      	adds	r3, #1
    1c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c52:	2b07      	cmp	r3, #7
    1c54:	d9eb      	bls.n	1c2e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1c56:	2300      	movs	r3, #0
}
    1c58:	4618      	mov	r0, r3
    1c5a:	3734      	adds	r7, #52	; 0x34
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bcb0      	pop	{r4, r5, r7}
    1c60:	4770      	bx	lr
    1c62:	bf00      	nop
    1c64:	0000356c 	.word	0x0000356c

00001c68 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	b084      	sub	sp, #16
    1c6c:	af00      	add	r7, sp, #0
    1c6e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1c70:	6878      	ldr	r0, [r7, #4]
    1c72:	4b12      	ldr	r3, [pc, #72]	; (1cbc <_get_sercom_index+0x54>)
    1c74:	4798      	blx	r3
    1c76:	4603      	mov	r3, r0
    1c78:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1c7a:	2300      	movs	r3, #0
    1c7c:	73fb      	strb	r3, [r7, #15]
    1c7e:	e00f      	b.n	1ca0 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    1c80:	7bfa      	ldrb	r2, [r7, #15]
    1c82:	490f      	ldr	r1, [pc, #60]	; (1cc0 <_get_sercom_index+0x58>)
    1c84:	4613      	mov	r3, r2
    1c86:	005b      	lsls	r3, r3, #1
    1c88:	4413      	add	r3, r2
    1c8a:	00db      	lsls	r3, r3, #3
    1c8c:	440b      	add	r3, r1
    1c8e:	781b      	ldrb	r3, [r3, #0]
    1c90:	7bba      	ldrb	r2, [r7, #14]
    1c92:	429a      	cmp	r2, r3
    1c94:	d101      	bne.n	1c9a <_get_sercom_index+0x32>
			return i;
    1c96:	7bfb      	ldrb	r3, [r7, #15]
    1c98:	e00c      	b.n	1cb4 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1c9a:	7bfb      	ldrb	r3, [r7, #15]
    1c9c:	3301      	adds	r3, #1
    1c9e:	73fb      	strb	r3, [r7, #15]
    1ca0:	7bfb      	ldrb	r3, [r7, #15]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d0ec      	beq.n	1c80 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1ca6:	f240 2247 	movw	r2, #583	; 0x247
    1caa:	4906      	ldr	r1, [pc, #24]	; (1cc4 <_get_sercom_index+0x5c>)
    1cac:	2000      	movs	r0, #0
    1cae:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <_get_sercom_index+0x60>)
    1cb0:	4798      	blx	r3
	return 0;
    1cb2:	2300      	movs	r3, #0
}
    1cb4:	4618      	mov	r0, r3
    1cb6:	3710      	adds	r7, #16
    1cb8:	46bd      	mov	sp, r7
    1cba:	bd80      	pop	{r7, pc}
    1cbc:	00001c0d 	.word	0x00001c0d
    1cc0:	20000000 	.word	0x20000000
    1cc4:	00003550 	.word	0x00003550
    1cc8:	000013d9 	.word	0x000013d9

00001ccc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b084      	sub	sp, #16
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1cd4:	6878      	ldr	r0, [r7, #4]
    1cd6:	4b61      	ldr	r3, [pc, #388]	; (1e5c <_usart_init+0x190>)
    1cd8:	4798      	blx	r3
    1cda:	4603      	mov	r3, r0
    1cdc:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1cde:	2101      	movs	r1, #1
    1ce0:	6878      	ldr	r0, [r7, #4]
    1ce2:	4b5f      	ldr	r3, [pc, #380]	; (1e60 <_usart_init+0x194>)
    1ce4:	4798      	blx	r3
    1ce6:	4603      	mov	r3, r0
    1ce8:	f083 0301 	eor.w	r3, r3, #1
    1cec:	b2db      	uxtb	r3, r3
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d020      	beq.n	1d34 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1cf2:	7bfa      	ldrb	r2, [r7, #15]
    1cf4:	495b      	ldr	r1, [pc, #364]	; (1e64 <_usart_init+0x198>)
    1cf6:	4613      	mov	r3, r2
    1cf8:	005b      	lsls	r3, r3, #1
    1cfa:	4413      	add	r3, r2
    1cfc:	00db      	lsls	r3, r3, #3
    1cfe:	440b      	add	r3, r1
    1d00:	3304      	adds	r3, #4
    1d02:	681b      	ldr	r3, [r3, #0]
    1d04:	f003 031c 	and.w	r3, r3, #28
    1d08:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1d0a:	2102      	movs	r1, #2
    1d0c:	6878      	ldr	r0, [r7, #4]
    1d0e:	4b56      	ldr	r3, [pc, #344]	; (1e68 <_usart_init+0x19c>)
    1d10:	4798      	blx	r3
    1d12:	4603      	mov	r3, r0
    1d14:	2b00      	cmp	r3, #0
    1d16:	d006      	beq.n	1d26 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1d18:	6878      	ldr	r0, [r7, #4]
    1d1a:	4b54      	ldr	r3, [pc, #336]	; (1e6c <_usart_init+0x1a0>)
    1d1c:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1d1e:	2102      	movs	r1, #2
    1d20:	6878      	ldr	r0, [r7, #4]
    1d22:	4b53      	ldr	r3, [pc, #332]	; (1e70 <_usart_init+0x1a4>)
    1d24:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1d26:	68bb      	ldr	r3, [r7, #8]
    1d28:	f043 0301 	orr.w	r3, r3, #1
    1d2c:	4619      	mov	r1, r3
    1d2e:	6878      	ldr	r0, [r7, #4]
    1d30:	4b50      	ldr	r3, [pc, #320]	; (1e74 <_usart_init+0x1a8>)
    1d32:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1d34:	2101      	movs	r1, #1
    1d36:	6878      	ldr	r0, [r7, #4]
    1d38:	4b4d      	ldr	r3, [pc, #308]	; (1e70 <_usart_init+0x1a4>)
    1d3a:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1d3c:	7bfa      	ldrb	r2, [r7, #15]
    1d3e:	4949      	ldr	r1, [pc, #292]	; (1e64 <_usart_init+0x198>)
    1d40:	4613      	mov	r3, r2
    1d42:	005b      	lsls	r3, r3, #1
    1d44:	4413      	add	r3, r2
    1d46:	00db      	lsls	r3, r3, #3
    1d48:	440b      	add	r3, r1
    1d4a:	3304      	adds	r3, #4
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	4619      	mov	r1, r3
    1d50:	6878      	ldr	r0, [r7, #4]
    1d52:	4b48      	ldr	r3, [pc, #288]	; (1e74 <_usart_init+0x1a8>)
    1d54:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1d56:	7bfa      	ldrb	r2, [r7, #15]
    1d58:	4942      	ldr	r1, [pc, #264]	; (1e64 <_usart_init+0x198>)
    1d5a:	4613      	mov	r3, r2
    1d5c:	005b      	lsls	r3, r3, #1
    1d5e:	4413      	add	r3, r2
    1d60:	00db      	lsls	r3, r3, #3
    1d62:	440b      	add	r3, r1
    1d64:	3308      	adds	r3, #8
    1d66:	681b      	ldr	r3, [r3, #0]
    1d68:	4619      	mov	r1, r3
    1d6a:	6878      	ldr	r0, [r7, #4]
    1d6c:	4b42      	ldr	r3, [pc, #264]	; (1e78 <_usart_init+0x1ac>)
    1d6e:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1d70:	7bfa      	ldrb	r2, [r7, #15]
    1d72:	493c      	ldr	r1, [pc, #240]	; (1e64 <_usart_init+0x198>)
    1d74:	4613      	mov	r3, r2
    1d76:	005b      	lsls	r3, r3, #1
    1d78:	4413      	add	r3, r2
    1d7a:	00db      	lsls	r3, r3, #3
    1d7c:	440b      	add	r3, r1
    1d7e:	330c      	adds	r3, #12
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	4619      	mov	r1, r3
    1d84:	6878      	ldr	r0, [r7, #4]
    1d86:	4b3d      	ldr	r3, [pc, #244]	; (1e7c <_usart_init+0x1b0>)
    1d88:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1d8a:	7bfa      	ldrb	r2, [r7, #15]
    1d8c:	4935      	ldr	r1, [pc, #212]	; (1e64 <_usart_init+0x198>)
    1d8e:	4613      	mov	r3, r2
    1d90:	005b      	lsls	r3, r3, #1
    1d92:	4413      	add	r3, r2
    1d94:	00db      	lsls	r3, r3, #3
    1d96:	440b      	add	r3, r1
    1d98:	3304      	adds	r3, #4
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1da0:	2b00      	cmp	r3, #0
    1da2:	d10c      	bne.n	1dbe <_usart_init+0xf2>
    1da4:	7bfa      	ldrb	r2, [r7, #15]
    1da6:	492f      	ldr	r1, [pc, #188]	; (1e64 <_usart_init+0x198>)
    1da8:	4613      	mov	r3, r2
    1daa:	005b      	lsls	r3, r3, #1
    1dac:	4413      	add	r3, r2
    1dae:	00db      	lsls	r3, r3, #3
    1db0:	440b      	add	r3, r1
    1db2:	3304      	adds	r3, #4
    1db4:	681b      	ldr	r3, [r3, #0]
    1db6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d022      	beq.n	1e04 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1dbe:	7bfa      	ldrb	r2, [r7, #15]
    1dc0:	4928      	ldr	r1, [pc, #160]	; (1e64 <_usart_init+0x198>)
    1dc2:	4613      	mov	r3, r2
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	4413      	add	r3, r2
    1dc8:	00db      	lsls	r3, r3, #3
    1dca:	440b      	add	r3, r1
    1dcc:	3310      	adds	r3, #16
    1dce:	881b      	ldrh	r3, [r3, #0]
    1dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1dd4:	b299      	uxth	r1, r3
    1dd6:	687a      	ldr	r2, [r7, #4]
    1dd8:	8993      	ldrh	r3, [r2, #12]
    1dda:	f361 030c 	bfi	r3, r1, #0, #13
    1dde:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1de0:	7bfa      	ldrb	r2, [r7, #15]
    1de2:	4920      	ldr	r1, [pc, #128]	; (1e64 <_usart_init+0x198>)
    1de4:	4613      	mov	r3, r2
    1de6:	005b      	lsls	r3, r3, #1
    1de8:	4413      	add	r3, r2
    1dea:	00db      	lsls	r3, r3, #3
    1dec:	440b      	add	r3, r1
    1dee:	3312      	adds	r3, #18
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	f003 0307 	and.w	r3, r3, #7
    1df6:	b2d9      	uxtb	r1, r3
    1df8:	687a      	ldr	r2, [r7, #4]
    1dfa:	8993      	ldrh	r3, [r2, #12]
    1dfc:	f361 334f 	bfi	r3, r1, #13, #3
    1e00:	8193      	strh	r3, [r2, #12]
    1e02:	e00c      	b.n	1e1e <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1e04:	7bfa      	ldrb	r2, [r7, #15]
    1e06:	4917      	ldr	r1, [pc, #92]	; (1e64 <_usart_init+0x198>)
    1e08:	4613      	mov	r3, r2
    1e0a:	005b      	lsls	r3, r3, #1
    1e0c:	4413      	add	r3, r2
    1e0e:	00db      	lsls	r3, r3, #3
    1e10:	440b      	add	r3, r1
    1e12:	3310      	adds	r3, #16
    1e14:	881b      	ldrh	r3, [r3, #0]
    1e16:	4619      	mov	r1, r3
    1e18:	6878      	ldr	r0, [r7, #4]
    1e1a:	4b19      	ldr	r3, [pc, #100]	; (1e80 <_usart_init+0x1b4>)
    1e1c:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1e1e:	7bfa      	ldrb	r2, [r7, #15]
    1e20:	4910      	ldr	r1, [pc, #64]	; (1e64 <_usart_init+0x198>)
    1e22:	4613      	mov	r3, r2
    1e24:	005b      	lsls	r3, r3, #1
    1e26:	4413      	add	r3, r2
    1e28:	00db      	lsls	r3, r3, #3
    1e2a:	440b      	add	r3, r1
    1e2c:	3313      	adds	r3, #19
    1e2e:	781b      	ldrb	r3, [r3, #0]
    1e30:	4619      	mov	r1, r3
    1e32:	6878      	ldr	r0, [r7, #4]
    1e34:	4b13      	ldr	r3, [pc, #76]	; (1e84 <_usart_init+0x1b8>)
    1e36:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1e38:	7bfa      	ldrb	r2, [r7, #15]
    1e3a:	490a      	ldr	r1, [pc, #40]	; (1e64 <_usart_init+0x198>)
    1e3c:	4613      	mov	r3, r2
    1e3e:	005b      	lsls	r3, r3, #1
    1e40:	4413      	add	r3, r2
    1e42:	00db      	lsls	r3, r3, #3
    1e44:	440b      	add	r3, r1
    1e46:	3314      	adds	r3, #20
    1e48:	781b      	ldrb	r3, [r3, #0]
    1e4a:	4619      	mov	r1, r3
    1e4c:	6878      	ldr	r0, [r7, #4]
    1e4e:	4b0e      	ldr	r3, [pc, #56]	; (1e88 <_usart_init+0x1bc>)
    1e50:	4798      	blx	r3

	return ERR_NONE;
    1e52:	2300      	movs	r3, #0
}
    1e54:	4618      	mov	r0, r3
    1e56:	3710      	adds	r7, #16
    1e58:	46bd      	mov	sp, r7
    1e5a:	bd80      	pop	{r7, pc}
    1e5c:	00001c69 	.word	0x00001c69
    1e60:	000018e5 	.word	0x000018e5
    1e64:	20000000 	.word	0x20000000
    1e68:	000019d9 	.word	0x000019d9
    1e6c:	000019b1 	.word	0x000019b1
    1e70:	000018c1 	.word	0x000018c1
    1e74:	00001a09 	.word	0x00001a09
    1e78:	00001a2d 	.word	0x00001a2d
    1e7c:	00001a51 	.word	0x00001a51
    1e80:	00001a6d 	.word	0x00001a6d
    1e84:	00001a8b 	.word	0x00001a8b
    1e88:	00001add 	.word	0x00001add

00001e8c <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1e8c:	b480      	push	{r7}
    1e8e:	b083      	sub	sp, #12
    1e90:	af00      	add	r7, sp, #0
    1e92:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <_system_time_init+0x24>)
    1e96:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1e9a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1e9c:	4b04      	ldr	r3, [pc, #16]	; (1eb0 <_system_time_init+0x24>)
    1e9e:	2205      	movs	r2, #5
    1ea0:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1ea2:	bf00      	nop
    1ea4:	370c      	adds	r7, #12
    1ea6:	46bd      	mov	sp, r7
    1ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eac:	4770      	bx	lr
    1eae:	bf00      	nop
    1eb0:	e000e010 	.word	0xe000e010

00001eb4 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b082      	sub	sp, #8
    1eb8:	af00      	add	r7, sp, #0
    1eba:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    1ebc:	6878      	ldr	r0, [r7, #4]
    1ebe:	4b03      	ldr	r3, [pc, #12]	; (1ecc <_delay_init+0x18>)
    1ec0:	4798      	blx	r3
}
    1ec2:	bf00      	nop
    1ec4:	3708      	adds	r7, #8
    1ec6:	46bd      	mov	sp, r7
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	bf00      	nop
    1ecc:	00001e8d 	.word	0x00001e8d

00001ed0 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1ed0:	b480      	push	{r7}
    1ed2:	b083      	sub	sp, #12
    1ed4:	af00      	add	r7, sp, #0
    1ed6:	6078      	str	r0, [r7, #4]
    1ed8:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1eda:	bf00      	nop
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	689a      	ldr	r2, [r3, #8]
    1ee0:	683b      	ldr	r3, [r7, #0]
    1ee2:	4013      	ands	r3, r2
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d1f9      	bne.n	1edc <hri_tcc_wait_for_sync+0xc>
	};
}
    1ee8:	bf00      	nop
    1eea:	370c      	adds	r7, #12
    1eec:	46bd      	mov	sp, r7
    1eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef2:	4770      	bx	lr

00001ef4 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	689a      	ldr	r2, [r3, #8]
    1f02:	683b      	ldr	r3, [r7, #0]
    1f04:	4013      	ands	r3, r2
    1f06:	2b00      	cmp	r3, #0
    1f08:	bf14      	ite	ne
    1f0a:	2301      	movne	r3, #1
    1f0c:	2300      	moveq	r3, #0
    1f0e:	b2db      	uxtb	r3, r3
}
    1f10:	4618      	mov	r0, r3
    1f12:	370c      	adds	r7, #12
    1f14:	46bd      	mov	sp, r7
    1f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f1a:	4770      	bx	lr

00001f1c <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b084      	sub	sp, #16
    1f20:	af00      	add	r7, sp, #0
    1f22:	6078      	str	r0, [r7, #4]
    1f24:	460b      	mov	r3, r1
    1f26:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	681b      	ldr	r3, [r3, #0]
    1f2c:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    1f2e:	68fb      	ldr	r3, [r7, #12]
    1f30:	f023 0302 	bic.w	r3, r3, #2
    1f34:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    1f36:	78fb      	ldrb	r3, [r7, #3]
    1f38:	005b      	lsls	r3, r3, #1
    1f3a:	461a      	mov	r2, r3
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	4313      	orrs	r3, r2
    1f40:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	68fa      	ldr	r2, [r7, #12]
    1f46:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1f48:	2103      	movs	r1, #3
    1f4a:	6878      	ldr	r0, [r7, #4]
    1f4c:	4b02      	ldr	r3, [pc, #8]	; (1f58 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    1f4e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1f50:	bf00      	nop
    1f52:	3710      	adds	r7, #16
    1f54:	46bd      	mov	sp, r7
    1f56:	bd80      	pop	{r7, pc}
    1f58:	00001ed1 	.word	0x00001ed1

00001f5c <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b082      	sub	sp, #8
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	681b      	ldr	r3, [r3, #0]
    1f68:	f023 0202 	bic.w	r2, r3, #2
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1f70:	2103      	movs	r1, #3
    1f72:	6878      	ldr	r0, [r7, #4]
    1f74:	4b02      	ldr	r3, [pc, #8]	; (1f80 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    1f76:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1f78:	bf00      	nop
    1f7a:	3708      	adds	r7, #8
    1f7c:	46bd      	mov	sp, r7
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	00001ed1 	.word	0x00001ed1

00001f84 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    1f84:	b580      	push	{r7, lr}
    1f86:	b084      	sub	sp, #16
    1f88:	af00      	add	r7, sp, #0
    1f8a:	6078      	str	r0, [r7, #4]
    1f8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1f8e:	2103      	movs	r1, #3
    1f90:	6878      	ldr	r0, [r7, #4]
    1f92:	4b07      	ldr	r3, [pc, #28]	; (1fb0 <hri_tcc_get_CTRLA_reg+0x2c>)
    1f94:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	681b      	ldr	r3, [r3, #0]
    1f9a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1f9c:	68fa      	ldr	r2, [r7, #12]
    1f9e:	683b      	ldr	r3, [r7, #0]
    1fa0:	4013      	ands	r3, r2
    1fa2:	60fb      	str	r3, [r7, #12]
	return tmp;
    1fa4:	68fb      	ldr	r3, [r7, #12]
}
    1fa6:	4618      	mov	r0, r3
    1fa8:	3710      	adds	r7, #16
    1faa:	46bd      	mov	sp, r7
    1fac:	bd80      	pop	{r7, pc}
    1fae:	bf00      	nop
    1fb0:	00001ed1 	.word	0x00001ed1

00001fb4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b082      	sub	sp, #8
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
    1fbc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	683a      	ldr	r2, [r7, #0]
    1fc2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1fc4:	2103      	movs	r1, #3
    1fc6:	6878      	ldr	r0, [r7, #4]
    1fc8:	4b02      	ldr	r3, [pc, #8]	; (1fd4 <hri_tcc_write_CTRLA_reg+0x20>)
    1fca:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1fcc:	bf00      	nop
    1fce:	3708      	adds	r7, #8
    1fd0:	46bd      	mov	sp, r7
    1fd2:	bd80      	pop	{r7, pc}
    1fd4:	00001ed1 	.word	0x00001ed1

00001fd8 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    1fd8:	b580      	push	{r7, lr}
    1fda:	b082      	sub	sp, #8
    1fdc:	af00      	add	r7, sp, #0
    1fde:	6078      	str	r0, [r7, #4]
    1fe0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	683a      	ldr	r2, [r7, #0]
    1fe6:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    1fe8:	f643 71ff 	movw	r1, #16383	; 0x3fff
    1fec:	6878      	ldr	r0, [r7, #4]
    1fee:	4b03      	ldr	r3, [pc, #12]	; (1ffc <hri_tcc_write_WAVE_reg+0x24>)
    1ff0:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1ff2:	bf00      	nop
    1ff4:	3708      	adds	r7, #8
    1ff6:	46bd      	mov	sp, r7
    1ff8:	bd80      	pop	{r7, pc}
    1ffa:	bf00      	nop
    1ffc:	00001ed1 	.word	0x00001ed1

00002000 <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    2000:	b580      	push	{r7, lr}
    2002:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    2004:	2101      	movs	r1, #1
    2006:	4817      	ldr	r0, [pc, #92]	; (2064 <PWM_0_init+0x64>)
    2008:	4b17      	ldr	r3, [pc, #92]	; (2068 <PWM_0_init+0x68>)
    200a:	4798      	blx	r3
    200c:	4603      	mov	r3, r0
    200e:	f083 0301 	eor.w	r3, r3, #1
    2012:	b2db      	uxtb	r3, r3
    2014:	2b00      	cmp	r3, #0
    2016:	d011      	beq.n	203c <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    2018:	2102      	movs	r1, #2
    201a:	4812      	ldr	r0, [pc, #72]	; (2064 <PWM_0_init+0x64>)
    201c:	4b13      	ldr	r3, [pc, #76]	; (206c <PWM_0_init+0x6c>)
    201e:	4798      	blx	r3
    2020:	4603      	mov	r3, r0
    2022:	2b00      	cmp	r3, #0
    2024:	d006      	beq.n	2034 <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    2026:	480f      	ldr	r0, [pc, #60]	; (2064 <PWM_0_init+0x64>)
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <PWM_0_init+0x70>)
    202a:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    202c:	2102      	movs	r1, #2
    202e:	480d      	ldr	r0, [pc, #52]	; (2064 <PWM_0_init+0x64>)
    2030:	4b10      	ldr	r3, [pc, #64]	; (2074 <PWM_0_init+0x74>)
    2032:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    2034:	2101      	movs	r1, #1
    2036:	480b      	ldr	r0, [pc, #44]	; (2064 <PWM_0_init+0x64>)
    2038:	4b0f      	ldr	r3, [pc, #60]	; (2078 <PWM_0_init+0x78>)
    203a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    203c:	2101      	movs	r1, #1
    203e:	4809      	ldr	r0, [pc, #36]	; (2064 <PWM_0_init+0x64>)
    2040:	4b0c      	ldr	r3, [pc, #48]	; (2074 <PWM_0_init+0x74>)
    2042:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    2044:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2048:	4806      	ldr	r0, [pc, #24]	; (2064 <PWM_0_init+0x64>)
    204a:	4b0b      	ldr	r3, [pc, #44]	; (2078 <PWM_0_init+0x78>)
    204c:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    204e:	2102      	movs	r1, #2
    2050:	4804      	ldr	r0, [pc, #16]	; (2064 <PWM_0_init+0x64>)
    2052:	4b0a      	ldr	r3, [pc, #40]	; (207c <PWM_0_init+0x7c>)
    2054:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    2056:	2101      	movs	r1, #1
    2058:	4802      	ldr	r0, [pc, #8]	; (2064 <PWM_0_init+0x64>)
    205a:	4b09      	ldr	r3, [pc, #36]	; (2080 <PWM_0_init+0x80>)
    205c:	4798      	blx	r3

	return 0;
    205e:	2300      	movs	r3, #0
}
    2060:	4618      	mov	r0, r3
    2062:	bd80      	pop	{r7, pc}
    2064:	41016000 	.word	0x41016000
    2068:	00001ef5 	.word	0x00001ef5
    206c:	00001f85 	.word	0x00001f85
    2070:	00001f5d 	.word	0x00001f5d
    2074:	00001ed1 	.word	0x00001ed1
    2078:	00001fb5 	.word	0x00001fb5
    207c:	00001fd9 	.word	0x00001fd9
    2080:	00001f1d 	.word	0x00001f1d

00002084 <__NVIC_EnableIRQ>:
{
    2084:	b480      	push	{r7}
    2086:	b083      	sub	sp, #12
    2088:	af00      	add	r7, sp, #0
    208a:	4603      	mov	r3, r0
    208c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    208e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2092:	2b00      	cmp	r3, #0
    2094:	db0b      	blt.n	20ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2096:	4909      	ldr	r1, [pc, #36]	; (20bc <__NVIC_EnableIRQ+0x38>)
    2098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    209c:	095b      	lsrs	r3, r3, #5
    209e:	88fa      	ldrh	r2, [r7, #6]
    20a0:	f002 021f 	and.w	r2, r2, #31
    20a4:	2001      	movs	r0, #1
    20a6:	fa00 f202 	lsl.w	r2, r0, r2
    20aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    20ae:	bf00      	nop
    20b0:	370c      	adds	r7, #12
    20b2:	46bd      	mov	sp, r7
    20b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	e000e100 	.word	0xe000e100

000020c0 <__NVIC_DisableIRQ>:
{
    20c0:	b480      	push	{r7}
    20c2:	b083      	sub	sp, #12
    20c4:	af00      	add	r7, sp, #0
    20c6:	4603      	mov	r3, r0
    20c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    20ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    20ce:	2b00      	cmp	r3, #0
    20d0:	db10      	blt.n	20f4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20d2:	490b      	ldr	r1, [pc, #44]	; (2100 <__NVIC_DisableIRQ+0x40>)
    20d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    20d8:	095b      	lsrs	r3, r3, #5
    20da:	88fa      	ldrh	r2, [r7, #6]
    20dc:	f002 021f 	and.w	r2, r2, #31
    20e0:	2001      	movs	r0, #1
    20e2:	fa00 f202 	lsl.w	r2, r0, r2
    20e6:	3320      	adds	r3, #32
    20e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    20ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20f0:	f3bf 8f6f 	isb	sy
}
    20f4:	bf00      	nop
    20f6:	370c      	adds	r7, #12
    20f8:	46bd      	mov	sp, r7
    20fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    20fe:	4770      	bx	lr
    2100:	e000e100 	.word	0xe000e100

00002104 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2104:	b480      	push	{r7}
    2106:	b083      	sub	sp, #12
    2108:	af00      	add	r7, sp, #0
    210a:	4603      	mov	r3, r0
    210c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2112:	2b00      	cmp	r3, #0
    2114:	db0c      	blt.n	2130 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2116:	4909      	ldr	r1, [pc, #36]	; (213c <__NVIC_ClearPendingIRQ+0x38>)
    2118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    211c:	095b      	lsrs	r3, r3, #5
    211e:	88fa      	ldrh	r2, [r7, #6]
    2120:	f002 021f 	and.w	r2, r2, #31
    2124:	2001      	movs	r0, #1
    2126:	fa00 f202 	lsl.w	r2, r0, r2
    212a:	3360      	adds	r3, #96	; 0x60
    212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2130:	bf00      	nop
    2132:	370c      	adds	r7, #12
    2134:	46bd      	mov	sp, r7
    2136:	f85d 7b04 	ldr.w	r7, [sp], #4
    213a:	4770      	bx	lr
    213c:	e000e100 	.word	0xe000e100

00002140 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2140:	b480      	push	{r7}
    2142:	b083      	sub	sp, #12
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
    2148:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    214a:	bf00      	nop
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	691a      	ldr	r2, [r3, #16]
    2150:	683b      	ldr	r3, [r7, #0]
    2152:	4013      	ands	r3, r2
    2154:	2b00      	cmp	r3, #0
    2156:	d1f9      	bne.n	214c <hri_tc_wait_for_sync+0xc>
	};
}
    2158:	bf00      	nop
    215a:	370c      	adds	r7, #12
    215c:	46bd      	mov	sp, r7
    215e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2162:	4770      	bx	lr

00002164 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2164:	b480      	push	{r7}
    2166:	b083      	sub	sp, #12
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
    216c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	691a      	ldr	r2, [r3, #16]
    2172:	683b      	ldr	r3, [r7, #0]
    2174:	4013      	ands	r3, r2
    2176:	2b00      	cmp	r3, #0
    2178:	bf14      	ite	ne
    217a:	2301      	movne	r3, #1
    217c:	2300      	moveq	r3, #0
    217e:	b2db      	uxtb	r3, r3
}
    2180:	4618      	mov	r0, r3
    2182:	370c      	adds	r7, #12
    2184:	46bd      	mov	sp, r7
    2186:	f85d 7b04 	ldr.w	r7, [sp], #4
    218a:	4770      	bx	lr

0000218c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    218c:	b480      	push	{r7}
    218e:	b083      	sub	sp, #12
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	7a9b      	ldrb	r3, [r3, #10]
    2198:	b2db      	uxtb	r3, r3
    219a:	f003 0301 	and.w	r3, r3, #1
    219e:	2b00      	cmp	r3, #0
    21a0:	bf14      	ite	ne
    21a2:	2301      	movne	r3, #1
    21a4:	2300      	moveq	r3, #0
    21a6:	b2db      	uxtb	r3, r3
}
    21a8:	4618      	mov	r0, r3
    21aa:	370c      	adds	r7, #12
    21ac:	46bd      	mov	sp, r7
    21ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b2:	4770      	bx	lr

000021b4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    21b4:	b480      	push	{r7}
    21b6:	b083      	sub	sp, #12
    21b8:	af00      	add	r7, sp, #0
    21ba:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	2201      	movs	r2, #1
    21c0:	729a      	strb	r2, [r3, #10]
}
    21c2:	bf00      	nop
    21c4:	370c      	adds	r7, #12
    21c6:	46bd      	mov	sp, r7
    21c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21cc:	4770      	bx	lr

000021ce <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    21ce:	b480      	push	{r7}
    21d0:	b083      	sub	sp, #12
    21d2:	af00      	add	r7, sp, #0
    21d4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	2201      	movs	r2, #1
    21da:	725a      	strb	r2, [r3, #9]
}
    21dc:	bf00      	nop
    21de:	370c      	adds	r7, #12
    21e0:	46bd      	mov	sp, r7
    21e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    21e6:	4770      	bx	lr

000021e8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b082      	sub	sp, #8
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	681b      	ldr	r3, [r3, #0]
    21f4:	f043 0202 	orr.w	r2, r3, #2
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    21fc:	2103      	movs	r1, #3
    21fe:	6878      	ldr	r0, [r7, #4]
    2200:	4b02      	ldr	r3, [pc, #8]	; (220c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    2202:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2204:	bf00      	nop
    2206:	3708      	adds	r7, #8
    2208:	46bd      	mov	sp, r7
    220a:	bd80      	pop	{r7, pc}
    220c:	00002141 	.word	0x00002141

00002210 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2210:	b580      	push	{r7, lr}
    2212:	b084      	sub	sp, #16
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    2218:	2103      	movs	r1, #3
    221a:	6878      	ldr	r0, [r7, #4]
    221c:	4b09      	ldr	r3, [pc, #36]	; (2244 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    221e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	681b      	ldr	r3, [r3, #0]
    2224:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2226:	68fb      	ldr	r3, [r7, #12]
    2228:	085b      	lsrs	r3, r3, #1
    222a:	f003 0301 	and.w	r3, r3, #1
    222e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	2b00      	cmp	r3, #0
    2234:	bf14      	ite	ne
    2236:	2301      	movne	r3, #1
    2238:	2300      	moveq	r3, #0
    223a:	b2db      	uxtb	r3, r3
}
    223c:	4618      	mov	r0, r3
    223e:	3710      	adds	r7, #16
    2240:	46bd      	mov	sp, r7
    2242:	bd80      	pop	{r7, pc}
    2244:	00002141 	.word	0x00002141

00002248 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2248:	b580      	push	{r7, lr}
    224a:	b082      	sub	sp, #8
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	f023 0202 	bic.w	r2, r3, #2
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    225c:	2103      	movs	r1, #3
    225e:	6878      	ldr	r0, [r7, #4]
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    2262:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2264:	bf00      	nop
    2266:	3708      	adds	r7, #8
    2268:	46bd      	mov	sp, r7
    226a:	bd80      	pop	{r7, pc}
    226c:	00002141 	.word	0x00002141

00002270 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    227a:	2103      	movs	r1, #3
    227c:	6878      	ldr	r0, [r7, #4]
    227e:	4b07      	ldr	r3, [pc, #28]	; (229c <hri_tc_get_CTRLA_reg+0x2c>)
    2280:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2288:	68fa      	ldr	r2, [r7, #12]
    228a:	683b      	ldr	r3, [r7, #0]
    228c:	4013      	ands	r3, r2
    228e:	60fb      	str	r3, [r7, #12]
	return tmp;
    2290:	68fb      	ldr	r3, [r7, #12]
}
    2292:	4618      	mov	r0, r3
    2294:	3710      	adds	r7, #16
    2296:	46bd      	mov	sp, r7
    2298:	bd80      	pop	{r7, pc}
    229a:	bf00      	nop
    229c:	00002141 	.word	0x00002141

000022a0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b082      	sub	sp, #8
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
    22a8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	683a      	ldr	r2, [r7, #0]
    22ae:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    22b0:	2103      	movs	r1, #3
    22b2:	6878      	ldr	r0, [r7, #4]
    22b4:	4b02      	ldr	r3, [pc, #8]	; (22c0 <hri_tc_write_CTRLA_reg+0x20>)
    22b6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    22b8:	bf00      	nop
    22ba:	3708      	adds	r7, #8
    22bc:	46bd      	mov	sp, r7
    22be:	bd80      	pop	{r7, pc}
    22c0:	00002141 	.word	0x00002141

000022c4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    22c4:	b480      	push	{r7}
    22c6:	b083      	sub	sp, #12
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
    22cc:	460b      	mov	r3, r1
    22ce:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	887a      	ldrh	r2, [r7, #2]
    22d4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    22d6:	bf00      	nop
    22d8:	370c      	adds	r7, #12
    22da:	46bd      	mov	sp, r7
    22dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    22e0:	4770      	bx	lr

000022e2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    22e2:	b480      	push	{r7}
    22e4:	b083      	sub	sp, #12
    22e6:	af00      	add	r7, sp, #0
    22e8:	6078      	str	r0, [r7, #4]
    22ea:	460b      	mov	r3, r1
    22ec:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	78fa      	ldrb	r2, [r7, #3]
    22f2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    22f4:	bf00      	nop
    22f6:	370c      	adds	r7, #12
    22f8:	46bd      	mov	sp, r7
    22fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    22fe:	4770      	bx	lr

00002300 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    2300:	b480      	push	{r7}
    2302:	b083      	sub	sp, #12
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
    2308:	460b      	mov	r3, r1
    230a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	78fa      	ldrb	r2, [r7, #3]
    2310:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    2312:	bf00      	nop
    2314:	370c      	adds	r7, #12
    2316:	46bd      	mov	sp, r7
    2318:	f85d 7b04 	ldr.w	r7, [sp], #4
    231c:	4770      	bx	lr
	...

00002320 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    2320:	b580      	push	{r7, lr}
    2322:	b082      	sub	sp, #8
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	460b      	mov	r3, r1
    232a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	78fa      	ldrb	r2, [r7, #3]
    2330:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    2332:	2120      	movs	r1, #32
    2334:	6878      	ldr	r0, [r7, #4]
    2336:	4b03      	ldr	r3, [pc, #12]	; (2344 <hri_tccount8_write_PER_reg+0x24>)
    2338:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    233a:	bf00      	nop
    233c:	3708      	adds	r7, #8
    233e:	46bd      	mov	sp, r7
    2340:	bd80      	pop	{r7, pc}
    2342:	bf00      	nop
    2344:	00002141 	.word	0x00002141

00002348 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    2348:	b580      	push	{r7, lr}
    234a:	b082      	sub	sp, #8
    234c:	af00      	add	r7, sp, #0
    234e:	6078      	str	r0, [r7, #4]
    2350:	460b      	mov	r3, r1
    2352:	70fb      	strb	r3, [r7, #3]
    2354:	4613      	mov	r3, r2
    2356:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2358:	78fb      	ldrb	r3, [r7, #3]
    235a:	687a      	ldr	r2, [r7, #4]
    235c:	4413      	add	r3, r2
    235e:	78ba      	ldrb	r2, [r7, #2]
    2360:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2362:	21c0      	movs	r1, #192	; 0xc0
    2364:	6878      	ldr	r0, [r7, #4]
    2366:	4b03      	ldr	r3, [pc, #12]	; (2374 <hri_tccount8_write_CC_reg+0x2c>)
    2368:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    236a:	bf00      	nop
    236c:	3708      	adds	r7, #8
    236e:	46bd      	mov	sp, r7
    2370:	bd80      	pop	{r7, pc}
    2372:	bf00      	nop
    2374:	00002141 	.word	0x00002141

00002378 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    2378:	b580      	push	{r7, lr}
    237a:	b082      	sub	sp, #8
    237c:	af00      	add	r7, sp, #0
    237e:	6078      	str	r0, [r7, #4]
    2380:	460b      	mov	r3, r1
    2382:	70fb      	strb	r3, [r7, #3]
    2384:	4613      	mov	r3, r2
    2386:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2388:	78fb      	ldrb	r3, [r7, #3]
    238a:	687a      	ldr	r2, [r7, #4]
    238c:	330c      	adds	r3, #12
    238e:	005b      	lsls	r3, r3, #1
    2390:	4413      	add	r3, r2
    2392:	883a      	ldrh	r2, [r7, #0]
    2394:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2396:	21c0      	movs	r1, #192	; 0xc0
    2398:	6878      	ldr	r0, [r7, #4]
    239a:	4b03      	ldr	r3, [pc, #12]	; (23a8 <hri_tccount16_write_CC_reg+0x30>)
    239c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    239e:	bf00      	nop
    23a0:	3708      	adds	r7, #8
    23a2:	46bd      	mov	sp, r7
    23a4:	bd80      	pop	{r7, pc}
    23a6:	bf00      	nop
    23a8:	00002141 	.word	0x00002141

000023ac <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    23ac:	b580      	push	{r7, lr}
    23ae:	b084      	sub	sp, #16
    23b0:	af00      	add	r7, sp, #0
    23b2:	60f8      	str	r0, [r7, #12]
    23b4:	460b      	mov	r3, r1
    23b6:	607a      	str	r2, [r7, #4]
    23b8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    23ba:	7afb      	ldrb	r3, [r7, #11]
    23bc:	68fa      	ldr	r2, [r7, #12]
    23be:	3306      	adds	r3, #6
    23c0:	009b      	lsls	r3, r3, #2
    23c2:	4413      	add	r3, r2
    23c4:	687a      	ldr	r2, [r7, #4]
    23c6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    23c8:	21c0      	movs	r1, #192	; 0xc0
    23ca:	68f8      	ldr	r0, [r7, #12]
    23cc:	4b02      	ldr	r3, [pc, #8]	; (23d8 <hri_tccount32_write_CC_reg+0x2c>)
    23ce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    23d0:	bf00      	nop
    23d2:	3710      	adds	r7, #16
    23d4:	46bd      	mov	sp, r7
    23d6:	bd80      	pop	{r7, pc}
    23d8:	00002141 	.word	0x00002141

000023dc <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    23dc:	b580      	push	{r7, lr}
    23de:	b084      	sub	sp, #16
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    23e6:	6838      	ldr	r0, [r7, #0]
    23e8:	4b93      	ldr	r3, [pc, #588]	; (2638 <_timer_init+0x25c>)
    23ea:	4798      	blx	r3
    23ec:	4603      	mov	r3, r0
    23ee:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	683a      	ldr	r2, [r7, #0]
    23f4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    23f6:	228f      	movs	r2, #143	; 0x8f
    23f8:	4990      	ldr	r1, [pc, #576]	; (263c <_timer_init+0x260>)
    23fa:	2001      	movs	r0, #1
    23fc:	4b90      	ldr	r3, [pc, #576]	; (2640 <_timer_init+0x264>)
    23fe:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2400:	2101      	movs	r1, #1
    2402:	6838      	ldr	r0, [r7, #0]
    2404:	4b8f      	ldr	r3, [pc, #572]	; (2644 <_timer_init+0x268>)
    2406:	4798      	blx	r3
    2408:	4603      	mov	r3, r0
    240a:	f083 0301 	eor.w	r3, r3, #1
    240e:	b2db      	uxtb	r3, r3
    2410:	2b00      	cmp	r3, #0
    2412:	d011      	beq.n	2438 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2414:	2102      	movs	r1, #2
    2416:	6838      	ldr	r0, [r7, #0]
    2418:	4b8b      	ldr	r3, [pc, #556]	; (2648 <_timer_init+0x26c>)
    241a:	4798      	blx	r3
    241c:	4603      	mov	r3, r0
    241e:	2b00      	cmp	r3, #0
    2420:	d006      	beq.n	2430 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    2422:	6838      	ldr	r0, [r7, #0]
    2424:	4b89      	ldr	r3, [pc, #548]	; (264c <_timer_init+0x270>)
    2426:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    2428:	2102      	movs	r1, #2
    242a:	6838      	ldr	r0, [r7, #0]
    242c:	4b88      	ldr	r3, [pc, #544]	; (2650 <_timer_init+0x274>)
    242e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    2430:	2101      	movs	r1, #1
    2432:	6838      	ldr	r0, [r7, #0]
    2434:	4b87      	ldr	r3, [pc, #540]	; (2654 <_timer_init+0x278>)
    2436:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    2438:	2101      	movs	r1, #1
    243a:	6838      	ldr	r0, [r7, #0]
    243c:	4b84      	ldr	r3, [pc, #528]	; (2650 <_timer_init+0x274>)
    243e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2440:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2444:	4984      	ldr	r1, [pc, #528]	; (2658 <_timer_init+0x27c>)
    2446:	4613      	mov	r3, r2
    2448:	009b      	lsls	r3, r3, #2
    244a:	4413      	add	r3, r2
    244c:	009b      	lsls	r3, r3, #2
    244e:	440b      	add	r3, r1
    2450:	3304      	adds	r3, #4
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	4619      	mov	r1, r3
    2456:	6838      	ldr	r0, [r7, #0]
    2458:	4b7e      	ldr	r3, [pc, #504]	; (2654 <_timer_init+0x278>)
    245a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    245c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2460:	497d      	ldr	r1, [pc, #500]	; (2658 <_timer_init+0x27c>)
    2462:	4613      	mov	r3, r2
    2464:	009b      	lsls	r3, r3, #2
    2466:	4413      	add	r3, r2
    2468:	009b      	lsls	r3, r3, #2
    246a:	440b      	add	r3, r1
    246c:	330a      	adds	r3, #10
    246e:	781b      	ldrb	r3, [r3, #0]
    2470:	4619      	mov	r1, r3
    2472:	6838      	ldr	r0, [r7, #0]
    2474:	4b79      	ldr	r3, [pc, #484]	; (265c <_timer_init+0x280>)
    2476:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2478:	f997 200f 	ldrsb.w	r2, [r7, #15]
    247c:	4976      	ldr	r1, [pc, #472]	; (2658 <_timer_init+0x27c>)
    247e:	4613      	mov	r3, r2
    2480:	009b      	lsls	r3, r3, #2
    2482:	4413      	add	r3, r2
    2484:	009b      	lsls	r3, r3, #2
    2486:	440b      	add	r3, r1
    2488:	3308      	adds	r3, #8
    248a:	881b      	ldrh	r3, [r3, #0]
    248c:	4619      	mov	r1, r3
    248e:	6838      	ldr	r0, [r7, #0]
    2490:	4b73      	ldr	r3, [pc, #460]	; (2660 <_timer_init+0x284>)
    2492:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    2494:	2101      	movs	r1, #1
    2496:	6838      	ldr	r0, [r7, #0]
    2498:	4b72      	ldr	r3, [pc, #456]	; (2664 <_timer_init+0x288>)
    249a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    249c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24a0:	496d      	ldr	r1, [pc, #436]	; (2658 <_timer_init+0x27c>)
    24a2:	4613      	mov	r3, r2
    24a4:	009b      	lsls	r3, r3, #2
    24a6:	4413      	add	r3, r2
    24a8:	009b      	lsls	r3, r3, #2
    24aa:	440b      	add	r3, r1
    24ac:	3304      	adds	r3, #4
    24ae:	681b      	ldr	r3, [r3, #0]
    24b0:	f003 030c 	and.w	r3, r3, #12
    24b4:	2b08      	cmp	r3, #8
    24b6:	d11e      	bne.n	24f6 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    24b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24bc:	4966      	ldr	r1, [pc, #408]	; (2658 <_timer_init+0x27c>)
    24be:	4613      	mov	r3, r2
    24c0:	009b      	lsls	r3, r3, #2
    24c2:	4413      	add	r3, r2
    24c4:	009b      	lsls	r3, r3, #2
    24c6:	440b      	add	r3, r1
    24c8:	330c      	adds	r3, #12
    24ca:	681b      	ldr	r3, [r3, #0]
    24cc:	461a      	mov	r2, r3
    24ce:	2100      	movs	r1, #0
    24d0:	6838      	ldr	r0, [r7, #0]
    24d2:	4b65      	ldr	r3, [pc, #404]	; (2668 <_timer_init+0x28c>)
    24d4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    24d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24da:	495f      	ldr	r1, [pc, #380]	; (2658 <_timer_init+0x27c>)
    24dc:	4613      	mov	r3, r2
    24de:	009b      	lsls	r3, r3, #2
    24e0:	4413      	add	r3, r2
    24e2:	009b      	lsls	r3, r3, #2
    24e4:	440b      	add	r3, r1
    24e6:	3310      	adds	r3, #16
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	461a      	mov	r2, r3
    24ec:	2101      	movs	r1, #1
    24ee:	6838      	ldr	r0, [r7, #0]
    24f0:	4b5d      	ldr	r3, [pc, #372]	; (2668 <_timer_init+0x28c>)
    24f2:	4798      	blx	r3
    24f4:	e06a      	b.n	25cc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    24f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    24fa:	4957      	ldr	r1, [pc, #348]	; (2658 <_timer_init+0x27c>)
    24fc:	4613      	mov	r3, r2
    24fe:	009b      	lsls	r3, r3, #2
    2500:	4413      	add	r3, r2
    2502:	009b      	lsls	r3, r3, #2
    2504:	440b      	add	r3, r1
    2506:	3304      	adds	r3, #4
    2508:	681b      	ldr	r3, [r3, #0]
    250a:	f003 030c 	and.w	r3, r3, #12
    250e:	2b00      	cmp	r3, #0
    2510:	d120      	bne.n	2554 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2512:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2516:	4950      	ldr	r1, [pc, #320]	; (2658 <_timer_init+0x27c>)
    2518:	4613      	mov	r3, r2
    251a:	009b      	lsls	r3, r3, #2
    251c:	4413      	add	r3, r2
    251e:	009b      	lsls	r3, r3, #2
    2520:	440b      	add	r3, r1
    2522:	330c      	adds	r3, #12
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	b29b      	uxth	r3, r3
    2528:	461a      	mov	r2, r3
    252a:	2100      	movs	r1, #0
    252c:	6838      	ldr	r0, [r7, #0]
    252e:	4b4f      	ldr	r3, [pc, #316]	; (266c <_timer_init+0x290>)
    2530:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2532:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2536:	4948      	ldr	r1, [pc, #288]	; (2658 <_timer_init+0x27c>)
    2538:	4613      	mov	r3, r2
    253a:	009b      	lsls	r3, r3, #2
    253c:	4413      	add	r3, r2
    253e:	009b      	lsls	r3, r3, #2
    2540:	440b      	add	r3, r1
    2542:	3310      	adds	r3, #16
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	b29b      	uxth	r3, r3
    2548:	461a      	mov	r2, r3
    254a:	2101      	movs	r1, #1
    254c:	6838      	ldr	r0, [r7, #0]
    254e:	4b47      	ldr	r3, [pc, #284]	; (266c <_timer_init+0x290>)
    2550:	4798      	blx	r3
    2552:	e03b      	b.n	25cc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2554:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2558:	493f      	ldr	r1, [pc, #252]	; (2658 <_timer_init+0x27c>)
    255a:	4613      	mov	r3, r2
    255c:	009b      	lsls	r3, r3, #2
    255e:	4413      	add	r3, r2
    2560:	009b      	lsls	r3, r3, #2
    2562:	440b      	add	r3, r1
    2564:	3304      	adds	r3, #4
    2566:	681b      	ldr	r3, [r3, #0]
    2568:	f003 030c 	and.w	r3, r3, #12
    256c:	2b04      	cmp	r3, #4
    256e:	d12d      	bne.n	25cc <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2570:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2574:	4938      	ldr	r1, [pc, #224]	; (2658 <_timer_init+0x27c>)
    2576:	4613      	mov	r3, r2
    2578:	009b      	lsls	r3, r3, #2
    257a:	4413      	add	r3, r2
    257c:	009b      	lsls	r3, r3, #2
    257e:	440b      	add	r3, r1
    2580:	330c      	adds	r3, #12
    2582:	681b      	ldr	r3, [r3, #0]
    2584:	b2db      	uxtb	r3, r3
    2586:	461a      	mov	r2, r3
    2588:	2100      	movs	r1, #0
    258a:	6838      	ldr	r0, [r7, #0]
    258c:	4b38      	ldr	r3, [pc, #224]	; (2670 <_timer_init+0x294>)
    258e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2590:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2594:	4930      	ldr	r1, [pc, #192]	; (2658 <_timer_init+0x27c>)
    2596:	4613      	mov	r3, r2
    2598:	009b      	lsls	r3, r3, #2
    259a:	4413      	add	r3, r2
    259c:	009b      	lsls	r3, r3, #2
    259e:	440b      	add	r3, r1
    25a0:	3310      	adds	r3, #16
    25a2:	681b      	ldr	r3, [r3, #0]
    25a4:	b2db      	uxtb	r3, r3
    25a6:	461a      	mov	r2, r3
    25a8:	2101      	movs	r1, #1
    25aa:	6838      	ldr	r0, [r7, #0]
    25ac:	4b30      	ldr	r3, [pc, #192]	; (2670 <_timer_init+0x294>)
    25ae:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    25b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    25b4:	4928      	ldr	r1, [pc, #160]	; (2658 <_timer_init+0x27c>)
    25b6:	4613      	mov	r3, r2
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	4413      	add	r3, r2
    25bc:	009b      	lsls	r3, r3, #2
    25be:	440b      	add	r3, r1
    25c0:	330b      	adds	r3, #11
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	4619      	mov	r1, r3
    25c6:	6838      	ldr	r0, [r7, #0]
    25c8:	4b2a      	ldr	r3, [pc, #168]	; (2674 <_timer_init+0x298>)
    25ca:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    25cc:	6838      	ldr	r0, [r7, #0]
    25ce:	4b2a      	ldr	r3, [pc, #168]	; (2678 <_timer_init+0x29c>)
    25d0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    25d2:	6879      	ldr	r1, [r7, #4]
    25d4:	6838      	ldr	r0, [r7, #0]
    25d6:	4b29      	ldr	r3, [pc, #164]	; (267c <_timer_init+0x2a0>)
    25d8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    25da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    25de:	491e      	ldr	r1, [pc, #120]	; (2658 <_timer_init+0x27c>)
    25e0:	4613      	mov	r3, r2
    25e2:	009b      	lsls	r3, r3, #2
    25e4:	4413      	add	r3, r2
    25e6:	009b      	lsls	r3, r3, #2
    25e8:	440b      	add	r3, r1
    25ea:	3302      	adds	r3, #2
    25ec:	f9b3 3000 	ldrsh.w	r3, [r3]
    25f0:	4618      	mov	r0, r3
    25f2:	4b23      	ldr	r3, [pc, #140]	; (2680 <_timer_init+0x2a4>)
    25f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    25f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    25fa:	4917      	ldr	r1, [pc, #92]	; (2658 <_timer_init+0x27c>)
    25fc:	4613      	mov	r3, r2
    25fe:	009b      	lsls	r3, r3, #2
    2600:	4413      	add	r3, r2
    2602:	009b      	lsls	r3, r3, #2
    2604:	440b      	add	r3, r1
    2606:	3302      	adds	r3, #2
    2608:	f9b3 3000 	ldrsh.w	r3, [r3]
    260c:	4618      	mov	r0, r3
    260e:	4b1d      	ldr	r3, [pc, #116]	; (2684 <_timer_init+0x2a8>)
    2610:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    2612:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2616:	4910      	ldr	r1, [pc, #64]	; (2658 <_timer_init+0x27c>)
    2618:	4613      	mov	r3, r2
    261a:	009b      	lsls	r3, r3, #2
    261c:	4413      	add	r3, r2
    261e:	009b      	lsls	r3, r3, #2
    2620:	440b      	add	r3, r1
    2622:	3302      	adds	r3, #2
    2624:	f9b3 3000 	ldrsh.w	r3, [r3]
    2628:	4618      	mov	r0, r3
    262a:	4b17      	ldr	r3, [pc, #92]	; (2688 <_timer_init+0x2ac>)
    262c:	4798      	blx	r3

	return ERR_NONE;
    262e:	2300      	movs	r3, #0
}
    2630:	4618      	mov	r0, r3
    2632:	3710      	adds	r7, #16
    2634:	46bd      	mov	sp, r7
    2636:	bd80      	pop	{r7, pc}
    2638:	000027cd 	.word	0x000027cd
    263c:	000035a0 	.word	0x000035a0
    2640:	000013d9 	.word	0x000013d9
    2644:	00002165 	.word	0x00002165
    2648:	00002271 	.word	0x00002271
    264c:	00002249 	.word	0x00002249
    2650:	00002141 	.word	0x00002141
    2654:	000022a1 	.word	0x000022a1
    2658:	20000018 	.word	0x20000018
    265c:	00002301 	.word	0x00002301
    2660:	000022c5 	.word	0x000022c5
    2664:	000022e3 	.word	0x000022e3
    2668:	000023ad 	.word	0x000023ad
    266c:	00002379 	.word	0x00002379
    2670:	00002349 	.word	0x00002349
    2674:	00002321 	.word	0x00002321
    2678:	000021cf 	.word	0x000021cf
    267c:	00002835 	.word	0x00002835
    2680:	000020c1 	.word	0x000020c1
    2684:	00002105 	.word	0x00002105
    2688:	00002085 	.word	0x00002085

0000268c <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    268c:	b580      	push	{r7, lr}
    268e:	b082      	sub	sp, #8
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	68db      	ldr	r3, [r3, #12]
    2698:	4618      	mov	r0, r3
    269a:	4b03      	ldr	r3, [pc, #12]	; (26a8 <_timer_start+0x1c>)
    269c:	4798      	blx	r3
}
    269e:	bf00      	nop
    26a0:	3708      	adds	r7, #8
    26a2:	46bd      	mov	sp, r7
    26a4:	bd80      	pop	{r7, pc}
    26a6:	bf00      	nop
    26a8:	000021e9 	.word	0x000021e9

000026ac <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    26ac:	b580      	push	{r7, lr}
    26ae:	b082      	sub	sp, #8
    26b0:	af00      	add	r7, sp, #0
    26b2:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	68db      	ldr	r3, [r3, #12]
    26b8:	4618      	mov	r0, r3
    26ba:	4b03      	ldr	r3, [pc, #12]	; (26c8 <_timer_stop+0x1c>)
    26bc:	4798      	blx	r3
}
    26be:	bf00      	nop
    26c0:	3708      	adds	r7, #8
    26c2:	46bd      	mov	sp, r7
    26c4:	bd80      	pop	{r7, pc}
    26c6:	bf00      	nop
    26c8:	00002249 	.word	0x00002249

000026cc <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b082      	sub	sp, #8
    26d0:	af00      	add	r7, sp, #0
    26d2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	68db      	ldr	r3, [r3, #12]
    26d8:	4618      	mov	r0, r3
    26da:	4b03      	ldr	r3, [pc, #12]	; (26e8 <_timer_is_started+0x1c>)
    26dc:	4798      	blx	r3
    26de:	4603      	mov	r3, r0
}
    26e0:	4618      	mov	r0, r3
    26e2:	3708      	adds	r7, #8
    26e4:	46bd      	mov	sp, r7
    26e6:	bd80      	pop	{r7, pc}
    26e8:	00002211 	.word	0x00002211

000026ec <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    26ec:	b480      	push	{r7}
    26ee:	af00      	add	r7, sp, #0
	return NULL;
    26f0:	2300      	movs	r3, #0
}
    26f2:	4618      	mov	r0, r3
    26f4:	46bd      	mov	sp, r7
    26f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26fa:	4770      	bx	lr

000026fc <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b084      	sub	sp, #16
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	68db      	ldr	r3, [r3, #12]
    2708:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    270a:	68f8      	ldr	r0, [r7, #12]
    270c:	4b0e      	ldr	r3, [pc, #56]	; (2748 <_timer_set_irq+0x4c>)
    270e:	4798      	blx	r3
    2710:	4603      	mov	r3, r0
    2712:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    2714:	f240 1211 	movw	r2, #273	; 0x111
    2718:	490c      	ldr	r1, [pc, #48]	; (274c <_timer_set_irq+0x50>)
    271a:	2001      	movs	r0, #1
    271c:	4b0c      	ldr	r3, [pc, #48]	; (2750 <_timer_set_irq+0x54>)
    271e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    2720:	f997 200b 	ldrsb.w	r2, [r7, #11]
    2724:	490b      	ldr	r1, [pc, #44]	; (2754 <_timer_set_irq+0x58>)
    2726:	4613      	mov	r3, r2
    2728:	009b      	lsls	r3, r3, #2
    272a:	4413      	add	r3, r2
    272c:	009b      	lsls	r3, r3, #2
    272e:	440b      	add	r3, r1
    2730:	3302      	adds	r3, #2
    2732:	f9b3 3000 	ldrsh.w	r3, [r3]
    2736:	b2db      	uxtb	r3, r3
    2738:	4618      	mov	r0, r3
    273a:	4b07      	ldr	r3, [pc, #28]	; (2758 <_timer_set_irq+0x5c>)
    273c:	4798      	blx	r3
}
    273e:	bf00      	nop
    2740:	3710      	adds	r7, #16
    2742:	46bd      	mov	sp, r7
    2744:	bd80      	pop	{r7, pc}
    2746:	bf00      	nop
    2748:	000027cd 	.word	0x000027cd
    274c:	000035a0 	.word	0x000035a0
    2750:	000013d9 	.word	0x000013d9
    2754:	20000018 	.word	0x20000018
    2758:	00001565 	.word	0x00001565

0000275c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    275c:	b580      	push	{r7, lr}
    275e:	b084      	sub	sp, #16
    2760:	af00      	add	r7, sp, #0
    2762:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	68db      	ldr	r3, [r3, #12]
    2768:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    276a:	68f8      	ldr	r0, [r7, #12]
    276c:	4b07      	ldr	r3, [pc, #28]	; (278c <tc_interrupt_handler+0x30>)
    276e:	4798      	blx	r3
    2770:	4603      	mov	r3, r0
    2772:	2b00      	cmp	r3, #0
    2774:	d006      	beq.n	2784 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    2776:	68f8      	ldr	r0, [r7, #12]
    2778:	4b05      	ldr	r3, [pc, #20]	; (2790 <tc_interrupt_handler+0x34>)
    277a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	681b      	ldr	r3, [r3, #0]
    2780:	6878      	ldr	r0, [r7, #4]
    2782:	4798      	blx	r3
	}
}
    2784:	bf00      	nop
    2786:	3710      	adds	r7, #16
    2788:	46bd      	mov	sp, r7
    278a:	bd80      	pop	{r7, pc}
    278c:	0000218d 	.word	0x0000218d
    2790:	000021b5 	.word	0x000021b5

00002794 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    2794:	b580      	push	{r7, lr}
    2796:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    2798:	4b03      	ldr	r3, [pc, #12]	; (27a8 <TC0_Handler+0x14>)
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	4618      	mov	r0, r3
    279e:	4b03      	ldr	r3, [pc, #12]	; (27ac <TC0_Handler+0x18>)
    27a0:	4798      	blx	r3
}
    27a2:	bf00      	nop
    27a4:	bd80      	pop	{r7, pc}
    27a6:	bf00      	nop
    27a8:	200000d4 	.word	0x200000d4
    27ac:	0000275d 	.word	0x0000275d

000027b0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    27b0:	b580      	push	{r7, lr}
    27b2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    27b4:	4b03      	ldr	r3, [pc, #12]	; (27c4 <TC2_Handler+0x14>)
    27b6:	681b      	ldr	r3, [r3, #0]
    27b8:	4618      	mov	r0, r3
    27ba:	4b03      	ldr	r3, [pc, #12]	; (27c8 <TC2_Handler+0x18>)
    27bc:	4798      	blx	r3
}
    27be:	bf00      	nop
    27c0:	bd80      	pop	{r7, pc}
    27c2:	bf00      	nop
    27c4:	200000d8 	.word	0x200000d8
    27c8:	0000275d 	.word	0x0000275d

000027cc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	b084      	sub	sp, #16
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    27d4:	6878      	ldr	r0, [r7, #4]
    27d6:	4b13      	ldr	r3, [pc, #76]	; (2824 <get_tc_index+0x58>)
    27d8:	4798      	blx	r3
    27da:	4603      	mov	r3, r0
    27dc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    27de:	2300      	movs	r3, #0
    27e0:	73fb      	strb	r3, [r7, #15]
    27e2:	e010      	b.n	2806 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    27e4:	7bfa      	ldrb	r2, [r7, #15]
    27e6:	4910      	ldr	r1, [pc, #64]	; (2828 <get_tc_index+0x5c>)
    27e8:	4613      	mov	r3, r2
    27ea:	009b      	lsls	r3, r3, #2
    27ec:	4413      	add	r3, r2
    27ee:	009b      	lsls	r3, r3, #2
    27f0:	440b      	add	r3, r1
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	7bba      	ldrb	r2, [r7, #14]
    27f6:	429a      	cmp	r2, r3
    27f8:	d102      	bne.n	2800 <get_tc_index+0x34>
			return i;
    27fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27fe:	e00d      	b.n	281c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2800:	7bfb      	ldrb	r3, [r7, #15]
    2802:	3301      	adds	r3, #1
    2804:	73fb      	strb	r3, [r7, #15]
    2806:	7bfb      	ldrb	r3, [r7, #15]
    2808:	2b01      	cmp	r3, #1
    280a:	d9eb      	bls.n	27e4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    280c:	f44f 72a3 	mov.w	r2, #326	; 0x146
    2810:	4906      	ldr	r1, [pc, #24]	; (282c <get_tc_index+0x60>)
    2812:	2000      	movs	r0, #0
    2814:	4b06      	ldr	r3, [pc, #24]	; (2830 <get_tc_index+0x64>)
    2816:	4798      	blx	r3
	return -1;
    2818:	f04f 33ff 	mov.w	r3, #4294967295
}
    281c:	4618      	mov	r0, r3
    281e:	3710      	adds	r7, #16
    2820:	46bd      	mov	sp, r7
    2822:	bd80      	pop	{r7, pc}
    2824:	00002879 	.word	0x00002879
    2828:	20000018 	.word	0x20000018
    282c:	000035a0 	.word	0x000035a0
    2830:	000013d9 	.word	0x000013d9

00002834 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    2834:	b480      	push	{r7}
    2836:	b083      	sub	sp, #12
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
    283c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	4a09      	ldr	r2, [pc, #36]	; (2868 <_tc_init_irq_param+0x34>)
    2842:	4293      	cmp	r3, r2
    2844:	d102      	bne.n	284c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    2846:	4a09      	ldr	r2, [pc, #36]	; (286c <_tc_init_irq_param+0x38>)
    2848:	683b      	ldr	r3, [r7, #0]
    284a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	4a08      	ldr	r2, [pc, #32]	; (2870 <_tc_init_irq_param+0x3c>)
    2850:	4293      	cmp	r3, r2
    2852:	d102      	bne.n	285a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    2854:	4a07      	ldr	r2, [pc, #28]	; (2874 <_tc_init_irq_param+0x40>)
    2856:	683b      	ldr	r3, [r7, #0]
    2858:	6013      	str	r3, [r2, #0]
	}
}
    285a:	bf00      	nop
    285c:	370c      	adds	r7, #12
    285e:	46bd      	mov	sp, r7
    2860:	f85d 7b04 	ldr.w	r7, [sp], #4
    2864:	4770      	bx	lr
    2866:	bf00      	nop
    2868:	40003800 	.word	0x40003800
    286c:	200000d4 	.word	0x200000d4
    2870:	4101a000 	.word	0x4101a000
    2874:	200000d8 	.word	0x200000d8

00002878 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    2878:	b4b0      	push	{r4, r5, r7}
    287a:	b08d      	sub	sp, #52	; 0x34
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2880:	4b13      	ldr	r3, [pc, #76]	; (28d0 <_get_hardware_offset+0x58>)
    2882:	f107 040c 	add.w	r4, r7, #12
    2886:	461d      	mov	r5, r3
    2888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    288a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    288c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2894:	2300      	movs	r3, #0
    2896:	62fb      	str	r3, [r7, #44]	; 0x2c
    2898:	e010      	b.n	28bc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    289c:	009b      	lsls	r3, r3, #2
    289e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    28a2:	4413      	add	r3, r2
    28a4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    28a8:	461a      	mov	r2, r3
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	429a      	cmp	r2, r3
    28ae:	d102      	bne.n	28b6 <_get_hardware_offset+0x3e>
			return i;
    28b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28b2:	b2db      	uxtb	r3, r3
    28b4:	e006      	b.n	28c4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    28b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28b8:	3301      	adds	r3, #1
    28ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    28bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28be:	2b07      	cmp	r3, #7
    28c0:	d9eb      	bls.n	289a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    28c2:	2300      	movs	r3, #0
}
    28c4:	4618      	mov	r0, r3
    28c6:	3734      	adds	r7, #52	; 0x34
    28c8:	46bd      	mov	sp, r7
    28ca:	bcb0      	pop	{r4, r5, r7}
    28cc:	4770      	bx	lr
    28ce:	bf00      	nop
    28d0:	000035b4 	.word	0x000035b4

000028d4 <timer_task1_cb>:
// /* Define a pointer to access SmartEEPROM as bytes */
uint8_t *SmartEEPROM8 = (uint8_t *)SEEPROM_ADDR;


static void timer_task1_cb(const struct timer_task *const timer_task)
{	
    28d4:	b590      	push	{r4, r7, lr}
    28d6:	b089      	sub	sp, #36	; 0x24
    28d8:	af02      	add	r7, sp, #8
    28da:	6078      	str	r0, [r7, #4]
	//count
	s += 1;
    28dc:	4b17      	ldr	r3, [pc, #92]	; (293c <timer_task1_cb+0x68>)
    28de:	681b      	ldr	r3, [r3, #0]
    28e0:	3301      	adds	r3, #1
    28e2:	4a16      	ldr	r2, [pc, #88]	; (293c <timer_task1_cb+0x68>)
    28e4:	6013      	str	r3, [r2, #0]
	c += 1;
    28e6:	4b16      	ldr	r3, [pc, #88]	; (2940 <timer_task1_cb+0x6c>)
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	3301      	adds	r3, #1
    28ec:	4a14      	ldr	r2, [pc, #80]	; (2940 <timer_task1_cb+0x6c>)
    28ee:	6013      	str	r3, [r2, #0]
	
	if(s < 60){
    28f0:	4b12      	ldr	r3, [pc, #72]	; (293c <timer_task1_cb+0x68>)
    28f2:	681b      	ldr	r3, [r3, #0]
    28f4:	2b3b      	cmp	r3, #59	; 0x3b
    28f6:	dd07      	ble.n	2908 <timer_task1_cb+0x34>
	}else{
		s = 0;
    28f8:	4b10      	ldr	r3, [pc, #64]	; (293c <timer_task1_cb+0x68>)
    28fa:	2200      	movs	r2, #0
    28fc:	601a      	str	r2, [r3, #0]
		min += 1;
    28fe:	4b11      	ldr	r3, [pc, #68]	; (2944 <timer_task1_cb+0x70>)
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	3301      	adds	r3, #1
    2904:	4a0f      	ldr	r2, [pc, #60]	; (2944 <timer_task1_cb+0x70>)
    2906:	6013      	str	r3, [r2, #0]
	}
	
	//Send the timer count via UART every 1s
	char timeString[12];
	sprintf(timeString, "%02d:%02d<%4d>\n", min, s, c);
    2908:	4b0e      	ldr	r3, [pc, #56]	; (2944 <timer_task1_cb+0x70>)
    290a:	681a      	ldr	r2, [r3, #0]
    290c:	4b0b      	ldr	r3, [pc, #44]	; (293c <timer_task1_cb+0x68>)
    290e:	6819      	ldr	r1, [r3, #0]
    2910:	4b0b      	ldr	r3, [pc, #44]	; (2940 <timer_task1_cb+0x6c>)
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	f107 000c 	add.w	r0, r7, #12
    2918:	9300      	str	r3, [sp, #0]
    291a:	460b      	mov	r3, r1
    291c:	490a      	ldr	r1, [pc, #40]	; (2948 <timer_task1_cb+0x74>)
    291e:	4c0b      	ldr	r4, [pc, #44]	; (294c <timer_task1_cb+0x78>)
    2920:	47a0      	blx	r4
	io_write(io, (uint8_t *)timeString, 12);      
    2922:	4b0b      	ldr	r3, [pc, #44]	; (2950 <timer_task1_cb+0x7c>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	f107 010c 	add.w	r1, r7, #12
    292a:	220c      	movs	r2, #12
    292c:	4618      	mov	r0, r3
    292e:	4b09      	ldr	r3, [pc, #36]	; (2954 <timer_task1_cb+0x80>)
    2930:	4798      	blx	r3
}
    2932:	bf00      	nop
    2934:	371c      	adds	r7, #28
    2936:	46bd      	mov	sp, r7
    2938:	bd90      	pop	{r4, r7, pc}
    293a:	bf00      	nop
    293c:	200000f0 	.word	0x200000f0
    2940:	200000fc 	.word	0x200000fc
    2944:	200000f4 	.word	0x200000f4
    2948:	000035d4 	.word	0x000035d4
    294c:	00002be5 	.word	0x00002be5
    2950:	200000f8 	.word	0x200000f8
    2954:	00000d89 	.word	0x00000d89

00002958 <main>:


int main(void)
{
    2958:	b580      	push	{r7, lr}
    295a:	b082      	sub	sp, #8
    295c:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    295e:	4b6d      	ldr	r3, [pc, #436]	; (2b14 <main+0x1bc>)
    2960:	4798      	blx	r3
	
	bool clock_edge_event1 = 0;
    2962:	2300      	movs	r3, #0
    2964:	71fb      	strb	r3, [r7, #7]
	bool clock_edge_event2 = 0;
    2966:	2300      	movs	r3, #0
    2968:	71bb      	strb	r3, [r7, #6]
	bool clock_edge_event3 = 0;
    296a:	2300      	movs	r3, #0
    296c:	717b      	strb	r3, [r7, #5]
	bool clock_edge_event4 = 0;
    296e:	2300      	movs	r3, #0
    2970:	713b      	strb	r3, [r7, #4]
	
	/* Initialization of the UART communication */
	usart_sync_get_io_descriptor(&USART_0, &io);
    2972:	4969      	ldr	r1, [pc, #420]	; (2b18 <main+0x1c0>)
    2974:	4869      	ldr	r0, [pc, #420]	; (2b1c <main+0x1c4>)
    2976:	4b6a      	ldr	r3, [pc, #424]	; (2b20 <main+0x1c8>)
    2978:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    297a:	4868      	ldr	r0, [pc, #416]	; (2b1c <main+0x1c4>)
    297c:	4b69      	ldr	r3, [pc, #420]	; (2b24 <main+0x1cc>)
    297e:	4798      	blx	r3
	
	// Timer configuration: every 1s execute the task
	task1.interval = 25;
    2980:	4b69      	ldr	r3, [pc, #420]	; (2b28 <main+0x1d0>)
    2982:	2219      	movs	r2, #25
    2984:	609a      	str	r2, [r3, #8]
	task1.cb = timer_task1_cb;
    2986:	4b68      	ldr	r3, [pc, #416]	; (2b28 <main+0x1d0>)
    2988:	4a68      	ldr	r2, [pc, #416]	; (2b2c <main+0x1d4>)
    298a:	60da      	str	r2, [r3, #12]
	task1.mode = TIMER_TASK_REPEAT;
    298c:	4b66      	ldr	r3, [pc, #408]	; (2b28 <main+0x1d0>)
    298e:	2201      	movs	r2, #1
    2990:	741a      	strb	r2, [r3, #16]
	// Add timer task
	timer_add_task(&TIMER_0, &task1);
    2992:	4965      	ldr	r1, [pc, #404]	; (2b28 <main+0x1d0>)
    2994:	4866      	ldr	r0, [pc, #408]	; (2b30 <main+0x1d8>)
    2996:	4b67      	ldr	r3, [pc, #412]	; (2b34 <main+0x1dc>)
    2998:	4798      	blx	r3
	
	
	while (1){
		
		//Detect the input from the DIP_SWITCH
		clock_edge_event1 = edge_detector(PORT->Group[CODE_INPUT1/32].IN.reg & (1<<(CODE_INPUT1%32)),0); 
    299a:	4b67      	ldr	r3, [pc, #412]	; (2b38 <main+0x1e0>)
    299c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    29a0:	f003 0320 	and.w	r3, r3, #32
    29a4:	2b00      	cmp	r3, #0
    29a6:	bf14      	ite	ne
    29a8:	2301      	movne	r3, #1
    29aa:	2300      	moveq	r3, #0
    29ac:	b2db      	uxtb	r3, r3
    29ae:	2100      	movs	r1, #0
    29b0:	4618      	mov	r0, r3
    29b2:	4b62      	ldr	r3, [pc, #392]	; (2b3c <main+0x1e4>)
    29b4:	4798      	blx	r3
    29b6:	4603      	mov	r3, r0
    29b8:	71fb      	strb	r3, [r7, #7]
		clock_edge_event2 = edge_detector(PORT->Group[CODE_INPUT2/32].IN.reg & (1<<(CODE_INPUT2%32)),1);  
    29ba:	4b5f      	ldr	r3, [pc, #380]	; (2b38 <main+0x1e0>)
    29bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    29c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    29c4:	2b00      	cmp	r3, #0
    29c6:	bf14      	ite	ne
    29c8:	2301      	movne	r3, #1
    29ca:	2300      	moveq	r3, #0
    29cc:	b2db      	uxtb	r3, r3
    29ce:	2101      	movs	r1, #1
    29d0:	4618      	mov	r0, r3
    29d2:	4b5a      	ldr	r3, [pc, #360]	; (2b3c <main+0x1e4>)
    29d4:	4798      	blx	r3
    29d6:	4603      	mov	r3, r0
    29d8:	71bb      	strb	r3, [r7, #6]
		clock_edge_event3 = edge_detector(PORT->Group[CODE_INPUT3/32].IN.reg & (1<<(CODE_INPUT3%32)),2);
    29da:	4b57      	ldr	r3, [pc, #348]	; (2b38 <main+0x1e0>)
    29dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    29e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    29e4:	2b00      	cmp	r3, #0
    29e6:	bf14      	ite	ne
    29e8:	2301      	movne	r3, #1
    29ea:	2300      	moveq	r3, #0
    29ec:	b2db      	uxtb	r3, r3
    29ee:	2102      	movs	r1, #2
    29f0:	4618      	mov	r0, r3
    29f2:	4b52      	ldr	r3, [pc, #328]	; (2b3c <main+0x1e4>)
    29f4:	4798      	blx	r3
    29f6:	4603      	mov	r3, r0
    29f8:	717b      	strb	r3, [r7, #5]
		clock_edge_event4 = edge_detector(PORT->Group[CODE_INPUT4/32].IN.reg & (1<<(CODE_INPUT4%32)),3);
    29fa:	4b4f      	ldr	r3, [pc, #316]	; (2b38 <main+0x1e0>)
    29fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    2a04:	2b00      	cmp	r3, #0
    2a06:	bf14      	ite	ne
    2a08:	2301      	movne	r3, #1
    2a0a:	2300      	moveq	r3, #0
    2a0c:	b2db      	uxtb	r3, r3
    2a0e:	2103      	movs	r1, #3
    2a10:	4618      	mov	r0, r3
    2a12:	4b4a      	ldr	r3, [pc, #296]	; (2b3c <main+0x1e4>)
    2a14:	4798      	blx	r3
    2a16:	4603      	mov	r3, r0
    2a18:	713b      	strb	r3, [r7, #4]
		
		if(clock_edge_event1 && !clock_edge_event2 && !clock_edge_event3 && !clock_edge_event4){
    2a1a:	79fb      	ldrb	r3, [r7, #7]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d015      	beq.n	2a4c <main+0xf4>
    2a20:	79bb      	ldrb	r3, [r7, #6]
    2a22:	f083 0301 	eor.w	r3, r3, #1
    2a26:	b2db      	uxtb	r3, r3
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d00f      	beq.n	2a4c <main+0xf4>
    2a2c:	797b      	ldrb	r3, [r7, #5]
    2a2e:	f083 0301 	eor.w	r3, r3, #1
    2a32:	b2db      	uxtb	r3, r3
    2a34:	2b00      	cmp	r3, #0
    2a36:	d009      	beq.n	2a4c <main+0xf4>
    2a38:	793b      	ldrb	r3, [r7, #4]
    2a3a:	f083 0301 	eor.w	r3, r3, #1
    2a3e:	b2db      	uxtb	r3, r3
    2a40:	2b00      	cmp	r3, #0
    2a42:	d003      	beq.n	2a4c <main+0xf4>
			timer_start(&TIMER_0);
    2a44:	483a      	ldr	r0, [pc, #232]	; (2b30 <main+0x1d8>)
    2a46:	4b3e      	ldr	r3, [pc, #248]	; (2b40 <main+0x1e8>)
    2a48:	4798      	blx	r3
    2a4a:	e062      	b.n	2b12 <main+0x1ba>
		}else if(!clock_edge_event1 && clock_edge_event2 && !clock_edge_event3 && !clock_edge_event4){
    2a4c:	79fb      	ldrb	r3, [r7, #7]
    2a4e:	f083 0301 	eor.w	r3, r3, #1
    2a52:	b2db      	uxtb	r3, r3
    2a54:	2b00      	cmp	r3, #0
    2a56:	d012      	beq.n	2a7e <main+0x126>
    2a58:	79bb      	ldrb	r3, [r7, #6]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d00f      	beq.n	2a7e <main+0x126>
    2a5e:	797b      	ldrb	r3, [r7, #5]
    2a60:	f083 0301 	eor.w	r3, r3, #1
    2a64:	b2db      	uxtb	r3, r3
    2a66:	2b00      	cmp	r3, #0
    2a68:	d009      	beq.n	2a7e <main+0x126>
    2a6a:	793b      	ldrb	r3, [r7, #4]
    2a6c:	f083 0301 	eor.w	r3, r3, #1
    2a70:	b2db      	uxtb	r3, r3
    2a72:	2b00      	cmp	r3, #0
    2a74:	d003      	beq.n	2a7e <main+0x126>
			timer_stop(&TIMER_0);
    2a76:	482e      	ldr	r0, [pc, #184]	; (2b30 <main+0x1d8>)
    2a78:	4b32      	ldr	r3, [pc, #200]	; (2b44 <main+0x1ec>)
    2a7a:	4798      	blx	r3
    2a7c:	e049      	b.n	2b12 <main+0x1ba>
		}else if(!clock_edge_event1 && !clock_edge_event2 && clock_edge_event3 && !clock_edge_event4){
    2a7e:	79fb      	ldrb	r3, [r7, #7]
    2a80:	f083 0301 	eor.w	r3, r3, #1
    2a84:	b2db      	uxtb	r3, r3
    2a86:	2b00      	cmp	r3, #0
    2a88:	d015      	beq.n	2ab6 <main+0x15e>
    2a8a:	79bb      	ldrb	r3, [r7, #6]
    2a8c:	f083 0301 	eor.w	r3, r3, #1
    2a90:	b2db      	uxtb	r3, r3
    2a92:	2b00      	cmp	r3, #0
    2a94:	d00f      	beq.n	2ab6 <main+0x15e>
    2a96:	797b      	ldrb	r3, [r7, #5]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d00c      	beq.n	2ab6 <main+0x15e>
    2a9c:	793b      	ldrb	r3, [r7, #4]
    2a9e:	f083 0301 	eor.w	r3, r3, #1
    2aa2:	b2db      	uxtb	r3, r3
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d006      	beq.n	2ab6 <main+0x15e>
			min = 0;
    2aa8:	4b27      	ldr	r3, [pc, #156]	; (2b48 <main+0x1f0>)
    2aaa:	2200      	movs	r2, #0
    2aac:	601a      	str	r2, [r3, #0]
			s = 0;
    2aae:	4b27      	ldr	r3, [pc, #156]	; (2b4c <main+0x1f4>)
    2ab0:	2200      	movs	r2, #0
    2ab2:	601a      	str	r2, [r3, #0]
    2ab4:	e02d      	b.n	2b12 <main+0x1ba>
		}else if(!clock_edge_event1 && !clock_edge_event2 && !clock_edge_event3 && clock_edge_event4){
    2ab6:	79fb      	ldrb	r3, [r7, #7]
    2ab8:	f083 0301 	eor.w	r3, r3, #1
    2abc:	b2db      	uxtb	r3, r3
    2abe:	2b00      	cmp	r3, #0
    2ac0:	f43f af6b 	beq.w	299a <main+0x42>
    2ac4:	79bb      	ldrb	r3, [r7, #6]
    2ac6:	f083 0301 	eor.w	r3, r3, #1
    2aca:	b2db      	uxtb	r3, r3
    2acc:	2b00      	cmp	r3, #0
    2ace:	f43f af64 	beq.w	299a <main+0x42>
    2ad2:	797b      	ldrb	r3, [r7, #5]
    2ad4:	f083 0301 	eor.w	r3, r3, #1
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	2b00      	cmp	r3, #0
    2adc:	f43f af5d 	beq.w	299a <main+0x42>
    2ae0:	793b      	ldrb	r3, [r7, #4]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	f43f af59 	beq.w	299a <main+0x42>
			//Store the value to EEPROM
			SmartEEPROM8[MEM_ADDR] = min;
    2ae8:	4b19      	ldr	r3, [pc, #100]	; (2b50 <main+0x1f8>)
    2aea:	681b      	ldr	r3, [r3, #0]
    2aec:	330a      	adds	r3, #10
    2aee:	4a16      	ldr	r2, [pc, #88]	; (2b48 <main+0x1f0>)
    2af0:	6812      	ldr	r2, [r2, #0]
    2af2:	b2d2      	uxtb	r2, r2
    2af4:	701a      	strb	r2, [r3, #0]
			SmartEEPROM8[MEM_ADDR+1] = s;
    2af6:	4b16      	ldr	r3, [pc, #88]	; (2b50 <main+0x1f8>)
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	330b      	adds	r3, #11
    2afc:	4a13      	ldr	r2, [pc, #76]	; (2b4c <main+0x1f4>)
    2afe:	6812      	ldr	r2, [r2, #0]
    2b00:	b2d2      	uxtb	r2, r2
    2b02:	701a      	strb	r2, [r3, #0]
			SmartEEPROM8[MEM_ADDR+2] = c;
    2b04:	4b12      	ldr	r3, [pc, #72]	; (2b50 <main+0x1f8>)
    2b06:	681b      	ldr	r3, [r3, #0]
    2b08:	330c      	adds	r3, #12
    2b0a:	4a12      	ldr	r2, [pc, #72]	; (2b54 <main+0x1fc>)
    2b0c:	6812      	ldr	r2, [r2, #0]
    2b0e:	b2d2      	uxtb	r2, r2
    2b10:	701a      	strb	r2, [r3, #0]
		clock_edge_event1 = edge_detector(PORT->Group[CODE_INPUT1/32].IN.reg & (1<<(CODE_INPUT1%32)),0); 
    2b12:	e742      	b.n	299a <main+0x42>
    2b14:	000002d1 	.word	0x000002d1
    2b18:	200000f8 	.word	0x200000f8
    2b1c:	20000124 	.word	0x20000124
    2b20:	00001239 	.word	0x00001239
    2b24:	000011f9 	.word	0x000011f9
    2b28:	200000dc 	.word	0x200000dc
    2b2c:	000028d5 	.word	0x000028d5
    2b30:	20000130 	.word	0x20000130
    2b34:	00000f25 	.word	0x00000f25
    2b38:	41008000 	.word	0x41008000
    2b3c:	000002e1 	.word	0x000002e1
    2b40:	00000e75 	.word	0x00000e75
    2b44:	00000ec9 	.word	0x00000ec9
    2b48:	200000f4 	.word	0x200000f4
    2b4c:	200000f0 	.word	0x200000f0
    2b50:	20000040 	.word	0x20000040
    2b54:	200000fc 	.word	0x200000fc

00002b58 <hri_tcc_clear_INTFLAG_reg>:
{
    2b58:	b480      	push	{r7}
    2b5a:	b083      	sub	sp, #12
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
    2b60:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	683a      	ldr	r2, [r7, #0]
    2b66:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2b68:	bf00      	nop
    2b6a:	370c      	adds	r7, #12
    2b6c:	46bd      	mov	sp, r7
    2b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b72:	4770      	bx	lr

00002b74 <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    2b74:	b580      	push	{r7, lr}
    2b76:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    2b78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2b7c:	4804      	ldr	r0, [pc, #16]	; (2b90 <TCC0_1_Handler+0x1c>)
    2b7e:	4b05      	ldr	r3, [pc, #20]	; (2b94 <TCC0_1_Handler+0x20>)
    2b80:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    2b82:	4b05      	ldr	r3, [pc, #20]	; (2b98 <TCC0_1_Handler+0x24>)
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	4802      	ldr	r0, [pc, #8]	; (2b90 <TCC0_1_Handler+0x1c>)
    2b88:	4798      	blx	r3
}
    2b8a:	bf00      	nop
    2b8c:	bd80      	pop	{r7, pc}
    2b8e:	bf00      	nop
    2b90:	41016000 	.word	0x41016000
    2b94:	00002b59 	.word	0x00002b59
    2b98:	2000015c 	.word	0x2000015c

00002b9c <__libc_init_array>:
    2b9c:	b570      	push	{r4, r5, r6, lr}
    2b9e:	4e0d      	ldr	r6, [pc, #52]	; (2bd4 <__libc_init_array+0x38>)
    2ba0:	4c0d      	ldr	r4, [pc, #52]	; (2bd8 <__libc_init_array+0x3c>)
    2ba2:	1ba4      	subs	r4, r4, r6
    2ba4:	10a4      	asrs	r4, r4, #2
    2ba6:	2500      	movs	r5, #0
    2ba8:	42a5      	cmp	r5, r4
    2baa:	d109      	bne.n	2bc0 <__libc_init_array+0x24>
    2bac:	4e0b      	ldr	r6, [pc, #44]	; (2bdc <__libc_init_array+0x40>)
    2bae:	4c0c      	ldr	r4, [pc, #48]	; (2be0 <__libc_init_array+0x44>)
    2bb0:	f000 fd62 	bl	3678 <_init>
    2bb4:	1ba4      	subs	r4, r4, r6
    2bb6:	10a4      	asrs	r4, r4, #2
    2bb8:	2500      	movs	r5, #0
    2bba:	42a5      	cmp	r5, r4
    2bbc:	d105      	bne.n	2bca <__libc_init_array+0x2e>
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
    2bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2bc4:	4798      	blx	r3
    2bc6:	3501      	adds	r5, #1
    2bc8:	e7ee      	b.n	2ba8 <__libc_init_array+0xc>
    2bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2bce:	4798      	blx	r3
    2bd0:	3501      	adds	r5, #1
    2bd2:	e7f2      	b.n	2bba <__libc_init_array+0x1e>
    2bd4:	00003684 	.word	0x00003684
    2bd8:	00003684 	.word	0x00003684
    2bdc:	00003684 	.word	0x00003684
    2be0:	00003688 	.word	0x00003688

00002be4 <siprintf>:
    2be4:	b40e      	push	{r1, r2, r3}
    2be6:	b500      	push	{lr}
    2be8:	b09c      	sub	sp, #112	; 0x70
    2bea:	f44f 7102 	mov.w	r1, #520	; 0x208
    2bee:	ab1d      	add	r3, sp, #116	; 0x74
    2bf0:	f8ad 1014 	strh.w	r1, [sp, #20]
    2bf4:	9002      	str	r0, [sp, #8]
    2bf6:	9006      	str	r0, [sp, #24]
    2bf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2bfc:	480a      	ldr	r0, [pc, #40]	; (2c28 <siprintf+0x44>)
    2bfe:	9104      	str	r1, [sp, #16]
    2c00:	9107      	str	r1, [sp, #28]
    2c02:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2c06:	f853 2b04 	ldr.w	r2, [r3], #4
    2c0a:	f8ad 1016 	strh.w	r1, [sp, #22]
    2c0e:	6800      	ldr	r0, [r0, #0]
    2c10:	9301      	str	r3, [sp, #4]
    2c12:	a902      	add	r1, sp, #8
    2c14:	f000 f8c4 	bl	2da0 <_svfiprintf_r>
    2c18:	9b02      	ldr	r3, [sp, #8]
    2c1a:	2200      	movs	r2, #0
    2c1c:	701a      	strb	r2, [r3, #0]
    2c1e:	b01c      	add	sp, #112	; 0x70
    2c20:	f85d eb04 	ldr.w	lr, [sp], #4
    2c24:	b003      	add	sp, #12
    2c26:	4770      	bx	lr
    2c28:	20000044 	.word	0x20000044

00002c2c <_malloc_r>:
    2c2c:	b570      	push	{r4, r5, r6, lr}
    2c2e:	1ccd      	adds	r5, r1, #3
    2c30:	f025 0503 	bic.w	r5, r5, #3
    2c34:	3508      	adds	r5, #8
    2c36:	2d0c      	cmp	r5, #12
    2c38:	bf38      	it	cc
    2c3a:	250c      	movcc	r5, #12
    2c3c:	2d00      	cmp	r5, #0
    2c3e:	4606      	mov	r6, r0
    2c40:	db01      	blt.n	2c46 <_malloc_r+0x1a>
    2c42:	42a9      	cmp	r1, r5
    2c44:	d903      	bls.n	2c4e <_malloc_r+0x22>
    2c46:	230c      	movs	r3, #12
    2c48:	6033      	str	r3, [r6, #0]
    2c4a:	2000      	movs	r0, #0
    2c4c:	bd70      	pop	{r4, r5, r6, pc}
    2c4e:	f000 fbbc 	bl	33ca <__malloc_lock>
    2c52:	4a23      	ldr	r2, [pc, #140]	; (2ce0 <_malloc_r+0xb4>)
    2c54:	6814      	ldr	r4, [r2, #0]
    2c56:	4621      	mov	r1, r4
    2c58:	b991      	cbnz	r1, 2c80 <_malloc_r+0x54>
    2c5a:	4c22      	ldr	r4, [pc, #136]	; (2ce4 <_malloc_r+0xb8>)
    2c5c:	6823      	ldr	r3, [r4, #0]
    2c5e:	b91b      	cbnz	r3, 2c68 <_malloc_r+0x3c>
    2c60:	4630      	mov	r0, r6
    2c62:	f000 fb27 	bl	32b4 <_sbrk_r>
    2c66:	6020      	str	r0, [r4, #0]
    2c68:	4629      	mov	r1, r5
    2c6a:	4630      	mov	r0, r6
    2c6c:	f000 fb22 	bl	32b4 <_sbrk_r>
    2c70:	1c43      	adds	r3, r0, #1
    2c72:	d126      	bne.n	2cc2 <_malloc_r+0x96>
    2c74:	230c      	movs	r3, #12
    2c76:	6033      	str	r3, [r6, #0]
    2c78:	4630      	mov	r0, r6
    2c7a:	f000 fba7 	bl	33cc <__malloc_unlock>
    2c7e:	e7e4      	b.n	2c4a <_malloc_r+0x1e>
    2c80:	680b      	ldr	r3, [r1, #0]
    2c82:	1b5b      	subs	r3, r3, r5
    2c84:	d41a      	bmi.n	2cbc <_malloc_r+0x90>
    2c86:	2b0b      	cmp	r3, #11
    2c88:	d90f      	bls.n	2caa <_malloc_r+0x7e>
    2c8a:	600b      	str	r3, [r1, #0]
    2c8c:	50cd      	str	r5, [r1, r3]
    2c8e:	18cc      	adds	r4, r1, r3
    2c90:	4630      	mov	r0, r6
    2c92:	f000 fb9b 	bl	33cc <__malloc_unlock>
    2c96:	f104 000b 	add.w	r0, r4, #11
    2c9a:	1d23      	adds	r3, r4, #4
    2c9c:	f020 0007 	bic.w	r0, r0, #7
    2ca0:	1ac3      	subs	r3, r0, r3
    2ca2:	d01b      	beq.n	2cdc <_malloc_r+0xb0>
    2ca4:	425a      	negs	r2, r3
    2ca6:	50e2      	str	r2, [r4, r3]
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	428c      	cmp	r4, r1
    2cac:	bf0d      	iteet	eq
    2cae:	6863      	ldreq	r3, [r4, #4]
    2cb0:	684b      	ldrne	r3, [r1, #4]
    2cb2:	6063      	strne	r3, [r4, #4]
    2cb4:	6013      	streq	r3, [r2, #0]
    2cb6:	bf18      	it	ne
    2cb8:	460c      	movne	r4, r1
    2cba:	e7e9      	b.n	2c90 <_malloc_r+0x64>
    2cbc:	460c      	mov	r4, r1
    2cbe:	6849      	ldr	r1, [r1, #4]
    2cc0:	e7ca      	b.n	2c58 <_malloc_r+0x2c>
    2cc2:	1cc4      	adds	r4, r0, #3
    2cc4:	f024 0403 	bic.w	r4, r4, #3
    2cc8:	42a0      	cmp	r0, r4
    2cca:	d005      	beq.n	2cd8 <_malloc_r+0xac>
    2ccc:	1a21      	subs	r1, r4, r0
    2cce:	4630      	mov	r0, r6
    2cd0:	f000 faf0 	bl	32b4 <_sbrk_r>
    2cd4:	3001      	adds	r0, #1
    2cd6:	d0cd      	beq.n	2c74 <_malloc_r+0x48>
    2cd8:	6025      	str	r5, [r4, #0]
    2cda:	e7d9      	b.n	2c90 <_malloc_r+0x64>
    2cdc:	bd70      	pop	{r4, r5, r6, pc}
    2cde:	bf00      	nop
    2ce0:	20000100 	.word	0x20000100
    2ce4:	20000104 	.word	0x20000104

00002ce8 <__ssputs_r>:
    2ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cec:	688e      	ldr	r6, [r1, #8]
    2cee:	429e      	cmp	r6, r3
    2cf0:	4682      	mov	sl, r0
    2cf2:	460c      	mov	r4, r1
    2cf4:	4691      	mov	r9, r2
    2cf6:	4698      	mov	r8, r3
    2cf8:	d835      	bhi.n	2d66 <__ssputs_r+0x7e>
    2cfa:	898a      	ldrh	r2, [r1, #12]
    2cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
    2d00:	d031      	beq.n	2d66 <__ssputs_r+0x7e>
    2d02:	6825      	ldr	r5, [r4, #0]
    2d04:	6909      	ldr	r1, [r1, #16]
    2d06:	1a6f      	subs	r7, r5, r1
    2d08:	6965      	ldr	r5, [r4, #20]
    2d0a:	2302      	movs	r3, #2
    2d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2d10:	fb95 f5f3 	sdiv	r5, r5, r3
    2d14:	f108 0301 	add.w	r3, r8, #1
    2d18:	443b      	add	r3, r7
    2d1a:	429d      	cmp	r5, r3
    2d1c:	bf38      	it	cc
    2d1e:	461d      	movcc	r5, r3
    2d20:	0553      	lsls	r3, r2, #21
    2d22:	d531      	bpl.n	2d88 <__ssputs_r+0xa0>
    2d24:	4629      	mov	r1, r5
    2d26:	f7ff ff81 	bl	2c2c <_malloc_r>
    2d2a:	4606      	mov	r6, r0
    2d2c:	b950      	cbnz	r0, 2d44 <__ssputs_r+0x5c>
    2d2e:	230c      	movs	r3, #12
    2d30:	f8ca 3000 	str.w	r3, [sl]
    2d34:	89a3      	ldrh	r3, [r4, #12]
    2d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d3a:	81a3      	strh	r3, [r4, #12]
    2d3c:	f04f 30ff 	mov.w	r0, #4294967295
    2d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d44:	463a      	mov	r2, r7
    2d46:	6921      	ldr	r1, [r4, #16]
    2d48:	f000 fb1a 	bl	3380 <memcpy>
    2d4c:	89a3      	ldrh	r3, [r4, #12]
    2d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    2d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2d56:	81a3      	strh	r3, [r4, #12]
    2d58:	6126      	str	r6, [r4, #16]
    2d5a:	6165      	str	r5, [r4, #20]
    2d5c:	443e      	add	r6, r7
    2d5e:	1bed      	subs	r5, r5, r7
    2d60:	6026      	str	r6, [r4, #0]
    2d62:	60a5      	str	r5, [r4, #8]
    2d64:	4646      	mov	r6, r8
    2d66:	4546      	cmp	r6, r8
    2d68:	bf28      	it	cs
    2d6a:	4646      	movcs	r6, r8
    2d6c:	4632      	mov	r2, r6
    2d6e:	4649      	mov	r1, r9
    2d70:	6820      	ldr	r0, [r4, #0]
    2d72:	f000 fb10 	bl	3396 <memmove>
    2d76:	68a3      	ldr	r3, [r4, #8]
    2d78:	1b9b      	subs	r3, r3, r6
    2d7a:	60a3      	str	r3, [r4, #8]
    2d7c:	6823      	ldr	r3, [r4, #0]
    2d7e:	441e      	add	r6, r3
    2d80:	6026      	str	r6, [r4, #0]
    2d82:	2000      	movs	r0, #0
    2d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d88:	462a      	mov	r2, r5
    2d8a:	f000 fb6f 	bl	346c <_realloc_r>
    2d8e:	4606      	mov	r6, r0
    2d90:	2800      	cmp	r0, #0
    2d92:	d1e1      	bne.n	2d58 <__ssputs_r+0x70>
    2d94:	6921      	ldr	r1, [r4, #16]
    2d96:	4650      	mov	r0, sl
    2d98:	f000 fb1a 	bl	33d0 <_free_r>
    2d9c:	e7c7      	b.n	2d2e <__ssputs_r+0x46>
	...

00002da0 <_svfiprintf_r>:
    2da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2da4:	b09d      	sub	sp, #116	; 0x74
    2da6:	4680      	mov	r8, r0
    2da8:	9303      	str	r3, [sp, #12]
    2daa:	898b      	ldrh	r3, [r1, #12]
    2dac:	061c      	lsls	r4, r3, #24
    2dae:	460d      	mov	r5, r1
    2db0:	4616      	mov	r6, r2
    2db2:	d50f      	bpl.n	2dd4 <_svfiprintf_r+0x34>
    2db4:	690b      	ldr	r3, [r1, #16]
    2db6:	b96b      	cbnz	r3, 2dd4 <_svfiprintf_r+0x34>
    2db8:	2140      	movs	r1, #64	; 0x40
    2dba:	f7ff ff37 	bl	2c2c <_malloc_r>
    2dbe:	6028      	str	r0, [r5, #0]
    2dc0:	6128      	str	r0, [r5, #16]
    2dc2:	b928      	cbnz	r0, 2dd0 <_svfiprintf_r+0x30>
    2dc4:	230c      	movs	r3, #12
    2dc6:	f8c8 3000 	str.w	r3, [r8]
    2dca:	f04f 30ff 	mov.w	r0, #4294967295
    2dce:	e0c5      	b.n	2f5c <_svfiprintf_r+0x1bc>
    2dd0:	2340      	movs	r3, #64	; 0x40
    2dd2:	616b      	str	r3, [r5, #20]
    2dd4:	2300      	movs	r3, #0
    2dd6:	9309      	str	r3, [sp, #36]	; 0x24
    2dd8:	2320      	movs	r3, #32
    2dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2dde:	2330      	movs	r3, #48	; 0x30
    2de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2de4:	f04f 0b01 	mov.w	fp, #1
    2de8:	4637      	mov	r7, r6
    2dea:	463c      	mov	r4, r7
    2dec:	f814 3b01 	ldrb.w	r3, [r4], #1
    2df0:	2b00      	cmp	r3, #0
    2df2:	d13c      	bne.n	2e6e <_svfiprintf_r+0xce>
    2df4:	ebb7 0a06 	subs.w	sl, r7, r6
    2df8:	d00b      	beq.n	2e12 <_svfiprintf_r+0x72>
    2dfa:	4653      	mov	r3, sl
    2dfc:	4632      	mov	r2, r6
    2dfe:	4629      	mov	r1, r5
    2e00:	4640      	mov	r0, r8
    2e02:	f7ff ff71 	bl	2ce8 <__ssputs_r>
    2e06:	3001      	adds	r0, #1
    2e08:	f000 80a3 	beq.w	2f52 <_svfiprintf_r+0x1b2>
    2e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e0e:	4453      	add	r3, sl
    2e10:	9309      	str	r3, [sp, #36]	; 0x24
    2e12:	783b      	ldrb	r3, [r7, #0]
    2e14:	2b00      	cmp	r3, #0
    2e16:	f000 809c 	beq.w	2f52 <_svfiprintf_r+0x1b2>
    2e1a:	2300      	movs	r3, #0
    2e1c:	f04f 32ff 	mov.w	r2, #4294967295
    2e20:	9304      	str	r3, [sp, #16]
    2e22:	9307      	str	r3, [sp, #28]
    2e24:	9205      	str	r2, [sp, #20]
    2e26:	9306      	str	r3, [sp, #24]
    2e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2e2c:	931a      	str	r3, [sp, #104]	; 0x68
    2e2e:	2205      	movs	r2, #5
    2e30:	7821      	ldrb	r1, [r4, #0]
    2e32:	4850      	ldr	r0, [pc, #320]	; (2f74 <_svfiprintf_r+0x1d4>)
    2e34:	f000 fa54 	bl	32e0 <memchr>
    2e38:	1c67      	adds	r7, r4, #1
    2e3a:	9b04      	ldr	r3, [sp, #16]
    2e3c:	b9d8      	cbnz	r0, 2e76 <_svfiprintf_r+0xd6>
    2e3e:	06d9      	lsls	r1, r3, #27
    2e40:	bf44      	itt	mi
    2e42:	2220      	movmi	r2, #32
    2e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2e48:	071a      	lsls	r2, r3, #28
    2e4a:	bf44      	itt	mi
    2e4c:	222b      	movmi	r2, #43	; 0x2b
    2e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2e52:	7822      	ldrb	r2, [r4, #0]
    2e54:	2a2a      	cmp	r2, #42	; 0x2a
    2e56:	d016      	beq.n	2e86 <_svfiprintf_r+0xe6>
    2e58:	9a07      	ldr	r2, [sp, #28]
    2e5a:	2100      	movs	r1, #0
    2e5c:	200a      	movs	r0, #10
    2e5e:	4627      	mov	r7, r4
    2e60:	3401      	adds	r4, #1
    2e62:	783b      	ldrb	r3, [r7, #0]
    2e64:	3b30      	subs	r3, #48	; 0x30
    2e66:	2b09      	cmp	r3, #9
    2e68:	d951      	bls.n	2f0e <_svfiprintf_r+0x16e>
    2e6a:	b1c9      	cbz	r1, 2ea0 <_svfiprintf_r+0x100>
    2e6c:	e011      	b.n	2e92 <_svfiprintf_r+0xf2>
    2e6e:	2b25      	cmp	r3, #37	; 0x25
    2e70:	d0c0      	beq.n	2df4 <_svfiprintf_r+0x54>
    2e72:	4627      	mov	r7, r4
    2e74:	e7b9      	b.n	2dea <_svfiprintf_r+0x4a>
    2e76:	4a3f      	ldr	r2, [pc, #252]	; (2f74 <_svfiprintf_r+0x1d4>)
    2e78:	1a80      	subs	r0, r0, r2
    2e7a:	fa0b f000 	lsl.w	r0, fp, r0
    2e7e:	4318      	orrs	r0, r3
    2e80:	9004      	str	r0, [sp, #16]
    2e82:	463c      	mov	r4, r7
    2e84:	e7d3      	b.n	2e2e <_svfiprintf_r+0x8e>
    2e86:	9a03      	ldr	r2, [sp, #12]
    2e88:	1d11      	adds	r1, r2, #4
    2e8a:	6812      	ldr	r2, [r2, #0]
    2e8c:	9103      	str	r1, [sp, #12]
    2e8e:	2a00      	cmp	r2, #0
    2e90:	db01      	blt.n	2e96 <_svfiprintf_r+0xf6>
    2e92:	9207      	str	r2, [sp, #28]
    2e94:	e004      	b.n	2ea0 <_svfiprintf_r+0x100>
    2e96:	4252      	negs	r2, r2
    2e98:	f043 0302 	orr.w	r3, r3, #2
    2e9c:	9207      	str	r2, [sp, #28]
    2e9e:	9304      	str	r3, [sp, #16]
    2ea0:	783b      	ldrb	r3, [r7, #0]
    2ea2:	2b2e      	cmp	r3, #46	; 0x2e
    2ea4:	d10e      	bne.n	2ec4 <_svfiprintf_r+0x124>
    2ea6:	787b      	ldrb	r3, [r7, #1]
    2ea8:	2b2a      	cmp	r3, #42	; 0x2a
    2eaa:	f107 0101 	add.w	r1, r7, #1
    2eae:	d132      	bne.n	2f16 <_svfiprintf_r+0x176>
    2eb0:	9b03      	ldr	r3, [sp, #12]
    2eb2:	1d1a      	adds	r2, r3, #4
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	9203      	str	r2, [sp, #12]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	bfb8      	it	lt
    2ebc:	f04f 33ff 	movlt.w	r3, #4294967295
    2ec0:	3702      	adds	r7, #2
    2ec2:	9305      	str	r3, [sp, #20]
    2ec4:	4c2c      	ldr	r4, [pc, #176]	; (2f78 <_svfiprintf_r+0x1d8>)
    2ec6:	7839      	ldrb	r1, [r7, #0]
    2ec8:	2203      	movs	r2, #3
    2eca:	4620      	mov	r0, r4
    2ecc:	f000 fa08 	bl	32e0 <memchr>
    2ed0:	b138      	cbz	r0, 2ee2 <_svfiprintf_r+0x142>
    2ed2:	2340      	movs	r3, #64	; 0x40
    2ed4:	1b00      	subs	r0, r0, r4
    2ed6:	fa03 f000 	lsl.w	r0, r3, r0
    2eda:	9b04      	ldr	r3, [sp, #16]
    2edc:	4303      	orrs	r3, r0
    2ede:	9304      	str	r3, [sp, #16]
    2ee0:	3701      	adds	r7, #1
    2ee2:	7839      	ldrb	r1, [r7, #0]
    2ee4:	4825      	ldr	r0, [pc, #148]	; (2f7c <_svfiprintf_r+0x1dc>)
    2ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2eea:	2206      	movs	r2, #6
    2eec:	1c7e      	adds	r6, r7, #1
    2eee:	f000 f9f7 	bl	32e0 <memchr>
    2ef2:	2800      	cmp	r0, #0
    2ef4:	d035      	beq.n	2f62 <_svfiprintf_r+0x1c2>
    2ef6:	4b22      	ldr	r3, [pc, #136]	; (2f80 <_svfiprintf_r+0x1e0>)
    2ef8:	b9fb      	cbnz	r3, 2f3a <_svfiprintf_r+0x19a>
    2efa:	9b03      	ldr	r3, [sp, #12]
    2efc:	3307      	adds	r3, #7
    2efe:	f023 0307 	bic.w	r3, r3, #7
    2f02:	3308      	adds	r3, #8
    2f04:	9303      	str	r3, [sp, #12]
    2f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f08:	444b      	add	r3, r9
    2f0a:	9309      	str	r3, [sp, #36]	; 0x24
    2f0c:	e76c      	b.n	2de8 <_svfiprintf_r+0x48>
    2f0e:	fb00 3202 	mla	r2, r0, r2, r3
    2f12:	2101      	movs	r1, #1
    2f14:	e7a3      	b.n	2e5e <_svfiprintf_r+0xbe>
    2f16:	2300      	movs	r3, #0
    2f18:	9305      	str	r3, [sp, #20]
    2f1a:	4618      	mov	r0, r3
    2f1c:	240a      	movs	r4, #10
    2f1e:	460f      	mov	r7, r1
    2f20:	3101      	adds	r1, #1
    2f22:	783a      	ldrb	r2, [r7, #0]
    2f24:	3a30      	subs	r2, #48	; 0x30
    2f26:	2a09      	cmp	r2, #9
    2f28:	d903      	bls.n	2f32 <_svfiprintf_r+0x192>
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d0ca      	beq.n	2ec4 <_svfiprintf_r+0x124>
    2f2e:	9005      	str	r0, [sp, #20]
    2f30:	e7c8      	b.n	2ec4 <_svfiprintf_r+0x124>
    2f32:	fb04 2000 	mla	r0, r4, r0, r2
    2f36:	2301      	movs	r3, #1
    2f38:	e7f1      	b.n	2f1e <_svfiprintf_r+0x17e>
    2f3a:	ab03      	add	r3, sp, #12
    2f3c:	9300      	str	r3, [sp, #0]
    2f3e:	462a      	mov	r2, r5
    2f40:	4b10      	ldr	r3, [pc, #64]	; (2f84 <_svfiprintf_r+0x1e4>)
    2f42:	a904      	add	r1, sp, #16
    2f44:	4640      	mov	r0, r8
    2f46:	f3af 8000 	nop.w
    2f4a:	f1b0 3fff 	cmp.w	r0, #4294967295
    2f4e:	4681      	mov	r9, r0
    2f50:	d1d9      	bne.n	2f06 <_svfiprintf_r+0x166>
    2f52:	89ab      	ldrh	r3, [r5, #12]
    2f54:	065b      	lsls	r3, r3, #25
    2f56:	f53f af38 	bmi.w	2dca <_svfiprintf_r+0x2a>
    2f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f5c:	b01d      	add	sp, #116	; 0x74
    2f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f62:	ab03      	add	r3, sp, #12
    2f64:	9300      	str	r3, [sp, #0]
    2f66:	462a      	mov	r2, r5
    2f68:	4b06      	ldr	r3, [pc, #24]	; (2f84 <_svfiprintf_r+0x1e4>)
    2f6a:	a904      	add	r1, sp, #16
    2f6c:	4640      	mov	r0, r8
    2f6e:	f000 f881 	bl	3074 <_printf_i>
    2f72:	e7ea      	b.n	2f4a <_svfiprintf_r+0x1aa>
    2f74:	00003644 	.word	0x00003644
    2f78:	0000364a 	.word	0x0000364a
    2f7c:	0000364e 	.word	0x0000364e
    2f80:	00000000 	.word	0x00000000
    2f84:	00002ce9 	.word	0x00002ce9

00002f88 <_printf_common>:
    2f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f8c:	4691      	mov	r9, r2
    2f8e:	461f      	mov	r7, r3
    2f90:	688a      	ldr	r2, [r1, #8]
    2f92:	690b      	ldr	r3, [r1, #16]
    2f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2f98:	4293      	cmp	r3, r2
    2f9a:	bfb8      	it	lt
    2f9c:	4613      	movlt	r3, r2
    2f9e:	f8c9 3000 	str.w	r3, [r9]
    2fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2fa6:	4606      	mov	r6, r0
    2fa8:	460c      	mov	r4, r1
    2faa:	b112      	cbz	r2, 2fb2 <_printf_common+0x2a>
    2fac:	3301      	adds	r3, #1
    2fae:	f8c9 3000 	str.w	r3, [r9]
    2fb2:	6823      	ldr	r3, [r4, #0]
    2fb4:	0699      	lsls	r1, r3, #26
    2fb6:	bf42      	ittt	mi
    2fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
    2fbc:	3302      	addmi	r3, #2
    2fbe:	f8c9 3000 	strmi.w	r3, [r9]
    2fc2:	6825      	ldr	r5, [r4, #0]
    2fc4:	f015 0506 	ands.w	r5, r5, #6
    2fc8:	d107      	bne.n	2fda <_printf_common+0x52>
    2fca:	f104 0a19 	add.w	sl, r4, #25
    2fce:	68e3      	ldr	r3, [r4, #12]
    2fd0:	f8d9 2000 	ldr.w	r2, [r9]
    2fd4:	1a9b      	subs	r3, r3, r2
    2fd6:	429d      	cmp	r5, r3
    2fd8:	db29      	blt.n	302e <_printf_common+0xa6>
    2fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2fde:	6822      	ldr	r2, [r4, #0]
    2fe0:	3300      	adds	r3, #0
    2fe2:	bf18      	it	ne
    2fe4:	2301      	movne	r3, #1
    2fe6:	0692      	lsls	r2, r2, #26
    2fe8:	d42e      	bmi.n	3048 <_printf_common+0xc0>
    2fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2fee:	4639      	mov	r1, r7
    2ff0:	4630      	mov	r0, r6
    2ff2:	47c0      	blx	r8
    2ff4:	3001      	adds	r0, #1
    2ff6:	d021      	beq.n	303c <_printf_common+0xb4>
    2ff8:	6823      	ldr	r3, [r4, #0]
    2ffa:	68e5      	ldr	r5, [r4, #12]
    2ffc:	f8d9 2000 	ldr.w	r2, [r9]
    3000:	f003 0306 	and.w	r3, r3, #6
    3004:	2b04      	cmp	r3, #4
    3006:	bf08      	it	eq
    3008:	1aad      	subeq	r5, r5, r2
    300a:	68a3      	ldr	r3, [r4, #8]
    300c:	6922      	ldr	r2, [r4, #16]
    300e:	bf0c      	ite	eq
    3010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3014:	2500      	movne	r5, #0
    3016:	4293      	cmp	r3, r2
    3018:	bfc4      	itt	gt
    301a:	1a9b      	subgt	r3, r3, r2
    301c:	18ed      	addgt	r5, r5, r3
    301e:	f04f 0900 	mov.w	r9, #0
    3022:	341a      	adds	r4, #26
    3024:	454d      	cmp	r5, r9
    3026:	d11b      	bne.n	3060 <_printf_common+0xd8>
    3028:	2000      	movs	r0, #0
    302a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    302e:	2301      	movs	r3, #1
    3030:	4652      	mov	r2, sl
    3032:	4639      	mov	r1, r7
    3034:	4630      	mov	r0, r6
    3036:	47c0      	blx	r8
    3038:	3001      	adds	r0, #1
    303a:	d103      	bne.n	3044 <_printf_common+0xbc>
    303c:	f04f 30ff 	mov.w	r0, #4294967295
    3040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3044:	3501      	adds	r5, #1
    3046:	e7c2      	b.n	2fce <_printf_common+0x46>
    3048:	18e1      	adds	r1, r4, r3
    304a:	1c5a      	adds	r2, r3, #1
    304c:	2030      	movs	r0, #48	; 0x30
    304e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3052:	4422      	add	r2, r4
    3054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    305c:	3302      	adds	r3, #2
    305e:	e7c4      	b.n	2fea <_printf_common+0x62>
    3060:	2301      	movs	r3, #1
    3062:	4622      	mov	r2, r4
    3064:	4639      	mov	r1, r7
    3066:	4630      	mov	r0, r6
    3068:	47c0      	blx	r8
    306a:	3001      	adds	r0, #1
    306c:	d0e6      	beq.n	303c <_printf_common+0xb4>
    306e:	f109 0901 	add.w	r9, r9, #1
    3072:	e7d7      	b.n	3024 <_printf_common+0x9c>

00003074 <_printf_i>:
    3074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3078:	4617      	mov	r7, r2
    307a:	7e0a      	ldrb	r2, [r1, #24]
    307c:	b085      	sub	sp, #20
    307e:	2a6e      	cmp	r2, #110	; 0x6e
    3080:	4698      	mov	r8, r3
    3082:	4606      	mov	r6, r0
    3084:	460c      	mov	r4, r1
    3086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3088:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    308c:	f000 80bc 	beq.w	3208 <_printf_i+0x194>
    3090:	d81a      	bhi.n	30c8 <_printf_i+0x54>
    3092:	2a63      	cmp	r2, #99	; 0x63
    3094:	d02e      	beq.n	30f4 <_printf_i+0x80>
    3096:	d80a      	bhi.n	30ae <_printf_i+0x3a>
    3098:	2a00      	cmp	r2, #0
    309a:	f000 80c8 	beq.w	322e <_printf_i+0x1ba>
    309e:	2a58      	cmp	r2, #88	; 0x58
    30a0:	f000 808a 	beq.w	31b8 <_printf_i+0x144>
    30a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    30a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    30ac:	e02a      	b.n	3104 <_printf_i+0x90>
    30ae:	2a64      	cmp	r2, #100	; 0x64
    30b0:	d001      	beq.n	30b6 <_printf_i+0x42>
    30b2:	2a69      	cmp	r2, #105	; 0x69
    30b4:	d1f6      	bne.n	30a4 <_printf_i+0x30>
    30b6:	6821      	ldr	r1, [r4, #0]
    30b8:	681a      	ldr	r2, [r3, #0]
    30ba:	f011 0f80 	tst.w	r1, #128	; 0x80
    30be:	d023      	beq.n	3108 <_printf_i+0x94>
    30c0:	1d11      	adds	r1, r2, #4
    30c2:	6019      	str	r1, [r3, #0]
    30c4:	6813      	ldr	r3, [r2, #0]
    30c6:	e027      	b.n	3118 <_printf_i+0xa4>
    30c8:	2a73      	cmp	r2, #115	; 0x73
    30ca:	f000 80b4 	beq.w	3236 <_printf_i+0x1c2>
    30ce:	d808      	bhi.n	30e2 <_printf_i+0x6e>
    30d0:	2a6f      	cmp	r2, #111	; 0x6f
    30d2:	d02a      	beq.n	312a <_printf_i+0xb6>
    30d4:	2a70      	cmp	r2, #112	; 0x70
    30d6:	d1e5      	bne.n	30a4 <_printf_i+0x30>
    30d8:	680a      	ldr	r2, [r1, #0]
    30da:	f042 0220 	orr.w	r2, r2, #32
    30de:	600a      	str	r2, [r1, #0]
    30e0:	e003      	b.n	30ea <_printf_i+0x76>
    30e2:	2a75      	cmp	r2, #117	; 0x75
    30e4:	d021      	beq.n	312a <_printf_i+0xb6>
    30e6:	2a78      	cmp	r2, #120	; 0x78
    30e8:	d1dc      	bne.n	30a4 <_printf_i+0x30>
    30ea:	2278      	movs	r2, #120	; 0x78
    30ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    30f0:	496e      	ldr	r1, [pc, #440]	; (32ac <_printf_i+0x238>)
    30f2:	e064      	b.n	31be <_printf_i+0x14a>
    30f4:	681a      	ldr	r2, [r3, #0]
    30f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    30fa:	1d11      	adds	r1, r2, #4
    30fc:	6019      	str	r1, [r3, #0]
    30fe:	6813      	ldr	r3, [r2, #0]
    3100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3104:	2301      	movs	r3, #1
    3106:	e0a3      	b.n	3250 <_printf_i+0x1dc>
    3108:	f011 0f40 	tst.w	r1, #64	; 0x40
    310c:	f102 0104 	add.w	r1, r2, #4
    3110:	6019      	str	r1, [r3, #0]
    3112:	d0d7      	beq.n	30c4 <_printf_i+0x50>
    3114:	f9b2 3000 	ldrsh.w	r3, [r2]
    3118:	2b00      	cmp	r3, #0
    311a:	da03      	bge.n	3124 <_printf_i+0xb0>
    311c:	222d      	movs	r2, #45	; 0x2d
    311e:	425b      	negs	r3, r3
    3120:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3124:	4962      	ldr	r1, [pc, #392]	; (32b0 <_printf_i+0x23c>)
    3126:	220a      	movs	r2, #10
    3128:	e017      	b.n	315a <_printf_i+0xe6>
    312a:	6820      	ldr	r0, [r4, #0]
    312c:	6819      	ldr	r1, [r3, #0]
    312e:	f010 0f80 	tst.w	r0, #128	; 0x80
    3132:	d003      	beq.n	313c <_printf_i+0xc8>
    3134:	1d08      	adds	r0, r1, #4
    3136:	6018      	str	r0, [r3, #0]
    3138:	680b      	ldr	r3, [r1, #0]
    313a:	e006      	b.n	314a <_printf_i+0xd6>
    313c:	f010 0f40 	tst.w	r0, #64	; 0x40
    3140:	f101 0004 	add.w	r0, r1, #4
    3144:	6018      	str	r0, [r3, #0]
    3146:	d0f7      	beq.n	3138 <_printf_i+0xc4>
    3148:	880b      	ldrh	r3, [r1, #0]
    314a:	4959      	ldr	r1, [pc, #356]	; (32b0 <_printf_i+0x23c>)
    314c:	2a6f      	cmp	r2, #111	; 0x6f
    314e:	bf14      	ite	ne
    3150:	220a      	movne	r2, #10
    3152:	2208      	moveq	r2, #8
    3154:	2000      	movs	r0, #0
    3156:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    315a:	6865      	ldr	r5, [r4, #4]
    315c:	60a5      	str	r5, [r4, #8]
    315e:	2d00      	cmp	r5, #0
    3160:	f2c0 809c 	blt.w	329c <_printf_i+0x228>
    3164:	6820      	ldr	r0, [r4, #0]
    3166:	f020 0004 	bic.w	r0, r0, #4
    316a:	6020      	str	r0, [r4, #0]
    316c:	2b00      	cmp	r3, #0
    316e:	d13f      	bne.n	31f0 <_printf_i+0x17c>
    3170:	2d00      	cmp	r5, #0
    3172:	f040 8095 	bne.w	32a0 <_printf_i+0x22c>
    3176:	4675      	mov	r5, lr
    3178:	2a08      	cmp	r2, #8
    317a:	d10b      	bne.n	3194 <_printf_i+0x120>
    317c:	6823      	ldr	r3, [r4, #0]
    317e:	07da      	lsls	r2, r3, #31
    3180:	d508      	bpl.n	3194 <_printf_i+0x120>
    3182:	6923      	ldr	r3, [r4, #16]
    3184:	6862      	ldr	r2, [r4, #4]
    3186:	429a      	cmp	r2, r3
    3188:	bfde      	ittt	le
    318a:	2330      	movle	r3, #48	; 0x30
    318c:	f805 3c01 	strble.w	r3, [r5, #-1]
    3190:	f105 35ff 	addle.w	r5, r5, #4294967295
    3194:	ebae 0305 	sub.w	r3, lr, r5
    3198:	6123      	str	r3, [r4, #16]
    319a:	f8cd 8000 	str.w	r8, [sp]
    319e:	463b      	mov	r3, r7
    31a0:	aa03      	add	r2, sp, #12
    31a2:	4621      	mov	r1, r4
    31a4:	4630      	mov	r0, r6
    31a6:	f7ff feef 	bl	2f88 <_printf_common>
    31aa:	3001      	adds	r0, #1
    31ac:	d155      	bne.n	325a <_printf_i+0x1e6>
    31ae:	f04f 30ff 	mov.w	r0, #4294967295
    31b2:	b005      	add	sp, #20
    31b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    31b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    31bc:	493c      	ldr	r1, [pc, #240]	; (32b0 <_printf_i+0x23c>)
    31be:	6822      	ldr	r2, [r4, #0]
    31c0:	6818      	ldr	r0, [r3, #0]
    31c2:	f012 0f80 	tst.w	r2, #128	; 0x80
    31c6:	f100 0504 	add.w	r5, r0, #4
    31ca:	601d      	str	r5, [r3, #0]
    31cc:	d001      	beq.n	31d2 <_printf_i+0x15e>
    31ce:	6803      	ldr	r3, [r0, #0]
    31d0:	e002      	b.n	31d8 <_printf_i+0x164>
    31d2:	0655      	lsls	r5, r2, #25
    31d4:	d5fb      	bpl.n	31ce <_printf_i+0x15a>
    31d6:	8803      	ldrh	r3, [r0, #0]
    31d8:	07d0      	lsls	r0, r2, #31
    31da:	bf44      	itt	mi
    31dc:	f042 0220 	orrmi.w	r2, r2, #32
    31e0:	6022      	strmi	r2, [r4, #0]
    31e2:	b91b      	cbnz	r3, 31ec <_printf_i+0x178>
    31e4:	6822      	ldr	r2, [r4, #0]
    31e6:	f022 0220 	bic.w	r2, r2, #32
    31ea:	6022      	str	r2, [r4, #0]
    31ec:	2210      	movs	r2, #16
    31ee:	e7b1      	b.n	3154 <_printf_i+0xe0>
    31f0:	4675      	mov	r5, lr
    31f2:	fbb3 f0f2 	udiv	r0, r3, r2
    31f6:	fb02 3310 	mls	r3, r2, r0, r3
    31fa:	5ccb      	ldrb	r3, [r1, r3]
    31fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3200:	4603      	mov	r3, r0
    3202:	2800      	cmp	r0, #0
    3204:	d1f5      	bne.n	31f2 <_printf_i+0x17e>
    3206:	e7b7      	b.n	3178 <_printf_i+0x104>
    3208:	6808      	ldr	r0, [r1, #0]
    320a:	681a      	ldr	r2, [r3, #0]
    320c:	6949      	ldr	r1, [r1, #20]
    320e:	f010 0f80 	tst.w	r0, #128	; 0x80
    3212:	d004      	beq.n	321e <_printf_i+0x1aa>
    3214:	1d10      	adds	r0, r2, #4
    3216:	6018      	str	r0, [r3, #0]
    3218:	6813      	ldr	r3, [r2, #0]
    321a:	6019      	str	r1, [r3, #0]
    321c:	e007      	b.n	322e <_printf_i+0x1ba>
    321e:	f010 0f40 	tst.w	r0, #64	; 0x40
    3222:	f102 0004 	add.w	r0, r2, #4
    3226:	6018      	str	r0, [r3, #0]
    3228:	6813      	ldr	r3, [r2, #0]
    322a:	d0f6      	beq.n	321a <_printf_i+0x1a6>
    322c:	8019      	strh	r1, [r3, #0]
    322e:	2300      	movs	r3, #0
    3230:	6123      	str	r3, [r4, #16]
    3232:	4675      	mov	r5, lr
    3234:	e7b1      	b.n	319a <_printf_i+0x126>
    3236:	681a      	ldr	r2, [r3, #0]
    3238:	1d11      	adds	r1, r2, #4
    323a:	6019      	str	r1, [r3, #0]
    323c:	6815      	ldr	r5, [r2, #0]
    323e:	6862      	ldr	r2, [r4, #4]
    3240:	2100      	movs	r1, #0
    3242:	4628      	mov	r0, r5
    3244:	f000 f84c 	bl	32e0 <memchr>
    3248:	b108      	cbz	r0, 324e <_printf_i+0x1da>
    324a:	1b40      	subs	r0, r0, r5
    324c:	6060      	str	r0, [r4, #4]
    324e:	6863      	ldr	r3, [r4, #4]
    3250:	6123      	str	r3, [r4, #16]
    3252:	2300      	movs	r3, #0
    3254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3258:	e79f      	b.n	319a <_printf_i+0x126>
    325a:	6923      	ldr	r3, [r4, #16]
    325c:	462a      	mov	r2, r5
    325e:	4639      	mov	r1, r7
    3260:	4630      	mov	r0, r6
    3262:	47c0      	blx	r8
    3264:	3001      	adds	r0, #1
    3266:	d0a2      	beq.n	31ae <_printf_i+0x13a>
    3268:	6823      	ldr	r3, [r4, #0]
    326a:	079b      	lsls	r3, r3, #30
    326c:	d507      	bpl.n	327e <_printf_i+0x20a>
    326e:	2500      	movs	r5, #0
    3270:	f104 0919 	add.w	r9, r4, #25
    3274:	68e3      	ldr	r3, [r4, #12]
    3276:	9a03      	ldr	r2, [sp, #12]
    3278:	1a9b      	subs	r3, r3, r2
    327a:	429d      	cmp	r5, r3
    327c:	db05      	blt.n	328a <_printf_i+0x216>
    327e:	68e0      	ldr	r0, [r4, #12]
    3280:	9b03      	ldr	r3, [sp, #12]
    3282:	4298      	cmp	r0, r3
    3284:	bfb8      	it	lt
    3286:	4618      	movlt	r0, r3
    3288:	e793      	b.n	31b2 <_printf_i+0x13e>
    328a:	2301      	movs	r3, #1
    328c:	464a      	mov	r2, r9
    328e:	4639      	mov	r1, r7
    3290:	4630      	mov	r0, r6
    3292:	47c0      	blx	r8
    3294:	3001      	adds	r0, #1
    3296:	d08a      	beq.n	31ae <_printf_i+0x13a>
    3298:	3501      	adds	r5, #1
    329a:	e7eb      	b.n	3274 <_printf_i+0x200>
    329c:	2b00      	cmp	r3, #0
    329e:	d1a7      	bne.n	31f0 <_printf_i+0x17c>
    32a0:	780b      	ldrb	r3, [r1, #0]
    32a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    32a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    32aa:	e765      	b.n	3178 <_printf_i+0x104>
    32ac:	00003666 	.word	0x00003666
    32b0:	00003655 	.word	0x00003655

000032b4 <_sbrk_r>:
    32b4:	b538      	push	{r3, r4, r5, lr}
    32b6:	4c06      	ldr	r4, [pc, #24]	; (32d0 <_sbrk_r+0x1c>)
    32b8:	2300      	movs	r3, #0
    32ba:	4605      	mov	r5, r0
    32bc:	4608      	mov	r0, r1
    32be:	6023      	str	r3, [r4, #0]
    32c0:	f7fe f912 	bl	14e8 <_sbrk>
    32c4:	1c43      	adds	r3, r0, #1
    32c6:	d102      	bne.n	32ce <_sbrk_r+0x1a>
    32c8:	6823      	ldr	r3, [r4, #0]
    32ca:	b103      	cbz	r3, 32ce <_sbrk_r+0x1a>
    32cc:	602b      	str	r3, [r5, #0]
    32ce:	bd38      	pop	{r3, r4, r5, pc}
    32d0:	20000160 	.word	0x20000160
	...

000032e0 <memchr>:
    32e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    32e4:	2a10      	cmp	r2, #16
    32e6:	db2b      	blt.n	3340 <memchr+0x60>
    32e8:	f010 0f07 	tst.w	r0, #7
    32ec:	d008      	beq.n	3300 <memchr+0x20>
    32ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    32f2:	3a01      	subs	r2, #1
    32f4:	428b      	cmp	r3, r1
    32f6:	d02d      	beq.n	3354 <memchr+0x74>
    32f8:	f010 0f07 	tst.w	r0, #7
    32fc:	b342      	cbz	r2, 3350 <memchr+0x70>
    32fe:	d1f6      	bne.n	32ee <memchr+0xe>
    3300:	b4f0      	push	{r4, r5, r6, r7}
    3302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    330a:	f022 0407 	bic.w	r4, r2, #7
    330e:	f07f 0700 	mvns.w	r7, #0
    3312:	2300      	movs	r3, #0
    3314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3318:	3c08      	subs	r4, #8
    331a:	ea85 0501 	eor.w	r5, r5, r1
    331e:	ea86 0601 	eor.w	r6, r6, r1
    3322:	fa85 f547 	uadd8	r5, r5, r7
    3326:	faa3 f587 	sel	r5, r3, r7
    332a:	fa86 f647 	uadd8	r6, r6, r7
    332e:	faa5 f687 	sel	r6, r5, r7
    3332:	b98e      	cbnz	r6, 3358 <memchr+0x78>
    3334:	d1ee      	bne.n	3314 <memchr+0x34>
    3336:	bcf0      	pop	{r4, r5, r6, r7}
    3338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    333c:	f002 0207 	and.w	r2, r2, #7
    3340:	b132      	cbz	r2, 3350 <memchr+0x70>
    3342:	f810 3b01 	ldrb.w	r3, [r0], #1
    3346:	3a01      	subs	r2, #1
    3348:	ea83 0301 	eor.w	r3, r3, r1
    334c:	b113      	cbz	r3, 3354 <memchr+0x74>
    334e:	d1f8      	bne.n	3342 <memchr+0x62>
    3350:	2000      	movs	r0, #0
    3352:	4770      	bx	lr
    3354:	3801      	subs	r0, #1
    3356:	4770      	bx	lr
    3358:	2d00      	cmp	r5, #0
    335a:	bf06      	itte	eq
    335c:	4635      	moveq	r5, r6
    335e:	3803      	subeq	r0, #3
    3360:	3807      	subne	r0, #7
    3362:	f015 0f01 	tst.w	r5, #1
    3366:	d107      	bne.n	3378 <memchr+0x98>
    3368:	3001      	adds	r0, #1
    336a:	f415 7f80 	tst.w	r5, #256	; 0x100
    336e:	bf02      	ittt	eq
    3370:	3001      	addeq	r0, #1
    3372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3376:	3001      	addeq	r0, #1
    3378:	bcf0      	pop	{r4, r5, r6, r7}
    337a:	3801      	subs	r0, #1
    337c:	4770      	bx	lr
    337e:	bf00      	nop

00003380 <memcpy>:
    3380:	b510      	push	{r4, lr}
    3382:	1e43      	subs	r3, r0, #1
    3384:	440a      	add	r2, r1
    3386:	4291      	cmp	r1, r2
    3388:	d100      	bne.n	338c <memcpy+0xc>
    338a:	bd10      	pop	{r4, pc}
    338c:	f811 4b01 	ldrb.w	r4, [r1], #1
    3390:	f803 4f01 	strb.w	r4, [r3, #1]!
    3394:	e7f7      	b.n	3386 <memcpy+0x6>

00003396 <memmove>:
    3396:	4288      	cmp	r0, r1
    3398:	b510      	push	{r4, lr}
    339a:	eb01 0302 	add.w	r3, r1, r2
    339e:	d803      	bhi.n	33a8 <memmove+0x12>
    33a0:	1e42      	subs	r2, r0, #1
    33a2:	4299      	cmp	r1, r3
    33a4:	d10c      	bne.n	33c0 <memmove+0x2a>
    33a6:	bd10      	pop	{r4, pc}
    33a8:	4298      	cmp	r0, r3
    33aa:	d2f9      	bcs.n	33a0 <memmove+0xa>
    33ac:	1881      	adds	r1, r0, r2
    33ae:	1ad2      	subs	r2, r2, r3
    33b0:	42d3      	cmn	r3, r2
    33b2:	d100      	bne.n	33b6 <memmove+0x20>
    33b4:	bd10      	pop	{r4, pc}
    33b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    33ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
    33be:	e7f7      	b.n	33b0 <memmove+0x1a>
    33c0:	f811 4b01 	ldrb.w	r4, [r1], #1
    33c4:	f802 4f01 	strb.w	r4, [r2, #1]!
    33c8:	e7eb      	b.n	33a2 <memmove+0xc>

000033ca <__malloc_lock>:
    33ca:	4770      	bx	lr

000033cc <__malloc_unlock>:
    33cc:	4770      	bx	lr
	...

000033d0 <_free_r>:
    33d0:	b538      	push	{r3, r4, r5, lr}
    33d2:	4605      	mov	r5, r0
    33d4:	2900      	cmp	r1, #0
    33d6:	d045      	beq.n	3464 <_free_r+0x94>
    33d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    33dc:	1f0c      	subs	r4, r1, #4
    33de:	2b00      	cmp	r3, #0
    33e0:	bfb8      	it	lt
    33e2:	18e4      	addlt	r4, r4, r3
    33e4:	f7ff fff1 	bl	33ca <__malloc_lock>
    33e8:	4a1f      	ldr	r2, [pc, #124]	; (3468 <_free_r+0x98>)
    33ea:	6813      	ldr	r3, [r2, #0]
    33ec:	4610      	mov	r0, r2
    33ee:	b933      	cbnz	r3, 33fe <_free_r+0x2e>
    33f0:	6063      	str	r3, [r4, #4]
    33f2:	6014      	str	r4, [r2, #0]
    33f4:	4628      	mov	r0, r5
    33f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    33fa:	f7ff bfe7 	b.w	33cc <__malloc_unlock>
    33fe:	42a3      	cmp	r3, r4
    3400:	d90c      	bls.n	341c <_free_r+0x4c>
    3402:	6821      	ldr	r1, [r4, #0]
    3404:	1862      	adds	r2, r4, r1
    3406:	4293      	cmp	r3, r2
    3408:	bf04      	itt	eq
    340a:	681a      	ldreq	r2, [r3, #0]
    340c:	685b      	ldreq	r3, [r3, #4]
    340e:	6063      	str	r3, [r4, #4]
    3410:	bf04      	itt	eq
    3412:	1852      	addeq	r2, r2, r1
    3414:	6022      	streq	r2, [r4, #0]
    3416:	6004      	str	r4, [r0, #0]
    3418:	e7ec      	b.n	33f4 <_free_r+0x24>
    341a:	4613      	mov	r3, r2
    341c:	685a      	ldr	r2, [r3, #4]
    341e:	b10a      	cbz	r2, 3424 <_free_r+0x54>
    3420:	42a2      	cmp	r2, r4
    3422:	d9fa      	bls.n	341a <_free_r+0x4a>
    3424:	6819      	ldr	r1, [r3, #0]
    3426:	1858      	adds	r0, r3, r1
    3428:	42a0      	cmp	r0, r4
    342a:	d10b      	bne.n	3444 <_free_r+0x74>
    342c:	6820      	ldr	r0, [r4, #0]
    342e:	4401      	add	r1, r0
    3430:	1858      	adds	r0, r3, r1
    3432:	4282      	cmp	r2, r0
    3434:	6019      	str	r1, [r3, #0]
    3436:	d1dd      	bne.n	33f4 <_free_r+0x24>
    3438:	6810      	ldr	r0, [r2, #0]
    343a:	6852      	ldr	r2, [r2, #4]
    343c:	605a      	str	r2, [r3, #4]
    343e:	4401      	add	r1, r0
    3440:	6019      	str	r1, [r3, #0]
    3442:	e7d7      	b.n	33f4 <_free_r+0x24>
    3444:	d902      	bls.n	344c <_free_r+0x7c>
    3446:	230c      	movs	r3, #12
    3448:	602b      	str	r3, [r5, #0]
    344a:	e7d3      	b.n	33f4 <_free_r+0x24>
    344c:	6820      	ldr	r0, [r4, #0]
    344e:	1821      	adds	r1, r4, r0
    3450:	428a      	cmp	r2, r1
    3452:	bf04      	itt	eq
    3454:	6811      	ldreq	r1, [r2, #0]
    3456:	6852      	ldreq	r2, [r2, #4]
    3458:	6062      	str	r2, [r4, #4]
    345a:	bf04      	itt	eq
    345c:	1809      	addeq	r1, r1, r0
    345e:	6021      	streq	r1, [r4, #0]
    3460:	605c      	str	r4, [r3, #4]
    3462:	e7c7      	b.n	33f4 <_free_r+0x24>
    3464:	bd38      	pop	{r3, r4, r5, pc}
    3466:	bf00      	nop
    3468:	20000100 	.word	0x20000100

0000346c <_realloc_r>:
    346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    346e:	4607      	mov	r7, r0
    3470:	4614      	mov	r4, r2
    3472:	460e      	mov	r6, r1
    3474:	b921      	cbnz	r1, 3480 <_realloc_r+0x14>
    3476:	4611      	mov	r1, r2
    3478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    347c:	f7ff bbd6 	b.w	2c2c <_malloc_r>
    3480:	b922      	cbnz	r2, 348c <_realloc_r+0x20>
    3482:	f7ff ffa5 	bl	33d0 <_free_r>
    3486:	4625      	mov	r5, r4
    3488:	4628      	mov	r0, r5
    348a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    348c:	f000 f814 	bl	34b8 <_malloc_usable_size_r>
    3490:	4284      	cmp	r4, r0
    3492:	d90f      	bls.n	34b4 <_realloc_r+0x48>
    3494:	4621      	mov	r1, r4
    3496:	4638      	mov	r0, r7
    3498:	f7ff fbc8 	bl	2c2c <_malloc_r>
    349c:	4605      	mov	r5, r0
    349e:	2800      	cmp	r0, #0
    34a0:	d0f2      	beq.n	3488 <_realloc_r+0x1c>
    34a2:	4631      	mov	r1, r6
    34a4:	4622      	mov	r2, r4
    34a6:	f7ff ff6b 	bl	3380 <memcpy>
    34aa:	4631      	mov	r1, r6
    34ac:	4638      	mov	r0, r7
    34ae:	f7ff ff8f 	bl	33d0 <_free_r>
    34b2:	e7e9      	b.n	3488 <_realloc_r+0x1c>
    34b4:	4635      	mov	r5, r6
    34b6:	e7e7      	b.n	3488 <_realloc_r+0x1c>

000034b8 <_malloc_usable_size_r>:
    34b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    34bc:	2800      	cmp	r0, #0
    34be:	f1a0 0004 	sub.w	r0, r0, #4
    34c2:	bfbc      	itt	lt
    34c4:	580b      	ldrlt	r3, [r1, r0]
    34c6:	18c0      	addlt	r0, r0, r3
    34c8:	4770      	bx	lr
    34ca:	0000      	movs	r0, r0
    34cc:	682f2e2e 	.word	0x682f2e2e
    34d0:	702f6c70 	.word	0x702f6c70
    34d4:	2f74726f 	.word	0x2f74726f
    34d8:	5f6c7068 	.word	0x5f6c7068
    34dc:	6f697067 	.word	0x6f697067
    34e0:	7361625f 	.word	0x7361625f
    34e4:	00682e65 	.word	0x00682e65
    34e8:	682f2e2e 	.word	0x682f2e2e
    34ec:	732f6c61 	.word	0x732f6c61
    34f0:	682f6372 	.word	0x682f6372
    34f4:	695f6c61 	.word	0x695f6c61
    34f8:	00632e6f 	.word	0x00632e6f
    34fc:	682f2e2e 	.word	0x682f2e2e
    3500:	732f6c61 	.word	0x732f6c61
    3504:	682f6372 	.word	0x682f6372
    3508:	745f6c61 	.word	0x745f6c61
    350c:	72656d69 	.word	0x72656d69
    3510:	0000632e 	.word	0x0000632e
    3514:	682f2e2e 	.word	0x682f2e2e
    3518:	732f6c61 	.word	0x732f6c61
    351c:	682f6372 	.word	0x682f6372
    3520:	755f6c61 	.word	0x755f6c61
    3524:	74726173 	.word	0x74726173
    3528:	6e79735f 	.word	0x6e79735f
    352c:	00632e63 	.word	0x00632e63
    3530:	682f2e2e 	.word	0x682f2e2e
    3534:	752f6c61 	.word	0x752f6c61
    3538:	736c6974 	.word	0x736c6974
    353c:	6372732f 	.word	0x6372732f
    3540:	6974752f 	.word	0x6974752f
    3544:	6c5f736c 	.word	0x6c5f736c
    3548:	2e747369 	.word	0x2e747369
    354c:	00000063 	.word	0x00000063
    3550:	682f2e2e 	.word	0x682f2e2e
    3554:	732f6c70 	.word	0x732f6c70
    3558:	6f637265 	.word	0x6f637265
    355c:	70682f6d 	.word	0x70682f6d
    3560:	65735f6c 	.word	0x65735f6c
    3564:	6d6f6372 	.word	0x6d6f6372
    3568:	0000632e 	.word	0x0000632e
    356c:	40003000 	.word	0x40003000
    3570:	40003400 	.word	0x40003400
    3574:	41012000 	.word	0x41012000
    3578:	41014000 	.word	0x41014000
    357c:	43000000 	.word	0x43000000
    3580:	43000400 	.word	0x43000400
    3584:	43000800 	.word	0x43000800
    3588:	43000c00 	.word	0x43000c00

0000358c <sercomspi_regs>:
	...
    35a0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    35b0:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    35c0:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    35d0:	43001800 64323025 3230253a 34253c64     ...C%02d:%02d<%4
    35e0:	000a3e64                                d>..

000035e4 <__sf_fake_stderr>:
	...

00003604 <__sf_fake_stdin>:
	...

00003624 <__sf_fake_stdout>:
	...
    3644:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3654:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3664:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3674:	00006665                                ef..

00003678 <_init>:
    3678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    367a:	bf00      	nop
    367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    367e:	bc08      	pop	{r3}
    3680:	469e      	mov	lr, r3
    3682:	4770      	bx	lr

00003684 <__init_array_start>:
    3684:	00000289 	.word	0x00000289

00003688 <_fini>:
    3688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    368a:	bf00      	nop
    368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    368e:	bc08      	pop	{r3}
    3690:	469e      	mov	lr, r3
    3692:	4770      	bx	lr

00003694 <__fini_array_start>:
    3694:	00000265 	.word	0x00000265
