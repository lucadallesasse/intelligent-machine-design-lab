
Infrared digital sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000030  20000000  00002d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020030  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020030  2**0
                  CONTENTS
  4 .bss          00000150  20000030  00002d50  00020030  2**2
                  ALLOC
  5 .stack        00010000  20000180  00002ea0  00020030  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00021d7c  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a17  00000000  00000000  00041e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a64e  00000000  00000000  0004484a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001280  00000000  00000000  0004ee98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001128  00000000  00000000  00050118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000332cb  00000000  00000000  00051240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014953  00000000  00000000  0008450b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00116651  00000000  00000000  00098e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004ce4  00000000  00000000  001af4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 01 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	51 1b 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     Q...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	21 19 00 00 1d 26 00 00 39 26 00 00 55 26 00 00     !....&..9&..U&..
     104:	71 26 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     q&..}...}...}...
     114:	7d 03 00 00 8d 26 00 00 a9 26 00 00 c5 26 00 00     }....&...&...&..
     124:	e1 26 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .&..}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 7d 2b 00 00 7d 03 00 00 7d 03 00 00     }...}+..}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1f4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000030 	.word	0x20000030
     280:	00000000 	.word	0x00000000
     284:	00002d20 	.word	0x00002d20

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002d20 	.word	0x00002d20
     2c4:	20000034 	.word	0x20000034
     2c8:	00002d20 	.word	0x00002d20
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000ba1 	.word	0x00000ba1

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	00002d20 	.word	0x00002d20
     35c:	20000000 	.word	0x20000000
     360:	20000030 	.word	0x20000030
     364:	20000030 	.word	0x20000030
     368:	20000180 	.word	0x20000180
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	00002ba5 	.word	0x00002ba5
     378:	000029d1 	.word	0x000029d1

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	695b      	ldr	r3, [r3, #20]
     3d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	699b      	ldr	r3, [r3, #24]
     3f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     410:	687b      	ldr	r3, [r7, #4]
     412:	699b      	ldr	r3, [r3, #24]
     414:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     418:	687b      	ldr	r3, [r7, #4]
     41a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	60f8      	str	r0, [r7, #12]
     430:	460b      	mov	r3, r1
     432:	607a      	str	r2, [r7, #4]
     434:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     436:	7afb      	ldrb	r3, [r7, #11]
     438:	68fa      	ldr	r2, [r7, #12]
     43a:	01db      	lsls	r3, r3, #7
     43c:	4413      	add	r3, r2
     43e:	3308      	adds	r3, #8
     440:	687a      	ldr	r2, [r7, #4]
     442:	601a      	str	r2, [r3, #0]
}
     444:	bf00      	nop
     446:	3714      	adds	r7, #20
     448:	46bd      	mov	sp, r7
     44a:	f85d 7b04 	ldr.w	r7, [sp], #4
     44e:	4770      	bx	lr

00000450 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     450:	b480      	push	{r7}
     452:	b085      	sub	sp, #20
     454:	af00      	add	r7, sp, #0
     456:	60f8      	str	r0, [r7, #12]
     458:	460b      	mov	r3, r1
     45a:	607a      	str	r2, [r7, #4]
     45c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45e:	7afb      	ldrb	r3, [r7, #11]
     460:	68fa      	ldr	r2, [r7, #12]
     462:	01db      	lsls	r3, r3, #7
     464:	4413      	add	r3, r2
     466:	3304      	adds	r3, #4
     468:	687a      	ldr	r2, [r7, #4]
     46a:	601a      	str	r2, [r3, #0]
}
     46c:	bf00      	nop
     46e:	3714      	adds	r7, #20
     470:	46bd      	mov	sp, r7
     472:	f85d 7b04 	ldr.w	r7, [sp], #4
     476:	4770      	bx	lr

00000478 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     478:	b480      	push	{r7}
     47a:	b085      	sub	sp, #20
     47c:	af00      	add	r7, sp, #0
     47e:	60f8      	str	r0, [r7, #12]
     480:	460b      	mov	r3, r1
     482:	607a      	str	r2, [r7, #4]
     484:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     486:	7afb      	ldrb	r3, [r7, #11]
     488:	68fa      	ldr	r2, [r7, #12]
     48a:	01db      	lsls	r3, r3, #7
     48c:	4413      	add	r3, r2
     48e:	3318      	adds	r3, #24
     490:	687a      	ldr	r2, [r7, #4]
     492:	601a      	str	r2, [r3, #0]
}
     494:	bf00      	nop
     496:	3714      	adds	r7, #20
     498:	46bd      	mov	sp, r7
     49a:	f85d 7b04 	ldr.w	r7, [sp], #4
     49e:	4770      	bx	lr

000004a0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4a0:	b480      	push	{r7}
     4a2:	b085      	sub	sp, #20
     4a4:	af00      	add	r7, sp, #0
     4a6:	60f8      	str	r0, [r7, #12]
     4a8:	460b      	mov	r3, r1
     4aa:	607a      	str	r2, [r7, #4]
     4ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ae:	7afb      	ldrb	r3, [r7, #11]
     4b0:	68fa      	ldr	r2, [r7, #12]
     4b2:	01db      	lsls	r3, r3, #7
     4b4:	4413      	add	r3, r2
     4b6:	3314      	adds	r3, #20
     4b8:	687a      	ldr	r2, [r7, #4]
     4ba:	601a      	str	r2, [r3, #0]
}
     4bc:	bf00      	nop
     4be:	3714      	adds	r7, #20
     4c0:	46bd      	mov	sp, r7
     4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c6:	4770      	bx	lr

000004c8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     4c8:	b480      	push	{r7}
     4ca:	b085      	sub	sp, #20
     4cc:	af00      	add	r7, sp, #0
     4ce:	6078      	str	r0, [r7, #4]
     4d0:	4608      	mov	r0, r1
     4d2:	4611      	mov	r1, r2
     4d4:	461a      	mov	r2, r3
     4d6:	4603      	mov	r3, r0
     4d8:	70fb      	strb	r3, [r7, #3]
     4da:	460b      	mov	r3, r1
     4dc:	70bb      	strb	r3, [r7, #2]
     4de:	4613      	mov	r3, r2
     4e0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e2:	78fa      	ldrb	r2, [r7, #3]
     4e4:	78bb      	ldrb	r3, [r7, #2]
     4e6:	6879      	ldr	r1, [r7, #4]
     4e8:	01d2      	lsls	r2, r2, #7
     4ea:	440a      	add	r2, r1
     4ec:	4413      	add	r3, r2
     4ee:	3330      	adds	r3, #48	; 0x30
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f4:	7bfb      	ldrb	r3, [r7, #15]
     4f6:	f023 030f 	bic.w	r3, r3, #15
     4fa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     4fc:	787b      	ldrb	r3, [r7, #1]
     4fe:	f003 030f 	and.w	r3, r3, #15
     502:	b2da      	uxtb	r2, r3
     504:	7bfb      	ldrb	r3, [r7, #15]
     506:	4313      	orrs	r3, r2
     508:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50a:	78fa      	ldrb	r2, [r7, #3]
     50c:	78bb      	ldrb	r3, [r7, #2]
     50e:	6879      	ldr	r1, [r7, #4]
     510:	01d2      	lsls	r2, r2, #7
     512:	440a      	add	r2, r1
     514:	4413      	add	r3, r2
     516:	3330      	adds	r3, #48	; 0x30
     518:	7bfa      	ldrb	r2, [r7, #15]
     51a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     51c:	bf00      	nop
     51e:	3714      	adds	r7, #20
     520:	46bd      	mov	sp, r7
     522:	f85d 7b04 	ldr.w	r7, [sp], #4
     526:	4770      	bx	lr

00000528 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     528:	b480      	push	{r7}
     52a:	b085      	sub	sp, #20
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
     530:	4608      	mov	r0, r1
     532:	4611      	mov	r1, r2
     534:	461a      	mov	r2, r3
     536:	4603      	mov	r3, r0
     538:	70fb      	strb	r3, [r7, #3]
     53a:	460b      	mov	r3, r1
     53c:	70bb      	strb	r3, [r7, #2]
     53e:	4613      	mov	r3, r2
     540:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     542:	78fa      	ldrb	r2, [r7, #3]
     544:	78bb      	ldrb	r3, [r7, #2]
     546:	6879      	ldr	r1, [r7, #4]
     548:	01d2      	lsls	r2, r2, #7
     54a:	440a      	add	r2, r1
     54c:	4413      	add	r3, r2
     54e:	3330      	adds	r3, #48	; 0x30
     550:	781b      	ldrb	r3, [r3, #0]
     552:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     554:	7bfb      	ldrb	r3, [r7, #15]
     556:	f003 030f 	and.w	r3, r3, #15
     55a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     55c:	787b      	ldrb	r3, [r7, #1]
     55e:	011b      	lsls	r3, r3, #4
     560:	b2da      	uxtb	r2, r3
     562:	7bfb      	ldrb	r3, [r7, #15]
     564:	4313      	orrs	r3, r2
     566:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     568:	78fa      	ldrb	r2, [r7, #3]
     56a:	78bb      	ldrb	r3, [r7, #2]
     56c:	6879      	ldr	r1, [r7, #4]
     56e:	01d2      	lsls	r2, r2, #7
     570:	440a      	add	r2, r1
     572:	4413      	add	r3, r2
     574:	3330      	adds	r3, #48	; 0x30
     576:	7bfa      	ldrb	r2, [r7, #15]
     578:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     57a:	bf00      	nop
     57c:	3714      	adds	r7, #20
     57e:	46bd      	mov	sp, r7
     580:	f85d 7b04 	ldr.w	r7, [sp], #4
     584:	4770      	bx	lr

00000586 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     586:	b480      	push	{r7}
     588:	b085      	sub	sp, #20
     58a:	af00      	add	r7, sp, #0
     58c:	6078      	str	r0, [r7, #4]
     58e:	4608      	mov	r0, r1
     590:	4611      	mov	r1, r2
     592:	461a      	mov	r2, r3
     594:	4603      	mov	r3, r0
     596:	70fb      	strb	r3, [r7, #3]
     598:	460b      	mov	r3, r1
     59a:	70bb      	strb	r3, [r7, #2]
     59c:	4613      	mov	r3, r2
     59e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a0:	78fa      	ldrb	r2, [r7, #3]
     5a2:	78bb      	ldrb	r3, [r7, #2]
     5a4:	6879      	ldr	r1, [r7, #4]
     5a6:	01d2      	lsls	r2, r2, #7
     5a8:	440a      	add	r2, r1
     5aa:	4413      	add	r3, r2
     5ac:	3340      	adds	r3, #64	; 0x40
     5ae:	781b      	ldrb	r3, [r3, #0]
     5b0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	7bfb      	ldrb	r3, [r7, #15]
     5b4:	f023 0301 	bic.w	r3, r3, #1
     5b8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	787a      	ldrb	r2, [r7, #1]
     5bc:	7bfb      	ldrb	r3, [r7, #15]
     5be:	4313      	orrs	r3, r2
     5c0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c2:	78fa      	ldrb	r2, [r7, #3]
     5c4:	78bb      	ldrb	r3, [r7, #2]
     5c6:	6879      	ldr	r1, [r7, #4]
     5c8:	01d2      	lsls	r2, r2, #7
     5ca:	440a      	add	r2, r1
     5cc:	4413      	add	r3, r2
     5ce:	3340      	adds	r3, #64	; 0x40
     5d0:	7bfa      	ldrb	r2, [r7, #15]
     5d2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5d4:	bf00      	nop
     5d6:	3714      	adds	r7, #20
     5d8:	46bd      	mov	sp, r7
     5da:	f85d 7b04 	ldr.w	r7, [sp], #4
     5de:	4770      	bx	lr

000005e0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5e0:	b490      	push	{r4, r7}
     5e2:	b082      	sub	sp, #8
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
     5e8:	460b      	mov	r3, r1
     5ea:	70fb      	strb	r3, [r7, #3]
     5ec:	4613      	mov	r3, r2
     5ee:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5f0:	78fa      	ldrb	r2, [r7, #3]
     5f2:	78bb      	ldrb	r3, [r7, #2]
     5f4:	78f8      	ldrb	r0, [r7, #3]
     5f6:	78b9      	ldrb	r1, [r7, #2]
     5f8:	687c      	ldr	r4, [r7, #4]
     5fa:	01c0      	lsls	r0, r0, #7
     5fc:	4420      	add	r0, r4
     5fe:	4401      	add	r1, r0
     600:	3140      	adds	r1, #64	; 0x40
     602:	7809      	ldrb	r1, [r1, #0]
     604:	b2c9      	uxtb	r1, r1
     606:	f041 0104 	orr.w	r1, r1, #4
     60a:	b2c8      	uxtb	r0, r1
     60c:	6879      	ldr	r1, [r7, #4]
     60e:	01d2      	lsls	r2, r2, #7
     610:	440a      	add	r2, r1
     612:	4413      	add	r3, r2
     614:	3340      	adds	r3, #64	; 0x40
     616:	4602      	mov	r2, r0
     618:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     61a:	bf00      	nop
     61c:	3708      	adds	r7, #8
     61e:	46bd      	mov	sp, r7
     620:	bc90      	pop	{r4, r7}
     622:	4770      	bx	lr

00000624 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     624:	b490      	push	{r4, r7}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	460b      	mov	r3, r1
     62e:	70fb      	strb	r3, [r7, #3]
     630:	4613      	mov	r3, r2
     632:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     634:	78fa      	ldrb	r2, [r7, #3]
     636:	78bb      	ldrb	r3, [r7, #2]
     638:	78f8      	ldrb	r0, [r7, #3]
     63a:	78b9      	ldrb	r1, [r7, #2]
     63c:	687c      	ldr	r4, [r7, #4]
     63e:	01c0      	lsls	r0, r0, #7
     640:	4420      	add	r0, r4
     642:	4401      	add	r1, r0
     644:	3140      	adds	r1, #64	; 0x40
     646:	7809      	ldrb	r1, [r1, #0]
     648:	b2c9      	uxtb	r1, r1
     64a:	f021 0104 	bic.w	r1, r1, #4
     64e:	b2c8      	uxtb	r0, r1
     650:	6879      	ldr	r1, [r7, #4]
     652:	01d2      	lsls	r2, r2, #7
     654:	440a      	add	r2, r1
     656:	4413      	add	r3, r2
     658:	3340      	adds	r3, #64	; 0x40
     65a:	4602      	mov	r2, r0
     65c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     65e:	bf00      	nop
     660:	3708      	adds	r7, #8
     662:	46bd      	mov	sp, r7
     664:	bc90      	pop	{r4, r7}
     666:	4770      	bx	lr

00000668 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     668:	b480      	push	{r7}
     66a:	b085      	sub	sp, #20
     66c:	af00      	add	r7, sp, #0
     66e:	60f8      	str	r0, [r7, #12]
     670:	460b      	mov	r3, r1
     672:	607a      	str	r2, [r7, #4]
     674:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     676:	7afb      	ldrb	r3, [r7, #11]
     678:	68fa      	ldr	r2, [r7, #12]
     67a:	01db      	lsls	r3, r3, #7
     67c:	4413      	add	r3, r2
     67e:	3328      	adds	r3, #40	; 0x28
     680:	687a      	ldr	r2, [r7, #4]
     682:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     684:	bf00      	nop
     686:	3714      	adds	r7, #20
     688:	46bd      	mov	sp, r7
     68a:	f85d 7b04 	ldr.w	r7, [sp], #4
     68e:	4770      	bx	lr

00000690 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	4603      	mov	r3, r0
     698:	6039      	str	r1, [r7, #0]
     69a:	71fb      	strb	r3, [r7, #7]
     69c:	4613      	mov	r3, r2
     69e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     6a0:	79bb      	ldrb	r3, [r7, #6]
     6a2:	2b01      	cmp	r3, #1
     6a4:	d01c      	beq.n	6e0 <_gpio_set_direction+0x50>
     6a6:	2b02      	cmp	r3, #2
     6a8:	d037      	beq.n	71a <_gpio_set_direction+0x8a>
     6aa:	2b00      	cmp	r3, #0
     6ac:	d14e      	bne.n	74c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6ae:	79fb      	ldrb	r3, [r7, #7]
     6b0:	683a      	ldr	r2, [r7, #0]
     6b2:	4619      	mov	r1, r3
     6b4:	482a      	ldr	r0, [pc, #168]	; (760 <_gpio_set_direction+0xd0>)
     6b6:	4b2b      	ldr	r3, [pc, #172]	; (764 <_gpio_set_direction+0xd4>)
     6b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     6ba:	683b      	ldr	r3, [r7, #0]
     6bc:	b29b      	uxth	r3, r3
     6be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     6c2:	79fb      	ldrb	r3, [r7, #7]
     6c4:	4619      	mov	r1, r3
     6c6:	4826      	ldr	r0, [pc, #152]	; (760 <_gpio_set_direction+0xd0>)
     6c8:	4b27      	ldr	r3, [pc, #156]	; (768 <_gpio_set_direction+0xd8>)
     6ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     6d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     6d4:	79fb      	ldrb	r3, [r7, #7]
     6d6:	4619      	mov	r1, r3
     6d8:	4821      	ldr	r0, [pc, #132]	; (760 <_gpio_set_direction+0xd0>)
     6da:	4b23      	ldr	r3, [pc, #140]	; (768 <_gpio_set_direction+0xd8>)
     6dc:	4798      	blx	r3
		break;
     6de:	e03a      	b.n	756 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6e0:	79fb      	ldrb	r3, [r7, #7]
     6e2:	683a      	ldr	r2, [r7, #0]
     6e4:	4619      	mov	r1, r3
     6e6:	481e      	ldr	r0, [pc, #120]	; (760 <_gpio_set_direction+0xd0>)
     6e8:	4b1e      	ldr	r3, [pc, #120]	; (764 <_gpio_set_direction+0xd4>)
     6ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     6ec:	683b      	ldr	r3, [r7, #0]
     6ee:	b29b      	uxth	r3, r3
     6f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     6f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6f8:	79f9      	ldrb	r1, [r7, #7]
     6fa:	461a      	mov	r2, r3
     6fc:	4818      	ldr	r0, [pc, #96]	; (760 <_gpio_set_direction+0xd0>)
     6fe:	4b1a      	ldr	r3, [pc, #104]	; (768 <_gpio_set_direction+0xd8>)
     700:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     702:	683b      	ldr	r3, [r7, #0]
     704:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     70a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     70e:	79f9      	ldrb	r1, [r7, #7]
     710:	461a      	mov	r2, r3
     712:	4813      	ldr	r0, [pc, #76]	; (760 <_gpio_set_direction+0xd0>)
     714:	4b14      	ldr	r3, [pc, #80]	; (768 <_gpio_set_direction+0xd8>)
     716:	4798      	blx	r3
		break;
     718:	e01d      	b.n	756 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     71a:	79fb      	ldrb	r3, [r7, #7]
     71c:	683a      	ldr	r2, [r7, #0]
     71e:	4619      	mov	r1, r3
     720:	480f      	ldr	r0, [pc, #60]	; (760 <_gpio_set_direction+0xd0>)
     722:	4b12      	ldr	r3, [pc, #72]	; (76c <_gpio_set_direction+0xdc>)
     724:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     726:	683b      	ldr	r3, [r7, #0]
     728:	b29b      	uxth	r3, r3
     72a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     72e:	79fb      	ldrb	r3, [r7, #7]
     730:	4619      	mov	r1, r3
     732:	480b      	ldr	r0, [pc, #44]	; (760 <_gpio_set_direction+0xd0>)
     734:	4b0c      	ldr	r3, [pc, #48]	; (768 <_gpio_set_direction+0xd8>)
     736:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     738:	683b      	ldr	r3, [r7, #0]
     73a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     73c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     740:	79fb      	ldrb	r3, [r7, #7]
     742:	4619      	mov	r1, r3
     744:	4806      	ldr	r0, [pc, #24]	; (760 <_gpio_set_direction+0xd0>)
     746:	4b08      	ldr	r3, [pc, #32]	; (768 <_gpio_set_direction+0xd8>)
     748:	4798      	blx	r3
		break;
     74a:	e004      	b.n	756 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     74c:	2246      	movs	r2, #70	; 0x46
     74e:	4908      	ldr	r1, [pc, #32]	; (770 <_gpio_set_direction+0xe0>)
     750:	2000      	movs	r0, #0
     752:	4b08      	ldr	r3, [pc, #32]	; (774 <_gpio_set_direction+0xe4>)
     754:	4798      	blx	r3
	}
}
     756:	bf00      	nop
     758:	3708      	adds	r7, #8
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}
     75e:	bf00      	nop
     760:	41008000 	.word	0x41008000
     764:	00000451 	.word	0x00000451
     768:	00000669 	.word	0x00000669
     76c:	00000429 	.word	0x00000429
     770:	00002bec 	.word	0x00002bec
     774:	000013b9 	.word	0x000013b9

00000778 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     778:	b580      	push	{r7, lr}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
     77e:	4603      	mov	r3, r0
     780:	6039      	str	r1, [r7, #0]
     782:	71fb      	strb	r3, [r7, #7]
     784:	4613      	mov	r3, r2
     786:	71bb      	strb	r3, [r7, #6]
	if (level) {
     788:	79bb      	ldrb	r3, [r7, #6]
     78a:	2b00      	cmp	r3, #0
     78c:	d006      	beq.n	79c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     78e:	79fb      	ldrb	r3, [r7, #7]
     790:	683a      	ldr	r2, [r7, #0]
     792:	4619      	mov	r1, r3
     794:	4806      	ldr	r0, [pc, #24]	; (7b0 <_gpio_set_level+0x38>)
     796:	4b07      	ldr	r3, [pc, #28]	; (7b4 <_gpio_set_level+0x3c>)
     798:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     79a:	e005      	b.n	7a8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     79c:	79fb      	ldrb	r3, [r7, #7]
     79e:	683a      	ldr	r2, [r7, #0]
     7a0:	4619      	mov	r1, r3
     7a2:	4803      	ldr	r0, [pc, #12]	; (7b0 <_gpio_set_level+0x38>)
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <_gpio_set_level+0x40>)
     7a6:	4798      	blx	r3
}
     7a8:	bf00      	nop
     7aa:	3708      	adds	r7, #8
     7ac:	46bd      	mov	sp, r7
     7ae:	bd80      	pop	{r7, pc}
     7b0:	41008000 	.word	0x41008000
     7b4:	00000479 	.word	0x00000479
     7b8:	000004a1 	.word	0x000004a1

000007bc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     7bc:	b580      	push	{r7, lr}
     7be:	b082      	sub	sp, #8
     7c0:	af00      	add	r7, sp, #0
     7c2:	4603      	mov	r3, r0
     7c4:	71fb      	strb	r3, [r7, #7]
     7c6:	460b      	mov	r3, r1
     7c8:	71bb      	strb	r3, [r7, #6]
     7ca:	4613      	mov	r3, r2
     7cc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     7ce:	797b      	ldrb	r3, [r7, #5]
     7d0:	2b01      	cmp	r3, #1
     7d2:	d00a      	beq.n	7ea <_gpio_set_pin_pull_mode+0x2e>
     7d4:	2b02      	cmp	r3, #2
     7d6:	d01f      	beq.n	818 <_gpio_set_pin_pull_mode+0x5c>
     7d8:	2b00      	cmp	r3, #0
     7da:	d134      	bne.n	846 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     7dc:	79ba      	ldrb	r2, [r7, #6]
     7de:	79fb      	ldrb	r3, [r7, #7]
     7e0:	4619      	mov	r1, r3
     7e2:	481e      	ldr	r0, [pc, #120]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     7e4:	4b1e      	ldr	r3, [pc, #120]	; (860 <_gpio_set_pin_pull_mode+0xa4>)
     7e6:	4798      	blx	r3
		break;
     7e8:	e033      	b.n	852 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7ea:	79bb      	ldrb	r3, [r7, #6]
     7ec:	2201      	movs	r2, #1
     7ee:	409a      	lsls	r2, r3
     7f0:	79fb      	ldrb	r3, [r7, #7]
     7f2:	4619      	mov	r1, r3
     7f4:	4819      	ldr	r0, [pc, #100]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     7f6:	4b1b      	ldr	r3, [pc, #108]	; (864 <_gpio_set_pin_pull_mode+0xa8>)
     7f8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7fa:	79ba      	ldrb	r2, [r7, #6]
     7fc:	79fb      	ldrb	r3, [r7, #7]
     7fe:	4619      	mov	r1, r3
     800:	4816      	ldr	r0, [pc, #88]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     802:	4b19      	ldr	r3, [pc, #100]	; (868 <_gpio_set_pin_pull_mode+0xac>)
     804:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     806:	79bb      	ldrb	r3, [r7, #6]
     808:	2201      	movs	r2, #1
     80a:	409a      	lsls	r2, r3
     80c:	79fb      	ldrb	r3, [r7, #7]
     80e:	4619      	mov	r1, r3
     810:	4812      	ldr	r0, [pc, #72]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     812:	4b16      	ldr	r3, [pc, #88]	; (86c <_gpio_set_pin_pull_mode+0xb0>)
     814:	4798      	blx	r3
		break;
     816:	e01c      	b.n	852 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     818:	79bb      	ldrb	r3, [r7, #6]
     81a:	2201      	movs	r2, #1
     81c:	409a      	lsls	r2, r3
     81e:	79fb      	ldrb	r3, [r7, #7]
     820:	4619      	mov	r1, r3
     822:	480e      	ldr	r0, [pc, #56]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     824:	4b0f      	ldr	r3, [pc, #60]	; (864 <_gpio_set_pin_pull_mode+0xa8>)
     826:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     828:	79ba      	ldrb	r2, [r7, #6]
     82a:	79fb      	ldrb	r3, [r7, #7]
     82c:	4619      	mov	r1, r3
     82e:	480b      	ldr	r0, [pc, #44]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     830:	4b0d      	ldr	r3, [pc, #52]	; (868 <_gpio_set_pin_pull_mode+0xac>)
     832:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     834:	79bb      	ldrb	r3, [r7, #6]
     836:	2201      	movs	r2, #1
     838:	409a      	lsls	r2, r3
     83a:	79fb      	ldrb	r3, [r7, #7]
     83c:	4619      	mov	r1, r3
     83e:	4807      	ldr	r0, [pc, #28]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     840:	4b0b      	ldr	r3, [pc, #44]	; (870 <_gpio_set_pin_pull_mode+0xb4>)
     842:	4798      	blx	r3
		break;
     844:	e005      	b.n	852 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     846:	2289      	movs	r2, #137	; 0x89
     848:	490a      	ldr	r1, [pc, #40]	; (874 <_gpio_set_pin_pull_mode+0xb8>)
     84a:	2000      	movs	r0, #0
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <_gpio_set_pin_pull_mode+0xbc>)
     84e:	4798      	blx	r3
		break;
     850:	bf00      	nop
	}
}
     852:	bf00      	nop
     854:	3708      	adds	r7, #8
     856:	46bd      	mov	sp, r7
     858:	bd80      	pop	{r7, pc}
     85a:	bf00      	nop
     85c:	41008000 	.word	0x41008000
     860:	00000625 	.word	0x00000625
     864:	00000451 	.word	0x00000451
     868:	000005e1 	.word	0x000005e1
     86c:	00000479 	.word	0x00000479
     870:	000004a1 	.word	0x000004a1
     874:	00002bec 	.word	0x00002bec
     878:	000013b9 	.word	0x000013b9

0000087c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     87c:	b590      	push	{r4, r7, lr}
     87e:	b085      	sub	sp, #20
     880:	af00      	add	r7, sp, #0
     882:	6078      	str	r0, [r7, #4]
     884:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     886:	687b      	ldr	r3, [r7, #4]
     888:	095b      	lsrs	r3, r3, #5
     88a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	b2db      	uxtb	r3, r3
     890:	f003 031f 	and.w	r3, r3, #31
     894:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     896:	683b      	ldr	r3, [r7, #0]
     898:	f1b3 3fff 	cmp.w	r3, #4294967295
     89c:	d106      	bne.n	8ac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     89e:	7bba      	ldrb	r2, [r7, #14]
     8a0:	7bf9      	ldrb	r1, [r7, #15]
     8a2:	2300      	movs	r3, #0
     8a4:	4812      	ldr	r0, [pc, #72]	; (8f0 <_gpio_set_pin_function+0x74>)
     8a6:	4c13      	ldr	r4, [pc, #76]	; (8f4 <_gpio_set_pin_function+0x78>)
     8a8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     8aa:	e01d      	b.n	8e8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     8ac:	7bba      	ldrb	r2, [r7, #14]
     8ae:	7bf9      	ldrb	r1, [r7, #15]
     8b0:	2301      	movs	r3, #1
     8b2:	480f      	ldr	r0, [pc, #60]	; (8f0 <_gpio_set_pin_function+0x74>)
     8b4:	4c0f      	ldr	r4, [pc, #60]	; (8f4 <_gpio_set_pin_function+0x78>)
     8b6:	47a0      	blx	r4
		if (pin & 1) {
     8b8:	7bbb      	ldrb	r3, [r7, #14]
     8ba:	f003 0301 	and.w	r3, r3, #1
     8be:	2b00      	cmp	r3, #0
     8c0:	d009      	beq.n	8d6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     8c2:	7bbb      	ldrb	r3, [r7, #14]
     8c4:	085b      	lsrs	r3, r3, #1
     8c6:	b2da      	uxtb	r2, r3
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	b2db      	uxtb	r3, r3
     8cc:	7bf9      	ldrb	r1, [r7, #15]
     8ce:	4808      	ldr	r0, [pc, #32]	; (8f0 <_gpio_set_pin_function+0x74>)
     8d0:	4c09      	ldr	r4, [pc, #36]	; (8f8 <_gpio_set_pin_function+0x7c>)
     8d2:	47a0      	blx	r4
}
     8d4:	e008      	b.n	8e8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     8d6:	7bbb      	ldrb	r3, [r7, #14]
     8d8:	085b      	lsrs	r3, r3, #1
     8da:	b2da      	uxtb	r2, r3
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	b2db      	uxtb	r3, r3
     8e0:	7bf9      	ldrb	r1, [r7, #15]
     8e2:	4803      	ldr	r0, [pc, #12]	; (8f0 <_gpio_set_pin_function+0x74>)
     8e4:	4c05      	ldr	r4, [pc, #20]	; (8fc <_gpio_set_pin_function+0x80>)
     8e6:	47a0      	blx	r4
}
     8e8:	bf00      	nop
     8ea:	3714      	adds	r7, #20
     8ec:	46bd      	mov	sp, r7
     8ee:	bd90      	pop	{r4, r7, pc}
     8f0:	41008000 	.word	0x41008000
     8f4:	00000587 	.word	0x00000587
     8f8:	00000529 	.word	0x00000529
     8fc:	000004c9 	.word	0x000004c9

00000900 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     900:	b580      	push	{r7, lr}
     902:	b082      	sub	sp, #8
     904:	af00      	add	r7, sp, #0
     906:	4603      	mov	r3, r0
     908:	460a      	mov	r2, r1
     90a:	71fb      	strb	r3, [r7, #7]
     90c:	4613      	mov	r3, r2
     90e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     910:	79fb      	ldrb	r3, [r7, #7]
     912:	095b      	lsrs	r3, r3, #5
     914:	b2d8      	uxtb	r0, r3
     916:	79fb      	ldrb	r3, [r7, #7]
     918:	f003 031f 	and.w	r3, r3, #31
     91c:	b2db      	uxtb	r3, r3
     91e:	79ba      	ldrb	r2, [r7, #6]
     920:	4619      	mov	r1, r3
     922:	4b03      	ldr	r3, [pc, #12]	; (930 <gpio_set_pin_pull_mode+0x30>)
     924:	4798      	blx	r3
}
     926:	bf00      	nop
     928:	3708      	adds	r7, #8
     92a:	46bd      	mov	sp, r7
     92c:	bd80      	pop	{r7, pc}
     92e:	bf00      	nop
     930:	000007bd 	.word	0x000007bd

00000934 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     934:	b580      	push	{r7, lr}
     936:	b082      	sub	sp, #8
     938:	af00      	add	r7, sp, #0
     93a:	6078      	str	r0, [r7, #4]
     93c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     93e:	6839      	ldr	r1, [r7, #0]
     940:	6878      	ldr	r0, [r7, #4]
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <gpio_set_pin_function+0x1c>)
     944:	4798      	blx	r3
}
     946:	bf00      	nop
     948:	3708      	adds	r7, #8
     94a:	46bd      	mov	sp, r7
     94c:	bd80      	pop	{r7, pc}
     94e:	bf00      	nop
     950:	0000087d 	.word	0x0000087d

00000954 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     954:	b580      	push	{r7, lr}
     956:	b082      	sub	sp, #8
     958:	af00      	add	r7, sp, #0
     95a:	4603      	mov	r3, r0
     95c:	460a      	mov	r2, r1
     95e:	71fb      	strb	r3, [r7, #7]
     960:	4613      	mov	r3, r2
     962:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     964:	79fb      	ldrb	r3, [r7, #7]
     966:	095b      	lsrs	r3, r3, #5
     968:	b2d8      	uxtb	r0, r3
     96a:	79fb      	ldrb	r3, [r7, #7]
     96c:	f003 031f 	and.w	r3, r3, #31
     970:	2201      	movs	r2, #1
     972:	fa02 f303 	lsl.w	r3, r2, r3
     976:	79ba      	ldrb	r2, [r7, #6]
     978:	4619      	mov	r1, r3
     97a:	4b03      	ldr	r3, [pc, #12]	; (988 <gpio_set_pin_direction+0x34>)
     97c:	4798      	blx	r3
}
     97e:	bf00      	nop
     980:	3708      	adds	r7, #8
     982:	46bd      	mov	sp, r7
     984:	bd80      	pop	{r7, pc}
     986:	bf00      	nop
     988:	00000691 	.word	0x00000691

0000098c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     98c:	b580      	push	{r7, lr}
     98e:	b082      	sub	sp, #8
     990:	af00      	add	r7, sp, #0
     992:	4603      	mov	r3, r0
     994:	460a      	mov	r2, r1
     996:	71fb      	strb	r3, [r7, #7]
     998:	4613      	mov	r3, r2
     99a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     99c:	79fb      	ldrb	r3, [r7, #7]
     99e:	095b      	lsrs	r3, r3, #5
     9a0:	b2d8      	uxtb	r0, r3
     9a2:	79fb      	ldrb	r3, [r7, #7]
     9a4:	f003 031f 	and.w	r3, r3, #31
     9a8:	2201      	movs	r2, #1
     9aa:	fa02 f303 	lsl.w	r3, r2, r3
     9ae:	79ba      	ldrb	r2, [r7, #6]
     9b0:	4619      	mov	r1, r3
     9b2:	4b03      	ldr	r3, [pc, #12]	; (9c0 <gpio_set_pin_level+0x34>)
     9b4:	4798      	blx	r3
}
     9b6:	bf00      	nop
     9b8:	3708      	adds	r7, #8
     9ba:	46bd      	mov	sp, r7
     9bc:	bd80      	pop	{r7, pc}
     9be:	bf00      	nop
     9c0:	00000779 	.word	0x00000779

000009c4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0
	_init_chip();
     9c8:	4b01      	ldr	r3, [pc, #4]	; (9d0 <init_mcu+0xc>)
     9ca:	4798      	blx	r3
}
     9cc:	bf00      	nop
     9ce:	bd80      	pop	{r7, pc}
     9d0:	0000168d 	.word	0x0000168d

000009d4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     9d4:	b580      	push	{r7, lr}
     9d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     9d8:	4806      	ldr	r0, [pc, #24]	; (9f4 <TIMER_0_init+0x20>)
     9da:	4b07      	ldr	r3, [pc, #28]	; (9f8 <TIMER_0_init+0x24>)
     9dc:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     9de:	4b07      	ldr	r3, [pc, #28]	; (9fc <TIMER_0_init+0x28>)
     9e0:	4798      	blx	r3
     9e2:	4603      	mov	r3, r0
     9e4:	461a      	mov	r2, r3
     9e6:	4906      	ldr	r1, [pc, #24]	; (a00 <TIMER_0_init+0x2c>)
     9e8:	4806      	ldr	r0, [pc, #24]	; (a04 <TIMER_0_init+0x30>)
     9ea:	4b07      	ldr	r3, [pc, #28]	; (a08 <TIMER_0_init+0x34>)
     9ec:	4798      	blx	r3
}
     9ee:	bf00      	nop
     9f0:	bd80      	pop	{r7, pc}
     9f2:	bf00      	nop
     9f4:	40000800 	.word	0x40000800
     9f8:	000003a9 	.word	0x000003a9
     9fc:	00001b41 	.word	0x00001b41
     a00:	40002400 	.word	0x40002400
     a04:	20000148 	.word	0x20000148
     a08:	00000db1 	.word	0x00000db1

00000a0c <USART_1_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_1_CLOCK_init()
{
     a0c:	b580      	push	{r7, lr}
     a0e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a10:	2240      	movs	r2, #64	; 0x40
     a12:	2107      	movs	r1, #7
     a14:	4806      	ldr	r0, [pc, #24]	; (a30 <USART_1_CLOCK_init+0x24>)
     a16:	4b07      	ldr	r3, [pc, #28]	; (a34 <USART_1_CLOCK_init+0x28>)
     a18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a1a:	2243      	movs	r2, #67	; 0x43
     a1c:	2103      	movs	r1, #3
     a1e:	4804      	ldr	r0, [pc, #16]	; (a30 <USART_1_CLOCK_init+0x24>)
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <USART_1_CLOCK_init+0x28>)
     a22:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     a24:	4804      	ldr	r0, [pc, #16]	; (a38 <USART_1_CLOCK_init+0x2c>)
     a26:	4b05      	ldr	r3, [pc, #20]	; (a3c <USART_1_CLOCK_init+0x30>)
     a28:	4798      	blx	r3
}
     a2a:	bf00      	nop
     a2c:	bd80      	pop	{r7, pc}
     a2e:	bf00      	nop
     a30:	40001c00 	.word	0x40001c00
     a34:	00000383 	.word	0x00000383
     a38:	40000800 	.word	0x40000800
     a3c:	000003c9 	.word	0x000003c9

00000a40 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
     a40:	b580      	push	{r7, lr}
     a42:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     a44:	4904      	ldr	r1, [pc, #16]	; (a58 <USART_1_PORT_init+0x18>)
     a46:	2004      	movs	r0, #4
     a48:	4b04      	ldr	r3, [pc, #16]	; (a5c <USART_1_PORT_init+0x1c>)
     a4a:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     a4c:	4904      	ldr	r1, [pc, #16]	; (a60 <USART_1_PORT_init+0x20>)
     a4e:	2005      	movs	r0, #5
     a50:	4b02      	ldr	r3, [pc, #8]	; (a5c <USART_1_PORT_init+0x1c>)
     a52:	4798      	blx	r3
}
     a54:	bf00      	nop
     a56:	bd80      	pop	{r7, pc}
     a58:	00040003 	.word	0x00040003
     a5c:	00000935 	.word	0x00000935
     a60:	00050003 	.word	0x00050003

00000a64 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
     a64:	b590      	push	{r4, r7, lr}
     a66:	b083      	sub	sp, #12
     a68:	af02      	add	r7, sp, #8
	USART_1_CLOCK_init();
     a6a:	4b08      	ldr	r3, [pc, #32]	; (a8c <USART_1_init+0x28>)
     a6c:	4798      	blx	r3
	usart_async_init(&USART_1, SERCOM0, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     a6e:	2300      	movs	r3, #0
     a70:	9300      	str	r3, [sp, #0]
     a72:	2310      	movs	r3, #16
     a74:	4a06      	ldr	r2, [pc, #24]	; (a90 <USART_1_init+0x2c>)
     a76:	4907      	ldr	r1, [pc, #28]	; (a94 <USART_1_init+0x30>)
     a78:	4807      	ldr	r0, [pc, #28]	; (a98 <USART_1_init+0x34>)
     a7a:	4c08      	ldr	r4, [pc, #32]	; (a9c <USART_1_init+0x38>)
     a7c:	47a0      	blx	r4
	USART_1_PORT_init();
     a7e:	4b08      	ldr	r3, [pc, #32]	; (aa0 <USART_1_init+0x3c>)
     a80:	4798      	blx	r3
}
     a82:	bf00      	nop
     a84:	3704      	adds	r7, #4
     a86:	46bd      	mov	sp, r7
     a88:	bd90      	pop	{r4, r7, pc}
     a8a:	bf00      	nop
     a8c:	00000a0d 	.word	0x00000a0d
     a90:	2000004c 	.word	0x2000004c
     a94:	40003000 	.word	0x40003000
     a98:	200000f8 	.word	0x200000f8
     a9c:	00000f7d 	.word	0x00000f7d
     aa0:	00000a41 	.word	0x00000a41

00000aa4 <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     aa4:	b580      	push	{r7, lr}
     aa6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aa8:	2240      	movs	r2, #64	; 0x40
     aaa:	2117      	movs	r1, #23
     aac:	4806      	ldr	r0, [pc, #24]	; (ac8 <USART_0_CLOCK_init+0x24>)
     aae:	4b07      	ldr	r3, [pc, #28]	; (acc <USART_0_CLOCK_init+0x28>)
     ab0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ab2:	2243      	movs	r2, #67	; 0x43
     ab4:	2103      	movs	r1, #3
     ab6:	4804      	ldr	r0, [pc, #16]	; (ac8 <USART_0_CLOCK_init+0x24>)
     ab8:	4b04      	ldr	r3, [pc, #16]	; (acc <USART_0_CLOCK_init+0x28>)
     aba:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     abc:	4804      	ldr	r0, [pc, #16]	; (ad0 <USART_0_CLOCK_init+0x2c>)
     abe:	4b05      	ldr	r3, [pc, #20]	; (ad4 <USART_0_CLOCK_init+0x30>)
     ac0:	4798      	blx	r3
}
     ac2:	bf00      	nop
     ac4:	bd80      	pop	{r7, pc}
     ac6:	bf00      	nop
     ac8:	40001c00 	.word	0x40001c00
     acc:	00000383 	.word	0x00000383
     ad0:	40000800 	.word	0x40000800
     ad4:	000003e9 	.word	0x000003e9

00000ad8 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     adc:	4904      	ldr	r1, [pc, #16]	; (af0 <USART_0_PORT_init+0x18>)
     ade:	2039      	movs	r0, #57	; 0x39
     ae0:	4b04      	ldr	r3, [pc, #16]	; (af4 <USART_0_PORT_init+0x1c>)
     ae2:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     ae4:	4904      	ldr	r1, [pc, #16]	; (af8 <USART_0_PORT_init+0x20>)
     ae6:	2038      	movs	r0, #56	; 0x38
     ae8:	4b02      	ldr	r3, [pc, #8]	; (af4 <USART_0_PORT_init+0x1c>)
     aea:	4798      	blx	r3
}
     aec:	bf00      	nop
     aee:	bd80      	pop	{r7, pc}
     af0:	00390003 	.word	0x00390003
     af4:	00000935 	.word	0x00000935
     af8:	00380003 	.word	0x00380003

00000afc <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     afc:	b590      	push	{r4, r7, lr}
     afe:	b083      	sub	sp, #12
     b00:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     b02:	4b08      	ldr	r3, [pc, #32]	; (b24 <USART_0_init+0x28>)
     b04:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     b06:	2300      	movs	r3, #0
     b08:	9300      	str	r3, [sp, #0]
     b0a:	2310      	movs	r3, #16
     b0c:	4a06      	ldr	r2, [pc, #24]	; (b28 <USART_0_init+0x2c>)
     b0e:	4907      	ldr	r1, [pc, #28]	; (b2c <USART_0_init+0x30>)
     b10:	4807      	ldr	r0, [pc, #28]	; (b30 <USART_0_init+0x34>)
     b12:	4c08      	ldr	r4, [pc, #32]	; (b34 <USART_0_init+0x38>)
     b14:	47a0      	blx	r4
	USART_0_PORT_init();
     b16:	4b08      	ldr	r3, [pc, #32]	; (b38 <USART_0_init+0x3c>)
     b18:	4798      	blx	r3
}
     b1a:	bf00      	nop
     b1c:	3704      	adds	r7, #4
     b1e:	46bd      	mov	sp, r7
     b20:	bd90      	pop	{r4, r7, pc}
     b22:	bf00      	nop
     b24:	00000aa5 	.word	0x00000aa5
     b28:	2000005c 	.word	0x2000005c
     b2c:	41012000 	.word	0x41012000
     b30:	200000a8 	.word	0x200000a8
     b34:	00000f7d 	.word	0x00000f7d
     b38:	00000ad9 	.word	0x00000ad9

00000b3c <delay_driver_init>:

void delay_driver_init(void)
{
     b3c:	b580      	push	{r7, lr}
     b3e:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     b40:	4802      	ldr	r0, [pc, #8]	; (b4c <delay_driver_init+0x10>)
     b42:	4b03      	ldr	r3, [pc, #12]	; (b50 <delay_driver_init+0x14>)
     b44:	4798      	blx	r3
}
     b46:	bf00      	nop
     b48:	bd80      	pop	{r7, pc}
     b4a:	bf00      	nop
     b4c:	e000e010 	.word	0xe000e010
     b50:	00000cad 	.word	0x00000cad

00000b54 <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     b58:	4904      	ldr	r1, [pc, #16]	; (b6c <PWM_0_PORT_init+0x18>)
     b5a:	204a      	movs	r0, #74	; 0x4a
     b5c:	4b04      	ldr	r3, [pc, #16]	; (b70 <PWM_0_PORT_init+0x1c>)
     b5e:	4798      	blx	r3

	gpio_set_pin_function(PC11, PINMUX_PC11F_TCC0_WO1);
     b60:	4904      	ldr	r1, [pc, #16]	; (b74 <PWM_0_PORT_init+0x20>)
     b62:	204b      	movs	r0, #75	; 0x4b
     b64:	4b02      	ldr	r3, [pc, #8]	; (b70 <PWM_0_PORT_init+0x1c>)
     b66:	4798      	blx	r3
}
     b68:	bf00      	nop
     b6a:	bd80      	pop	{r7, pc}
     b6c:	004a0005 	.word	0x004a0005
     b70:	00000935 	.word	0x00000935
     b74:	004b0005 	.word	0x004b0005

00000b78 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     b78:	b580      	push	{r7, lr}
     b7a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     b7c:	4804      	ldr	r0, [pc, #16]	; (b90 <PWM_0_CLOCK_init+0x18>)
     b7e:	4b05      	ldr	r3, [pc, #20]	; (b94 <PWM_0_CLOCK_init+0x1c>)
     b80:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b82:	2240      	movs	r2, #64	; 0x40
     b84:	2119      	movs	r1, #25
     b86:	4804      	ldr	r0, [pc, #16]	; (b98 <PWM_0_CLOCK_init+0x20>)
     b88:	4b04      	ldr	r3, [pc, #16]	; (b9c <PWM_0_CLOCK_init+0x24>)
     b8a:	4798      	blx	r3
}
     b8c:	bf00      	nop
     b8e:	bd80      	pop	{r7, pc}
     b90:	40000800 	.word	0x40000800
     b94:	00000409 	.word	0x00000409
     b98:	40001c00 	.word	0x40001c00
     b9c:	00000383 	.word	0x00000383

00000ba0 <system_init>:

void system_init(void)
{
     ba0:	b580      	push	{r7, lr}
     ba2:	af00      	add	r7, sp, #0
	init_mcu();
     ba4:	4b22      	ldr	r3, [pc, #136]	; (c30 <system_init+0x90>)
     ba6:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     ba8:	2101      	movs	r1, #1
     baa:	2021      	movs	r0, #33	; 0x21
     bac:	4b21      	ldr	r3, [pc, #132]	; (c34 <system_init+0x94>)
     bae:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     bb0:	2100      	movs	r1, #0
     bb2:	2021      	movs	r0, #33	; 0x21
     bb4:	4b20      	ldr	r3, [pc, #128]	; (c38 <system_init+0x98>)
     bb6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     bb8:	f04f 31ff 	mov.w	r1, #4294967295
     bbc:	2021      	movs	r0, #33	; 0x21
     bbe:	4b1f      	ldr	r3, [pc, #124]	; (c3c <system_init+0x9c>)
     bc0:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT, GPIO_DIRECTION_IN);
     bc2:	2101      	movs	r1, #1
     bc4:	2025      	movs	r0, #37	; 0x25
     bc6:	4b1b      	ldr	r3, [pc, #108]	; (c34 <system_init+0x94>)
     bc8:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT,
     bca:	2101      	movs	r1, #1
     bcc:	2025      	movs	r0, #37	; 0x25
     bce:	4b1a      	ldr	r3, [pc, #104]	; (c38 <system_init+0x98>)
     bd0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT, GPIO_PIN_FUNCTION_OFF);
     bd2:	f04f 31ff 	mov.w	r1, #4294967295
     bd6:	2025      	movs	r0, #37	; 0x25
     bd8:	4b18      	ldr	r3, [pc, #96]	; (c3c <system_init+0x9c>)
     bda:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     bdc:	2101      	movs	r1, #1
     bde:	203f      	movs	r0, #63	; 0x3f
     be0:	4b14      	ldr	r3, [pc, #80]	; (c34 <system_init+0x94>)
     be2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     be4:	2101      	movs	r1, #1
     be6:	203f      	movs	r0, #63	; 0x3f
     be8:	4b13      	ldr	r3, [pc, #76]	; (c38 <system_init+0x98>)
     bea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     bec:	f04f 31ff 	mov.w	r1, #4294967295
     bf0:	203f      	movs	r0, #63	; 0x3f
     bf2:	4b12      	ldr	r3, [pc, #72]	; (c3c <system_init+0x9c>)
     bf4:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     bf6:	2101      	movs	r1, #1
     bf8:	2052      	movs	r0, #82	; 0x52
     bfa:	4b11      	ldr	r3, [pc, #68]	; (c40 <system_init+0xa0>)
     bfc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     bfe:	2102      	movs	r1, #2
     c00:	2052      	movs	r0, #82	; 0x52
     c02:	4b0c      	ldr	r3, [pc, #48]	; (c34 <system_init+0x94>)
     c04:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     c06:	f04f 31ff 	mov.w	r1, #4294967295
     c0a:	2052      	movs	r0, #82	; 0x52
     c0c:	4b0b      	ldr	r3, [pc, #44]	; (c3c <system_init+0x9c>)
     c0e:	4798      	blx	r3

	TIMER_0_init();
     c10:	4b0c      	ldr	r3, [pc, #48]	; (c44 <system_init+0xa4>)
     c12:	4798      	blx	r3
	USART_1_init();
     c14:	4b0c      	ldr	r3, [pc, #48]	; (c48 <system_init+0xa8>)
     c16:	4798      	blx	r3
	USART_0_init();
     c18:	4b0c      	ldr	r3, [pc, #48]	; (c4c <system_init+0xac>)
     c1a:	4798      	blx	r3

	delay_driver_init();
     c1c:	4b0c      	ldr	r3, [pc, #48]	; (c50 <system_init+0xb0>)
     c1e:	4798      	blx	r3

	PWM_0_CLOCK_init();
     c20:	4b0c      	ldr	r3, [pc, #48]	; (c54 <system_init+0xb4>)
     c22:	4798      	blx	r3

	PWM_0_PORT_init();
     c24:	4b0c      	ldr	r3, [pc, #48]	; (c58 <system_init+0xb8>)
     c26:	4798      	blx	r3

	PWM_0_init();
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <system_init+0xbc>)
     c2a:	4798      	blx	r3
}
     c2c:	bf00      	nop
     c2e:	bd80      	pop	{r7, pc}
     c30:	000009c5 	.word	0x000009c5
     c34:	00000955 	.word	0x00000955
     c38:	00000901 	.word	0x00000901
     c3c:	00000935 	.word	0x00000935
     c40:	0000098d 	.word	0x0000098d
     c44:	000009d5 	.word	0x000009d5
     c48:	00000a65 	.word	0x00000a65
     c4c:	00000afd 	.word	0x00000afd
     c50:	00000b3d 	.word	0x00000b3d
     c54:	00000b79 	.word	0x00000b79
     c58:	00000b55 	.word	0x00000b55
     c5c:	000028c9 	.word	0x000028c9

00000c60 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     c60:	b480      	push	{r7}
     c62:	b085      	sub	sp, #20
     c64:	af00      	add	r7, sp, #0
     c66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c68:	f3ef 8310 	mrs	r3, PRIMASK
     c6c:	60fb      	str	r3, [r7, #12]
  return(result);
     c6e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     c70:	687b      	ldr	r3, [r7, #4]
     c72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c74:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     c76:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     c7a:	bf00      	nop
     c7c:	3714      	adds	r7, #20
     c7e:	46bd      	mov	sp, r7
     c80:	f85d 7b04 	ldr.w	r7, [sp], #4
     c84:	4770      	bx	lr

00000c86 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     c86:	b480      	push	{r7}
     c88:	b085      	sub	sp, #20
     c8a:	af00      	add	r7, sp, #0
     c8c:	6078      	str	r0, [r7, #4]
     c8e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     c98:	68fb      	ldr	r3, [r7, #12]
     c9a:	f383 8810 	msr	PRIMASK, r3
}
     c9e:	bf00      	nop
     ca0:	3714      	adds	r7, #20
     ca2:	46bd      	mov	sp, r7
     ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca8:	4770      	bx	lr
	...

00000cac <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     cac:	b580      	push	{r7, lr}
     cae:	b082      	sub	sp, #8
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     cb4:	4a05      	ldr	r2, [pc, #20]	; (ccc <delay_init+0x20>)
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	6013      	str	r3, [r2, #0]
     cba:	4b04      	ldr	r3, [pc, #16]	; (ccc <delay_init+0x20>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	4618      	mov	r0, r3
     cc0:	4b03      	ldr	r3, [pc, #12]	; (cd0 <delay_init+0x24>)
     cc2:	4798      	blx	r3
}
     cc4:	bf00      	nop
     cc6:	3708      	adds	r7, #8
     cc8:	46bd      	mov	sp, r7
     cca:	bd80      	pop	{r7, pc}
     ccc:	2000006c 	.word	0x2000006c
     cd0:	00002725 	.word	0x00002725

00000cd4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b084      	sub	sp, #16
     cd8:	af00      	add	r7, sp, #0
     cda:	60f8      	str	r0, [r7, #12]
     cdc:	60b9      	str	r1, [r7, #8]
     cde:	4613      	mov	r3, r2
     ce0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d004      	beq.n	cf2 <io_write+0x1e>
     ce8:	68bb      	ldr	r3, [r7, #8]
     cea:	2b00      	cmp	r3, #0
     cec:	d001      	beq.n	cf2 <io_write+0x1e>
     cee:	2301      	movs	r3, #1
     cf0:	e000      	b.n	cf4 <io_write+0x20>
     cf2:	2300      	movs	r3, #0
     cf4:	f003 0301 	and.w	r3, r3, #1
     cf8:	b2db      	uxtb	r3, r3
     cfa:	2234      	movs	r2, #52	; 0x34
     cfc:	4907      	ldr	r1, [pc, #28]	; (d1c <io_write+0x48>)
     cfe:	4618      	mov	r0, r3
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <io_write+0x4c>)
     d02:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     d04:	68fb      	ldr	r3, [r7, #12]
     d06:	681b      	ldr	r3, [r3, #0]
     d08:	88fa      	ldrh	r2, [r7, #6]
     d0a:	68b9      	ldr	r1, [r7, #8]
     d0c:	68f8      	ldr	r0, [r7, #12]
     d0e:	4798      	blx	r3
     d10:	4603      	mov	r3, r0
}
     d12:	4618      	mov	r0, r3
     d14:	3710      	adds	r7, #16
     d16:	46bd      	mov	sp, r7
     d18:	bd80      	pop	{r7, pc}
     d1a:	bf00      	nop
     d1c:	00002c08 	.word	0x00002c08
     d20:	000013b9 	.word	0x000013b9

00000d24 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     d24:	b580      	push	{r7, lr}
     d26:	b084      	sub	sp, #16
     d28:	af00      	add	r7, sp, #0
     d2a:	60f8      	str	r0, [r7, #12]
     d2c:	60b9      	str	r1, [r7, #8]
     d2e:	4613      	mov	r3, r2
     d30:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	2b00      	cmp	r3, #0
     d36:	d004      	beq.n	d42 <io_read+0x1e>
     d38:	68bb      	ldr	r3, [r7, #8]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d001      	beq.n	d42 <io_read+0x1e>
     d3e:	2301      	movs	r3, #1
     d40:	e000      	b.n	d44 <io_read+0x20>
     d42:	2300      	movs	r3, #0
     d44:	f003 0301 	and.w	r3, r3, #1
     d48:	b2db      	uxtb	r3, r3
     d4a:	223d      	movs	r2, #61	; 0x3d
     d4c:	4907      	ldr	r1, [pc, #28]	; (d6c <io_read+0x48>)
     d4e:	4618      	mov	r0, r3
     d50:	4b07      	ldr	r3, [pc, #28]	; (d70 <io_read+0x4c>)
     d52:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     d54:	68fb      	ldr	r3, [r7, #12]
     d56:	685b      	ldr	r3, [r3, #4]
     d58:	88fa      	ldrh	r2, [r7, #6]
     d5a:	68b9      	ldr	r1, [r7, #8]
     d5c:	68f8      	ldr	r0, [r7, #12]
     d5e:	4798      	blx	r3
     d60:	4603      	mov	r3, r0
}
     d62:	4618      	mov	r0, r3
     d64:	3710      	adds	r7, #16
     d66:	46bd      	mov	sp, r7
     d68:	bd80      	pop	{r7, pc}
     d6a:	bf00      	nop
     d6c:	00002c08 	.word	0x00002c08
     d70:	000013b9 	.word	0x000013b9

00000d74 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     d74:	b480      	push	{r7}
     d76:	b083      	sub	sp, #12
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	681b      	ldr	r3, [r3, #0]
}
     d80:	4618      	mov	r0, r3
     d82:	370c      	adds	r7, #12
     d84:	46bd      	mov	sp, r7
     d86:	f85d 7b04 	ldr.w	r7, [sp], #4
     d8a:	4770      	bx	lr

00000d8c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     d8c:	b480      	push	{r7}
     d8e:	b083      	sub	sp, #12
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	2b00      	cmp	r3, #0
     d98:	d002      	beq.n	da0 <list_get_next_element+0x14>
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	e000      	b.n	da2 <list_get_next_element+0x16>
     da0:	2300      	movs	r3, #0
}
     da2:	4618      	mov	r0, r3
     da4:	370c      	adds	r7, #12
     da6:	46bd      	mov	sp, r7
     da8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dac:	4770      	bx	lr
	...

00000db0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     db0:	b580      	push	{r7, lr}
     db2:	b084      	sub	sp, #16
     db4:	af00      	add	r7, sp, #0
     db6:	60f8      	str	r0, [r7, #12]
     db8:	60b9      	str	r1, [r7, #8]
     dba:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d004      	beq.n	dcc <timer_init+0x1c>
     dc2:	68bb      	ldr	r3, [r7, #8]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d001      	beq.n	dcc <timer_init+0x1c>
     dc8:	2301      	movs	r3, #1
     dca:	e000      	b.n	dce <timer_init+0x1e>
     dcc:	2300      	movs	r3, #0
     dce:	f003 0301 	and.w	r3, r3, #1
     dd2:	b2db      	uxtb	r3, r3
     dd4:	223b      	movs	r2, #59	; 0x3b
     dd6:	490a      	ldr	r1, [pc, #40]	; (e00 <timer_init+0x50>)
     dd8:	4618      	mov	r0, r3
     dda:	4b0a      	ldr	r3, [pc, #40]	; (e04 <timer_init+0x54>)
     ddc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	68b9      	ldr	r1, [r7, #8]
     de2:	4618      	mov	r0, r3
     de4:	4b08      	ldr	r3, [pc, #32]	; (e08 <timer_init+0x58>)
     de6:	4798      	blx	r3
	descr->time                           = 0;
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	2200      	movs	r2, #0
     dec:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     dee:	68fb      	ldr	r3, [r7, #12]
     df0:	4a06      	ldr	r2, [pc, #24]	; (e0c <timer_init+0x5c>)
     df2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     df4:	2300      	movs	r3, #0
}
     df6:	4618      	mov	r0, r3
     df8:	3710      	adds	r7, #16
     dfa:	46bd      	mov	sp, r7
     dfc:	bd80      	pop	{r7, pc}
     dfe:	bf00      	nop
     e00:	00002c1c 	.word	0x00002c1c
     e04:	000013b9 	.word	0x000013b9
     e08:	00001a65 	.word	0x00001a65
     e0c:	00000ec1 	.word	0x00000ec1

00000e10 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     e10:	b580      	push	{r7, lr}
     e12:	b088      	sub	sp, #32
     e14:	af00      	add	r7, sp, #0
     e16:	60f8      	str	r0, [r7, #12]
     e18:	60b9      	str	r1, [r7, #8]
     e1a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     e1c:	2300      	movs	r3, #0
     e1e:	61bb      	str	r3, [r7, #24]
     e20:	68f8      	ldr	r0, [r7, #12]
     e22:	4b23      	ldr	r3, [pc, #140]	; (eb0 <timer_add_timer_task+0xa0>)
     e24:	4798      	blx	r3
     e26:	6138      	str	r0, [r7, #16]

	if (!head) {
     e28:	693b      	ldr	r3, [r7, #16]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d104      	bne.n	e38 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     e2e:	68b9      	ldr	r1, [r7, #8]
     e30:	68f8      	ldr	r0, [r7, #12]
     e32:	4b20      	ldr	r3, [pc, #128]	; (eb4 <timer_add_timer_task+0xa4>)
     e34:	4798      	blx	r3
		return;
     e36:	e037      	b.n	ea8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e38:	693b      	ldr	r3, [r7, #16]
     e3a:	61fb      	str	r3, [r7, #28]
     e3c:	e022      	b.n	e84 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
     e3e:	69fb      	ldr	r3, [r7, #28]
     e40:	685a      	ldr	r2, [r3, #4]
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	429a      	cmp	r2, r3
     e46:	d808      	bhi.n	e5a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
     e48:	69fb      	ldr	r3, [r7, #28]
     e4a:	689a      	ldr	r2, [r3, #8]
     e4c:	69fb      	ldr	r3, [r7, #28]
     e4e:	6859      	ldr	r1, [r3, #4]
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	1acb      	subs	r3, r1, r3
     e54:	4413      	add	r3, r2
     e56:	617b      	str	r3, [r7, #20]
     e58:	e009      	b.n	e6e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e5a:	69fb      	ldr	r3, [r7, #28]
     e5c:	689a      	ldr	r2, [r3, #8]
     e5e:	69fb      	ldr	r3, [r7, #28]
     e60:	685b      	ldr	r3, [r3, #4]
     e62:	441a      	add	r2, r3
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	425b      	negs	r3, r3
     e68:	4413      	add	r3, r2
     e6a:	3301      	adds	r3, #1
     e6c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
     e6e:	68bb      	ldr	r3, [r7, #8]
     e70:	689a      	ldr	r2, [r3, #8]
     e72:	697b      	ldr	r3, [r7, #20]
     e74:	429a      	cmp	r2, r3
     e76:	d909      	bls.n	e8c <timer_add_timer_task+0x7c>
			break;
		prev = it;
     e78:	69fb      	ldr	r3, [r7, #28]
     e7a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e7c:	69f8      	ldr	r0, [r7, #28]
     e7e:	4b0e      	ldr	r3, [pc, #56]	; (eb8 <timer_add_timer_task+0xa8>)
     e80:	4798      	blx	r3
     e82:	61f8      	str	r0, [r7, #28]
     e84:	69fb      	ldr	r3, [r7, #28]
     e86:	2b00      	cmp	r3, #0
     e88:	d1d9      	bne.n	e3e <timer_add_timer_task+0x2e>
     e8a:	e000      	b.n	e8e <timer_add_timer_task+0x7e>
			break;
     e8c:	bf00      	nop
	}

	if (it == head) {
     e8e:	69fa      	ldr	r2, [r7, #28]
     e90:	693b      	ldr	r3, [r7, #16]
     e92:	429a      	cmp	r2, r3
     e94:	d104      	bne.n	ea0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
     e96:	68b9      	ldr	r1, [r7, #8]
     e98:	68f8      	ldr	r0, [r7, #12]
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <timer_add_timer_task+0xa4>)
     e9c:	4798      	blx	r3
     e9e:	e003      	b.n	ea8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
     ea0:	68b9      	ldr	r1, [r7, #8]
     ea2:	69b8      	ldr	r0, [r7, #24]
     ea4:	4b05      	ldr	r3, [pc, #20]	; (ebc <timer_add_timer_task+0xac>)
     ea6:	4798      	blx	r3
	}
}
     ea8:	3720      	adds	r7, #32
     eaa:	46bd      	mov	sp, r7
     eac:	bd80      	pop	{r7, pc}
     eae:	bf00      	nop
     eb0:	00000d75 	.word	0x00000d75
     eb4:	00001419 	.word	0x00001419
     eb8:	00000d8d 	.word	0x00000d8d
     ebc:	00001471 	.word	0x00001471

00000ec0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b086      	sub	sp, #24
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
     ecc:	693b      	ldr	r3, [r7, #16]
     ece:	3314      	adds	r3, #20
     ed0:	4618      	mov	r0, r3
     ed2:	4b27      	ldr	r3, [pc, #156]	; (f70 <timer_process_counted+0xb0>)
     ed4:	4798      	blx	r3
     ed6:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
     ed8:	693b      	ldr	r3, [r7, #16]
     eda:	691b      	ldr	r3, [r3, #16]
     edc:	1c5a      	adds	r2, r3, #1
     ede:	693b      	ldr	r3, [r7, #16]
     ee0:	611a      	str	r2, [r3, #16]
     ee2:	693b      	ldr	r3, [r7, #16]
     ee4:	691b      	ldr	r3, [r3, #16]
     ee6:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     ee8:	693b      	ldr	r3, [r7, #16]
     eea:	7e1b      	ldrb	r3, [r3, #24]
     eec:	b2db      	uxtb	r3, r3
     eee:	f003 0301 	and.w	r3, r3, #1
     ef2:	2b00      	cmp	r3, #0
     ef4:	d106      	bne.n	f04 <timer_process_counted+0x44>
     ef6:	693b      	ldr	r3, [r7, #16]
     ef8:	7e1b      	ldrb	r3, [r3, #24]
     efa:	b2db      	uxtb	r3, r3
     efc:	f003 0302 	and.w	r3, r3, #2
     f00:	2b00      	cmp	r3, #0
     f02:	d027      	beq.n	f54 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     f04:	693b      	ldr	r3, [r7, #16]
     f06:	7e1b      	ldrb	r3, [r3, #24]
     f08:	b2db      	uxtb	r3, r3
     f0a:	f043 0302 	orr.w	r3, r3, #2
     f0e:	b2da      	uxtb	r2, r3
     f10:	693b      	ldr	r3, [r7, #16]
     f12:	761a      	strb	r2, [r3, #24]
		return;
     f14:	e029      	b.n	f6a <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
     f16:	697b      	ldr	r3, [r7, #20]
     f18:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
     f1a:	693b      	ldr	r3, [r7, #16]
     f1c:	3314      	adds	r3, #20
     f1e:	4618      	mov	r0, r3
     f20:	4b14      	ldr	r3, [pc, #80]	; (f74 <timer_process_counted+0xb4>)
     f22:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     f24:	68bb      	ldr	r3, [r7, #8]
     f26:	7c1b      	ldrb	r3, [r3, #16]
     f28:	2b01      	cmp	r3, #1
     f2a:	d109      	bne.n	f40 <timer_process_counted+0x80>
			tmp->time_label = time;
     f2c:	68bb      	ldr	r3, [r7, #8]
     f2e:	68fa      	ldr	r2, [r7, #12]
     f30:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     f32:	693b      	ldr	r3, [r7, #16]
     f34:	3314      	adds	r3, #20
     f36:	68fa      	ldr	r2, [r7, #12]
     f38:	68b9      	ldr	r1, [r7, #8]
     f3a:	4618      	mov	r0, r3
     f3c:	4b0e      	ldr	r3, [pc, #56]	; (f78 <timer_process_counted+0xb8>)
     f3e:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
     f40:	693b      	ldr	r3, [r7, #16]
     f42:	3314      	adds	r3, #20
     f44:	4618      	mov	r0, r3
     f46:	4b0a      	ldr	r3, [pc, #40]	; (f70 <timer_process_counted+0xb0>)
     f48:	4798      	blx	r3
     f4a:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
     f4c:	68bb      	ldr	r3, [r7, #8]
     f4e:	68db      	ldr	r3, [r3, #12]
     f50:	68b8      	ldr	r0, [r7, #8]
     f52:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     f54:	697b      	ldr	r3, [r7, #20]
     f56:	2b00      	cmp	r3, #0
     f58:	d007      	beq.n	f6a <timer_process_counted+0xaa>
     f5a:	697b      	ldr	r3, [r7, #20]
     f5c:	685b      	ldr	r3, [r3, #4]
     f5e:	68fa      	ldr	r2, [r7, #12]
     f60:	1ad2      	subs	r2, r2, r3
     f62:	697b      	ldr	r3, [r7, #20]
     f64:	689b      	ldr	r3, [r3, #8]
     f66:	429a      	cmp	r2, r3
     f68:	d2d5      	bcs.n	f16 <timer_process_counted+0x56>
	}
}
     f6a:	3718      	adds	r7, #24
     f6c:	46bd      	mov	sp, r7
     f6e:	bd80      	pop	{r7, pc}
     f70:	00000d75 	.word	0x00000d75
     f74:	00001495 	.word	0x00001495
     f78:	00000e11 	.word	0x00000e11

00000f7c <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	b086      	sub	sp, #24
     f80:	af00      	add	r7, sp, #0
     f82:	60f8      	str	r0, [r7, #12]
     f84:	60b9      	str	r1, [r7, #8]
     f86:	607a      	str	r2, [r7, #4]
     f88:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     f8a:	68fb      	ldr	r3, [r7, #12]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d00a      	beq.n	fa6 <usart_async_init+0x2a>
     f90:	68bb      	ldr	r3, [r7, #8]
     f92:	2b00      	cmp	r3, #0
     f94:	d007      	beq.n	fa6 <usart_async_init+0x2a>
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	2b00      	cmp	r3, #0
     f9a:	d004      	beq.n	fa6 <usart_async_init+0x2a>
     f9c:	887b      	ldrh	r3, [r7, #2]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d001      	beq.n	fa6 <usart_async_init+0x2a>
     fa2:	2301      	movs	r3, #1
     fa4:	e000      	b.n	fa8 <usart_async_init+0x2c>
     fa6:	2300      	movs	r3, #0
     fa8:	f003 0301 	and.w	r3, r3, #1
     fac:	b2db      	uxtb	r3, r3
     fae:	223a      	movs	r2, #58	; 0x3a
     fb0:	4919      	ldr	r1, [pc, #100]	; (1018 <usart_async_init+0x9c>)
     fb2:	4618      	mov	r0, r3
     fb4:	4b19      	ldr	r3, [pc, #100]	; (101c <usart_async_init+0xa0>)
     fb6:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     fb8:	68fb      	ldr	r3, [r7, #12]
     fba:	3334      	adds	r3, #52	; 0x34
     fbc:	887a      	ldrh	r2, [r7, #2]
     fbe:	6879      	ldr	r1, [r7, #4]
     fc0:	4618      	mov	r0, r3
     fc2:	4b17      	ldr	r3, [pc, #92]	; (1020 <usart_async_init+0xa4>)
     fc4:	4798      	blx	r3
     fc6:	4603      	mov	r3, r0
     fc8:	2b00      	cmp	r3, #0
     fca:	d002      	beq.n	fd2 <usart_async_init+0x56>
		return ERR_INVALID_ARG;
     fcc:	f06f 030c 	mvn.w	r3, #12
     fd0:	e01e      	b.n	1010 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
     fd2:	68fb      	ldr	r3, [r7, #12]
     fd4:	3308      	adds	r3, #8
     fd6:	68b9      	ldr	r1, [r7, #8]
     fd8:	4618      	mov	r0, r3
     fda:	4b12      	ldr	r3, [pc, #72]	; (1024 <usart_async_init+0xa8>)
     fdc:	4798      	blx	r3
     fde:	6178      	str	r0, [r7, #20]
	if (init_status) {
     fe0:	697b      	ldr	r3, [r7, #20]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d001      	beq.n	fea <usart_async_init+0x6e>
		return init_status;
     fe6:	697b      	ldr	r3, [r7, #20]
     fe8:	e012      	b.n	1010 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	4a0e      	ldr	r2, [pc, #56]	; (1028 <usart_async_init+0xac>)
     fee:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	4a0e      	ldr	r2, [pc, #56]	; (102c <usart_async_init+0xb0>)
     ff4:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	4a0d      	ldr	r2, [pc, #52]	; (1030 <usart_async_init+0xb4>)
     ffa:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     ffc:	68fb      	ldr	r3, [r7, #12]
     ffe:	4a0d      	ldr	r2, [pc, #52]	; (1034 <usart_async_init+0xb8>)
    1000:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1002:	68fb      	ldr	r3, [r7, #12]
    1004:	4a0c      	ldr	r2, [pc, #48]	; (1038 <usart_async_init+0xbc>)
    1006:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1008:	68fb      	ldr	r3, [r7, #12]
    100a:	4a0c      	ldr	r2, [pc, #48]	; (103c <usart_async_init+0xc0>)
    100c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    100e:	2300      	movs	r3, #0
}
    1010:	4618      	mov	r0, r3
    1012:	3718      	adds	r7, #24
    1014:	46bd      	mov	sp, r7
    1016:	bd80      	pop	{r7, pc}
    1018:	00002c34 	.word	0x00002c34
    101c:	000013b9 	.word	0x000013b9
    1020:	000014c9 	.word	0x000014c9
    1024:	00002065 	.word	0x00002065
    1028:	00001209 	.word	0x00001209
    102c:	00001179 	.word	0x00001179
    1030:	000012b9 	.word	0x000012b9
    1034:	00001351 	.word	0x00001351
    1038:	00001325 	.word	0x00001325
    103c:	0000138d 	.word	0x0000138d

00001040 <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
    1040:	b580      	push	{r7, lr}
    1042:	b082      	sub	sp, #8
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	2b00      	cmp	r3, #0
    104c:	bf14      	ite	ne
    104e:	2301      	movne	r3, #1
    1050:	2300      	moveq	r3, #0
    1052:	b2db      	uxtb	r3, r3
    1054:	2261      	movs	r2, #97	; 0x61
    1056:	4907      	ldr	r1, [pc, #28]	; (1074 <usart_async_enable+0x34>)
    1058:	4618      	mov	r0, r3
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <usart_async_enable+0x38>)
    105c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	3308      	adds	r3, #8
    1062:	4618      	mov	r0, r3
    1064:	4b05      	ldr	r3, [pc, #20]	; (107c <usart_async_enable+0x3c>)
    1066:	4798      	blx	r3

	return ERR_NONE;
    1068:	2300      	movs	r3, #0
}
    106a:	4618      	mov	r0, r3
    106c:	3708      	adds	r7, #8
    106e:	46bd      	mov	sp, r7
    1070:	bd80      	pop	{r7, pc}
    1072:	bf00      	nop
    1074:	00002c34 	.word	0x00002c34
    1078:	000013b9 	.word	0x000013b9
    107c:	00002111 	.word	0x00002111

00001080 <usart_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_async_get_io_descriptor(struct usart_async_descriptor *const descr, struct io_descriptor **io)
{
    1080:	b580      	push	{r7, lr}
    1082:	b082      	sub	sp, #8
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
    1088:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	2b00      	cmp	r3, #0
    108e:	d004      	beq.n	109a <usart_async_get_io_descriptor+0x1a>
    1090:	683b      	ldr	r3, [r7, #0]
    1092:	2b00      	cmp	r3, #0
    1094:	d001      	beq.n	109a <usart_async_get_io_descriptor+0x1a>
    1096:	2301      	movs	r3, #1
    1098:	e000      	b.n	109c <usart_async_get_io_descriptor+0x1c>
    109a:	2300      	movs	r3, #0
    109c:	f003 0301 	and.w	r3, r3, #1
    10a0:	b2db      	uxtb	r3, r3
    10a2:	2277      	movs	r2, #119	; 0x77
    10a4:	4905      	ldr	r1, [pc, #20]	; (10bc <usart_async_get_io_descriptor+0x3c>)
    10a6:	4618      	mov	r0, r3
    10a8:	4b05      	ldr	r3, [pc, #20]	; (10c0 <usart_async_get_io_descriptor+0x40>)
    10aa:	4798      	blx	r3

	*io = &descr->io;
    10ac:	687a      	ldr	r2, [r7, #4]
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    10b2:	2300      	movs	r3, #0
}
    10b4:	4618      	mov	r0, r3
    10b6:	3708      	adds	r7, #8
    10b8:	46bd      	mov	sp, r7
    10ba:	bd80      	pop	{r7, pc}
    10bc:	00002c34 	.word	0x00002c34
    10c0:	000013b9 	.word	0x000013b9

000010c4 <usart_async_register_callback>:
/**
 * \brief Register usart callback
 */
int32_t usart_async_register_callback(struct usart_async_descriptor *const descr,
                                      const enum usart_async_callback_type type, usart_cb_t cb)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	b084      	sub	sp, #16
    10c8:	af00      	add	r7, sp, #0
    10ca:	60f8      	str	r0, [r7, #12]
    10cc:	460b      	mov	r3, r1
    10ce:	607a      	str	r2, [r7, #4]
    10d0:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    10d2:	68fb      	ldr	r3, [r7, #12]
    10d4:	2b00      	cmp	r3, #0
    10d6:	bf14      	ite	ne
    10d8:	2301      	movne	r3, #1
    10da:	2300      	moveq	r3, #0
    10dc:	b2db      	uxtb	r3, r3
    10de:	2283      	movs	r2, #131	; 0x83
    10e0:	4922      	ldr	r1, [pc, #136]	; (116c <usart_async_register_callback+0xa8>)
    10e2:	4618      	mov	r0, r3
    10e4:	4b22      	ldr	r3, [pc, #136]	; (1170 <usart_async_register_callback+0xac>)
    10e6:	4798      	blx	r3

	switch (type) {
    10e8:	7afb      	ldrb	r3, [r7, #11]
    10ea:	2b01      	cmp	r3, #1
    10ec:	d014      	beq.n	1118 <usart_async_register_callback+0x54>
    10ee:	2b02      	cmp	r3, #2
    10f0:	d023      	beq.n	113a <usart_async_register_callback+0x76>
    10f2:	2b00      	cmp	r3, #0
    10f4:	d132      	bne.n	115c <usart_async_register_callback+0x98>
	case USART_ASYNC_RXC_CB:
		descr->usart_cb.rx_done = cb;
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	687a      	ldr	r2, [r7, #4]
    10fa:	629a      	str	r2, [r3, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	f103 0008 	add.w	r0, r3, #8
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	2b00      	cmp	r3, #0
    1106:	bf14      	ite	ne
    1108:	2301      	movne	r3, #1
    110a:	2300      	moveq	r3, #0
    110c:	b2db      	uxtb	r3, r3
    110e:	461a      	mov	r2, r3
    1110:	2101      	movs	r1, #1
    1112:	4b18      	ldr	r3, [pc, #96]	; (1174 <usart_async_register_callback+0xb0>)
    1114:	4798      	blx	r3
		break;
    1116:	e024      	b.n	1162 <usart_async_register_callback+0x9e>
	case USART_ASYNC_TXC_CB:
		descr->usart_cb.tx_done = cb;
    1118:	68fb      	ldr	r3, [r7, #12]
    111a:	687a      	ldr	r2, [r7, #4]
    111c:	625a      	str	r2, [r3, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    111e:	68fb      	ldr	r3, [r7, #12]
    1120:	f103 0008 	add.w	r0, r3, #8
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	2b00      	cmp	r3, #0
    1128:	bf14      	ite	ne
    112a:	2301      	movne	r3, #1
    112c:	2300      	moveq	r3, #0
    112e:	b2db      	uxtb	r3, r3
    1130:	461a      	mov	r2, r3
    1132:	2102      	movs	r1, #2
    1134:	4b0f      	ldr	r3, [pc, #60]	; (1174 <usart_async_register_callback+0xb0>)
    1136:	4798      	blx	r3
		break;
    1138:	e013      	b.n	1162 <usart_async_register_callback+0x9e>
	case USART_ASYNC_ERROR_CB:
		descr->usart_cb.error = cb;
    113a:	68fb      	ldr	r3, [r7, #12]
    113c:	687a      	ldr	r2, [r7, #4]
    113e:	62da      	str	r2, [r3, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1140:	68fb      	ldr	r3, [r7, #12]
    1142:	f103 0008 	add.w	r0, r3, #8
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	2b00      	cmp	r3, #0
    114a:	bf14      	ite	ne
    114c:	2301      	movne	r3, #1
    114e:	2300      	moveq	r3, #0
    1150:	b2db      	uxtb	r3, r3
    1152:	461a      	mov	r2, r3
    1154:	2103      	movs	r1, #3
    1156:	4b07      	ldr	r3, [pc, #28]	; (1174 <usart_async_register_callback+0xb0>)
    1158:	4798      	blx	r3
		break;
    115a:	e002      	b.n	1162 <usart_async_register_callback+0x9e>
	default:
		return ERR_INVALID_ARG;
    115c:	f06f 030c 	mvn.w	r3, #12
    1160:	e000      	b.n	1164 <usart_async_register_callback+0xa0>
	}

	return ERR_NONE;
    1162:	2300      	movs	r3, #0
}
    1164:	4618      	mov	r0, r3
    1166:	3710      	adds	r7, #16
    1168:	46bd      	mov	sp, r7
    116a:	bd80      	pop	{r7, pc}
    116c:	00002c34 	.word	0x00002c34
    1170:	000013b9 	.word	0x000013b9
    1174:	000021f5 	.word	0x000021f5

00001178 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1178:	b580      	push	{r7, lr}
    117a:	b086      	sub	sp, #24
    117c:	af00      	add	r7, sp, #0
    117e:	60f8      	str	r0, [r7, #12]
    1180:	60b9      	str	r1, [r7, #8]
    1182:	4613      	mov	r3, r2
    1184:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1186:	68fb      	ldr	r3, [r7, #12]
    1188:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    118a:	697b      	ldr	r3, [r7, #20]
    118c:	2b00      	cmp	r3, #0
    118e:	d007      	beq.n	11a0 <usart_async_write+0x28>
    1190:	68bb      	ldr	r3, [r7, #8]
    1192:	2b00      	cmp	r3, #0
    1194:	d004      	beq.n	11a0 <usart_async_write+0x28>
    1196:	88fb      	ldrh	r3, [r7, #6]
    1198:	2b00      	cmp	r3, #0
    119a:	d001      	beq.n	11a0 <usart_async_write+0x28>
    119c:	2301      	movs	r3, #1
    119e:	e000      	b.n	11a2 <usart_async_write+0x2a>
    11a0:	2300      	movs	r3, #0
    11a2:	f003 0301 	and.w	r3, r3, #1
    11a6:	b2db      	uxtb	r3, r3
    11a8:	f240 123b 	movw	r2, #315	; 0x13b
    11ac:	4913      	ldr	r1, [pc, #76]	; (11fc <usart_async_write+0x84>)
    11ae:	4618      	mov	r0, r3
    11b0:	4b13      	ldr	r3, [pc, #76]	; (1200 <usart_async_write+0x88>)
    11b2:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    11b4:	697b      	ldr	r3, [r7, #20]
    11b6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    11ba:	697b      	ldr	r3, [r7, #20]
    11bc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    11c0:	429a      	cmp	r2, r3
    11c2:	d002      	beq.n	11ca <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
    11c4:	f06f 031b 	mvn.w	r3, #27
    11c8:	e013      	b.n	11f2 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    11ca:	697b      	ldr	r3, [r7, #20]
    11cc:	68ba      	ldr	r2, [r7, #8]
    11ce:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    11d0:	697b      	ldr	r3, [r7, #20]
    11d2:	88fa      	ldrh	r2, [r7, #6]
    11d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
    11d8:	697b      	ldr	r3, [r7, #20]
    11da:	2200      	movs	r2, #0
    11dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    11e0:	697b      	ldr	r3, [r7, #20]
    11e2:	2201      	movs	r2, #1
    11e4:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    11e6:	697b      	ldr	r3, [r7, #20]
    11e8:	3308      	adds	r3, #8
    11ea:	4618      	mov	r0, r3
    11ec:	4b05      	ldr	r3, [pc, #20]	; (1204 <usart_async_write+0x8c>)
    11ee:	4798      	blx	r3

	return (int32_t)length;
    11f0:	88fb      	ldrh	r3, [r7, #6]
}
    11f2:	4618      	mov	r0, r3
    11f4:	3718      	adds	r7, #24
    11f6:	46bd      	mov	sp, r7
    11f8:	bd80      	pop	{r7, pc}
    11fa:	bf00      	nop
    11fc:	00002c34 	.word	0x00002c34
    1200:	000013b9 	.word	0x000013b9
    1204:	00002159 	.word	0x00002159

00001208 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1208:	b580      	push	{r7, lr}
    120a:	b088      	sub	sp, #32
    120c:	af00      	add	r7, sp, #0
    120e:	60f8      	str	r0, [r7, #12]
    1210:	60b9      	str	r1, [r7, #8]
    1212:	4613      	mov	r3, r2
    1214:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
    1216:	2300      	movs	r3, #0
    1218:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    121a:	68fb      	ldr	r3, [r7, #12]
    121c:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    121e:	69bb      	ldr	r3, [r7, #24]
    1220:	2b00      	cmp	r3, #0
    1222:	d007      	beq.n	1234 <usart_async_read+0x2c>
    1224:	68bb      	ldr	r3, [r7, #8]
    1226:	2b00      	cmp	r3, #0
    1228:	d004      	beq.n	1234 <usart_async_read+0x2c>
    122a:	88fb      	ldrh	r3, [r7, #6]
    122c:	2b00      	cmp	r3, #0
    122e:	d001      	beq.n	1234 <usart_async_read+0x2c>
    1230:	2301      	movs	r3, #1
    1232:	e000      	b.n	1236 <usart_async_read+0x2e>
    1234:	2300      	movs	r3, #0
    1236:	f003 0301 	and.w	r3, r3, #1
    123a:	b2db      	uxtb	r3, r3
    123c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1240:	4917      	ldr	r1, [pc, #92]	; (12a0 <usart_async_read+0x98>)
    1242:	4618      	mov	r0, r3
    1244:	4b17      	ldr	r3, [pc, #92]	; (12a4 <usart_async_read+0x9c>)
    1246:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1248:	f107 0310 	add.w	r3, r7, #16
    124c:	4618      	mov	r0, r3
    124e:	4b16      	ldr	r3, [pc, #88]	; (12a8 <usart_async_read+0xa0>)
    1250:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3334      	adds	r3, #52	; 0x34
    1256:	4618      	mov	r0, r3
    1258:	4b14      	ldr	r3, [pc, #80]	; (12ac <usart_async_read+0xa4>)
    125a:	4798      	blx	r3
    125c:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    125e:	f107 0310 	add.w	r3, r7, #16
    1262:	4618      	mov	r0, r3
    1264:	4b12      	ldr	r3, [pc, #72]	; (12b0 <usart_async_read+0xa8>)
    1266:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1268:	e00c      	b.n	1284 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    126a:	69bb      	ldr	r3, [r7, #24]
    126c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    1270:	8bfb      	ldrh	r3, [r7, #30]
    1272:	1c59      	adds	r1, r3, #1
    1274:	83f9      	strh	r1, [r7, #30]
    1276:	4619      	mov	r1, r3
    1278:	68bb      	ldr	r3, [r7, #8]
    127a:	440b      	add	r3, r1
    127c:	4619      	mov	r1, r3
    127e:	4610      	mov	r0, r2
    1280:	4b0c      	ldr	r3, [pc, #48]	; (12b4 <usart_async_read+0xac>)
    1282:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1284:	8bfa      	ldrh	r2, [r7, #30]
    1286:	697b      	ldr	r3, [r7, #20]
    1288:	429a      	cmp	r2, r3
    128a:	d203      	bcs.n	1294 <usart_async_read+0x8c>
    128c:	8bfa      	ldrh	r2, [r7, #30]
    128e:	88fb      	ldrh	r3, [r7, #6]
    1290:	429a      	cmp	r2, r3
    1292:	d3ea      	bcc.n	126a <usart_async_read+0x62>
	}

	return (int32_t)was_read;
    1294:	8bfb      	ldrh	r3, [r7, #30]
}
    1296:	4618      	mov	r0, r3
    1298:	3720      	adds	r7, #32
    129a:	46bd      	mov	sp, r7
    129c:	bd80      	pop	{r7, pc}
    129e:	bf00      	nop
    12a0:	00002c34 	.word	0x00002c34
    12a4:	000013b9 	.word	0x000013b9
    12a8:	00000c61 	.word	0x00000c61
    12ac:	00001621 	.word	0x00001621
    12b0:	00000c87 	.word	0x00000c87
    12b4:	0000153d 	.word	0x0000153d

000012b8 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    12b8:	b590      	push	{r4, r7, lr}
    12ba:	b085      	sub	sp, #20
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	3b08      	subs	r3, #8
    12c4:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    12d2:	429a      	cmp	r2, r3
    12d4:	d017      	beq.n	1306 <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    12d6:	68fb      	ldr	r3, [r7, #12]
    12d8:	f103 0008 	add.w	r0, r3, #8
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    12e0:	68fb      	ldr	r3, [r7, #12]
    12e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    12e6:	1c59      	adds	r1, r3, #1
    12e8:	b28c      	uxth	r4, r1
    12ea:	68f9      	ldr	r1, [r7, #12]
    12ec:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
    12f0:	4413      	add	r3, r2
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	4619      	mov	r1, r3
    12f6:	4b08      	ldr	r3, [pc, #32]	; (1318 <usart_process_byte_sent+0x60>)
    12f8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	3308      	adds	r3, #8
    12fe:	4618      	mov	r0, r3
    1300:	4b06      	ldr	r3, [pc, #24]	; (131c <usart_process_byte_sent+0x64>)
    1302:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1304:	e004      	b.n	1310 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	3308      	adds	r3, #8
    130a:	4618      	mov	r0, r3
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <usart_process_byte_sent+0x68>)
    130e:	4798      	blx	r3
}
    1310:	bf00      	nop
    1312:	3714      	adds	r7, #20
    1314:	46bd      	mov	sp, r7
    1316:	bd90      	pop	{r4, r7, pc}
    1318:	00002131 	.word	0x00002131
    131c:	00002159 	.word	0x00002159
    1320:	00002179 	.word	0x00002179

00001324 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1324:	b580      	push	{r7, lr}
    1326:	b084      	sub	sp, #16
    1328:	af00      	add	r7, sp, #0
    132a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    132c:	687b      	ldr	r3, [r7, #4]
    132e:	3b08      	subs	r3, #8
    1330:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	2200      	movs	r2, #0
    1336:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1338:	68fb      	ldr	r3, [r7, #12]
    133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    133c:	2b00      	cmp	r3, #0
    133e:	d003      	beq.n	1348 <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
    1340:	68fb      	ldr	r3, [r7, #12]
    1342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1344:	68f8      	ldr	r0, [r7, #12]
    1346:	4798      	blx	r3
	}
}
    1348:	bf00      	nop
    134a:	3710      	adds	r7, #16
    134c:	46bd      	mov	sp, r7
    134e:	bd80      	pop	{r7, pc}

00001350 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    1350:	b580      	push	{r7, lr}
    1352:	b084      	sub	sp, #16
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
    1358:	460b      	mov	r3, r1
    135a:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	3b08      	subs	r3, #8
    1360:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	3334      	adds	r3, #52	; 0x34
    1366:	78fa      	ldrb	r2, [r7, #3]
    1368:	4611      	mov	r1, r2
    136a:	4618      	mov	r0, r3
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <usart_fill_rx_buffer+0x38>)
    136e:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    1370:	68fb      	ldr	r3, [r7, #12]
    1372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1374:	2b00      	cmp	r3, #0
    1376:	d003      	beq.n	1380 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
    1378:	68fb      	ldr	r3, [r7, #12]
    137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    137c:	68f8      	ldr	r0, [r7, #12]
    137e:	4798      	blx	r3
	}
}
    1380:	bf00      	nop
    1382:	3710      	adds	r7, #16
    1384:	46bd      	mov	sp, r7
    1386:	bd80      	pop	{r7, pc}
    1388:	000015ad 	.word	0x000015ad

0000138c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    138c:	b580      	push	{r7, lr}
    138e:	b084      	sub	sp, #16
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	3b08      	subs	r3, #8
    1398:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	2200      	movs	r2, #0
    139e:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13a4:	2b00      	cmp	r3, #0
    13a6:	d003      	beq.n	13b0 <usart_error+0x24>
		descr->usart_cb.error(descr);
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13ac:	68f8      	ldr	r0, [r7, #12]
    13ae:	4798      	blx	r3
	}
}
    13b0:	bf00      	nop
    13b2:	3710      	adds	r7, #16
    13b4:	46bd      	mov	sp, r7
    13b6:	bd80      	pop	{r7, pc}

000013b8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    13b8:	b480      	push	{r7}
    13ba:	b085      	sub	sp, #20
    13bc:	af00      	add	r7, sp, #0
    13be:	4603      	mov	r3, r0
    13c0:	60b9      	str	r1, [r7, #8]
    13c2:	607a      	str	r2, [r7, #4]
    13c4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    13c6:	7bfb      	ldrb	r3, [r7, #15]
    13c8:	f083 0301 	eor.w	r3, r3, #1
    13cc:	b2db      	uxtb	r3, r3
    13ce:	2b00      	cmp	r3, #0
    13d0:	d000      	beq.n	13d4 <assert+0x1c>
		__asm("BKPT #0");
    13d2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13d4:	bf00      	nop
    13d6:	3714      	adds	r7, #20
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    13e0:	b480      	push	{r7}
    13e2:	b085      	sub	sp, #20
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	681b      	ldr	r3, [r3, #0]
    13ee:	60fb      	str	r3, [r7, #12]
    13f0:	e008      	b.n	1404 <is_list_element+0x24>
		if (it == element) {
    13f2:	68fa      	ldr	r2, [r7, #12]
    13f4:	683b      	ldr	r3, [r7, #0]
    13f6:	429a      	cmp	r2, r3
    13f8:	d101      	bne.n	13fe <is_list_element+0x1e>
			return true;
    13fa:	2301      	movs	r3, #1
    13fc:	e006      	b.n	140c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    13fe:	68fb      	ldr	r3, [r7, #12]
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	60fb      	str	r3, [r7, #12]
    1404:	68fb      	ldr	r3, [r7, #12]
    1406:	2b00      	cmp	r3, #0
    1408:	d1f3      	bne.n	13f2 <is_list_element+0x12>
		}
	}

	return false;
    140a:	2300      	movs	r3, #0
}
    140c:	4618      	mov	r0, r3
    140e:	3714      	adds	r7, #20
    1410:	46bd      	mov	sp, r7
    1412:	f85d 7b04 	ldr.w	r7, [sp], #4
    1416:	4770      	bx	lr

00001418 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1418:	b580      	push	{r7, lr}
    141a:	b082      	sub	sp, #8
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]
    1420:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1422:	6839      	ldr	r1, [r7, #0]
    1424:	6878      	ldr	r0, [r7, #4]
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <list_insert_as_head+0x4c>)
    1428:	4798      	blx	r3
    142a:	4603      	mov	r3, r0
    142c:	2b00      	cmp	r3, #0
    142e:	bf14      	ite	ne
    1430:	2301      	movne	r3, #1
    1432:	2300      	moveq	r3, #0
    1434:	b2db      	uxtb	r3, r3
    1436:	f083 0301 	eor.w	r3, r3, #1
    143a:	b2db      	uxtb	r3, r3
    143c:	f003 0301 	and.w	r3, r3, #1
    1440:	b2db      	uxtb	r3, r3
    1442:	2239      	movs	r2, #57	; 0x39
    1444:	4908      	ldr	r1, [pc, #32]	; (1468 <list_insert_as_head+0x50>)
    1446:	4618      	mov	r0, r3
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <list_insert_as_head+0x54>)
    144a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	681a      	ldr	r2, [r3, #0]
    1450:	683b      	ldr	r3, [r7, #0]
    1452:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	683a      	ldr	r2, [r7, #0]
    1458:	601a      	str	r2, [r3, #0]
}
    145a:	bf00      	nop
    145c:	3708      	adds	r7, #8
    145e:	46bd      	mov	sp, r7
    1460:	bd80      	pop	{r7, pc}
    1462:	bf00      	nop
    1464:	000013e1 	.word	0x000013e1
    1468:	00002c54 	.word	0x00002c54
    146c:	000013b9 	.word	0x000013b9

00001470 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1470:	b480      	push	{r7}
    1472:	b083      	sub	sp, #12
    1474:	af00      	add	r7, sp, #0
    1476:	6078      	str	r0, [r7, #4]
    1478:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	681a      	ldr	r2, [r3, #0]
    147e:	683b      	ldr	r3, [r7, #0]
    1480:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	683a      	ldr	r2, [r7, #0]
    1486:	601a      	str	r2, [r3, #0]
}
    1488:	bf00      	nop
    148a:	370c      	adds	r7, #12
    148c:	46bd      	mov	sp, r7
    148e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1492:	4770      	bx	lr

00001494 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1494:	b480      	push	{r7}
    1496:	b085      	sub	sp, #20
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    149c:	687b      	ldr	r3, [r7, #4]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d009      	beq.n	14b8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	681b      	ldr	r3, [r3, #0]
    14ae:	681a      	ldr	r2, [r3, #0]
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    14b4:	68fb      	ldr	r3, [r7, #12]
    14b6:	e000      	b.n	14ba <list_remove_head+0x26>
	}

	return NULL;
    14b8:	2300      	movs	r3, #0
}
    14ba:	4618      	mov	r0, r3
    14bc:	3714      	adds	r7, #20
    14be:	46bd      	mov	sp, r7
    14c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    14c4:	4770      	bx	lr
	...

000014c8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b084      	sub	sp, #16
    14cc:	af00      	add	r7, sp, #0
    14ce:	60f8      	str	r0, [r7, #12]
    14d0:	60b9      	str	r1, [r7, #8]
    14d2:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    14d4:	68fb      	ldr	r3, [r7, #12]
    14d6:	2b00      	cmp	r3, #0
    14d8:	d007      	beq.n	14ea <ringbuffer_init+0x22>
    14da:	68bb      	ldr	r3, [r7, #8]
    14dc:	2b00      	cmp	r3, #0
    14de:	d004      	beq.n	14ea <ringbuffer_init+0x22>
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d001      	beq.n	14ea <ringbuffer_init+0x22>
    14e6:	2301      	movs	r3, #1
    14e8:	e000      	b.n	14ec <ringbuffer_init+0x24>
    14ea:	2300      	movs	r3, #0
    14ec:	f003 0301 	and.w	r3, r3, #1
    14f0:	b2db      	uxtb	r3, r3
    14f2:	2228      	movs	r2, #40	; 0x28
    14f4:	490f      	ldr	r1, [pc, #60]	; (1534 <ringbuffer_init+0x6c>)
    14f6:	4618      	mov	r0, r3
    14f8:	4b0f      	ldr	r3, [pc, #60]	; (1538 <ringbuffer_init+0x70>)
    14fa:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	1e5a      	subs	r2, r3, #1
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	4013      	ands	r3, r2
    1504:	2b00      	cmp	r3, #0
    1506:	d002      	beq.n	150e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    1508:	f06f 030c 	mvn.w	r3, #12
    150c:	e00e      	b.n	152c <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	1e5a      	subs	r2, r3, #1
    1512:	68fb      	ldr	r3, [r7, #12]
    1514:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    1516:	68fb      	ldr	r3, [r7, #12]
    1518:	2200      	movs	r2, #0
    151a:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	689a      	ldr	r2, [r3, #8]
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	68ba      	ldr	r2, [r7, #8]
    1528:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    152a:	2300      	movs	r3, #0
}
    152c:	4618      	mov	r0, r3
    152e:	3710      	adds	r7, #16
    1530:	46bd      	mov	sp, r7
    1532:	bd80      	pop	{r7, pc}
    1534:	00002c74 	.word	0x00002c74
    1538:	000013b9 	.word	0x000013b9

0000153c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    153c:	b580      	push	{r7, lr}
    153e:	b082      	sub	sp, #8
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
    1544:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	2b00      	cmp	r3, #0
    154a:	d004      	beq.n	1556 <ringbuffer_get+0x1a>
    154c:	683b      	ldr	r3, [r7, #0]
    154e:	2b00      	cmp	r3, #0
    1550:	d001      	beq.n	1556 <ringbuffer_get+0x1a>
    1552:	2301      	movs	r3, #1
    1554:	e000      	b.n	1558 <ringbuffer_get+0x1c>
    1556:	2300      	movs	r3, #0
    1558:	f003 0301 	and.w	r3, r3, #1
    155c:	b2db      	uxtb	r3, r3
    155e:	2240      	movs	r2, #64	; 0x40
    1560:	4910      	ldr	r1, [pc, #64]	; (15a4 <ringbuffer_get+0x68>)
    1562:	4618      	mov	r0, r3
    1564:	4b10      	ldr	r3, [pc, #64]	; (15a8 <ringbuffer_get+0x6c>)
    1566:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	68da      	ldr	r2, [r3, #12]
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	689b      	ldr	r3, [r3, #8]
    1570:	429a      	cmp	r2, r3
    1572:	d011      	beq.n	1598 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	681a      	ldr	r2, [r3, #0]
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	6899      	ldr	r1, [r3, #8]
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	685b      	ldr	r3, [r3, #4]
    1580:	400b      	ands	r3, r1
    1582:	4413      	add	r3, r2
    1584:	781a      	ldrb	r2, [r3, #0]
    1586:	683b      	ldr	r3, [r7, #0]
    1588:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	689b      	ldr	r3, [r3, #8]
    158e:	1c5a      	adds	r2, r3, #1
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    1594:	2300      	movs	r3, #0
    1596:	e001      	b.n	159c <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
    1598:	f06f 0309 	mvn.w	r3, #9
}
    159c:	4618      	mov	r0, r3
    159e:	3708      	adds	r7, #8
    15a0:	46bd      	mov	sp, r7
    15a2:	bd80      	pop	{r7, pc}
    15a4:	00002c74 	.word	0x00002c74
    15a8:	000013b9 	.word	0x000013b9

000015ac <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	af00      	add	r7, sp, #0
    15b2:	6078      	str	r0, [r7, #4]
    15b4:	460b      	mov	r3, r1
    15b6:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	2b00      	cmp	r3, #0
    15bc:	bf14      	ite	ne
    15be:	2301      	movne	r3, #1
    15c0:	2300      	moveq	r3, #0
    15c2:	b2db      	uxtb	r3, r3
    15c4:	2251      	movs	r2, #81	; 0x51
    15c6:	4914      	ldr	r1, [pc, #80]	; (1618 <ringbuffer_put+0x6c>)
    15c8:	4618      	mov	r0, r3
    15ca:	4b14      	ldr	r3, [pc, #80]	; (161c <ringbuffer_put+0x70>)
    15cc:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	681a      	ldr	r2, [r3, #0]
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	68d9      	ldr	r1, [r3, #12]
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	685b      	ldr	r3, [r3, #4]
    15da:	400b      	ands	r3, r1
    15dc:	4413      	add	r3, r2
    15de:	78fa      	ldrb	r2, [r7, #3]
    15e0:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	68da      	ldr	r2, [r3, #12]
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	689b      	ldr	r3, [r3, #8]
    15ea:	1ad2      	subs	r2, r2, r3
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	685b      	ldr	r3, [r3, #4]
    15f0:	429a      	cmp	r2, r3
    15f2:	d906      	bls.n	1602 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	68da      	ldr	r2, [r3, #12]
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	685b      	ldr	r3, [r3, #4]
    15fc:	1ad2      	subs	r2, r2, r3
    15fe:	687b      	ldr	r3, [r7, #4]
    1600:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	68db      	ldr	r3, [r3, #12]
    1606:	1c5a      	adds	r2, r3, #1
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    160c:	2300      	movs	r3, #0
}
    160e:	4618      	mov	r0, r3
    1610:	3708      	adds	r7, #8
    1612:	46bd      	mov	sp, r7
    1614:	bd80      	pop	{r7, pc}
    1616:	bf00      	nop
    1618:	00002c74 	.word	0x00002c74
    161c:	000013b9 	.word	0x000013b9

00001620 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1620:	b580      	push	{r7, lr}
    1622:	b082      	sub	sp, #8
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	2b00      	cmp	r3, #0
    162c:	bf14      	ite	ne
    162e:	2301      	movne	r3, #1
    1630:	2300      	moveq	r3, #0
    1632:	b2db      	uxtb	r3, r3
    1634:	2267      	movs	r2, #103	; 0x67
    1636:	4906      	ldr	r1, [pc, #24]	; (1650 <ringbuffer_num+0x30>)
    1638:	4618      	mov	r0, r3
    163a:	4b06      	ldr	r3, [pc, #24]	; (1654 <ringbuffer_num+0x34>)
    163c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	68da      	ldr	r2, [r3, #12]
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	689b      	ldr	r3, [r3, #8]
    1646:	1ad3      	subs	r3, r2, r3
}
    1648:	4618      	mov	r0, r3
    164a:	3708      	adds	r7, #8
    164c:	46bd      	mov	sp, r7
    164e:	bd80      	pop	{r7, pc}
    1650:	00002c74 	.word	0x00002c74
    1654:	000013b9 	.word	0x000013b9

00001658 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1658:	b480      	push	{r7}
    165a:	b083      	sub	sp, #12
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	460b      	mov	r3, r1
    1662:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	881b      	ldrh	r3, [r3, #0]
    1668:	b29a      	uxth	r2, r3
    166a:	887b      	ldrh	r3, [r7, #2]
    166c:	021b      	lsls	r3, r3, #8
    166e:	b29b      	uxth	r3, r3
    1670:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1674:	b29b      	uxth	r3, r3
    1676:	4313      	orrs	r3, r2
    1678:	b29a      	uxth	r2, r3
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    167e:	bf00      	nop
    1680:	370c      	adds	r7, #12
    1682:	46bd      	mov	sp, r7
    1684:	f85d 7b04 	ldr.w	r7, [sp], #4
    1688:	4770      	bx	lr
	...

0000168c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    168c:	b580      	push	{r7, lr}
    168e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1690:	2100      	movs	r1, #0
    1692:	4808      	ldr	r0, [pc, #32]	; (16b4 <_init_chip+0x28>)
    1694:	4b08      	ldr	r3, [pc, #32]	; (16b8 <_init_chip+0x2c>)
    1696:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1698:	4b08      	ldr	r3, [pc, #32]	; (16bc <_init_chip+0x30>)
    169a:	4798      	blx	r3
	_oscctrl_init_sources();
    169c:	4b08      	ldr	r3, [pc, #32]	; (16c0 <_init_chip+0x34>)
    169e:	4798      	blx	r3
	_mclk_init();
    16a0:	4b08      	ldr	r3, [pc, #32]	; (16c4 <_init_chip+0x38>)
    16a2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    16a4:	4b08      	ldr	r3, [pc, #32]	; (16c8 <_init_chip+0x3c>)
    16a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    16a8:	f640 70ff 	movw	r0, #4095	; 0xfff
    16ac:	4b07      	ldr	r3, [pc, #28]	; (16cc <_init_chip+0x40>)
    16ae:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    16b0:	bf00      	nop
    16b2:	bd80      	pop	{r7, pc}
    16b4:	41004000 	.word	0x41004000
    16b8:	00001659 	.word	0x00001659
    16bc:	000017f9 	.word	0x000017f9
    16c0:	00001891 	.word	0x00001891
    16c4:	00001775 	.word	0x00001775
    16c8:	000018d1 	.word	0x000018d1
    16cc:	00001725 	.word	0x00001725

000016d0 <hri_gclk_wait_for_sync>:
{
    16d0:	b480      	push	{r7}
    16d2:	b083      	sub	sp, #12
    16d4:	af00      	add	r7, sp, #0
    16d6:	6078      	str	r0, [r7, #4]
    16d8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    16da:	bf00      	nop
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	685a      	ldr	r2, [r3, #4]
    16e0:	683b      	ldr	r3, [r7, #0]
    16e2:	4013      	ands	r3, r2
    16e4:	2b00      	cmp	r3, #0
    16e6:	d1f9      	bne.n	16dc <hri_gclk_wait_for_sync+0xc>
}
    16e8:	bf00      	nop
    16ea:	370c      	adds	r7, #12
    16ec:	46bd      	mov	sp, r7
    16ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    16f2:	4770      	bx	lr

000016f4 <hri_gclk_write_GENCTRL_reg>:
{
    16f4:	b580      	push	{r7, lr}
    16f6:	b084      	sub	sp, #16
    16f8:	af00      	add	r7, sp, #0
    16fa:	60f8      	str	r0, [r7, #12]
    16fc:	460b      	mov	r3, r1
    16fe:	607a      	str	r2, [r7, #4]
    1700:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1702:	7afa      	ldrb	r2, [r7, #11]
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	3208      	adds	r2, #8
    1708:	6879      	ldr	r1, [r7, #4]
    170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    170e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1712:	68f8      	ldr	r0, [r7, #12]
    1714:	4b02      	ldr	r3, [pc, #8]	; (1720 <hri_gclk_write_GENCTRL_reg+0x2c>)
    1716:	4798      	blx	r3
}
    1718:	bf00      	nop
    171a:	3710      	adds	r7, #16
    171c:	46bd      	mov	sp, r7
    171e:	bd80      	pop	{r7, pc}
    1720:	000016d1 	.word	0x000016d1

00001724 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1724:	b580      	push	{r7, lr}
    1726:	b082      	sub	sp, #8
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    172c:	687b      	ldr	r3, [r7, #4]
    172e:	f003 0301 	and.w	r3, r3, #1
    1732:	2b00      	cmp	r3, #0
    1734:	d004      	beq.n	1740 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1736:	4a04      	ldr	r2, [pc, #16]	; (1748 <_gclk_init_generators_by_fref+0x24>)
    1738:	2100      	movs	r1, #0
    173a:	4804      	ldr	r0, [pc, #16]	; (174c <_gclk_init_generators_by_fref+0x28>)
    173c:	4b04      	ldr	r3, [pc, #16]	; (1750 <_gclk_init_generators_by_fref+0x2c>)
    173e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1740:	bf00      	nop
    1742:	3708      	adds	r7, #8
    1744:	46bd      	mov	sp, r7
    1746:	bd80      	pop	{r7, pc}
    1748:	00010101 	.word	0x00010101
    174c:	40001c00 	.word	0x40001c00
    1750:	000016f5 	.word	0x000016f5

00001754 <hri_mclk_write_CPUDIV_reg>:
{
    1754:	b480      	push	{r7}
    1756:	b083      	sub	sp, #12
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
    175c:	460b      	mov	r3, r1
    175e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	78fa      	ldrb	r2, [r7, #3]
    1764:	715a      	strb	r2, [r3, #5]
}
    1766:	bf00      	nop
    1768:	370c      	adds	r7, #12
    176a:	46bd      	mov	sp, r7
    176c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1770:	4770      	bx	lr
	...

00001774 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    1774:	b580      	push	{r7, lr}
    1776:	b082      	sub	sp, #8
    1778:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    177a:	4b05      	ldr	r3, [pc, #20]	; (1790 <_mclk_init+0x1c>)
    177c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    177e:	2101      	movs	r1, #1
    1780:	6878      	ldr	r0, [r7, #4]
    1782:	4b04      	ldr	r3, [pc, #16]	; (1794 <_mclk_init+0x20>)
    1784:	4798      	blx	r3
}
    1786:	bf00      	nop
    1788:	3708      	adds	r7, #8
    178a:	46bd      	mov	sp, r7
    178c:	bd80      	pop	{r7, pc}
    178e:	bf00      	nop
    1790:	40000800 	.word	0x40000800
    1794:	00001755 	.word	0x00001755

00001798 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    1798:	b480      	push	{r7}
    179a:	b083      	sub	sp, #12
    179c:	af00      	add	r7, sp, #0
    179e:	6078      	str	r0, [r7, #4]
    17a0:	460b      	mov	r3, r1
    17a2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	78fa      	ldrb	r2, [r7, #3]
    17a8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    17aa:	bf00      	nop
    17ac:	370c      	adds	r7, #12
    17ae:	46bd      	mov	sp, r7
    17b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    17b4:	4770      	bx	lr

000017b6 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    17b6:	b480      	push	{r7}
    17b8:	b085      	sub	sp, #20
    17ba:	af00      	add	r7, sp, #0
    17bc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	69db      	ldr	r3, [r3, #28]
    17c2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    17c4:	68fb      	ldr	r3, [r7, #12]
    17c6:	0a1b      	lsrs	r3, r3, #8
    17c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    17cc:	60fb      	str	r3, [r7, #12]
	return tmp;
    17ce:	68fb      	ldr	r3, [r7, #12]
}
    17d0:	4618      	mov	r0, r3
    17d2:	3714      	adds	r7, #20
    17d4:	46bd      	mov	sp, r7
    17d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    17da:	4770      	bx	lr

000017dc <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    17dc:	b480      	push	{r7}
    17de:	b083      	sub	sp, #12
    17e0:	af00      	add	r7, sp, #0
    17e2:	6078      	str	r0, [r7, #4]
    17e4:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	683a      	ldr	r2, [r7, #0]
    17ea:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    17ec:	bf00      	nop
    17ee:	370c      	adds	r7, #12
    17f0:	46bd      	mov	sp, r7
    17f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    17f6:	4770      	bx	lr

000017f8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    17fe:	4b0c      	ldr	r3, [pc, #48]	; (1830 <_osc32kctrl_init_sources+0x38>)
    1800:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1802:	2300      	movs	r3, #0
    1804:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    1806:	6878      	ldr	r0, [r7, #4]
    1808:	4b0a      	ldr	r3, [pc, #40]	; (1834 <_osc32kctrl_init_sources+0x3c>)
    180a:	4798      	blx	r3
    180c:	4603      	mov	r3, r0
    180e:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1810:	887b      	ldrh	r3, [r7, #2]
    1812:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1814:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1818:	4619      	mov	r1, r3
    181a:	6878      	ldr	r0, [r7, #4]
    181c:	4b06      	ldr	r3, [pc, #24]	; (1838 <_osc32kctrl_init_sources+0x40>)
    181e:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1820:	2101      	movs	r1, #1
    1822:	6878      	ldr	r0, [r7, #4]
    1824:	4b05      	ldr	r3, [pc, #20]	; (183c <_osc32kctrl_init_sources+0x44>)
    1826:	4798      	blx	r3
	(void)calib;
}
    1828:	bf00      	nop
    182a:	3708      	adds	r7, #8
    182c:	46bd      	mov	sp, r7
    182e:	bd80      	pop	{r7, pc}
    1830:	40001400 	.word	0x40001400
    1834:	000017b7 	.word	0x000017b7
    1838:	000017dd 	.word	0x000017dd
    183c:	00001799 	.word	0x00001799

00001840 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    1840:	b480      	push	{r7}
    1842:	b083      	sub	sp, #12
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	691b      	ldr	r3, [r3, #16]
    184c:	085b      	lsrs	r3, r3, #1
    184e:	f003 0301 	and.w	r3, r3, #1
    1852:	2b00      	cmp	r3, #0
    1854:	bf14      	ite	ne
    1856:	2301      	movne	r3, #1
    1858:	2300      	moveq	r3, #0
    185a:	b2db      	uxtb	r3, r3
}
    185c:	4618      	mov	r0, r3
    185e:	370c      	adds	r7, #12
    1860:	46bd      	mov	sp, r7
    1862:	f85d 7b04 	ldr.w	r7, [sp], #4
    1866:	4770      	bx	lr

00001868 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    1868:	b480      	push	{r7}
    186a:	b085      	sub	sp, #20
    186c:	af00      	add	r7, sp, #0
    186e:	60f8      	str	r0, [r7, #12]
    1870:	460b      	mov	r3, r1
    1872:	607a      	str	r2, [r7, #4]
    1874:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1876:	7afb      	ldrb	r3, [r7, #11]
    1878:	68fa      	ldr	r2, [r7, #12]
    187a:	3304      	adds	r3, #4
    187c:	009b      	lsls	r3, r3, #2
    187e:	4413      	add	r3, r2
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1884:	bf00      	nop
    1886:	3714      	adds	r7, #20
    1888:	46bd      	mov	sp, r7
    188a:	f85d 7b04 	ldr.w	r7, [sp], #4
    188e:	4770      	bx	lr

00001890 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1890:	b580      	push	{r7, lr}
    1892:	b082      	sub	sp, #8
    1894:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1896:	4b0a      	ldr	r3, [pc, #40]	; (18c0 <_oscctrl_init_sources+0x30>)
    1898:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    189a:	4a0a      	ldr	r2, [pc, #40]	; (18c4 <_oscctrl_init_sources+0x34>)
    189c:	2101      	movs	r1, #1
    189e:	6878      	ldr	r0, [r7, #4]
    18a0:	4b09      	ldr	r3, [pc, #36]	; (18c8 <_oscctrl_init_sources+0x38>)
    18a2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    18a4:	bf00      	nop
    18a6:	6878      	ldr	r0, [r7, #4]
    18a8:	4b08      	ldr	r3, [pc, #32]	; (18cc <_oscctrl_init_sources+0x3c>)
    18aa:	4798      	blx	r3
    18ac:	4603      	mov	r3, r0
    18ae:	f083 0301 	eor.w	r3, r3, #1
    18b2:	b2db      	uxtb	r3, r3
    18b4:	2b00      	cmp	r3, #0
    18b6:	d1f6      	bne.n	18a6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    18b8:	bf00      	nop
    18ba:	3708      	adds	r7, #8
    18bc:	46bd      	mov	sp, r7
    18be:	bd80      	pop	{r7, pc}
    18c0:	40001000 	.word	0x40001000
    18c4:	03002606 	.word	0x03002606
    18c8:	00001869 	.word	0x00001869
    18cc:	00001841 	.word	0x00001841

000018d0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    18d0:	b480      	push	{r7}
    18d2:	b083      	sub	sp, #12
    18d4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    18d6:	4b04      	ldr	r3, [pc, #16]	; (18e8 <_oscctrl_init_referenced_generators+0x18>)
    18d8:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    18da:	bf00      	nop
    18dc:	370c      	adds	r7, #12
    18de:	46bd      	mov	sp, r7
    18e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    18e4:	4770      	bx	lr
    18e6:	bf00      	nop
    18e8:	40001000 	.word	0x40001000

000018ec <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    18ec:	b480      	push	{r7}
    18ee:	b083      	sub	sp, #12
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	789b      	ldrb	r3, [r3, #2]
    18f8:	b2db      	uxtb	r3, r3
}
    18fa:	4618      	mov	r0, r3
    18fc:	370c      	adds	r7, #12
    18fe:	46bd      	mov	sp, r7
    1900:	f85d 7b04 	ldr.w	r7, [sp], #4
    1904:	4770      	bx	lr

00001906 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    1906:	b480      	push	{r7}
    1908:	b083      	sub	sp, #12
    190a:	af00      	add	r7, sp, #0
    190c:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	685b      	ldr	r3, [r3, #4]
}
    1912:	4618      	mov	r0, r3
    1914:	370c      	adds	r7, #12
    1916:	46bd      	mov	sp, r7
    1918:	f85d 7b04 	ldr.w	r7, [sp], #4
    191c:	4770      	bx	lr
	...

00001920 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1920:	b590      	push	{r4, r7, lr}
    1922:	b083      	sub	sp, #12
    1924:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    1926:	4b17      	ldr	r3, [pc, #92]	; (1984 <RAMECC_Handler+0x64>)
    1928:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    192a:	4817      	ldr	r0, [pc, #92]	; (1988 <RAMECC_Handler+0x68>)
    192c:	4b17      	ldr	r3, [pc, #92]	; (198c <RAMECC_Handler+0x6c>)
    192e:	4798      	blx	r3
    1930:	4603      	mov	r3, r0
    1932:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1934:	683b      	ldr	r3, [r7, #0]
    1936:	f003 0302 	and.w	r3, r3, #2
    193a:	2b00      	cmp	r3, #0
    193c:	d00c      	beq.n	1958 <RAMECC_Handler+0x38>
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2b00      	cmp	r3, #0
    1944:	d008      	beq.n	1958 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	681c      	ldr	r4, [r3, #0]
    194a:	480f      	ldr	r0, [pc, #60]	; (1988 <RAMECC_Handler+0x68>)
    194c:	4b10      	ldr	r3, [pc, #64]	; (1990 <RAMECC_Handler+0x70>)
    194e:	4798      	blx	r3
    1950:	4603      	mov	r3, r0
    1952:	4618      	mov	r0, r3
    1954:	47a0      	blx	r4
    1956:	e012      	b.n	197e <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1958:	683b      	ldr	r3, [r7, #0]
    195a:	f003 0301 	and.w	r3, r3, #1
    195e:	2b00      	cmp	r3, #0
    1960:	d00c      	beq.n	197c <RAMECC_Handler+0x5c>
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	685b      	ldr	r3, [r3, #4]
    1966:	2b00      	cmp	r3, #0
    1968:	d008      	beq.n	197c <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	685c      	ldr	r4, [r3, #4]
    196e:	4806      	ldr	r0, [pc, #24]	; (1988 <RAMECC_Handler+0x68>)
    1970:	4b07      	ldr	r3, [pc, #28]	; (1990 <RAMECC_Handler+0x70>)
    1972:	4798      	blx	r3
    1974:	4603      	mov	r3, r0
    1976:	4618      	mov	r0, r3
    1978:	47a0      	blx	r4
    197a:	e000      	b.n	197e <RAMECC_Handler+0x5e>
	} else {
		return;
    197c:	bf00      	nop
	}
}
    197e:	370c      	adds	r7, #12
    1980:	46bd      	mov	sp, r7
    1982:	bd90      	pop	{r4, r7, pc}
    1984:	20000164 	.word	0x20000164
    1988:	41020000 	.word	0x41020000
    198c:	000018ed 	.word	0x000018ed
    1990:	00001907 	.word	0x00001907

00001994 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    1994:	b480      	push	{r7}
    1996:	b083      	sub	sp, #12
    1998:	af00      	add	r7, sp, #0
    199a:	6078      	str	r0, [r7, #4]
    199c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    199e:	bf00      	nop
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	691a      	ldr	r2, [r3, #16]
    19a4:	683b      	ldr	r3, [r7, #0]
    19a6:	4013      	ands	r3, r2
    19a8:	2b00      	cmp	r3, #0
    19aa:	d1f9      	bne.n	19a0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    19ac:	bf00      	nop
    19ae:	370c      	adds	r7, #12
    19b0:	46bd      	mov	sp, r7
    19b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b6:	4770      	bx	lr

000019b8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    19b8:	b480      	push	{r7}
    19ba:	b083      	sub	sp, #12
    19bc:	af00      	add	r7, sp, #0
    19be:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    19c6:	819a      	strh	r2, [r3, #12]
}
    19c8:	bf00      	nop
    19ca:	370c      	adds	r7, #12
    19cc:	46bd      	mov	sp, r7
    19ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d2:	4770      	bx	lr

000019d4 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    19d4:	b480      	push	{r7}
    19d6:	b083      	sub	sp, #12
    19d8:	af00      	add	r7, sp, #0
    19da:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	899b      	ldrh	r3, [r3, #12]
    19e0:	b29b      	uxth	r3, r3
}
    19e2:	4618      	mov	r0, r3
    19e4:	370c      	adds	r7, #12
    19e6:	46bd      	mov	sp, r7
    19e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ec:	4770      	bx	lr

000019ee <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    19ee:	b480      	push	{r7}
    19f0:	b083      	sub	sp, #12
    19f2:	af00      	add	r7, sp, #0
    19f4:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    19fc:	815a      	strh	r2, [r3, #10]
}
    19fe:	bf00      	nop
    1a00:	370c      	adds	r7, #12
    1a02:	46bd      	mov	sp, r7
    1a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a08:	4770      	bx	lr
	...

00001a0c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b082      	sub	sp, #8
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
    1a14:	460b      	mov	r3, r1
    1a16:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	887a      	ldrh	r2, [r7, #2]
    1a1c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    1a1e:	f248 0103 	movw	r1, #32771	; 0x8003
    1a22:	6878      	ldr	r0, [r7, #4]
    1a24:	4b02      	ldr	r3, [pc, #8]	; (1a30 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    1a26:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    1a28:	bf00      	nop
    1a2a:	3708      	adds	r7, #8
    1a2c:	46bd      	mov	sp, r7
    1a2e:	bd80      	pop	{r7, pc}
    1a30:	00001995 	.word	0x00001995

00001a34 <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    1a34:	b580      	push	{r7, lr}
    1a36:	b084      	sub	sp, #16
    1a38:	af00      	add	r7, sp, #0
    1a3a:	60f8      	str	r0, [r7, #12]
    1a3c:	460b      	mov	r3, r1
    1a3e:	607a      	str	r2, [r7, #4]
    1a40:	72fb      	strb	r3, [r7, #11]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1a42:	7afa      	ldrb	r2, [r7, #11]
    1a44:	68fb      	ldr	r3, [r7, #12]
    1a46:	3208      	adds	r2, #8
    1a48:	6879      	ldr	r1, [r7, #4]
    1a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    1a4e:	2160      	movs	r1, #96	; 0x60
    1a50:	68f8      	ldr	r0, [r7, #12]
    1a52:	4b03      	ldr	r3, [pc, #12]	; (1a60 <hri_rtcmode0_write_COMP_reg+0x2c>)
    1a54:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    1a56:	bf00      	nop
    1a58:	3710      	adds	r7, #16
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	bf00      	nop
    1a60:	00001995 	.word	0x00001995

00001a64 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b082      	sub	sp, #8
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
    1a6c:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	2b00      	cmp	r3, #0
    1a72:	bf14      	ite	ne
    1a74:	2301      	movne	r3, #1
    1a76:	2300      	moveq	r3, #0
    1a78:	b2db      	uxtb	r3, r3
    1a7a:	2230      	movs	r2, #48	; 0x30
    1a7c:	4916      	ldr	r1, [pc, #88]	; (1ad8 <_timer_init+0x74>)
    1a7e:	4618      	mov	r0, r3
    1a80:	4b16      	ldr	r3, [pc, #88]	; (1adc <_timer_init+0x78>)
    1a82:	4798      	blx	r3

	dev->hw = hw;
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	683a      	ldr	r2, [r7, #0]
    1a88:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	68db      	ldr	r3, [r3, #12]
    1a8e:	2101      	movs	r1, #1
    1a90:	4618      	mov	r0, r3
    1a92:	4b13      	ldr	r3, [pc, #76]	; (1ae0 <_timer_init+0x7c>)
    1a94:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	68db      	ldr	r3, [r3, #12]
    1a9a:	2101      	movs	r1, #1
    1a9c:	4618      	mov	r0, r3
    1a9e:	4b11      	ldr	r3, [pc, #68]	; (1ae4 <_timer_init+0x80>)
    1aa0:	4798      	blx	r3
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	68db      	ldr	r3, [r3, #12]
	hri_rtcmode0_write_CTRLA_reg(
    1aa6:	f248 0180 	movw	r1, #32896	; 0x8080
    1aaa:	4618      	mov	r0, r3
    1aac:	4b0c      	ldr	r3, [pc, #48]	; (1ae0 <_timer_init+0x7c>)
    1aae:	4798      	blx	r3
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	68db      	ldr	r3, [r3, #12]
    1ab4:	2220      	movs	r2, #32
    1ab6:	2100      	movs	r1, #0
    1ab8:	4618      	mov	r0, r3
    1aba:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <_timer_init+0x84>)
    1abc:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	68db      	ldr	r3, [r3, #12]
    1ac2:	4618      	mov	r0, r3
    1ac4:	4b09      	ldr	r3, [pc, #36]	; (1aec <_timer_init+0x88>)
    1ac6:	4798      	blx	r3

	_rtc_dev = dev;
    1ac8:	4a09      	ldr	r2, [pc, #36]	; (1af0 <_timer_init+0x8c>)
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    1ace:	2300      	movs	r3, #0
}
    1ad0:	4618      	mov	r0, r3
    1ad2:	3708      	adds	r7, #8
    1ad4:	46bd      	mov	sp, r7
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	00002c98 	.word	0x00002c98
    1adc:	000013b9 	.word	0x000013b9
    1ae0:	00001a0d 	.word	0x00001a0d
    1ae4:	00001995 	.word	0x00001995
    1ae8:	00001a35 	.word	0x00001a35
    1aec:	000019ef 	.word	0x000019ef
    1af0:	20000070 	.word	0x20000070

00001af4 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b084      	sub	sp, #16
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	68db      	ldr	r3, [r3, #12]
    1b00:	4618      	mov	r0, r3
    1b02:	4b0d      	ldr	r3, [pc, #52]	; (1b38 <_rtc_timer_interrupt_handler+0x44>)
    1b04:	4798      	blx	r3
    1b06:	4603      	mov	r3, r0
    1b08:	81fb      	strh	r3, [r7, #14]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1b0a:	89fb      	ldrh	r3, [r7, #14]
    1b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b10:	2b00      	cmp	r3, #0
    1b12:	d00c      	beq.n	1b2e <_rtc_timer_interrupt_handler+0x3a>
		if (dev->timer_cb.period_expired) {
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d003      	beq.n	1b24 <_rtc_timer_interrupt_handler+0x30>
			dev->timer_cb.period_expired(dev);
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	6878      	ldr	r0, [r7, #4]
    1b22:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1b24:	687b      	ldr	r3, [r7, #4]
    1b26:	68db      	ldr	r3, [r3, #12]
    1b28:	4618      	mov	r0, r3
    1b2a:	4b04      	ldr	r3, [pc, #16]	; (1b3c <_rtc_timer_interrupt_handler+0x48>)
    1b2c:	4798      	blx	r3
	}
}
    1b2e:	bf00      	nop
    1b30:	3710      	adds	r7, #16
    1b32:	46bd      	mov	sp, r7
    1b34:	bd80      	pop	{r7, pc}
    1b36:	bf00      	nop
    1b38:	000019d5 	.word	0x000019d5
    1b3c:	000019b9 	.word	0x000019b9

00001b40 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    1b40:	b480      	push	{r7}
    1b42:	af00      	add	r7, sp, #0
	return NULL;
    1b44:	2300      	movs	r3, #0
}
    1b46:	4618      	mov	r0, r3
    1b48:	46bd      	mov	sp, r7
    1b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b4e:	4770      	bx	lr

00001b50 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    1b54:	4b03      	ldr	r3, [pc, #12]	; (1b64 <RTC_Handler+0x14>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	4618      	mov	r0, r3
    1b5a:	4b03      	ldr	r3, [pc, #12]	; (1b68 <RTC_Handler+0x18>)
    1b5c:	4798      	blx	r3
}
    1b5e:	bf00      	nop
    1b60:	bd80      	pop	{r7, pc}
    1b62:	bf00      	nop
    1b64:	20000070 	.word	0x20000070
    1b68:	00001af5 	.word	0x00001af5

00001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1b6c:	b480      	push	{r7}
    1b6e:	b083      	sub	sp, #12
    1b70:	af00      	add	r7, sp, #0
    1b72:	4603      	mov	r3, r0
    1b74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	db0b      	blt.n	1b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b7e:	4909      	ldr	r1, [pc, #36]	; (1ba4 <__NVIC_EnableIRQ+0x38>)
    1b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1b84:	095b      	lsrs	r3, r3, #5
    1b86:	88fa      	ldrh	r2, [r7, #6]
    1b88:	f002 021f 	and.w	r2, r2, #31
    1b8c:	2001      	movs	r0, #1
    1b8e:	fa00 f202 	lsl.w	r2, r0, r2
    1b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1b96:	bf00      	nop
    1b98:	370c      	adds	r7, #12
    1b9a:	46bd      	mov	sp, r7
    1b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ba0:	4770      	bx	lr
    1ba2:	bf00      	nop
    1ba4:	e000e100 	.word	0xe000e100

00001ba8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1ba8:	b480      	push	{r7}
    1baa:	b083      	sub	sp, #12
    1bac:	af00      	add	r7, sp, #0
    1bae:	4603      	mov	r3, r0
    1bb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	db10      	blt.n	1bdc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bba:	490b      	ldr	r1, [pc, #44]	; (1be8 <__NVIC_DisableIRQ+0x40>)
    1bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1bc0:	095b      	lsrs	r3, r3, #5
    1bc2:	88fa      	ldrh	r2, [r7, #6]
    1bc4:	f002 021f 	and.w	r2, r2, #31
    1bc8:	2001      	movs	r0, #1
    1bca:	fa00 f202 	lsl.w	r2, r0, r2
    1bce:	3320      	adds	r3, #32
    1bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bd8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1bdc:	bf00      	nop
    1bde:	370c      	adds	r7, #12
    1be0:	46bd      	mov	sp, r7
    1be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1be6:	4770      	bx	lr
    1be8:	e000e100 	.word	0xe000e100

00001bec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1bec:	b480      	push	{r7}
    1bee:	b083      	sub	sp, #12
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	4603      	mov	r3, r0
    1bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	db0c      	blt.n	1c18 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bfe:	4909      	ldr	r1, [pc, #36]	; (1c24 <__NVIC_ClearPendingIRQ+0x38>)
    1c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c04:	095b      	lsrs	r3, r3, #5
    1c06:	88fa      	ldrh	r2, [r7, #6]
    1c08:	f002 021f 	and.w	r2, r2, #31
    1c0c:	2001      	movs	r0, #1
    1c0e:	fa00 f202 	lsl.w	r2, r0, r2
    1c12:	3360      	adds	r3, #96	; 0x60
    1c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1c18:	bf00      	nop
    1c1a:	370c      	adds	r7, #12
    1c1c:	46bd      	mov	sp, r7
    1c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c22:	4770      	bx	lr
    1c24:	e000e100 	.word	0xe000e100

00001c28 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1c28:	b480      	push	{r7}
    1c2a:	b083      	sub	sp, #12
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
    1c30:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c32:	bf00      	nop
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	69da      	ldr	r2, [r3, #28]
    1c38:	683b      	ldr	r3, [r7, #0]
    1c3a:	4013      	ands	r3, r2
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d1f9      	bne.n	1c34 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    1c40:	bf00      	nop
    1c42:	370c      	adds	r7, #12
    1c44:	46bd      	mov	sp, r7
    1c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c4a:	4770      	bx	lr

00001c4c <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1c4c:	b480      	push	{r7}
    1c4e:	b083      	sub	sp, #12
    1c50:	af00      	add	r7, sp, #0
    1c52:	6078      	str	r0, [r7, #4]
    1c54:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	69da      	ldr	r2, [r3, #28]
    1c5a:	683b      	ldr	r3, [r7, #0]
    1c5c:	4013      	ands	r3, r2
    1c5e:	2b00      	cmp	r3, #0
    1c60:	bf14      	ite	ne
    1c62:	2301      	movne	r3, #1
    1c64:	2300      	moveq	r3, #0
    1c66:	b2db      	uxtb	r3, r3
}
    1c68:	4618      	mov	r0, r3
    1c6a:	370c      	adds	r7, #12
    1c6c:	46bd      	mov	sp, r7
    1c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c72:	4770      	bx	lr

00001c74 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    1c74:	b480      	push	{r7}
    1c76:	b083      	sub	sp, #12
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	7e1b      	ldrb	r3, [r3, #24]
    1c80:	b2db      	uxtb	r3, r3
    1c82:	f003 0301 	and.w	r3, r3, #1
    1c86:	2b00      	cmp	r3, #0
    1c88:	bf14      	ite	ne
    1c8a:	2301      	movne	r3, #1
    1c8c:	2300      	moveq	r3, #0
    1c8e:	b2db      	uxtb	r3, r3
}
    1c90:	4618      	mov	r0, r3
    1c92:	370c      	adds	r7, #12
    1c94:	46bd      	mov	sp, r7
    1c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c9a:	4770      	bx	lr

00001c9c <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1c9c:	b480      	push	{r7}
    1c9e:	b083      	sub	sp, #12
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	7e1b      	ldrb	r3, [r3, #24]
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	085b      	lsrs	r3, r3, #1
    1cac:	f003 0301 	and.w	r3, r3, #1
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	bf14      	ite	ne
    1cb4:	2301      	movne	r3, #1
    1cb6:	2300      	moveq	r3, #0
    1cb8:	b2db      	uxtb	r3, r3
}
    1cba:	4618      	mov	r0, r3
    1cbc:	370c      	adds	r7, #12
    1cbe:	46bd      	mov	sp, r7
    1cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc4:	4770      	bx	lr

00001cc6 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    1cc6:	b480      	push	{r7}
    1cc8:	b083      	sub	sp, #12
    1cca:	af00      	add	r7, sp, #0
    1ccc:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	7e1b      	ldrb	r3, [r3, #24]
    1cd2:	b2db      	uxtb	r3, r3
    1cd4:	089b      	lsrs	r3, r3, #2
    1cd6:	f003 0301 	and.w	r3, r3, #1
    1cda:	2b00      	cmp	r3, #0
    1cdc:	bf14      	ite	ne
    1cde:	2301      	movne	r3, #1
    1ce0:	2300      	moveq	r3, #0
    1ce2:	b2db      	uxtb	r3, r3
}
    1ce4:	4618      	mov	r0, r3
    1ce6:	370c      	adds	r7, #12
    1ce8:	46bd      	mov	sp, r7
    1cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cee:	4770      	bx	lr

00001cf0 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    1cf0:	b480      	push	{r7}
    1cf2:	b083      	sub	sp, #12
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	7e1b      	ldrb	r3, [r3, #24]
    1cfc:	b2db      	uxtb	r3, r3
    1cfe:	09db      	lsrs	r3, r3, #7
    1d00:	f003 0301 	and.w	r3, r3, #1
    1d04:	2b00      	cmp	r3, #0
    1d06:	bf14      	ite	ne
    1d08:	2301      	movne	r3, #1
    1d0a:	2300      	moveq	r3, #0
    1d0c:	b2db      	uxtb	r3, r3
}
    1d0e:	4618      	mov	r0, r3
    1d10:	370c      	adds	r7, #12
    1d12:	46bd      	mov	sp, r7
    1d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d18:	4770      	bx	lr

00001d1a <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    1d1a:	b480      	push	{r7}
    1d1c:	b083      	sub	sp, #12
    1d1e:	af00      	add	r7, sp, #0
    1d20:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	2280      	movs	r2, #128	; 0x80
    1d26:	761a      	strb	r2, [r3, #24]
}
    1d28:	bf00      	nop
    1d2a:	370c      	adds	r7, #12
    1d2c:	46bd      	mov	sp, r7
    1d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d32:	4770      	bx	lr

00001d34 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    1d34:	b480      	push	{r7}
    1d36:	b083      	sub	sp, #12
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	2201      	movs	r2, #1
    1d40:	759a      	strb	r2, [r3, #22]
}
    1d42:	bf00      	nop
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr

00001d4e <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    1d4e:	b480      	push	{r7}
    1d50:	b083      	sub	sp, #12
    1d52:	af00      	add	r7, sp, #0
    1d54:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	7d9b      	ldrb	r3, [r3, #22]
    1d5a:	b2db      	uxtb	r3, r3
    1d5c:	f003 0301 	and.w	r3, r3, #1
    1d60:	2b00      	cmp	r3, #0
    1d62:	bf14      	ite	ne
    1d64:	2301      	movne	r3, #1
    1d66:	2300      	moveq	r3, #0
    1d68:	b2db      	uxtb	r3, r3
}
    1d6a:	4618      	mov	r0, r3
    1d6c:	370c      	adds	r7, #12
    1d6e:	46bd      	mov	sp, r7
    1d70:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d74:	4770      	bx	lr

00001d76 <hri_sercomusart_write_INTEN_DRE_bit>:

static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value)
{
    1d76:	b480      	push	{r7}
    1d78:	b083      	sub	sp, #12
    1d7a:	af00      	add	r7, sp, #0
    1d7c:	6078      	str	r0, [r7, #4]
    1d7e:	460b      	mov	r3, r1
    1d80:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1d82:	78fb      	ldrb	r3, [r7, #3]
    1d84:	f083 0301 	eor.w	r3, r3, #1
    1d88:	b2db      	uxtb	r3, r3
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d003      	beq.n	1d96 <hri_sercomusart_write_INTEN_DRE_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	2201      	movs	r2, #1
    1d92:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}
    1d94:	e002      	b.n	1d9c <hri_sercomusart_write_INTEN_DRE_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	2201      	movs	r2, #1
    1d9a:	759a      	strb	r2, [r3, #22]
}
    1d9c:	bf00      	nop
    1d9e:	370c      	adds	r7, #12
    1da0:	46bd      	mov	sp, r7
    1da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1da6:	4770      	bx	lr

00001da8 <hri_sercomusart_clear_INTEN_DRE_bit>:

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    1da8:	b480      	push	{r7}
    1daa:	b083      	sub	sp, #12
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	2201      	movs	r2, #1
    1db4:	751a      	strb	r2, [r3, #20]
}
    1db6:	bf00      	nop
    1db8:	370c      	adds	r7, #12
    1dba:	46bd      	mov	sp, r7
    1dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dc0:	4770      	bx	lr

00001dc2 <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    1dc2:	b480      	push	{r7}
    1dc4:	b083      	sub	sp, #12
    1dc6:	af00      	add	r7, sp, #0
    1dc8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	2202      	movs	r2, #2
    1dce:	759a      	strb	r2, [r3, #22]
}
    1dd0:	bf00      	nop
    1dd2:	370c      	adds	r7, #12
    1dd4:	46bd      	mov	sp, r7
    1dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dda:	4770      	bx	lr

00001ddc <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    1ddc:	b480      	push	{r7}
    1dde:	b083      	sub	sp, #12
    1de0:	af00      	add	r7, sp, #0
    1de2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	7d9b      	ldrb	r3, [r3, #22]
    1de8:	b2db      	uxtb	r3, r3
    1dea:	085b      	lsrs	r3, r3, #1
    1dec:	f003 0301 	and.w	r3, r3, #1
    1df0:	2b00      	cmp	r3, #0
    1df2:	bf14      	ite	ne
    1df4:	2301      	movne	r3, #1
    1df6:	2300      	moveq	r3, #0
    1df8:	b2db      	uxtb	r3, r3
}
    1dfa:	4618      	mov	r0, r3
    1dfc:	370c      	adds	r7, #12
    1dfe:	46bd      	mov	sp, r7
    1e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e04:	4770      	bx	lr

00001e06 <hri_sercomusart_write_INTEN_TXC_bit>:

static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value)
{
    1e06:	b480      	push	{r7}
    1e08:	b083      	sub	sp, #12
    1e0a:	af00      	add	r7, sp, #0
    1e0c:	6078      	str	r0, [r7, #4]
    1e0e:	460b      	mov	r3, r1
    1e10:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1e12:	78fb      	ldrb	r3, [r7, #3]
    1e14:	f083 0301 	eor.w	r3, r3, #1
    1e18:	b2db      	uxtb	r3, r3
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d003      	beq.n	1e26 <hri_sercomusart_write_INTEN_TXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	2202      	movs	r2, #2
    1e22:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}
    1e24:	e002      	b.n	1e2c <hri_sercomusart_write_INTEN_TXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	2202      	movs	r2, #2
    1e2a:	759a      	strb	r2, [r3, #22]
}
    1e2c:	bf00      	nop
    1e2e:	370c      	adds	r7, #12
    1e30:	46bd      	mov	sp, r7
    1e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e36:	4770      	bx	lr

00001e38 <hri_sercomusart_clear_INTEN_TXC_bit>:

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    1e38:	b480      	push	{r7}
    1e3a:	b083      	sub	sp, #12
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	2202      	movs	r2, #2
    1e44:	751a      	strb	r2, [r3, #20]
}
    1e46:	bf00      	nop
    1e48:	370c      	adds	r7, #12
    1e4a:	46bd      	mov	sp, r7
    1e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e50:	4770      	bx	lr

00001e52 <hri_sercomusart_write_INTEN_RXC_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_RXC) >> SERCOM_USART_INTENSET_RXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value)
{
    1e52:	b480      	push	{r7}
    1e54:	b083      	sub	sp, #12
    1e56:	af00      	add	r7, sp, #0
    1e58:	6078      	str	r0, [r7, #4]
    1e5a:	460b      	mov	r3, r1
    1e5c:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1e5e:	78fb      	ldrb	r3, [r7, #3]
    1e60:	f083 0301 	eor.w	r3, r3, #1
    1e64:	b2db      	uxtb	r3, r3
    1e66:	2b00      	cmp	r3, #0
    1e68:	d003      	beq.n	1e72 <hri_sercomusart_write_INTEN_RXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	2204      	movs	r2, #4
    1e6e:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
	}
}
    1e70:	e002      	b.n	1e78 <hri_sercomusart_write_INTEN_RXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	2204      	movs	r2, #4
    1e76:	759a      	strb	r2, [r3, #22]
}
    1e78:	bf00      	nop
    1e7a:	370c      	adds	r7, #12
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <hri_sercomusart_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_ERROR) >> SERCOM_USART_INTENSET_ERROR_Pos;
}

static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1e90:	78fb      	ldrb	r3, [r7, #3]
    1e92:	f083 0301 	eor.w	r3, r3, #1
    1e96:	b2db      	uxtb	r3, r3
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d003      	beq.n	1ea4 <hri_sercomusart_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	2280      	movs	r2, #128	; 0x80
    1ea0:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
	}
}
    1ea2:	e002      	b.n	1eaa <hri_sercomusart_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	759a      	strb	r2, [r3, #22]
}
    1eaa:	bf00      	nop
    1eac:	370c      	adds	r7, #12
    1eae:	46bd      	mov	sp, r7
    1eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eb4:	4770      	bx	lr
	...

00001eb8 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b082      	sub	sp, #8
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	681b      	ldr	r3, [r3, #0]
    1ec4:	f043 0202 	orr.w	r2, r3, #2
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1ecc:	2103      	movs	r1, #3
    1ece:	6878      	ldr	r0, [r7, #4]
    1ed0:	4b02      	ldr	r3, [pc, #8]	; (1edc <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    1ed2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ed4:	bf00      	nop
    1ed6:	3708      	adds	r7, #8
    1ed8:	46bd      	mov	sp, r7
    1eda:	bd80      	pop	{r7, pc}
    1edc:	00001c29 	.word	0x00001c29

00001ee0 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b082      	sub	sp, #8
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	f023 0202 	bic.w	r2, r3, #2
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1ef4:	2103      	movs	r1, #3
    1ef6:	6878      	ldr	r0, [r7, #4]
    1ef8:	4b02      	ldr	r3, [pc, #8]	; (1f04 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    1efa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1efc:	bf00      	nop
    1efe:	3708      	adds	r7, #8
    1f00:	46bd      	mov	sp, r7
    1f02:	bd80      	pop	{r7, pc}
    1f04:	00001c29 	.word	0x00001c29

00001f08 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b084      	sub	sp, #16
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	6078      	str	r0, [r7, #4]
    1f10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1f12:	2103      	movs	r1, #3
    1f14:	6878      	ldr	r0, [r7, #4]
    1f16:	4b07      	ldr	r3, [pc, #28]	; (1f34 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    1f18:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1f1a:	687b      	ldr	r3, [r7, #4]
    1f1c:	681b      	ldr	r3, [r3, #0]
    1f1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1f20:	68fa      	ldr	r2, [r7, #12]
    1f22:	683b      	ldr	r3, [r7, #0]
    1f24:	4013      	ands	r3, r2
    1f26:	60fb      	str	r3, [r7, #12]
	return tmp;
    1f28:	68fb      	ldr	r3, [r7, #12]
}
    1f2a:	4618      	mov	r0, r3
    1f2c:	3710      	adds	r7, #16
    1f2e:	46bd      	mov	sp, r7
    1f30:	bd80      	pop	{r7, pc}
    1f32:	bf00      	nop
    1f34:	00001c29 	.word	0x00001c29

00001f38 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b082      	sub	sp, #8
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	6078      	str	r0, [r7, #4]
    1f40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	683a      	ldr	r2, [r7, #0]
    1f46:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1f48:	2103      	movs	r1, #3
    1f4a:	6878      	ldr	r0, [r7, #4]
    1f4c:	4b02      	ldr	r3, [pc, #8]	; (1f58 <hri_sercomusart_write_CTRLA_reg+0x20>)
    1f4e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1f50:	bf00      	nop
    1f52:	3708      	adds	r7, #8
    1f54:	46bd      	mov	sp, r7
    1f56:	bd80      	pop	{r7, pc}
    1f58:	00001c29 	.word	0x00001c29

00001f5c <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b082      	sub	sp, #8
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
    1f64:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	683a      	ldr	r2, [r7, #0]
    1f6a:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    1f6c:	211f      	movs	r1, #31
    1f6e:	6878      	ldr	r0, [r7, #4]
    1f70:	4b02      	ldr	r3, [pc, #8]	; (1f7c <hri_sercomusart_write_CTRLB_reg+0x20>)
    1f72:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1f74:	bf00      	nop
    1f76:	3708      	adds	r7, #8
    1f78:	46bd      	mov	sp, r7
    1f7a:	bd80      	pop	{r7, pc}
    1f7c:	00001c29 	.word	0x00001c29

00001f80 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    1f80:	b480      	push	{r7}
    1f82:	b083      	sub	sp, #12
    1f84:	af00      	add	r7, sp, #0
    1f86:	6078      	str	r0, [r7, #4]
    1f88:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	683a      	ldr	r2, [r7, #0]
    1f8e:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1f90:	bf00      	nop
    1f92:	370c      	adds	r7, #12
    1f94:	46bd      	mov	sp, r7
    1f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f9a:	4770      	bx	lr

00001f9c <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    1f9c:	b480      	push	{r7}
    1f9e:	b083      	sub	sp, #12
    1fa0:	af00      	add	r7, sp, #0
    1fa2:	6078      	str	r0, [r7, #4]
    1fa4:	460b      	mov	r3, r1
    1fa6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	887a      	ldrh	r2, [r7, #2]
    1fac:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1fae:	bf00      	nop
    1fb0:	370c      	adds	r7, #12
    1fb2:	46bd      	mov	sp, r7
    1fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fb8:	4770      	bx	lr

00001fba <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1fba:	b480      	push	{r7}
    1fbc:	b083      	sub	sp, #12
    1fbe:	af00      	add	r7, sp, #0
    1fc0:	6078      	str	r0, [r7, #4]
    1fc2:	460b      	mov	r3, r1
    1fc4:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	78fa      	ldrb	r2, [r7, #3]
    1fca:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1fcc:	bf00      	nop
    1fce:	370c      	adds	r7, #12
    1fd0:	46bd      	mov	sp, r7
    1fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd6:	4770      	bx	lr

00001fd8 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1fd8:	b480      	push	{r7}
    1fda:	b083      	sub	sp, #12
    1fdc:	af00      	add	r7, sp, #0
    1fde:	6078      	str	r0, [r7, #4]
    1fe0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	683a      	ldr	r2, [r7, #0]
    1fe6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1fe8:	bf00      	nop
    1fea:	370c      	adds	r7, #12
    1fec:	46bd      	mov	sp, r7
    1fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ff2:	4770      	bx	lr

00001ff4 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1ff4:	b480      	push	{r7}
    1ff6:	b083      	sub	sp, #12
    1ff8:	af00      	add	r7, sp, #0
    1ffa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1ffc:	687b      	ldr	r3, [r7, #4]
    1ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    2000:	4618      	mov	r0, r3
    2002:	370c      	adds	r7, #12
    2004:	46bd      	mov	sp, r7
    2006:	f85d 7b04 	ldr.w	r7, [sp], #4
    200a:	4770      	bx	lr

0000200c <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    200c:	b480      	push	{r7}
    200e:	b083      	sub	sp, #12
    2010:	af00      	add	r7, sp, #0
    2012:	6078      	str	r0, [r7, #4]
    2014:	460b      	mov	r3, r1
    2016:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	78fa      	ldrb	r2, [r7, #3]
    201c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2020:	bf00      	nop
    2022:	370c      	adds	r7, #12
    2024:	46bd      	mov	sp, r7
    2026:	f85d 7b04 	ldr.w	r7, [sp], #4
    202a:	4770      	bx	lr

0000202c <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    202c:	b480      	push	{r7}
    202e:	b083      	sub	sp, #12
    2030:	af00      	add	r7, sp, #0
    2032:	6078      	str	r0, [r7, #4]
    2034:	460b      	mov	r3, r1
    2036:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	887a      	ldrh	r2, [r7, #2]
    203c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    203e:	bf00      	nop
    2040:	370c      	adds	r7, #12
    2042:	46bd      	mov	sp, r7
    2044:	f85d 7b04 	ldr.w	r7, [sp], #4
    2048:	4770      	bx	lr

0000204a <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    204a:	b480      	push	{r7}
    204c:	b083      	sub	sp, #12
    204e:	af00      	add	r7, sp, #0
    2050:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    2052:	687b      	ldr	r3, [r7, #4]
    2054:	8b5b      	ldrh	r3, [r3, #26]
    2056:	b29b      	uxth	r3, r3
}
    2058:	4618      	mov	r0, r3
    205a:	370c      	adds	r7, #12
    205c:	46bd      	mov	sp, r7
    205e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2062:	4770      	bx	lr

00002064 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    2064:	b580      	push	{r7, lr}
    2066:	b086      	sub	sp, #24
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
    206c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	bf14      	ite	ne
    2074:	2301      	movne	r3, #1
    2076:	2300      	moveq	r3, #0
    2078:	b2db      	uxtb	r3, r3
    207a:	22cd      	movs	r2, #205	; 0xcd
    207c:	491c      	ldr	r1, [pc, #112]	; (20f0 <_usart_async_init+0x8c>)
    207e:	4618      	mov	r0, r3
    2080:	4b1c      	ldr	r3, [pc, #112]	; (20f4 <_usart_async_init+0x90>)
    2082:	4798      	blx	r3

	init_status = _usart_init(hw);
    2084:	6838      	ldr	r0, [r7, #0]
    2086:	4b1c      	ldr	r3, [pc, #112]	; (20f8 <_usart_async_init+0x94>)
    2088:	4798      	blx	r3
    208a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    208c:	68fb      	ldr	r3, [r7, #12]
    208e:	2b00      	cmp	r3, #0
    2090:	d001      	beq.n	2096 <_usart_async_init+0x32>
		return init_status;
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	e027      	b.n	20e6 <_usart_async_init+0x82>
	}
	device->hw = hw;
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	683a      	ldr	r2, [r7, #0]
    209a:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    209c:	6879      	ldr	r1, [r7, #4]
    209e:	6838      	ldr	r0, [r7, #0]
    20a0:	4b16      	ldr	r3, [pc, #88]	; (20fc <_usart_async_init+0x98>)
    20a2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    20a4:	6838      	ldr	r0, [r7, #0]
    20a6:	4b16      	ldr	r3, [pc, #88]	; (2100 <_usart_async_init+0x9c>)
    20a8:	4798      	blx	r3
    20aa:	4603      	mov	r3, r0
    20ac:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    20ae:	2300      	movs	r3, #0
    20b0:	613b      	str	r3, [r7, #16]
    20b2:	e014      	b.n	20de <_usart_async_init+0x7a>
		NVIC_DisableIRQ((IRQn_Type)irq);
    20b4:	7dfb      	ldrb	r3, [r7, #23]
    20b6:	b21b      	sxth	r3, r3
    20b8:	4618      	mov	r0, r3
    20ba:	4b12      	ldr	r3, [pc, #72]	; (2104 <_usart_async_init+0xa0>)
    20bc:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    20be:	7dfb      	ldrb	r3, [r7, #23]
    20c0:	b21b      	sxth	r3, r3
    20c2:	4618      	mov	r0, r3
    20c4:	4b10      	ldr	r3, [pc, #64]	; (2108 <_usart_async_init+0xa4>)
    20c6:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    20c8:	7dfb      	ldrb	r3, [r7, #23]
    20ca:	b21b      	sxth	r3, r3
    20cc:	4618      	mov	r0, r3
    20ce:	4b0f      	ldr	r3, [pc, #60]	; (210c <_usart_async_init+0xa8>)
    20d0:	4798      	blx	r3
		irq++;
    20d2:	7dfb      	ldrb	r3, [r7, #23]
    20d4:	3301      	adds	r3, #1
    20d6:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    20d8:	693b      	ldr	r3, [r7, #16]
    20da:	3301      	adds	r3, #1
    20dc:	613b      	str	r3, [r7, #16]
    20de:	693b      	ldr	r3, [r7, #16]
    20e0:	2b03      	cmp	r3, #3
    20e2:	d9e7      	bls.n	20b4 <_usart_async_init+0x50>
	}
	return ERR_NONE;
    20e4:	2300      	movs	r3, #0
}
    20e6:	4618      	mov	r0, r3
    20e8:	3718      	adds	r7, #24
    20ea:	46bd      	mov	sp, r7
    20ec:	bd80      	pop	{r7, pc}
    20ee:	bf00      	nop
    20f0:	00002cb0 	.word	0x00002cb0
    20f4:	000013b9 	.word	0x000013b9
    20f8:	00002439 	.word	0x00002439
    20fc:	000023f5 	.word	0x000023f5
    2100:	000025f9 	.word	0x000025f9
    2104:	00001ba9 	.word	0x00001ba9
    2108:	00001bed 	.word	0x00001bed
    210c:	00001b6d 	.word	0x00001b6d

00002110 <_usart_async_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
    2110:	b580      	push	{r7, lr}
    2112:	b082      	sub	sp, #8
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	699b      	ldr	r3, [r3, #24]
    211c:	4618      	mov	r0, r3
    211e:	4b03      	ldr	r3, [pc, #12]	; (212c <_usart_async_enable+0x1c>)
    2120:	4798      	blx	r3
}
    2122:	bf00      	nop
    2124:	3708      	adds	r7, #8
    2126:	46bd      	mov	sp, r7
    2128:	bd80      	pop	{r7, pc}
    212a:	bf00      	nop
    212c:	00001eb9 	.word	0x00001eb9

00002130 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	6078      	str	r0, [r7, #4]
    2138:	460b      	mov	r3, r1
    213a:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	699b      	ldr	r3, [r3, #24]
    2140:	78fa      	ldrb	r2, [r7, #3]
    2142:	4611      	mov	r1, r2
    2144:	4618      	mov	r0, r3
    2146:	4b03      	ldr	r3, [pc, #12]	; (2154 <_usart_async_write_byte+0x24>)
    2148:	4798      	blx	r3
}
    214a:	bf00      	nop
    214c:	3708      	adds	r7, #8
    214e:	46bd      	mov	sp, r7
    2150:	bd80      	pop	{r7, pc}
    2152:	bf00      	nop
    2154:	00001fd9 	.word	0x00001fd9

00002158 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    2158:	b580      	push	{r7, lr}
    215a:	b082      	sub	sp, #8
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	699b      	ldr	r3, [r3, #24]
    2164:	4618      	mov	r0, r3
    2166:	4b03      	ldr	r3, [pc, #12]	; (2174 <_usart_async_enable_byte_sent_irq+0x1c>)
    2168:	4798      	blx	r3
}
    216a:	bf00      	nop
    216c:	3708      	adds	r7, #8
    216e:	46bd      	mov	sp, r7
    2170:	bd80      	pop	{r7, pc}
    2172:	bf00      	nop
    2174:	00001d35 	.word	0x00001d35

00002178 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
    217e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	699b      	ldr	r3, [r3, #24]
    2184:	4618      	mov	r0, r3
    2186:	4b03      	ldr	r3, [pc, #12]	; (2194 <_usart_async_enable_tx_done_irq+0x1c>)
    2188:	4798      	blx	r3
}
    218a:	bf00      	nop
    218c:	3708      	adds	r7, #8
    218e:	46bd      	mov	sp, r7
    2190:	bd80      	pop	{r7, pc}
    2192:	bf00      	nop
    2194:	00001dc3 	.word	0x00001dc3

00002198 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2198:	b4b0      	push	{r4, r5, r7}
    219a:	b08d      	sub	sp, #52	; 0x34
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    21a0:	4b13      	ldr	r3, [pc, #76]	; (21f0 <_sercom_get_hardware_index+0x58>)
    21a2:	f107 040c 	add.w	r4, r7, #12
    21a6:	461d      	mov	r5, r3
    21a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    21aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    21ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    21b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    21b4:	2300      	movs	r3, #0
    21b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    21b8:	e010      	b.n	21dc <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    21ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21bc:	009b      	lsls	r3, r3, #2
    21be:	f107 0230 	add.w	r2, r7, #48	; 0x30
    21c2:	4413      	add	r3, r2
    21c4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    21c8:	461a      	mov	r2, r3
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	429a      	cmp	r2, r3
    21ce:	d102      	bne.n	21d6 <_sercom_get_hardware_index+0x3e>
			return i;
    21d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21d2:	b2db      	uxtb	r3, r3
    21d4:	e006      	b.n	21e4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    21d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21d8:	3301      	adds	r3, #1
    21da:	62fb      	str	r3, [r7, #44]	; 0x2c
    21dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21de:	2b07      	cmp	r3, #7
    21e0:	d9eb      	bls.n	21ba <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    21e2:	2300      	movs	r3, #0
}
    21e4:	4618      	mov	r0, r3
    21e6:	3734      	adds	r7, #52	; 0x34
    21e8:	46bd      	mov	sp, r7
    21ea:	bcb0      	pop	{r4, r5, r7}
    21ec:	4770      	bx	lr
    21ee:	bf00      	nop
    21f0:	00002ccc 	.word	0x00002ccc

000021f4 <_usart_async_set_irq_state>:
/**
 * \brief Enable/disable USART interrupt
 */
void _usart_async_set_irq_state(struct _usart_async_device *const device, const enum _usart_async_callback_type type,
                                const bool state)
{
    21f4:	b580      	push	{r7, lr}
    21f6:	b082      	sub	sp, #8
    21f8:	af00      	add	r7, sp, #0
    21fa:	6078      	str	r0, [r7, #4]
    21fc:	460b      	mov	r3, r1
    21fe:	70fb      	strb	r3, [r7, #3]
    2200:	4613      	mov	r3, r2
    2202:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	2b00      	cmp	r3, #0
    2208:	bf14      	ite	ne
    220a:	2301      	movne	r3, #1
    220c:	2300      	moveq	r3, #0
    220e:	b2db      	uxtb	r3, r3
    2210:	f240 222d 	movw	r2, #557	; 0x22d
    2214:	4918      	ldr	r1, [pc, #96]	; (2278 <_usart_async_set_irq_state+0x84>)
    2216:	4618      	mov	r0, r3
    2218:	4b18      	ldr	r3, [pc, #96]	; (227c <_usart_async_set_irq_state+0x88>)
    221a:	4798      	blx	r3

	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    221c:	78fb      	ldrb	r3, [r7, #3]
    221e:	2b00      	cmp	r3, #0
    2220:	d002      	beq.n	2228 <_usart_async_set_irq_state+0x34>
    2222:	78fb      	ldrb	r3, [r7, #3]
    2224:	2b02      	cmp	r3, #2
    2226:	d10e      	bne.n	2246 <_usart_async_set_irq_state+0x52>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	699b      	ldr	r3, [r3, #24]
    222c:	78ba      	ldrb	r2, [r7, #2]
    222e:	4611      	mov	r1, r2
    2230:	4618      	mov	r0, r3
    2232:	4b13      	ldr	r3, [pc, #76]	; (2280 <_usart_async_set_irq_state+0x8c>)
    2234:	4798      	blx	r3
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2236:	687b      	ldr	r3, [r7, #4]
    2238:	699b      	ldr	r3, [r3, #24]
    223a:	78ba      	ldrb	r2, [r7, #2]
    223c:	4611      	mov	r1, r2
    223e:	4618      	mov	r0, r3
    2240:	4b10      	ldr	r3, [pc, #64]	; (2284 <_usart_async_set_irq_state+0x90>)
    2242:	4798      	blx	r3
	} else if (USART_ASYNC_RX_DONE == type) {
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
	} else if (USART_ASYNC_ERROR == type) {
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    2244:	e014      	b.n	2270 <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_RX_DONE == type) {
    2246:	78fb      	ldrb	r3, [r7, #3]
    2248:	2b01      	cmp	r3, #1
    224a:	d107      	bne.n	225c <_usart_async_set_irq_state+0x68>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	699b      	ldr	r3, [r3, #24]
    2250:	78ba      	ldrb	r2, [r7, #2]
    2252:	4611      	mov	r1, r2
    2254:	4618      	mov	r0, r3
    2256:	4b0c      	ldr	r3, [pc, #48]	; (2288 <_usart_async_set_irq_state+0x94>)
    2258:	4798      	blx	r3
}
    225a:	e009      	b.n	2270 <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_ERROR == type) {
    225c:	78fb      	ldrb	r3, [r7, #3]
    225e:	2b03      	cmp	r3, #3
    2260:	d106      	bne.n	2270 <_usart_async_set_irq_state+0x7c>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	699b      	ldr	r3, [r3, #24]
    2266:	78ba      	ldrb	r2, [r7, #2]
    2268:	4611      	mov	r1, r2
    226a:	4618      	mov	r0, r3
    226c:	4b07      	ldr	r3, [pc, #28]	; (228c <_usart_async_set_irq_state+0x98>)
    226e:	4798      	blx	r3
}
    2270:	bf00      	nop
    2272:	3708      	adds	r7, #8
    2274:	46bd      	mov	sp, r7
    2276:	bd80      	pop	{r7, pc}
    2278:	00002cb0 	.word	0x00002cb0
    227c:	000013b9 	.word	0x000013b9
    2280:	00001d77 	.word	0x00001d77
    2284:	00001e07 	.word	0x00001e07
    2288:	00001e53 	.word	0x00001e53
    228c:	00001e85 	.word	0x00001e85

00002290 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2290:	b590      	push	{r4, r7, lr}
    2292:	b085      	sub	sp, #20
    2294:	af00      	add	r7, sp, #0
    2296:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	699b      	ldr	r3, [r3, #24]
    229c:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    229e:	68f8      	ldr	r0, [r7, #12]
    22a0:	4b2f      	ldr	r3, [pc, #188]	; (2360 <_sercom_usart_interrupt_handler+0xd0>)
    22a2:	4798      	blx	r3
    22a4:	4603      	mov	r3, r0
    22a6:	2b00      	cmp	r3, #0
    22a8:	d00d      	beq.n	22c6 <_sercom_usart_interrupt_handler+0x36>
    22aa:	68f8      	ldr	r0, [r7, #12]
    22ac:	4b2d      	ldr	r3, [pc, #180]	; (2364 <_sercom_usart_interrupt_handler+0xd4>)
    22ae:	4798      	blx	r3
    22b0:	4603      	mov	r3, r0
    22b2:	2b00      	cmp	r3, #0
    22b4:	d007      	beq.n	22c6 <_sercom_usart_interrupt_handler+0x36>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    22b6:	68f8      	ldr	r0, [r7, #12]
    22b8:	4b2b      	ldr	r3, [pc, #172]	; (2368 <_sercom_usart_interrupt_handler+0xd8>)
    22ba:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	681b      	ldr	r3, [r3, #0]
    22c0:	6878      	ldr	r0, [r7, #4]
    22c2:	4798      	blx	r3
    22c4:	e049      	b.n	235a <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    22c6:	68f8      	ldr	r0, [r7, #12]
    22c8:	4b28      	ldr	r3, [pc, #160]	; (236c <_sercom_usart_interrupt_handler+0xdc>)
    22ca:	4798      	blx	r3
    22cc:	4603      	mov	r3, r0
    22ce:	2b00      	cmp	r3, #0
    22d0:	d00d      	beq.n	22ee <_sercom_usart_interrupt_handler+0x5e>
    22d2:	68f8      	ldr	r0, [r7, #12]
    22d4:	4b26      	ldr	r3, [pc, #152]	; (2370 <_sercom_usart_interrupt_handler+0xe0>)
    22d6:	4798      	blx	r3
    22d8:	4603      	mov	r3, r0
    22da:	2b00      	cmp	r3, #0
    22dc:	d007      	beq.n	22ee <_sercom_usart_interrupt_handler+0x5e>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    22de:	68f8      	ldr	r0, [r7, #12]
    22e0:	4b24      	ldr	r3, [pc, #144]	; (2374 <_sercom_usart_interrupt_handler+0xe4>)
    22e2:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	689b      	ldr	r3, [r3, #8]
    22e8:	6878      	ldr	r0, [r7, #4]
    22ea:	4798      	blx	r3
    22ec:	e035      	b.n	235a <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    22ee:	68f8      	ldr	r0, [r7, #12]
    22f0:	4b21      	ldr	r3, [pc, #132]	; (2378 <_sercom_usart_interrupt_handler+0xe8>)
    22f2:	4798      	blx	r3
    22f4:	4603      	mov	r3, r0
    22f6:	2b00      	cmp	r3, #0
    22f8:	d017      	beq.n	232a <_sercom_usart_interrupt_handler+0x9a>
		if (hri_sercomusart_read_STATUS_reg(hw)
    22fa:	68f8      	ldr	r0, [r7, #12]
    22fc:	4b1f      	ldr	r3, [pc, #124]	; (237c <_sercom_usart_interrupt_handler+0xec>)
    22fe:	4798      	blx	r3
    2300:	4603      	mov	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    2302:	f003 0337 	and.w	r3, r3, #55	; 0x37
		if (hri_sercomusart_read_STATUS_reg(hw)
    2306:	2b00      	cmp	r3, #0
    2308:	d004      	beq.n	2314 <_sercom_usart_interrupt_handler+0x84>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    230a:	21ff      	movs	r1, #255	; 0xff
    230c:	68f8      	ldr	r0, [r7, #12]
    230e:	4b1c      	ldr	r3, [pc, #112]	; (2380 <_sercom_usart_interrupt_handler+0xf0>)
    2310:	4798      	blx	r3
			return;
    2312:	e022      	b.n	235a <_sercom_usart_interrupt_handler+0xca>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	685c      	ldr	r4, [r3, #4]
    2318:	68f8      	ldr	r0, [r7, #12]
    231a:	4b1a      	ldr	r3, [pc, #104]	; (2384 <_sercom_usart_interrupt_handler+0xf4>)
    231c:	4798      	blx	r3
    231e:	4603      	mov	r3, r0
    2320:	b2db      	uxtb	r3, r3
    2322:	4619      	mov	r1, r3
    2324:	6878      	ldr	r0, [r7, #4]
    2326:	47a0      	blx	r4
    2328:	e017      	b.n	235a <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    232a:	68f8      	ldr	r0, [r7, #12]
    232c:	4b16      	ldr	r3, [pc, #88]	; (2388 <_sercom_usart_interrupt_handler+0xf8>)
    232e:	4798      	blx	r3
    2330:	4603      	mov	r3, r0
    2332:	2b00      	cmp	r3, #0
    2334:	d011      	beq.n	235a <_sercom_usart_interrupt_handler+0xca>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    2336:	68f8      	ldr	r0, [r7, #12]
    2338:	4b14      	ldr	r3, [pc, #80]	; (238c <_sercom_usart_interrupt_handler+0xfc>)
    233a:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	68db      	ldr	r3, [r3, #12]
    2340:	6878      	ldr	r0, [r7, #4]
    2342:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    2344:	68f8      	ldr	r0, [r7, #12]
    2346:	4b0d      	ldr	r3, [pc, #52]	; (237c <_sercom_usart_interrupt_handler+0xec>)
    2348:	4798      	blx	r3
    234a:	4603      	mov	r3, r0
    234c:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    234e:	68bb      	ldr	r3, [r7, #8]
    2350:	b29b      	uxth	r3, r3
    2352:	4619      	mov	r1, r3
    2354:	68f8      	ldr	r0, [r7, #12]
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <_sercom_usart_interrupt_handler+0xf0>)
    2358:	4798      	blx	r3
	}
}
    235a:	3714      	adds	r7, #20
    235c:	46bd      	mov	sp, r7
    235e:	bd90      	pop	{r4, r7, pc}
    2360:	00001c75 	.word	0x00001c75
    2364:	00001d4f 	.word	0x00001d4f
    2368:	00001da9 	.word	0x00001da9
    236c:	00001c9d 	.word	0x00001c9d
    2370:	00001ddd 	.word	0x00001ddd
    2374:	00001e39 	.word	0x00001e39
    2378:	00001cc7 	.word	0x00001cc7
    237c:	0000204b 	.word	0x0000204b
    2380:	0000202d 	.word	0x0000202d
    2384:	00001ff5 	.word	0x00001ff5
    2388:	00001cf1 	.word	0x00001cf1
    238c:	00001d1b 	.word	0x00001d1b

00002390 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    2390:	b580      	push	{r7, lr}
    2392:	b084      	sub	sp, #16
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2398:	6878      	ldr	r0, [r7, #4]
    239a:	4b12      	ldr	r3, [pc, #72]	; (23e4 <_get_sercom_index+0x54>)
    239c:	4798      	blx	r3
    239e:	4603      	mov	r3, r0
    23a0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    23a2:	2300      	movs	r3, #0
    23a4:	73fb      	strb	r3, [r7, #15]
    23a6:	e00f      	b.n	23c8 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    23a8:	7bfa      	ldrb	r2, [r7, #15]
    23aa:	490f      	ldr	r1, [pc, #60]	; (23e8 <_get_sercom_index+0x58>)
    23ac:	4613      	mov	r3, r2
    23ae:	005b      	lsls	r3, r3, #1
    23b0:	4413      	add	r3, r2
    23b2:	00db      	lsls	r3, r3, #3
    23b4:	440b      	add	r3, r1
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	7bba      	ldrb	r2, [r7, #14]
    23ba:	429a      	cmp	r2, r3
    23bc:	d101      	bne.n	23c2 <_get_sercom_index+0x32>
			return i;
    23be:	7bfb      	ldrb	r3, [r7, #15]
    23c0:	e00c      	b.n	23dc <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    23c2:	7bfb      	ldrb	r3, [r7, #15]
    23c4:	3301      	adds	r3, #1
    23c6:	73fb      	strb	r3, [r7, #15]
    23c8:	7bfb      	ldrb	r3, [r7, #15]
    23ca:	2b01      	cmp	r3, #1
    23cc:	d9ec      	bls.n	23a8 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    23ce:	f240 226d 	movw	r2, #621	; 0x26d
    23d2:	4906      	ldr	r1, [pc, #24]	; (23ec <_get_sercom_index+0x5c>)
    23d4:	2000      	movs	r0, #0
    23d6:	4b06      	ldr	r3, [pc, #24]	; (23f0 <_get_sercom_index+0x60>)
    23d8:	4798      	blx	r3
	return 0;
    23da:	2300      	movs	r3, #0
}
    23dc:	4618      	mov	r0, r3
    23de:	3710      	adds	r7, #16
    23e0:	46bd      	mov	sp, r7
    23e2:	bd80      	pop	{r7, pc}
    23e4:	00002199 	.word	0x00002199
    23e8:	20000000 	.word	0x20000000
    23ec:	00002cb0 	.word	0x00002cb0
    23f0:	000013b9 	.word	0x000013b9

000023f4 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    23f4:	b480      	push	{r7}
    23f6:	b083      	sub	sp, #12
    23f8:	af00      	add	r7, sp, #0
    23fa:	6078      	str	r0, [r7, #4]
    23fc:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM0) {
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	4a09      	ldr	r2, [pc, #36]	; (2428 <_sercom_init_irq_param+0x34>)
    2402:	4293      	cmp	r3, r2
    2404:	d102      	bne.n	240c <_sercom_init_irq_param+0x18>
		_sercom0_dev = (struct _usart_async_device *)dev;
    2406:	4a09      	ldr	r2, [pc, #36]	; (242c <_sercom_init_irq_param+0x38>)
    2408:	683b      	ldr	r3, [r7, #0]
    240a:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM2) {
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	4a08      	ldr	r2, [pc, #32]	; (2430 <_sercom_init_irq_param+0x3c>)
    2410:	4293      	cmp	r3, r2
    2412:	d102      	bne.n	241a <_sercom_init_irq_param+0x26>
		_sercom2_dev = (struct _usart_async_device *)dev;
    2414:	4a07      	ldr	r2, [pc, #28]	; (2434 <_sercom_init_irq_param+0x40>)
    2416:	683b      	ldr	r3, [r7, #0]
    2418:	6013      	str	r3, [r2, #0]
	}
}
    241a:	bf00      	nop
    241c:	370c      	adds	r7, #12
    241e:	46bd      	mov	sp, r7
    2420:	f85d 7b04 	ldr.w	r7, [sp], #4
    2424:	4770      	bx	lr
    2426:	bf00      	nop
    2428:	40003000 	.word	0x40003000
    242c:	20000074 	.word	0x20000074
    2430:	41012000 	.word	0x41012000
    2434:	20000078 	.word	0x20000078

00002438 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2438:	b580      	push	{r7, lr}
    243a:	b084      	sub	sp, #16
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    2440:	6878      	ldr	r0, [r7, #4]
    2442:	4b61      	ldr	r3, [pc, #388]	; (25c8 <_usart_init+0x190>)
    2444:	4798      	blx	r3
    2446:	4603      	mov	r3, r0
    2448:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    244a:	2101      	movs	r1, #1
    244c:	6878      	ldr	r0, [r7, #4]
    244e:	4b5f      	ldr	r3, [pc, #380]	; (25cc <_usart_init+0x194>)
    2450:	4798      	blx	r3
    2452:	4603      	mov	r3, r0
    2454:	f083 0301 	eor.w	r3, r3, #1
    2458:	b2db      	uxtb	r3, r3
    245a:	2b00      	cmp	r3, #0
    245c:	d020      	beq.n	24a0 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    245e:	7bfa      	ldrb	r2, [r7, #15]
    2460:	495b      	ldr	r1, [pc, #364]	; (25d0 <_usart_init+0x198>)
    2462:	4613      	mov	r3, r2
    2464:	005b      	lsls	r3, r3, #1
    2466:	4413      	add	r3, r2
    2468:	00db      	lsls	r3, r3, #3
    246a:	440b      	add	r3, r1
    246c:	3304      	adds	r3, #4
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	f003 031c 	and.w	r3, r3, #28
    2474:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2476:	2102      	movs	r1, #2
    2478:	6878      	ldr	r0, [r7, #4]
    247a:	4b56      	ldr	r3, [pc, #344]	; (25d4 <_usart_init+0x19c>)
    247c:	4798      	blx	r3
    247e:	4603      	mov	r3, r0
    2480:	2b00      	cmp	r3, #0
    2482:	d006      	beq.n	2492 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2484:	6878      	ldr	r0, [r7, #4]
    2486:	4b54      	ldr	r3, [pc, #336]	; (25d8 <_usart_init+0x1a0>)
    2488:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    248a:	2102      	movs	r1, #2
    248c:	6878      	ldr	r0, [r7, #4]
    248e:	4b53      	ldr	r3, [pc, #332]	; (25dc <_usart_init+0x1a4>)
    2490:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2492:	68bb      	ldr	r3, [r7, #8]
    2494:	f043 0301 	orr.w	r3, r3, #1
    2498:	4619      	mov	r1, r3
    249a:	6878      	ldr	r0, [r7, #4]
    249c:	4b50      	ldr	r3, [pc, #320]	; (25e0 <_usart_init+0x1a8>)
    249e:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    24a0:	2101      	movs	r1, #1
    24a2:	6878      	ldr	r0, [r7, #4]
    24a4:	4b4d      	ldr	r3, [pc, #308]	; (25dc <_usart_init+0x1a4>)
    24a6:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    24a8:	7bfa      	ldrb	r2, [r7, #15]
    24aa:	4949      	ldr	r1, [pc, #292]	; (25d0 <_usart_init+0x198>)
    24ac:	4613      	mov	r3, r2
    24ae:	005b      	lsls	r3, r3, #1
    24b0:	4413      	add	r3, r2
    24b2:	00db      	lsls	r3, r3, #3
    24b4:	440b      	add	r3, r1
    24b6:	3304      	adds	r3, #4
    24b8:	681b      	ldr	r3, [r3, #0]
    24ba:	4619      	mov	r1, r3
    24bc:	6878      	ldr	r0, [r7, #4]
    24be:	4b48      	ldr	r3, [pc, #288]	; (25e0 <_usart_init+0x1a8>)
    24c0:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    24c2:	7bfa      	ldrb	r2, [r7, #15]
    24c4:	4942      	ldr	r1, [pc, #264]	; (25d0 <_usart_init+0x198>)
    24c6:	4613      	mov	r3, r2
    24c8:	005b      	lsls	r3, r3, #1
    24ca:	4413      	add	r3, r2
    24cc:	00db      	lsls	r3, r3, #3
    24ce:	440b      	add	r3, r1
    24d0:	3308      	adds	r3, #8
    24d2:	681b      	ldr	r3, [r3, #0]
    24d4:	4619      	mov	r1, r3
    24d6:	6878      	ldr	r0, [r7, #4]
    24d8:	4b42      	ldr	r3, [pc, #264]	; (25e4 <_usart_init+0x1ac>)
    24da:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    24dc:	7bfa      	ldrb	r2, [r7, #15]
    24de:	493c      	ldr	r1, [pc, #240]	; (25d0 <_usart_init+0x198>)
    24e0:	4613      	mov	r3, r2
    24e2:	005b      	lsls	r3, r3, #1
    24e4:	4413      	add	r3, r2
    24e6:	00db      	lsls	r3, r3, #3
    24e8:	440b      	add	r3, r1
    24ea:	330c      	adds	r3, #12
    24ec:	681b      	ldr	r3, [r3, #0]
    24ee:	4619      	mov	r1, r3
    24f0:	6878      	ldr	r0, [r7, #4]
    24f2:	4b3d      	ldr	r3, [pc, #244]	; (25e8 <_usart_init+0x1b0>)
    24f4:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    24f6:	7bfa      	ldrb	r2, [r7, #15]
    24f8:	4935      	ldr	r1, [pc, #212]	; (25d0 <_usart_init+0x198>)
    24fa:	4613      	mov	r3, r2
    24fc:	005b      	lsls	r3, r3, #1
    24fe:	4413      	add	r3, r2
    2500:	00db      	lsls	r3, r3, #3
    2502:	440b      	add	r3, r1
    2504:	3304      	adds	r3, #4
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    250c:	2b00      	cmp	r3, #0
    250e:	d10c      	bne.n	252a <_usart_init+0xf2>
    2510:	7bfa      	ldrb	r2, [r7, #15]
    2512:	492f      	ldr	r1, [pc, #188]	; (25d0 <_usart_init+0x198>)
    2514:	4613      	mov	r3, r2
    2516:	005b      	lsls	r3, r3, #1
    2518:	4413      	add	r3, r2
    251a:	00db      	lsls	r3, r3, #3
    251c:	440b      	add	r3, r1
    251e:	3304      	adds	r3, #4
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    2526:	2b00      	cmp	r3, #0
    2528:	d022      	beq.n	2570 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    252a:	7bfa      	ldrb	r2, [r7, #15]
    252c:	4928      	ldr	r1, [pc, #160]	; (25d0 <_usart_init+0x198>)
    252e:	4613      	mov	r3, r2
    2530:	005b      	lsls	r3, r3, #1
    2532:	4413      	add	r3, r2
    2534:	00db      	lsls	r3, r3, #3
    2536:	440b      	add	r3, r1
    2538:	3310      	adds	r3, #16
    253a:	881b      	ldrh	r3, [r3, #0]
    253c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    2540:	b299      	uxth	r1, r3
    2542:	687a      	ldr	r2, [r7, #4]
    2544:	8993      	ldrh	r3, [r2, #12]
    2546:	f361 030c 	bfi	r3, r1, #0, #13
    254a:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    254c:	7bfa      	ldrb	r2, [r7, #15]
    254e:	4920      	ldr	r1, [pc, #128]	; (25d0 <_usart_init+0x198>)
    2550:	4613      	mov	r3, r2
    2552:	005b      	lsls	r3, r3, #1
    2554:	4413      	add	r3, r2
    2556:	00db      	lsls	r3, r3, #3
    2558:	440b      	add	r3, r1
    255a:	3312      	adds	r3, #18
    255c:	781b      	ldrb	r3, [r3, #0]
    255e:	f003 0307 	and.w	r3, r3, #7
    2562:	b2d9      	uxtb	r1, r3
    2564:	687a      	ldr	r2, [r7, #4]
    2566:	8993      	ldrh	r3, [r2, #12]
    2568:	f361 334f 	bfi	r3, r1, #13, #3
    256c:	8193      	strh	r3, [r2, #12]
    256e:	e00c      	b.n	258a <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2570:	7bfa      	ldrb	r2, [r7, #15]
    2572:	4917      	ldr	r1, [pc, #92]	; (25d0 <_usart_init+0x198>)
    2574:	4613      	mov	r3, r2
    2576:	005b      	lsls	r3, r3, #1
    2578:	4413      	add	r3, r2
    257a:	00db      	lsls	r3, r3, #3
    257c:	440b      	add	r3, r1
    257e:	3310      	adds	r3, #16
    2580:	881b      	ldrh	r3, [r3, #0]
    2582:	4619      	mov	r1, r3
    2584:	6878      	ldr	r0, [r7, #4]
    2586:	4b19      	ldr	r3, [pc, #100]	; (25ec <_usart_init+0x1b4>)
    2588:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    258a:	7bfa      	ldrb	r2, [r7, #15]
    258c:	4910      	ldr	r1, [pc, #64]	; (25d0 <_usart_init+0x198>)
    258e:	4613      	mov	r3, r2
    2590:	005b      	lsls	r3, r3, #1
    2592:	4413      	add	r3, r2
    2594:	00db      	lsls	r3, r3, #3
    2596:	440b      	add	r3, r1
    2598:	3313      	adds	r3, #19
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	4619      	mov	r1, r3
    259e:	6878      	ldr	r0, [r7, #4]
    25a0:	4b13      	ldr	r3, [pc, #76]	; (25f0 <_usart_init+0x1b8>)
    25a2:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    25a4:	7bfa      	ldrb	r2, [r7, #15]
    25a6:	490a      	ldr	r1, [pc, #40]	; (25d0 <_usart_init+0x198>)
    25a8:	4613      	mov	r3, r2
    25aa:	005b      	lsls	r3, r3, #1
    25ac:	4413      	add	r3, r2
    25ae:	00db      	lsls	r3, r3, #3
    25b0:	440b      	add	r3, r1
    25b2:	3314      	adds	r3, #20
    25b4:	781b      	ldrb	r3, [r3, #0]
    25b6:	4619      	mov	r1, r3
    25b8:	6878      	ldr	r0, [r7, #4]
    25ba:	4b0e      	ldr	r3, [pc, #56]	; (25f4 <_usart_init+0x1bc>)
    25bc:	4798      	blx	r3

	return ERR_NONE;
    25be:	2300      	movs	r3, #0
}
    25c0:	4618      	mov	r0, r3
    25c2:	3710      	adds	r7, #16
    25c4:	46bd      	mov	sp, r7
    25c6:	bd80      	pop	{r7, pc}
    25c8:	00002391 	.word	0x00002391
    25cc:	00001c4d 	.word	0x00001c4d
    25d0:	20000000 	.word	0x20000000
    25d4:	00001f09 	.word	0x00001f09
    25d8:	00001ee1 	.word	0x00001ee1
    25dc:	00001c29 	.word	0x00001c29
    25e0:	00001f39 	.word	0x00001f39
    25e4:	00001f5d 	.word	0x00001f5d
    25e8:	00001f81 	.word	0x00001f81
    25ec:	00001f9d 	.word	0x00001f9d
    25f0:	00001fbb 	.word	0x00001fbb
    25f4:	0000200d 	.word	0x0000200d

000025f8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b082      	sub	sp, #8
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2600:	6878      	ldr	r0, [r7, #4]
    2602:	4b05      	ldr	r3, [pc, #20]	; (2618 <_sercom_get_irq_num+0x20>)
    2604:	4798      	blx	r3
    2606:	4603      	mov	r3, r0
    2608:	009b      	lsls	r3, r3, #2
    260a:	b2db      	uxtb	r3, r3
    260c:	332e      	adds	r3, #46	; 0x2e
    260e:	b2db      	uxtb	r3, r3
}
    2610:	4618      	mov	r0, r3
    2612:	3708      	adds	r7, #8
    2614:	46bd      	mov	sp, r7
    2616:	bd80      	pop	{r7, pc}
    2618:	00002199 	.word	0x00002199

0000261c <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    261c:	b580      	push	{r7, lr}
    261e:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    2620:	4b03      	ldr	r3, [pc, #12]	; (2630 <SERCOM0_0_Handler+0x14>)
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	4618      	mov	r0, r3
    2626:	4b03      	ldr	r3, [pc, #12]	; (2634 <SERCOM0_0_Handler+0x18>)
    2628:	4798      	blx	r3
}
    262a:	bf00      	nop
    262c:	bd80      	pop	{r7, pc}
    262e:	bf00      	nop
    2630:	20000074 	.word	0x20000074
    2634:	00002291 	.word	0x00002291

00002638 <SERCOM0_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    2638:	b580      	push	{r7, lr}
    263a:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    263c:	4b03      	ldr	r3, [pc, #12]	; (264c <SERCOM0_1_Handler+0x14>)
    263e:	681b      	ldr	r3, [r3, #0]
    2640:	4618      	mov	r0, r3
    2642:	4b03      	ldr	r3, [pc, #12]	; (2650 <SERCOM0_1_Handler+0x18>)
    2644:	4798      	blx	r3
}
    2646:	bf00      	nop
    2648:	bd80      	pop	{r7, pc}
    264a:	bf00      	nop
    264c:	20000074 	.word	0x20000074
    2650:	00002291 	.word	0x00002291

00002654 <SERCOM0_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    2654:	b580      	push	{r7, lr}
    2656:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    2658:	4b03      	ldr	r3, [pc, #12]	; (2668 <SERCOM0_2_Handler+0x14>)
    265a:	681b      	ldr	r3, [r3, #0]
    265c:	4618      	mov	r0, r3
    265e:	4b03      	ldr	r3, [pc, #12]	; (266c <SERCOM0_2_Handler+0x18>)
    2660:	4798      	blx	r3
}
    2662:	bf00      	nop
    2664:	bd80      	pop	{r7, pc}
    2666:	bf00      	nop
    2668:	20000074 	.word	0x20000074
    266c:	00002291 	.word	0x00002291

00002670 <SERCOM0_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    2670:	b580      	push	{r7, lr}
    2672:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    2674:	4b03      	ldr	r3, [pc, #12]	; (2684 <SERCOM0_3_Handler+0x14>)
    2676:	681b      	ldr	r3, [r3, #0]
    2678:	4618      	mov	r0, r3
    267a:	4b03      	ldr	r3, [pc, #12]	; (2688 <SERCOM0_3_Handler+0x18>)
    267c:	4798      	blx	r3
}
    267e:	bf00      	nop
    2680:	bd80      	pop	{r7, pc}
    2682:	bf00      	nop
    2684:	20000074 	.word	0x20000074
    2688:	00002291 	.word	0x00002291

0000268c <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    268c:	b580      	push	{r7, lr}
    268e:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2690:	4b03      	ldr	r3, [pc, #12]	; (26a0 <SERCOM2_0_Handler+0x14>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	4618      	mov	r0, r3
    2696:	4b03      	ldr	r3, [pc, #12]	; (26a4 <SERCOM2_0_Handler+0x18>)
    2698:	4798      	blx	r3
}
    269a:	bf00      	nop
    269c:	bd80      	pop	{r7, pc}
    269e:	bf00      	nop
    26a0:	20000078 	.word	0x20000078
    26a4:	00002291 	.word	0x00002291

000026a8 <SERCOM2_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    26a8:	b580      	push	{r7, lr}
    26aa:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    26ac:	4b03      	ldr	r3, [pc, #12]	; (26bc <SERCOM2_1_Handler+0x14>)
    26ae:	681b      	ldr	r3, [r3, #0]
    26b0:	4618      	mov	r0, r3
    26b2:	4b03      	ldr	r3, [pc, #12]	; (26c0 <SERCOM2_1_Handler+0x18>)
    26b4:	4798      	blx	r3
}
    26b6:	bf00      	nop
    26b8:	bd80      	pop	{r7, pc}
    26ba:	bf00      	nop
    26bc:	20000078 	.word	0x20000078
    26c0:	00002291 	.word	0x00002291

000026c4 <SERCOM2_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    26c4:	b580      	push	{r7, lr}
    26c6:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    26c8:	4b03      	ldr	r3, [pc, #12]	; (26d8 <SERCOM2_2_Handler+0x14>)
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	4618      	mov	r0, r3
    26ce:	4b03      	ldr	r3, [pc, #12]	; (26dc <SERCOM2_2_Handler+0x18>)
    26d0:	4798      	blx	r3
}
    26d2:	bf00      	nop
    26d4:	bd80      	pop	{r7, pc}
    26d6:	bf00      	nop
    26d8:	20000078 	.word	0x20000078
    26dc:	00002291 	.word	0x00002291

000026e0 <SERCOM2_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    26e4:	4b03      	ldr	r3, [pc, #12]	; (26f4 <SERCOM2_3_Handler+0x14>)
    26e6:	681b      	ldr	r3, [r3, #0]
    26e8:	4618      	mov	r0, r3
    26ea:	4b03      	ldr	r3, [pc, #12]	; (26f8 <SERCOM2_3_Handler+0x18>)
    26ec:	4798      	blx	r3
}
    26ee:	bf00      	nop
    26f0:	bd80      	pop	{r7, pc}
    26f2:	bf00      	nop
    26f4:	20000078 	.word	0x20000078
    26f8:	00002291 	.word	0x00002291

000026fc <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    26fc:	b480      	push	{r7}
    26fe:	b083      	sub	sp, #12
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2704:	4b06      	ldr	r3, [pc, #24]	; (2720 <_system_time_init+0x24>)
    2706:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    270a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    270c:	4b04      	ldr	r3, [pc, #16]	; (2720 <_system_time_init+0x24>)
    270e:	2205      	movs	r2, #5
    2710:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    2712:	bf00      	nop
    2714:	370c      	adds	r7, #12
    2716:	46bd      	mov	sp, r7
    2718:	f85d 7b04 	ldr.w	r7, [sp], #4
    271c:	4770      	bx	lr
    271e:	bf00      	nop
    2720:	e000e010 	.word	0xe000e010

00002724 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2724:	b580      	push	{r7, lr}
    2726:	b082      	sub	sp, #8
    2728:	af00      	add	r7, sp, #0
    272a:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    272c:	6878      	ldr	r0, [r7, #4]
    272e:	4b03      	ldr	r3, [pc, #12]	; (273c <_delay_init+0x18>)
    2730:	4798      	blx	r3
}
    2732:	bf00      	nop
    2734:	3708      	adds	r7, #8
    2736:	46bd      	mov	sp, r7
    2738:	bd80      	pop	{r7, pc}
    273a:	bf00      	nop
    273c:	000026fd 	.word	0x000026fd

00002740 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2740:	b480      	push	{r7}
    2742:	b083      	sub	sp, #12
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
    2748:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    274a:	bf00      	nop
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	689a      	ldr	r2, [r3, #8]
    2750:	683b      	ldr	r3, [r7, #0]
    2752:	4013      	ands	r3, r2
    2754:	2b00      	cmp	r3, #0
    2756:	d1f9      	bne.n	274c <hri_tcc_wait_for_sync+0xc>
	};
}
    2758:	bf00      	nop
    275a:	370c      	adds	r7, #12
    275c:	46bd      	mov	sp, r7
    275e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2762:	4770      	bx	lr

00002764 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2764:	b480      	push	{r7}
    2766:	b083      	sub	sp, #12
    2768:	af00      	add	r7, sp, #0
    276a:	6078      	str	r0, [r7, #4]
    276c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	689a      	ldr	r2, [r3, #8]
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	4013      	ands	r3, r2
    2776:	2b00      	cmp	r3, #0
    2778:	bf14      	ite	ne
    277a:	2301      	movne	r3, #1
    277c:	2300      	moveq	r3, #0
    277e:	b2db      	uxtb	r3, r3
}
    2780:	4618      	mov	r0, r3
    2782:	370c      	adds	r7, #12
    2784:	46bd      	mov	sp, r7
    2786:	f85d 7b04 	ldr.w	r7, [sp], #4
    278a:	4770      	bx	lr

0000278c <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    278c:	b580      	push	{r7, lr}
    278e:	b084      	sub	sp, #16
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
    2794:	460b      	mov	r3, r1
    2796:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    279e:	68fb      	ldr	r3, [r7, #12]
    27a0:	f023 0302 	bic.w	r3, r3, #2
    27a4:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    27a6:	78fb      	ldrb	r3, [r7, #3]
    27a8:	005b      	lsls	r3, r3, #1
    27aa:	461a      	mov	r2, r3
    27ac:	68fb      	ldr	r3, [r7, #12]
    27ae:	4313      	orrs	r3, r2
    27b0:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	68fa      	ldr	r2, [r7, #12]
    27b6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    27b8:	2103      	movs	r1, #3
    27ba:	6878      	ldr	r0, [r7, #4]
    27bc:	4b02      	ldr	r3, [pc, #8]	; (27c8 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    27be:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    27c0:	bf00      	nop
    27c2:	3710      	adds	r7, #16
    27c4:	46bd      	mov	sp, r7
    27c6:	bd80      	pop	{r7, pc}
    27c8:	00002741 	.word	0x00002741

000027cc <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	b082      	sub	sp, #8
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	f023 0202 	bic.w	r2, r3, #2
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    27e0:	2103      	movs	r1, #3
    27e2:	6878      	ldr	r0, [r7, #4]
    27e4:	4b02      	ldr	r3, [pc, #8]	; (27f0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    27e6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    27e8:	bf00      	nop
    27ea:	3708      	adds	r7, #8
    27ec:	46bd      	mov	sp, r7
    27ee:	bd80      	pop	{r7, pc}
    27f0:	00002741 	.word	0x00002741

000027f4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b084      	sub	sp, #16
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
    27fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    27fe:	2103      	movs	r1, #3
    2800:	6878      	ldr	r0, [r7, #4]
    2802:	4b07      	ldr	r3, [pc, #28]	; (2820 <hri_tcc_get_CTRLA_reg+0x2c>)
    2804:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	681b      	ldr	r3, [r3, #0]
    280a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    280c:	68fa      	ldr	r2, [r7, #12]
    280e:	683b      	ldr	r3, [r7, #0]
    2810:	4013      	ands	r3, r2
    2812:	60fb      	str	r3, [r7, #12]
	return tmp;
    2814:	68fb      	ldr	r3, [r7, #12]
}
    2816:	4618      	mov	r0, r3
    2818:	3710      	adds	r7, #16
    281a:	46bd      	mov	sp, r7
    281c:	bd80      	pop	{r7, pc}
    281e:	bf00      	nop
    2820:	00002741 	.word	0x00002741

00002824 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    2824:	b580      	push	{r7, lr}
    2826:	b082      	sub	sp, #8
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
    282c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	683a      	ldr	r2, [r7, #0]
    2832:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2834:	2103      	movs	r1, #3
    2836:	6878      	ldr	r0, [r7, #4]
    2838:	4b02      	ldr	r3, [pc, #8]	; (2844 <hri_tcc_write_CTRLA_reg+0x20>)
    283a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    283c:	bf00      	nop
    283e:	3708      	adds	r7, #8
    2840:	46bd      	mov	sp, r7
    2842:	bd80      	pop	{r7, pc}
    2844:	00002741 	.word	0x00002741

00002848 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    2848:	b580      	push	{r7, lr}
    284a:	b082      	sub	sp, #8
    284c:	af00      	add	r7, sp, #0
    284e:	6078      	str	r0, [r7, #4]
    2850:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	683a      	ldr	r2, [r7, #0]
    2856:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    2858:	f643 71ff 	movw	r1, #16383	; 0x3fff
    285c:	6878      	ldr	r0, [r7, #4]
    285e:	4b03      	ldr	r3, [pc, #12]	; (286c <hri_tcc_write_WAVE_reg+0x24>)
    2860:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2862:	bf00      	nop
    2864:	3708      	adds	r7, #8
    2866:	46bd      	mov	sp, r7
    2868:	bd80      	pop	{r7, pc}
    286a:	bf00      	nop
    286c:	00002741 	.word	0x00002741

00002870 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    2870:	b580      	push	{r7, lr}
    2872:	b082      	sub	sp, #8
    2874:	af00      	add	r7, sp, #0
    2876:	6078      	str	r0, [r7, #4]
    2878:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	683a      	ldr	r2, [r7, #0]
    287e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2880:	2180      	movs	r1, #128	; 0x80
    2882:	6878      	ldr	r0, [r7, #4]
    2884:	4b02      	ldr	r3, [pc, #8]	; (2890 <hri_tcc_write_PER_reg+0x20>)
    2886:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2888:	bf00      	nop
    288a:	3708      	adds	r7, #8
    288c:	46bd      	mov	sp, r7
    288e:	bd80      	pop	{r7, pc}
    2890:	00002741 	.word	0x00002741

00002894 <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    2894:	b580      	push	{r7, lr}
    2896:	b084      	sub	sp, #16
    2898:	af00      	add	r7, sp, #0
    289a:	60f8      	str	r0, [r7, #12]
    289c:	460b      	mov	r3, r1
    289e:	607a      	str	r2, [r7, #4]
    28a0:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    28a2:	7afb      	ldrb	r3, [r7, #11]
    28a4:	68fa      	ldr	r2, [r7, #12]
    28a6:	3310      	adds	r3, #16
    28a8:	009b      	lsls	r3, r3, #2
    28aa:	4413      	add	r3, r2
    28ac:	687a      	ldr	r2, [r7, #4]
    28ae:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    28b0:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    28b4:	68f8      	ldr	r0, [r7, #12]
    28b6:	4b03      	ldr	r3, [pc, #12]	; (28c4 <hri_tcc_write_CC_reg+0x30>)
    28b8:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    28ba:	bf00      	nop
    28bc:	3710      	adds	r7, #16
    28be:	46bd      	mov	sp, r7
    28c0:	bd80      	pop	{r7, pc}
    28c2:	bf00      	nop
    28c4:	00002741 	.word	0x00002741

000028c8 <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    28c8:	b580      	push	{r7, lr}
    28ca:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    28cc:	2101      	movs	r1, #1
    28ce:	4820      	ldr	r0, [pc, #128]	; (2950 <PWM_0_init+0x88>)
    28d0:	4b20      	ldr	r3, [pc, #128]	; (2954 <PWM_0_init+0x8c>)
    28d2:	4798      	blx	r3
    28d4:	4603      	mov	r3, r0
    28d6:	f083 0301 	eor.w	r3, r3, #1
    28da:	b2db      	uxtb	r3, r3
    28dc:	2b00      	cmp	r3, #0
    28de:	d011      	beq.n	2904 <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    28e0:	2102      	movs	r1, #2
    28e2:	481b      	ldr	r0, [pc, #108]	; (2950 <PWM_0_init+0x88>)
    28e4:	4b1c      	ldr	r3, [pc, #112]	; (2958 <PWM_0_init+0x90>)
    28e6:	4798      	blx	r3
    28e8:	4603      	mov	r3, r0
    28ea:	2b00      	cmp	r3, #0
    28ec:	d006      	beq.n	28fc <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    28ee:	4818      	ldr	r0, [pc, #96]	; (2950 <PWM_0_init+0x88>)
    28f0:	4b1a      	ldr	r3, [pc, #104]	; (295c <PWM_0_init+0x94>)
    28f2:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    28f4:	2102      	movs	r1, #2
    28f6:	4816      	ldr	r0, [pc, #88]	; (2950 <PWM_0_init+0x88>)
    28f8:	4b19      	ldr	r3, [pc, #100]	; (2960 <PWM_0_init+0x98>)
    28fa:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    28fc:	2101      	movs	r1, #1
    28fe:	4814      	ldr	r0, [pc, #80]	; (2950 <PWM_0_init+0x88>)
    2900:	4b18      	ldr	r3, [pc, #96]	; (2964 <PWM_0_init+0x9c>)
    2902:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    2904:	2101      	movs	r1, #1
    2906:	4812      	ldr	r0, [pc, #72]	; (2950 <PWM_0_init+0x88>)
    2908:	4b15      	ldr	r3, [pc, #84]	; (2960 <PWM_0_init+0x98>)
    290a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    290c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2910:	480f      	ldr	r0, [pc, #60]	; (2950 <PWM_0_init+0x88>)
    2912:	4b14      	ldr	r3, [pc, #80]	; (2964 <PWM_0_init+0x9c>)
    2914:	4798      	blx	r3

	// hri_tcc_write_DBGCTRL_reg(TCC0,0 << TCC_DBGCTRL_FDDBD_Pos /* Fault Detection on Debug Break Detection: disabled
	// */
	//		 | 0); /* Run in debug: 0 */

	hri_tcc_write_CC_reg(TCC0, 0, 0xffff); /* Channel 0 Compare/Capture Value: 0xffff */
    2916:	f64f 72ff 	movw	r2, #65535	; 0xffff
    291a:	2100      	movs	r1, #0
    291c:	480c      	ldr	r0, [pc, #48]	; (2950 <PWM_0_init+0x88>)
    291e:	4b12      	ldr	r3, [pc, #72]	; (2968 <PWM_0_init+0xa0>)
    2920:	4798      	blx	r3

	hri_tcc_write_CC_reg(TCC0, 1, 0xffff); /* Channel 1 Compare/Capture Value: 0xffff */
    2922:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2926:	2101      	movs	r1, #1
    2928:	4809      	ldr	r0, [pc, #36]	; (2950 <PWM_0_init+0x88>)
    292a:	4b0f      	ldr	r3, [pc, #60]	; (2968 <PWM_0_init+0xa0>)
    292c:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    292e:	2102      	movs	r1, #2
    2930:	4807      	ldr	r0, [pc, #28]	; (2950 <PWM_0_init+0x88>)
    2932:	4b0e      	ldr	r3, [pc, #56]	; (296c <PWM_0_init+0xa4>)
    2934:	4798      	blx	r3
	//		 | 0 << TCC_PATT_PGE3_Pos /* Pattern Generator 3 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE2_Pos /* Pattern Generator 2 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE1_Pos /* Pattern Generator 1 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE0_Pos); /* Pattern Generator 0 Output Enable: disabled */

	hri_tcc_write_PER_reg(TCC0, 0xffff); /*  Period Value: 0xffff */
    2936:	f64f 71ff 	movw	r1, #65535	; 0xffff
    293a:	4805      	ldr	r0, [pc, #20]	; (2950 <PWM_0_init+0x88>)
    293c:	4b0c      	ldr	r3, [pc, #48]	; (2970 <PWM_0_init+0xa8>)
    293e:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    2940:	2101      	movs	r1, #1
    2942:	4803      	ldr	r0, [pc, #12]	; (2950 <PWM_0_init+0x88>)
    2944:	4b0b      	ldr	r3, [pc, #44]	; (2974 <PWM_0_init+0xac>)
    2946:	4798      	blx	r3

	return 0;
    2948:	2300      	movs	r3, #0
}
    294a:	4618      	mov	r0, r3
    294c:	bd80      	pop	{r7, pc}
    294e:	bf00      	nop
    2950:	41016000 	.word	0x41016000
    2954:	00002765 	.word	0x00002765
    2958:	000027f5 	.word	0x000027f5
    295c:	000027cd 	.word	0x000027cd
    2960:	00002741 	.word	0x00002741
    2964:	00002825 	.word	0x00002825
    2968:	00002895 	.word	0x00002895
    296c:	00002849 	.word	0x00002849
    2970:	00002871 	.word	0x00002871
    2974:	0000278d 	.word	0x0000278d

00002978 <rx_cb_USART_0>:

struct io_descriptor *io1;
struct io_descriptor *io2;

static void rx_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
    2978:	b580      	push	{r7, lr}
    297a:	b082      	sub	sp, #8
    297c:	af00      	add	r7, sp, #0
    297e:	6078      	str	r0, [r7, #4]
	//Write to the UART_TX channel to drive the transistor
	io_write(io2,&buff,1);
    2980:	4b05      	ldr	r3, [pc, #20]	; (2998 <rx_cb_USART_0+0x20>)
    2982:	681b      	ldr	r3, [r3, #0]
    2984:	2201      	movs	r2, #1
    2986:	4905      	ldr	r1, [pc, #20]	; (299c <rx_cb_USART_0+0x24>)
    2988:	4618      	mov	r0, r3
    298a:	4b05      	ldr	r3, [pc, #20]	; (29a0 <rx_cb_USART_0+0x28>)
    298c:	4798      	blx	r3
}
    298e:	bf00      	nop
    2990:	3708      	adds	r7, #8
    2992:	46bd      	mov	sp, r7
    2994:	bd80      	pop	{r7, pc}
    2996:	bf00      	nop
    2998:	20000178 	.word	0x20000178
    299c:	200000a4 	.word	0x200000a4
    29a0:	00000cd5 	.word	0x00000cd5

000029a4 <rx_cb_USART_1>:


static void rx_cb_USART_1(const struct usart_async_descriptor *const io_descr)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b082      	sub	sp, #8
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
	/* Receive completed */
	//Write the Ecco to the EDBG terminal
	io_write(io1, &in_buff, 1);
    29ac:	4b05      	ldr	r3, [pc, #20]	; (29c4 <rx_cb_USART_1+0x20>)
    29ae:	681b      	ldr	r3, [r3, #0]
    29b0:	2201      	movs	r2, #1
    29b2:	4905      	ldr	r1, [pc, #20]	; (29c8 <rx_cb_USART_1+0x24>)
    29b4:	4618      	mov	r0, r3
    29b6:	4b05      	ldr	r3, [pc, #20]	; (29cc <rx_cb_USART_1+0x28>)
    29b8:	4798      	blx	r3
}
    29ba:	bf00      	nop
    29bc:	3708      	adds	r7, #8
    29be:	46bd      	mov	sp, r7
    29c0:	bd80      	pop	{r7, pc}
    29c2:	bf00      	nop
    29c4:	20000174 	.word	0x20000174
    29c8:	200000a5 	.word	0x200000a5
    29cc:	00000cd5 	.word	0x00000cd5

000029d0 <main>:

int main(void){
    29d0:	b580      	push	{r7, lr}
    29d2:	af00      	add	r7, sp, #0
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    29d4:	4b18      	ldr	r3, [pc, #96]	; (2a38 <main+0x68>)
    29d6:	4798      	blx	r3
	/* Initialization of the UART communication */
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_USART_0);
    29d8:	4a18      	ldr	r2, [pc, #96]	; (2a3c <main+0x6c>)
    29da:	2100      	movs	r1, #0
    29dc:	4818      	ldr	r0, [pc, #96]	; (2a40 <main+0x70>)
    29de:	4b19      	ldr	r3, [pc, #100]	; (2a44 <main+0x74>)
    29e0:	4798      	blx	r3
	usart_async_get_io_descriptor(&USART_0, &io1);
    29e2:	4919      	ldr	r1, [pc, #100]	; (2a48 <main+0x78>)
    29e4:	4816      	ldr	r0, [pc, #88]	; (2a40 <main+0x70>)
    29e6:	4b19      	ldr	r3, [pc, #100]	; (2a4c <main+0x7c>)
    29e8:	4798      	blx	r3
	usart_async_enable(&USART_0);
    29ea:	4815      	ldr	r0, [pc, #84]	; (2a40 <main+0x70>)
    29ec:	4b18      	ldr	r3, [pc, #96]	; (2a50 <main+0x80>)
    29ee:	4798      	blx	r3
	
	/* Initialization of the UART communication */
 	usart_async_register_callback(&USART_1, USART_ASYNC_RXC_CB, rx_cb_USART_1);
    29f0:	4a18      	ldr	r2, [pc, #96]	; (2a54 <main+0x84>)
    29f2:	2100      	movs	r1, #0
    29f4:	4818      	ldr	r0, [pc, #96]	; (2a58 <main+0x88>)
    29f6:	4b13      	ldr	r3, [pc, #76]	; (2a44 <main+0x74>)
    29f8:	4798      	blx	r3
 	usart_async_get_io_descriptor(&USART_1, &io2);
    29fa:	4918      	ldr	r1, [pc, #96]	; (2a5c <main+0x8c>)
    29fc:	4816      	ldr	r0, [pc, #88]	; (2a58 <main+0x88>)
    29fe:	4b13      	ldr	r3, [pc, #76]	; (2a4c <main+0x7c>)
    2a00:	4798      	blx	r3
 	usart_async_enable(&USART_1);
    2a02:	4815      	ldr	r0, [pc, #84]	; (2a58 <main+0x88>)
    2a04:	4b12      	ldr	r3, [pc, #72]	; (2a50 <main+0x80>)
    2a06:	4798      	blx	r3
	 
	tcc_set_period_value(TCC0, 0x4E*3/2);  
    2a08:	2175      	movs	r1, #117	; 0x75
    2a0a:	4815      	ldr	r0, [pc, #84]	; (2a60 <main+0x90>)
    2a0c:	4b15      	ldr	r3, [pc, #84]	; (2a64 <main+0x94>)
    2a0e:	4798      	blx	r3
	tcc_set_compare_value(TCC0, 0x4E*3/4, 0);
    2a10:	2200      	movs	r2, #0
    2a12:	213a      	movs	r1, #58	; 0x3a
    2a14:	4812      	ldr	r0, [pc, #72]	; (2a60 <main+0x90>)
    2a16:	4b14      	ldr	r3, [pc, #80]	; (2a68 <main+0x98>)
    2a18:	4798      	blx	r3
	
	while (1) {
		//Read input command from terminal
		io_read(io1,&buff,1);
    2a1a:	4b0b      	ldr	r3, [pc, #44]	; (2a48 <main+0x78>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	2201      	movs	r2, #1
    2a20:	4912      	ldr	r1, [pc, #72]	; (2a6c <main+0x9c>)
    2a22:	4618      	mov	r0, r3
    2a24:	4b12      	ldr	r3, [pc, #72]	; (2a70 <main+0xa0>)
    2a26:	4798      	blx	r3
		
		//Read CMOS output of the phototransistor output
		io_read(io2,&in_buff,1);
    2a28:	4b0c      	ldr	r3, [pc, #48]	; (2a5c <main+0x8c>)
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	2201      	movs	r2, #1
    2a2e:	4911      	ldr	r1, [pc, #68]	; (2a74 <main+0xa4>)
    2a30:	4618      	mov	r0, r3
    2a32:	4b0f      	ldr	r3, [pc, #60]	; (2a70 <main+0xa0>)
    2a34:	4798      	blx	r3
		io_read(io1,&buff,1);
    2a36:	e7f0      	b.n	2a1a <main+0x4a>
    2a38:	000002d1 	.word	0x000002d1
    2a3c:	00002979 	.word	0x00002979
    2a40:	200000a8 	.word	0x200000a8
    2a44:	000010c5 	.word	0x000010c5
    2a48:	20000174 	.word	0x20000174
    2a4c:	00001081 	.word	0x00001081
    2a50:	00001041 	.word	0x00001041
    2a54:	000029a5 	.word	0x000029a5
    2a58:	200000f8 	.word	0x200000f8
    2a5c:	20000178 	.word	0x20000178
    2a60:	41016000 	.word	0x41016000
    2a64:	00002b51 	.word	0x00002b51
    2a68:	00002b11 	.word	0x00002b11
    2a6c:	200000a4 	.word	0x200000a4
    2a70:	00000d25 	.word	0x00000d25
    2a74:	200000a5 	.word	0x200000a5

00002a78 <hri_tcc_wait_for_sync>:
{
    2a78:	b480      	push	{r7}
    2a7a:	b083      	sub	sp, #12
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
    2a80:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a82:	bf00      	nop
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	689a      	ldr	r2, [r3, #8]
    2a88:	683b      	ldr	r3, [r7, #0]
    2a8a:	4013      	ands	r3, r2
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d1f9      	bne.n	2a84 <hri_tcc_wait_for_sync+0xc>
}
    2a90:	bf00      	nop
    2a92:	370c      	adds	r7, #12
    2a94:	46bd      	mov	sp, r7
    2a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9a:	4770      	bx	lr

00002a9c <hri_tcc_clear_INTFLAG_reg>:
{
    2a9c:	b480      	push	{r7}
    2a9e:	b083      	sub	sp, #12
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	6078      	str	r0, [r7, #4]
    2aa4:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	683a      	ldr	r2, [r7, #0]
    2aaa:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2aac:	bf00      	nop
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr

00002ab8 <hri_tcc_write_PER_reg>:
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->PER.reg = data;
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	683a      	ldr	r2, [r7, #0]
    2ac6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2ac8:	2180      	movs	r1, #128	; 0x80
    2aca:	6878      	ldr	r0, [r7, #4]
    2acc:	4b02      	ldr	r3, [pc, #8]	; (2ad8 <hri_tcc_write_PER_reg+0x20>)
    2ace:	4798      	blx	r3
}
    2ad0:	bf00      	nop
    2ad2:	3708      	adds	r7, #8
    2ad4:	46bd      	mov	sp, r7
    2ad6:	bd80      	pop	{r7, pc}
    2ad8:	00002a79 	.word	0x00002a79

00002adc <hri_tcc_write_CC_reg>:
{
    2adc:	b580      	push	{r7, lr}
    2ade:	b084      	sub	sp, #16
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	60f8      	str	r0, [r7, #12]
    2ae4:	460b      	mov	r3, r1
    2ae6:	607a      	str	r2, [r7, #4]
    2ae8:	72fb      	strb	r3, [r7, #11]
	((Tcc *)hw)->CC[index].reg = data;
    2aea:	7afb      	ldrb	r3, [r7, #11]
    2aec:	68fa      	ldr	r2, [r7, #12]
    2aee:	3310      	adds	r3, #16
    2af0:	009b      	lsls	r3, r3, #2
    2af2:	4413      	add	r3, r2
    2af4:	687a      	ldr	r2, [r7, #4]
    2af6:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    2af8:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    2afc:	68f8      	ldr	r0, [r7, #12]
    2afe:	4b03      	ldr	r3, [pc, #12]	; (2b0c <hri_tcc_write_CC_reg+0x30>)
    2b00:	4798      	blx	r3
}
    2b02:	bf00      	nop
    2b04:	3710      	adds	r7, #16
    2b06:	46bd      	mov	sp, r7
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	bf00      	nop
    2b0c:	00002a79 	.word	0x00002a79

00002b10 <tcc_set_compare_value>:
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
    2b10:	b580      	push	{r7, lr}
    2b12:	b084      	sub	sp, #16
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	60b9      	str	r1, [r7, #8]
    2b1a:	4613      	mov	r3, r2
    2b1c:	71fb      	strb	r3, [r7, #7]
	hri_tcc_write_CC_reg(hw, channel_index, value);
    2b1e:	79fb      	ldrb	r3, [r7, #7]
    2b20:	68ba      	ldr	r2, [r7, #8]
    2b22:	4619      	mov	r1, r3
    2b24:	68f8      	ldr	r0, [r7, #12]
    2b26:	4b08      	ldr	r3, [pc, #32]	; (2b48 <tcc_set_compare_value+0x38>)
    2b28:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    2b2a:	79fb      	ldrb	r3, [r7, #7]
    2b2c:	2201      	movs	r2, #1
    2b2e:	fa02 f303 	lsl.w	r3, r2, r3
    2b32:	021b      	lsls	r3, r3, #8
    2b34:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2b38:	4619      	mov	r1, r3
    2b3a:	68f8      	ldr	r0, [r7, #12]
    2b3c:	4b03      	ldr	r3, [pc, #12]	; (2b4c <tcc_set_compare_value+0x3c>)
    2b3e:	4798      	blx	r3
}
    2b40:	bf00      	nop
    2b42:	3710      	adds	r7, #16
    2b44:	46bd      	mov	sp, r7
    2b46:	bd80      	pop	{r7, pc}
    2b48:	00002add 	.word	0x00002add
    2b4c:	00002a79 	.word	0x00002a79

00002b50 <tcc_set_period_value>:
{
	hri_tcc_write_CCBUF_reg(hw, channel_index, value);
}

void tcc_set_period_value(void *const hw, uint32_t value)
{
    2b50:	b580      	push	{r7, lr}
    2b52:	b082      	sub	sp, #8
    2b54:	af00      	add	r7, sp, #0
    2b56:	6078      	str	r0, [r7, #4]
    2b58:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(hw, value);
    2b5a:	6839      	ldr	r1, [r7, #0]
    2b5c:	6878      	ldr	r0, [r7, #4]
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <tcc_set_period_value+0x24>)
    2b60:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2b62:	2180      	movs	r1, #128	; 0x80
    2b64:	6878      	ldr	r0, [r7, #4]
    2b66:	4b04      	ldr	r3, [pc, #16]	; (2b78 <tcc_set_period_value+0x28>)
    2b68:	4798      	blx	r3
}
    2b6a:	bf00      	nop
    2b6c:	3708      	adds	r7, #8
    2b6e:	46bd      	mov	sp, r7
    2b70:	bd80      	pop	{r7, pc}
    2b72:	bf00      	nop
    2b74:	00002ab9 	.word	0x00002ab9
    2b78:	00002a79 	.word	0x00002a79

00002b7c <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    2b80:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2b84:	4804      	ldr	r0, [pc, #16]	; (2b98 <TCC0_1_Handler+0x1c>)
    2b86:	4b05      	ldr	r3, [pc, #20]	; (2b9c <TCC0_1_Handler+0x20>)
    2b88:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    2b8a:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <TCC0_1_Handler+0x24>)
    2b8c:	681b      	ldr	r3, [r3, #0]
    2b8e:	4802      	ldr	r0, [pc, #8]	; (2b98 <TCC0_1_Handler+0x1c>)
    2b90:	4798      	blx	r3
}
    2b92:	bf00      	nop
    2b94:	bd80      	pop	{r7, pc}
    2b96:	bf00      	nop
    2b98:	41016000 	.word	0x41016000
    2b9c:	00002a9d 	.word	0x00002a9d
    2ba0:	2000017c 	.word	0x2000017c

00002ba4 <__libc_init_array>:
    2ba4:	b570      	push	{r4, r5, r6, lr}
    2ba6:	4e0d      	ldr	r6, [pc, #52]	; (2bdc <__libc_init_array+0x38>)
    2ba8:	4c0d      	ldr	r4, [pc, #52]	; (2be0 <__libc_init_array+0x3c>)
    2baa:	1ba4      	subs	r4, r4, r6
    2bac:	10a4      	asrs	r4, r4, #2
    2bae:	2500      	movs	r5, #0
    2bb0:	42a5      	cmp	r5, r4
    2bb2:	d109      	bne.n	2bc8 <__libc_init_array+0x24>
    2bb4:	4e0b      	ldr	r6, [pc, #44]	; (2be4 <__libc_init_array+0x40>)
    2bb6:	4c0c      	ldr	r4, [pc, #48]	; (2be8 <__libc_init_array+0x44>)
    2bb8:	f000 f8a2 	bl	2d00 <_init>
    2bbc:	1ba4      	subs	r4, r4, r6
    2bbe:	10a4      	asrs	r4, r4, #2
    2bc0:	2500      	movs	r5, #0
    2bc2:	42a5      	cmp	r5, r4
    2bc4:	d105      	bne.n	2bd2 <__libc_init_array+0x2e>
    2bc6:	bd70      	pop	{r4, r5, r6, pc}
    2bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2bcc:	4798      	blx	r3
    2bce:	3501      	adds	r5, #1
    2bd0:	e7ee      	b.n	2bb0 <__libc_init_array+0xc>
    2bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2bd6:	4798      	blx	r3
    2bd8:	3501      	adds	r5, #1
    2bda:	e7f2      	b.n	2bc2 <__libc_init_array+0x1e>
    2bdc:	00002d0c 	.word	0x00002d0c
    2be0:	00002d0c 	.word	0x00002d0c
    2be4:	00002d0c 	.word	0x00002d0c
    2be8:	00002d10 	.word	0x00002d10
    2bec:	682f2e2e 	.word	0x682f2e2e
    2bf0:	702f6c70 	.word	0x702f6c70
    2bf4:	2f74726f 	.word	0x2f74726f
    2bf8:	5f6c7068 	.word	0x5f6c7068
    2bfc:	6f697067 	.word	0x6f697067
    2c00:	7361625f 	.word	0x7361625f
    2c04:	00682e65 	.word	0x00682e65
    2c08:	682f2e2e 	.word	0x682f2e2e
    2c0c:	732f6c61 	.word	0x732f6c61
    2c10:	682f6372 	.word	0x682f6372
    2c14:	695f6c61 	.word	0x695f6c61
    2c18:	00632e6f 	.word	0x00632e6f
    2c1c:	682f2e2e 	.word	0x682f2e2e
    2c20:	732f6c61 	.word	0x732f6c61
    2c24:	682f6372 	.word	0x682f6372
    2c28:	745f6c61 	.word	0x745f6c61
    2c2c:	72656d69 	.word	0x72656d69
    2c30:	0000632e 	.word	0x0000632e
    2c34:	682f2e2e 	.word	0x682f2e2e
    2c38:	732f6c61 	.word	0x732f6c61
    2c3c:	682f6372 	.word	0x682f6372
    2c40:	755f6c61 	.word	0x755f6c61
    2c44:	74726173 	.word	0x74726173
    2c48:	7973615f 	.word	0x7973615f
    2c4c:	632e636e 	.word	0x632e636e
    2c50:	00000000 	.word	0x00000000
    2c54:	682f2e2e 	.word	0x682f2e2e
    2c58:	752f6c61 	.word	0x752f6c61
    2c5c:	736c6974 	.word	0x736c6974
    2c60:	6372732f 	.word	0x6372732f
    2c64:	6974752f 	.word	0x6974752f
    2c68:	6c5f736c 	.word	0x6c5f736c
    2c6c:	2e747369 	.word	0x2e747369
    2c70:	00000063 	.word	0x00000063
    2c74:	682f2e2e 	.word	0x682f2e2e
    2c78:	752f6c61 	.word	0x752f6c61
    2c7c:	736c6974 	.word	0x736c6974
    2c80:	6372732f 	.word	0x6372732f
    2c84:	6974752f 	.word	0x6974752f
    2c88:	725f736c 	.word	0x725f736c
    2c8c:	62676e69 	.word	0x62676e69
    2c90:	65666675 	.word	0x65666675
    2c94:	00632e72 	.word	0x00632e72
    2c98:	682f2e2e 	.word	0x682f2e2e
    2c9c:	722f6c70 	.word	0x722f6c70
    2ca0:	682f6374 	.word	0x682f6374
    2ca4:	725f6c70 	.word	0x725f6c70
    2ca8:	632e6374 	.word	0x632e6374
    2cac:	00000000 	.word	0x00000000
    2cb0:	682f2e2e 	.word	0x682f2e2e
    2cb4:	732f6c70 	.word	0x732f6c70
    2cb8:	6f637265 	.word	0x6f637265
    2cbc:	70682f6d 	.word	0x70682f6d
    2cc0:	65735f6c 	.word	0x65735f6c
    2cc4:	6d6f6372 	.word	0x6d6f6372
    2cc8:	0000632e 	.word	0x0000632e
    2ccc:	40003000 	.word	0x40003000
    2cd0:	40003400 	.word	0x40003400
    2cd4:	41012000 	.word	0x41012000
    2cd8:	41014000 	.word	0x41014000
    2cdc:	43000000 	.word	0x43000000
    2ce0:	43000400 	.word	0x43000400
    2ce4:	43000800 	.word	0x43000800
    2ce8:	43000c00 	.word	0x43000c00

00002cec <sercomspi_regs>:
	...

00002d00 <_init>:
    2d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d02:	bf00      	nop
    2d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d06:	bc08      	pop	{r3}
    2d08:	469e      	mov	lr, r3
    2d0a:	4770      	bx	lr

00002d0c <__init_array_start>:
    2d0c:	00000289 	.word	0x00000289

00002d10 <_fini>:
    2d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d12:	bf00      	nop
    2d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d16:	bc08      	pop	{r3}
    2d18:	469e      	mov	lr, r3
    2d1a:	4770      	bx	lr

00002d1c <__fini_array_start>:
    2d1c:	00000265 	.word	0x00000265
