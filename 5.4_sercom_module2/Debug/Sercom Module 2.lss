
Sercom Module 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000030  20000000  000024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020030  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020030  2**0
                  CONTENTS
  4 .bss          00000064  20000030  0000252c  00020030  2**2
                  ALLOC
  5 .stack        00010004  20000094  00002590  00020030  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00013f36  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001bad  00000000  00000000  00033fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007d0a  00000000  00000000  00035b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000da8  00000000  00000000  0003d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  0003e64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fe90  00000000  00000000  0003f304  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dffb  00000000  00000000  0006f194  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001186d1  00000000  00000000  0007d18f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000039a0  00000000  00000000  00195860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 00 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	89 15 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     ....}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     124:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1f4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000030 	.word	0x20000030
     280:	00000000 	.word	0x00000000
     284:	000024fc 	.word	0x000024fc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000024fc 	.word	0x000024fc
     2c4:	20000034 	.word	0x20000034
     2c8:	000024fc 	.word	0x000024fc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000bad 	.word	0x00000bad

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	000024fc 	.word	0x000024fc
     35c:	20000000 	.word	0x20000000
     360:	20000030 	.word	0x20000030
     364:	20000030 	.word	0x20000030
     368:	20000094 	.word	0x20000094
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	000023dd 	.word	0x000023dd
     378:	0000234d 	.word	0x0000234d

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	699b      	ldr	r3, [r3, #24]
     3d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	6a1b      	ldr	r3, [r3, #32]
     3f4:	f043 0204 	orr.w	r2, r3, #4
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	460b      	mov	r3, r1
     412:	607a      	str	r2, [r7, #4]
     414:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     416:	7afb      	ldrb	r3, [r7, #11]
     418:	68fa      	ldr	r2, [r7, #12]
     41a:	01db      	lsls	r3, r3, #7
     41c:	4413      	add	r3, r2
     41e:	3308      	adds	r3, #8
     420:	687a      	ldr	r2, [r7, #4]
     422:	601a      	str	r2, [r3, #0]
}
     424:	bf00      	nop
     426:	3714      	adds	r7, #20
     428:	46bd      	mov	sp, r7
     42a:	f85d 7b04 	ldr.w	r7, [sp], #4
     42e:	4770      	bx	lr

00000430 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     430:	b480      	push	{r7}
     432:	b085      	sub	sp, #20
     434:	af00      	add	r7, sp, #0
     436:	60f8      	str	r0, [r7, #12]
     438:	460b      	mov	r3, r1
     43a:	607a      	str	r2, [r7, #4]
     43c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     43e:	7afb      	ldrb	r3, [r7, #11]
     440:	68fa      	ldr	r2, [r7, #12]
     442:	01db      	lsls	r3, r3, #7
     444:	4413      	add	r3, r2
     446:	3304      	adds	r3, #4
     448:	687a      	ldr	r2, [r7, #4]
     44a:	601a      	str	r2, [r3, #0]
}
     44c:	bf00      	nop
     44e:	3714      	adds	r7, #20
     450:	46bd      	mov	sp, r7
     452:	f85d 7b04 	ldr.w	r7, [sp], #4
     456:	4770      	bx	lr

00000458 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     458:	b480      	push	{r7}
     45a:	b085      	sub	sp, #20
     45c:	af00      	add	r7, sp, #0
     45e:	60f8      	str	r0, [r7, #12]
     460:	460b      	mov	r3, r1
     462:	607a      	str	r2, [r7, #4]
     464:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     466:	7afb      	ldrb	r3, [r7, #11]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	01db      	lsls	r3, r3, #7
     46c:	4413      	add	r3, r2
     46e:	3318      	adds	r3, #24
     470:	687a      	ldr	r2, [r7, #4]
     472:	601a      	str	r2, [r3, #0]
}
     474:	bf00      	nop
     476:	3714      	adds	r7, #20
     478:	46bd      	mov	sp, r7
     47a:	f85d 7b04 	ldr.w	r7, [sp], #4
     47e:	4770      	bx	lr

00000480 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	460b      	mov	r3, r1
     48a:	607a      	str	r2, [r7, #4]
     48c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48e:	7afb      	ldrb	r3, [r7, #11]
     490:	68fa      	ldr	r2, [r7, #12]
     492:	01db      	lsls	r3, r3, #7
     494:	4413      	add	r3, r2
     496:	3314      	adds	r3, #20
     498:	687a      	ldr	r2, [r7, #4]
     49a:	601a      	str	r2, [r3, #0]
}
     49c:	bf00      	nop
     49e:	3714      	adds	r7, #20
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     4a8:	b480      	push	{r7}
     4aa:	b085      	sub	sp, #20
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	4608      	mov	r0, r1
     4b2:	4611      	mov	r1, r2
     4b4:	461a      	mov	r2, r3
     4b6:	4603      	mov	r3, r0
     4b8:	70fb      	strb	r3, [r7, #3]
     4ba:	460b      	mov	r3, r1
     4bc:	70bb      	strb	r3, [r7, #2]
     4be:	4613      	mov	r3, r2
     4c0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c2:	78fa      	ldrb	r2, [r7, #3]
     4c4:	78bb      	ldrb	r3, [r7, #2]
     4c6:	6879      	ldr	r1, [r7, #4]
     4c8:	01d2      	lsls	r2, r2, #7
     4ca:	440a      	add	r2, r1
     4cc:	4413      	add	r3, r2
     4ce:	3330      	adds	r3, #48	; 0x30
     4d0:	781b      	ldrb	r3, [r3, #0]
     4d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d4:	7bfb      	ldrb	r3, [r7, #15]
     4d6:	f023 030f 	bic.w	r3, r3, #15
     4da:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     4dc:	787b      	ldrb	r3, [r7, #1]
     4de:	f003 030f 	and.w	r3, r3, #15
     4e2:	b2da      	uxtb	r2, r3
     4e4:	7bfb      	ldrb	r3, [r7, #15]
     4e6:	4313      	orrs	r3, r2
     4e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	78fa      	ldrb	r2, [r7, #3]
     4ec:	78bb      	ldrb	r3, [r7, #2]
     4ee:	6879      	ldr	r1, [r7, #4]
     4f0:	01d2      	lsls	r2, r2, #7
     4f2:	440a      	add	r2, r1
     4f4:	4413      	add	r3, r2
     4f6:	3330      	adds	r3, #48	; 0x30
     4f8:	7bfa      	ldrb	r2, [r7, #15]
     4fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4fc:	bf00      	nop
     4fe:	3714      	adds	r7, #20
     500:	46bd      	mov	sp, r7
     502:	f85d 7b04 	ldr.w	r7, [sp], #4
     506:	4770      	bx	lr

00000508 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     508:	b480      	push	{r7}
     50a:	b085      	sub	sp, #20
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
     510:	4608      	mov	r0, r1
     512:	4611      	mov	r1, r2
     514:	461a      	mov	r2, r3
     516:	4603      	mov	r3, r0
     518:	70fb      	strb	r3, [r7, #3]
     51a:	460b      	mov	r3, r1
     51c:	70bb      	strb	r3, [r7, #2]
     51e:	4613      	mov	r3, r2
     520:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     522:	78fa      	ldrb	r2, [r7, #3]
     524:	78bb      	ldrb	r3, [r7, #2]
     526:	6879      	ldr	r1, [r7, #4]
     528:	01d2      	lsls	r2, r2, #7
     52a:	440a      	add	r2, r1
     52c:	4413      	add	r3, r2
     52e:	3330      	adds	r3, #48	; 0x30
     530:	781b      	ldrb	r3, [r3, #0]
     532:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     534:	7bfb      	ldrb	r3, [r7, #15]
     536:	f003 030f 	and.w	r3, r3, #15
     53a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     53c:	787b      	ldrb	r3, [r7, #1]
     53e:	011b      	lsls	r3, r3, #4
     540:	b2da      	uxtb	r2, r3
     542:	7bfb      	ldrb	r3, [r7, #15]
     544:	4313      	orrs	r3, r2
     546:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     548:	78fa      	ldrb	r2, [r7, #3]
     54a:	78bb      	ldrb	r3, [r7, #2]
     54c:	6879      	ldr	r1, [r7, #4]
     54e:	01d2      	lsls	r2, r2, #7
     550:	440a      	add	r2, r1
     552:	4413      	add	r3, r2
     554:	3330      	adds	r3, #48	; 0x30
     556:	7bfa      	ldrb	r2, [r7, #15]
     558:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55a:	bf00      	nop
     55c:	3714      	adds	r7, #20
     55e:	46bd      	mov	sp, r7
     560:	f85d 7b04 	ldr.w	r7, [sp], #4
     564:	4770      	bx	lr

00000566 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     566:	b480      	push	{r7}
     568:	b085      	sub	sp, #20
     56a:	af00      	add	r7, sp, #0
     56c:	6078      	str	r0, [r7, #4]
     56e:	4608      	mov	r0, r1
     570:	4611      	mov	r1, r2
     572:	461a      	mov	r2, r3
     574:	4603      	mov	r3, r0
     576:	70fb      	strb	r3, [r7, #3]
     578:	460b      	mov	r3, r1
     57a:	70bb      	strb	r3, [r7, #2]
     57c:	4613      	mov	r3, r2
     57e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	78fa      	ldrb	r2, [r7, #3]
     582:	78bb      	ldrb	r3, [r7, #2]
     584:	6879      	ldr	r1, [r7, #4]
     586:	01d2      	lsls	r2, r2, #7
     588:	440a      	add	r2, r1
     58a:	4413      	add	r3, r2
     58c:	3340      	adds	r3, #64	; 0x40
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	7bfb      	ldrb	r3, [r7, #15]
     594:	f023 0301 	bic.w	r3, r3, #1
     598:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59a:	787a      	ldrb	r2, [r7, #1]
     59c:	7bfb      	ldrb	r3, [r7, #15]
     59e:	4313      	orrs	r3, r2
     5a0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a2:	78fa      	ldrb	r2, [r7, #3]
     5a4:	78bb      	ldrb	r3, [r7, #2]
     5a6:	6879      	ldr	r1, [r7, #4]
     5a8:	01d2      	lsls	r2, r2, #7
     5aa:	440a      	add	r2, r1
     5ac:	4413      	add	r3, r2
     5ae:	3340      	adds	r3, #64	; 0x40
     5b0:	7bfa      	ldrb	r2, [r7, #15]
     5b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5b4:	bf00      	nop
     5b6:	3714      	adds	r7, #20
     5b8:	46bd      	mov	sp, r7
     5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     5be:	4770      	bx	lr

000005c0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5c0:	b490      	push	{r4, r7}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
     5c8:	460b      	mov	r3, r1
     5ca:	70fb      	strb	r3, [r7, #3]
     5cc:	4613      	mov	r3, r2
     5ce:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5d0:	78fa      	ldrb	r2, [r7, #3]
     5d2:	78bb      	ldrb	r3, [r7, #2]
     5d4:	78f8      	ldrb	r0, [r7, #3]
     5d6:	78b9      	ldrb	r1, [r7, #2]
     5d8:	687c      	ldr	r4, [r7, #4]
     5da:	01c0      	lsls	r0, r0, #7
     5dc:	4420      	add	r0, r4
     5de:	4401      	add	r1, r0
     5e0:	3140      	adds	r1, #64	; 0x40
     5e2:	7809      	ldrb	r1, [r1, #0]
     5e4:	b2c9      	uxtb	r1, r1
     5e6:	f041 0104 	orr.w	r1, r1, #4
     5ea:	b2c8      	uxtb	r0, r1
     5ec:	6879      	ldr	r1, [r7, #4]
     5ee:	01d2      	lsls	r2, r2, #7
     5f0:	440a      	add	r2, r1
     5f2:	4413      	add	r3, r2
     5f4:	3340      	adds	r3, #64	; 0x40
     5f6:	4602      	mov	r2, r0
     5f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5fa:	bf00      	nop
     5fc:	3708      	adds	r7, #8
     5fe:	46bd      	mov	sp, r7
     600:	bc90      	pop	{r4, r7}
     602:	4770      	bx	lr

00000604 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     604:	b490      	push	{r4, r7}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
     60c:	460b      	mov	r3, r1
     60e:	70fb      	strb	r3, [r7, #3]
     610:	4613      	mov	r3, r2
     612:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     614:	78fa      	ldrb	r2, [r7, #3]
     616:	78bb      	ldrb	r3, [r7, #2]
     618:	78f8      	ldrb	r0, [r7, #3]
     61a:	78b9      	ldrb	r1, [r7, #2]
     61c:	687c      	ldr	r4, [r7, #4]
     61e:	01c0      	lsls	r0, r0, #7
     620:	4420      	add	r0, r4
     622:	4401      	add	r1, r0
     624:	3140      	adds	r1, #64	; 0x40
     626:	7809      	ldrb	r1, [r1, #0]
     628:	b2c9      	uxtb	r1, r1
     62a:	f021 0104 	bic.w	r1, r1, #4
     62e:	b2c8      	uxtb	r0, r1
     630:	6879      	ldr	r1, [r7, #4]
     632:	01d2      	lsls	r2, r2, #7
     634:	440a      	add	r2, r1
     636:	4413      	add	r3, r2
     638:	3340      	adds	r3, #64	; 0x40
     63a:	4602      	mov	r2, r0
     63c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     63e:	bf00      	nop
     640:	3708      	adds	r7, #8
     642:	46bd      	mov	sp, r7
     644:	bc90      	pop	{r4, r7}
     646:	4770      	bx	lr

00000648 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     648:	b480      	push	{r7}
     64a:	b085      	sub	sp, #20
     64c:	af00      	add	r7, sp, #0
     64e:	60f8      	str	r0, [r7, #12]
     650:	460b      	mov	r3, r1
     652:	607a      	str	r2, [r7, #4]
     654:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	7afb      	ldrb	r3, [r7, #11]
     658:	68fa      	ldr	r2, [r7, #12]
     65a:	01db      	lsls	r3, r3, #7
     65c:	4413      	add	r3, r2
     65e:	3328      	adds	r3, #40	; 0x28
     660:	687a      	ldr	r2, [r7, #4]
     662:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     664:	bf00      	nop
     666:	3714      	adds	r7, #20
     668:	46bd      	mov	sp, r7
     66a:	f85d 7b04 	ldr.w	r7, [sp], #4
     66e:	4770      	bx	lr

00000670 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	4603      	mov	r3, r0
     678:	6039      	str	r1, [r7, #0]
     67a:	71fb      	strb	r3, [r7, #7]
     67c:	4613      	mov	r3, r2
     67e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     680:	79bb      	ldrb	r3, [r7, #6]
     682:	2b01      	cmp	r3, #1
     684:	d01c      	beq.n	6c0 <_gpio_set_direction+0x50>
     686:	2b02      	cmp	r3, #2
     688:	d037      	beq.n	6fa <_gpio_set_direction+0x8a>
     68a:	2b00      	cmp	r3, #0
     68c:	d14e      	bne.n	72c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     68e:	79fb      	ldrb	r3, [r7, #7]
     690:	683a      	ldr	r2, [r7, #0]
     692:	4619      	mov	r1, r3
     694:	482a      	ldr	r0, [pc, #168]	; (740 <_gpio_set_direction+0xd0>)
     696:	4b2b      	ldr	r3, [pc, #172]	; (744 <_gpio_set_direction+0xd4>)
     698:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     69a:	683b      	ldr	r3, [r7, #0]
     69c:	b29b      	uxth	r3, r3
     69e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     6a2:	79fb      	ldrb	r3, [r7, #7]
     6a4:	4619      	mov	r1, r3
     6a6:	4826      	ldr	r0, [pc, #152]	; (740 <_gpio_set_direction+0xd0>)
     6a8:	4b27      	ldr	r3, [pc, #156]	; (748 <_gpio_set_direction+0xd8>)
     6aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6ac:	683b      	ldr	r3, [r7, #0]
     6ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     6b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     6b4:	79fb      	ldrb	r3, [r7, #7]
     6b6:	4619      	mov	r1, r3
     6b8:	4821      	ldr	r0, [pc, #132]	; (740 <_gpio_set_direction+0xd0>)
     6ba:	4b23      	ldr	r3, [pc, #140]	; (748 <_gpio_set_direction+0xd8>)
     6bc:	4798      	blx	r3
		break;
     6be:	e03a      	b.n	736 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6c0:	79fb      	ldrb	r3, [r7, #7]
     6c2:	683a      	ldr	r2, [r7, #0]
     6c4:	4619      	mov	r1, r3
     6c6:	481e      	ldr	r0, [pc, #120]	; (740 <_gpio_set_direction+0xd0>)
     6c8:	4b1e      	ldr	r3, [pc, #120]	; (744 <_gpio_set_direction+0xd4>)
     6ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	b29b      	uxth	r3, r3
     6d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     6d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6d8:	79f9      	ldrb	r1, [r7, #7]
     6da:	461a      	mov	r2, r3
     6dc:	4818      	ldr	r0, [pc, #96]	; (740 <_gpio_set_direction+0xd0>)
     6de:	4b1a      	ldr	r3, [pc, #104]	; (748 <_gpio_set_direction+0xd8>)
     6e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     6e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     6ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6ee:	79f9      	ldrb	r1, [r7, #7]
     6f0:	461a      	mov	r2, r3
     6f2:	4813      	ldr	r0, [pc, #76]	; (740 <_gpio_set_direction+0xd0>)
     6f4:	4b14      	ldr	r3, [pc, #80]	; (748 <_gpio_set_direction+0xd8>)
     6f6:	4798      	blx	r3
		break;
     6f8:	e01d      	b.n	736 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     6fa:	79fb      	ldrb	r3, [r7, #7]
     6fc:	683a      	ldr	r2, [r7, #0]
     6fe:	4619      	mov	r1, r3
     700:	480f      	ldr	r0, [pc, #60]	; (740 <_gpio_set_direction+0xd0>)
     702:	4b12      	ldr	r3, [pc, #72]	; (74c <_gpio_set_direction+0xdc>)
     704:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     706:	683b      	ldr	r3, [r7, #0]
     708:	b29b      	uxth	r3, r3
     70a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     70e:	79fb      	ldrb	r3, [r7, #7]
     710:	4619      	mov	r1, r3
     712:	480b      	ldr	r0, [pc, #44]	; (740 <_gpio_set_direction+0xd0>)
     714:	4b0c      	ldr	r3, [pc, #48]	; (748 <_gpio_set_direction+0xd8>)
     716:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     718:	683b      	ldr	r3, [r7, #0]
     71a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     71c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     720:	79fb      	ldrb	r3, [r7, #7]
     722:	4619      	mov	r1, r3
     724:	4806      	ldr	r0, [pc, #24]	; (740 <_gpio_set_direction+0xd0>)
     726:	4b08      	ldr	r3, [pc, #32]	; (748 <_gpio_set_direction+0xd8>)
     728:	4798      	blx	r3
		break;
     72a:	e004      	b.n	736 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     72c:	2246      	movs	r2, #70	; 0x46
     72e:	4908      	ldr	r1, [pc, #32]	; (750 <_gpio_set_direction+0xe0>)
     730:	2000      	movs	r0, #0
     732:	4b08      	ldr	r3, [pc, #32]	; (754 <_gpio_set_direction+0xe4>)
     734:	4798      	blx	r3
	}
}
     736:	bf00      	nop
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}
     73e:	bf00      	nop
     740:	41008000 	.word	0x41008000
     744:	00000431 	.word	0x00000431
     748:	00000649 	.word	0x00000649
     74c:	00000409 	.word	0x00000409
     750:	00002424 	.word	0x00002424
     754:	00001299 	.word	0x00001299

00000758 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     758:	b580      	push	{r7, lr}
     75a:	b082      	sub	sp, #8
     75c:	af00      	add	r7, sp, #0
     75e:	4603      	mov	r3, r0
     760:	6039      	str	r1, [r7, #0]
     762:	71fb      	strb	r3, [r7, #7]
     764:	4613      	mov	r3, r2
     766:	71bb      	strb	r3, [r7, #6]
	if (level) {
     768:	79bb      	ldrb	r3, [r7, #6]
     76a:	2b00      	cmp	r3, #0
     76c:	d006      	beq.n	77c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     76e:	79fb      	ldrb	r3, [r7, #7]
     770:	683a      	ldr	r2, [r7, #0]
     772:	4619      	mov	r1, r3
     774:	4806      	ldr	r0, [pc, #24]	; (790 <_gpio_set_level+0x38>)
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <_gpio_set_level+0x3c>)
     778:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     77a:	e005      	b.n	788 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     77c:	79fb      	ldrb	r3, [r7, #7]
     77e:	683a      	ldr	r2, [r7, #0]
     780:	4619      	mov	r1, r3
     782:	4803      	ldr	r0, [pc, #12]	; (790 <_gpio_set_level+0x38>)
     784:	4b04      	ldr	r3, [pc, #16]	; (798 <_gpio_set_level+0x40>)
     786:	4798      	blx	r3
}
     788:	bf00      	nop
     78a:	3708      	adds	r7, #8
     78c:	46bd      	mov	sp, r7
     78e:	bd80      	pop	{r7, pc}
     790:	41008000 	.word	0x41008000
     794:	00000459 	.word	0x00000459
     798:	00000481 	.word	0x00000481

0000079c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     79c:	b580      	push	{r7, lr}
     79e:	b082      	sub	sp, #8
     7a0:	af00      	add	r7, sp, #0
     7a2:	4603      	mov	r3, r0
     7a4:	71fb      	strb	r3, [r7, #7]
     7a6:	460b      	mov	r3, r1
     7a8:	71bb      	strb	r3, [r7, #6]
     7aa:	4613      	mov	r3, r2
     7ac:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     7ae:	797b      	ldrb	r3, [r7, #5]
     7b0:	2b01      	cmp	r3, #1
     7b2:	d00a      	beq.n	7ca <_gpio_set_pin_pull_mode+0x2e>
     7b4:	2b02      	cmp	r3, #2
     7b6:	d01f      	beq.n	7f8 <_gpio_set_pin_pull_mode+0x5c>
     7b8:	2b00      	cmp	r3, #0
     7ba:	d134      	bne.n	826 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     7bc:	79ba      	ldrb	r2, [r7, #6]
     7be:	79fb      	ldrb	r3, [r7, #7]
     7c0:	4619      	mov	r1, r3
     7c2:	481e      	ldr	r0, [pc, #120]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7c4:	4b1e      	ldr	r3, [pc, #120]	; (840 <_gpio_set_pin_pull_mode+0xa4>)
     7c6:	4798      	blx	r3
		break;
     7c8:	e033      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7ca:	79bb      	ldrb	r3, [r7, #6]
     7cc:	2201      	movs	r2, #1
     7ce:	409a      	lsls	r2, r3
     7d0:	79fb      	ldrb	r3, [r7, #7]
     7d2:	4619      	mov	r1, r3
     7d4:	4819      	ldr	r0, [pc, #100]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7d6:	4b1b      	ldr	r3, [pc, #108]	; (844 <_gpio_set_pin_pull_mode+0xa8>)
     7d8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7da:	79ba      	ldrb	r2, [r7, #6]
     7dc:	79fb      	ldrb	r3, [r7, #7]
     7de:	4619      	mov	r1, r3
     7e0:	4816      	ldr	r0, [pc, #88]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7e2:	4b19      	ldr	r3, [pc, #100]	; (848 <_gpio_set_pin_pull_mode+0xac>)
     7e4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     7e6:	79bb      	ldrb	r3, [r7, #6]
     7e8:	2201      	movs	r2, #1
     7ea:	409a      	lsls	r2, r3
     7ec:	79fb      	ldrb	r3, [r7, #7]
     7ee:	4619      	mov	r1, r3
     7f0:	4812      	ldr	r0, [pc, #72]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7f2:	4b16      	ldr	r3, [pc, #88]	; (84c <_gpio_set_pin_pull_mode+0xb0>)
     7f4:	4798      	blx	r3
		break;
     7f6:	e01c      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7f8:	79bb      	ldrb	r3, [r7, #6]
     7fa:	2201      	movs	r2, #1
     7fc:	409a      	lsls	r2, r3
     7fe:	79fb      	ldrb	r3, [r7, #7]
     800:	4619      	mov	r1, r3
     802:	480e      	ldr	r0, [pc, #56]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <_gpio_set_pin_pull_mode+0xa8>)
     806:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     808:	79ba      	ldrb	r2, [r7, #6]
     80a:	79fb      	ldrb	r3, [r7, #7]
     80c:	4619      	mov	r1, r3
     80e:	480b      	ldr	r0, [pc, #44]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     810:	4b0d      	ldr	r3, [pc, #52]	; (848 <_gpio_set_pin_pull_mode+0xac>)
     812:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     814:	79bb      	ldrb	r3, [r7, #6]
     816:	2201      	movs	r2, #1
     818:	409a      	lsls	r2, r3
     81a:	79fb      	ldrb	r3, [r7, #7]
     81c:	4619      	mov	r1, r3
     81e:	4807      	ldr	r0, [pc, #28]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     820:	4b0b      	ldr	r3, [pc, #44]	; (850 <_gpio_set_pin_pull_mode+0xb4>)
     822:	4798      	blx	r3
		break;
     824:	e005      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     826:	2289      	movs	r2, #137	; 0x89
     828:	490a      	ldr	r1, [pc, #40]	; (854 <_gpio_set_pin_pull_mode+0xb8>)
     82a:	2000      	movs	r0, #0
     82c:	4b0a      	ldr	r3, [pc, #40]	; (858 <_gpio_set_pin_pull_mode+0xbc>)
     82e:	4798      	blx	r3
		break;
     830:	bf00      	nop
	}
}
     832:	bf00      	nop
     834:	3708      	adds	r7, #8
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	bf00      	nop
     83c:	41008000 	.word	0x41008000
     840:	00000605 	.word	0x00000605
     844:	00000431 	.word	0x00000431
     848:	000005c1 	.word	0x000005c1
     84c:	00000459 	.word	0x00000459
     850:	00000481 	.word	0x00000481
     854:	00002424 	.word	0x00002424
     858:	00001299 	.word	0x00001299

0000085c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     85c:	b590      	push	{r4, r7, lr}
     85e:	b085      	sub	sp, #20
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     866:	687b      	ldr	r3, [r7, #4]
     868:	095b      	lsrs	r3, r3, #5
     86a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	b2db      	uxtb	r3, r3
     870:	f003 031f 	and.w	r3, r3, #31
     874:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     876:	683b      	ldr	r3, [r7, #0]
     878:	f1b3 3fff 	cmp.w	r3, #4294967295
     87c:	d106      	bne.n	88c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     87e:	7bba      	ldrb	r2, [r7, #14]
     880:	7bf9      	ldrb	r1, [r7, #15]
     882:	2300      	movs	r3, #0
     884:	4812      	ldr	r0, [pc, #72]	; (8d0 <_gpio_set_pin_function+0x74>)
     886:	4c13      	ldr	r4, [pc, #76]	; (8d4 <_gpio_set_pin_function+0x78>)
     888:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     88a:	e01d      	b.n	8c8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     88c:	7bba      	ldrb	r2, [r7, #14]
     88e:	7bf9      	ldrb	r1, [r7, #15]
     890:	2301      	movs	r3, #1
     892:	480f      	ldr	r0, [pc, #60]	; (8d0 <_gpio_set_pin_function+0x74>)
     894:	4c0f      	ldr	r4, [pc, #60]	; (8d4 <_gpio_set_pin_function+0x78>)
     896:	47a0      	blx	r4
		if (pin & 1) {
     898:	7bbb      	ldrb	r3, [r7, #14]
     89a:	f003 0301 	and.w	r3, r3, #1
     89e:	2b00      	cmp	r3, #0
     8a0:	d009      	beq.n	8b6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     8a2:	7bbb      	ldrb	r3, [r7, #14]
     8a4:	085b      	lsrs	r3, r3, #1
     8a6:	b2da      	uxtb	r2, r3
     8a8:	683b      	ldr	r3, [r7, #0]
     8aa:	b2db      	uxtb	r3, r3
     8ac:	7bf9      	ldrb	r1, [r7, #15]
     8ae:	4808      	ldr	r0, [pc, #32]	; (8d0 <_gpio_set_pin_function+0x74>)
     8b0:	4c09      	ldr	r4, [pc, #36]	; (8d8 <_gpio_set_pin_function+0x7c>)
     8b2:	47a0      	blx	r4
}
     8b4:	e008      	b.n	8c8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     8b6:	7bbb      	ldrb	r3, [r7, #14]
     8b8:	085b      	lsrs	r3, r3, #1
     8ba:	b2da      	uxtb	r2, r3
     8bc:	683b      	ldr	r3, [r7, #0]
     8be:	b2db      	uxtb	r3, r3
     8c0:	7bf9      	ldrb	r1, [r7, #15]
     8c2:	4803      	ldr	r0, [pc, #12]	; (8d0 <_gpio_set_pin_function+0x74>)
     8c4:	4c05      	ldr	r4, [pc, #20]	; (8dc <_gpio_set_pin_function+0x80>)
     8c6:	47a0      	blx	r4
}
     8c8:	bf00      	nop
     8ca:	3714      	adds	r7, #20
     8cc:	46bd      	mov	sp, r7
     8ce:	bd90      	pop	{r4, r7, pc}
     8d0:	41008000 	.word	0x41008000
     8d4:	00000567 	.word	0x00000567
     8d8:	00000509 	.word	0x00000509
     8dc:	000004a9 	.word	0x000004a9

000008e0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	4603      	mov	r3, r0
     8e8:	460a      	mov	r2, r1
     8ea:	71fb      	strb	r3, [r7, #7]
     8ec:	4613      	mov	r3, r2
     8ee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8f0:	79fb      	ldrb	r3, [r7, #7]
     8f2:	095b      	lsrs	r3, r3, #5
     8f4:	b2d8      	uxtb	r0, r3
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	f003 031f 	and.w	r3, r3, #31
     8fc:	b2db      	uxtb	r3, r3
     8fe:	79ba      	ldrb	r2, [r7, #6]
     900:	4619      	mov	r1, r3
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <gpio_set_pin_pull_mode+0x30>)
     904:	4798      	blx	r3
}
     906:	bf00      	nop
     908:	3708      	adds	r7, #8
     90a:	46bd      	mov	sp, r7
     90c:	bd80      	pop	{r7, pc}
     90e:	bf00      	nop
     910:	0000079d 	.word	0x0000079d

00000914 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
     91c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     91e:	6839      	ldr	r1, [r7, #0]
     920:	6878      	ldr	r0, [r7, #4]
     922:	4b03      	ldr	r3, [pc, #12]	; (930 <gpio_set_pin_function+0x1c>)
     924:	4798      	blx	r3
}
     926:	bf00      	nop
     928:	3708      	adds	r7, #8
     92a:	46bd      	mov	sp, r7
     92c:	bd80      	pop	{r7, pc}
     92e:	bf00      	nop
     930:	0000085d 	.word	0x0000085d

00000934 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     934:	b580      	push	{r7, lr}
     936:	b082      	sub	sp, #8
     938:	af00      	add	r7, sp, #0
     93a:	4603      	mov	r3, r0
     93c:	460a      	mov	r2, r1
     93e:	71fb      	strb	r3, [r7, #7]
     940:	4613      	mov	r3, r2
     942:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     944:	79fb      	ldrb	r3, [r7, #7]
     946:	095b      	lsrs	r3, r3, #5
     948:	b2d8      	uxtb	r0, r3
     94a:	79fb      	ldrb	r3, [r7, #7]
     94c:	f003 031f 	and.w	r3, r3, #31
     950:	2201      	movs	r2, #1
     952:	fa02 f303 	lsl.w	r3, r2, r3
     956:	79ba      	ldrb	r2, [r7, #6]
     958:	4619      	mov	r1, r3
     95a:	4b03      	ldr	r3, [pc, #12]	; (968 <gpio_set_pin_direction+0x34>)
     95c:	4798      	blx	r3
}
     95e:	bf00      	nop
     960:	3708      	adds	r7, #8
     962:	46bd      	mov	sp, r7
     964:	bd80      	pop	{r7, pc}
     966:	bf00      	nop
     968:	00000671 	.word	0x00000671

0000096c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	4603      	mov	r3, r0
     974:	460a      	mov	r2, r1
     976:	71fb      	strb	r3, [r7, #7]
     978:	4613      	mov	r3, r2
     97a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     97c:	79fb      	ldrb	r3, [r7, #7]
     97e:	095b      	lsrs	r3, r3, #5
     980:	b2d8      	uxtb	r0, r3
     982:	79fb      	ldrb	r3, [r7, #7]
     984:	f003 031f 	and.w	r3, r3, #31
     988:	2201      	movs	r2, #1
     98a:	fa02 f303 	lsl.w	r3, r2, r3
     98e:	79ba      	ldrb	r2, [r7, #6]
     990:	4619      	mov	r1, r3
     992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <gpio_set_pin_level+0x34>)
     994:	4798      	blx	r3
}
     996:	bf00      	nop
     998:	3708      	adds	r7, #8
     99a:	46bd      	mov	sp, r7
     99c:	bd80      	pop	{r7, pc}
     99e:	bf00      	nop
     9a0:	00000759 	.word	0x00000759

000009a4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	af00      	add	r7, sp, #0
	_init_chip();
     9a8:	4b01      	ldr	r3, [pc, #4]	; (9b0 <init_mcu+0xc>)
     9aa:	4798      	blx	r3
}
     9ac:	bf00      	nop
     9ae:	bd80      	pop	{r7, pc}
     9b0:	000012f5 	.word	0x000012f5

000009b4 <UART_PORT_init>:
struct usart_sync_descriptor EDBG_UART;

struct spi_s_sync_descriptor SPI_0;

void UART_PORT_init(void)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     9b8:	4904      	ldr	r1, [pc, #16]	; (9cc <UART_PORT_init+0x18>)
     9ba:	2004      	movs	r0, #4
     9bc:	4b04      	ldr	r3, [pc, #16]	; (9d0 <UART_PORT_init+0x1c>)
     9be:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     9c0:	4904      	ldr	r1, [pc, #16]	; (9d4 <UART_PORT_init+0x20>)
     9c2:	2005      	movs	r0, #5
     9c4:	4b02      	ldr	r3, [pc, #8]	; (9d0 <UART_PORT_init+0x1c>)
     9c6:	4798      	blx	r3
}
     9c8:	bf00      	nop
     9ca:	bd80      	pop	{r7, pc}
     9cc:	00040003 	.word	0x00040003
     9d0:	00000915 	.word	0x00000915
     9d4:	00050003 	.word	0x00050003

000009d8 <UART_CLOCK_init>:

void UART_CLOCK_init(void)
{
     9d8:	b580      	push	{r7, lr}
     9da:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9dc:	2240      	movs	r2, #64	; 0x40
     9de:	2107      	movs	r1, #7
     9e0:	4806      	ldr	r0, [pc, #24]	; (9fc <UART_CLOCK_init+0x24>)
     9e2:	4b07      	ldr	r3, [pc, #28]	; (a00 <UART_CLOCK_init+0x28>)
     9e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9e6:	2243      	movs	r2, #67	; 0x43
     9e8:	2103      	movs	r1, #3
     9ea:	4804      	ldr	r0, [pc, #16]	; (9fc <UART_CLOCK_init+0x24>)
     9ec:	4b04      	ldr	r3, [pc, #16]	; (a00 <UART_CLOCK_init+0x28>)
     9ee:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     9f0:	4804      	ldr	r0, [pc, #16]	; (a04 <UART_CLOCK_init+0x2c>)
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UART_CLOCK_init+0x30>)
     9f4:	4798      	blx	r3
}
     9f6:	bf00      	nop
     9f8:	bd80      	pop	{r7, pc}
     9fa:	bf00      	nop
     9fc:	40001c00 	.word	0x40001c00
     a00:	00000383 	.word	0x00000383
     a04:	40000800 	.word	0x40000800
     a08:	000003a9 	.word	0x000003a9

00000a0c <UART_init>:

void UART_init(void)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	af00      	add	r7, sp, #0
	UART_CLOCK_init();
     a10:	4b05      	ldr	r3, [pc, #20]	; (a28 <UART_init+0x1c>)
     a12:	4798      	blx	r3
	usart_sync_init(&UART, SERCOM0, (void *)NULL);
     a14:	2200      	movs	r2, #0
     a16:	4905      	ldr	r1, [pc, #20]	; (a2c <UART_init+0x20>)
     a18:	4805      	ldr	r0, [pc, #20]	; (a30 <UART_init+0x24>)
     a1a:	4b06      	ldr	r3, [pc, #24]	; (a34 <UART_init+0x28>)
     a1c:	4798      	blx	r3
	UART_PORT_init();
     a1e:	4b06      	ldr	r3, [pc, #24]	; (a38 <UART_init+0x2c>)
     a20:	4798      	blx	r3
}
     a22:	bf00      	nop
     a24:	bd80      	pop	{r7, pc}
     a26:	bf00      	nop
     a28:	000009d9 	.word	0x000009d9
     a2c:	40003000 	.word	0x40003000
     a30:	20000054 	.word	0x20000054
     a34:	00001049 	.word	0x00001049
     a38:	000009b5 	.word	0x000009b5

00000a3c <EDBG_UART_PORT_init>:

void EDBG_UART_PORT_init(void)
{
     a3c:	b580      	push	{r7, lr}
     a3e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     a40:	4904      	ldr	r1, [pc, #16]	; (a54 <EDBG_UART_PORT_init+0x18>)
     a42:	2039      	movs	r0, #57	; 0x39
     a44:	4b04      	ldr	r3, [pc, #16]	; (a58 <EDBG_UART_PORT_init+0x1c>)
     a46:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     a48:	4904      	ldr	r1, [pc, #16]	; (a5c <EDBG_UART_PORT_init+0x20>)
     a4a:	2038      	movs	r0, #56	; 0x38
     a4c:	4b02      	ldr	r3, [pc, #8]	; (a58 <EDBG_UART_PORT_init+0x1c>)
     a4e:	4798      	blx	r3
}
     a50:	bf00      	nop
     a52:	bd80      	pop	{r7, pc}
     a54:	00390003 	.word	0x00390003
     a58:	00000915 	.word	0x00000915
     a5c:	00380003 	.word	0x00380003

00000a60 <EDBG_UART_CLOCK_init>:

void EDBG_UART_CLOCK_init(void)
{
     a60:	b580      	push	{r7, lr}
     a62:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a64:	2240      	movs	r2, #64	; 0x40
     a66:	2117      	movs	r1, #23
     a68:	4806      	ldr	r0, [pc, #24]	; (a84 <EDBG_UART_CLOCK_init+0x24>)
     a6a:	4b07      	ldr	r3, [pc, #28]	; (a88 <EDBG_UART_CLOCK_init+0x28>)
     a6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a6e:	2243      	movs	r2, #67	; 0x43
     a70:	2103      	movs	r1, #3
     a72:	4804      	ldr	r0, [pc, #16]	; (a84 <EDBG_UART_CLOCK_init+0x24>)
     a74:	4b04      	ldr	r3, [pc, #16]	; (a88 <EDBG_UART_CLOCK_init+0x28>)
     a76:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     a78:	4804      	ldr	r0, [pc, #16]	; (a8c <EDBG_UART_CLOCK_init+0x2c>)
     a7a:	4b05      	ldr	r3, [pc, #20]	; (a90 <EDBG_UART_CLOCK_init+0x30>)
     a7c:	4798      	blx	r3
}
     a7e:	bf00      	nop
     a80:	bd80      	pop	{r7, pc}
     a82:	bf00      	nop
     a84:	40001c00 	.word	0x40001c00
     a88:	00000383 	.word	0x00000383
     a8c:	40000800 	.word	0x40000800
     a90:	000003c9 	.word	0x000003c9

00000a94 <EDBG_UART_init>:

void EDBG_UART_init(void)
{
     a94:	b580      	push	{r7, lr}
     a96:	af00      	add	r7, sp, #0
	EDBG_UART_CLOCK_init();
     a98:	4b05      	ldr	r3, [pc, #20]	; (ab0 <EDBG_UART_init+0x1c>)
     a9a:	4798      	blx	r3
	usart_sync_init(&EDBG_UART, SERCOM2, (void *)NULL);
     a9c:	2200      	movs	r2, #0
     a9e:	4905      	ldr	r1, [pc, #20]	; (ab4 <EDBG_UART_init+0x20>)
     aa0:	4805      	ldr	r0, [pc, #20]	; (ab8 <EDBG_UART_init+0x24>)
     aa2:	4b06      	ldr	r3, [pc, #24]	; (abc <EDBG_UART_init+0x28>)
     aa4:	4798      	blx	r3
	EDBG_UART_PORT_init();
     aa6:	4b06      	ldr	r3, [pc, #24]	; (ac0 <EDBG_UART_init+0x2c>)
     aa8:	4798      	blx	r3
}
     aaa:	bf00      	nop
     aac:	bd80      	pop	{r7, pc}
     aae:	bf00      	nop
     ab0:	00000a61 	.word	0x00000a61
     ab4:	41012000 	.word	0x41012000
     ab8:	20000060 	.word	0x20000060
     abc:	00001049 	.word	0x00001049
     ac0:	00000a3d 	.word	0x00000a3d

00000ac4 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
     ac8:	2100      	movs	r1, #0
     aca:	2044      	movs	r0, #68	; 0x44
     acc:	4b17      	ldr	r3, [pc, #92]	; (b2c <SPI_0_PORT_init+0x68>)
     ace:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
     ad0:	2102      	movs	r1, #2
     ad2:	2044      	movs	r0, #68	; 0x44
     ad4:	4b16      	ldr	r3, [pc, #88]	; (b30 <SPI_0_PORT_init+0x6c>)
     ad6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
     ad8:	4916      	ldr	r1, [pc, #88]	; (b34 <SPI_0_PORT_init+0x70>)
     ada:	2044      	movs	r0, #68	; 0x44
     adc:	4b16      	ldr	r3, [pc, #88]	; (b38 <SPI_0_PORT_init+0x74>)
     ade:	4798      	blx	r3

	gpio_set_pin_level(PC05,
     ae0:	2100      	movs	r1, #0
     ae2:	2045      	movs	r0, #69	; 0x45
     ae4:	4b11      	ldr	r3, [pc, #68]	; (b2c <SPI_0_PORT_init+0x68>)
     ae6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
     ae8:	2102      	movs	r1, #2
     aea:	2045      	movs	r0, #69	; 0x45
     aec:	4b10      	ldr	r3, [pc, #64]	; (b30 <SPI_0_PORT_init+0x6c>)
     aee:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
     af0:	4912      	ldr	r1, [pc, #72]	; (b3c <SPI_0_PORT_init+0x78>)
     af2:	2045      	movs	r0, #69	; 0x45
     af4:	4b10      	ldr	r3, [pc, #64]	; (b38 <SPI_0_PORT_init+0x74>)
     af6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC06, GPIO_DIRECTION_IN);
     af8:	2101      	movs	r1, #1
     afa:	2046      	movs	r0, #70	; 0x46
     afc:	4b0c      	ldr	r3, [pc, #48]	; (b30 <SPI_0_PORT_init+0x6c>)
     afe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC06,
     b00:	2100      	movs	r1, #0
     b02:	2046      	movs	r0, #70	; 0x46
     b04:	4b0e      	ldr	r3, [pc, #56]	; (b40 <SPI_0_PORT_init+0x7c>)
     b06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC06, PINMUX_PC06C_SERCOM6_PAD2);
     b08:	490e      	ldr	r1, [pc, #56]	; (b44 <SPI_0_PORT_init+0x80>)
     b0a:	2046      	movs	r0, #70	; 0x46
     b0c:	4b0a      	ldr	r3, [pc, #40]	; (b38 <SPI_0_PORT_init+0x74>)
     b0e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
     b10:	2101      	movs	r1, #1
     b12:	2047      	movs	r0, #71	; 0x47
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <SPI_0_PORT_init+0x6c>)
     b16:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
     b18:	2100      	movs	r1, #0
     b1a:	2047      	movs	r0, #71	; 0x47
     b1c:	4b08      	ldr	r3, [pc, #32]	; (b40 <SPI_0_PORT_init+0x7c>)
     b1e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
     b20:	4909      	ldr	r1, [pc, #36]	; (b48 <SPI_0_PORT_init+0x84>)
     b22:	2047      	movs	r0, #71	; 0x47
     b24:	4b04      	ldr	r3, [pc, #16]	; (b38 <SPI_0_PORT_init+0x74>)
     b26:	4798      	blx	r3
}
     b28:	bf00      	nop
     b2a:	bd80      	pop	{r7, pc}
     b2c:	0000096d 	.word	0x0000096d
     b30:	00000935 	.word	0x00000935
     b34:	00440002 	.word	0x00440002
     b38:	00000915 	.word	0x00000915
     b3c:	00450002 	.word	0x00450002
     b40:	000008e1 	.word	0x000008e1
     b44:	00460002 	.word	0x00460002
     b48:	00470002 	.word	0x00470002

00000b4c <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
     b4c:	b580      	push	{r7, lr}
     b4e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b50:	2240      	movs	r2, #64	; 0x40
     b52:	2124      	movs	r1, #36	; 0x24
     b54:	4806      	ldr	r0, [pc, #24]	; (b70 <SPI_0_CLOCK_init+0x24>)
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <SPI_0_CLOCK_init+0x28>)
     b58:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b5a:	2243      	movs	r2, #67	; 0x43
     b5c:	2103      	movs	r1, #3
     b5e:	4804      	ldr	r0, [pc, #16]	; (b70 <SPI_0_CLOCK_init+0x24>)
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <SPI_0_CLOCK_init+0x28>)
     b62:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
     b64:	4804      	ldr	r0, [pc, #16]	; (b78 <SPI_0_CLOCK_init+0x2c>)
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <SPI_0_CLOCK_init+0x30>)
     b68:	4798      	blx	r3
}
     b6a:	bf00      	nop
     b6c:	bd80      	pop	{r7, pc}
     b6e:	bf00      	nop
     b70:	40001c00 	.word	0x40001c00
     b74:	00000383 	.word	0x00000383
     b78:	40000800 	.word	0x40000800
     b7c:	000003e9 	.word	0x000003e9

00000b80 <SPI_0_init>:

void SPI_0_init(void)
{
     b80:	b580      	push	{r7, lr}
     b82:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <SPI_0_init+0x18>)
     b86:	4798      	blx	r3
	spi_s_sync_init(&SPI_0, SERCOM6);
     b88:	4904      	ldr	r1, [pc, #16]	; (b9c <SPI_0_init+0x1c>)
     b8a:	4805      	ldr	r0, [pc, #20]	; (ba0 <SPI_0_init+0x20>)
     b8c:	4b05      	ldr	r3, [pc, #20]	; (ba4 <SPI_0_init+0x24>)
     b8e:	4798      	blx	r3
	SPI_0_PORT_init();
     b90:	4b05      	ldr	r3, [pc, #20]	; (ba8 <SPI_0_init+0x28>)
     b92:	4798      	blx	r3
}
     b94:	bf00      	nop
     b96:	bd80      	pop	{r7, pc}
     b98:	00000b4d 	.word	0x00000b4d
     b9c:	43000800 	.word	0x43000800
     ba0:	2000006c 	.word	0x2000006c
     ba4:	00000f55 	.word	0x00000f55
     ba8:	00000ac5 	.word	0x00000ac5

00000bac <system_init>:

void system_init(void)
{
     bac:	b580      	push	{r7, lr}
     bae:	af00      	add	r7, sp, #0
	init_mcu();
     bb0:	4b38      	ldr	r3, [pc, #224]	; (c94 <system_init+0xe8>)
     bb2:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     bb4:	2101      	movs	r1, #1
     bb6:	2021      	movs	r0, #33	; 0x21
     bb8:	4b37      	ldr	r3, [pc, #220]	; (c98 <system_init+0xec>)
     bba:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     bbc:	2100      	movs	r1, #0
     bbe:	2021      	movs	r0, #33	; 0x21
     bc0:	4b36      	ldr	r3, [pc, #216]	; (c9c <system_init+0xf0>)
     bc2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     bc4:	f04f 31ff 	mov.w	r1, #4294967295
     bc8:	2021      	movs	r0, #33	; 0x21
     bca:	4b35      	ldr	r3, [pc, #212]	; (ca0 <system_init+0xf4>)
     bcc:	4798      	blx	r3

	// GPIO on PB04

	gpio_set_pin_level(LED_green2,
     bce:	2100      	movs	r1, #0
     bd0:	2024      	movs	r0, #36	; 0x24
     bd2:	4b34      	ldr	r3, [pc, #208]	; (ca4 <system_init+0xf8>)
     bd4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED_green2, GPIO_DIRECTION_OUT);
     bd6:	2102      	movs	r1, #2
     bd8:	2024      	movs	r0, #36	; 0x24
     bda:	4b2f      	ldr	r3, [pc, #188]	; (c98 <system_init+0xec>)
     bdc:	4798      	blx	r3

	gpio_set_pin_function(LED_green2, GPIO_PIN_FUNCTION_OFF);
     bde:	f04f 31ff 	mov.w	r1, #4294967295
     be2:	2024      	movs	r0, #36	; 0x24
     be4:	4b2e      	ldr	r3, [pc, #184]	; (ca0 <system_init+0xf4>)
     be6:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT1, GPIO_DIRECTION_IN);
     be8:	2101      	movs	r1, #1
     bea:	2025      	movs	r0, #37	; 0x25
     bec:	4b2a      	ldr	r3, [pc, #168]	; (c98 <system_init+0xec>)
     bee:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT1,
     bf0:	2101      	movs	r1, #1
     bf2:	2025      	movs	r0, #37	; 0x25
     bf4:	4b29      	ldr	r3, [pc, #164]	; (c9c <system_init+0xf0>)
     bf6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT1, GPIO_PIN_FUNCTION_OFF);
     bf8:	f04f 31ff 	mov.w	r1, #4294967295
     bfc:	2025      	movs	r0, #37	; 0x25
     bfe:	4b28      	ldr	r3, [pc, #160]	; (ca0 <system_init+0xf4>)
     c00:	4798      	blx	r3

	// GPIO on PB06

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT2, GPIO_DIRECTION_IN);
     c02:	2101      	movs	r1, #1
     c04:	2026      	movs	r0, #38	; 0x26
     c06:	4b24      	ldr	r3, [pc, #144]	; (c98 <system_init+0xec>)
     c08:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT2,
     c0a:	2101      	movs	r1, #1
     c0c:	2026      	movs	r0, #38	; 0x26
     c0e:	4b23      	ldr	r3, [pc, #140]	; (c9c <system_init+0xf0>)
     c10:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT2, GPIO_PIN_FUNCTION_OFF);
     c12:	f04f 31ff 	mov.w	r1, #4294967295
     c16:	2026      	movs	r0, #38	; 0x26
     c18:	4b21      	ldr	r3, [pc, #132]	; (ca0 <system_init+0xf4>)
     c1a:	4798      	blx	r3

	// GPIO on PB14

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT3, GPIO_DIRECTION_IN);
     c1c:	2101      	movs	r1, #1
     c1e:	202e      	movs	r0, #46	; 0x2e
     c20:	4b1d      	ldr	r3, [pc, #116]	; (c98 <system_init+0xec>)
     c22:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT3,
     c24:	2101      	movs	r1, #1
     c26:	202e      	movs	r0, #46	; 0x2e
     c28:	4b1c      	ldr	r3, [pc, #112]	; (c9c <system_init+0xf0>)
     c2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT3, GPIO_PIN_FUNCTION_OFF);
     c2c:	f04f 31ff 	mov.w	r1, #4294967295
     c30:	202e      	movs	r0, #46	; 0x2e
     c32:	4b1b      	ldr	r3, [pc, #108]	; (ca0 <system_init+0xf4>)
     c34:	4798      	blx	r3

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT4, GPIO_DIRECTION_IN);
     c36:	2101      	movs	r1, #1
     c38:	202f      	movs	r0, #47	; 0x2f
     c3a:	4b17      	ldr	r3, [pc, #92]	; (c98 <system_init+0xec>)
     c3c:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT4,
     c3e:	2101      	movs	r1, #1
     c40:	202f      	movs	r0, #47	; 0x2f
     c42:	4b16      	ldr	r3, [pc, #88]	; (c9c <system_init+0xf0>)
     c44:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT4, GPIO_PIN_FUNCTION_OFF);
     c46:	f04f 31ff 	mov.w	r1, #4294967295
     c4a:	202f      	movs	r0, #47	; 0x2f
     c4c:	4b14      	ldr	r3, [pc, #80]	; (ca0 <system_init+0xf4>)
     c4e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     c50:	2101      	movs	r1, #1
     c52:	203f      	movs	r0, #63	; 0x3f
     c54:	4b10      	ldr	r3, [pc, #64]	; (c98 <system_init+0xec>)
     c56:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     c58:	2101      	movs	r1, #1
     c5a:	203f      	movs	r0, #63	; 0x3f
     c5c:	4b0f      	ldr	r3, [pc, #60]	; (c9c <system_init+0xf0>)
     c5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     c60:	f04f 31ff 	mov.w	r1, #4294967295
     c64:	203f      	movs	r0, #63	; 0x3f
     c66:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <system_init+0xf4>)
     c68:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     c6a:	2100      	movs	r1, #0
     c6c:	2052      	movs	r0, #82	; 0x52
     c6e:	4b0d      	ldr	r3, [pc, #52]	; (ca4 <system_init+0xf8>)
     c70:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     c72:	2102      	movs	r1, #2
     c74:	2052      	movs	r0, #82	; 0x52
     c76:	4b08      	ldr	r3, [pc, #32]	; (c98 <system_init+0xec>)
     c78:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     c7a:	f04f 31ff 	mov.w	r1, #4294967295
     c7e:	2052      	movs	r0, #82	; 0x52
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <system_init+0xf4>)
     c82:	4798      	blx	r3

	UART_init();
     c84:	4b08      	ldr	r3, [pc, #32]	; (ca8 <system_init+0xfc>)
     c86:	4798      	blx	r3

	EDBG_UART_init();
     c88:	4b08      	ldr	r3, [pc, #32]	; (cac <system_init+0x100>)
     c8a:	4798      	blx	r3

	SPI_0_init();
     c8c:	4b08      	ldr	r3, [pc, #32]	; (cb0 <system_init+0x104>)
     c8e:	4798      	blx	r3
}
     c90:	bf00      	nop
     c92:	bd80      	pop	{r7, pc}
     c94:	000009a5 	.word	0x000009a5
     c98:	00000935 	.word	0x00000935
     c9c:	000008e1 	.word	0x000008e1
     ca0:	00000915 	.word	0x00000915
     ca4:	0000096d 	.word	0x0000096d
     ca8:	00000a0d 	.word	0x00000a0d
     cac:	00000a95 	.word	0x00000a95
     cb0:	00000b81 	.word	0x00000b81

00000cb4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     cb4:	b580      	push	{r7, lr}
     cb6:	b084      	sub	sp, #16
     cb8:	af00      	add	r7, sp, #0
     cba:	60f8      	str	r0, [r7, #12]
     cbc:	60b9      	str	r1, [r7, #8]
     cbe:	4613      	mov	r3, r2
     cc0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	2b00      	cmp	r3, #0
     cc6:	d004      	beq.n	cd2 <io_write+0x1e>
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	2b00      	cmp	r3, #0
     ccc:	d001      	beq.n	cd2 <io_write+0x1e>
     cce:	2301      	movs	r3, #1
     cd0:	e000      	b.n	cd4 <io_write+0x20>
     cd2:	2300      	movs	r3, #0
     cd4:	f003 0301 	and.w	r3, r3, #1
     cd8:	b2db      	uxtb	r3, r3
     cda:	2234      	movs	r2, #52	; 0x34
     cdc:	4907      	ldr	r1, [pc, #28]	; (cfc <io_write+0x48>)
     cde:	4618      	mov	r0, r3
     ce0:	4b07      	ldr	r3, [pc, #28]	; (d00 <io_write+0x4c>)
     ce2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     ce4:	68fb      	ldr	r3, [r7, #12]
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	88fa      	ldrh	r2, [r7, #6]
     cea:	68b9      	ldr	r1, [r7, #8]
     cec:	68f8      	ldr	r0, [r7, #12]
     cee:	4798      	blx	r3
     cf0:	4603      	mov	r3, r0
}
     cf2:	4618      	mov	r0, r3
     cf4:	3710      	adds	r7, #16
     cf6:	46bd      	mov	sp, r7
     cf8:	bd80      	pop	{r7, pc}
     cfa:	bf00      	nop
     cfc:	00002440 	.word	0x00002440
     d00:	00001299 	.word	0x00001299

00000d04 <_spi_s_sync_xfer>:
 *  \return Error or number of characters transferred.
 *  \retval <0 Error.
 *  \retval >=0 Number of characters transferred.
 */
static int32_t _spi_s_sync_xfer(struct spi_s_sync_descriptor *spi, const struct spi_xfer *xfer, const uint8_t flags)
{
     d04:	b580      	push	{r7, lr}
     d06:	b088      	sub	sp, #32
     d08:	af00      	add	r7, sp, #0
     d0a:	60f8      	str	r0, [r7, #12]
     d0c:	60b9      	str	r1, [r7, #8]
     d0e:	4613      	mov	r3, r2
     d10:	71fb      	strb	r3, [r7, #7]
		uint16_t u16;
		uint8_t  u8[4];
	} tmp;
	uint32_t n_bytes;

	ASSERT(spi && xfer);
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	2b00      	cmp	r3, #0
     d16:	d004      	beq.n	d22 <_spi_s_sync_xfer+0x1e>
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d001      	beq.n	d22 <_spi_s_sync_xfer+0x1e>
     d1e:	2301      	movs	r3, #1
     d20:	e000      	b.n	d24 <_spi_s_sync_xfer+0x20>
     d22:	2300      	movs	r3, #0
     d24:	f003 0301 	and.w	r3, r3, #1
     d28:	b2db      	uxtb	r3, r3
     d2a:	2248      	movs	r2, #72	; 0x48
     d2c:	4955      	ldr	r1, [pc, #340]	; (e84 <_spi_s_sync_xfer+0x180>)
     d2e:	4618      	mov	r0, r3
     d30:	4b55      	ldr	r3, [pc, #340]	; (e88 <_spi_s_sync_xfer+0x184>)
     d32:	4798      	blx	r3

	if (xfer->size == 0) {
     d34:	68bb      	ldr	r3, [r7, #8]
     d36:	689b      	ldr	r3, [r3, #8]
     d38:	2b00      	cmp	r3, #0
     d3a:	d101      	bne.n	d40 <_spi_s_sync_xfer+0x3c>
		return 0;
     d3c:	2300      	movs	r3, #0
     d3e:	e09c      	b.n	e7a <_spi_s_sync_xfer+0x176>
	}

	n_bytes = xfer->size;
     d40:	68bb      	ldr	r3, [r7, #8]
     d42:	689b      	ldr	r3, [r3, #8]
     d44:	617b      	str	r3, [r7, #20]
	if (spi->dev.char_size > 1) {
     d46:	68fb      	ldr	r3, [r7, #12]
     d48:	7a1b      	ldrb	r3, [r3, #8]
     d4a:	2b01      	cmp	r3, #1
     d4c:	d902      	bls.n	d54 <_spi_s_sync_xfer+0x50>
		n_bytes <<= 1;
     d4e:	697b      	ldr	r3, [r7, #20]
     d50:	005b      	lsls	r3, r3, #1
     d52:	617b      	str	r3, [r7, #20]
	}

	tmp.u16 = 0;
     d54:	2300      	movs	r3, #0
     d56:	823b      	strh	r3, [r7, #16]
	for (txcnt = 0, rxcnt = 0; txcnt < n_bytes && rxcnt < n_bytes;) {
     d58:	2300      	movs	r3, #0
     d5a:	61fb      	str	r3, [r7, #28]
     d5c:	2300      	movs	r3, #0
     d5e:	61bb      	str	r3, [r7, #24]
     d60:	e06a      	b.n	e38 <_spi_s_sync_xfer+0x134>
		if (_spi_s_sync_is_error(&spi->dev)) {
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	3304      	adds	r3, #4
     d66:	4618      	mov	r0, r3
     d68:	4b48      	ldr	r3, [pc, #288]	; (e8c <_spi_s_sync_xfer+0x188>)
     d6a:	4798      	blx	r3
     d6c:	4603      	mov	r3, r0
     d6e:	2b00      	cmp	r3, #0
     d70:	d002      	beq.n	d78 <_spi_s_sync_xfer+0x74>
			return ERR_IO;
     d72:	f06f 0305 	mvn.w	r3, #5
     d76:	e080      	b.n	e7a <_spi_s_sync_xfer+0x176>
		}
		if ((flags & SPI_XFER_TX_EN) && _spi_s_sync_is_tx_ready(&spi->dev)) {
     d78:	79fb      	ldrb	r3, [r7, #7]
     d7a:	f003 0301 	and.w	r3, r3, #1
     d7e:	2b00      	cmp	r3, #0
     d80:	d022      	beq.n	dc8 <_spi_s_sync_xfer+0xc4>
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	3304      	adds	r3, #4
     d86:	4618      	mov	r0, r3
     d88:	4b41      	ldr	r3, [pc, #260]	; (e90 <_spi_s_sync_xfer+0x18c>)
     d8a:	4798      	blx	r3
     d8c:	4603      	mov	r3, r0
     d8e:	2b00      	cmp	r3, #0
     d90:	d01a      	beq.n	dc8 <_spi_s_sync_xfer+0xc4>
			tmp.u8[0] = xfer->txbuf[txcnt++];
     d92:	68bb      	ldr	r3, [r7, #8]
     d94:	681a      	ldr	r2, [r3, #0]
     d96:	69fb      	ldr	r3, [r7, #28]
     d98:	1c59      	adds	r1, r3, #1
     d9a:	61f9      	str	r1, [r7, #28]
     d9c:	4413      	add	r3, r2
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	743b      	strb	r3, [r7, #16]
			if (spi->dev.char_size > 1) {
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	7a1b      	ldrb	r3, [r3, #8]
     da6:	2b01      	cmp	r3, #1
     da8:	d907      	bls.n	dba <_spi_s_sync_xfer+0xb6>
				tmp.u8[1] = xfer->txbuf[txcnt++];
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	681a      	ldr	r2, [r3, #0]
     dae:	69fb      	ldr	r3, [r7, #28]
     db0:	1c59      	adds	r1, r3, #1
     db2:	61f9      	str	r1, [r7, #28]
     db4:	4413      	add	r3, r2
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	747b      	strb	r3, [r7, #17]
			}
			_spi_s_sync_write_one(&spi->dev, tmp.u16);
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	3304      	adds	r3, #4
     dbe:	8a3a      	ldrh	r2, [r7, #16]
     dc0:	4611      	mov	r1, r2
     dc2:	4618      	mov	r0, r3
     dc4:	4b33      	ldr	r3, [pc, #204]	; (e94 <_spi_s_sync_xfer+0x190>)
     dc6:	4798      	blx	r3
		}
		if ((flags & SPI_XFER_RX_EN) && _spi_s_sync_is_rx_ready(&spi->dev)) {
     dc8:	79fb      	ldrb	r3, [r7, #7]
     dca:	f003 0302 	and.w	r3, r3, #2
     dce:	2b00      	cmp	r3, #0
     dd0:	d026      	beq.n	e20 <_spi_s_sync_xfer+0x11c>
     dd2:	68fb      	ldr	r3, [r7, #12]
     dd4:	3304      	adds	r3, #4
     dd6:	4618      	mov	r0, r3
     dd8:	4b2f      	ldr	r3, [pc, #188]	; (e98 <_spi_s_sync_xfer+0x194>)
     dda:	4798      	blx	r3
     ddc:	4603      	mov	r3, r0
     dde:	2b00      	cmp	r3, #0
     de0:	d01e      	beq.n	e20 <_spi_s_sync_xfer+0x11c>
			tmp.u16 = _spi_s_sync_read_one(&spi->dev);
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	3304      	adds	r3, #4
     de6:	4618      	mov	r0, r3
     de8:	4b2c      	ldr	r3, [pc, #176]	; (e9c <_spi_s_sync_xfer+0x198>)
     dea:	4798      	blx	r3
     dec:	4603      	mov	r3, r0
     dee:	823b      	strh	r3, [r7, #16]

			if (xfer->rxbuf) {
     df0:	68bb      	ldr	r3, [r7, #8]
     df2:	685b      	ldr	r3, [r3, #4]
     df4:	2b00      	cmp	r3, #0
     df6:	d013      	beq.n	e20 <_spi_s_sync_xfer+0x11c>
				xfer->rxbuf[rxcnt++] = tmp.u8[0];
     df8:	68bb      	ldr	r3, [r7, #8]
     dfa:	685a      	ldr	r2, [r3, #4]
     dfc:	69bb      	ldr	r3, [r7, #24]
     dfe:	1c59      	adds	r1, r3, #1
     e00:	61b9      	str	r1, [r7, #24]
     e02:	4413      	add	r3, r2
     e04:	7c3a      	ldrb	r2, [r7, #16]
     e06:	701a      	strb	r2, [r3, #0]
				if (spi->dev.char_size > 1) {
     e08:	68fb      	ldr	r3, [r7, #12]
     e0a:	7a1b      	ldrb	r3, [r3, #8]
     e0c:	2b01      	cmp	r3, #1
     e0e:	d907      	bls.n	e20 <_spi_s_sync_xfer+0x11c>
					xfer->rxbuf[rxcnt++] = tmp.u8[1];
     e10:	68bb      	ldr	r3, [r7, #8]
     e12:	685a      	ldr	r2, [r3, #4]
     e14:	69bb      	ldr	r3, [r7, #24]
     e16:	1c59      	adds	r1, r3, #1
     e18:	61b9      	str	r1, [r7, #24]
     e1a:	4413      	add	r3, r2
     e1c:	7c7a      	ldrb	r2, [r7, #17]
     e1e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (spi->break_on_ss_det && _spi_s_sync_is_ss_deactivated(&spi->dev)) {
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	7d1b      	ldrb	r3, [r3, #20]
     e24:	2b00      	cmp	r3, #0
     e26:	d007      	beq.n	e38 <_spi_s_sync_xfer+0x134>
     e28:	68fb      	ldr	r3, [r7, #12]
     e2a:	3304      	adds	r3, #4
     e2c:	4618      	mov	r0, r3
     e2e:	4b1c      	ldr	r3, [pc, #112]	; (ea0 <_spi_s_sync_xfer+0x19c>)
     e30:	4798      	blx	r3
     e32:	4603      	mov	r3, r0
     e34:	2b00      	cmp	r3, #0
     e36:	d108      	bne.n	e4a <_spi_s_sync_xfer+0x146>
	for (txcnt = 0, rxcnt = 0; txcnt < n_bytes && rxcnt < n_bytes;) {
     e38:	69fa      	ldr	r2, [r7, #28]
     e3a:	697b      	ldr	r3, [r7, #20]
     e3c:	429a      	cmp	r2, r3
     e3e:	d205      	bcs.n	e4c <_spi_s_sync_xfer+0x148>
     e40:	69ba      	ldr	r2, [r7, #24]
     e42:	697b      	ldr	r3, [r7, #20]
     e44:	429a      	cmp	r2, r3
     e46:	d38c      	bcc.n	d62 <_spi_s_sync_xfer+0x5e>
     e48:	e000      	b.n	e4c <_spi_s_sync_xfer+0x148>
			break;
     e4a:	bf00      	nop
		}
	}

	if (spi->dev.char_size <= 1) {
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	7a1b      	ldrb	r3, [r3, #8]
     e50:	2b01      	cmp	r3, #1
     e52:	d808      	bhi.n	e66 <_spi_s_sync_xfer+0x162>
		return (flags & SPI_XFER_RX_EN) ? rxcnt : txcnt;
     e54:	79fb      	ldrb	r3, [r7, #7]
     e56:	f003 0302 	and.w	r3, r3, #2
     e5a:	2b00      	cmp	r3, #0
     e5c:	d001      	beq.n	e62 <_spi_s_sync_xfer+0x15e>
     e5e:	69bb      	ldr	r3, [r7, #24]
     e60:	e00b      	b.n	e7a <_spi_s_sync_xfer+0x176>
     e62:	69fb      	ldr	r3, [r7, #28]
     e64:	e009      	b.n	e7a <_spi_s_sync_xfer+0x176>
	}
	return ((flags & SPI_XFER_RX_EN) ? rxcnt : txcnt) >> 1;
     e66:	79fb      	ldrb	r3, [r7, #7]
     e68:	f003 0302 	and.w	r3, r3, #2
     e6c:	2b00      	cmp	r3, #0
     e6e:	d002      	beq.n	e76 <_spi_s_sync_xfer+0x172>
     e70:	69bb      	ldr	r3, [r7, #24]
     e72:	085b      	lsrs	r3, r3, #1
     e74:	e001      	b.n	e7a <_spi_s_sync_xfer+0x176>
     e76:	69fb      	ldr	r3, [r7, #28]
     e78:	085b      	lsrs	r3, r3, #1
}
     e7a:	4618      	mov	r0, r3
     e7c:	3720      	adds	r7, #32
     e7e:	46bd      	mov	sp, r7
     e80:	bd80      	pop	{r7, pc}
     e82:	bf00      	nop
     e84:	00002454 	.word	0x00002454
     e88:	00001299 	.word	0x00001299
     e8c:	000022d9 	.word	0x000022d9
     e90:	000021b9 	.word	0x000021b9
     e94:	00002111 	.word	0x00002111
     e98:	00002215 	.word	0x00002215
     e9c:	00002169 	.word	0x00002169
     ea0:	00002271 	.word	0x00002271

00000ea4 <_spi_s_sync_io_write>:
 *  \retval 0 Success.
 *  \retval -1 Busy, transfer in progress.
 *  \retval -3 Parameter error.
 */
static int32_t _spi_s_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t size)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b088      	sub	sp, #32
     ea8:	af00      	add	r7, sp, #0
     eaa:	60f8      	str	r0, [r7, #12]
     eac:	60b9      	str	r1, [r7, #8]
     eae:	4613      	mov	r3, r2
     eb0:	80fb      	strh	r3, [r7, #6]
	struct spi_s_sync_descriptor *spi;
	struct spi_xfer               xfer;

	ASSERT(io);
     eb2:	68fb      	ldr	r3, [r7, #12]
     eb4:	2b00      	cmp	r3, #0
     eb6:	bf14      	ite	ne
     eb8:	2301      	movne	r3, #1
     eba:	2300      	moveq	r3, #0
     ebc:	b2db      	uxtb	r3, r3
     ebe:	2288      	movs	r2, #136	; 0x88
     ec0:	490b      	ldr	r1, [pc, #44]	; (ef0 <_spi_s_sync_io_write+0x4c>)
     ec2:	4618      	mov	r0, r3
     ec4:	4b0b      	ldr	r3, [pc, #44]	; (ef4 <_spi_s_sync_io_write+0x50>)
     ec6:	4798      	blx	r3

	spi = CONTAINER_OF(io, struct spi_s_sync_descriptor, io);
     ec8:	68fb      	ldr	r3, [r7, #12]
     eca:	3b0c      	subs	r3, #12
     ecc:	61fb      	str	r3, [r7, #28]

	xfer.txbuf = (uint8_t *)buf;
     ece:	68bb      	ldr	r3, [r7, #8]
     ed0:	613b      	str	r3, [r7, #16]
	xfer.size  = size;
     ed2:	88fb      	ldrh	r3, [r7, #6]
     ed4:	61bb      	str	r3, [r7, #24]
	return _spi_s_sync_xfer(spi, &xfer, SPI_XFER_TX_EN);
     ed6:	f107 0310 	add.w	r3, r7, #16
     eda:	2201      	movs	r2, #1
     edc:	4619      	mov	r1, r3
     ede:	69f8      	ldr	r0, [r7, #28]
     ee0:	4b05      	ldr	r3, [pc, #20]	; (ef8 <_spi_s_sync_io_write+0x54>)
     ee2:	4798      	blx	r3
     ee4:	4603      	mov	r3, r0
}
     ee6:	4618      	mov	r0, r3
     ee8:	3720      	adds	r7, #32
     eea:	46bd      	mov	sp, r7
     eec:	bd80      	pop	{r7, pc}
     eee:	bf00      	nop
     ef0:	00002454 	.word	0x00002454
     ef4:	00001299 	.word	0x00001299
     ef8:	00000d05 	.word	0x00000d05

00000efc <_spi_s_sync_io_read>:
 *  \return Read result.
 *  \retval n Number of characters read.
 *  \retval <0 Error.
 */
static int32_t _spi_s_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t size)
{
     efc:	b580      	push	{r7, lr}
     efe:	b088      	sub	sp, #32
     f00:	af00      	add	r7, sp, #0
     f02:	60f8      	str	r0, [r7, #12]
     f04:	60b9      	str	r1, [r7, #8]
     f06:	4613      	mov	r3, r2
     f08:	80fb      	strh	r3, [r7, #6]
	struct spi_s_sync_descriptor *spi;
	struct spi_xfer               xfer;

	ASSERT(io);
     f0a:	68fb      	ldr	r3, [r7, #12]
     f0c:	2b00      	cmp	r3, #0
     f0e:	bf14      	ite	ne
     f10:	2301      	movne	r3, #1
     f12:	2300      	moveq	r3, #0
     f14:	b2db      	uxtb	r3, r3
     f16:	22a6      	movs	r2, #166	; 0xa6
     f18:	490b      	ldr	r1, [pc, #44]	; (f48 <_spi_s_sync_io_read+0x4c>)
     f1a:	4618      	mov	r0, r3
     f1c:	4b0b      	ldr	r3, [pc, #44]	; (f4c <_spi_s_sync_io_read+0x50>)
     f1e:	4798      	blx	r3

	spi = CONTAINER_OF(io, struct spi_s_sync_descriptor, io);
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	3b0c      	subs	r3, #12
     f24:	61fb      	str	r3, [r7, #28]

	xfer.rxbuf = (uint8_t *)buf;
     f26:	68bb      	ldr	r3, [r7, #8]
     f28:	617b      	str	r3, [r7, #20]
	xfer.size  = size;
     f2a:	88fb      	ldrh	r3, [r7, #6]
     f2c:	61bb      	str	r3, [r7, #24]
	return _spi_s_sync_xfer(spi, &xfer, SPI_XFER_RX_EN);
     f2e:	f107 0310 	add.w	r3, r7, #16
     f32:	2202      	movs	r2, #2
     f34:	4619      	mov	r1, r3
     f36:	69f8      	ldr	r0, [r7, #28]
     f38:	4b05      	ldr	r3, [pc, #20]	; (f50 <_spi_s_sync_io_read+0x54>)
     f3a:	4798      	blx	r3
     f3c:	4603      	mov	r3, r0
}
     f3e:	4618      	mov	r0, r3
     f40:	3720      	adds	r7, #32
     f42:	46bd      	mov	sp, r7
     f44:	bd80      	pop	{r7, pc}
     f46:	bf00      	nop
     f48:	00002454 	.word	0x00002454
     f4c:	00001299 	.word	0x00001299
     f50:	00000d05 	.word	0x00000d05

00000f54 <spi_s_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_s_sync_hpl_interface *)func;
}

int32_t spi_s_sync_init(struct spi_s_sync_descriptor *spi, void *const hw)
{
     f54:	b580      	push	{r7, lr}
     f56:	b084      	sub	sp, #16
     f58:	af00      	add	r7, sp, #0
     f5a:	6078      	str	r0, [r7, #4]
     f5c:	6039      	str	r1, [r7, #0]
	int32_t rc;
	ASSERT(spi && hw);
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	2b00      	cmp	r3, #0
     f62:	d004      	beq.n	f6e <spi_s_sync_init+0x1a>
     f64:	683b      	ldr	r3, [r7, #0]
     f66:	2b00      	cmp	r3, #0
     f68:	d001      	beq.n	f6e <spi_s_sync_init+0x1a>
     f6a:	2301      	movs	r3, #1
     f6c:	e000      	b.n	f70 <spi_s_sync_init+0x1c>
     f6e:	2300      	movs	r3, #0
     f70:	f003 0301 	and.w	r3, r3, #1
     f74:	b2db      	uxtb	r3, r3
     f76:	22bb      	movs	r2, #187	; 0xbb
     f78:	490d      	ldr	r1, [pc, #52]	; (fb0 <spi_s_sync_init+0x5c>)
     f7a:	4618      	mov	r0, r3
     f7c:	4b0d      	ldr	r3, [pc, #52]	; (fb4 <spi_s_sync_init+0x60>)
     f7e:	4798      	blx	r3
	rc = _spi_s_sync_init(&spi->dev, hw);
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	3304      	adds	r3, #4
     f84:	6839      	ldr	r1, [r7, #0]
     f86:	4618      	mov	r0, r3
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <spi_s_sync_init+0x64>)
     f8a:	4798      	blx	r3
     f8c:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
     f8e:	68fb      	ldr	r3, [r7, #12]
     f90:	2b00      	cmp	r3, #0
     f92:	da01      	bge.n	f98 <spi_s_sync_init+0x44>
		return rc;
     f94:	68fb      	ldr	r3, [r7, #12]
     f96:	e006      	b.n	fa6 <spi_s_sync_init+0x52>
	}

	spi->io.read  = _spi_s_sync_io_read;
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	4a08      	ldr	r2, [pc, #32]	; (fbc <spi_s_sync_init+0x68>)
     f9c:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_s_sync_io_write;
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	4a07      	ldr	r2, [pc, #28]	; (fc0 <spi_s_sync_init+0x6c>)
     fa2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
     fa4:	2300      	movs	r3, #0
}
     fa6:	4618      	mov	r0, r3
     fa8:	3710      	adds	r7, #16
     faa:	46bd      	mov	sp, r7
     fac:	bd80      	pop	{r7, pc}
     fae:	bf00      	nop
     fb0:	00002454 	.word	0x00002454
     fb4:	00001299 	.word	0x00001299
     fb8:	000020a1 	.word	0x000020a1
     fbc:	00000efd 	.word	0x00000efd
     fc0:	00000ea5 	.word	0x00000ea5

00000fc4 <spi_s_sync_enable>:
	ASSERT(spi);
	_spi_s_sync_deinit(&spi->dev);
}

void spi_s_sync_enable(struct spi_s_sync_descriptor *spi)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	b082      	sub	sp, #8
     fc8:	af00      	add	r7, sp, #0
     fca:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	2b00      	cmp	r3, #0
     fd0:	bf14      	ite	ne
     fd2:	2301      	movne	r3, #1
     fd4:	2300      	moveq	r3, #0
     fd6:	b2db      	uxtb	r3, r3
     fd8:	22d0      	movs	r2, #208	; 0xd0
     fda:	4906      	ldr	r1, [pc, #24]	; (ff4 <spi_s_sync_enable+0x30>)
     fdc:	4618      	mov	r0, r3
     fde:	4b06      	ldr	r3, [pc, #24]	; (ff8 <spi_s_sync_enable+0x34>)
     fe0:	4798      	blx	r3
	_spi_s_sync_enable(&spi->dev);
     fe2:	687b      	ldr	r3, [r7, #4]
     fe4:	3304      	adds	r3, #4
     fe6:	4618      	mov	r0, r3
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <spi_s_sync_enable+0x38>)
     fea:	4798      	blx	r3
}
     fec:	bf00      	nop
     fee:	3708      	adds	r7, #8
     ff0:	46bd      	mov	sp, r7
     ff2:	bd80      	pop	{r7, pc}
     ff4:	00002454 	.word	0x00002454
     ff8:	00001299 	.word	0x00001299
     ffc:	000020c1 	.word	0x000020c1

00001000 <spi_s_sync_get_io_descriptor>:
{
	return _spi_s_sync_xfer(spi, xfer, SPI_XFER_RX_EN | SPI_XFER_TX_EN);
}

int32_t spi_s_sync_get_io_descriptor(struct spi_s_sync_descriptor *spi, struct io_descriptor **io)
{
    1000:	b580      	push	{r7, lr}
    1002:	b082      	sub	sp, #8
    1004:	af00      	add	r7, sp, #0
    1006:	6078      	str	r0, [r7, #4]
    1008:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	2b00      	cmp	r3, #0
    100e:	d004      	beq.n	101a <spi_s_sync_get_io_descriptor+0x1a>
    1010:	683b      	ldr	r3, [r7, #0]
    1012:	2b00      	cmp	r3, #0
    1014:	d001      	beq.n	101a <spi_s_sync_get_io_descriptor+0x1a>
    1016:	2301      	movs	r3, #1
    1018:	e000      	b.n	101c <spi_s_sync_get_io_descriptor+0x1c>
    101a:	2300      	movs	r3, #0
    101c:	f003 0301 	and.w	r3, r3, #1
    1020:	b2db      	uxtb	r3, r3
    1022:	22fa      	movs	r2, #250	; 0xfa
    1024:	4906      	ldr	r1, [pc, #24]	; (1040 <spi_s_sync_get_io_descriptor+0x40>)
    1026:	4618      	mov	r0, r3
    1028:	4b06      	ldr	r3, [pc, #24]	; (1044 <spi_s_sync_get_io_descriptor+0x44>)
    102a:	4798      	blx	r3
	*io = &spi->io;
    102c:	687b      	ldr	r3, [r7, #4]
    102e:	f103 020c 	add.w	r2, r3, #12
    1032:	683b      	ldr	r3, [r7, #0]
    1034:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1036:	2300      	movs	r3, #0
}
    1038:	4618      	mov	r0, r3
    103a:	3708      	adds	r7, #8
    103c:	46bd      	mov	sp, r7
    103e:	bd80      	pop	{r7, pc}
    1040:	00002454 	.word	0x00002454
    1044:	00001299 	.word	0x00001299

00001048 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1048:	b580      	push	{r7, lr}
    104a:	b086      	sub	sp, #24
    104c:	af00      	add	r7, sp, #0
    104e:	60f8      	str	r0, [r7, #12]
    1050:	60b9      	str	r1, [r7, #8]
    1052:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	2b00      	cmp	r3, #0
    1058:	d004      	beq.n	1064 <usart_sync_init+0x1c>
    105a:	68bb      	ldr	r3, [r7, #8]
    105c:	2b00      	cmp	r3, #0
    105e:	d001      	beq.n	1064 <usart_sync_init+0x1c>
    1060:	2301      	movs	r3, #1
    1062:	e000      	b.n	1066 <usart_sync_init+0x1e>
    1064:	2300      	movs	r3, #0
    1066:	f003 0301 	and.w	r3, r3, #1
    106a:	b2db      	uxtb	r3, r3
    106c:	2234      	movs	r2, #52	; 0x34
    106e:	490d      	ldr	r1, [pc, #52]	; (10a4 <usart_sync_init+0x5c>)
    1070:	4618      	mov	r0, r3
    1072:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <usart_sync_init+0x60>)
    1074:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	3308      	adds	r3, #8
    107a:	68b9      	ldr	r1, [r7, #8]
    107c:	4618      	mov	r0, r3
    107e:	4b0b      	ldr	r3, [pc, #44]	; (10ac <usart_sync_init+0x64>)
    1080:	4798      	blx	r3
    1082:	6178      	str	r0, [r7, #20]
	if (init_status) {
    1084:	697b      	ldr	r3, [r7, #20]
    1086:	2b00      	cmp	r3, #0
    1088:	d001      	beq.n	108e <usart_sync_init+0x46>
		return init_status;
    108a:	697b      	ldr	r3, [r7, #20]
    108c:	e006      	b.n	109c <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	4a07      	ldr	r2, [pc, #28]	; (10b0 <usart_sync_init+0x68>)
    1092:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    1094:	68fb      	ldr	r3, [r7, #12]
    1096:	4a07      	ldr	r2, [pc, #28]	; (10b4 <usart_sync_init+0x6c>)
    1098:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    109a:	2300      	movs	r3, #0
}
    109c:	4618      	mov	r0, r3
    109e:	3718      	adds	r7, #24
    10a0:	46bd      	mov	sp, r7
    10a2:	bd80      	pop	{r7, pc}
    10a4:	00002470 	.word	0x00002470
    10a8:	00001299 	.word	0x00001299
    10ac:	00001a41 	.word	0x00001a41
    10b0:	00001205 	.word	0x00001205
    10b4:	0000113d 	.word	0x0000113d

000010b8 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	af00      	add	r7, sp, #0
    10be:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	2b00      	cmp	r3, #0
    10c4:	bf14      	ite	ne
    10c6:	2301      	movne	r3, #1
    10c8:	2300      	moveq	r3, #0
    10ca:	b2db      	uxtb	r3, r3
    10cc:	2253      	movs	r2, #83	; 0x53
    10ce:	4907      	ldr	r1, [pc, #28]	; (10ec <usart_sync_enable+0x34>)
    10d0:	4618      	mov	r0, r3
    10d2:	4b07      	ldr	r3, [pc, #28]	; (10f0 <usart_sync_enable+0x38>)
    10d4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	3308      	adds	r3, #8
    10da:	4618      	mov	r0, r3
    10dc:	4b05      	ldr	r3, [pc, #20]	; (10f4 <usart_sync_enable+0x3c>)
    10de:	4798      	blx	r3

	return ERR_NONE;
    10e0:	2300      	movs	r3, #0
}
    10e2:	4618      	mov	r0, r3
    10e4:	3708      	adds	r7, #8
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop
    10ec:	00002470 	.word	0x00002470
    10f0:	00001299 	.word	0x00001299
    10f4:	00001a85 	.word	0x00001a85

000010f8 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    10f8:	b580      	push	{r7, lr}
    10fa:	b082      	sub	sp, #8
    10fc:	af00      	add	r7, sp, #0
    10fe:	6078      	str	r0, [r7, #4]
    1100:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	2b00      	cmp	r3, #0
    1106:	d004      	beq.n	1112 <usart_sync_get_io_descriptor+0x1a>
    1108:	683b      	ldr	r3, [r7, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	d001      	beq.n	1112 <usart_sync_get_io_descriptor+0x1a>
    110e:	2301      	movs	r3, #1
    1110:	e000      	b.n	1114 <usart_sync_get_io_descriptor+0x1c>
    1112:	2300      	movs	r3, #0
    1114:	f003 0301 	and.w	r3, r3, #1
    1118:	b2db      	uxtb	r3, r3
    111a:	2269      	movs	r2, #105	; 0x69
    111c:	4905      	ldr	r1, [pc, #20]	; (1134 <usart_sync_get_io_descriptor+0x3c>)
    111e:	4618      	mov	r0, r3
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <usart_sync_get_io_descriptor+0x40>)
    1122:	4798      	blx	r3

	*io = &descr->io;
    1124:	687a      	ldr	r2, [r7, #4]
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    112a:	2300      	movs	r3, #0
}
    112c:	4618      	mov	r0, r3
    112e:	3708      	adds	r7, #8
    1130:	46bd      	mov	sp, r7
    1132:	bd80      	pop	{r7, pc}
    1134:	00002470 	.word	0x00002470
    1138:	00001299 	.word	0x00001299

0000113c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    113c:	b580      	push	{r7, lr}
    113e:	b086      	sub	sp, #24
    1140:	af00      	add	r7, sp, #0
    1142:	60f8      	str	r0, [r7, #12]
    1144:	60b9      	str	r1, [r7, #8]
    1146:	4613      	mov	r3, r2
    1148:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    114a:	2300      	movs	r3, #0
    114c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    114e:	68fb      	ldr	r3, [r7, #12]
    1150:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	2b00      	cmp	r3, #0
    1156:	d007      	beq.n	1168 <usart_sync_write+0x2c>
    1158:	68bb      	ldr	r3, [r7, #8]
    115a:	2b00      	cmp	r3, #0
    115c:	d004      	beq.n	1168 <usart_sync_write+0x2c>
    115e:	88fb      	ldrh	r3, [r7, #6]
    1160:	2b00      	cmp	r3, #0
    1162:	d001      	beq.n	1168 <usart_sync_write+0x2c>
    1164:	2301      	movs	r3, #1
    1166:	e000      	b.n	116a <usart_sync_write+0x2e>
    1168:	2300      	movs	r3, #0
    116a:	f003 0301 	and.w	r3, r3, #1
    116e:	b2db      	uxtb	r3, r3
    1170:	22f1      	movs	r2, #241	; 0xf1
    1172:	491f      	ldr	r1, [pc, #124]	; (11f0 <usart_sync_write+0xb4>)
    1174:	4618      	mov	r0, r3
    1176:	4b1f      	ldr	r3, [pc, #124]	; (11f4 <usart_sync_write+0xb8>)
    1178:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    117a:	bf00      	nop
    117c:	693b      	ldr	r3, [r7, #16]
    117e:	3308      	adds	r3, #8
    1180:	4618      	mov	r0, r3
    1182:	4b1d      	ldr	r3, [pc, #116]	; (11f8 <usart_sync_write+0xbc>)
    1184:	4798      	blx	r3
    1186:	4603      	mov	r3, r0
    1188:	f083 0301 	eor.w	r3, r3, #1
    118c:	b2db      	uxtb	r3, r3
    118e:	2b00      	cmp	r3, #0
    1190:	d1f4      	bne.n	117c <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1192:	693b      	ldr	r3, [r7, #16]
    1194:	f103 0008 	add.w	r0, r3, #8
    1198:	68ba      	ldr	r2, [r7, #8]
    119a:	697b      	ldr	r3, [r7, #20]
    119c:	4413      	add	r3, r2
    119e:	781b      	ldrb	r3, [r3, #0]
    11a0:	4619      	mov	r1, r3
    11a2:	4b16      	ldr	r3, [pc, #88]	; (11fc <usart_sync_write+0xc0>)
    11a4:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    11a6:	bf00      	nop
    11a8:	693b      	ldr	r3, [r7, #16]
    11aa:	3308      	adds	r3, #8
    11ac:	4618      	mov	r0, r3
    11ae:	4b12      	ldr	r3, [pc, #72]	; (11f8 <usart_sync_write+0xbc>)
    11b0:	4798      	blx	r3
    11b2:	4603      	mov	r3, r0
    11b4:	f083 0301 	eor.w	r3, r3, #1
    11b8:	b2db      	uxtb	r3, r3
    11ba:	2b00      	cmp	r3, #0
    11bc:	d1f4      	bne.n	11a8 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
    11be:	697b      	ldr	r3, [r7, #20]
    11c0:	3301      	adds	r3, #1
    11c2:	617b      	str	r3, [r7, #20]
    11c4:	88fb      	ldrh	r3, [r7, #6]
    11c6:	697a      	ldr	r2, [r7, #20]
    11c8:	429a      	cmp	r2, r3
    11ca:	d3e2      	bcc.n	1192 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
    11cc:	bf00      	nop
    11ce:	693b      	ldr	r3, [r7, #16]
    11d0:	3308      	adds	r3, #8
    11d2:	4618      	mov	r0, r3
    11d4:	4b0a      	ldr	r3, [pc, #40]	; (1200 <usart_sync_write+0xc4>)
    11d6:	4798      	blx	r3
    11d8:	4603      	mov	r3, r0
    11da:	f083 0301 	eor.w	r3, r3, #1
    11de:	b2db      	uxtb	r3, r3
    11e0:	2b00      	cmp	r3, #0
    11e2:	d1f4      	bne.n	11ce <usart_sync_write+0x92>
		;
	return (int32_t)offset;
    11e4:	697b      	ldr	r3, [r7, #20]
}
    11e6:	4618      	mov	r0, r3
    11e8:	3718      	adds	r7, #24
    11ea:	46bd      	mov	sp, r7
    11ec:	bd80      	pop	{r7, pc}
    11ee:	bf00      	nop
    11f0:	00002470 	.word	0x00002470
    11f4:	00001299 	.word	0x00001299
    11f8:	00001af1 	.word	0x00001af1
    11fc:	00001aa5 	.word	0x00001aa5
    1200:	00001b11 	.word	0x00001b11

00001204 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1204:	b590      	push	{r4, r7, lr}
    1206:	b087      	sub	sp, #28
    1208:	af00      	add	r7, sp, #0
    120a:	60f8      	str	r0, [r7, #12]
    120c:	60b9      	str	r1, [r7, #8]
    120e:	4613      	mov	r3, r2
    1210:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
    1212:	2300      	movs	r3, #0
    1214:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    121a:	68fb      	ldr	r3, [r7, #12]
    121c:	2b00      	cmp	r3, #0
    121e:	d007      	beq.n	1230 <usart_sync_read+0x2c>
    1220:	68bb      	ldr	r3, [r7, #8]
    1222:	2b00      	cmp	r3, #0
    1224:	d004      	beq.n	1230 <usart_sync_read+0x2c>
    1226:	88fb      	ldrh	r3, [r7, #6]
    1228:	2b00      	cmp	r3, #0
    122a:	d001      	beq.n	1230 <usart_sync_read+0x2c>
    122c:	2301      	movs	r3, #1
    122e:	e000      	b.n	1232 <usart_sync_read+0x2e>
    1230:	2300      	movs	r3, #0
    1232:	f003 0301 	and.w	r3, r3, #1
    1236:	b2db      	uxtb	r3, r3
    1238:	f44f 7286 	mov.w	r2, #268	; 0x10c
    123c:	4912      	ldr	r1, [pc, #72]	; (1288 <usart_sync_read+0x84>)
    123e:	4618      	mov	r0, r3
    1240:	4b12      	ldr	r3, [pc, #72]	; (128c <usart_sync_read+0x88>)
    1242:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1244:	bf00      	nop
    1246:	693b      	ldr	r3, [r7, #16]
    1248:	3308      	adds	r3, #8
    124a:	4618      	mov	r0, r3
    124c:	4b10      	ldr	r3, [pc, #64]	; (1290 <usart_sync_read+0x8c>)
    124e:	4798      	blx	r3
    1250:	4603      	mov	r3, r0
    1252:	f083 0301 	eor.w	r3, r3, #1
    1256:	b2db      	uxtb	r3, r3
    1258:	2b00      	cmp	r3, #0
    125a:	d1f4      	bne.n	1246 <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    125c:	68ba      	ldr	r2, [r7, #8]
    125e:	697b      	ldr	r3, [r7, #20]
    1260:	18d4      	adds	r4, r2, r3
    1262:	693b      	ldr	r3, [r7, #16]
    1264:	3308      	adds	r3, #8
    1266:	4618      	mov	r0, r3
    1268:	4b0a      	ldr	r3, [pc, #40]	; (1294 <usart_sync_read+0x90>)
    126a:	4798      	blx	r3
    126c:	4603      	mov	r3, r0
    126e:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1270:	697b      	ldr	r3, [r7, #20]
    1272:	3301      	adds	r3, #1
    1274:	617b      	str	r3, [r7, #20]
    1276:	88fb      	ldrh	r3, [r7, #6]
    1278:	697a      	ldr	r2, [r7, #20]
    127a:	429a      	cmp	r2, r3
    127c:	d3e2      	bcc.n	1244 <usart_sync_read+0x40>

	return (int32_t)offset;
    127e:	697b      	ldr	r3, [r7, #20]
}
    1280:	4618      	mov	r0, r3
    1282:	371c      	adds	r7, #28
    1284:	46bd      	mov	sp, r7
    1286:	bd90      	pop	{r4, r7, pc}
    1288:	00002470 	.word	0x00002470
    128c:	00001299 	.word	0x00001299
    1290:	00001b31 	.word	0x00001b31
    1294:	00001acd 	.word	0x00001acd

00001298 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1298:	b480      	push	{r7}
    129a:	b085      	sub	sp, #20
    129c:	af00      	add	r7, sp, #0
    129e:	4603      	mov	r3, r0
    12a0:	60b9      	str	r1, [r7, #8]
    12a2:	607a      	str	r2, [r7, #4]
    12a4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    12a6:	7bfb      	ldrb	r3, [r7, #15]
    12a8:	f083 0301 	eor.w	r3, r3, #1
    12ac:	b2db      	uxtb	r3, r3
    12ae:	2b00      	cmp	r3, #0
    12b0:	d000      	beq.n	12b4 <assert+0x1c>
		__asm("BKPT #0");
    12b2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    12b4:	bf00      	nop
    12b6:	3714      	adds	r7, #20
    12b8:	46bd      	mov	sp, r7
    12ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    12be:	4770      	bx	lr

000012c0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    12c0:	b480      	push	{r7}
    12c2:	b083      	sub	sp, #12
    12c4:	af00      	add	r7, sp, #0
    12c6:	6078      	str	r0, [r7, #4]
    12c8:	460b      	mov	r3, r1
    12ca:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	881b      	ldrh	r3, [r3, #0]
    12d0:	b29a      	uxth	r2, r3
    12d2:	887b      	ldrh	r3, [r7, #2]
    12d4:	021b      	lsls	r3, r3, #8
    12d6:	b29b      	uxth	r3, r3
    12d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    12dc:	b29b      	uxth	r3, r3
    12de:	4313      	orrs	r3, r2
    12e0:	b29a      	uxth	r2, r3
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    12e6:	bf00      	nop
    12e8:	370c      	adds	r7, #12
    12ea:	46bd      	mov	sp, r7
    12ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f0:	4770      	bx	lr
	...

000012f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    12f8:	2100      	movs	r1, #0
    12fa:	4808      	ldr	r0, [pc, #32]	; (131c <_init_chip+0x28>)
    12fc:	4b08      	ldr	r3, [pc, #32]	; (1320 <_init_chip+0x2c>)
    12fe:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1300:	4b08      	ldr	r3, [pc, #32]	; (1324 <_init_chip+0x30>)
    1302:	4798      	blx	r3
	_oscctrl_init_sources();
    1304:	4b08      	ldr	r3, [pc, #32]	; (1328 <_init_chip+0x34>)
    1306:	4798      	blx	r3
	_mclk_init();
    1308:	4b08      	ldr	r3, [pc, #32]	; (132c <_init_chip+0x38>)
    130a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    130c:	4b08      	ldr	r3, [pc, #32]	; (1330 <_init_chip+0x3c>)
    130e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1310:	f640 70ff 	movw	r0, #4095	; 0xfff
    1314:	4b07      	ldr	r3, [pc, #28]	; (1334 <_init_chip+0x40>)
    1316:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    1318:	bf00      	nop
    131a:	bd80      	pop	{r7, pc}
    131c:	41004000 	.word	0x41004000
    1320:	000012c1 	.word	0x000012c1
    1324:	00001461 	.word	0x00001461
    1328:	000014f9 	.word	0x000014f9
    132c:	000013dd 	.word	0x000013dd
    1330:	00001539 	.word	0x00001539
    1334:	0000138d 	.word	0x0000138d

00001338 <hri_gclk_wait_for_sync>:
{
    1338:	b480      	push	{r7}
    133a:	b083      	sub	sp, #12
    133c:	af00      	add	r7, sp, #0
    133e:	6078      	str	r0, [r7, #4]
    1340:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1342:	bf00      	nop
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	685a      	ldr	r2, [r3, #4]
    1348:	683b      	ldr	r3, [r7, #0]
    134a:	4013      	ands	r3, r2
    134c:	2b00      	cmp	r3, #0
    134e:	d1f9      	bne.n	1344 <hri_gclk_wait_for_sync+0xc>
}
    1350:	bf00      	nop
    1352:	370c      	adds	r7, #12
    1354:	46bd      	mov	sp, r7
    1356:	f85d 7b04 	ldr.w	r7, [sp], #4
    135a:	4770      	bx	lr

0000135c <hri_gclk_write_GENCTRL_reg>:
{
    135c:	b580      	push	{r7, lr}
    135e:	b084      	sub	sp, #16
    1360:	af00      	add	r7, sp, #0
    1362:	60f8      	str	r0, [r7, #12]
    1364:	460b      	mov	r3, r1
    1366:	607a      	str	r2, [r7, #4]
    1368:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    136a:	7afa      	ldrb	r2, [r7, #11]
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	3208      	adds	r2, #8
    1370:	6879      	ldr	r1, [r7, #4]
    1372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1376:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    137a:	68f8      	ldr	r0, [r7, #12]
    137c:	4b02      	ldr	r3, [pc, #8]	; (1388 <hri_gclk_write_GENCTRL_reg+0x2c>)
    137e:	4798      	blx	r3
}
    1380:	bf00      	nop
    1382:	3710      	adds	r7, #16
    1384:	46bd      	mov	sp, r7
    1386:	bd80      	pop	{r7, pc}
    1388:	00001339 	.word	0x00001339

0000138c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	f003 0301 	and.w	r3, r3, #1
    139a:	2b00      	cmp	r3, #0
    139c:	d004      	beq.n	13a8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    139e:	4a04      	ldr	r2, [pc, #16]	; (13b0 <_gclk_init_generators_by_fref+0x24>)
    13a0:	2100      	movs	r1, #0
    13a2:	4804      	ldr	r0, [pc, #16]	; (13b4 <_gclk_init_generators_by_fref+0x28>)
    13a4:	4b04      	ldr	r3, [pc, #16]	; (13b8 <_gclk_init_generators_by_fref+0x2c>)
    13a6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    13a8:	bf00      	nop
    13aa:	3708      	adds	r7, #8
    13ac:	46bd      	mov	sp, r7
    13ae:	bd80      	pop	{r7, pc}
    13b0:	00010101 	.word	0x00010101
    13b4:	40001c00 	.word	0x40001c00
    13b8:	0000135d 	.word	0x0000135d

000013bc <hri_mclk_write_CPUDIV_reg>:
{
    13bc:	b480      	push	{r7}
    13be:	b083      	sub	sp, #12
    13c0:	af00      	add	r7, sp, #0
    13c2:	6078      	str	r0, [r7, #4]
    13c4:	460b      	mov	r3, r1
    13c6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    13c8:	687b      	ldr	r3, [r7, #4]
    13ca:	78fa      	ldrb	r2, [r7, #3]
    13cc:	715a      	strb	r2, [r3, #5]
}
    13ce:	bf00      	nop
    13d0:	370c      	adds	r7, #12
    13d2:	46bd      	mov	sp, r7
    13d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13d8:	4770      	bx	lr
	...

000013dc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    13dc:	b580      	push	{r7, lr}
    13de:	b082      	sub	sp, #8
    13e0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <_mclk_init+0x1c>)
    13e4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    13e6:	2101      	movs	r1, #1
    13e8:	6878      	ldr	r0, [r7, #4]
    13ea:	4b04      	ldr	r3, [pc, #16]	; (13fc <_mclk_init+0x20>)
    13ec:	4798      	blx	r3
}
    13ee:	bf00      	nop
    13f0:	3708      	adds	r7, #8
    13f2:	46bd      	mov	sp, r7
    13f4:	bd80      	pop	{r7, pc}
    13f6:	bf00      	nop
    13f8:	40000800 	.word	0x40000800
    13fc:	000013bd 	.word	0x000013bd

00001400 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    1400:	b480      	push	{r7}
    1402:	b083      	sub	sp, #12
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
    1408:	460b      	mov	r3, r1
    140a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	78fa      	ldrb	r2, [r7, #3]
    1410:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1412:	bf00      	nop
    1414:	370c      	adds	r7, #12
    1416:	46bd      	mov	sp, r7
    1418:	f85d 7b04 	ldr.w	r7, [sp], #4
    141c:	4770      	bx	lr

0000141e <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    141e:	b480      	push	{r7}
    1420:	b085      	sub	sp, #20
    1422:	af00      	add	r7, sp, #0
    1424:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1426:	687b      	ldr	r3, [r7, #4]
    1428:	69db      	ldr	r3, [r3, #28]
    142a:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    142c:	68fb      	ldr	r3, [r7, #12]
    142e:	0a1b      	lsrs	r3, r3, #8
    1430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1434:	60fb      	str	r3, [r7, #12]
	return tmp;
    1436:	68fb      	ldr	r3, [r7, #12]
}
    1438:	4618      	mov	r0, r3
    143a:	3714      	adds	r7, #20
    143c:	46bd      	mov	sp, r7
    143e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1442:	4770      	bx	lr

00001444 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    1444:	b480      	push	{r7}
    1446:	b083      	sub	sp, #12
    1448:	af00      	add	r7, sp, #0
    144a:	6078      	str	r0, [r7, #4]
    144c:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	683a      	ldr	r2, [r7, #0]
    1452:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1454:	bf00      	nop
    1456:	370c      	adds	r7, #12
    1458:	46bd      	mov	sp, r7
    145a:	f85d 7b04 	ldr.w	r7, [sp], #4
    145e:	4770      	bx	lr

00001460 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1466:	4b0c      	ldr	r3, [pc, #48]	; (1498 <_osc32kctrl_init_sources+0x38>)
    1468:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    146a:	2300      	movs	r3, #0
    146c:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    146e:	6878      	ldr	r0, [r7, #4]
    1470:	4b0a      	ldr	r3, [pc, #40]	; (149c <_osc32kctrl_init_sources+0x3c>)
    1472:	4798      	blx	r3
    1474:	4603      	mov	r3, r0
    1476:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1478:	887b      	ldrh	r3, [r7, #2]
    147a:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    147c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1480:	4619      	mov	r1, r3
    1482:	6878      	ldr	r0, [r7, #4]
    1484:	4b06      	ldr	r3, [pc, #24]	; (14a0 <_osc32kctrl_init_sources+0x40>)
    1486:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1488:	2101      	movs	r1, #1
    148a:	6878      	ldr	r0, [r7, #4]
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <_osc32kctrl_init_sources+0x44>)
    148e:	4798      	blx	r3
	(void)calib;
}
    1490:	bf00      	nop
    1492:	3708      	adds	r7, #8
    1494:	46bd      	mov	sp, r7
    1496:	bd80      	pop	{r7, pc}
    1498:	40001400 	.word	0x40001400
    149c:	0000141f 	.word	0x0000141f
    14a0:	00001445 	.word	0x00001445
    14a4:	00001401 	.word	0x00001401

000014a8 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	691b      	ldr	r3, [r3, #16]
    14b4:	085b      	lsrs	r3, r3, #1
    14b6:	f003 0301 	and.w	r3, r3, #1
    14ba:	2b00      	cmp	r3, #0
    14bc:	bf14      	ite	ne
    14be:	2301      	movne	r3, #1
    14c0:	2300      	moveq	r3, #0
    14c2:	b2db      	uxtb	r3, r3
}
    14c4:	4618      	mov	r0, r3
    14c6:	370c      	adds	r7, #12
    14c8:	46bd      	mov	sp, r7
    14ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ce:	4770      	bx	lr

000014d0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    14d0:	b480      	push	{r7}
    14d2:	b085      	sub	sp, #20
    14d4:	af00      	add	r7, sp, #0
    14d6:	60f8      	str	r0, [r7, #12]
    14d8:	460b      	mov	r3, r1
    14da:	607a      	str	r2, [r7, #4]
    14dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    14de:	7afb      	ldrb	r3, [r7, #11]
    14e0:	68fa      	ldr	r2, [r7, #12]
    14e2:	3304      	adds	r3, #4
    14e4:	009b      	lsls	r3, r3, #2
    14e6:	4413      	add	r3, r2
    14e8:	687a      	ldr	r2, [r7, #4]
    14ea:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    14ec:	bf00      	nop
    14ee:	3714      	adds	r7, #20
    14f0:	46bd      	mov	sp, r7
    14f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f6:	4770      	bx	lr

000014f8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    14fe:	4b0a      	ldr	r3, [pc, #40]	; (1528 <_oscctrl_init_sources+0x30>)
    1500:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    1502:	4a0a      	ldr	r2, [pc, #40]	; (152c <_oscctrl_init_sources+0x34>)
    1504:	2101      	movs	r1, #1
    1506:	6878      	ldr	r0, [r7, #4]
    1508:	4b09      	ldr	r3, [pc, #36]	; (1530 <_oscctrl_init_sources+0x38>)
    150a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    150c:	bf00      	nop
    150e:	6878      	ldr	r0, [r7, #4]
    1510:	4b08      	ldr	r3, [pc, #32]	; (1534 <_oscctrl_init_sources+0x3c>)
    1512:	4798      	blx	r3
    1514:	4603      	mov	r3, r0
    1516:	f083 0301 	eor.w	r3, r3, #1
    151a:	b2db      	uxtb	r3, r3
    151c:	2b00      	cmp	r3, #0
    151e:	d1f6      	bne.n	150e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1520:	bf00      	nop
    1522:	3708      	adds	r7, #8
    1524:	46bd      	mov	sp, r7
    1526:	bd80      	pop	{r7, pc}
    1528:	40001000 	.word	0x40001000
    152c:	03002606 	.word	0x03002606
    1530:	000014d1 	.word	0x000014d1
    1534:	000014a9 	.word	0x000014a9

00001538 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1538:	b480      	push	{r7}
    153a:	b083      	sub	sp, #12
    153c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    153e:	4b04      	ldr	r3, [pc, #16]	; (1550 <_oscctrl_init_referenced_generators+0x18>)
    1540:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    1542:	bf00      	nop
    1544:	370c      	adds	r7, #12
    1546:	46bd      	mov	sp, r7
    1548:	f85d 7b04 	ldr.w	r7, [sp], #4
    154c:	4770      	bx	lr
    154e:	bf00      	nop
    1550:	40001000 	.word	0x40001000

00001554 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    1554:	b480      	push	{r7}
    1556:	b083      	sub	sp, #12
    1558:	af00      	add	r7, sp, #0
    155a:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	789b      	ldrb	r3, [r3, #2]
    1560:	b2db      	uxtb	r3, r3
}
    1562:	4618      	mov	r0, r3
    1564:	370c      	adds	r7, #12
    1566:	46bd      	mov	sp, r7
    1568:	f85d 7b04 	ldr.w	r7, [sp], #4
    156c:	4770      	bx	lr

0000156e <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    156e:	b480      	push	{r7}
    1570:	b083      	sub	sp, #12
    1572:	af00      	add	r7, sp, #0
    1574:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	685b      	ldr	r3, [r3, #4]
}
    157a:	4618      	mov	r0, r3
    157c:	370c      	adds	r7, #12
    157e:	46bd      	mov	sp, r7
    1580:	f85d 7b04 	ldr.w	r7, [sp], #4
    1584:	4770      	bx	lr
	...

00001588 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1588:	b590      	push	{r4, r7, lr}
    158a:	b083      	sub	sp, #12
    158c:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    158e:	4b17      	ldr	r3, [pc, #92]	; (15ec <RAMECC_Handler+0x64>)
    1590:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1592:	4817      	ldr	r0, [pc, #92]	; (15f0 <RAMECC_Handler+0x68>)
    1594:	4b17      	ldr	r3, [pc, #92]	; (15f4 <RAMECC_Handler+0x6c>)
    1596:	4798      	blx	r3
    1598:	4603      	mov	r3, r0
    159a:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    159c:	683b      	ldr	r3, [r7, #0]
    159e:	f003 0302 	and.w	r3, r3, #2
    15a2:	2b00      	cmp	r3, #0
    15a4:	d00c      	beq.n	15c0 <RAMECC_Handler+0x38>
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d008      	beq.n	15c0 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    15ae:	687b      	ldr	r3, [r7, #4]
    15b0:	681c      	ldr	r4, [r3, #0]
    15b2:	480f      	ldr	r0, [pc, #60]	; (15f0 <RAMECC_Handler+0x68>)
    15b4:	4b10      	ldr	r3, [pc, #64]	; (15f8 <RAMECC_Handler+0x70>)
    15b6:	4798      	blx	r3
    15b8:	4603      	mov	r3, r0
    15ba:	4618      	mov	r0, r3
    15bc:	47a0      	blx	r4
    15be:	e012      	b.n	15e6 <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    15c0:	683b      	ldr	r3, [r7, #0]
    15c2:	f003 0301 	and.w	r3, r3, #1
    15c6:	2b00      	cmp	r3, #0
    15c8:	d00c      	beq.n	15e4 <RAMECC_Handler+0x5c>
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	685b      	ldr	r3, [r3, #4]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d008      	beq.n	15e4 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	685c      	ldr	r4, [r3, #4]
    15d6:	4806      	ldr	r0, [pc, #24]	; (15f0 <RAMECC_Handler+0x68>)
    15d8:	4b07      	ldr	r3, [pc, #28]	; (15f8 <RAMECC_Handler+0x70>)
    15da:	4798      	blx	r3
    15dc:	4603      	mov	r3, r0
    15de:	4618      	mov	r0, r3
    15e0:	47a0      	blx	r4
    15e2:	e000      	b.n	15e6 <RAMECC_Handler+0x5e>
	} else {
		return;
    15e4:	bf00      	nop
	}
}
    15e6:	370c      	adds	r7, #12
    15e8:	46bd      	mov	sp, r7
    15ea:	bd90      	pop	{r4, r7, pc}
    15ec:	20000084 	.word	0x20000084
    15f0:	41020000 	.word	0x41020000
    15f4:	00001555 	.word	0x00001555
    15f8:	0000156f 	.word	0x0000156f

000015fc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    15fc:	b480      	push	{r7}
    15fe:	b083      	sub	sp, #12
    1600:	af00      	add	r7, sp, #0
    1602:	6078      	str	r0, [r7, #4]
    1604:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1606:	bf00      	nop
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	69da      	ldr	r2, [r3, #28]
    160c:	683b      	ldr	r3, [r7, #0]
    160e:	4013      	ands	r3, r2
    1610:	2b00      	cmp	r3, #0
    1612:	d1f9      	bne.n	1608 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    1614:	bf00      	nop
    1616:	370c      	adds	r7, #12
    1618:	46bd      	mov	sp, r7
    161a:	f85d 7b04 	ldr.w	r7, [sp], #4
    161e:	4770      	bx	lr

00001620 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    1620:	b480      	push	{r7}
    1622:	b083      	sub	sp, #12
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
    1628:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	69da      	ldr	r2, [r3, #28]
    162e:	683b      	ldr	r3, [r7, #0]
    1630:	4013      	ands	r3, r2
    1632:	2b00      	cmp	r3, #0
    1634:	bf14      	ite	ne
    1636:	2301      	movne	r3, #1
    1638:	2300      	moveq	r3, #0
    163a:	b2db      	uxtb	r3, r3
}
    163c:	4618      	mov	r0, r3
    163e:	370c      	adds	r7, #12
    1640:	46bd      	mov	sp, r7
    1642:	f85d 7b04 	ldr.w	r7, [sp], #4
    1646:	4770      	bx	lr

00001648 <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1648:	b480      	push	{r7}
    164a:	b083      	sub	sp, #12
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
    1650:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1652:	bf00      	nop
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	69da      	ldr	r2, [r3, #28]
    1658:	683b      	ldr	r3, [r7, #0]
    165a:	4013      	ands	r3, r2
    165c:	2b00      	cmp	r3, #0
    165e:	d1f9      	bne.n	1654 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    1660:	bf00      	nop
    1662:	370c      	adds	r7, #12
    1664:	46bd      	mov	sp, r7
    1666:	f85d 7b04 	ldr.w	r7, [sp], #4
    166a:	4770      	bx	lr

0000166c <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    166c:	b480      	push	{r7}
    166e:	b083      	sub	sp, #12
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	69da      	ldr	r2, [r3, #28]
    167a:	683b      	ldr	r3, [r7, #0]
    167c:	4013      	ands	r3, r2
    167e:	2b00      	cmp	r3, #0
    1680:	bf14      	ite	ne
    1682:	2301      	movne	r3, #1
    1684:	2300      	moveq	r3, #0
    1686:	b2db      	uxtb	r3, r3
}
    1688:	4618      	mov	r0, r3
    168a:	370c      	adds	r7, #12
    168c:	46bd      	mov	sp, r7
    168e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1692:	4770      	bx	lr

00001694 <hri_sercomi2cm_get_INTFLAG_reg>:
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_ERROR;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_get_INTFLAG_reg(const void *const            hw,
                                                                          hri_sercomi2cm_intflag_reg_t mask)
{
    1694:	b480      	push	{r7}
    1696:	b085      	sub	sp, #20
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
    169c:	460b      	mov	r3, r1
    169e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->I2CM.INTFLAG.reg;
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	7e1b      	ldrb	r3, [r3, #24]
    16a4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    16a6:	7bfa      	ldrb	r2, [r7, #15]
    16a8:	78fb      	ldrb	r3, [r7, #3]
    16aa:	4013      	ands	r3, r2
    16ac:	73fb      	strb	r3, [r7, #15]
	return tmp;
    16ae:	7bfb      	ldrb	r3, [r7, #15]
}
    16b0:	4618      	mov	r0, r3
    16b2:	3714      	adds	r7, #20
    16b4:	46bd      	mov	sp, r7
    16b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    16ba:	4770      	bx	lr

000016bc <hri_sercomspi_clear_INTFLAG_reg>:
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
}

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    16bc:	b480      	push	{r7}
    16be:	b083      	sub	sp, #12
    16c0:	af00      	add	r7, sp, #0
    16c2:	6078      	str	r0, [r7, #4]
    16c4:	460b      	mov	r3, r1
    16c6:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    16c8:	687b      	ldr	r3, [r7, #4]
    16ca:	78fa      	ldrb	r2, [r7, #3]
    16cc:	761a      	strb	r2, [r3, #24]
}
    16ce:	bf00      	nop
    16d0:	370c      	adds	r7, #12
    16d2:	46bd      	mov	sp, r7
    16d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    16d8:	4770      	bx	lr

000016da <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    16da:	b480      	push	{r7}
    16dc:	b083      	sub	sp, #12
    16de:	af00      	add	r7, sp, #0
    16e0:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	7e1b      	ldrb	r3, [r3, #24]
    16e6:	b2db      	uxtb	r3, r3
    16e8:	f003 0301 	and.w	r3, r3, #1
    16ec:	2b00      	cmp	r3, #0
    16ee:	bf14      	ite	ne
    16f0:	2301      	movne	r3, #1
    16f2:	2300      	moveq	r3, #0
    16f4:	b2db      	uxtb	r3, r3
}
    16f6:	4618      	mov	r0, r3
    16f8:	370c      	adds	r7, #12
    16fa:	46bd      	mov	sp, r7
    16fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1700:	4770      	bx	lr

00001702 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1702:	b480      	push	{r7}
    1704:	b083      	sub	sp, #12
    1706:	af00      	add	r7, sp, #0
    1708:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	7e1b      	ldrb	r3, [r3, #24]
    170e:	b2db      	uxtb	r3, r3
    1710:	085b      	lsrs	r3, r3, #1
    1712:	f003 0301 	and.w	r3, r3, #1
    1716:	2b00      	cmp	r3, #0
    1718:	bf14      	ite	ne
    171a:	2301      	movne	r3, #1
    171c:	2300      	moveq	r3, #0
    171e:	b2db      	uxtb	r3, r3
}
    1720:	4618      	mov	r0, r3
    1722:	370c      	adds	r7, #12
    1724:	46bd      	mov	sp, r7
    1726:	f85d 7b04 	ldr.w	r7, [sp], #4
    172a:	4770      	bx	lr

0000172c <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    172c:	b480      	push	{r7}
    172e:	b083      	sub	sp, #12
    1730:	af00      	add	r7, sp, #0
    1732:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	7e1b      	ldrb	r3, [r3, #24]
    1738:	b2db      	uxtb	r3, r3
    173a:	089b      	lsrs	r3, r3, #2
    173c:	f003 0301 	and.w	r3, r3, #1
    1740:	2b00      	cmp	r3, #0
    1742:	bf14      	ite	ne
    1744:	2301      	movne	r3, #1
    1746:	2300      	moveq	r3, #0
    1748:	b2db      	uxtb	r3, r3
}
    174a:	4618      	mov	r0, r3
    174c:	370c      	adds	r7, #12
    174e:	46bd      	mov	sp, r7
    1750:	f85d 7b04 	ldr.w	r7, [sp], #4
    1754:	4770      	bx	lr
	...

00001758 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1758:	b580      	push	{r7, lr}
    175a:	b082      	sub	sp, #8
    175c:	af00      	add	r7, sp, #0
    175e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	681b      	ldr	r3, [r3, #0]
    1764:	f043 0202 	orr.w	r2, r3, #2
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    176c:	2103      	movs	r1, #3
    176e:	6878      	ldr	r0, [r7, #4]
    1770:	4b02      	ldr	r3, [pc, #8]	; (177c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    1772:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1774:	bf00      	nop
    1776:	3708      	adds	r7, #8
    1778:	46bd      	mov	sp, r7
    177a:	bd80      	pop	{r7, pc}
    177c:	000015fd 	.word	0x000015fd

00001780 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1780:	b580      	push	{r7, lr}
    1782:	b082      	sub	sp, #8
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	f023 0202 	bic.w	r2, r3, #2
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    1794:	2103      	movs	r1, #3
    1796:	6878      	ldr	r0, [r7, #4]
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    179a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    179c:	bf00      	nop
    179e:	3708      	adds	r7, #8
    17a0:	46bd      	mov	sp, r7
    17a2:	bd80      	pop	{r7, pc}
    17a4:	000015fd 	.word	0x000015fd

000017a8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    17a8:	b580      	push	{r7, lr}
    17aa:	b084      	sub	sp, #16
    17ac:	af00      	add	r7, sp, #0
    17ae:	6078      	str	r0, [r7, #4]
    17b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    17b2:	2103      	movs	r1, #3
    17b4:	6878      	ldr	r0, [r7, #4]
    17b6:	4b07      	ldr	r3, [pc, #28]	; (17d4 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    17b8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	681b      	ldr	r3, [r3, #0]
    17be:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    17c0:	68fa      	ldr	r2, [r7, #12]
    17c2:	683b      	ldr	r3, [r7, #0]
    17c4:	4013      	ands	r3, r2
    17c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    17c8:	68fb      	ldr	r3, [r7, #12]
}
    17ca:	4618      	mov	r0, r3
    17cc:	3710      	adds	r7, #16
    17ce:	46bd      	mov	sp, r7
    17d0:	bd80      	pop	{r7, pc}
    17d2:	bf00      	nop
    17d4:	000015fd 	.word	0x000015fd

000017d8 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    17d8:	b580      	push	{r7, lr}
    17da:	b082      	sub	sp, #8
    17dc:	af00      	add	r7, sp, #0
    17de:	6078      	str	r0, [r7, #4]
    17e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	683a      	ldr	r2, [r7, #0]
    17e6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    17e8:	2103      	movs	r1, #3
    17ea:	6878      	ldr	r0, [r7, #4]
    17ec:	4b02      	ldr	r3, [pc, #8]	; (17f8 <hri_sercomspi_write_CTRLA_reg+0x20>)
    17ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17f0:	bf00      	nop
    17f2:	3708      	adds	r7, #8
    17f4:	46bd      	mov	sp, r7
    17f6:	bd80      	pop	{r7, pc}
    17f8:	000015fd 	.word	0x000015fd

000017fc <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	b082      	sub	sp, #8
    1800:	af00      	add	r7, sp, #0
    1802:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	f043 0202 	orr.w	r2, r3, #2
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1810:	2103      	movs	r1, #3
    1812:	6878      	ldr	r0, [r7, #4]
    1814:	4b02      	ldr	r3, [pc, #8]	; (1820 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    1816:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1818:	bf00      	nop
    181a:	3708      	adds	r7, #8
    181c:	46bd      	mov	sp, r7
    181e:	bd80      	pop	{r7, pc}
    1820:	00001649 	.word	0x00001649

00001824 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1824:	b580      	push	{r7, lr}
    1826:	b082      	sub	sp, #8
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	f023 0202 	bic.w	r2, r3, #2
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1838:	2103      	movs	r1, #3
    183a:	6878      	ldr	r0, [r7, #4]
    183c:	4b02      	ldr	r3, [pc, #8]	; (1848 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    183e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1840:	bf00      	nop
    1842:	3708      	adds	r7, #8
    1844:	46bd      	mov	sp, r7
    1846:	bd80      	pop	{r7, pc}
    1848:	00001649 	.word	0x00001649

0000184c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
    1854:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1856:	2103      	movs	r1, #3
    1858:	6878      	ldr	r0, [r7, #4]
    185a:	4b07      	ldr	r3, [pc, #28]	; (1878 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    185c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1864:	68fa      	ldr	r2, [r7, #12]
    1866:	683b      	ldr	r3, [r7, #0]
    1868:	4013      	ands	r3, r2
    186a:	60fb      	str	r3, [r7, #12]
	return tmp;
    186c:	68fb      	ldr	r3, [r7, #12]
}
    186e:	4618      	mov	r0, r3
    1870:	3710      	adds	r7, #16
    1872:	46bd      	mov	sp, r7
    1874:	bd80      	pop	{r7, pc}
    1876:	bf00      	nop
    1878:	00001649 	.word	0x00001649

0000187c <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    187c:	b580      	push	{r7, lr}
    187e:	b082      	sub	sp, #8
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
    1884:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1886:	687b      	ldr	r3, [r7, #4]
    1888:	683a      	ldr	r2, [r7, #0]
    188a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    188c:	2103      	movs	r1, #3
    188e:	6878      	ldr	r0, [r7, #4]
    1890:	4b02      	ldr	r3, [pc, #8]	; (189c <hri_sercomusart_write_CTRLA_reg+0x20>)
    1892:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1894:	bf00      	nop
    1896:	3708      	adds	r7, #8
    1898:	46bd      	mov	sp, r7
    189a:	bd80      	pop	{r7, pc}
    189c:	00001649 	.word	0x00001649

000018a0 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    18a0:	b580      	push	{r7, lr}
    18a2:	b082      	sub	sp, #8
    18a4:	af00      	add	r7, sp, #0
    18a6:	6078      	str	r0, [r7, #4]
    18a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	683a      	ldr	r2, [r7, #0]
    18ae:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    18b0:	2117      	movs	r1, #23
    18b2:	6878      	ldr	r0, [r7, #4]
    18b4:	4b02      	ldr	r3, [pc, #8]	; (18c0 <hri_sercomspi_write_CTRLB_reg+0x20>)
    18b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18b8:	bf00      	nop
    18ba:	3708      	adds	r7, #8
    18bc:	46bd      	mov	sp, r7
    18be:	bd80      	pop	{r7, pc}
    18c0:	000015fd 	.word	0x000015fd

000018c4 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b082      	sub	sp, #8
    18c8:	af00      	add	r7, sp, #0
    18ca:	6078      	str	r0, [r7, #4]
    18cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	683a      	ldr	r2, [r7, #0]
    18d2:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    18d4:	211f      	movs	r1, #31
    18d6:	6878      	ldr	r0, [r7, #4]
    18d8:	4b02      	ldr	r3, [pc, #8]	; (18e4 <hri_sercomusart_write_CTRLB_reg+0x20>)
    18da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18dc:	bf00      	nop
    18de:	3708      	adds	r7, #8
    18e0:	46bd      	mov	sp, r7
    18e2:	bd80      	pop	{r7, pc}
    18e4:	00001649 	.word	0x00001649

000018e8 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    18e8:	b480      	push	{r7}
    18ea:	b083      	sub	sp, #12
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
    18f0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	683a      	ldr	r2, [r7, #0]
    18f6:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18f8:	bf00      	nop
    18fa:	370c      	adds	r7, #12
    18fc:	46bd      	mov	sp, r7
    18fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1902:	4770      	bx	lr

00001904 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    1904:	b480      	push	{r7}
    1906:	b083      	sub	sp, #12
    1908:	af00      	add	r7, sp, #0
    190a:	6078      	str	r0, [r7, #4]
    190c:	460b      	mov	r3, r1
    190e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	78fa      	ldrb	r2, [r7, #3]
    1914:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1916:	bf00      	nop
    1918:	370c      	adds	r7, #12
    191a:	46bd      	mov	sp, r7
    191c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1920:	4770      	bx	lr

00001922 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    1922:	b480      	push	{r7}
    1924:	b083      	sub	sp, #12
    1926:	af00      	add	r7, sp, #0
    1928:	6078      	str	r0, [r7, #4]
    192a:	460b      	mov	r3, r1
    192c:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	887a      	ldrh	r2, [r7, #2]
    1932:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1934:	bf00      	nop
    1936:	370c      	adds	r7, #12
    1938:	46bd      	mov	sp, r7
    193a:	f85d 7b04 	ldr.w	r7, [sp], #4
    193e:	4770      	bx	lr

00001940 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1940:	b480      	push	{r7}
    1942:	b083      	sub	sp, #12
    1944:	af00      	add	r7, sp, #0
    1946:	6078      	str	r0, [r7, #4]
    1948:	460b      	mov	r3, r1
    194a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	78fa      	ldrb	r2, [r7, #3]
    1950:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1952:	bf00      	nop
    1954:	370c      	adds	r7, #12
    1956:	46bd      	mov	sp, r7
    1958:	f85d 7b04 	ldr.w	r7, [sp], #4
    195c:	4770      	bx	lr

0000195e <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    195e:	b480      	push	{r7}
    1960:	b083      	sub	sp, #12
    1962:	af00      	add	r7, sp, #0
    1964:	6078      	str	r0, [r7, #4]
    1966:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	683a      	ldr	r2, [r7, #0]
    196c:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    196e:	bf00      	nop
    1970:	370c      	adds	r7, #12
    1972:	46bd      	mov	sp, r7
    1974:	f85d 7b04 	ldr.w	r7, [sp], #4
    1978:	4770      	bx	lr

0000197a <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    197a:	b480      	push	{r7}
    197c:	b083      	sub	sp, #12
    197e:	af00      	add	r7, sp, #0
    1980:	6078      	str	r0, [r7, #4]
    1982:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	683a      	ldr	r2, [r7, #0]
    1988:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    198a:	bf00      	nop
    198c:	370c      	adds	r7, #12
    198e:	46bd      	mov	sp, r7
    1990:	f85d 7b04 	ldr.w	r7, [sp], #4
    1994:	4770      	bx	lr

00001996 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    1996:	b480      	push	{r7}
    1998:	b083      	sub	sp, #12
    199a:	af00      	add	r7, sp, #0
    199c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    199e:	687b      	ldr	r3, [r7, #4]
    19a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    19a2:	4618      	mov	r0, r3
    19a4:	370c      	adds	r7, #12
    19a6:	46bd      	mov	sp, r7
    19a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ac:	4770      	bx	lr

000019ae <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    19ae:	b480      	push	{r7}
    19b0:	b083      	sub	sp, #12
    19b2:	af00      	add	r7, sp, #0
    19b4:	6078      	str	r0, [r7, #4]
    19b6:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	683a      	ldr	r2, [r7, #0]
    19bc:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19be:	bf00      	nop
    19c0:	370c      	adds	r7, #12
    19c2:	46bd      	mov	sp, r7
    19c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19c8:	4770      	bx	lr

000019ca <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    19ca:	b480      	push	{r7}
    19cc:	b083      	sub	sp, #12
    19ce:	af00      	add	r7, sp, #0
    19d0:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    19d6:	4618      	mov	r0, r3
    19d8:	370c      	adds	r7, #12
    19da:	46bd      	mov	sp, r7
    19dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    19e0:	4770      	bx	lr

000019e2 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    19e2:	b480      	push	{r7}
    19e4:	b083      	sub	sp, #12
    19e6:	af00      	add	r7, sp, #0
    19e8:	6078      	str	r0, [r7, #4]
    19ea:	460b      	mov	r3, r1
    19ec:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    19ee:	687b      	ldr	r3, [r7, #4]
    19f0:	78fa      	ldrb	r2, [r7, #3]
    19f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19f6:	bf00      	nop
    19f8:	370c      	adds	r7, #12
    19fa:	46bd      	mov	sp, r7
    19fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a00:	4770      	bx	lr

00001a02 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1a02:	b480      	push	{r7}
    1a04:	b083      	sub	sp, #12
    1a06:	af00      	add	r7, sp, #0
    1a08:	6078      	str	r0, [r7, #4]
    1a0a:	460b      	mov	r3, r1
    1a0c:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	78fa      	ldrb	r2, [r7, #3]
    1a12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a16:	bf00      	nop
    1a18:	370c      	adds	r7, #12
    1a1a:	46bd      	mov	sp, r7
    1a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a20:	4770      	bx	lr

00001a22 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    1a22:	b480      	push	{r7}
    1a24:	b083      	sub	sp, #12
    1a26:	af00      	add	r7, sp, #0
    1a28:	6078      	str	r0, [r7, #4]
    1a2a:	460b      	mov	r3, r1
    1a2c:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	887a      	ldrh	r2, [r7, #2]
    1a32:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a34:	bf00      	nop
    1a36:	370c      	adds	r7, #12
    1a38:	46bd      	mov	sp, r7
    1a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a3e:	4770      	bx	lr

00001a40 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	b082      	sub	sp, #8
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
    1a48:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	bf14      	ite	ne
    1a50:	2301      	movne	r3, #1
    1a52:	2300      	moveq	r3, #0
    1a54:	b2db      	uxtb	r3, r3
    1a56:	22bb      	movs	r2, #187	; 0xbb
    1a58:	4907      	ldr	r1, [pc, #28]	; (1a78 <_usart_sync_init+0x38>)
    1a5a:	4618      	mov	r0, r3
    1a5c:	4b07      	ldr	r3, [pc, #28]	; (1a7c <_usart_sync_init+0x3c>)
    1a5e:	4798      	blx	r3

	device->hw = hw;
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	683a      	ldr	r2, [r7, #0]
    1a64:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    1a66:	6838      	ldr	r0, [r7, #0]
    1a68:	4b05      	ldr	r3, [pc, #20]	; (1a80 <_usart_sync_init+0x40>)
    1a6a:	4798      	blx	r3
    1a6c:	4603      	mov	r3, r0
}
    1a6e:	4618      	mov	r0, r3
    1a70:	3708      	adds	r7, #8
    1a72:	46bd      	mov	sp, r7
    1a74:	bd80      	pop	{r7, pc}
    1a76:	bf00      	nop
    1a78:	0000248c 	.word	0x0000248c
    1a7c:	00001299 	.word	0x00001299
    1a80:	00001c11 	.word	0x00001c11

00001a84 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    1a84:	b580      	push	{r7, lr}
    1a86:	b082      	sub	sp, #8
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	4618      	mov	r0, r3
    1a92:	4b03      	ldr	r3, [pc, #12]	; (1aa0 <_usart_sync_enable+0x1c>)
    1a94:	4798      	blx	r3
}
    1a96:	bf00      	nop
    1a98:	3708      	adds	r7, #8
    1a9a:	46bd      	mov	sp, r7
    1a9c:	bd80      	pop	{r7, pc}
    1a9e:	bf00      	nop
    1aa0:	000017fd 	.word	0x000017fd

00001aa4 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    1aa4:	b580      	push	{r7, lr}
    1aa6:	b082      	sub	sp, #8
    1aa8:	af00      	add	r7, sp, #0
    1aaa:	6078      	str	r0, [r7, #4]
    1aac:	460b      	mov	r3, r1
    1aae:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	681b      	ldr	r3, [r3, #0]
    1ab4:	78fa      	ldrb	r2, [r7, #3]
    1ab6:	4611      	mov	r1, r2
    1ab8:	4618      	mov	r0, r3
    1aba:	4b03      	ldr	r3, [pc, #12]	; (1ac8 <_usart_sync_write_byte+0x24>)
    1abc:	4798      	blx	r3
}
    1abe:	bf00      	nop
    1ac0:	3708      	adds	r7, #8
    1ac2:	46bd      	mov	sp, r7
    1ac4:	bd80      	pop	{r7, pc}
    1ac6:	bf00      	nop
    1ac8:	000019af 	.word	0x000019af

00001acc <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1acc:	b580      	push	{r7, lr}
    1ace:	b082      	sub	sp, #8
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	4618      	mov	r0, r3
    1ada:	4b04      	ldr	r3, [pc, #16]	; (1aec <_usart_sync_read_byte+0x20>)
    1adc:	4798      	blx	r3
    1ade:	4603      	mov	r3, r0
    1ae0:	b2db      	uxtb	r3, r3
}
    1ae2:	4618      	mov	r0, r3
    1ae4:	3708      	adds	r7, #8
    1ae6:	46bd      	mov	sp, r7
    1ae8:	bd80      	pop	{r7, pc}
    1aea:	bf00      	nop
    1aec:	000019cb 	.word	0x000019cb

00001af0 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	b082      	sub	sp, #8
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	4618      	mov	r0, r3
    1afe:	4b03      	ldr	r3, [pc, #12]	; (1b0c <_usart_sync_is_ready_to_send+0x1c>)
    1b00:	4798      	blx	r3
    1b02:	4603      	mov	r3, r0
}
    1b04:	4618      	mov	r0, r3
    1b06:	3708      	adds	r7, #8
    1b08:	46bd      	mov	sp, r7
    1b0a:	bd80      	pop	{r7, pc}
    1b0c:	000016db 	.word	0x000016db

00001b10 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	b082      	sub	sp, #8
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1b18:	687b      	ldr	r3, [r7, #4]
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	4618      	mov	r0, r3
    1b1e:	4b03      	ldr	r3, [pc, #12]	; (1b2c <_usart_sync_is_transmit_done+0x1c>)
    1b20:	4798      	blx	r3
    1b22:	4603      	mov	r3, r0
}
    1b24:	4618      	mov	r0, r3
    1b26:	3708      	adds	r7, #8
    1b28:	46bd      	mov	sp, r7
    1b2a:	bd80      	pop	{r7, pc}
    1b2c:	00001703 	.word	0x00001703

00001b30 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1b30:	b580      	push	{r7, lr}
    1b32:	b082      	sub	sp, #8
    1b34:	af00      	add	r7, sp, #0
    1b36:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	4618      	mov	r0, r3
    1b3e:	4b03      	ldr	r3, [pc, #12]	; (1b4c <_usart_sync_is_byte_received+0x1c>)
    1b40:	4798      	blx	r3
    1b42:	4603      	mov	r3, r0
}
    1b44:	4618      	mov	r0, r3
    1b46:	3708      	adds	r7, #8
    1b48:	46bd      	mov	sp, r7
    1b4a:	bd80      	pop	{r7, pc}
    1b4c:	0000172d 	.word	0x0000172d

00001b50 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1b50:	b4b0      	push	{r4, r5, r7}
    1b52:	b08d      	sub	sp, #52	; 0x34
    1b54:	af00      	add	r7, sp, #0
    1b56:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1b58:	4b13      	ldr	r3, [pc, #76]	; (1ba8 <_sercom_get_hardware_index+0x58>)
    1b5a:	f107 040c 	add.w	r4, r7, #12
    1b5e:	461d      	mov	r5, r3
    1b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1b64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b6c:	2300      	movs	r3, #0
    1b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1b70:	e010      	b.n	1b94 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b74:	009b      	lsls	r3, r3, #2
    1b76:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1b7a:	4413      	add	r3, r2
    1b7c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1b80:	461a      	mov	r2, r3
    1b82:	687b      	ldr	r3, [r7, #4]
    1b84:	429a      	cmp	r2, r3
    1b86:	d102      	bne.n	1b8e <_sercom_get_hardware_index+0x3e>
			return i;
    1b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	e006      	b.n	1b9c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b90:	3301      	adds	r3, #1
    1b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    1b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b96:	2b07      	cmp	r3, #7
    1b98:	d9eb      	bls.n	1b72 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1b9a:	2300      	movs	r3, #0
}
    1b9c:	4618      	mov	r0, r3
    1b9e:	3734      	adds	r7, #52	; 0x34
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bcb0      	pop	{r4, r5, r7}
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop
    1ba8:	000024a8 	.word	0x000024a8

00001bac <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b084      	sub	sp, #16
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1bb4:	6878      	ldr	r0, [r7, #4]
    1bb6:	4b12      	ldr	r3, [pc, #72]	; (1c00 <_get_sercom_index+0x54>)
    1bb8:	4798      	blx	r3
    1bba:	4603      	mov	r3, r0
    1bbc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1bbe:	2300      	movs	r3, #0
    1bc0:	73fb      	strb	r3, [r7, #15]
    1bc2:	e00f      	b.n	1be4 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    1bc4:	7bfa      	ldrb	r2, [r7, #15]
    1bc6:	490f      	ldr	r1, [pc, #60]	; (1c04 <_get_sercom_index+0x58>)
    1bc8:	4613      	mov	r3, r2
    1bca:	005b      	lsls	r3, r3, #1
    1bcc:	4413      	add	r3, r2
    1bce:	00db      	lsls	r3, r3, #3
    1bd0:	440b      	add	r3, r1
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	7bba      	ldrb	r2, [r7, #14]
    1bd6:	429a      	cmp	r2, r3
    1bd8:	d101      	bne.n	1bde <_get_sercom_index+0x32>
			return i;
    1bda:	7bfb      	ldrb	r3, [r7, #15]
    1bdc:	e00c      	b.n	1bf8 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1bde:	7bfb      	ldrb	r3, [r7, #15]
    1be0:	3301      	adds	r3, #1
    1be2:	73fb      	strb	r3, [r7, #15]
    1be4:	7bfb      	ldrb	r3, [r7, #15]
    1be6:	2b01      	cmp	r3, #1
    1be8:	d9ec      	bls.n	1bc4 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1bea:	f240 2247 	movw	r2, #583	; 0x247
    1bee:	4906      	ldr	r1, [pc, #24]	; (1c08 <_get_sercom_index+0x5c>)
    1bf0:	2000      	movs	r0, #0
    1bf2:	4b06      	ldr	r3, [pc, #24]	; (1c0c <_get_sercom_index+0x60>)
    1bf4:	4798      	blx	r3
	return 0;
    1bf6:	2300      	movs	r3, #0
}
    1bf8:	4618      	mov	r0, r3
    1bfa:	3710      	adds	r7, #16
    1bfc:	46bd      	mov	sp, r7
    1bfe:	bd80      	pop	{r7, pc}
    1c00:	00001b51 	.word	0x00001b51
    1c04:	20000000 	.word	0x20000000
    1c08:	0000248c 	.word	0x0000248c
    1c0c:	00001299 	.word	0x00001299

00001c10 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b084      	sub	sp, #16
    1c14:	af00      	add	r7, sp, #0
    1c16:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1c18:	6878      	ldr	r0, [r7, #4]
    1c1a:	4b61      	ldr	r3, [pc, #388]	; (1da0 <_usart_init+0x190>)
    1c1c:	4798      	blx	r3
    1c1e:	4603      	mov	r3, r0
    1c20:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1c22:	2101      	movs	r1, #1
    1c24:	6878      	ldr	r0, [r7, #4]
    1c26:	4b5f      	ldr	r3, [pc, #380]	; (1da4 <_usart_init+0x194>)
    1c28:	4798      	blx	r3
    1c2a:	4603      	mov	r3, r0
    1c2c:	f083 0301 	eor.w	r3, r3, #1
    1c30:	b2db      	uxtb	r3, r3
    1c32:	2b00      	cmp	r3, #0
    1c34:	d020      	beq.n	1c78 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1c36:	7bfa      	ldrb	r2, [r7, #15]
    1c38:	495b      	ldr	r1, [pc, #364]	; (1da8 <_usart_init+0x198>)
    1c3a:	4613      	mov	r3, r2
    1c3c:	005b      	lsls	r3, r3, #1
    1c3e:	4413      	add	r3, r2
    1c40:	00db      	lsls	r3, r3, #3
    1c42:	440b      	add	r3, r1
    1c44:	3304      	adds	r3, #4
    1c46:	681b      	ldr	r3, [r3, #0]
    1c48:	f003 031c 	and.w	r3, r3, #28
    1c4c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1c4e:	2102      	movs	r1, #2
    1c50:	6878      	ldr	r0, [r7, #4]
    1c52:	4b56      	ldr	r3, [pc, #344]	; (1dac <_usart_init+0x19c>)
    1c54:	4798      	blx	r3
    1c56:	4603      	mov	r3, r0
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d006      	beq.n	1c6a <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1c5c:	6878      	ldr	r0, [r7, #4]
    1c5e:	4b54      	ldr	r3, [pc, #336]	; (1db0 <_usart_init+0x1a0>)
    1c60:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1c62:	2102      	movs	r1, #2
    1c64:	6878      	ldr	r0, [r7, #4]
    1c66:	4b53      	ldr	r3, [pc, #332]	; (1db4 <_usart_init+0x1a4>)
    1c68:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1c6a:	68bb      	ldr	r3, [r7, #8]
    1c6c:	f043 0301 	orr.w	r3, r3, #1
    1c70:	4619      	mov	r1, r3
    1c72:	6878      	ldr	r0, [r7, #4]
    1c74:	4b50      	ldr	r3, [pc, #320]	; (1db8 <_usart_init+0x1a8>)
    1c76:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1c78:	2101      	movs	r1, #1
    1c7a:	6878      	ldr	r0, [r7, #4]
    1c7c:	4b4d      	ldr	r3, [pc, #308]	; (1db4 <_usart_init+0x1a4>)
    1c7e:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1c80:	7bfa      	ldrb	r2, [r7, #15]
    1c82:	4949      	ldr	r1, [pc, #292]	; (1da8 <_usart_init+0x198>)
    1c84:	4613      	mov	r3, r2
    1c86:	005b      	lsls	r3, r3, #1
    1c88:	4413      	add	r3, r2
    1c8a:	00db      	lsls	r3, r3, #3
    1c8c:	440b      	add	r3, r1
    1c8e:	3304      	adds	r3, #4
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	4619      	mov	r1, r3
    1c94:	6878      	ldr	r0, [r7, #4]
    1c96:	4b48      	ldr	r3, [pc, #288]	; (1db8 <_usart_init+0x1a8>)
    1c98:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1c9a:	7bfa      	ldrb	r2, [r7, #15]
    1c9c:	4942      	ldr	r1, [pc, #264]	; (1da8 <_usart_init+0x198>)
    1c9e:	4613      	mov	r3, r2
    1ca0:	005b      	lsls	r3, r3, #1
    1ca2:	4413      	add	r3, r2
    1ca4:	00db      	lsls	r3, r3, #3
    1ca6:	440b      	add	r3, r1
    1ca8:	3308      	adds	r3, #8
    1caa:	681b      	ldr	r3, [r3, #0]
    1cac:	4619      	mov	r1, r3
    1cae:	6878      	ldr	r0, [r7, #4]
    1cb0:	4b42      	ldr	r3, [pc, #264]	; (1dbc <_usart_init+0x1ac>)
    1cb2:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1cb4:	7bfa      	ldrb	r2, [r7, #15]
    1cb6:	493c      	ldr	r1, [pc, #240]	; (1da8 <_usart_init+0x198>)
    1cb8:	4613      	mov	r3, r2
    1cba:	005b      	lsls	r3, r3, #1
    1cbc:	4413      	add	r3, r2
    1cbe:	00db      	lsls	r3, r3, #3
    1cc0:	440b      	add	r3, r1
    1cc2:	330c      	adds	r3, #12
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	4619      	mov	r1, r3
    1cc8:	6878      	ldr	r0, [r7, #4]
    1cca:	4b3d      	ldr	r3, [pc, #244]	; (1dc0 <_usart_init+0x1b0>)
    1ccc:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1cce:	7bfa      	ldrb	r2, [r7, #15]
    1cd0:	4935      	ldr	r1, [pc, #212]	; (1da8 <_usart_init+0x198>)
    1cd2:	4613      	mov	r3, r2
    1cd4:	005b      	lsls	r3, r3, #1
    1cd6:	4413      	add	r3, r2
    1cd8:	00db      	lsls	r3, r3, #3
    1cda:	440b      	add	r3, r1
    1cdc:	3304      	adds	r3, #4
    1cde:	681b      	ldr	r3, [r3, #0]
    1ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d10c      	bne.n	1d02 <_usart_init+0xf2>
    1ce8:	7bfa      	ldrb	r2, [r7, #15]
    1cea:	492f      	ldr	r1, [pc, #188]	; (1da8 <_usart_init+0x198>)
    1cec:	4613      	mov	r3, r2
    1cee:	005b      	lsls	r3, r3, #1
    1cf0:	4413      	add	r3, r2
    1cf2:	00db      	lsls	r3, r3, #3
    1cf4:	440b      	add	r3, r1
    1cf6:	3304      	adds	r3, #4
    1cf8:	681b      	ldr	r3, [r3, #0]
    1cfa:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d022      	beq.n	1d48 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1d02:	7bfa      	ldrb	r2, [r7, #15]
    1d04:	4928      	ldr	r1, [pc, #160]	; (1da8 <_usart_init+0x198>)
    1d06:	4613      	mov	r3, r2
    1d08:	005b      	lsls	r3, r3, #1
    1d0a:	4413      	add	r3, r2
    1d0c:	00db      	lsls	r3, r3, #3
    1d0e:	440b      	add	r3, r1
    1d10:	3310      	adds	r3, #16
    1d12:	881b      	ldrh	r3, [r3, #0]
    1d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1d18:	b299      	uxth	r1, r3
    1d1a:	687a      	ldr	r2, [r7, #4]
    1d1c:	8993      	ldrh	r3, [r2, #12]
    1d1e:	f361 030c 	bfi	r3, r1, #0, #13
    1d22:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1d24:	7bfa      	ldrb	r2, [r7, #15]
    1d26:	4920      	ldr	r1, [pc, #128]	; (1da8 <_usart_init+0x198>)
    1d28:	4613      	mov	r3, r2
    1d2a:	005b      	lsls	r3, r3, #1
    1d2c:	4413      	add	r3, r2
    1d2e:	00db      	lsls	r3, r3, #3
    1d30:	440b      	add	r3, r1
    1d32:	3312      	adds	r3, #18
    1d34:	781b      	ldrb	r3, [r3, #0]
    1d36:	f003 0307 	and.w	r3, r3, #7
    1d3a:	b2d9      	uxtb	r1, r3
    1d3c:	687a      	ldr	r2, [r7, #4]
    1d3e:	8993      	ldrh	r3, [r2, #12]
    1d40:	f361 334f 	bfi	r3, r1, #13, #3
    1d44:	8193      	strh	r3, [r2, #12]
    1d46:	e00c      	b.n	1d62 <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1d48:	7bfa      	ldrb	r2, [r7, #15]
    1d4a:	4917      	ldr	r1, [pc, #92]	; (1da8 <_usart_init+0x198>)
    1d4c:	4613      	mov	r3, r2
    1d4e:	005b      	lsls	r3, r3, #1
    1d50:	4413      	add	r3, r2
    1d52:	00db      	lsls	r3, r3, #3
    1d54:	440b      	add	r3, r1
    1d56:	3310      	adds	r3, #16
    1d58:	881b      	ldrh	r3, [r3, #0]
    1d5a:	4619      	mov	r1, r3
    1d5c:	6878      	ldr	r0, [r7, #4]
    1d5e:	4b19      	ldr	r3, [pc, #100]	; (1dc4 <_usart_init+0x1b4>)
    1d60:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1d62:	7bfa      	ldrb	r2, [r7, #15]
    1d64:	4910      	ldr	r1, [pc, #64]	; (1da8 <_usart_init+0x198>)
    1d66:	4613      	mov	r3, r2
    1d68:	005b      	lsls	r3, r3, #1
    1d6a:	4413      	add	r3, r2
    1d6c:	00db      	lsls	r3, r3, #3
    1d6e:	440b      	add	r3, r1
    1d70:	3313      	adds	r3, #19
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	4619      	mov	r1, r3
    1d76:	6878      	ldr	r0, [r7, #4]
    1d78:	4b13      	ldr	r3, [pc, #76]	; (1dc8 <_usart_init+0x1b8>)
    1d7a:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1d7c:	7bfa      	ldrb	r2, [r7, #15]
    1d7e:	490a      	ldr	r1, [pc, #40]	; (1da8 <_usart_init+0x198>)
    1d80:	4613      	mov	r3, r2
    1d82:	005b      	lsls	r3, r3, #1
    1d84:	4413      	add	r3, r2
    1d86:	00db      	lsls	r3, r3, #3
    1d88:	440b      	add	r3, r1
    1d8a:	3314      	adds	r3, #20
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	4619      	mov	r1, r3
    1d90:	6878      	ldr	r0, [r7, #4]
    1d92:	4b0e      	ldr	r3, [pc, #56]	; (1dcc <_usart_init+0x1bc>)
    1d94:	4798      	blx	r3

	return ERR_NONE;
    1d96:	2300      	movs	r3, #0
}
    1d98:	4618      	mov	r0, r3
    1d9a:	3710      	adds	r7, #16
    1d9c:	46bd      	mov	sp, r7
    1d9e:	bd80      	pop	{r7, pc}
    1da0:	00001bad 	.word	0x00001bad
    1da4:	0000166d 	.word	0x0000166d
    1da8:	20000000 	.word	0x20000000
    1dac:	0000184d 	.word	0x0000184d
    1db0:	00001825 	.word	0x00001825
    1db4:	00001649 	.word	0x00001649
    1db8:	0000187d 	.word	0x0000187d
    1dbc:	000018c5 	.word	0x000018c5
    1dc0:	000018e9 	.word	0x000018e9
    1dc4:	00001923 	.word	0x00001923
    1dc8:	00001941 	.word	0x00001941
    1dcc:	00001a03 	.word	0x00001a03

00001dd0 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b082      	sub	sp, #8
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1dd8:	2101      	movs	r1, #1
    1dda:	6878      	ldr	r0, [r7, #4]
    1ddc:	4b07      	ldr	r3, [pc, #28]	; (1dfc <_spi_sync_enable+0x2c>)
    1dde:	4798      	blx	r3
    1de0:	4603      	mov	r3, r0
    1de2:	2b00      	cmp	r3, #0
    1de4:	d002      	beq.n	1dec <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    1de6:	f06f 0303 	mvn.w	r3, #3
    1dea:	e003      	b.n	1df4 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    1dec:	6878      	ldr	r0, [r7, #4]
    1dee:	4b04      	ldr	r3, [pc, #16]	; (1e00 <_spi_sync_enable+0x30>)
    1df0:	4798      	blx	r3

	return ERR_NONE;
    1df2:	2300      	movs	r3, #0
}
    1df4:	4618      	mov	r0, r3
    1df6:	3708      	adds	r7, #8
    1df8:	46bd      	mov	sp, r7
    1dfa:	bd80      	pop	{r7, pc}
    1dfc:	00001621 	.word	0x00001621
    1e00:	00001759 	.word	0x00001759

00001e04 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b082      	sub	sp, #8
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
    1e0c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    1e0e:	687b      	ldr	r3, [r7, #4]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d004      	beq.n	1e1e <_spi_load_regs_master+0x1a>
    1e14:	683b      	ldr	r3, [r7, #0]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d001      	beq.n	1e1e <_spi_load_regs_master+0x1a>
    1e1a:	2301      	movs	r3, #1
    1e1c:	e000      	b.n	1e20 <_spi_load_regs_master+0x1c>
    1e1e:	2300      	movs	r3, #0
    1e20:	f003 0301 	and.w	r3, r3, #1
    1e24:	b2db      	uxtb	r3, r3
    1e26:	f640 1209 	movw	r2, #2313	; 0x909
    1e2a:	4915      	ldr	r1, [pc, #84]	; (1e80 <_spi_load_regs_master+0x7c>)
    1e2c:	4618      	mov	r0, r3
    1e2e:	4b15      	ldr	r3, [pc, #84]	; (1e84 <_spi_load_regs_master+0x80>)
    1e30:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1e32:	683b      	ldr	r3, [r7, #0]
    1e34:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    1e36:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1e3a:	f023 0301 	bic.w	r3, r3, #1
    1e3e:	4619      	mov	r1, r3
    1e40:	6878      	ldr	r0, [r7, #4]
    1e42:	4b11      	ldr	r3, [pc, #68]	; (1e88 <_spi_load_regs_master+0x84>)
    1e44:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    1e46:	683b      	ldr	r3, [r7, #0]
    1e48:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    1e4a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1e4e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e56:	4619      	mov	r1, r3
    1e58:	6878      	ldr	r0, [r7, #4]
    1e5a:	4b0c      	ldr	r3, [pc, #48]	; (1e8c <_spi_load_regs_master+0x88>)
    1e5c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1e5e:	683b      	ldr	r3, [r7, #0]
    1e60:	7b1b      	ldrb	r3, [r3, #12]
    1e62:	4619      	mov	r1, r3
    1e64:	6878      	ldr	r0, [r7, #4]
    1e66:	4b0a      	ldr	r3, [pc, #40]	; (1e90 <_spi_load_regs_master+0x8c>)
    1e68:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1e6a:	683b      	ldr	r3, [r7, #0]
    1e6c:	7b5b      	ldrb	r3, [r3, #13]
    1e6e:	4619      	mov	r1, r3
    1e70:	6878      	ldr	r0, [r7, #4]
    1e72:	4b08      	ldr	r3, [pc, #32]	; (1e94 <_spi_load_regs_master+0x90>)
    1e74:	4798      	blx	r3
}
    1e76:	bf00      	nop
    1e78:	3708      	adds	r7, #8
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	bf00      	nop
    1e80:	0000248c 	.word	0x0000248c
    1e84:	00001299 	.word	0x00001299
    1e88:	000017d9 	.word	0x000017d9
    1e8c:	000018a1 	.word	0x000018a1
    1e90:	00001905 	.word	0x00001905
    1e94:	000019e3 	.word	0x000019e3

00001e98 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b082      	sub	sp, #8
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	6078      	str	r0, [r7, #4]
    1ea0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d004      	beq.n	1eb2 <_spi_load_regs_slave+0x1a>
    1ea8:	683b      	ldr	r3, [r7, #0]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d001      	beq.n	1eb2 <_spi_load_regs_slave+0x1a>
    1eae:	2301      	movs	r3, #1
    1eb0:	e000      	b.n	1eb4 <_spi_load_regs_slave+0x1c>
    1eb2:	2300      	movs	r3, #0
    1eb4:	f003 0301 	and.w	r3, r3, #1
    1eb8:	b2db      	uxtb	r3, r3
    1eba:	f640 121d 	movw	r2, #2333	; 0x91d
    1ebe:	491a      	ldr	r1, [pc, #104]	; (1f28 <_spi_load_regs_slave+0x90>)
    1ec0:	4618      	mov	r0, r3
    1ec2:	4b1a      	ldr	r3, [pc, #104]	; (1f2c <_spi_load_regs_slave+0x94>)
    1ec4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1ec6:	683b      	ldr	r3, [r7, #0]
    1ec8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    1eca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1ece:	f023 0301 	bic.w	r3, r3, #1
    1ed2:	4619      	mov	r1, r3
    1ed4:	6878      	ldr	r0, [r7, #4]
    1ed6:	4b16      	ldr	r3, [pc, #88]	; (1f30 <_spi_load_regs_slave+0x98>)
    1ed8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1eda:	683b      	ldr	r3, [r7, #0]
    1edc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1ede:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    1ee2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    1ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1eea:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    1eee:	4619      	mov	r1, r3
    1ef0:	6878      	ldr	r0, [r7, #4]
    1ef2:	4b10      	ldr	r3, [pc, #64]	; (1f34 <_spi_load_regs_slave+0x9c>)
    1ef4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1ef6:	683b      	ldr	r3, [r7, #0]
    1ef8:	689b      	ldr	r3, [r3, #8]
    1efa:	4619      	mov	r1, r3
    1efc:	6878      	ldr	r0, [r7, #4]
    1efe:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <_spi_load_regs_slave+0xa0>)
    1f00:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1f02:	683b      	ldr	r3, [r7, #0]
    1f04:	7b5b      	ldrb	r3, [r3, #13]
    1f06:	4619      	mov	r1, r3
    1f08:	6878      	ldr	r0, [r7, #4]
    1f0a:	4b0c      	ldr	r3, [pc, #48]	; (1f3c <_spi_load_regs_slave+0xa4>)
    1f0c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1f0e:	bf00      	nop
    1f10:	f04f 31ff 	mov.w	r1, #4294967295
    1f14:	6878      	ldr	r0, [r7, #4]
    1f16:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <_spi_load_regs_slave+0xa8>)
    1f18:	4798      	blx	r3
    1f1a:	4603      	mov	r3, r0
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d1f7      	bne.n	1f10 <_spi_load_regs_slave+0x78>
		;
}
    1f20:	bf00      	nop
    1f22:	3708      	adds	r7, #8
    1f24:	46bd      	mov	sp, r7
    1f26:	bd80      	pop	{r7, pc}
    1f28:	0000248c 	.word	0x0000248c
    1f2c:	00001299 	.word	0x00001299
    1f30:	000017d9 	.word	0x000017d9
    1f34:	000018a1 	.word	0x000018a1
    1f38:	0000195f 	.word	0x0000195f
    1f3c:	000019e3 	.word	0x000019e3
    1f40:	00001621 	.word	0x00001621

00001f44 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b084      	sub	sp, #16
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1f4c:	687b      	ldr	r3, [r7, #4]
    1f4e:	4618      	mov	r0, r3
    1f50:	4b0e      	ldr	r3, [pc, #56]	; (1f8c <_spi_get_regs+0x48>)
    1f52:	4798      	blx	r3
    1f54:	4603      	mov	r3, r0
    1f56:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1f58:	2300      	movs	r3, #0
    1f5a:	73fb      	strb	r3, [r7, #15]
    1f5c:	e00d      	b.n	1f7a <_spi_get_regs+0x36>
		if (sercomspi_regs[i].n == n) {
    1f5e:	2206      	movs	r2, #6
    1f60:	7bbb      	ldrb	r3, [r7, #14]
    1f62:	4293      	cmp	r3, r2
    1f64:	d106      	bne.n	1f74 <_spi_get_regs+0x30>
			return &sercomspi_regs[i];
    1f66:	7bfa      	ldrb	r2, [r7, #15]
    1f68:	4613      	mov	r3, r2
    1f6a:	011b      	lsls	r3, r3, #4
    1f6c:	4413      	add	r3, r2
    1f6e:	4a08      	ldr	r2, [pc, #32]	; (1f90 <_spi_get_regs+0x4c>)
    1f70:	4413      	add	r3, r2
    1f72:	e006      	b.n	1f82 <_spi_get_regs+0x3e>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1f74:	7bfb      	ldrb	r3, [r7, #15]
    1f76:	3301      	adds	r3, #1
    1f78:	73fb      	strb	r3, [r7, #15]
    1f7a:	7bfb      	ldrb	r3, [r7, #15]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d0ee      	beq.n	1f5e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    1f80:	2300      	movs	r3, #0
}
    1f82:	4618      	mov	r0, r3
    1f84:	3710      	adds	r7, #16
    1f86:	46bd      	mov	sp, r7
    1f88:	bd80      	pop	{r7, pc}
    1f8a:	bf00      	nop
    1f8c:	00001b51 	.word	0x00001b51
    1f90:	000024c8 	.word	0x000024c8

00001f94 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	b084      	sub	sp, #16
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
    1f9c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    1f9e:	683b      	ldr	r3, [r7, #0]
    1fa0:	4618      	mov	r0, r3
    1fa2:	4b35      	ldr	r3, [pc, #212]	; (2078 <_spi_m_sync_init+0xe4>)
    1fa4:	4798      	blx	r3
    1fa6:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d004      	beq.n	1fb8 <_spi_m_sync_init+0x24>
    1fae:	683b      	ldr	r3, [r7, #0]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d001      	beq.n	1fb8 <_spi_m_sync_init+0x24>
    1fb4:	2301      	movs	r3, #1
    1fb6:	e000      	b.n	1fba <_spi_m_sync_init+0x26>
    1fb8:	2300      	movs	r3, #0
    1fba:	f003 0301 	and.w	r3, r3, #1
    1fbe:	b2db      	uxtb	r3, r3
    1fc0:	f640 123f 	movw	r2, #2367	; 0x93f
    1fc4:	492d      	ldr	r1, [pc, #180]	; (207c <_spi_m_sync_init+0xe8>)
    1fc6:	4618      	mov	r0, r3
    1fc8:	4b2d      	ldr	r3, [pc, #180]	; (2080 <_spi_m_sync_init+0xec>)
    1fca:	4798      	blx	r3

	if (regs == NULL) {
    1fcc:	68fb      	ldr	r3, [r7, #12]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d102      	bne.n	1fd8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    1fd2:	f06f 030c 	mvn.w	r3, #12
    1fd6:	e04a      	b.n	206e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1fd8:	2101      	movs	r1, #1
    1fda:	6838      	ldr	r0, [r7, #0]
    1fdc:	4b29      	ldr	r3, [pc, #164]	; (2084 <_spi_m_sync_init+0xf0>)
    1fde:	4798      	blx	r3
    1fe0:	4603      	mov	r3, r0
    1fe2:	f083 0301 	eor.w	r3, r3, #1
    1fe6:	b2db      	uxtb	r3, r3
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d019      	beq.n	2020 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1fec:	68fb      	ldr	r3, [r7, #12]
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	f003 031c 	and.w	r3, r3, #28
    1ff4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1ff6:	2102      	movs	r1, #2
    1ff8:	6838      	ldr	r0, [r7, #0]
    1ffa:	4b23      	ldr	r3, [pc, #140]	; (2088 <_spi_m_sync_init+0xf4>)
    1ffc:	4798      	blx	r3
    1ffe:	4603      	mov	r3, r0
    2000:	2b00      	cmp	r3, #0
    2002:	d006      	beq.n	2012 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    2004:	6838      	ldr	r0, [r7, #0]
    2006:	4b21      	ldr	r3, [pc, #132]	; (208c <_spi_m_sync_init+0xf8>)
    2008:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    200a:	2102      	movs	r1, #2
    200c:	6838      	ldr	r0, [r7, #0]
    200e:	4b20      	ldr	r3, [pc, #128]	; (2090 <_spi_m_sync_init+0xfc>)
    2010:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2012:	68bb      	ldr	r3, [r7, #8]
    2014:	f043 0301 	orr.w	r3, r3, #1
    2018:	4619      	mov	r1, r3
    201a:	6838      	ldr	r0, [r7, #0]
    201c:	4b1d      	ldr	r3, [pc, #116]	; (2094 <_spi_m_sync_init+0x100>)
    201e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    2020:	2101      	movs	r1, #1
    2022:	6838      	ldr	r0, [r7, #0]
    2024:	4b1a      	ldr	r3, [pc, #104]	; (2090 <_spi_m_sync_init+0xfc>)
    2026:	4798      	blx	r3

	dev->prvt = hw;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	683a      	ldr	r2, [r7, #0]
    202c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    202e:	68fb      	ldr	r3, [r7, #12]
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	f003 031c 	and.w	r3, r3, #28
    2036:	2b08      	cmp	r3, #8
    2038:	d104      	bne.n	2044 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    203a:	68f9      	ldr	r1, [r7, #12]
    203c:	6838      	ldr	r0, [r7, #0]
    203e:	4b16      	ldr	r3, [pc, #88]	; (2098 <_spi_m_sync_init+0x104>)
    2040:	4798      	blx	r3
    2042:	e003      	b.n	204c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    2044:	68f9      	ldr	r1, [r7, #12]
    2046:	6838      	ldr	r0, [r7, #0]
    2048:	4b14      	ldr	r3, [pc, #80]	; (209c <_spi_m_sync_init+0x108>)
    204a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    204c:	68fb      	ldr	r3, [r7, #12]
    204e:	685b      	ldr	r3, [r3, #4]
    2050:	f003 0307 	and.w	r3, r3, #7
    2054:	2b00      	cmp	r3, #0
    2056:	d101      	bne.n	205c <_spi_m_sync_init+0xc8>
    2058:	2201      	movs	r2, #1
    205a:	e000      	b.n	205e <_spi_m_sync_init+0xca>
    205c:	2202      	movs	r2, #2
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	89db      	ldrh	r3, [r3, #14]
    2066:	b29a      	uxth	r2, r3
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    206c:	2300      	movs	r3, #0
}
    206e:	4618      	mov	r0, r3
    2070:	3710      	adds	r7, #16
    2072:	46bd      	mov	sp, r7
    2074:	bd80      	pop	{r7, pc}
    2076:	bf00      	nop
    2078:	00001f45 	.word	0x00001f45
    207c:	0000248c 	.word	0x0000248c
    2080:	00001299 	.word	0x00001299
    2084:	00001621 	.word	0x00001621
    2088:	000017a9 	.word	0x000017a9
    208c:	00001781 	.word	0x00001781
    2090:	000015fd 	.word	0x000015fd
    2094:	000017d9 	.word	0x000017d9
    2098:	00001e99 	.word	0x00001e99
    209c:	00001e05 	.word	0x00001e05

000020a0 <_spi_s_sync_init>:

int32_t _spi_s_sync_init(struct _spi_s_sync_dev *dev, void *const hw)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b082      	sub	sp, #8
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
    20a8:	6039      	str	r1, [r7, #0]
	return _spi_m_sync_init(dev, hw);
    20aa:	6839      	ldr	r1, [r7, #0]
    20ac:	6878      	ldr	r0, [r7, #4]
    20ae:	4b03      	ldr	r3, [pc, #12]	; (20bc <_spi_s_sync_init+0x1c>)
    20b0:	4798      	blx	r3
    20b2:	4603      	mov	r3, r0
}
    20b4:	4618      	mov	r0, r3
    20b6:	3708      	adds	r7, #8
    20b8:	46bd      	mov	sp, r7
    20ba:	bd80      	pop	{r7, pc}
    20bc:	00001f95 	.word	0x00001f95

000020c0 <_spi_s_sync_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_s_sync_enable(struct _spi_s_sync_dev *dev)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b082      	sub	sp, #8
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    20c8:	687b      	ldr	r3, [r7, #4]
    20ca:	2b00      	cmp	r3, #0
    20cc:	d005      	beq.n	20da <_spi_s_sync_enable+0x1a>
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d001      	beq.n	20da <_spi_s_sync_enable+0x1a>
    20d6:	2301      	movs	r3, #1
    20d8:	e000      	b.n	20dc <_spi_s_sync_enable+0x1c>
    20da:	2300      	movs	r3, #0
    20dc:	f003 0301 	and.w	r3, r3, #1
    20e0:	b2db      	uxtb	r3, r3
    20e2:	f640 12a5 	movw	r2, #2469	; 0x9a5
    20e6:	4907      	ldr	r1, [pc, #28]	; (2104 <_spi_s_sync_enable+0x44>)
    20e8:	4618      	mov	r0, r3
    20ea:	4b07      	ldr	r3, [pc, #28]	; (2108 <_spi_s_sync_enable+0x48>)
    20ec:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	681b      	ldr	r3, [r3, #0]
    20f2:	4618      	mov	r0, r3
    20f4:	4b05      	ldr	r3, [pc, #20]	; (210c <_spi_s_sync_enable+0x4c>)
    20f6:	4798      	blx	r3
    20f8:	4603      	mov	r3, r0
}
    20fa:	4618      	mov	r0, r3
    20fc:	3708      	adds	r7, #8
    20fe:	46bd      	mov	sp, r7
    2100:	bd80      	pop	{r7, pc}
    2102:	bf00      	nop
    2104:	0000248c 	.word	0x0000248c
    2108:	00001299 	.word	0x00001299
    210c:	00001dd1 	.word	0x00001dd1

00002110 <_spi_s_sync_write_one>:

	return ERR_NONE;
}

int32_t _spi_s_sync_write_one(struct _spi_s_sync_dev *dev, uint16_t data)
{
    2110:	b580      	push	{r7, lr}
    2112:	b082      	sub	sp, #8
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
    2118:	460b      	mov	r3, r1
    211a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2b00      	cmp	r3, #0
    2120:	d005      	beq.n	212e <_spi_s_sync_write_one+0x1e>
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	681b      	ldr	r3, [r3, #0]
    2126:	2b00      	cmp	r3, #0
    2128:	d001      	beq.n	212e <_spi_s_sync_write_one+0x1e>
    212a:	2301      	movs	r3, #1
    212c:	e000      	b.n	2130 <_spi_s_sync_write_one+0x20>
    212e:	2300      	movs	r3, #0
    2130:	f003 0301 	and.w	r3, r3, #1
    2134:	b2db      	uxtb	r3, r3
    2136:	f640 321a 	movw	r2, #2842	; 0xb1a
    213a:	4908      	ldr	r1, [pc, #32]	; (215c <_spi_s_sync_write_one+0x4c>)
    213c:	4618      	mov	r0, r3
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <_spi_s_sync_write_one+0x50>)
    2140:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	681b      	ldr	r3, [r3, #0]
    2146:	887a      	ldrh	r2, [r7, #2]
    2148:	4611      	mov	r1, r2
    214a:	4618      	mov	r0, r3
    214c:	4b05      	ldr	r3, [pc, #20]	; (2164 <_spi_s_sync_write_one+0x54>)
    214e:	4798      	blx	r3

	return ERR_NONE;
    2150:	2300      	movs	r3, #0
}
    2152:	4618      	mov	r0, r3
    2154:	3708      	adds	r7, #8
    2156:	46bd      	mov	sp, r7
    2158:	bd80      	pop	{r7, pc}
    215a:	bf00      	nop
    215c:	0000248c 	.word	0x0000248c
    2160:	00001299 	.word	0x00001299
    2164:	0000197b 	.word	0x0000197b

00002168 <_spi_s_sync_read_one>:

	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

uint16_t _spi_s_sync_read_one(struct _spi_s_sync_dev *dev)
{
    2168:	b580      	push	{r7, lr}
    216a:	b082      	sub	sp, #8
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	2b00      	cmp	r3, #0
    2174:	d005      	beq.n	2182 <_spi_s_sync_read_one+0x1a>
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	2b00      	cmp	r3, #0
    217c:	d001      	beq.n	2182 <_spi_s_sync_read_one+0x1a>
    217e:	2301      	movs	r3, #1
    2180:	e000      	b.n	2184 <_spi_s_sync_read_one+0x1c>
    2182:	2300      	movs	r3, #0
    2184:	f003 0301 	and.w	r3, r3, #1
    2188:	b2db      	uxtb	r3, r3
    218a:	f640 3231 	movw	r2, #2865	; 0xb31
    218e:	4907      	ldr	r1, [pc, #28]	; (21ac <_spi_s_sync_read_one+0x44>)
    2190:	4618      	mov	r0, r3
    2192:	4b07      	ldr	r3, [pc, #28]	; (21b0 <_spi_s_sync_read_one+0x48>)
    2194:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	681b      	ldr	r3, [r3, #0]
    219a:	4618      	mov	r0, r3
    219c:	4b05      	ldr	r3, [pc, #20]	; (21b4 <_spi_s_sync_read_one+0x4c>)
    219e:	4798      	blx	r3
    21a0:	4603      	mov	r3, r0
    21a2:	b29b      	uxth	r3, r3
}
    21a4:	4618      	mov	r0, r3
    21a6:	3708      	adds	r7, #8
    21a8:	46bd      	mov	sp, r7
    21aa:	bd80      	pop	{r7, pc}
    21ac:	0000248c 	.word	0x0000248c
    21b0:	00001299 	.word	0x00001299
    21b4:	00001997 	.word	0x00001997

000021b8 <_spi_s_sync_is_tx_ready>:
{
	return _spi_m_async_register_callback(dev, cb_type, func);
}

bool _spi_s_sync_is_tx_ready(struct _spi_s_sync_dev *dev)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	b082      	sub	sp, #8
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d005      	beq.n	21d2 <_spi_s_sync_is_tx_ready+0x1a>
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	681b      	ldr	r3, [r3, #0]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d001      	beq.n	21d2 <_spi_s_sync_is_tx_ready+0x1a>
    21ce:	2301      	movs	r3, #1
    21d0:	e000      	b.n	21d4 <_spi_s_sync_is_tx_ready+0x1c>
    21d2:	2300      	movs	r3, #0
    21d4:	f003 0301 	and.w	r3, r3, #1
    21d8:	b2db      	uxtb	r3, r3
    21da:	f640 324c 	movw	r2, #2892	; 0xb4c
    21de:	490a      	ldr	r1, [pc, #40]	; (2208 <_spi_s_sync_is_tx_ready+0x50>)
    21e0:	4618      	mov	r0, r3
    21e2:	4b0a      	ldr	r3, [pc, #40]	; (220c <_spi_s_sync_is_tx_ready+0x54>)
    21e4:	4798      	blx	r3

	return hri_sercomi2cm_get_INTFLAG_reg(dev->prvt, SERCOM_SPI_INTFLAG_DRE);
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	681b      	ldr	r3, [r3, #0]
    21ea:	2101      	movs	r1, #1
    21ec:	4618      	mov	r0, r3
    21ee:	4b08      	ldr	r3, [pc, #32]	; (2210 <_spi_s_sync_is_tx_ready+0x58>)
    21f0:	4798      	blx	r3
    21f2:	4603      	mov	r3, r0
    21f4:	2b00      	cmp	r3, #0
    21f6:	bf14      	ite	ne
    21f8:	2301      	movne	r3, #1
    21fa:	2300      	moveq	r3, #0
    21fc:	b2db      	uxtb	r3, r3
}
    21fe:	4618      	mov	r0, r3
    2200:	3708      	adds	r7, #8
    2202:	46bd      	mov	sp, r7
    2204:	bd80      	pop	{r7, pc}
    2206:	bf00      	nop
    2208:	0000248c 	.word	0x0000248c
    220c:	00001299 	.word	0x00001299
    2210:	00001695 	.word	0x00001695

00002214 <_spi_s_sync_is_rx_ready>:

bool _spi_s_sync_is_rx_ready(struct _spi_s_sync_dev *dev)
{
    2214:	b580      	push	{r7, lr}
    2216:	b082      	sub	sp, #8
    2218:	af00      	add	r7, sp, #0
    221a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    221c:	687b      	ldr	r3, [r7, #4]
    221e:	2b00      	cmp	r3, #0
    2220:	d005      	beq.n	222e <_spi_s_sync_is_rx_ready+0x1a>
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	2b00      	cmp	r3, #0
    2228:	d001      	beq.n	222e <_spi_s_sync_is_rx_ready+0x1a>
    222a:	2301      	movs	r3, #1
    222c:	e000      	b.n	2230 <_spi_s_sync_is_rx_ready+0x1c>
    222e:	2300      	movs	r3, #0
    2230:	f003 0301 	and.w	r3, r3, #1
    2234:	b2db      	uxtb	r3, r3
    2236:	f640 3253 	movw	r2, #2899	; 0xb53
    223a:	490a      	ldr	r1, [pc, #40]	; (2264 <_spi_s_sync_is_rx_ready+0x50>)
    223c:	4618      	mov	r0, r3
    223e:	4b0a      	ldr	r3, [pc, #40]	; (2268 <_spi_s_sync_is_rx_ready+0x54>)
    2240:	4798      	blx	r3

	return hri_sercomi2cm_get_INTFLAG_reg(dev->prvt, SERCOM_SPI_INTFLAG_RXC);
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	2104      	movs	r1, #4
    2248:	4618      	mov	r0, r3
    224a:	4b08      	ldr	r3, [pc, #32]	; (226c <_spi_s_sync_is_rx_ready+0x58>)
    224c:	4798      	blx	r3
    224e:	4603      	mov	r3, r0
    2250:	2b00      	cmp	r3, #0
    2252:	bf14      	ite	ne
    2254:	2301      	movne	r3, #1
    2256:	2300      	moveq	r3, #0
    2258:	b2db      	uxtb	r3, r3
}
    225a:	4618      	mov	r0, r3
    225c:	3708      	adds	r7, #8
    225e:	46bd      	mov	sp, r7
    2260:	bd80      	pop	{r7, pc}
    2262:	bf00      	nop
    2264:	0000248c 	.word	0x0000248c
    2268:	00001299 	.word	0x00001299
    226c:	00001695 	.word	0x00001695

00002270 <_spi_s_sync_is_ss_deactivated>:

bool _spi_s_sync_is_ss_deactivated(struct _spi_s_sync_dev *dev)
{
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
	void *hw = dev->prvt;
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	2b00      	cmp	r3, #0
    2282:	d004      	beq.n	228e <_spi_s_sync_is_ss_deactivated+0x1e>
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	2b00      	cmp	r3, #0
    2288:	d001      	beq.n	228e <_spi_s_sync_is_ss_deactivated+0x1e>
    228a:	2301      	movs	r3, #1
    228c:	e000      	b.n	2290 <_spi_s_sync_is_ss_deactivated+0x20>
    228e:	2300      	movs	r3, #0
    2290:	f003 0301 	and.w	r3, r3, #1
    2294:	b2db      	uxtb	r3, r3
    2296:	f640 325c 	movw	r2, #2908	; 0xb5c
    229a:	490b      	ldr	r1, [pc, #44]	; (22c8 <_spi_s_sync_is_ss_deactivated+0x58>)
    229c:	4618      	mov	r0, r3
    229e:	4b0b      	ldr	r3, [pc, #44]	; (22cc <_spi_s_sync_is_ss_deactivated+0x5c>)
    22a0:	4798      	blx	r3

	if (hri_sercomi2cm_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC)) {
    22a2:	2102      	movs	r1, #2
    22a4:	68f8      	ldr	r0, [r7, #12]
    22a6:	4b0a      	ldr	r3, [pc, #40]	; (22d0 <_spi_s_sync_is_ss_deactivated+0x60>)
    22a8:	4798      	blx	r3
    22aa:	4603      	mov	r3, r0
    22ac:	2b00      	cmp	r3, #0
    22ae:	d005      	beq.n	22bc <_spi_s_sync_is_ss_deactivated+0x4c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    22b0:	2102      	movs	r1, #2
    22b2:	68f8      	ldr	r0, [r7, #12]
    22b4:	4b07      	ldr	r3, [pc, #28]	; (22d4 <_spi_s_sync_is_ss_deactivated+0x64>)
    22b6:	4798      	blx	r3
		return true;
    22b8:	2301      	movs	r3, #1
    22ba:	e000      	b.n	22be <_spi_s_sync_is_ss_deactivated+0x4e>
	}
	return false;
    22bc:	2300      	movs	r3, #0
}
    22be:	4618      	mov	r0, r3
    22c0:	3710      	adds	r7, #16
    22c2:	46bd      	mov	sp, r7
    22c4:	bd80      	pop	{r7, pc}
    22c6:	bf00      	nop
    22c8:	0000248c 	.word	0x0000248c
    22cc:	00001299 	.word	0x00001299
    22d0:	00001695 	.word	0x00001695
    22d4:	000016bd 	.word	0x000016bd

000022d8 <_spi_s_sync_is_error>:

bool _spi_s_sync_is_error(struct _spi_s_sync_dev *dev)
{
    22d8:	b580      	push	{r7, lr}
    22da:	b084      	sub	sp, #16
    22dc:	af00      	add	r7, sp, #0
    22de:	6078      	str	r0, [r7, #4]
	void *hw = dev->prvt;
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	681b      	ldr	r3, [r3, #0]
    22e4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d004      	beq.n	22f6 <_spi_s_sync_is_error+0x1e>
    22ec:	68fb      	ldr	r3, [r7, #12]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d001      	beq.n	22f6 <_spi_s_sync_is_error+0x1e>
    22f2:	2301      	movs	r3, #1
    22f4:	e000      	b.n	22f8 <_spi_s_sync_is_error+0x20>
    22f6:	2300      	movs	r3, #0
    22f8:	f003 0301 	and.w	r3, r3, #1
    22fc:	b2db      	uxtb	r3, r3
    22fe:	f640 3269 	movw	r2, #2921	; 0xb69
    2302:	490d      	ldr	r1, [pc, #52]	; (2338 <_spi_s_sync_is_error+0x60>)
    2304:	4618      	mov	r0, r3
    2306:	4b0d      	ldr	r3, [pc, #52]	; (233c <_spi_s_sync_is_error+0x64>)
    2308:	4798      	blx	r3

	if (hri_sercomi2cm_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR)) {
    230a:	2180      	movs	r1, #128	; 0x80
    230c:	68f8      	ldr	r0, [r7, #12]
    230e:	4b0c      	ldr	r3, [pc, #48]	; (2340 <_spi_s_sync_is_error+0x68>)
    2310:	4798      	blx	r3
    2312:	4603      	mov	r3, r0
    2314:	2b00      	cmp	r3, #0
    2316:	d009      	beq.n	232c <_spi_s_sync_is_error+0x54>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    2318:	2104      	movs	r1, #4
    231a:	68f8      	ldr	r0, [r7, #12]
    231c:	4b09      	ldr	r3, [pc, #36]	; (2344 <_spi_s_sync_is_error+0x6c>)
    231e:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    2320:	2180      	movs	r1, #128	; 0x80
    2322:	68f8      	ldr	r0, [r7, #12]
    2324:	4b08      	ldr	r3, [pc, #32]	; (2348 <_spi_s_sync_is_error+0x70>)
    2326:	4798      	blx	r3
		return true;
    2328:	2301      	movs	r3, #1
    232a:	e000      	b.n	232e <_spi_s_sync_is_error+0x56>
	}
	return false;
    232c:	2300      	movs	r3, #0
}
    232e:	4618      	mov	r0, r3
    2330:	3710      	adds	r7, #16
    2332:	46bd      	mov	sp, r7
    2334:	bd80      	pop	{r7, pc}
    2336:	bf00      	nop
    2338:	0000248c 	.word	0x0000248c
    233c:	00001299 	.word	0x00001299
    2340:	00001695 	.word	0x00001695
    2344:	00001a23 	.word	0x00001a23
    2348:	000016bd 	.word	0x000016bd

0000234c <main>:
// #define SEEP_FINAL_BYTE_INDEX 4095
// /* Define a pointer to access SmartEEPROM as bytes */
// uint8_t *SmartEEPROM8 = (uint8_t *)SEEPROM_ADDR;

int main(void)
{
    234c:	b590      	push	{r4, r7, lr}
    234e:	b087      	sub	sp, #28
    2350:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2352:	4b17      	ldr	r3, [pc, #92]	; (23b0 <main+0x64>)
    2354:	4798      	blx	r3
	
	double duty = 0;
    2356:	f04f 0300 	mov.w	r3, #0
    235a:	f04f 0400 	mov.w	r4, #0
    235e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int spi_send = 0;
    2362:	2300      	movs	r3, #0
    2364:	60fb      	str	r3, [r7, #12]
	
	int spi_a = 0b0000000000000000;
    2366:	2300      	movs	r3, #0
    2368:	60bb      	str	r3, [r7, #8]

	/* Initialization of the UART communication */
	static struct io_descriptor *io1;
	uint8_t buff = 0;
    236a:	2300      	movs	r3, #0
    236c:	71fb      	strb	r3, [r7, #7]
	usart_sync_get_io_descriptor(&EDBG_UART, &io1);
    236e:	4911      	ldr	r1, [pc, #68]	; (23b4 <main+0x68>)
    2370:	4811      	ldr	r0, [pc, #68]	; (23b8 <main+0x6c>)
    2372:	4b12      	ldr	r3, [pc, #72]	; (23bc <main+0x70>)
    2374:	4798      	blx	r3
	usart_sync_enable(&EDBG_UART);
    2376:	4810      	ldr	r0, [pc, #64]	; (23b8 <main+0x6c>)
    2378:	4b11      	ldr	r3, [pc, #68]	; (23c0 <main+0x74>)
    237a:	4798      	blx	r3
	
	/* Initialization of the UART communication */
	static struct io_descriptor *io2;
	uint8_t out_buff = 0;
    237c:	2300      	movs	r3, #0
    237e:	71bb      	strb	r3, [r7, #6]
	uint8_t in_buff = 0;
    2380:	2300      	movs	r3, #0
    2382:	717b      	strb	r3, [r7, #5]
	usart_sync_get_io_descriptor(&UART, &io2);
    2384:	490f      	ldr	r1, [pc, #60]	; (23c4 <main+0x78>)
    2386:	4810      	ldr	r0, [pc, #64]	; (23c8 <main+0x7c>)
    2388:	4b0c      	ldr	r3, [pc, #48]	; (23bc <main+0x70>)
    238a:	4798      	blx	r3
	usart_sync_enable(&UART);
    238c:	480e      	ldr	r0, [pc, #56]	; (23c8 <main+0x7c>)
    238e:	4b0c      	ldr	r3, [pc, #48]	; (23c0 <main+0x74>)
    2390:	4798      	blx	r3
	
	/* Initialization of the SPI communication */
	struct io_descriptor *io_spi;
	
	struct io_descriptor *io;
	spi_s_sync_get_io_descriptor(&SPI_0, &io_spi);
    2392:	463b      	mov	r3, r7
    2394:	4619      	mov	r1, r3
    2396:	480d      	ldr	r0, [pc, #52]	; (23cc <main+0x80>)
    2398:	4b0d      	ldr	r3, [pc, #52]	; (23d0 <main+0x84>)
    239a:	4798      	blx	r3
	spi_s_sync_enable(&SPI_0);
    239c:	480b      	ldr	r0, [pc, #44]	; (23cc <main+0x80>)
    239e:	4b0d      	ldr	r3, [pc, #52]	; (23d4 <main+0x88>)
    23a0:	4798      	blx	r3
//				spi_send = 0x080;
//		};
		
		
		//Send to the potentiometer through the SPI
		io_write(io_spi,  (uint8_t *)spi_a, 2);
    23a2:	683b      	ldr	r3, [r7, #0]
    23a4:	68b9      	ldr	r1, [r7, #8]
    23a6:	2202      	movs	r2, #2
    23a8:	4618      	mov	r0, r3
    23aa:	4b0b      	ldr	r3, [pc, #44]	; (23d8 <main+0x8c>)
    23ac:	4798      	blx	r3
    23ae:	e7f8      	b.n	23a2 <main+0x56>
    23b0:	000002d1 	.word	0x000002d1
    23b4:	2000004c 	.word	0x2000004c
    23b8:	20000060 	.word	0x20000060
    23bc:	000010f9 	.word	0x000010f9
    23c0:	000010b9 	.word	0x000010b9
    23c4:	20000050 	.word	0x20000050
    23c8:	20000054 	.word	0x20000054
    23cc:	2000006c 	.word	0x2000006c
    23d0:	00001001 	.word	0x00001001
    23d4:	00000fc5 	.word	0x00000fc5
    23d8:	00000cb5 	.word	0x00000cb5

000023dc <__libc_init_array>:
    23dc:	b570      	push	{r4, r5, r6, lr}
    23de:	4e0d      	ldr	r6, [pc, #52]	; (2414 <__libc_init_array+0x38>)
    23e0:	4c0d      	ldr	r4, [pc, #52]	; (2418 <__libc_init_array+0x3c>)
    23e2:	1ba4      	subs	r4, r4, r6
    23e4:	10a4      	asrs	r4, r4, #2
    23e6:	2500      	movs	r5, #0
    23e8:	42a5      	cmp	r5, r4
    23ea:	d109      	bne.n	2400 <__libc_init_array+0x24>
    23ec:	4e0b      	ldr	r6, [pc, #44]	; (241c <__libc_init_array+0x40>)
    23ee:	4c0c      	ldr	r4, [pc, #48]	; (2420 <__libc_init_array+0x44>)
    23f0:	f000 f874 	bl	24dc <_init>
    23f4:	1ba4      	subs	r4, r4, r6
    23f6:	10a4      	asrs	r4, r4, #2
    23f8:	2500      	movs	r5, #0
    23fa:	42a5      	cmp	r5, r4
    23fc:	d105      	bne.n	240a <__libc_init_array+0x2e>
    23fe:	bd70      	pop	{r4, r5, r6, pc}
    2400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2404:	4798      	blx	r3
    2406:	3501      	adds	r5, #1
    2408:	e7ee      	b.n	23e8 <__libc_init_array+0xc>
    240a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    240e:	4798      	blx	r3
    2410:	3501      	adds	r5, #1
    2412:	e7f2      	b.n	23fa <__libc_init_array+0x1e>
    2414:	000024e8 	.word	0x000024e8
    2418:	000024e8 	.word	0x000024e8
    241c:	000024e8 	.word	0x000024e8
    2420:	000024ec 	.word	0x000024ec
    2424:	682f2e2e 	.word	0x682f2e2e
    2428:	702f6c70 	.word	0x702f6c70
    242c:	2f74726f 	.word	0x2f74726f
    2430:	5f6c7068 	.word	0x5f6c7068
    2434:	6f697067 	.word	0x6f697067
    2438:	7361625f 	.word	0x7361625f
    243c:	00682e65 	.word	0x00682e65
    2440:	682f2e2e 	.word	0x682f2e2e
    2444:	732f6c61 	.word	0x732f6c61
    2448:	682f6372 	.word	0x682f6372
    244c:	695f6c61 	.word	0x695f6c61
    2450:	00632e6f 	.word	0x00632e6f
    2454:	682f2e2e 	.word	0x682f2e2e
    2458:	732f6c61 	.word	0x732f6c61
    245c:	682f6372 	.word	0x682f6372
    2460:	735f6c61 	.word	0x735f6c61
    2464:	735f6970 	.word	0x735f6970
    2468:	6e79735f 	.word	0x6e79735f
    246c:	00632e63 	.word	0x00632e63
    2470:	682f2e2e 	.word	0x682f2e2e
    2474:	732f6c61 	.word	0x732f6c61
    2478:	682f6372 	.word	0x682f6372
    247c:	755f6c61 	.word	0x755f6c61
    2480:	74726173 	.word	0x74726173
    2484:	6e79735f 	.word	0x6e79735f
    2488:	00632e63 	.word	0x00632e63
    248c:	682f2e2e 	.word	0x682f2e2e
    2490:	732f6c70 	.word	0x732f6c70
    2494:	6f637265 	.word	0x6f637265
    2498:	70682f6d 	.word	0x70682f6d
    249c:	65735f6c 	.word	0x65735f6c
    24a0:	6d6f6372 	.word	0x6d6f6372
    24a4:	0000632e 	.word	0x0000632e
    24a8:	40003000 	.word	0x40003000
    24ac:	40003400 	.word	0x40003400
    24b0:	41012000 	.word	0x41012000
    24b4:	41014000 	.word	0x41014000
    24b8:	43000000 	.word	0x43000000
    24bc:	43000400 	.word	0x43000400
    24c0:	43000800 	.word	0x43000800
    24c4:	43000c00 	.word	0x43000c00

000024c8 <sercomspi_regs>:
    24c8:	10300008 00020000 00000000 00000000     ..0.............
    24d8:	00000006                                ....

000024dc <_init>:
    24dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24de:	bf00      	nop
    24e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24e2:	bc08      	pop	{r3}
    24e4:	469e      	mov	lr, r3
    24e6:	4770      	bx	lr

000024e8 <__init_array_start>:
    24e8:	00000289 	.word	0x00000289

000024ec <_fini>:
    24ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ee:	bf00      	nop
    24f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24f2:	bc08      	pop	{r3}
    24f4:	469e      	mov	lr, r3
    24f6:	4770      	bx	lr

000024f8 <__fini_array_start>:
    24f8:	00000265 	.word	0x00000265
