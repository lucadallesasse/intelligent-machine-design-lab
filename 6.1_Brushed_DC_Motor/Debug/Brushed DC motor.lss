
Brushed DC motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  000021e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020018  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020018  2**0
                  CONTENTS
  4 .bss          00000064  20000018  00002200  00020018  2**3
                  ALLOC
  5 .stack        00010004  2000007c  00002264  00020018  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
  8 .debug_info   00019706  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e80  00000000  00000000  000397a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000888e  00000000  00000000  0003b625  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ed0  00000000  00000000  00043eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000dd0  00000000  00000000  00044d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000301e0  00000000  00000000  00045b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ecfd  00000000  00000000  00075d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114bf1  00000000  00000000  00084a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004034  00000000  00000000  00199624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 00 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	ad 10 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     ....}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     124:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 15 1a 00 00 7d 03 00 00 7d 03 00 00     }.......}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1f4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000018 	.word	0x20000018
     280:	00000000 	.word	0x00000000
     284:	000021e8 	.word	0x000021e8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000021e8 	.word	0x000021e8
     2c4:	2000001c 	.word	0x2000001c
     2c8:	000021e8 	.word	0x000021e8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000a5d 	.word	0x00000a5d

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	000021e8 	.word	0x000021e8
     35c:	20000000 	.word	0x20000000
     360:	20000018 	.word	0x20000018
     364:	20000018 	.word	0x20000018
     368:	2000007c 	.word	0x2000007c
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	000020f9 	.word	0x000020f9
     378:	000018a1 	.word	0x000018a1

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	699b      	ldr	r3, [r3, #24]
     3b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	699b      	ldr	r3, [r3, #24]
     3d4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     3e8:	b480      	push	{r7}
     3ea:	b085      	sub	sp, #20
     3ec:	af00      	add	r7, sp, #0
     3ee:	60f8      	str	r0, [r7, #12]
     3f0:	460b      	mov	r3, r1
     3f2:	607a      	str	r2, [r7, #4]
     3f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3f6:	7afb      	ldrb	r3, [r7, #11]
     3f8:	68fa      	ldr	r2, [r7, #12]
     3fa:	01db      	lsls	r3, r3, #7
     3fc:	4413      	add	r3, r2
     3fe:	3308      	adds	r3, #8
     400:	687a      	ldr	r2, [r7, #4]
     402:	601a      	str	r2, [r3, #0]
}
     404:	bf00      	nop
     406:	3714      	adds	r7, #20
     408:	46bd      	mov	sp, r7
     40a:	f85d 7b04 	ldr.w	r7, [sp], #4
     40e:	4770      	bx	lr

00000410 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     410:	b480      	push	{r7}
     412:	b085      	sub	sp, #20
     414:	af00      	add	r7, sp, #0
     416:	60f8      	str	r0, [r7, #12]
     418:	460b      	mov	r3, r1
     41a:	607a      	str	r2, [r7, #4]
     41c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     41e:	7afb      	ldrb	r3, [r7, #11]
     420:	68fa      	ldr	r2, [r7, #12]
     422:	01db      	lsls	r3, r3, #7
     424:	4413      	add	r3, r2
     426:	3304      	adds	r3, #4
     428:	687a      	ldr	r2, [r7, #4]
     42a:	601a      	str	r2, [r3, #0]
}
     42c:	bf00      	nop
     42e:	3714      	adds	r7, #20
     430:	46bd      	mov	sp, r7
     432:	f85d 7b04 	ldr.w	r7, [sp], #4
     436:	4770      	bx	lr

00000438 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     438:	b480      	push	{r7}
     43a:	b085      	sub	sp, #20
     43c:	af00      	add	r7, sp, #0
     43e:	60f8      	str	r0, [r7, #12]
     440:	460b      	mov	r3, r1
     442:	607a      	str	r2, [r7, #4]
     444:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     446:	7afb      	ldrb	r3, [r7, #11]
     448:	68fa      	ldr	r2, [r7, #12]
     44a:	01db      	lsls	r3, r3, #7
     44c:	4413      	add	r3, r2
     44e:	3318      	adds	r3, #24
     450:	687a      	ldr	r2, [r7, #4]
     452:	601a      	str	r2, [r3, #0]
}
     454:	bf00      	nop
     456:	3714      	adds	r7, #20
     458:	46bd      	mov	sp, r7
     45a:	f85d 7b04 	ldr.w	r7, [sp], #4
     45e:	4770      	bx	lr

00000460 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     460:	b480      	push	{r7}
     462:	b085      	sub	sp, #20
     464:	af00      	add	r7, sp, #0
     466:	60f8      	str	r0, [r7, #12]
     468:	460b      	mov	r3, r1
     46a:	607a      	str	r2, [r7, #4]
     46c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46e:	7afb      	ldrb	r3, [r7, #11]
     470:	68fa      	ldr	r2, [r7, #12]
     472:	01db      	lsls	r3, r3, #7
     474:	4413      	add	r3, r2
     476:	3314      	adds	r3, #20
     478:	687a      	ldr	r2, [r7, #4]
     47a:	601a      	str	r2, [r3, #0]
}
     47c:	bf00      	nop
     47e:	3714      	adds	r7, #20
     480:	46bd      	mov	sp, r7
     482:	f85d 7b04 	ldr.w	r7, [sp], #4
     486:	4770      	bx	lr

00000488 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     488:	b480      	push	{r7}
     48a:	b085      	sub	sp, #20
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
     490:	4608      	mov	r0, r1
     492:	4611      	mov	r1, r2
     494:	461a      	mov	r2, r3
     496:	4603      	mov	r3, r0
     498:	70fb      	strb	r3, [r7, #3]
     49a:	460b      	mov	r3, r1
     49c:	70bb      	strb	r3, [r7, #2]
     49e:	4613      	mov	r3, r2
     4a0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a2:	78fa      	ldrb	r2, [r7, #3]
     4a4:	78bb      	ldrb	r3, [r7, #2]
     4a6:	6879      	ldr	r1, [r7, #4]
     4a8:	01d2      	lsls	r2, r2, #7
     4aa:	440a      	add	r2, r1
     4ac:	4413      	add	r3, r2
     4ae:	3330      	adds	r3, #48	; 0x30
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4b4:	7bfb      	ldrb	r3, [r7, #15]
     4b6:	f023 030f 	bic.w	r3, r3, #15
     4ba:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     4bc:	787b      	ldrb	r3, [r7, #1]
     4be:	f003 030f 	and.w	r3, r3, #15
     4c2:	b2da      	uxtb	r2, r3
     4c4:	7bfb      	ldrb	r3, [r7, #15]
     4c6:	4313      	orrs	r3, r2
     4c8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ca:	78fa      	ldrb	r2, [r7, #3]
     4cc:	78bb      	ldrb	r3, [r7, #2]
     4ce:	6879      	ldr	r1, [r7, #4]
     4d0:	01d2      	lsls	r2, r2, #7
     4d2:	440a      	add	r2, r1
     4d4:	4413      	add	r3, r2
     4d6:	3330      	adds	r3, #48	; 0x30
     4d8:	7bfa      	ldrb	r2, [r7, #15]
     4da:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4dc:	bf00      	nop
     4de:	3714      	adds	r7, #20
     4e0:	46bd      	mov	sp, r7
     4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e6:	4770      	bx	lr

000004e8 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     4e8:	b480      	push	{r7}
     4ea:	b085      	sub	sp, #20
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
     4f0:	4608      	mov	r0, r1
     4f2:	4611      	mov	r1, r2
     4f4:	461a      	mov	r2, r3
     4f6:	4603      	mov	r3, r0
     4f8:	70fb      	strb	r3, [r7, #3]
     4fa:	460b      	mov	r3, r1
     4fc:	70bb      	strb	r3, [r7, #2]
     4fe:	4613      	mov	r3, r2
     500:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     502:	78fa      	ldrb	r2, [r7, #3]
     504:	78bb      	ldrb	r3, [r7, #2]
     506:	6879      	ldr	r1, [r7, #4]
     508:	01d2      	lsls	r2, r2, #7
     50a:	440a      	add	r2, r1
     50c:	4413      	add	r3, r2
     50e:	3330      	adds	r3, #48	; 0x30
     510:	781b      	ldrb	r3, [r3, #0]
     512:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     514:	7bfb      	ldrb	r3, [r7, #15]
     516:	f003 030f 	and.w	r3, r3, #15
     51a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     51c:	787b      	ldrb	r3, [r7, #1]
     51e:	011b      	lsls	r3, r3, #4
     520:	b2da      	uxtb	r2, r3
     522:	7bfb      	ldrb	r3, [r7, #15]
     524:	4313      	orrs	r3, r2
     526:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     528:	78fa      	ldrb	r2, [r7, #3]
     52a:	78bb      	ldrb	r3, [r7, #2]
     52c:	6879      	ldr	r1, [r7, #4]
     52e:	01d2      	lsls	r2, r2, #7
     530:	440a      	add	r2, r1
     532:	4413      	add	r3, r2
     534:	3330      	adds	r3, #48	; 0x30
     536:	7bfa      	ldrb	r2, [r7, #15]
     538:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     53a:	bf00      	nop
     53c:	3714      	adds	r7, #20
     53e:	46bd      	mov	sp, r7
     540:	f85d 7b04 	ldr.w	r7, [sp], #4
     544:	4770      	bx	lr

00000546 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     546:	b480      	push	{r7}
     548:	b085      	sub	sp, #20
     54a:	af00      	add	r7, sp, #0
     54c:	6078      	str	r0, [r7, #4]
     54e:	4608      	mov	r0, r1
     550:	4611      	mov	r1, r2
     552:	461a      	mov	r2, r3
     554:	4603      	mov	r3, r0
     556:	70fb      	strb	r3, [r7, #3]
     558:	460b      	mov	r3, r1
     55a:	70bb      	strb	r3, [r7, #2]
     55c:	4613      	mov	r3, r2
     55e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     560:	78fa      	ldrb	r2, [r7, #3]
     562:	78bb      	ldrb	r3, [r7, #2]
     564:	6879      	ldr	r1, [r7, #4]
     566:	01d2      	lsls	r2, r2, #7
     568:	440a      	add	r2, r1
     56a:	4413      	add	r3, r2
     56c:	3340      	adds	r3, #64	; 0x40
     56e:	781b      	ldrb	r3, [r3, #0]
     570:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	7bfb      	ldrb	r3, [r7, #15]
     574:	f023 0301 	bic.w	r3, r3, #1
     578:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	787a      	ldrb	r2, [r7, #1]
     57c:	7bfb      	ldrb	r3, [r7, #15]
     57e:	4313      	orrs	r3, r2
     580:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     582:	78fa      	ldrb	r2, [r7, #3]
     584:	78bb      	ldrb	r3, [r7, #2]
     586:	6879      	ldr	r1, [r7, #4]
     588:	01d2      	lsls	r2, r2, #7
     58a:	440a      	add	r2, r1
     58c:	4413      	add	r3, r2
     58e:	3340      	adds	r3, #64	; 0x40
     590:	7bfa      	ldrb	r2, [r7, #15]
     592:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     594:	bf00      	nop
     596:	3714      	adds	r7, #20
     598:	46bd      	mov	sp, r7
     59a:	f85d 7b04 	ldr.w	r7, [sp], #4
     59e:	4770      	bx	lr

000005a0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5a0:	b490      	push	{r4, r7}
     5a2:	b082      	sub	sp, #8
     5a4:	af00      	add	r7, sp, #0
     5a6:	6078      	str	r0, [r7, #4]
     5a8:	460b      	mov	r3, r1
     5aa:	70fb      	strb	r3, [r7, #3]
     5ac:	4613      	mov	r3, r2
     5ae:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5b0:	78fa      	ldrb	r2, [r7, #3]
     5b2:	78bb      	ldrb	r3, [r7, #2]
     5b4:	78f8      	ldrb	r0, [r7, #3]
     5b6:	78b9      	ldrb	r1, [r7, #2]
     5b8:	687c      	ldr	r4, [r7, #4]
     5ba:	01c0      	lsls	r0, r0, #7
     5bc:	4420      	add	r0, r4
     5be:	4401      	add	r1, r0
     5c0:	3140      	adds	r1, #64	; 0x40
     5c2:	7809      	ldrb	r1, [r1, #0]
     5c4:	b2c9      	uxtb	r1, r1
     5c6:	f041 0104 	orr.w	r1, r1, #4
     5ca:	b2c8      	uxtb	r0, r1
     5cc:	6879      	ldr	r1, [r7, #4]
     5ce:	01d2      	lsls	r2, r2, #7
     5d0:	440a      	add	r2, r1
     5d2:	4413      	add	r3, r2
     5d4:	3340      	adds	r3, #64	; 0x40
     5d6:	4602      	mov	r2, r0
     5d8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5da:	bf00      	nop
     5dc:	3708      	adds	r7, #8
     5de:	46bd      	mov	sp, r7
     5e0:	bc90      	pop	{r4, r7}
     5e2:	4770      	bx	lr

000005e4 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5e4:	b490      	push	{r4, r7}
     5e6:	b082      	sub	sp, #8
     5e8:	af00      	add	r7, sp, #0
     5ea:	6078      	str	r0, [r7, #4]
     5ec:	460b      	mov	r3, r1
     5ee:	70fb      	strb	r3, [r7, #3]
     5f0:	4613      	mov	r3, r2
     5f2:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5f4:	78fa      	ldrb	r2, [r7, #3]
     5f6:	78bb      	ldrb	r3, [r7, #2]
     5f8:	78f8      	ldrb	r0, [r7, #3]
     5fa:	78b9      	ldrb	r1, [r7, #2]
     5fc:	687c      	ldr	r4, [r7, #4]
     5fe:	01c0      	lsls	r0, r0, #7
     600:	4420      	add	r0, r4
     602:	4401      	add	r1, r0
     604:	3140      	adds	r1, #64	; 0x40
     606:	7809      	ldrb	r1, [r1, #0]
     608:	b2c9      	uxtb	r1, r1
     60a:	f021 0104 	bic.w	r1, r1, #4
     60e:	b2c8      	uxtb	r0, r1
     610:	6879      	ldr	r1, [r7, #4]
     612:	01d2      	lsls	r2, r2, #7
     614:	440a      	add	r2, r1
     616:	4413      	add	r3, r2
     618:	3340      	adds	r3, #64	; 0x40
     61a:	4602      	mov	r2, r0
     61c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     61e:	bf00      	nop
     620:	3708      	adds	r7, #8
     622:	46bd      	mov	sp, r7
     624:	bc90      	pop	{r4, r7}
     626:	4770      	bx	lr

00000628 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     628:	b480      	push	{r7}
     62a:	b085      	sub	sp, #20
     62c:	af00      	add	r7, sp, #0
     62e:	60f8      	str	r0, [r7, #12]
     630:	460b      	mov	r3, r1
     632:	607a      	str	r2, [r7, #4]
     634:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     636:	7afb      	ldrb	r3, [r7, #11]
     638:	68fa      	ldr	r2, [r7, #12]
     63a:	01db      	lsls	r3, r3, #7
     63c:	4413      	add	r3, r2
     63e:	3328      	adds	r3, #40	; 0x28
     640:	687a      	ldr	r2, [r7, #4]
     642:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     644:	bf00      	nop
     646:	3714      	adds	r7, #20
     648:	46bd      	mov	sp, r7
     64a:	f85d 7b04 	ldr.w	r7, [sp], #4
     64e:	4770      	bx	lr

00000650 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     650:	b580      	push	{r7, lr}
     652:	b082      	sub	sp, #8
     654:	af00      	add	r7, sp, #0
     656:	4603      	mov	r3, r0
     658:	6039      	str	r1, [r7, #0]
     65a:	71fb      	strb	r3, [r7, #7]
     65c:	4613      	mov	r3, r2
     65e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     660:	79bb      	ldrb	r3, [r7, #6]
     662:	2b01      	cmp	r3, #1
     664:	d01c      	beq.n	6a0 <_gpio_set_direction+0x50>
     666:	2b02      	cmp	r3, #2
     668:	d037      	beq.n	6da <_gpio_set_direction+0x8a>
     66a:	2b00      	cmp	r3, #0
     66c:	d14e      	bne.n	70c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     66e:	79fb      	ldrb	r3, [r7, #7]
     670:	683a      	ldr	r2, [r7, #0]
     672:	4619      	mov	r1, r3
     674:	482a      	ldr	r0, [pc, #168]	; (720 <_gpio_set_direction+0xd0>)
     676:	4b2b      	ldr	r3, [pc, #172]	; (724 <_gpio_set_direction+0xd4>)
     678:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     67a:	683b      	ldr	r3, [r7, #0]
     67c:	b29b      	uxth	r3, r3
     67e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     682:	79fb      	ldrb	r3, [r7, #7]
     684:	4619      	mov	r1, r3
     686:	4826      	ldr	r0, [pc, #152]	; (720 <_gpio_set_direction+0xd0>)
     688:	4b27      	ldr	r3, [pc, #156]	; (728 <_gpio_set_direction+0xd8>)
     68a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     68c:	683b      	ldr	r3, [r7, #0]
     68e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     690:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     694:	79fb      	ldrb	r3, [r7, #7]
     696:	4619      	mov	r1, r3
     698:	4821      	ldr	r0, [pc, #132]	; (720 <_gpio_set_direction+0xd0>)
     69a:	4b23      	ldr	r3, [pc, #140]	; (728 <_gpio_set_direction+0xd8>)
     69c:	4798      	blx	r3
		break;
     69e:	e03a      	b.n	716 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6a0:	79fb      	ldrb	r3, [r7, #7]
     6a2:	683a      	ldr	r2, [r7, #0]
     6a4:	4619      	mov	r1, r3
     6a6:	481e      	ldr	r0, [pc, #120]	; (720 <_gpio_set_direction+0xd0>)
     6a8:	4b1e      	ldr	r3, [pc, #120]	; (724 <_gpio_set_direction+0xd4>)
     6aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     6ac:	683b      	ldr	r3, [r7, #0]
     6ae:	b29b      	uxth	r3, r3
     6b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6b8:	79f9      	ldrb	r1, [r7, #7]
     6ba:	461a      	mov	r2, r3
     6bc:	4818      	ldr	r0, [pc, #96]	; (720 <_gpio_set_direction+0xd0>)
     6be:	4b1a      	ldr	r3, [pc, #104]	; (728 <_gpio_set_direction+0xd8>)
     6c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     6c2:	683b      	ldr	r3, [r7, #0]
     6c4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     6c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     6ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6ce:	79f9      	ldrb	r1, [r7, #7]
     6d0:	461a      	mov	r2, r3
     6d2:	4813      	ldr	r0, [pc, #76]	; (720 <_gpio_set_direction+0xd0>)
     6d4:	4b14      	ldr	r3, [pc, #80]	; (728 <_gpio_set_direction+0xd8>)
     6d6:	4798      	blx	r3
		break;
     6d8:	e01d      	b.n	716 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     6da:	79fb      	ldrb	r3, [r7, #7]
     6dc:	683a      	ldr	r2, [r7, #0]
     6de:	4619      	mov	r1, r3
     6e0:	480f      	ldr	r0, [pc, #60]	; (720 <_gpio_set_direction+0xd0>)
     6e2:	4b12      	ldr	r3, [pc, #72]	; (72c <_gpio_set_direction+0xdc>)
     6e4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     6e6:	683b      	ldr	r3, [r7, #0]
     6e8:	b29b      	uxth	r3, r3
     6ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     6ee:	79fb      	ldrb	r3, [r7, #7]
     6f0:	4619      	mov	r1, r3
     6f2:	480b      	ldr	r0, [pc, #44]	; (720 <_gpio_set_direction+0xd0>)
     6f4:	4b0c      	ldr	r3, [pc, #48]	; (728 <_gpio_set_direction+0xd8>)
     6f6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6f8:	683b      	ldr	r3, [r7, #0]
     6fa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     6fc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     700:	79fb      	ldrb	r3, [r7, #7]
     702:	4619      	mov	r1, r3
     704:	4806      	ldr	r0, [pc, #24]	; (720 <_gpio_set_direction+0xd0>)
     706:	4b08      	ldr	r3, [pc, #32]	; (728 <_gpio_set_direction+0xd8>)
     708:	4798      	blx	r3
		break;
     70a:	e004      	b.n	716 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     70c:	2246      	movs	r2, #70	; 0x46
     70e:	4908      	ldr	r1, [pc, #32]	; (730 <_gpio_set_direction+0xe0>)
     710:	2000      	movs	r0, #0
     712:	4b08      	ldr	r3, [pc, #32]	; (734 <_gpio_set_direction+0xe4>)
     714:	4798      	blx	r3
	}
}
     716:	bf00      	nop
     718:	3708      	adds	r7, #8
     71a:	46bd      	mov	sp, r7
     71c:	bd80      	pop	{r7, pc}
     71e:	bf00      	nop
     720:	41008000 	.word	0x41008000
     724:	00000411 	.word	0x00000411
     728:	00000629 	.word	0x00000629
     72c:	000003e9 	.word	0x000003e9
     730:	00002140 	.word	0x00002140
     734:	00000dbd 	.word	0x00000dbd

00000738 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     738:	b580      	push	{r7, lr}
     73a:	b082      	sub	sp, #8
     73c:	af00      	add	r7, sp, #0
     73e:	4603      	mov	r3, r0
     740:	6039      	str	r1, [r7, #0]
     742:	71fb      	strb	r3, [r7, #7]
     744:	4613      	mov	r3, r2
     746:	71bb      	strb	r3, [r7, #6]
	if (level) {
     748:	79bb      	ldrb	r3, [r7, #6]
     74a:	2b00      	cmp	r3, #0
     74c:	d006      	beq.n	75c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     74e:	79fb      	ldrb	r3, [r7, #7]
     750:	683a      	ldr	r2, [r7, #0]
     752:	4619      	mov	r1, r3
     754:	4806      	ldr	r0, [pc, #24]	; (770 <_gpio_set_level+0x38>)
     756:	4b07      	ldr	r3, [pc, #28]	; (774 <_gpio_set_level+0x3c>)
     758:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     75a:	e005      	b.n	768 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     75c:	79fb      	ldrb	r3, [r7, #7]
     75e:	683a      	ldr	r2, [r7, #0]
     760:	4619      	mov	r1, r3
     762:	4803      	ldr	r0, [pc, #12]	; (770 <_gpio_set_level+0x38>)
     764:	4b04      	ldr	r3, [pc, #16]	; (778 <_gpio_set_level+0x40>)
     766:	4798      	blx	r3
}
     768:	bf00      	nop
     76a:	3708      	adds	r7, #8
     76c:	46bd      	mov	sp, r7
     76e:	bd80      	pop	{r7, pc}
     770:	41008000 	.word	0x41008000
     774:	00000439 	.word	0x00000439
     778:	00000461 	.word	0x00000461

0000077c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     77c:	b580      	push	{r7, lr}
     77e:	b082      	sub	sp, #8
     780:	af00      	add	r7, sp, #0
     782:	4603      	mov	r3, r0
     784:	71fb      	strb	r3, [r7, #7]
     786:	460b      	mov	r3, r1
     788:	71bb      	strb	r3, [r7, #6]
     78a:	4613      	mov	r3, r2
     78c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     78e:	797b      	ldrb	r3, [r7, #5]
     790:	2b01      	cmp	r3, #1
     792:	d00a      	beq.n	7aa <_gpio_set_pin_pull_mode+0x2e>
     794:	2b02      	cmp	r3, #2
     796:	d01f      	beq.n	7d8 <_gpio_set_pin_pull_mode+0x5c>
     798:	2b00      	cmp	r3, #0
     79a:	d134      	bne.n	806 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     79c:	79ba      	ldrb	r2, [r7, #6]
     79e:	79fb      	ldrb	r3, [r7, #7]
     7a0:	4619      	mov	r1, r3
     7a2:	481e      	ldr	r0, [pc, #120]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     7a4:	4b1e      	ldr	r3, [pc, #120]	; (820 <_gpio_set_pin_pull_mode+0xa4>)
     7a6:	4798      	blx	r3
		break;
     7a8:	e033      	b.n	812 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7aa:	79bb      	ldrb	r3, [r7, #6]
     7ac:	2201      	movs	r2, #1
     7ae:	409a      	lsls	r2, r3
     7b0:	79fb      	ldrb	r3, [r7, #7]
     7b2:	4619      	mov	r1, r3
     7b4:	4819      	ldr	r0, [pc, #100]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     7b6:	4b1b      	ldr	r3, [pc, #108]	; (824 <_gpio_set_pin_pull_mode+0xa8>)
     7b8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7ba:	79ba      	ldrb	r2, [r7, #6]
     7bc:	79fb      	ldrb	r3, [r7, #7]
     7be:	4619      	mov	r1, r3
     7c0:	4816      	ldr	r0, [pc, #88]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     7c2:	4b19      	ldr	r3, [pc, #100]	; (828 <_gpio_set_pin_pull_mode+0xac>)
     7c4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     7c6:	79bb      	ldrb	r3, [r7, #6]
     7c8:	2201      	movs	r2, #1
     7ca:	409a      	lsls	r2, r3
     7cc:	79fb      	ldrb	r3, [r7, #7]
     7ce:	4619      	mov	r1, r3
     7d0:	4812      	ldr	r0, [pc, #72]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     7d2:	4b16      	ldr	r3, [pc, #88]	; (82c <_gpio_set_pin_pull_mode+0xb0>)
     7d4:	4798      	blx	r3
		break;
     7d6:	e01c      	b.n	812 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7d8:	79bb      	ldrb	r3, [r7, #6]
     7da:	2201      	movs	r2, #1
     7dc:	409a      	lsls	r2, r3
     7de:	79fb      	ldrb	r3, [r7, #7]
     7e0:	4619      	mov	r1, r3
     7e2:	480e      	ldr	r0, [pc, #56]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     7e4:	4b0f      	ldr	r3, [pc, #60]	; (824 <_gpio_set_pin_pull_mode+0xa8>)
     7e6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7e8:	79ba      	ldrb	r2, [r7, #6]
     7ea:	79fb      	ldrb	r3, [r7, #7]
     7ec:	4619      	mov	r1, r3
     7ee:	480b      	ldr	r0, [pc, #44]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     7f0:	4b0d      	ldr	r3, [pc, #52]	; (828 <_gpio_set_pin_pull_mode+0xac>)
     7f2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     7f4:	79bb      	ldrb	r3, [r7, #6]
     7f6:	2201      	movs	r2, #1
     7f8:	409a      	lsls	r2, r3
     7fa:	79fb      	ldrb	r3, [r7, #7]
     7fc:	4619      	mov	r1, r3
     7fe:	4807      	ldr	r0, [pc, #28]	; (81c <_gpio_set_pin_pull_mode+0xa0>)
     800:	4b0b      	ldr	r3, [pc, #44]	; (830 <_gpio_set_pin_pull_mode+0xb4>)
     802:	4798      	blx	r3
		break;
     804:	e005      	b.n	812 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     806:	2289      	movs	r2, #137	; 0x89
     808:	490a      	ldr	r1, [pc, #40]	; (834 <_gpio_set_pin_pull_mode+0xb8>)
     80a:	2000      	movs	r0, #0
     80c:	4b0a      	ldr	r3, [pc, #40]	; (838 <_gpio_set_pin_pull_mode+0xbc>)
     80e:	4798      	blx	r3
		break;
     810:	bf00      	nop
	}
}
     812:	bf00      	nop
     814:	3708      	adds	r7, #8
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	bf00      	nop
     81c:	41008000 	.word	0x41008000
     820:	000005e5 	.word	0x000005e5
     824:	00000411 	.word	0x00000411
     828:	000005a1 	.word	0x000005a1
     82c:	00000439 	.word	0x00000439
     830:	00000461 	.word	0x00000461
     834:	00002140 	.word	0x00002140
     838:	00000dbd 	.word	0x00000dbd

0000083c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     83c:	b590      	push	{r4, r7, lr}
     83e:	b085      	sub	sp, #20
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     846:	687b      	ldr	r3, [r7, #4]
     848:	095b      	lsrs	r3, r3, #5
     84a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	b2db      	uxtb	r3, r3
     850:	f003 031f 	and.w	r3, r3, #31
     854:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     856:	683b      	ldr	r3, [r7, #0]
     858:	f1b3 3fff 	cmp.w	r3, #4294967295
     85c:	d106      	bne.n	86c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     85e:	7bba      	ldrb	r2, [r7, #14]
     860:	7bf9      	ldrb	r1, [r7, #15]
     862:	2300      	movs	r3, #0
     864:	4812      	ldr	r0, [pc, #72]	; (8b0 <_gpio_set_pin_function+0x74>)
     866:	4c13      	ldr	r4, [pc, #76]	; (8b4 <_gpio_set_pin_function+0x78>)
     868:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     86a:	e01d      	b.n	8a8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     86c:	7bba      	ldrb	r2, [r7, #14]
     86e:	7bf9      	ldrb	r1, [r7, #15]
     870:	2301      	movs	r3, #1
     872:	480f      	ldr	r0, [pc, #60]	; (8b0 <_gpio_set_pin_function+0x74>)
     874:	4c0f      	ldr	r4, [pc, #60]	; (8b4 <_gpio_set_pin_function+0x78>)
     876:	47a0      	blx	r4
		if (pin & 1) {
     878:	7bbb      	ldrb	r3, [r7, #14]
     87a:	f003 0301 	and.w	r3, r3, #1
     87e:	2b00      	cmp	r3, #0
     880:	d009      	beq.n	896 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     882:	7bbb      	ldrb	r3, [r7, #14]
     884:	085b      	lsrs	r3, r3, #1
     886:	b2da      	uxtb	r2, r3
     888:	683b      	ldr	r3, [r7, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	7bf9      	ldrb	r1, [r7, #15]
     88e:	4808      	ldr	r0, [pc, #32]	; (8b0 <_gpio_set_pin_function+0x74>)
     890:	4c09      	ldr	r4, [pc, #36]	; (8b8 <_gpio_set_pin_function+0x7c>)
     892:	47a0      	blx	r4
}
     894:	e008      	b.n	8a8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     896:	7bbb      	ldrb	r3, [r7, #14]
     898:	085b      	lsrs	r3, r3, #1
     89a:	b2da      	uxtb	r2, r3
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	b2db      	uxtb	r3, r3
     8a0:	7bf9      	ldrb	r1, [r7, #15]
     8a2:	4803      	ldr	r0, [pc, #12]	; (8b0 <_gpio_set_pin_function+0x74>)
     8a4:	4c05      	ldr	r4, [pc, #20]	; (8bc <_gpio_set_pin_function+0x80>)
     8a6:	47a0      	blx	r4
}
     8a8:	bf00      	nop
     8aa:	3714      	adds	r7, #20
     8ac:	46bd      	mov	sp, r7
     8ae:	bd90      	pop	{r4, r7, pc}
     8b0:	41008000 	.word	0x41008000
     8b4:	00000547 	.word	0x00000547
     8b8:	000004e9 	.word	0x000004e9
     8bc:	00000489 	.word	0x00000489

000008c0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b082      	sub	sp, #8
     8c4:	af00      	add	r7, sp, #0
     8c6:	4603      	mov	r3, r0
     8c8:	460a      	mov	r2, r1
     8ca:	71fb      	strb	r3, [r7, #7]
     8cc:	4613      	mov	r3, r2
     8ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8d0:	79fb      	ldrb	r3, [r7, #7]
     8d2:	095b      	lsrs	r3, r3, #5
     8d4:	b2d8      	uxtb	r0, r3
     8d6:	79fb      	ldrb	r3, [r7, #7]
     8d8:	f003 031f 	and.w	r3, r3, #31
     8dc:	b2db      	uxtb	r3, r3
     8de:	79ba      	ldrb	r2, [r7, #6]
     8e0:	4619      	mov	r1, r3
     8e2:	4b03      	ldr	r3, [pc, #12]	; (8f0 <gpio_set_pin_pull_mode+0x30>)
     8e4:	4798      	blx	r3
}
     8e6:	bf00      	nop
     8e8:	3708      	adds	r7, #8
     8ea:	46bd      	mov	sp, r7
     8ec:	bd80      	pop	{r7, pc}
     8ee:	bf00      	nop
     8f0:	0000077d 	.word	0x0000077d

000008f4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8f4:	b580      	push	{r7, lr}
     8f6:	b082      	sub	sp, #8
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]
     8fc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8fe:	6839      	ldr	r1, [r7, #0]
     900:	6878      	ldr	r0, [r7, #4]
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <gpio_set_pin_function+0x1c>)
     904:	4798      	blx	r3
}
     906:	bf00      	nop
     908:	3708      	adds	r7, #8
     90a:	46bd      	mov	sp, r7
     90c:	bd80      	pop	{r7, pc}
     90e:	bf00      	nop
     910:	0000083d 	.word	0x0000083d

00000914 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	4603      	mov	r3, r0
     91c:	460a      	mov	r2, r1
     91e:	71fb      	strb	r3, [r7, #7]
     920:	4613      	mov	r3, r2
     922:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     924:	79fb      	ldrb	r3, [r7, #7]
     926:	095b      	lsrs	r3, r3, #5
     928:	b2d8      	uxtb	r0, r3
     92a:	79fb      	ldrb	r3, [r7, #7]
     92c:	f003 031f 	and.w	r3, r3, #31
     930:	2201      	movs	r2, #1
     932:	fa02 f303 	lsl.w	r3, r2, r3
     936:	79ba      	ldrb	r2, [r7, #6]
     938:	4619      	mov	r1, r3
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <gpio_set_pin_direction+0x34>)
     93c:	4798      	blx	r3
}
     93e:	bf00      	nop
     940:	3708      	adds	r7, #8
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	00000651 	.word	0x00000651

0000094c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     94c:	b580      	push	{r7, lr}
     94e:	b082      	sub	sp, #8
     950:	af00      	add	r7, sp, #0
     952:	4603      	mov	r3, r0
     954:	460a      	mov	r2, r1
     956:	71fb      	strb	r3, [r7, #7]
     958:	4613      	mov	r3, r2
     95a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     95c:	79fb      	ldrb	r3, [r7, #7]
     95e:	095b      	lsrs	r3, r3, #5
     960:	b2d8      	uxtb	r0, r3
     962:	79fb      	ldrb	r3, [r7, #7]
     964:	f003 031f 	and.w	r3, r3, #31
     968:	2201      	movs	r2, #1
     96a:	fa02 f303 	lsl.w	r3, r2, r3
     96e:	79ba      	ldrb	r2, [r7, #6]
     970:	4619      	mov	r1, r3
     972:	4b03      	ldr	r3, [pc, #12]	; (980 <gpio_set_pin_level+0x34>)
     974:	4798      	blx	r3
}
     976:	bf00      	nop
     978:	3708      	adds	r7, #8
     97a:	46bd      	mov	sp, r7
     97c:	bd80      	pop	{r7, pc}
     97e:	bf00      	nop
     980:	00000739 	.word	0x00000739

00000984 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     984:	b580      	push	{r7, lr}
     986:	af00      	add	r7, sp, #0
	_init_chip();
     988:	4b01      	ldr	r3, [pc, #4]	; (990 <init_mcu+0xc>)
     98a:	4798      	blx	r3
}
     98c:	bf00      	nop
     98e:	bd80      	pop	{r7, pc}
     990:	00000e19 	.word	0x00000e19

00000994 <EDBG_UART_PORT_init>:
#include <hal_init.h>

struct usart_sync_descriptor EDBG_UART;

void EDBG_UART_PORT_init(void)
{
     994:	b580      	push	{r7, lr}
     996:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     998:	4904      	ldr	r1, [pc, #16]	; (9ac <EDBG_UART_PORT_init+0x18>)
     99a:	2039      	movs	r0, #57	; 0x39
     99c:	4b04      	ldr	r3, [pc, #16]	; (9b0 <EDBG_UART_PORT_init+0x1c>)
     99e:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     9a0:	4904      	ldr	r1, [pc, #16]	; (9b4 <EDBG_UART_PORT_init+0x20>)
     9a2:	2038      	movs	r0, #56	; 0x38
     9a4:	4b02      	ldr	r3, [pc, #8]	; (9b0 <EDBG_UART_PORT_init+0x1c>)
     9a6:	4798      	blx	r3
}
     9a8:	bf00      	nop
     9aa:	bd80      	pop	{r7, pc}
     9ac:	00390003 	.word	0x00390003
     9b0:	000008f5 	.word	0x000008f5
     9b4:	00380003 	.word	0x00380003

000009b8 <EDBG_UART_CLOCK_init>:

void EDBG_UART_CLOCK_init(void)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9bc:	2240      	movs	r2, #64	; 0x40
     9be:	2117      	movs	r1, #23
     9c0:	4806      	ldr	r0, [pc, #24]	; (9dc <EDBG_UART_CLOCK_init+0x24>)
     9c2:	4b07      	ldr	r3, [pc, #28]	; (9e0 <EDBG_UART_CLOCK_init+0x28>)
     9c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9c6:	2243      	movs	r2, #67	; 0x43
     9c8:	2103      	movs	r1, #3
     9ca:	4804      	ldr	r0, [pc, #16]	; (9dc <EDBG_UART_CLOCK_init+0x24>)
     9cc:	4b04      	ldr	r3, [pc, #16]	; (9e0 <EDBG_UART_CLOCK_init+0x28>)
     9ce:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     9d0:	4804      	ldr	r0, [pc, #16]	; (9e4 <EDBG_UART_CLOCK_init+0x2c>)
     9d2:	4b05      	ldr	r3, [pc, #20]	; (9e8 <EDBG_UART_CLOCK_init+0x30>)
     9d4:	4798      	blx	r3
}
     9d6:	bf00      	nop
     9d8:	bd80      	pop	{r7, pc}
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	00000383 	.word	0x00000383
     9e4:	40000800 	.word	0x40000800
     9e8:	000003a9 	.word	0x000003a9

000009ec <EDBG_UART_init>:

void EDBG_UART_init(void)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	af00      	add	r7, sp, #0
	EDBG_UART_CLOCK_init();
     9f0:	4b05      	ldr	r3, [pc, #20]	; (a08 <EDBG_UART_init+0x1c>)
     9f2:	4798      	blx	r3
	usart_sync_init(&EDBG_UART, SERCOM2, (void *)NULL);
     9f4:	2200      	movs	r2, #0
     9f6:	4905      	ldr	r1, [pc, #20]	; (a0c <EDBG_UART_init+0x20>)
     9f8:	4805      	ldr	r0, [pc, #20]	; (a10 <EDBG_UART_init+0x24>)
     9fa:	4b06      	ldr	r3, [pc, #24]	; (a14 <EDBG_UART_init+0x28>)
     9fc:	4798      	blx	r3
	EDBG_UART_PORT_init();
     9fe:	4b06      	ldr	r3, [pc, #24]	; (a18 <EDBG_UART_init+0x2c>)
     a00:	4798      	blx	r3
}
     a02:	bf00      	nop
     a04:	bd80      	pop	{r7, pc}
     a06:	bf00      	nop
     a08:	000009b9 	.word	0x000009b9
     a0c:	41012000 	.word	0x41012000
     a10:	20000058 	.word	0x20000058
     a14:	00000b6d 	.word	0x00000b6d
     a18:	00000995 	.word	0x00000995

00000a1c <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     a1c:	b580      	push	{r7, lr}
     a1e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     a20:	4902      	ldr	r1, [pc, #8]	; (a2c <PWM_0_PORT_init+0x10>)
     a22:	204a      	movs	r0, #74	; 0x4a
     a24:	4b02      	ldr	r3, [pc, #8]	; (a30 <PWM_0_PORT_init+0x14>)
     a26:	4798      	blx	r3
}
     a28:	bf00      	nop
     a2a:	bd80      	pop	{r7, pc}
     a2c:	004a0005 	.word	0x004a0005
     a30:	000008f5 	.word	0x000008f5

00000a34 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     a34:	b580      	push	{r7, lr}
     a36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     a38:	4804      	ldr	r0, [pc, #16]	; (a4c <PWM_0_CLOCK_init+0x18>)
     a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <PWM_0_CLOCK_init+0x1c>)
     a3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a3e:	2240      	movs	r2, #64	; 0x40
     a40:	2119      	movs	r1, #25
     a42:	4804      	ldr	r0, [pc, #16]	; (a54 <PWM_0_CLOCK_init+0x20>)
     a44:	4b04      	ldr	r3, [pc, #16]	; (a58 <PWM_0_CLOCK_init+0x24>)
     a46:	4798      	blx	r3
}
     a48:	bf00      	nop
     a4a:	bd80      	pop	{r7, pc}
     a4c:	40000800 	.word	0x40000800
     a50:	000003c9 	.word	0x000003c9
     a54:	40001c00 	.word	0x40001c00
     a58:	00000383 	.word	0x00000383

00000a5c <system_init>:

void system_init(void)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	af00      	add	r7, sp, #0
	init_mcu();
     a60:	4b39      	ldr	r3, [pc, #228]	; (b48 <system_init+0xec>)
     a62:	4798      	blx	r3

	// GPIO on PB01

	gpio_set_pin_level(SPI_CS,
     a64:	2101      	movs	r1, #1
     a66:	2021      	movs	r0, #33	; 0x21
     a68:	4b38      	ldr	r3, [pc, #224]	; (b4c <system_init+0xf0>)
     a6a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(SPI_CS, GPIO_DIRECTION_OUT);
     a6c:	2102      	movs	r1, #2
     a6e:	2021      	movs	r0, #33	; 0x21
     a70:	4b37      	ldr	r3, [pc, #220]	; (b50 <system_init+0xf4>)
     a72:	4798      	blx	r3

	gpio_set_pin_function(SPI_CS, GPIO_PIN_FUNCTION_OFF);
     a74:	f04f 31ff 	mov.w	r1, #4294967295
     a78:	2021      	movs	r0, #33	; 0x21
     a7a:	4b36      	ldr	r3, [pc, #216]	; (b54 <system_init+0xf8>)
     a7c:	4798      	blx	r3

	// GPIO on PB04

	gpio_set_pin_level(PIN1,
     a7e:	2100      	movs	r1, #0
     a80:	2024      	movs	r0, #36	; 0x24
     a82:	4b32      	ldr	r3, [pc, #200]	; (b4c <system_init+0xf0>)
     a84:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PIN1, GPIO_DIRECTION_OUT);
     a86:	2102      	movs	r1, #2
     a88:	2024      	movs	r0, #36	; 0x24
     a8a:	4b31      	ldr	r3, [pc, #196]	; (b50 <system_init+0xf4>)
     a8c:	4798      	blx	r3

	gpio_set_pin_function(PIN1, GPIO_PIN_FUNCTION_OFF);
     a8e:	f04f 31ff 	mov.w	r1, #4294967295
     a92:	2024      	movs	r0, #36	; 0x24
     a94:	4b2f      	ldr	r3, [pc, #188]	; (b54 <system_init+0xf8>)
     a96:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT1, GPIO_DIRECTION_IN);
     a98:	2101      	movs	r1, #1
     a9a:	2025      	movs	r0, #37	; 0x25
     a9c:	4b2c      	ldr	r3, [pc, #176]	; (b50 <system_init+0xf4>)
     a9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT1,
     aa0:	2101      	movs	r1, #1
     aa2:	2025      	movs	r0, #37	; 0x25
     aa4:	4b2c      	ldr	r3, [pc, #176]	; (b58 <system_init+0xfc>)
     aa6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT1, GPIO_PIN_FUNCTION_OFF);
     aa8:	f04f 31ff 	mov.w	r1, #4294967295
     aac:	2025      	movs	r0, #37	; 0x25
     aae:	4b29      	ldr	r3, [pc, #164]	; (b54 <system_init+0xf8>)
     ab0:	4798      	blx	r3

	// GPIO on PB06

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT2, GPIO_DIRECTION_IN);
     ab2:	2101      	movs	r1, #1
     ab4:	2026      	movs	r0, #38	; 0x26
     ab6:	4b26      	ldr	r3, [pc, #152]	; (b50 <system_init+0xf4>)
     ab8:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT2,
     aba:	2101      	movs	r1, #1
     abc:	2026      	movs	r0, #38	; 0x26
     abe:	4b26      	ldr	r3, [pc, #152]	; (b58 <system_init+0xfc>)
     ac0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT2, GPIO_PIN_FUNCTION_OFF);
     ac2:	f04f 31ff 	mov.w	r1, #4294967295
     ac6:	2026      	movs	r0, #38	; 0x26
     ac8:	4b22      	ldr	r3, [pc, #136]	; (b54 <system_init+0xf8>)
     aca:	4798      	blx	r3

	// GPIO on PB14

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT3, GPIO_DIRECTION_IN);
     acc:	2101      	movs	r1, #1
     ace:	202e      	movs	r0, #46	; 0x2e
     ad0:	4b1f      	ldr	r3, [pc, #124]	; (b50 <system_init+0xf4>)
     ad2:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT3,
     ad4:	2101      	movs	r1, #1
     ad6:	202e      	movs	r0, #46	; 0x2e
     ad8:	4b1f      	ldr	r3, [pc, #124]	; (b58 <system_init+0xfc>)
     ada:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT3, GPIO_PIN_FUNCTION_OFF);
     adc:	f04f 31ff 	mov.w	r1, #4294967295
     ae0:	202e      	movs	r0, #46	; 0x2e
     ae2:	4b1c      	ldr	r3, [pc, #112]	; (b54 <system_init+0xf8>)
     ae4:	4798      	blx	r3

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT4, GPIO_DIRECTION_IN);
     ae6:	2101      	movs	r1, #1
     ae8:	202f      	movs	r0, #47	; 0x2f
     aea:	4b19      	ldr	r3, [pc, #100]	; (b50 <system_init+0xf4>)
     aec:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT4,
     aee:	2101      	movs	r1, #1
     af0:	202f      	movs	r0, #47	; 0x2f
     af2:	4b19      	ldr	r3, [pc, #100]	; (b58 <system_init+0xfc>)
     af4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT4, GPIO_PIN_FUNCTION_OFF);
     af6:	f04f 31ff 	mov.w	r1, #4294967295
     afa:	202f      	movs	r0, #47	; 0x2f
     afc:	4b15      	ldr	r3, [pc, #84]	; (b54 <system_init+0xf8>)
     afe:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     b00:	2101      	movs	r1, #1
     b02:	203f      	movs	r0, #63	; 0x3f
     b04:	4b12      	ldr	r3, [pc, #72]	; (b50 <system_init+0xf4>)
     b06:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     b08:	2101      	movs	r1, #1
     b0a:	203f      	movs	r0, #63	; 0x3f
     b0c:	4b12      	ldr	r3, [pc, #72]	; (b58 <system_init+0xfc>)
     b0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     b10:	f04f 31ff 	mov.w	r1, #4294967295
     b14:	203f      	movs	r0, #63	; 0x3f
     b16:	4b0f      	ldr	r3, [pc, #60]	; (b54 <system_init+0xf8>)
     b18:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     b1a:	2100      	movs	r1, #0
     b1c:	2052      	movs	r0, #82	; 0x52
     b1e:	4b0b      	ldr	r3, [pc, #44]	; (b4c <system_init+0xf0>)
     b20:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     b22:	2102      	movs	r1, #2
     b24:	2052      	movs	r0, #82	; 0x52
     b26:	4b0a      	ldr	r3, [pc, #40]	; (b50 <system_init+0xf4>)
     b28:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     b2a:	f04f 31ff 	mov.w	r1, #4294967295
     b2e:	2052      	movs	r0, #82	; 0x52
     b30:	4b08      	ldr	r3, [pc, #32]	; (b54 <system_init+0xf8>)
     b32:	4798      	blx	r3

	EDBG_UART_init();
     b34:	4b09      	ldr	r3, [pc, #36]	; (b5c <system_init+0x100>)
     b36:	4798      	blx	r3

	PWM_0_CLOCK_init();
     b38:	4b09      	ldr	r3, [pc, #36]	; (b60 <system_init+0x104>)
     b3a:	4798      	blx	r3

	PWM_0_PORT_init();
     b3c:	4b09      	ldr	r3, [pc, #36]	; (b64 <system_init+0x108>)
     b3e:	4798      	blx	r3

	PWM_0_init();
     b40:	4b09      	ldr	r3, [pc, #36]	; (b68 <system_init+0x10c>)
     b42:	4798      	blx	r3
}
     b44:	bf00      	nop
     b46:	bd80      	pop	{r7, pc}
     b48:	00000985 	.word	0x00000985
     b4c:	0000094d 	.word	0x0000094d
     b50:	00000915 	.word	0x00000915
     b54:	000008f5 	.word	0x000008f5
     b58:	000008c1 	.word	0x000008c1
     b5c:	000009ed 	.word	0x000009ed
     b60:	00000a35 	.word	0x00000a35
     b64:	00000a1d 	.word	0x00000a1d
     b68:	0000181d 	.word	0x0000181d

00000b6c <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
     b6c:	b580      	push	{r7, lr}
     b6e:	b086      	sub	sp, #24
     b70:	af00      	add	r7, sp, #0
     b72:	60f8      	str	r0, [r7, #12]
     b74:	60b9      	str	r1, [r7, #8]
     b76:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
     b78:	68fb      	ldr	r3, [r7, #12]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d004      	beq.n	b88 <usart_sync_init+0x1c>
     b7e:	68bb      	ldr	r3, [r7, #8]
     b80:	2b00      	cmp	r3, #0
     b82:	d001      	beq.n	b88 <usart_sync_init+0x1c>
     b84:	2301      	movs	r3, #1
     b86:	e000      	b.n	b8a <usart_sync_init+0x1e>
     b88:	2300      	movs	r3, #0
     b8a:	f003 0301 	and.w	r3, r3, #1
     b8e:	b2db      	uxtb	r3, r3
     b90:	2234      	movs	r2, #52	; 0x34
     b92:	490d      	ldr	r1, [pc, #52]	; (bc8 <usart_sync_init+0x5c>)
     b94:	4618      	mov	r0, r3
     b96:	4b0d      	ldr	r3, [pc, #52]	; (bcc <usart_sync_init+0x60>)
     b98:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	3308      	adds	r3, #8
     b9e:	68b9      	ldr	r1, [r7, #8]
     ba0:	4618      	mov	r0, r3
     ba2:	4b0b      	ldr	r3, [pc, #44]	; (bd0 <usart_sync_init+0x64>)
     ba4:	4798      	blx	r3
     ba6:	6178      	str	r0, [r7, #20]
	if (init_status) {
     ba8:	697b      	ldr	r3, [r7, #20]
     baa:	2b00      	cmp	r3, #0
     bac:	d001      	beq.n	bb2 <usart_sync_init+0x46>
		return init_status;
     bae:	697b      	ldr	r3, [r7, #20]
     bb0:	e006      	b.n	bc0 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	4a07      	ldr	r2, [pc, #28]	; (bd4 <usart_sync_init+0x68>)
     bb6:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
     bb8:	68fb      	ldr	r3, [r7, #12]
     bba:	4a07      	ldr	r2, [pc, #28]	; (bd8 <usart_sync_init+0x6c>)
     bbc:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     bbe:	2300      	movs	r3, #0
}
     bc0:	4618      	mov	r0, r3
     bc2:	3718      	adds	r7, #24
     bc4:	46bd      	mov	sp, r7
     bc6:	bd80      	pop	{r7, pc}
     bc8:	0000215c 	.word	0x0000215c
     bcc:	00000dbd 	.word	0x00000dbd
     bd0:	0000135d 	.word	0x0000135d
     bd4:	00000d29 	.word	0x00000d29
     bd8:	00000c61 	.word	0x00000c61

00000bdc <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
     be2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     be4:	687b      	ldr	r3, [r7, #4]
     be6:	2b00      	cmp	r3, #0
     be8:	bf14      	ite	ne
     bea:	2301      	movne	r3, #1
     bec:	2300      	moveq	r3, #0
     bee:	b2db      	uxtb	r3, r3
     bf0:	2253      	movs	r2, #83	; 0x53
     bf2:	4907      	ldr	r1, [pc, #28]	; (c10 <usart_sync_enable+0x34>)
     bf4:	4618      	mov	r0, r3
     bf6:	4b07      	ldr	r3, [pc, #28]	; (c14 <usart_sync_enable+0x38>)
     bf8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	3308      	adds	r3, #8
     bfe:	4618      	mov	r0, r3
     c00:	4b05      	ldr	r3, [pc, #20]	; (c18 <usart_sync_enable+0x3c>)
     c02:	4798      	blx	r3

	return ERR_NONE;
     c04:	2300      	movs	r3, #0
}
     c06:	4618      	mov	r0, r3
     c08:	3708      	adds	r7, #8
     c0a:	46bd      	mov	sp, r7
     c0c:	bd80      	pop	{r7, pc}
     c0e:	bf00      	nop
     c10:	0000215c 	.word	0x0000215c
     c14:	00000dbd 	.word	0x00000dbd
     c18:	000013a1 	.word	0x000013a1

00000c1c <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b082      	sub	sp, #8
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
     c24:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	2b00      	cmp	r3, #0
     c2a:	d004      	beq.n	c36 <usart_sync_get_io_descriptor+0x1a>
     c2c:	683b      	ldr	r3, [r7, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d001      	beq.n	c36 <usart_sync_get_io_descriptor+0x1a>
     c32:	2301      	movs	r3, #1
     c34:	e000      	b.n	c38 <usart_sync_get_io_descriptor+0x1c>
     c36:	2300      	movs	r3, #0
     c38:	f003 0301 	and.w	r3, r3, #1
     c3c:	b2db      	uxtb	r3, r3
     c3e:	2269      	movs	r2, #105	; 0x69
     c40:	4905      	ldr	r1, [pc, #20]	; (c58 <usart_sync_get_io_descriptor+0x3c>)
     c42:	4618      	mov	r0, r3
     c44:	4b05      	ldr	r3, [pc, #20]	; (c5c <usart_sync_get_io_descriptor+0x40>)
     c46:	4798      	blx	r3

	*io = &descr->io;
     c48:	687a      	ldr	r2, [r7, #4]
     c4a:	683b      	ldr	r3, [r7, #0]
     c4c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
     c4e:	2300      	movs	r3, #0
}
     c50:	4618      	mov	r0, r3
     c52:	3708      	adds	r7, #8
     c54:	46bd      	mov	sp, r7
     c56:	bd80      	pop	{r7, pc}
     c58:	0000215c 	.word	0x0000215c
     c5c:	00000dbd 	.word	0x00000dbd

00000c60 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     c60:	b580      	push	{r7, lr}
     c62:	b086      	sub	sp, #24
     c64:	af00      	add	r7, sp, #0
     c66:	60f8      	str	r0, [r7, #12]
     c68:	60b9      	str	r1, [r7, #8]
     c6a:	4613      	mov	r3, r2
     c6c:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
     c6e:	2300      	movs	r3, #0
     c70:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     c72:	68fb      	ldr	r3, [r7, #12]
     c74:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	2b00      	cmp	r3, #0
     c7a:	d007      	beq.n	c8c <usart_sync_write+0x2c>
     c7c:	68bb      	ldr	r3, [r7, #8]
     c7e:	2b00      	cmp	r3, #0
     c80:	d004      	beq.n	c8c <usart_sync_write+0x2c>
     c82:	88fb      	ldrh	r3, [r7, #6]
     c84:	2b00      	cmp	r3, #0
     c86:	d001      	beq.n	c8c <usart_sync_write+0x2c>
     c88:	2301      	movs	r3, #1
     c8a:	e000      	b.n	c8e <usart_sync_write+0x2e>
     c8c:	2300      	movs	r3, #0
     c8e:	f003 0301 	and.w	r3, r3, #1
     c92:	b2db      	uxtb	r3, r3
     c94:	22f1      	movs	r2, #241	; 0xf1
     c96:	491f      	ldr	r1, [pc, #124]	; (d14 <usart_sync_write+0xb4>)
     c98:	4618      	mov	r0, r3
     c9a:	4b1f      	ldr	r3, [pc, #124]	; (d18 <usart_sync_write+0xb8>)
     c9c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     c9e:	bf00      	nop
     ca0:	693b      	ldr	r3, [r7, #16]
     ca2:	3308      	adds	r3, #8
     ca4:	4618      	mov	r0, r3
     ca6:	4b1d      	ldr	r3, [pc, #116]	; (d1c <usart_sync_write+0xbc>)
     ca8:	4798      	blx	r3
     caa:	4603      	mov	r3, r0
     cac:	f083 0301 	eor.w	r3, r3, #1
     cb0:	b2db      	uxtb	r3, r3
     cb2:	2b00      	cmp	r3, #0
     cb4:	d1f4      	bne.n	ca0 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     cb6:	693b      	ldr	r3, [r7, #16]
     cb8:	f103 0008 	add.w	r0, r3, #8
     cbc:	68ba      	ldr	r2, [r7, #8]
     cbe:	697b      	ldr	r3, [r7, #20]
     cc0:	4413      	add	r3, r2
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	4619      	mov	r1, r3
     cc6:	4b16      	ldr	r3, [pc, #88]	; (d20 <usart_sync_write+0xc0>)
     cc8:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     cca:	bf00      	nop
     ccc:	693b      	ldr	r3, [r7, #16]
     cce:	3308      	adds	r3, #8
     cd0:	4618      	mov	r0, r3
     cd2:	4b12      	ldr	r3, [pc, #72]	; (d1c <usart_sync_write+0xbc>)
     cd4:	4798      	blx	r3
     cd6:	4603      	mov	r3, r0
     cd8:	f083 0301 	eor.w	r3, r3, #1
     cdc:	b2db      	uxtb	r3, r3
     cde:	2b00      	cmp	r3, #0
     ce0:	d1f4      	bne.n	ccc <usart_sync_write+0x6c>
			;
	} while (++offset < length);
     ce2:	697b      	ldr	r3, [r7, #20]
     ce4:	3301      	adds	r3, #1
     ce6:	617b      	str	r3, [r7, #20]
     ce8:	88fb      	ldrh	r3, [r7, #6]
     cea:	697a      	ldr	r2, [r7, #20]
     cec:	429a      	cmp	r2, r3
     cee:	d3e2      	bcc.n	cb6 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
     cf0:	bf00      	nop
     cf2:	693b      	ldr	r3, [r7, #16]
     cf4:	3308      	adds	r3, #8
     cf6:	4618      	mov	r0, r3
     cf8:	4b0a      	ldr	r3, [pc, #40]	; (d24 <usart_sync_write+0xc4>)
     cfa:	4798      	blx	r3
     cfc:	4603      	mov	r3, r0
     cfe:	f083 0301 	eor.w	r3, r3, #1
     d02:	b2db      	uxtb	r3, r3
     d04:	2b00      	cmp	r3, #0
     d06:	d1f4      	bne.n	cf2 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
     d08:	697b      	ldr	r3, [r7, #20]
}
     d0a:	4618      	mov	r0, r3
     d0c:	3718      	adds	r7, #24
     d0e:	46bd      	mov	sp, r7
     d10:	bd80      	pop	{r7, pc}
     d12:	bf00      	nop
     d14:	0000215c 	.word	0x0000215c
     d18:	00000dbd 	.word	0x00000dbd
     d1c:	0000140d 	.word	0x0000140d
     d20:	000013c1 	.word	0x000013c1
     d24:	0000142d 	.word	0x0000142d

00000d28 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     d28:	b590      	push	{r4, r7, lr}
     d2a:	b087      	sub	sp, #28
     d2c:	af00      	add	r7, sp, #0
     d2e:	60f8      	str	r0, [r7, #12]
     d30:	60b9      	str	r1, [r7, #8]
     d32:	4613      	mov	r3, r2
     d34:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
     d36:	2300      	movs	r3, #0
     d38:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     d3a:	68fb      	ldr	r3, [r7, #12]
     d3c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	2b00      	cmp	r3, #0
     d42:	d007      	beq.n	d54 <usart_sync_read+0x2c>
     d44:	68bb      	ldr	r3, [r7, #8]
     d46:	2b00      	cmp	r3, #0
     d48:	d004      	beq.n	d54 <usart_sync_read+0x2c>
     d4a:	88fb      	ldrh	r3, [r7, #6]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d001      	beq.n	d54 <usart_sync_read+0x2c>
     d50:	2301      	movs	r3, #1
     d52:	e000      	b.n	d56 <usart_sync_read+0x2e>
     d54:	2300      	movs	r3, #0
     d56:	f003 0301 	and.w	r3, r3, #1
     d5a:	b2db      	uxtb	r3, r3
     d5c:	f44f 7286 	mov.w	r2, #268	; 0x10c
     d60:	4912      	ldr	r1, [pc, #72]	; (dac <usart_sync_read+0x84>)
     d62:	4618      	mov	r0, r3
     d64:	4b12      	ldr	r3, [pc, #72]	; (db0 <usart_sync_read+0x88>)
     d66:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     d68:	bf00      	nop
     d6a:	693b      	ldr	r3, [r7, #16]
     d6c:	3308      	adds	r3, #8
     d6e:	4618      	mov	r0, r3
     d70:	4b10      	ldr	r3, [pc, #64]	; (db4 <usart_sync_read+0x8c>)
     d72:	4798      	blx	r3
     d74:	4603      	mov	r3, r0
     d76:	f083 0301 	eor.w	r3, r3, #1
     d7a:	b2db      	uxtb	r3, r3
     d7c:	2b00      	cmp	r3, #0
     d7e:	d1f4      	bne.n	d6a <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     d80:	68ba      	ldr	r2, [r7, #8]
     d82:	697b      	ldr	r3, [r7, #20]
     d84:	18d4      	adds	r4, r2, r3
     d86:	693b      	ldr	r3, [r7, #16]
     d88:	3308      	adds	r3, #8
     d8a:	4618      	mov	r0, r3
     d8c:	4b0a      	ldr	r3, [pc, #40]	; (db8 <usart_sync_read+0x90>)
     d8e:	4798      	blx	r3
     d90:	4603      	mov	r3, r0
     d92:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
     d94:	697b      	ldr	r3, [r7, #20]
     d96:	3301      	adds	r3, #1
     d98:	617b      	str	r3, [r7, #20]
     d9a:	88fb      	ldrh	r3, [r7, #6]
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	429a      	cmp	r2, r3
     da0:	d3e2      	bcc.n	d68 <usart_sync_read+0x40>

	return (int32_t)offset;
     da2:	697b      	ldr	r3, [r7, #20]
}
     da4:	4618      	mov	r0, r3
     da6:	371c      	adds	r7, #28
     da8:	46bd      	mov	sp, r7
     daa:	bd90      	pop	{r4, r7, pc}
     dac:	0000215c 	.word	0x0000215c
     db0:	00000dbd 	.word	0x00000dbd
     db4:	0000144d 	.word	0x0000144d
     db8:	000013e9 	.word	0x000013e9

00000dbc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
     dbc:	b480      	push	{r7}
     dbe:	b085      	sub	sp, #20
     dc0:	af00      	add	r7, sp, #0
     dc2:	4603      	mov	r3, r0
     dc4:	60b9      	str	r1, [r7, #8]
     dc6:	607a      	str	r2, [r7, #4]
     dc8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
     dca:	7bfb      	ldrb	r3, [r7, #15]
     dcc:	f083 0301 	eor.w	r3, r3, #1
     dd0:	b2db      	uxtb	r3, r3
     dd2:	2b00      	cmp	r3, #0
     dd4:	d000      	beq.n	dd8 <assert+0x1c>
		__asm("BKPT #0");
     dd6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     dd8:	bf00      	nop
     dda:	3714      	adds	r7, #20
     ddc:	46bd      	mov	sp, r7
     dde:	f85d 7b04 	ldr.w	r7, [sp], #4
     de2:	4770      	bx	lr

00000de4 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
     de4:	b480      	push	{r7}
     de6:	b083      	sub	sp, #12
     de8:	af00      	add	r7, sp, #0
     dea:	6078      	str	r0, [r7, #4]
     dec:	460b      	mov	r3, r1
     dee:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	881b      	ldrh	r3, [r3, #0]
     df4:	b29a      	uxth	r2, r3
     df6:	887b      	ldrh	r3, [r7, #2]
     df8:	021b      	lsls	r3, r3, #8
     dfa:	b29b      	uxth	r3, r3
     dfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
     e00:	b29b      	uxth	r3, r3
     e02:	4313      	orrs	r3, r2
     e04:	b29a      	uxth	r2, r3
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
     e0a:	bf00      	nop
     e0c:	370c      	adds	r7, #12
     e0e:	46bd      	mov	sp, r7
     e10:	f85d 7b04 	ldr.w	r7, [sp], #4
     e14:	4770      	bx	lr
	...

00000e18 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e18:	b580      	push	{r7, lr}
     e1a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
     e1c:	2100      	movs	r1, #0
     e1e:	4808      	ldr	r0, [pc, #32]	; (e40 <_init_chip+0x28>)
     e20:	4b08      	ldr	r3, [pc, #32]	; (e44 <_init_chip+0x2c>)
     e22:	4798      	blx	r3

	_osc32kctrl_init_sources();
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <_init_chip+0x30>)
     e26:	4798      	blx	r3
	_oscctrl_init_sources();
     e28:	4b08      	ldr	r3, [pc, #32]	; (e4c <_init_chip+0x34>)
     e2a:	4798      	blx	r3
	_mclk_init();
     e2c:	4b08      	ldr	r3, [pc, #32]	; (e50 <_init_chip+0x38>)
     e2e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e30:	4b08      	ldr	r3, [pc, #32]	; (e54 <_init_chip+0x3c>)
     e32:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e34:	f640 70ff 	movw	r0, #4095	; 0xfff
     e38:	4b07      	ldr	r3, [pc, #28]	; (e58 <_init_chip+0x40>)
     e3a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
     e3c:	bf00      	nop
     e3e:	bd80      	pop	{r7, pc}
     e40:	41004000 	.word	0x41004000
     e44:	00000de5 	.word	0x00000de5
     e48:	00000f85 	.word	0x00000f85
     e4c:	0000101d 	.word	0x0000101d
     e50:	00000f01 	.word	0x00000f01
     e54:	0000105d 	.word	0x0000105d
     e58:	00000eb1 	.word	0x00000eb1

00000e5c <hri_gclk_wait_for_sync>:
{
     e5c:	b480      	push	{r7}
     e5e:	b083      	sub	sp, #12
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e66:	bf00      	nop
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	685a      	ldr	r2, [r3, #4]
     e6c:	683b      	ldr	r3, [r7, #0]
     e6e:	4013      	ands	r3, r2
     e70:	2b00      	cmp	r3, #0
     e72:	d1f9      	bne.n	e68 <hri_gclk_wait_for_sync+0xc>
}
     e74:	bf00      	nop
     e76:	370c      	adds	r7, #12
     e78:	46bd      	mov	sp, r7
     e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e7e:	4770      	bx	lr

00000e80 <hri_gclk_write_GENCTRL_reg>:
{
     e80:	b580      	push	{r7, lr}
     e82:	b084      	sub	sp, #16
     e84:	af00      	add	r7, sp, #0
     e86:	60f8      	str	r0, [r7, #12]
     e88:	460b      	mov	r3, r1
     e8a:	607a      	str	r2, [r7, #4]
     e8c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e8e:	7afa      	ldrb	r2, [r7, #11]
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	3208      	adds	r2, #8
     e94:	6879      	ldr	r1, [r7, #4]
     e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
     e9a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
     e9e:	68f8      	ldr	r0, [r7, #12]
     ea0:	4b02      	ldr	r3, [pc, #8]	; (eac <hri_gclk_write_GENCTRL_reg+0x2c>)
     ea2:	4798      	blx	r3
}
     ea4:	bf00      	nop
     ea6:	3710      	adds	r7, #16
     ea8:	46bd      	mov	sp, r7
     eaa:	bd80      	pop	{r7, pc}
     eac:	00000e5d 	.word	0x00000e5d

00000eb0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
     eb0:	b580      	push	{r7, lr}
     eb2:	b082      	sub	sp, #8
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	f003 0301 	and.w	r3, r3, #1
     ebe:	2b00      	cmp	r3, #0
     ec0:	d004      	beq.n	ecc <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
     ec2:	4a04      	ldr	r2, [pc, #16]	; (ed4 <_gclk_init_generators_by_fref+0x24>)
     ec4:	2100      	movs	r1, #0
     ec6:	4804      	ldr	r0, [pc, #16]	; (ed8 <_gclk_init_generators_by_fref+0x28>)
     ec8:	4b04      	ldr	r3, [pc, #16]	; (edc <_gclk_init_generators_by_fref+0x2c>)
     eca:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
     ecc:	bf00      	nop
     ece:	3708      	adds	r7, #8
     ed0:	46bd      	mov	sp, r7
     ed2:	bd80      	pop	{r7, pc}
     ed4:	00010101 	.word	0x00010101
     ed8:	40001c00 	.word	0x40001c00
     edc:	00000e81 	.word	0x00000e81

00000ee0 <hri_mclk_write_CPUDIV_reg>:
{
     ee0:	b480      	push	{r7}
     ee2:	b083      	sub	sp, #12
     ee4:	af00      	add	r7, sp, #0
     ee6:	6078      	str	r0, [r7, #4]
     ee8:	460b      	mov	r3, r1
     eea:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
     eec:	687b      	ldr	r3, [r7, #4]
     eee:	78fa      	ldrb	r2, [r7, #3]
     ef0:	715a      	strb	r2, [r3, #5]
}
     ef2:	bf00      	nop
     ef4:	370c      	adds	r7, #12
     ef6:	46bd      	mov	sp, r7
     ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
     efc:	4770      	bx	lr
	...

00000f00 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
     f00:	b580      	push	{r7, lr}
     f02:	b082      	sub	sp, #8
     f04:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
     f06:	4b05      	ldr	r3, [pc, #20]	; (f1c <_mclk_init+0x1c>)
     f08:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
     f0a:	2101      	movs	r1, #1
     f0c:	6878      	ldr	r0, [r7, #4]
     f0e:	4b04      	ldr	r3, [pc, #16]	; (f20 <_mclk_init+0x20>)
     f10:	4798      	blx	r3
}
     f12:	bf00      	nop
     f14:	3708      	adds	r7, #8
     f16:	46bd      	mov	sp, r7
     f18:	bd80      	pop	{r7, pc}
     f1a:	bf00      	nop
     f1c:	40000800 	.word	0x40000800
     f20:	00000ee1 	.word	0x00000ee1

00000f24 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
     f24:	b480      	push	{r7}
     f26:	b083      	sub	sp, #12
     f28:	af00      	add	r7, sp, #0
     f2a:	6078      	str	r0, [r7, #4]
     f2c:	460b      	mov	r3, r1
     f2e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	78fa      	ldrb	r2, [r7, #3]
     f34:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
     f36:	bf00      	nop
     f38:	370c      	adds	r7, #12
     f3a:	46bd      	mov	sp, r7
     f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f40:	4770      	bx	lr

00000f42 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
     f42:	b480      	push	{r7}
     f44:	b085      	sub	sp, #20
     f46:	af00      	add	r7, sp, #0
     f48:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	69db      	ldr	r3, [r3, #28]
     f4e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     f50:	68fb      	ldr	r3, [r7, #12]
     f52:	0a1b      	lsrs	r3, r3, #8
     f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     f58:	60fb      	str	r3, [r7, #12]
	return tmp;
     f5a:	68fb      	ldr	r3, [r7, #12]
}
     f5c:	4618      	mov	r0, r3
     f5e:	3714      	adds	r7, #20
     f60:	46bd      	mov	sp, r7
     f62:	f85d 7b04 	ldr.w	r7, [sp], #4
     f66:	4770      	bx	lr

00000f68 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
     f68:	b480      	push	{r7}
     f6a:	b083      	sub	sp, #12
     f6c:	af00      	add	r7, sp, #0
     f6e:	6078      	str	r0, [r7, #4]
     f70:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	683a      	ldr	r2, [r7, #0]
     f76:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
     f78:	bf00      	nop
     f7a:	370c      	adds	r7, #12
     f7c:	46bd      	mov	sp, r7
     f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
     f82:	4770      	bx	lr

00000f84 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
     f84:	b580      	push	{r7, lr}
     f86:	b082      	sub	sp, #8
     f88:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
     f8a:	4b0c      	ldr	r3, [pc, #48]	; (fbc <_osc32kctrl_init_sources+0x38>)
     f8c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
     f8e:	2300      	movs	r3, #0
     f90:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
     f92:	6878      	ldr	r0, [r7, #4]
     f94:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <_osc32kctrl_init_sources+0x3c>)
     f96:	4798      	blx	r3
     f98:	4603      	mov	r3, r0
     f9a:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f9c:	887b      	ldrh	r3, [r7, #2]
     f9e:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     fa0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
     fa4:	4619      	mov	r1, r3
     fa6:	6878      	ldr	r0, [r7, #4]
     fa8:	4b06      	ldr	r3, [pc, #24]	; (fc4 <_osc32kctrl_init_sources+0x40>)
     faa:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
     fac:	2101      	movs	r1, #1
     fae:	6878      	ldr	r0, [r7, #4]
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <_osc32kctrl_init_sources+0x44>)
     fb2:	4798      	blx	r3
	(void)calib;
}
     fb4:	bf00      	nop
     fb6:	3708      	adds	r7, #8
     fb8:	46bd      	mov	sp, r7
     fba:	bd80      	pop	{r7, pc}
     fbc:	40001400 	.word	0x40001400
     fc0:	00000f43 	.word	0x00000f43
     fc4:	00000f69 	.word	0x00000f69
     fc8:	00000f25 	.word	0x00000f25

00000fcc <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
     fcc:	b480      	push	{r7}
     fce:	b083      	sub	sp, #12
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	691b      	ldr	r3, [r3, #16]
     fd8:	085b      	lsrs	r3, r3, #1
     fda:	f003 0301 	and.w	r3, r3, #1
     fde:	2b00      	cmp	r3, #0
     fe0:	bf14      	ite	ne
     fe2:	2301      	movne	r3, #1
     fe4:	2300      	moveq	r3, #0
     fe6:	b2db      	uxtb	r3, r3
}
     fe8:	4618      	mov	r0, r3
     fea:	370c      	adds	r7, #12
     fec:	46bd      	mov	sp, r7
     fee:	f85d 7b04 	ldr.w	r7, [sp], #4
     ff2:	4770      	bx	lr

00000ff4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
     ff4:	b480      	push	{r7}
     ff6:	b085      	sub	sp, #20
     ff8:	af00      	add	r7, sp, #0
     ffa:	60f8      	str	r0, [r7, #12]
     ffc:	460b      	mov	r3, r1
     ffe:	607a      	str	r2, [r7, #4]
    1000:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1002:	7afb      	ldrb	r3, [r7, #11]
    1004:	68fa      	ldr	r2, [r7, #12]
    1006:	3304      	adds	r3, #4
    1008:	009b      	lsls	r3, r3, #2
    100a:	4413      	add	r3, r2
    100c:	687a      	ldr	r2, [r7, #4]
    100e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1010:	bf00      	nop
    1012:	3714      	adds	r7, #20
    1014:	46bd      	mov	sp, r7
    1016:	f85d 7b04 	ldr.w	r7, [sp], #4
    101a:	4770      	bx	lr

0000101c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    101c:	b580      	push	{r7, lr}
    101e:	b082      	sub	sp, #8
    1020:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1022:	4b0a      	ldr	r3, [pc, #40]	; (104c <_oscctrl_init_sources+0x30>)
    1024:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    1026:	4a0a      	ldr	r2, [pc, #40]	; (1050 <_oscctrl_init_sources+0x34>)
    1028:	2101      	movs	r1, #1
    102a:	6878      	ldr	r0, [r7, #4]
    102c:	4b09      	ldr	r3, [pc, #36]	; (1054 <_oscctrl_init_sources+0x38>)
    102e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1030:	bf00      	nop
    1032:	6878      	ldr	r0, [r7, #4]
    1034:	4b08      	ldr	r3, [pc, #32]	; (1058 <_oscctrl_init_sources+0x3c>)
    1036:	4798      	blx	r3
    1038:	4603      	mov	r3, r0
    103a:	f083 0301 	eor.w	r3, r3, #1
    103e:	b2db      	uxtb	r3, r3
    1040:	2b00      	cmp	r3, #0
    1042:	d1f6      	bne.n	1032 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1044:	bf00      	nop
    1046:	3708      	adds	r7, #8
    1048:	46bd      	mov	sp, r7
    104a:	bd80      	pop	{r7, pc}
    104c:	40001000 	.word	0x40001000
    1050:	03002606 	.word	0x03002606
    1054:	00000ff5 	.word	0x00000ff5
    1058:	00000fcd 	.word	0x00000fcd

0000105c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    105c:	b480      	push	{r7}
    105e:	b083      	sub	sp, #12
    1060:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1062:	4b04      	ldr	r3, [pc, #16]	; (1074 <_oscctrl_init_referenced_generators+0x18>)
    1064:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    1066:	bf00      	nop
    1068:	370c      	adds	r7, #12
    106a:	46bd      	mov	sp, r7
    106c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1070:	4770      	bx	lr
    1072:	bf00      	nop
    1074:	40001000 	.word	0x40001000

00001078 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    1078:	b480      	push	{r7}
    107a:	b083      	sub	sp, #12
    107c:	af00      	add	r7, sp, #0
    107e:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	789b      	ldrb	r3, [r3, #2]
    1084:	b2db      	uxtb	r3, r3
}
    1086:	4618      	mov	r0, r3
    1088:	370c      	adds	r7, #12
    108a:	46bd      	mov	sp, r7
    108c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1090:	4770      	bx	lr

00001092 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    1092:	b480      	push	{r7}
    1094:	b083      	sub	sp, #12
    1096:	af00      	add	r7, sp, #0
    1098:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	685b      	ldr	r3, [r3, #4]
}
    109e:	4618      	mov	r0, r3
    10a0:	370c      	adds	r7, #12
    10a2:	46bd      	mov	sp, r7
    10a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10a8:	4770      	bx	lr
	...

000010ac <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    10ac:	b590      	push	{r4, r7, lr}
    10ae:	b083      	sub	sp, #12
    10b0:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    10b2:	4b17      	ldr	r3, [pc, #92]	; (1110 <RAMECC_Handler+0x64>)
    10b4:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    10b6:	4817      	ldr	r0, [pc, #92]	; (1114 <RAMECC_Handler+0x68>)
    10b8:	4b17      	ldr	r3, [pc, #92]	; (1118 <RAMECC_Handler+0x6c>)
    10ba:	4798      	blx	r3
    10bc:	4603      	mov	r3, r0
    10be:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    10c0:	683b      	ldr	r3, [r7, #0]
    10c2:	f003 0302 	and.w	r3, r3, #2
    10c6:	2b00      	cmp	r3, #0
    10c8:	d00c      	beq.n	10e4 <RAMECC_Handler+0x38>
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d008      	beq.n	10e4 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	681c      	ldr	r4, [r3, #0]
    10d6:	480f      	ldr	r0, [pc, #60]	; (1114 <RAMECC_Handler+0x68>)
    10d8:	4b10      	ldr	r3, [pc, #64]	; (111c <RAMECC_Handler+0x70>)
    10da:	4798      	blx	r3
    10dc:	4603      	mov	r3, r0
    10de:	4618      	mov	r0, r3
    10e0:	47a0      	blx	r4
    10e2:	e012      	b.n	110a <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	f003 0301 	and.w	r3, r3, #1
    10ea:	2b00      	cmp	r3, #0
    10ec:	d00c      	beq.n	1108 <RAMECC_Handler+0x5c>
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	685b      	ldr	r3, [r3, #4]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d008      	beq.n	1108 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	685c      	ldr	r4, [r3, #4]
    10fa:	4806      	ldr	r0, [pc, #24]	; (1114 <RAMECC_Handler+0x68>)
    10fc:	4b07      	ldr	r3, [pc, #28]	; (111c <RAMECC_Handler+0x70>)
    10fe:	4798      	blx	r3
    1100:	4603      	mov	r3, r0
    1102:	4618      	mov	r0, r3
    1104:	47a0      	blx	r4
    1106:	e000      	b.n	110a <RAMECC_Handler+0x5e>
	} else {
		return;
    1108:	bf00      	nop
	}
}
    110a:	370c      	adds	r7, #12
    110c:	46bd      	mov	sp, r7
    110e:	bd90      	pop	{r4, r7, pc}
    1110:	20000064 	.word	0x20000064
    1114:	41020000 	.word	0x41020000
    1118:	00001079 	.word	0x00001079
    111c:	00001093 	.word	0x00001093

00001120 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1120:	b480      	push	{r7}
    1122:	b083      	sub	sp, #12
    1124:	af00      	add	r7, sp, #0
    1126:	6078      	str	r0, [r7, #4]
    1128:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    112a:	bf00      	nop
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	69da      	ldr	r2, [r3, #28]
    1130:	683b      	ldr	r3, [r7, #0]
    1132:	4013      	ands	r3, r2
    1134:	2b00      	cmp	r3, #0
    1136:	d1f9      	bne.n	112c <hri_sercomusart_wait_for_sync+0xc>
	};
}
    1138:	bf00      	nop
    113a:	370c      	adds	r7, #12
    113c:	46bd      	mov	sp, r7
    113e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1142:	4770      	bx	lr

00001144 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1144:	b480      	push	{r7}
    1146:	b083      	sub	sp, #12
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
    114c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	69da      	ldr	r2, [r3, #28]
    1152:	683b      	ldr	r3, [r7, #0]
    1154:	4013      	ands	r3, r2
    1156:	2b00      	cmp	r3, #0
    1158:	bf14      	ite	ne
    115a:	2301      	movne	r3, #1
    115c:	2300      	moveq	r3, #0
    115e:	b2db      	uxtb	r3, r3
}
    1160:	4618      	mov	r0, r3
    1162:	370c      	adds	r7, #12
    1164:	46bd      	mov	sp, r7
    1166:	f85d 7b04 	ldr.w	r7, [sp], #4
    116a:	4770      	bx	lr

0000116c <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	7e1b      	ldrb	r3, [r3, #24]
    1178:	b2db      	uxtb	r3, r3
    117a:	f003 0301 	and.w	r3, r3, #1
    117e:	2b00      	cmp	r3, #0
    1180:	bf14      	ite	ne
    1182:	2301      	movne	r3, #1
    1184:	2300      	moveq	r3, #0
    1186:	b2db      	uxtb	r3, r3
}
    1188:	4618      	mov	r0, r3
    118a:	370c      	adds	r7, #12
    118c:	46bd      	mov	sp, r7
    118e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1192:	4770      	bx	lr

00001194 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1194:	b480      	push	{r7}
    1196:	b083      	sub	sp, #12
    1198:	af00      	add	r7, sp, #0
    119a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	7e1b      	ldrb	r3, [r3, #24]
    11a0:	b2db      	uxtb	r3, r3
    11a2:	085b      	lsrs	r3, r3, #1
    11a4:	f003 0301 	and.w	r3, r3, #1
    11a8:	2b00      	cmp	r3, #0
    11aa:	bf14      	ite	ne
    11ac:	2301      	movne	r3, #1
    11ae:	2300      	moveq	r3, #0
    11b0:	b2db      	uxtb	r3, r3
}
    11b2:	4618      	mov	r0, r3
    11b4:	370c      	adds	r7, #12
    11b6:	46bd      	mov	sp, r7
    11b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    11bc:	4770      	bx	lr

000011be <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    11be:	b480      	push	{r7}
    11c0:	b083      	sub	sp, #12
    11c2:	af00      	add	r7, sp, #0
    11c4:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    11c6:	687b      	ldr	r3, [r7, #4]
    11c8:	7e1b      	ldrb	r3, [r3, #24]
    11ca:	b2db      	uxtb	r3, r3
    11cc:	089b      	lsrs	r3, r3, #2
    11ce:	f003 0301 	and.w	r3, r3, #1
    11d2:	2b00      	cmp	r3, #0
    11d4:	bf14      	ite	ne
    11d6:	2301      	movne	r3, #1
    11d8:	2300      	moveq	r3, #0
    11da:	b2db      	uxtb	r3, r3
}
    11dc:	4618      	mov	r0, r3
    11de:	370c      	adds	r7, #12
    11e0:	46bd      	mov	sp, r7
    11e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    11e6:	4770      	bx	lr

000011e8 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	f043 0202 	orr.w	r2, r3, #2
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    11fc:	2103      	movs	r1, #3
    11fe:	6878      	ldr	r0, [r7, #4]
    1200:	4b02      	ldr	r3, [pc, #8]	; (120c <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    1202:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1204:	bf00      	nop
    1206:	3708      	adds	r7, #8
    1208:	46bd      	mov	sp, r7
    120a:	bd80      	pop	{r7, pc}
    120c:	00001121 	.word	0x00001121

00001210 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1210:	b580      	push	{r7, lr}
    1212:	b082      	sub	sp, #8
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1218:	687b      	ldr	r3, [r7, #4]
    121a:	681b      	ldr	r3, [r3, #0]
    121c:	f023 0202 	bic.w	r2, r3, #2
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1224:	2103      	movs	r1, #3
    1226:	6878      	ldr	r0, [r7, #4]
    1228:	4b02      	ldr	r3, [pc, #8]	; (1234 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    122a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    122c:	bf00      	nop
    122e:	3708      	adds	r7, #8
    1230:	46bd      	mov	sp, r7
    1232:	bd80      	pop	{r7, pc}
    1234:	00001121 	.word	0x00001121

00001238 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1238:	b580      	push	{r7, lr}
    123a:	b084      	sub	sp, #16
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
    1240:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1242:	2103      	movs	r1, #3
    1244:	6878      	ldr	r0, [r7, #4]
    1246:	4b07      	ldr	r3, [pc, #28]	; (1264 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    1248:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	681b      	ldr	r3, [r3, #0]
    124e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1250:	68fa      	ldr	r2, [r7, #12]
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	4013      	ands	r3, r2
    1256:	60fb      	str	r3, [r7, #12]
	return tmp;
    1258:	68fb      	ldr	r3, [r7, #12]
}
    125a:	4618      	mov	r0, r3
    125c:	3710      	adds	r7, #16
    125e:	46bd      	mov	sp, r7
    1260:	bd80      	pop	{r7, pc}
    1262:	bf00      	nop
    1264:	00001121 	.word	0x00001121

00001268 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    1268:	b580      	push	{r7, lr}
    126a:	b082      	sub	sp, #8
    126c:	af00      	add	r7, sp, #0
    126e:	6078      	str	r0, [r7, #4]
    1270:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	683a      	ldr	r2, [r7, #0]
    1276:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1278:	2103      	movs	r1, #3
    127a:	6878      	ldr	r0, [r7, #4]
    127c:	4b02      	ldr	r3, [pc, #8]	; (1288 <hri_sercomusart_write_CTRLA_reg+0x20>)
    127e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1280:	bf00      	nop
    1282:	3708      	adds	r7, #8
    1284:	46bd      	mov	sp, r7
    1286:	bd80      	pop	{r7, pc}
    1288:	00001121 	.word	0x00001121

0000128c <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    128c:	b580      	push	{r7, lr}
    128e:	b082      	sub	sp, #8
    1290:	af00      	add	r7, sp, #0
    1292:	6078      	str	r0, [r7, #4]
    1294:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	683a      	ldr	r2, [r7, #0]
    129a:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    129c:	211f      	movs	r1, #31
    129e:	6878      	ldr	r0, [r7, #4]
    12a0:	4b02      	ldr	r3, [pc, #8]	; (12ac <hri_sercomusart_write_CTRLB_reg+0x20>)
    12a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    12a4:	bf00      	nop
    12a6:	3708      	adds	r7, #8
    12a8:	46bd      	mov	sp, r7
    12aa:	bd80      	pop	{r7, pc}
    12ac:	00001121 	.word	0x00001121

000012b0 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    12b0:	b480      	push	{r7}
    12b2:	b083      	sub	sp, #12
    12b4:	af00      	add	r7, sp, #0
    12b6:	6078      	str	r0, [r7, #4]
    12b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	683a      	ldr	r2, [r7, #0]
    12be:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    12c0:	bf00      	nop
    12c2:	370c      	adds	r7, #12
    12c4:	46bd      	mov	sp, r7
    12c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ca:	4770      	bx	lr

000012cc <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    12cc:	b480      	push	{r7}
    12ce:	b083      	sub	sp, #12
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
    12d4:	460b      	mov	r3, r1
    12d6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	887a      	ldrh	r2, [r7, #2]
    12dc:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    12de:	bf00      	nop
    12e0:	370c      	adds	r7, #12
    12e2:	46bd      	mov	sp, r7
    12e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12e8:	4770      	bx	lr

000012ea <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    12ea:	b480      	push	{r7}
    12ec:	b083      	sub	sp, #12
    12ee:	af00      	add	r7, sp, #0
    12f0:	6078      	str	r0, [r7, #4]
    12f2:	460b      	mov	r3, r1
    12f4:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	78fa      	ldrb	r2, [r7, #3]
    12fa:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    12fc:	bf00      	nop
    12fe:	370c      	adds	r7, #12
    1300:	46bd      	mov	sp, r7
    1302:	f85d 7b04 	ldr.w	r7, [sp], #4
    1306:	4770      	bx	lr

00001308 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1308:	b480      	push	{r7}
    130a:	b083      	sub	sp, #12
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	683a      	ldr	r2, [r7, #0]
    1316:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1318:	bf00      	nop
    131a:	370c      	adds	r7, #12
    131c:	46bd      	mov	sp, r7
    131e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1322:	4770      	bx	lr

00001324 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1324:	b480      	push	{r7}
    1326:	b083      	sub	sp, #12
    1328:	af00      	add	r7, sp, #0
    132a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    132c:	687b      	ldr	r3, [r7, #4]
    132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1330:	4618      	mov	r0, r3
    1332:	370c      	adds	r7, #12
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
    1344:	460b      	mov	r3, r1
    1346:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	78fa      	ldrb	r2, [r7, #3]
    134c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1350:	bf00      	nop
    1352:	370c      	adds	r7, #12
    1354:	46bd      	mov	sp, r7
    1356:	f85d 7b04 	ldr.w	r7, [sp], #4
    135a:	4770      	bx	lr

0000135c <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    135c:	b580      	push	{r7, lr}
    135e:	b082      	sub	sp, #8
    1360:	af00      	add	r7, sp, #0
    1362:	6078      	str	r0, [r7, #4]
    1364:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	2b00      	cmp	r3, #0
    136a:	bf14      	ite	ne
    136c:	2301      	movne	r3, #1
    136e:	2300      	moveq	r3, #0
    1370:	b2db      	uxtb	r3, r3
    1372:	22bb      	movs	r2, #187	; 0xbb
    1374:	4907      	ldr	r1, [pc, #28]	; (1394 <_usart_sync_init+0x38>)
    1376:	4618      	mov	r0, r3
    1378:	4b07      	ldr	r3, [pc, #28]	; (1398 <_usart_sync_init+0x3c>)
    137a:	4798      	blx	r3

	device->hw = hw;
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	683a      	ldr	r2, [r7, #0]
    1380:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    1382:	6838      	ldr	r0, [r7, #0]
    1384:	4b05      	ldr	r3, [pc, #20]	; (139c <_usart_sync_init+0x40>)
    1386:	4798      	blx	r3
    1388:	4603      	mov	r3, r0
}
    138a:	4618      	mov	r0, r3
    138c:	3708      	adds	r7, #8
    138e:	46bd      	mov	sp, r7
    1390:	bd80      	pop	{r7, pc}
    1392:	bf00      	nop
    1394:	00002178 	.word	0x00002178
    1398:	00000dbd 	.word	0x00000dbd
    139c:	0000152d 	.word	0x0000152d

000013a0 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    13a0:	b580      	push	{r7, lr}
    13a2:	b082      	sub	sp, #8
    13a4:	af00      	add	r7, sp, #0
    13a6:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	4618      	mov	r0, r3
    13ae:	4b03      	ldr	r3, [pc, #12]	; (13bc <_usart_sync_enable+0x1c>)
    13b0:	4798      	blx	r3
}
    13b2:	bf00      	nop
    13b4:	3708      	adds	r7, #8
    13b6:	46bd      	mov	sp, r7
    13b8:	bd80      	pop	{r7, pc}
    13ba:	bf00      	nop
    13bc:	000011e9 	.word	0x000011e9

000013c0 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    13c0:	b580      	push	{r7, lr}
    13c2:	b082      	sub	sp, #8
    13c4:	af00      	add	r7, sp, #0
    13c6:	6078      	str	r0, [r7, #4]
    13c8:	460b      	mov	r3, r1
    13ca:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	78fa      	ldrb	r2, [r7, #3]
    13d2:	4611      	mov	r1, r2
    13d4:	4618      	mov	r0, r3
    13d6:	4b03      	ldr	r3, [pc, #12]	; (13e4 <_usart_sync_write_byte+0x24>)
    13d8:	4798      	blx	r3
}
    13da:	bf00      	nop
    13dc:	3708      	adds	r7, #8
    13de:	46bd      	mov	sp, r7
    13e0:	bd80      	pop	{r7, pc}
    13e2:	bf00      	nop
    13e4:	00001309 	.word	0x00001309

000013e8 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	b082      	sub	sp, #8
    13ec:	af00      	add	r7, sp, #0
    13ee:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	4618      	mov	r0, r3
    13f6:	4b04      	ldr	r3, [pc, #16]	; (1408 <_usart_sync_read_byte+0x20>)
    13f8:	4798      	blx	r3
    13fa:	4603      	mov	r3, r0
    13fc:	b2db      	uxtb	r3, r3
}
    13fe:	4618      	mov	r0, r3
    1400:	3708      	adds	r7, #8
    1402:	46bd      	mov	sp, r7
    1404:	bd80      	pop	{r7, pc}
    1406:	bf00      	nop
    1408:	00001325 	.word	0x00001325

0000140c <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	4618      	mov	r0, r3
    141a:	4b03      	ldr	r3, [pc, #12]	; (1428 <_usart_sync_is_ready_to_send+0x1c>)
    141c:	4798      	blx	r3
    141e:	4603      	mov	r3, r0
}
    1420:	4618      	mov	r0, r3
    1422:	3708      	adds	r7, #8
    1424:	46bd      	mov	sp, r7
    1426:	bd80      	pop	{r7, pc}
    1428:	0000116d 	.word	0x0000116d

0000142c <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    142c:	b580      	push	{r7, lr}
    142e:	b082      	sub	sp, #8
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	4618      	mov	r0, r3
    143a:	4b03      	ldr	r3, [pc, #12]	; (1448 <_usart_sync_is_transmit_done+0x1c>)
    143c:	4798      	blx	r3
    143e:	4603      	mov	r3, r0
}
    1440:	4618      	mov	r0, r3
    1442:	3708      	adds	r7, #8
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}
    1448:	00001195 	.word	0x00001195

0000144c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    144c:	b580      	push	{r7, lr}
    144e:	b082      	sub	sp, #8
    1450:	af00      	add	r7, sp, #0
    1452:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	4618      	mov	r0, r3
    145a:	4b03      	ldr	r3, [pc, #12]	; (1468 <_usart_sync_is_byte_received+0x1c>)
    145c:	4798      	blx	r3
    145e:	4603      	mov	r3, r0
}
    1460:	4618      	mov	r0, r3
    1462:	3708      	adds	r7, #8
    1464:	46bd      	mov	sp, r7
    1466:	bd80      	pop	{r7, pc}
    1468:	000011bf 	.word	0x000011bf

0000146c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    146c:	b4b0      	push	{r4, r5, r7}
    146e:	b08d      	sub	sp, #52	; 0x34
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1474:	4b13      	ldr	r3, [pc, #76]	; (14c4 <_sercom_get_hardware_index+0x58>)
    1476:	f107 040c 	add.w	r4, r7, #12
    147a:	461d      	mov	r5, r3
    147c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    147e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1480:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1488:	2300      	movs	r3, #0
    148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    148c:	e010      	b.n	14b0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1490:	009b      	lsls	r3, r3, #2
    1492:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1496:	4413      	add	r3, r2
    1498:	f853 3c24 	ldr.w	r3, [r3, #-36]
    149c:	461a      	mov	r2, r3
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	429a      	cmp	r2, r3
    14a2:	d102      	bne.n	14aa <_sercom_get_hardware_index+0x3e>
			return i;
    14a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14a6:	b2db      	uxtb	r3, r3
    14a8:	e006      	b.n	14b8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14ac:	3301      	adds	r3, #1
    14ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    14b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14b2:	2b07      	cmp	r3, #7
    14b4:	d9eb      	bls.n	148e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    14b6:	2300      	movs	r3, #0
}
    14b8:	4618      	mov	r0, r3
    14ba:	3734      	adds	r7, #52	; 0x34
    14bc:	46bd      	mov	sp, r7
    14be:	bcb0      	pop	{r4, r5, r7}
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop
    14c4:	00002194 	.word	0x00002194

000014c8 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b084      	sub	sp, #16
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    14d0:	6878      	ldr	r0, [r7, #4]
    14d2:	4b12      	ldr	r3, [pc, #72]	; (151c <_get_sercom_index+0x54>)
    14d4:	4798      	blx	r3
    14d6:	4603      	mov	r3, r0
    14d8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    14da:	2300      	movs	r3, #0
    14dc:	73fb      	strb	r3, [r7, #15]
    14de:	e00f      	b.n	1500 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    14e0:	7bfa      	ldrb	r2, [r7, #15]
    14e2:	490f      	ldr	r1, [pc, #60]	; (1520 <_get_sercom_index+0x58>)
    14e4:	4613      	mov	r3, r2
    14e6:	005b      	lsls	r3, r3, #1
    14e8:	4413      	add	r3, r2
    14ea:	00db      	lsls	r3, r3, #3
    14ec:	440b      	add	r3, r1
    14ee:	781b      	ldrb	r3, [r3, #0]
    14f0:	7bba      	ldrb	r2, [r7, #14]
    14f2:	429a      	cmp	r2, r3
    14f4:	d101      	bne.n	14fa <_get_sercom_index+0x32>
			return i;
    14f6:	7bfb      	ldrb	r3, [r7, #15]
    14f8:	e00c      	b.n	1514 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    14fa:	7bfb      	ldrb	r3, [r7, #15]
    14fc:	3301      	adds	r3, #1
    14fe:	73fb      	strb	r3, [r7, #15]
    1500:	7bfb      	ldrb	r3, [r7, #15]
    1502:	2b00      	cmp	r3, #0
    1504:	d0ec      	beq.n	14e0 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1506:	f240 2247 	movw	r2, #583	; 0x247
    150a:	4906      	ldr	r1, [pc, #24]	; (1524 <_get_sercom_index+0x5c>)
    150c:	2000      	movs	r0, #0
    150e:	4b06      	ldr	r3, [pc, #24]	; (1528 <_get_sercom_index+0x60>)
    1510:	4798      	blx	r3
	return 0;
    1512:	2300      	movs	r3, #0
}
    1514:	4618      	mov	r0, r3
    1516:	3710      	adds	r7, #16
    1518:	46bd      	mov	sp, r7
    151a:	bd80      	pop	{r7, pc}
    151c:	0000146d 	.word	0x0000146d
    1520:	20000000 	.word	0x20000000
    1524:	00002178 	.word	0x00002178
    1528:	00000dbd 	.word	0x00000dbd

0000152c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    152c:	b580      	push	{r7, lr}
    152e:	b084      	sub	sp, #16
    1530:	af00      	add	r7, sp, #0
    1532:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1534:	6878      	ldr	r0, [r7, #4]
    1536:	4b61      	ldr	r3, [pc, #388]	; (16bc <_usart_init+0x190>)
    1538:	4798      	blx	r3
    153a:	4603      	mov	r3, r0
    153c:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    153e:	2101      	movs	r1, #1
    1540:	6878      	ldr	r0, [r7, #4]
    1542:	4b5f      	ldr	r3, [pc, #380]	; (16c0 <_usart_init+0x194>)
    1544:	4798      	blx	r3
    1546:	4603      	mov	r3, r0
    1548:	f083 0301 	eor.w	r3, r3, #1
    154c:	b2db      	uxtb	r3, r3
    154e:	2b00      	cmp	r3, #0
    1550:	d020      	beq.n	1594 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1552:	7bfa      	ldrb	r2, [r7, #15]
    1554:	495b      	ldr	r1, [pc, #364]	; (16c4 <_usart_init+0x198>)
    1556:	4613      	mov	r3, r2
    1558:	005b      	lsls	r3, r3, #1
    155a:	4413      	add	r3, r2
    155c:	00db      	lsls	r3, r3, #3
    155e:	440b      	add	r3, r1
    1560:	3304      	adds	r3, #4
    1562:	681b      	ldr	r3, [r3, #0]
    1564:	f003 031c 	and.w	r3, r3, #28
    1568:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    156a:	2102      	movs	r1, #2
    156c:	6878      	ldr	r0, [r7, #4]
    156e:	4b56      	ldr	r3, [pc, #344]	; (16c8 <_usart_init+0x19c>)
    1570:	4798      	blx	r3
    1572:	4603      	mov	r3, r0
    1574:	2b00      	cmp	r3, #0
    1576:	d006      	beq.n	1586 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1578:	6878      	ldr	r0, [r7, #4]
    157a:	4b54      	ldr	r3, [pc, #336]	; (16cc <_usart_init+0x1a0>)
    157c:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    157e:	2102      	movs	r1, #2
    1580:	6878      	ldr	r0, [r7, #4]
    1582:	4b53      	ldr	r3, [pc, #332]	; (16d0 <_usart_init+0x1a4>)
    1584:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1586:	68bb      	ldr	r3, [r7, #8]
    1588:	f043 0301 	orr.w	r3, r3, #1
    158c:	4619      	mov	r1, r3
    158e:	6878      	ldr	r0, [r7, #4]
    1590:	4b50      	ldr	r3, [pc, #320]	; (16d4 <_usart_init+0x1a8>)
    1592:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1594:	2101      	movs	r1, #1
    1596:	6878      	ldr	r0, [r7, #4]
    1598:	4b4d      	ldr	r3, [pc, #308]	; (16d0 <_usart_init+0x1a4>)
    159a:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    159c:	7bfa      	ldrb	r2, [r7, #15]
    159e:	4949      	ldr	r1, [pc, #292]	; (16c4 <_usart_init+0x198>)
    15a0:	4613      	mov	r3, r2
    15a2:	005b      	lsls	r3, r3, #1
    15a4:	4413      	add	r3, r2
    15a6:	00db      	lsls	r3, r3, #3
    15a8:	440b      	add	r3, r1
    15aa:	3304      	adds	r3, #4
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	4619      	mov	r1, r3
    15b0:	6878      	ldr	r0, [r7, #4]
    15b2:	4b48      	ldr	r3, [pc, #288]	; (16d4 <_usart_init+0x1a8>)
    15b4:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    15b6:	7bfa      	ldrb	r2, [r7, #15]
    15b8:	4942      	ldr	r1, [pc, #264]	; (16c4 <_usart_init+0x198>)
    15ba:	4613      	mov	r3, r2
    15bc:	005b      	lsls	r3, r3, #1
    15be:	4413      	add	r3, r2
    15c0:	00db      	lsls	r3, r3, #3
    15c2:	440b      	add	r3, r1
    15c4:	3308      	adds	r3, #8
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	4619      	mov	r1, r3
    15ca:	6878      	ldr	r0, [r7, #4]
    15cc:	4b42      	ldr	r3, [pc, #264]	; (16d8 <_usart_init+0x1ac>)
    15ce:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    15d0:	7bfa      	ldrb	r2, [r7, #15]
    15d2:	493c      	ldr	r1, [pc, #240]	; (16c4 <_usart_init+0x198>)
    15d4:	4613      	mov	r3, r2
    15d6:	005b      	lsls	r3, r3, #1
    15d8:	4413      	add	r3, r2
    15da:	00db      	lsls	r3, r3, #3
    15dc:	440b      	add	r3, r1
    15de:	330c      	adds	r3, #12
    15e0:	681b      	ldr	r3, [r3, #0]
    15e2:	4619      	mov	r1, r3
    15e4:	6878      	ldr	r0, [r7, #4]
    15e6:	4b3d      	ldr	r3, [pc, #244]	; (16dc <_usart_init+0x1b0>)
    15e8:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    15ea:	7bfa      	ldrb	r2, [r7, #15]
    15ec:	4935      	ldr	r1, [pc, #212]	; (16c4 <_usart_init+0x198>)
    15ee:	4613      	mov	r3, r2
    15f0:	005b      	lsls	r3, r3, #1
    15f2:	4413      	add	r3, r2
    15f4:	00db      	lsls	r3, r3, #3
    15f6:	440b      	add	r3, r1
    15f8:	3304      	adds	r3, #4
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1600:	2b00      	cmp	r3, #0
    1602:	d10c      	bne.n	161e <_usart_init+0xf2>
    1604:	7bfa      	ldrb	r2, [r7, #15]
    1606:	492f      	ldr	r1, [pc, #188]	; (16c4 <_usart_init+0x198>)
    1608:	4613      	mov	r3, r2
    160a:	005b      	lsls	r3, r3, #1
    160c:	4413      	add	r3, r2
    160e:	00db      	lsls	r3, r3, #3
    1610:	440b      	add	r3, r1
    1612:	3304      	adds	r3, #4
    1614:	681b      	ldr	r3, [r3, #0]
    1616:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    161a:	2b00      	cmp	r3, #0
    161c:	d022      	beq.n	1664 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    161e:	7bfa      	ldrb	r2, [r7, #15]
    1620:	4928      	ldr	r1, [pc, #160]	; (16c4 <_usart_init+0x198>)
    1622:	4613      	mov	r3, r2
    1624:	005b      	lsls	r3, r3, #1
    1626:	4413      	add	r3, r2
    1628:	00db      	lsls	r3, r3, #3
    162a:	440b      	add	r3, r1
    162c:	3310      	adds	r3, #16
    162e:	881b      	ldrh	r3, [r3, #0]
    1630:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1634:	b299      	uxth	r1, r3
    1636:	687a      	ldr	r2, [r7, #4]
    1638:	8993      	ldrh	r3, [r2, #12]
    163a:	f361 030c 	bfi	r3, r1, #0, #13
    163e:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1640:	7bfa      	ldrb	r2, [r7, #15]
    1642:	4920      	ldr	r1, [pc, #128]	; (16c4 <_usart_init+0x198>)
    1644:	4613      	mov	r3, r2
    1646:	005b      	lsls	r3, r3, #1
    1648:	4413      	add	r3, r2
    164a:	00db      	lsls	r3, r3, #3
    164c:	440b      	add	r3, r1
    164e:	3312      	adds	r3, #18
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	f003 0307 	and.w	r3, r3, #7
    1656:	b2d9      	uxtb	r1, r3
    1658:	687a      	ldr	r2, [r7, #4]
    165a:	8993      	ldrh	r3, [r2, #12]
    165c:	f361 334f 	bfi	r3, r1, #13, #3
    1660:	8193      	strh	r3, [r2, #12]
    1662:	e00c      	b.n	167e <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1664:	7bfa      	ldrb	r2, [r7, #15]
    1666:	4917      	ldr	r1, [pc, #92]	; (16c4 <_usart_init+0x198>)
    1668:	4613      	mov	r3, r2
    166a:	005b      	lsls	r3, r3, #1
    166c:	4413      	add	r3, r2
    166e:	00db      	lsls	r3, r3, #3
    1670:	440b      	add	r3, r1
    1672:	3310      	adds	r3, #16
    1674:	881b      	ldrh	r3, [r3, #0]
    1676:	4619      	mov	r1, r3
    1678:	6878      	ldr	r0, [r7, #4]
    167a:	4b19      	ldr	r3, [pc, #100]	; (16e0 <_usart_init+0x1b4>)
    167c:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    167e:	7bfa      	ldrb	r2, [r7, #15]
    1680:	4910      	ldr	r1, [pc, #64]	; (16c4 <_usart_init+0x198>)
    1682:	4613      	mov	r3, r2
    1684:	005b      	lsls	r3, r3, #1
    1686:	4413      	add	r3, r2
    1688:	00db      	lsls	r3, r3, #3
    168a:	440b      	add	r3, r1
    168c:	3313      	adds	r3, #19
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	4619      	mov	r1, r3
    1692:	6878      	ldr	r0, [r7, #4]
    1694:	4b13      	ldr	r3, [pc, #76]	; (16e4 <_usart_init+0x1b8>)
    1696:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1698:	7bfa      	ldrb	r2, [r7, #15]
    169a:	490a      	ldr	r1, [pc, #40]	; (16c4 <_usart_init+0x198>)
    169c:	4613      	mov	r3, r2
    169e:	005b      	lsls	r3, r3, #1
    16a0:	4413      	add	r3, r2
    16a2:	00db      	lsls	r3, r3, #3
    16a4:	440b      	add	r3, r1
    16a6:	3314      	adds	r3, #20
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	4619      	mov	r1, r3
    16ac:	6878      	ldr	r0, [r7, #4]
    16ae:	4b0e      	ldr	r3, [pc, #56]	; (16e8 <_usart_init+0x1bc>)
    16b0:	4798      	blx	r3

	return ERR_NONE;
    16b2:	2300      	movs	r3, #0
}
    16b4:	4618      	mov	r0, r3
    16b6:	3710      	adds	r7, #16
    16b8:	46bd      	mov	sp, r7
    16ba:	bd80      	pop	{r7, pc}
    16bc:	000014c9 	.word	0x000014c9
    16c0:	00001145 	.word	0x00001145
    16c4:	20000000 	.word	0x20000000
    16c8:	00001239 	.word	0x00001239
    16cc:	00001211 	.word	0x00001211
    16d0:	00001121 	.word	0x00001121
    16d4:	00001269 	.word	0x00001269
    16d8:	0000128d 	.word	0x0000128d
    16dc:	000012b1 	.word	0x000012b1
    16e0:	000012cd 	.word	0x000012cd
    16e4:	000012eb 	.word	0x000012eb
    16e8:	0000133d 	.word	0x0000133d

000016ec <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    16ec:	b480      	push	{r7}
    16ee:	b083      	sub	sp, #12
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
    16f4:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    16f6:	bf00      	nop
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	689a      	ldr	r2, [r3, #8]
    16fc:	683b      	ldr	r3, [r7, #0]
    16fe:	4013      	ands	r3, r2
    1700:	2b00      	cmp	r3, #0
    1702:	d1f9      	bne.n	16f8 <hri_tcc_wait_for_sync+0xc>
	};
}
    1704:	bf00      	nop
    1706:	370c      	adds	r7, #12
    1708:	46bd      	mov	sp, r7
    170a:	f85d 7b04 	ldr.w	r7, [sp], #4
    170e:	4770      	bx	lr

00001710 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1710:	b480      	push	{r7}
    1712:	b083      	sub	sp, #12
    1714:	af00      	add	r7, sp, #0
    1716:	6078      	str	r0, [r7, #4]
    1718:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	689a      	ldr	r2, [r3, #8]
    171e:	683b      	ldr	r3, [r7, #0]
    1720:	4013      	ands	r3, r2
    1722:	2b00      	cmp	r3, #0
    1724:	bf14      	ite	ne
    1726:	2301      	movne	r3, #1
    1728:	2300      	moveq	r3, #0
    172a:	b2db      	uxtb	r3, r3
}
    172c:	4618      	mov	r0, r3
    172e:	370c      	adds	r7, #12
    1730:	46bd      	mov	sp, r7
    1732:	f85d 7b04 	ldr.w	r7, [sp], #4
    1736:	4770      	bx	lr

00001738 <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    1738:	b580      	push	{r7, lr}
    173a:	b084      	sub	sp, #16
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	460b      	mov	r3, r1
    1742:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    174a:	68fb      	ldr	r3, [r7, #12]
    174c:	f023 0302 	bic.w	r3, r3, #2
    1750:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    1752:	78fb      	ldrb	r3, [r7, #3]
    1754:	005b      	lsls	r3, r3, #1
    1756:	461a      	mov	r2, r3
    1758:	68fb      	ldr	r3, [r7, #12]
    175a:	4313      	orrs	r3, r2
    175c:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	68fa      	ldr	r2, [r7, #12]
    1762:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1764:	2103      	movs	r1, #3
    1766:	6878      	ldr	r0, [r7, #4]
    1768:	4b02      	ldr	r3, [pc, #8]	; (1774 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    176a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    176c:	bf00      	nop
    176e:	3710      	adds	r7, #16
    1770:	46bd      	mov	sp, r7
    1772:	bd80      	pop	{r7, pc}
    1774:	000016ed 	.word	0x000016ed

00001778 <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1778:	b580      	push	{r7, lr}
    177a:	b082      	sub	sp, #8
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1780:	687b      	ldr	r3, [r7, #4]
    1782:	681b      	ldr	r3, [r3, #0]
    1784:	f023 0202 	bic.w	r2, r3, #2
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    178c:	2103      	movs	r1, #3
    178e:	6878      	ldr	r0, [r7, #4]
    1790:	4b02      	ldr	r3, [pc, #8]	; (179c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    1792:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1794:	bf00      	nop
    1796:	3708      	adds	r7, #8
    1798:	46bd      	mov	sp, r7
    179a:	bd80      	pop	{r7, pc}
    179c:	000016ed 	.word	0x000016ed

000017a0 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    17a0:	b580      	push	{r7, lr}
    17a2:	b084      	sub	sp, #16
    17a4:	af00      	add	r7, sp, #0
    17a6:	6078      	str	r0, [r7, #4]
    17a8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    17aa:	2103      	movs	r1, #3
    17ac:	6878      	ldr	r0, [r7, #4]
    17ae:	4b07      	ldr	r3, [pc, #28]	; (17cc <hri_tcc_get_CTRLA_reg+0x2c>)
    17b0:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    17b8:	68fa      	ldr	r2, [r7, #12]
    17ba:	683b      	ldr	r3, [r7, #0]
    17bc:	4013      	ands	r3, r2
    17be:	60fb      	str	r3, [r7, #12]
	return tmp;
    17c0:	68fb      	ldr	r3, [r7, #12]
}
    17c2:	4618      	mov	r0, r3
    17c4:	3710      	adds	r7, #16
    17c6:	46bd      	mov	sp, r7
    17c8:	bd80      	pop	{r7, pc}
    17ca:	bf00      	nop
    17cc:	000016ed 	.word	0x000016ed

000017d0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b082      	sub	sp, #8
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
    17d8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	683a      	ldr	r2, [r7, #0]
    17de:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    17e0:	2103      	movs	r1, #3
    17e2:	6878      	ldr	r0, [r7, #4]
    17e4:	4b02      	ldr	r3, [pc, #8]	; (17f0 <hri_tcc_write_CTRLA_reg+0x20>)
    17e6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    17e8:	bf00      	nop
    17ea:	3708      	adds	r7, #8
    17ec:	46bd      	mov	sp, r7
    17ee:	bd80      	pop	{r7, pc}
    17f0:	000016ed 	.word	0x000016ed

000017f4 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	b082      	sub	sp, #8
    17f8:	af00      	add	r7, sp, #0
    17fa:	6078      	str	r0, [r7, #4]
    17fc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	683a      	ldr	r2, [r7, #0]
    1802:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    1804:	f643 71ff 	movw	r1, #16383	; 0x3fff
    1808:	6878      	ldr	r0, [r7, #4]
    180a:	4b03      	ldr	r3, [pc, #12]	; (1818 <hri_tcc_write_WAVE_reg+0x24>)
    180c:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    180e:	bf00      	nop
    1810:	3708      	adds	r7, #8
    1812:	46bd      	mov	sp, r7
    1814:	bd80      	pop	{r7, pc}
    1816:	bf00      	nop
    1818:	000016ed 	.word	0x000016ed

0000181c <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    181c:	b580      	push	{r7, lr}
    181e:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    1820:	2101      	movs	r1, #1
    1822:	4817      	ldr	r0, [pc, #92]	; (1880 <PWM_0_init+0x64>)
    1824:	4b17      	ldr	r3, [pc, #92]	; (1884 <PWM_0_init+0x68>)
    1826:	4798      	blx	r3
    1828:	4603      	mov	r3, r0
    182a:	f083 0301 	eor.w	r3, r3, #1
    182e:	b2db      	uxtb	r3, r3
    1830:	2b00      	cmp	r3, #0
    1832:	d011      	beq.n	1858 <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    1834:	2102      	movs	r1, #2
    1836:	4812      	ldr	r0, [pc, #72]	; (1880 <PWM_0_init+0x64>)
    1838:	4b13      	ldr	r3, [pc, #76]	; (1888 <PWM_0_init+0x6c>)
    183a:	4798      	blx	r3
    183c:	4603      	mov	r3, r0
    183e:	2b00      	cmp	r3, #0
    1840:	d006      	beq.n	1850 <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    1842:	480f      	ldr	r0, [pc, #60]	; (1880 <PWM_0_init+0x64>)
    1844:	4b11      	ldr	r3, [pc, #68]	; (188c <PWM_0_init+0x70>)
    1846:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    1848:	2102      	movs	r1, #2
    184a:	480d      	ldr	r0, [pc, #52]	; (1880 <PWM_0_init+0x64>)
    184c:	4b10      	ldr	r3, [pc, #64]	; (1890 <PWM_0_init+0x74>)
    184e:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    1850:	2101      	movs	r1, #1
    1852:	480b      	ldr	r0, [pc, #44]	; (1880 <PWM_0_init+0x64>)
    1854:	4b0f      	ldr	r3, [pc, #60]	; (1894 <PWM_0_init+0x78>)
    1856:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    1858:	2101      	movs	r1, #1
    185a:	4809      	ldr	r0, [pc, #36]	; (1880 <PWM_0_init+0x64>)
    185c:	4b0c      	ldr	r3, [pc, #48]	; (1890 <PWM_0_init+0x74>)
    185e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    1860:	f44f 7180 	mov.w	r1, #256	; 0x100
    1864:	4806      	ldr	r0, [pc, #24]	; (1880 <PWM_0_init+0x64>)
    1866:	4b0b      	ldr	r3, [pc, #44]	; (1894 <PWM_0_init+0x78>)
    1868:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    186a:	2102      	movs	r1, #2
    186c:	4804      	ldr	r0, [pc, #16]	; (1880 <PWM_0_init+0x64>)
    186e:	4b0a      	ldr	r3, [pc, #40]	; (1898 <PWM_0_init+0x7c>)
    1870:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    1872:	2101      	movs	r1, #1
    1874:	4802      	ldr	r0, [pc, #8]	; (1880 <PWM_0_init+0x64>)
    1876:	4b09      	ldr	r3, [pc, #36]	; (189c <PWM_0_init+0x80>)
    1878:	4798      	blx	r3

	return 0;
    187a:	2300      	movs	r3, #0
}
    187c:	4618      	mov	r0, r3
    187e:	bd80      	pop	{r7, pc}
    1880:	41016000 	.word	0x41016000
    1884:	00001711 	.word	0x00001711
    1888:	000017a1 	.word	0x000017a1
    188c:	00001779 	.word	0x00001779
    1890:	000016ed 	.word	0x000016ed
    1894:	000017d1 	.word	0x000017d1
    1898:	000017f5 	.word	0x000017f5
    189c:	00001739 	.word	0x00001739

000018a0 <main>:
static double incr = 0;

struct io_descriptor *io_UART;

int main(void)
{
    18a0:	b598      	push	{r3, r4, r7, lr}
    18a2:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    18a4:	4b0f      	ldr	r3, [pc, #60]	; (18e4 <main+0x44>)
    18a6:	4798      	blx	r3

	/* Initialization of the UART communication */
	//usart_sync_register_callback(&EDBG_UART, USART_ASYNC_RXC_CB, rx_cb_USART_0);
	usart_sync_get_io_descriptor(&EDBG_UART, &io_UART);
    18a8:	490f      	ldr	r1, [pc, #60]	; (18e8 <main+0x48>)
    18aa:	4810      	ldr	r0, [pc, #64]	; (18ec <main+0x4c>)
    18ac:	4b10      	ldr	r3, [pc, #64]	; (18f0 <main+0x50>)
    18ae:	4798      	blx	r3
	usart_sync_enable(&EDBG_UART);
    18b0:	480e      	ldr	r0, [pc, #56]	; (18ec <main+0x4c>)
    18b2:	4b10      	ldr	r3, [pc, #64]	; (18f4 <main+0x54>)
    18b4:	4798      	blx	r3
	
	tcc_set_period_value(TCC0, 0xffff/50);
    18b6:	f240 511e 	movw	r1, #1310	; 0x51e
    18ba:	480f      	ldr	r0, [pc, #60]	; (18f8 <main+0x58>)
    18bc:	4b0f      	ldr	r3, [pc, #60]	; (18fc <main+0x5c>)
    18be:	4798      	blx	r3
		
		//Read input command from terminal
		//io_read(io_UART,&buff,1);
		
		//Set the number of increment for the potentiometer
		incr = set_duty(buff);	
    18c0:	4b0f      	ldr	r3, [pc, #60]	; (1900 <main+0x60>)
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	4618      	mov	r0, r3
    18c6:	4b0f      	ldr	r3, [pc, #60]	; (1904 <main+0x64>)
    18c8:	4798      	blx	r3
    18ca:	4603      	mov	r3, r0
    18cc:	460c      	mov	r4, r1
    18ce:	4a0e      	ldr	r2, [pc, #56]	; (1908 <main+0x68>)
    18d0:	e9c2 3400 	strd	r3, r4, [r2]
		tcc_set_compare_value(TCC0, 0xffff/80, 0);	
    18d4:	2200      	movs	r2, #0
    18d6:	f240 3133 	movw	r1, #819	; 0x333
    18da:	4807      	ldr	r0, [pc, #28]	; (18f8 <main+0x58>)
    18dc:	4b0b      	ldr	r3, [pc, #44]	; (190c <main+0x6c>)
    18de:	4798      	blx	r3
		incr = set_duty(buff);	
    18e0:	e7ee      	b.n	18c0 <main+0x20>
    18e2:	bf00      	nop
    18e4:	000002d1 	.word	0x000002d1
    18e8:	20000074 	.word	0x20000074
    18ec:	20000058 	.word	0x20000058
    18f0:	00000c1d 	.word	0x00000c1d
    18f4:	00000bdd 	.word	0x00000bdd
    18f8:	41016000 	.word	0x41016000
    18fc:	000019e9 	.word	0x000019e9
    1900:	20000038 	.word	0x20000038
    1904:	00001a3d 	.word	0x00001a3d
    1908:	20000040 	.word	0x20000040
    190c:	000019a9 	.word	0x000019a9

00001910 <hri_tcc_wait_for_sync>:
{
    1910:	b480      	push	{r7}
    1912:	b083      	sub	sp, #12
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
    1918:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    191a:	bf00      	nop
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	689a      	ldr	r2, [r3, #8]
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	4013      	ands	r3, r2
    1924:	2b00      	cmp	r3, #0
    1926:	d1f9      	bne.n	191c <hri_tcc_wait_for_sync+0xc>
}
    1928:	bf00      	nop
    192a:	370c      	adds	r7, #12
    192c:	46bd      	mov	sp, r7
    192e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1932:	4770      	bx	lr

00001934 <hri_tcc_clear_INTFLAG_reg>:
{
    1934:	b480      	push	{r7}
    1936:	b083      	sub	sp, #12
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
    193c:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	683a      	ldr	r2, [r7, #0]
    1942:	62da      	str	r2, [r3, #44]	; 0x2c
}
    1944:	bf00      	nop
    1946:	370c      	adds	r7, #12
    1948:	46bd      	mov	sp, r7
    194a:	f85d 7b04 	ldr.w	r7, [sp], #4
    194e:	4770      	bx	lr

00001950 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    1950:	b580      	push	{r7, lr}
    1952:	b082      	sub	sp, #8
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
    1958:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	683a      	ldr	r2, [r7, #0]
    195e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    1960:	2180      	movs	r1, #128	; 0x80
    1962:	6878      	ldr	r0, [r7, #4]
    1964:	4b02      	ldr	r3, [pc, #8]	; (1970 <hri_tcc_write_PER_reg+0x20>)
    1966:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1968:	bf00      	nop
    196a:	3708      	adds	r7, #8
    196c:	46bd      	mov	sp, r7
    196e:	bd80      	pop	{r7, pc}
    1970:	00001911 	.word	0x00001911

00001974 <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    1974:	b580      	push	{r7, lr}
    1976:	b084      	sub	sp, #16
    1978:	af00      	add	r7, sp, #0
    197a:	60f8      	str	r0, [r7, #12]
    197c:	460b      	mov	r3, r1
    197e:	607a      	str	r2, [r7, #4]
    1980:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    1982:	7afb      	ldrb	r3, [r7, #11]
    1984:	68fa      	ldr	r2, [r7, #12]
    1986:	3310      	adds	r3, #16
    1988:	009b      	lsls	r3, r3, #2
    198a:	4413      	add	r3, r2
    198c:	687a      	ldr	r2, [r7, #4]
    198e:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    1990:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1994:	68f8      	ldr	r0, [r7, #12]
    1996:	4b03      	ldr	r3, [pc, #12]	; (19a4 <hri_tcc_write_CC_reg+0x30>)
    1998:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    199a:	bf00      	nop
    199c:	3710      	adds	r7, #16
    199e:	46bd      	mov	sp, r7
    19a0:	bd80      	pop	{r7, pc}
    19a2:	bf00      	nop
    19a4:	00001911 	.word	0x00001911

000019a8 <tcc_set_compare_value>:
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b084      	sub	sp, #16
    19ac:	af00      	add	r7, sp, #0
    19ae:	60f8      	str	r0, [r7, #12]
    19b0:	60b9      	str	r1, [r7, #8]
    19b2:	4613      	mov	r3, r2
    19b4:	71fb      	strb	r3, [r7, #7]
	hri_tcc_write_CC_reg(hw, channel_index, value);
    19b6:	79fb      	ldrb	r3, [r7, #7]
    19b8:	68ba      	ldr	r2, [r7, #8]
    19ba:	4619      	mov	r1, r3
    19bc:	68f8      	ldr	r0, [r7, #12]
    19be:	4b08      	ldr	r3, [pc, #32]	; (19e0 <tcc_set_compare_value+0x38>)
    19c0:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    19c2:	79fb      	ldrb	r3, [r7, #7]
    19c4:	2201      	movs	r2, #1
    19c6:	fa02 f303 	lsl.w	r3, r2, r3
    19ca:	021b      	lsls	r3, r3, #8
    19cc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    19d0:	4619      	mov	r1, r3
    19d2:	68f8      	ldr	r0, [r7, #12]
    19d4:	4b03      	ldr	r3, [pc, #12]	; (19e4 <tcc_set_compare_value+0x3c>)
    19d6:	4798      	blx	r3
}
    19d8:	bf00      	nop
    19da:	3710      	adds	r7, #16
    19dc:	46bd      	mov	sp, r7
    19de:	bd80      	pop	{r7, pc}
    19e0:	00001975 	.word	0x00001975
    19e4:	00001911 	.word	0x00001911

000019e8 <tcc_set_period_value>:
{
	hri_tcc_write_CCBUF_reg(hw, channel_index, value);
}

void tcc_set_period_value(void *const hw, uint32_t value)
{
    19e8:	b580      	push	{r7, lr}
    19ea:	b082      	sub	sp, #8
    19ec:	af00      	add	r7, sp, #0
    19ee:	6078      	str	r0, [r7, #4]
    19f0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(hw, value);
    19f2:	6839      	ldr	r1, [r7, #0]
    19f4:	6878      	ldr	r0, [r7, #4]
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <tcc_set_period_value+0x24>)
    19f8:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    19fa:	2180      	movs	r1, #128	; 0x80
    19fc:	6878      	ldr	r0, [r7, #4]
    19fe:	4b04      	ldr	r3, [pc, #16]	; (1a10 <tcc_set_period_value+0x28>)
    1a00:	4798      	blx	r3
}
    1a02:	bf00      	nop
    1a04:	3708      	adds	r7, #8
    1a06:	46bd      	mov	sp, r7
    1a08:	bd80      	pop	{r7, pc}
    1a0a:	bf00      	nop
    1a0c:	00001951 	.word	0x00001951
    1a10:	00001911 	.word	0x00001911

00001a14 <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    1a14:	b580      	push	{r7, lr}
    1a16:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    1a18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1a1c:	4804      	ldr	r0, [pc, #16]	; (1a30 <TCC0_1_Handler+0x1c>)
    1a1e:	4b05      	ldr	r3, [pc, #20]	; (1a34 <TCC0_1_Handler+0x20>)
    1a20:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    1a22:	4b05      	ldr	r3, [pc, #20]	; (1a38 <TCC0_1_Handler+0x24>)
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	4802      	ldr	r0, [pc, #8]	; (1a30 <TCC0_1_Handler+0x1c>)
    1a28:	4798      	blx	r3
}
    1a2a:	bf00      	nop
    1a2c:	bd80      	pop	{r7, pc}
    1a2e:	bf00      	nop
    1a30:	41016000 	.word	0x41016000
    1a34:	00001935 	.word	0x00001935
    1a38:	20000078 	.word	0x20000078

00001a3c <set_duty>:
#include <set_duty.h>

double set_duty(uint8_t number){
    1a3c:	b590      	push	{r4, r7, lr}
    1a3e:	b083      	sub	sp, #12
    1a40:	af00      	add	r7, sp, #0
    1a42:	4603      	mov	r3, r0
    1a44:	71fb      	strb	r3, [r7, #7]
	// 	number 3 -> ASCII 51 -> binary 110011
	// 	number 4 -> ASCII 52 -> binary 110100
	// 	   +     -> ASCII 43 -> binary 101011
	// 	   -     -> ASCII 45 -> binary 101101

	if(number != 48 && number != 49 && number != 50 && number != 51 && number != 52 && number != 43 && number != 45){
    1a46:	79fb      	ldrb	r3, [r7, #7]
    1a48:	2b30      	cmp	r3, #48	; 0x30
    1a4a:	d015      	beq.n	1a78 <set_duty+0x3c>
    1a4c:	79fb      	ldrb	r3, [r7, #7]
    1a4e:	2b31      	cmp	r3, #49	; 0x31
    1a50:	d012      	beq.n	1a78 <set_duty+0x3c>
    1a52:	79fb      	ldrb	r3, [r7, #7]
    1a54:	2b32      	cmp	r3, #50	; 0x32
    1a56:	d00f      	beq.n	1a78 <set_duty+0x3c>
    1a58:	79fb      	ldrb	r3, [r7, #7]
    1a5a:	2b33      	cmp	r3, #51	; 0x33
    1a5c:	d00c      	beq.n	1a78 <set_duty+0x3c>
    1a5e:	79fb      	ldrb	r3, [r7, #7]
    1a60:	2b34      	cmp	r3, #52	; 0x34
    1a62:	d009      	beq.n	1a78 <set_duty+0x3c>
    1a64:	79fb      	ldrb	r3, [r7, #7]
    1a66:	2b2b      	cmp	r3, #43	; 0x2b
    1a68:	d006      	beq.n	1a78 <set_duty+0x3c>
    1a6a:	79fb      	ldrb	r3, [r7, #7]
    1a6c:	2b2d      	cmp	r3, #45	; 0x2d
    1a6e:	d003      	beq.n	1a78 <set_duty+0x3c>
		CurrentState = 0;
    1a70:	4b77      	ldr	r3, [pc, #476]	; (1c50 <set_duty+0x214>)
    1a72:	2200      	movs	r2, #0
    1a74:	601a      	str	r2, [r3, #0]
    1a76:	e002      	b.n	1a7e <set_duty+0x42>
		}else{
		CurrentState = number;
    1a78:	79fb      	ldrb	r3, [r7, #7]
    1a7a:	4a75      	ldr	r2, [pc, #468]	; (1c50 <set_duty+0x214>)
    1a7c:	6013      	str	r3, [r2, #0]
	}
	
	switch (CurrentState){
    1a7e:	4b74      	ldr	r3, [pc, #464]	; (1c50 <set_duty+0x214>)
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	2b34      	cmp	r3, #52	; 0x34
    1a84:	f200 80b6 	bhi.w	1bf4 <set_duty+0x1b8>
    1a88:	a201      	add	r2, pc, #4	; (adr r2, 1a90 <set_duty+0x54>)
    1a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a8e:	bf00      	nop
    1a90:	00001be5 	.word	0x00001be5
    1a94:	00001bf5 	.word	0x00001bf5
    1a98:	00001bf5 	.word	0x00001bf5
    1a9c:	00001bf5 	.word	0x00001bf5
    1aa0:	00001bf5 	.word	0x00001bf5
    1aa4:	00001bf5 	.word	0x00001bf5
    1aa8:	00001bf5 	.word	0x00001bf5
    1aac:	00001bf5 	.word	0x00001bf5
    1ab0:	00001bf5 	.word	0x00001bf5
    1ab4:	00001bf5 	.word	0x00001bf5
    1ab8:	00001bf5 	.word	0x00001bf5
    1abc:	00001bf5 	.word	0x00001bf5
    1ac0:	00001bf5 	.word	0x00001bf5
    1ac4:	00001bf5 	.word	0x00001bf5
    1ac8:	00001bf5 	.word	0x00001bf5
    1acc:	00001bf5 	.word	0x00001bf5
    1ad0:	00001bf5 	.word	0x00001bf5
    1ad4:	00001bf5 	.word	0x00001bf5
    1ad8:	00001bf5 	.word	0x00001bf5
    1adc:	00001bf5 	.word	0x00001bf5
    1ae0:	00001bf5 	.word	0x00001bf5
    1ae4:	00001bf5 	.word	0x00001bf5
    1ae8:	00001bf5 	.word	0x00001bf5
    1aec:	00001bf5 	.word	0x00001bf5
    1af0:	00001bf5 	.word	0x00001bf5
    1af4:	00001bf5 	.word	0x00001bf5
    1af8:	00001bf5 	.word	0x00001bf5
    1afc:	00001bf5 	.word	0x00001bf5
    1b00:	00001bf5 	.word	0x00001bf5
    1b04:	00001bf5 	.word	0x00001bf5
    1b08:	00001bf5 	.word	0x00001bf5
    1b0c:	00001bf5 	.word	0x00001bf5
    1b10:	00001bf5 	.word	0x00001bf5
    1b14:	00001bf5 	.word	0x00001bf5
    1b18:	00001bf5 	.word	0x00001bf5
    1b1c:	00001bf5 	.word	0x00001bf5
    1b20:	00001bf5 	.word	0x00001bf5
    1b24:	00001bf5 	.word	0x00001bf5
    1b28:	00001bf5 	.word	0x00001bf5
    1b2c:	00001bf5 	.word	0x00001bf5
    1b30:	00001bf5 	.word	0x00001bf5
    1b34:	00001bf5 	.word	0x00001bf5
    1b38:	00001bf5 	.word	0x00001bf5
    1b3c:	00001bad 	.word	0x00001bad
    1b40:	00001bf5 	.word	0x00001bf5
    1b44:	00001bc9 	.word	0x00001bc9
    1b48:	00001bf5 	.word	0x00001bf5
    1b4c:	00001bf5 	.word	0x00001bf5
    1b50:	00001b65 	.word	0x00001b65
    1b54:	00001b75 	.word	0x00001b75
    1b58:	00001b83 	.word	0x00001b83
    1b5c:	00001b91 	.word	0x00001b91
    1b60:	00001b9f 	.word	0x00001b9f
		case 48:
		output = 0;
    1b64:	4a3b      	ldr	r2, [pc, #236]	; (1c54 <set_duty+0x218>)
    1b66:	f04f 0300 	mov.w	r3, #0
    1b6a:	f04f 0400 	mov.w	r4, #0
    1b6e:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1b72:	e03f      	b.n	1bf4 <set_duty+0x1b8>
		case 49:
		output = 0.25;
    1b74:	4a37      	ldr	r2, [pc, #220]	; (1c54 <set_duty+0x218>)
    1b76:	f04f 0300 	mov.w	r3, #0
    1b7a:	4c37      	ldr	r4, [pc, #220]	; (1c58 <set_duty+0x21c>)
    1b7c:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1b80:	e038      	b.n	1bf4 <set_duty+0x1b8>
		case 50:
		output = 0.5;
    1b82:	4a34      	ldr	r2, [pc, #208]	; (1c54 <set_duty+0x218>)
    1b84:	f04f 0300 	mov.w	r3, #0
    1b88:	4c34      	ldr	r4, [pc, #208]	; (1c5c <set_duty+0x220>)
    1b8a:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1b8e:	e031      	b.n	1bf4 <set_duty+0x1b8>
		case 51:
		output = 0.75;
    1b90:	4a30      	ldr	r2, [pc, #192]	; (1c54 <set_duty+0x218>)
    1b92:	f04f 0300 	mov.w	r3, #0
    1b96:	4c32      	ldr	r4, [pc, #200]	; (1c60 <set_duty+0x224>)
    1b98:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1b9c:	e02a      	b.n	1bf4 <set_duty+0x1b8>
		case 52:
		output = 1;
    1b9e:	4a2d      	ldr	r2, [pc, #180]	; (1c54 <set_duty+0x218>)
    1ba0:	f04f 0300 	mov.w	r3, #0
    1ba4:	4c2f      	ldr	r4, [pc, #188]	; (1c64 <set_duty+0x228>)
    1ba6:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1baa:	e023      	b.n	1bf4 <set_duty+0x1b8>
		case 43:
		output += 0.25;
    1bac:	4b29      	ldr	r3, [pc, #164]	; (1c54 <set_duty+0x218>)
    1bae:	e9d3 0100 	ldrd	r0, r1, [r3]
    1bb2:	4c2d      	ldr	r4, [pc, #180]	; (1c68 <set_duty+0x22c>)
    1bb4:	f04f 0200 	mov.w	r2, #0
    1bb8:	4b27      	ldr	r3, [pc, #156]	; (1c58 <set_duty+0x21c>)
    1bba:	47a0      	blx	r4
    1bbc:	4603      	mov	r3, r0
    1bbe:	460c      	mov	r4, r1
    1bc0:	4a24      	ldr	r2, [pc, #144]	; (1c54 <set_duty+0x218>)
    1bc2:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1bc6:	e015      	b.n	1bf4 <set_duty+0x1b8>
		case 45:
		output -= 0.25;
    1bc8:	4b22      	ldr	r3, [pc, #136]	; (1c54 <set_duty+0x218>)
    1bca:	e9d3 0100 	ldrd	r0, r1, [r3]
    1bce:	4c27      	ldr	r4, [pc, #156]	; (1c6c <set_duty+0x230>)
    1bd0:	f04f 0200 	mov.w	r2, #0
    1bd4:	4b20      	ldr	r3, [pc, #128]	; (1c58 <set_duty+0x21c>)
    1bd6:	47a0      	blx	r4
    1bd8:	4603      	mov	r3, r0
    1bda:	460c      	mov	r4, r1
    1bdc:	4a1d      	ldr	r2, [pc, #116]	; (1c54 <set_duty+0x218>)
    1bde:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1be2:	e007      	b.n	1bf4 <set_duty+0x1b8>
		case 0:
		output = 0;
    1be4:	4a1b      	ldr	r2, [pc, #108]	; (1c54 <set_duty+0x218>)
    1be6:	f04f 0300 	mov.w	r3, #0
    1bea:	f04f 0400 	mov.w	r4, #0
    1bee:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1bf2:	bf00      	nop
	}
	
	//check that the value of duty is between 0 and 1
	if(output >= 1.0){
    1bf4:	4b17      	ldr	r3, [pc, #92]	; (1c54 <set_duty+0x218>)
    1bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
    1bfa:	4c1d      	ldr	r4, [pc, #116]	; (1c70 <set_duty+0x234>)
    1bfc:	f04f 0200 	mov.w	r2, #0
    1c00:	4b18      	ldr	r3, [pc, #96]	; (1c64 <set_duty+0x228>)
    1c02:	47a0      	blx	r4
    1c04:	4603      	mov	r3, r0
    1c06:	2b00      	cmp	r3, #0
    1c08:	d006      	beq.n	1c18 <set_duty+0x1dc>
		output = 1.0;
    1c0a:	4a12      	ldr	r2, [pc, #72]	; (1c54 <set_duty+0x218>)
    1c0c:	f04f 0300 	mov.w	r3, #0
    1c10:	4c14      	ldr	r4, [pc, #80]	; (1c64 <set_duty+0x228>)
    1c12:	e9c2 3400 	strd	r3, r4, [r2]
    1c16:	e012      	b.n	1c3e <set_duty+0x202>
		}else if(output <= 0.0){
    1c18:	4b0e      	ldr	r3, [pc, #56]	; (1c54 <set_duty+0x218>)
    1c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
    1c1e:	4c15      	ldr	r4, [pc, #84]	; (1c74 <set_duty+0x238>)
    1c20:	f04f 0200 	mov.w	r2, #0
    1c24:	f04f 0300 	mov.w	r3, #0
    1c28:	47a0      	blx	r4
    1c2a:	4603      	mov	r3, r0
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d006      	beq.n	1c3e <set_duty+0x202>
		output = 0.0;
    1c30:	4a08      	ldr	r2, [pc, #32]	; (1c54 <set_duty+0x218>)
    1c32:	f04f 0300 	mov.w	r3, #0
    1c36:	f04f 0400 	mov.w	r4, #0
    1c3a:	e9c2 3400 	strd	r3, r4, [r2]
	}
	return output;
    1c3e:	4b05      	ldr	r3, [pc, #20]	; (1c54 <set_duty+0x218>)
    1c40:	e9d3 3400 	ldrd	r3, r4, [r3]
    1c44:	4618      	mov	r0, r3
    1c46:	4621      	mov	r1, r4
    1c48:	370c      	adds	r7, #12
    1c4a:	46bd      	mov	sp, r7
    1c4c:	bd90      	pop	{r4, r7, pc}
    1c4e:	bf00      	nop
    1c50:	20000048 	.word	0x20000048
    1c54:	20000050 	.word	0x20000050
    1c58:	3fd00000 	.word	0x3fd00000
    1c5c:	3fe00000 	.word	0x3fe00000
    1c60:	3fe80000 	.word	0x3fe80000
    1c64:	3ff00000 	.word	0x3ff00000
    1c68:	00001c85 	.word	0x00001c85
    1c6c:	00001c81 	.word	0x00001c81
    1c70:	000020d1 	.word	0x000020d1
    1c74:	000020bd 	.word	0x000020bd

00001c78 <__aeabi_drsub>:
    1c78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1c7c:	e002      	b.n	1c84 <__adddf3>
    1c7e:	bf00      	nop

00001c80 <__aeabi_dsub>:
    1c80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00001c84 <__adddf3>:
    1c84:	b530      	push	{r4, r5, lr}
    1c86:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1c8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1c8e:	ea94 0f05 	teq	r4, r5
    1c92:	bf08      	it	eq
    1c94:	ea90 0f02 	teqeq	r0, r2
    1c98:	bf1f      	itttt	ne
    1c9a:	ea54 0c00 	orrsne.w	ip, r4, r0
    1c9e:	ea55 0c02 	orrsne.w	ip, r5, r2
    1ca2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    1ca6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1caa:	f000 80e2 	beq.w	1e72 <__adddf3+0x1ee>
    1cae:	ea4f 5454 	mov.w	r4, r4, lsr #21
    1cb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    1cb6:	bfb8      	it	lt
    1cb8:	426d      	neglt	r5, r5
    1cba:	dd0c      	ble.n	1cd6 <__adddf3+0x52>
    1cbc:	442c      	add	r4, r5
    1cbe:	ea80 0202 	eor.w	r2, r0, r2
    1cc2:	ea81 0303 	eor.w	r3, r1, r3
    1cc6:	ea82 0000 	eor.w	r0, r2, r0
    1cca:	ea83 0101 	eor.w	r1, r3, r1
    1cce:	ea80 0202 	eor.w	r2, r0, r2
    1cd2:	ea81 0303 	eor.w	r3, r1, r3
    1cd6:	2d36      	cmp	r5, #54	; 0x36
    1cd8:	bf88      	it	hi
    1cda:	bd30      	pophi	{r4, r5, pc}
    1cdc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1ce4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1ce8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1cec:	d002      	beq.n	1cf4 <__adddf3+0x70>
    1cee:	4240      	negs	r0, r0
    1cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1cf4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1cf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1cfc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1d00:	d002      	beq.n	1d08 <__adddf3+0x84>
    1d02:	4252      	negs	r2, r2
    1d04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1d08:	ea94 0f05 	teq	r4, r5
    1d0c:	f000 80a7 	beq.w	1e5e <__adddf3+0x1da>
    1d10:	f1a4 0401 	sub.w	r4, r4, #1
    1d14:	f1d5 0e20 	rsbs	lr, r5, #32
    1d18:	db0d      	blt.n	1d36 <__adddf3+0xb2>
    1d1a:	fa02 fc0e 	lsl.w	ip, r2, lr
    1d1e:	fa22 f205 	lsr.w	r2, r2, r5
    1d22:	1880      	adds	r0, r0, r2
    1d24:	f141 0100 	adc.w	r1, r1, #0
    1d28:	fa03 f20e 	lsl.w	r2, r3, lr
    1d2c:	1880      	adds	r0, r0, r2
    1d2e:	fa43 f305 	asr.w	r3, r3, r5
    1d32:	4159      	adcs	r1, r3
    1d34:	e00e      	b.n	1d54 <__adddf3+0xd0>
    1d36:	f1a5 0520 	sub.w	r5, r5, #32
    1d3a:	f10e 0e20 	add.w	lr, lr, #32
    1d3e:	2a01      	cmp	r2, #1
    1d40:	fa03 fc0e 	lsl.w	ip, r3, lr
    1d44:	bf28      	it	cs
    1d46:	f04c 0c02 	orrcs.w	ip, ip, #2
    1d4a:	fa43 f305 	asr.w	r3, r3, r5
    1d4e:	18c0      	adds	r0, r0, r3
    1d50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    1d54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1d58:	d507      	bpl.n	1d6a <__adddf3+0xe6>
    1d5a:	f04f 0e00 	mov.w	lr, #0
    1d5e:	f1dc 0c00 	rsbs	ip, ip, #0
    1d62:	eb7e 0000 	sbcs.w	r0, lr, r0
    1d66:	eb6e 0101 	sbc.w	r1, lr, r1
    1d6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1d6e:	d31b      	bcc.n	1da8 <__adddf3+0x124>
    1d70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    1d74:	d30c      	bcc.n	1d90 <__adddf3+0x10c>
    1d76:	0849      	lsrs	r1, r1, #1
    1d78:	ea5f 0030 	movs.w	r0, r0, rrx
    1d7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1d80:	f104 0401 	add.w	r4, r4, #1
    1d84:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1d88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1d8c:	f080 809a 	bcs.w	1ec4 <__adddf3+0x240>
    1d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1d94:	bf08      	it	eq
    1d96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1d9a:	f150 0000 	adcs.w	r0, r0, #0
    1d9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1da2:	ea41 0105 	orr.w	r1, r1, r5
    1da6:	bd30      	pop	{r4, r5, pc}
    1da8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1dac:	4140      	adcs	r0, r0
    1dae:	eb41 0101 	adc.w	r1, r1, r1
    1db2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1db6:	f1a4 0401 	sub.w	r4, r4, #1
    1dba:	d1e9      	bne.n	1d90 <__adddf3+0x10c>
    1dbc:	f091 0f00 	teq	r1, #0
    1dc0:	bf04      	itt	eq
    1dc2:	4601      	moveq	r1, r0
    1dc4:	2000      	moveq	r0, #0
    1dc6:	fab1 f381 	clz	r3, r1
    1dca:	bf08      	it	eq
    1dcc:	3320      	addeq	r3, #32
    1dce:	f1a3 030b 	sub.w	r3, r3, #11
    1dd2:	f1b3 0220 	subs.w	r2, r3, #32
    1dd6:	da0c      	bge.n	1df2 <__adddf3+0x16e>
    1dd8:	320c      	adds	r2, #12
    1dda:	dd08      	ble.n	1dee <__adddf3+0x16a>
    1ddc:	f102 0c14 	add.w	ip, r2, #20
    1de0:	f1c2 020c 	rsb	r2, r2, #12
    1de4:	fa01 f00c 	lsl.w	r0, r1, ip
    1de8:	fa21 f102 	lsr.w	r1, r1, r2
    1dec:	e00c      	b.n	1e08 <__adddf3+0x184>
    1dee:	f102 0214 	add.w	r2, r2, #20
    1df2:	bfd8      	it	le
    1df4:	f1c2 0c20 	rsble	ip, r2, #32
    1df8:	fa01 f102 	lsl.w	r1, r1, r2
    1dfc:	fa20 fc0c 	lsr.w	ip, r0, ip
    1e00:	bfdc      	itt	le
    1e02:	ea41 010c 	orrle.w	r1, r1, ip
    1e06:	4090      	lslle	r0, r2
    1e08:	1ae4      	subs	r4, r4, r3
    1e0a:	bfa2      	ittt	ge
    1e0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1e10:	4329      	orrge	r1, r5
    1e12:	bd30      	popge	{r4, r5, pc}
    1e14:	ea6f 0404 	mvn.w	r4, r4
    1e18:	3c1f      	subs	r4, #31
    1e1a:	da1c      	bge.n	1e56 <__adddf3+0x1d2>
    1e1c:	340c      	adds	r4, #12
    1e1e:	dc0e      	bgt.n	1e3e <__adddf3+0x1ba>
    1e20:	f104 0414 	add.w	r4, r4, #20
    1e24:	f1c4 0220 	rsb	r2, r4, #32
    1e28:	fa20 f004 	lsr.w	r0, r0, r4
    1e2c:	fa01 f302 	lsl.w	r3, r1, r2
    1e30:	ea40 0003 	orr.w	r0, r0, r3
    1e34:	fa21 f304 	lsr.w	r3, r1, r4
    1e38:	ea45 0103 	orr.w	r1, r5, r3
    1e3c:	bd30      	pop	{r4, r5, pc}
    1e3e:	f1c4 040c 	rsb	r4, r4, #12
    1e42:	f1c4 0220 	rsb	r2, r4, #32
    1e46:	fa20 f002 	lsr.w	r0, r0, r2
    1e4a:	fa01 f304 	lsl.w	r3, r1, r4
    1e4e:	ea40 0003 	orr.w	r0, r0, r3
    1e52:	4629      	mov	r1, r5
    1e54:	bd30      	pop	{r4, r5, pc}
    1e56:	fa21 f004 	lsr.w	r0, r1, r4
    1e5a:	4629      	mov	r1, r5
    1e5c:	bd30      	pop	{r4, r5, pc}
    1e5e:	f094 0f00 	teq	r4, #0
    1e62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    1e66:	bf06      	itte	eq
    1e68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1e6c:	3401      	addeq	r4, #1
    1e6e:	3d01      	subne	r5, #1
    1e70:	e74e      	b.n	1d10 <__adddf3+0x8c>
    1e72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    1e76:	bf18      	it	ne
    1e78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1e7c:	d029      	beq.n	1ed2 <__adddf3+0x24e>
    1e7e:	ea94 0f05 	teq	r4, r5
    1e82:	bf08      	it	eq
    1e84:	ea90 0f02 	teqeq	r0, r2
    1e88:	d005      	beq.n	1e96 <__adddf3+0x212>
    1e8a:	ea54 0c00 	orrs.w	ip, r4, r0
    1e8e:	bf04      	itt	eq
    1e90:	4619      	moveq	r1, r3
    1e92:	4610      	moveq	r0, r2
    1e94:	bd30      	pop	{r4, r5, pc}
    1e96:	ea91 0f03 	teq	r1, r3
    1e9a:	bf1e      	ittt	ne
    1e9c:	2100      	movne	r1, #0
    1e9e:	2000      	movne	r0, #0
    1ea0:	bd30      	popne	{r4, r5, pc}
    1ea2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    1ea6:	d105      	bne.n	1eb4 <__adddf3+0x230>
    1ea8:	0040      	lsls	r0, r0, #1
    1eaa:	4149      	adcs	r1, r1
    1eac:	bf28      	it	cs
    1eae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    1eb2:	bd30      	pop	{r4, r5, pc}
    1eb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1eb8:	bf3c      	itt	cc
    1eba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1ebe:	bd30      	popcc	{r4, r5, pc}
    1ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1ec4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1ec8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1ecc:	f04f 0000 	mov.w	r0, #0
    1ed0:	bd30      	pop	{r4, r5, pc}
    1ed2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    1ed6:	bf1a      	itte	ne
    1ed8:	4619      	movne	r1, r3
    1eda:	4610      	movne	r0, r2
    1edc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1ee0:	bf1c      	itt	ne
    1ee2:	460b      	movne	r3, r1
    1ee4:	4602      	movne	r2, r0
    1ee6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1eea:	bf06      	itte	eq
    1eec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1ef0:	ea91 0f03 	teqeq	r1, r3
    1ef4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1ef8:	bd30      	pop	{r4, r5, pc}
    1efa:	bf00      	nop

00001efc <__aeabi_ui2d>:
    1efc:	f090 0f00 	teq	r0, #0
    1f00:	bf04      	itt	eq
    1f02:	2100      	moveq	r1, #0
    1f04:	4770      	bxeq	lr
    1f06:	b530      	push	{r4, r5, lr}
    1f08:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1f0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1f10:	f04f 0500 	mov.w	r5, #0
    1f14:	f04f 0100 	mov.w	r1, #0
    1f18:	e750      	b.n	1dbc <__adddf3+0x138>
    1f1a:	bf00      	nop

00001f1c <__aeabi_i2d>:
    1f1c:	f090 0f00 	teq	r0, #0
    1f20:	bf04      	itt	eq
    1f22:	2100      	moveq	r1, #0
    1f24:	4770      	bxeq	lr
    1f26:	b530      	push	{r4, r5, lr}
    1f28:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1f2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1f30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    1f34:	bf48      	it	mi
    1f36:	4240      	negmi	r0, r0
    1f38:	f04f 0100 	mov.w	r1, #0
    1f3c:	e73e      	b.n	1dbc <__adddf3+0x138>
    1f3e:	bf00      	nop

00001f40 <__aeabi_f2d>:
    1f40:	0042      	lsls	r2, r0, #1
    1f42:	ea4f 01e2 	mov.w	r1, r2, asr #3
    1f46:	ea4f 0131 	mov.w	r1, r1, rrx
    1f4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1f4e:	bf1f      	itttt	ne
    1f50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    1f54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1f58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1f5c:	4770      	bxne	lr
    1f5e:	f092 0f00 	teq	r2, #0
    1f62:	bf14      	ite	ne
    1f64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1f68:	4770      	bxeq	lr
    1f6a:	b530      	push	{r4, r5, lr}
    1f6c:	f44f 7460 	mov.w	r4, #896	; 0x380
    1f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1f78:	e720      	b.n	1dbc <__adddf3+0x138>
    1f7a:	bf00      	nop

00001f7c <__aeabi_ul2d>:
    1f7c:	ea50 0201 	orrs.w	r2, r0, r1
    1f80:	bf08      	it	eq
    1f82:	4770      	bxeq	lr
    1f84:	b530      	push	{r4, r5, lr}
    1f86:	f04f 0500 	mov.w	r5, #0
    1f8a:	e00a      	b.n	1fa2 <__aeabi_l2d+0x16>

00001f8c <__aeabi_l2d>:
    1f8c:	ea50 0201 	orrs.w	r2, r0, r1
    1f90:	bf08      	it	eq
    1f92:	4770      	bxeq	lr
    1f94:	b530      	push	{r4, r5, lr}
    1f96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    1f9a:	d502      	bpl.n	1fa2 <__aeabi_l2d+0x16>
    1f9c:	4240      	negs	r0, r0
    1f9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1fa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1fa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1faa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    1fae:	f43f aedc 	beq.w	1d6a <__adddf3+0xe6>
    1fb2:	f04f 0203 	mov.w	r2, #3
    1fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1fba:	bf18      	it	ne
    1fbc:	3203      	addne	r2, #3
    1fbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1fc2:	bf18      	it	ne
    1fc4:	3203      	addne	r2, #3
    1fc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    1fca:	f1c2 0320 	rsb	r3, r2, #32
    1fce:	fa00 fc03 	lsl.w	ip, r0, r3
    1fd2:	fa20 f002 	lsr.w	r0, r0, r2
    1fd6:	fa01 fe03 	lsl.w	lr, r1, r3
    1fda:	ea40 000e 	orr.w	r0, r0, lr
    1fde:	fa21 f102 	lsr.w	r1, r1, r2
    1fe2:	4414      	add	r4, r2
    1fe4:	e6c1      	b.n	1d6a <__adddf3+0xe6>
    1fe6:	bf00      	nop

00001fe8 <__gedf2>:
    1fe8:	f04f 3cff 	mov.w	ip, #4294967295
    1fec:	e006      	b.n	1ffc <__cmpdf2+0x4>
    1fee:	bf00      	nop

00001ff0 <__ledf2>:
    1ff0:	f04f 0c01 	mov.w	ip, #1
    1ff4:	e002      	b.n	1ffc <__cmpdf2+0x4>
    1ff6:	bf00      	nop

00001ff8 <__cmpdf2>:
    1ff8:	f04f 0c01 	mov.w	ip, #1
    1ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
    2000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    2004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    200c:	bf18      	it	ne
    200e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    2012:	d01b      	beq.n	204c <__cmpdf2+0x54>
    2014:	b001      	add	sp, #4
    2016:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    201a:	bf0c      	ite	eq
    201c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    2020:	ea91 0f03 	teqne	r1, r3
    2024:	bf02      	ittt	eq
    2026:	ea90 0f02 	teqeq	r0, r2
    202a:	2000      	moveq	r0, #0
    202c:	4770      	bxeq	lr
    202e:	f110 0f00 	cmn.w	r0, #0
    2032:	ea91 0f03 	teq	r1, r3
    2036:	bf58      	it	pl
    2038:	4299      	cmppl	r1, r3
    203a:	bf08      	it	eq
    203c:	4290      	cmpeq	r0, r2
    203e:	bf2c      	ite	cs
    2040:	17d8      	asrcs	r0, r3, #31
    2042:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    2046:	f040 0001 	orr.w	r0, r0, #1
    204a:	4770      	bx	lr
    204c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    2050:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2054:	d102      	bne.n	205c <__cmpdf2+0x64>
    2056:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    205a:	d107      	bne.n	206c <__cmpdf2+0x74>
    205c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    2060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2064:	d1d6      	bne.n	2014 <__cmpdf2+0x1c>
    2066:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    206a:	d0d3      	beq.n	2014 <__cmpdf2+0x1c>
    206c:	f85d 0b04 	ldr.w	r0, [sp], #4
    2070:	4770      	bx	lr
    2072:	bf00      	nop

00002074 <__aeabi_cdrcmple>:
    2074:	4684      	mov	ip, r0
    2076:	4610      	mov	r0, r2
    2078:	4662      	mov	r2, ip
    207a:	468c      	mov	ip, r1
    207c:	4619      	mov	r1, r3
    207e:	4663      	mov	r3, ip
    2080:	e000      	b.n	2084 <__aeabi_cdcmpeq>
    2082:	bf00      	nop

00002084 <__aeabi_cdcmpeq>:
    2084:	b501      	push	{r0, lr}
    2086:	f7ff ffb7 	bl	1ff8 <__cmpdf2>
    208a:	2800      	cmp	r0, #0
    208c:	bf48      	it	mi
    208e:	f110 0f00 	cmnmi.w	r0, #0
    2092:	bd01      	pop	{r0, pc}

00002094 <__aeabi_dcmpeq>:
    2094:	f84d ed08 	str.w	lr, [sp, #-8]!
    2098:	f7ff fff4 	bl	2084 <__aeabi_cdcmpeq>
    209c:	bf0c      	ite	eq
    209e:	2001      	moveq	r0, #1
    20a0:	2000      	movne	r0, #0
    20a2:	f85d fb08 	ldr.w	pc, [sp], #8
    20a6:	bf00      	nop

000020a8 <__aeabi_dcmplt>:
    20a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    20ac:	f7ff ffea 	bl	2084 <__aeabi_cdcmpeq>
    20b0:	bf34      	ite	cc
    20b2:	2001      	movcc	r0, #1
    20b4:	2000      	movcs	r0, #0
    20b6:	f85d fb08 	ldr.w	pc, [sp], #8
    20ba:	bf00      	nop

000020bc <__aeabi_dcmple>:
    20bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    20c0:	f7ff ffe0 	bl	2084 <__aeabi_cdcmpeq>
    20c4:	bf94      	ite	ls
    20c6:	2001      	movls	r0, #1
    20c8:	2000      	movhi	r0, #0
    20ca:	f85d fb08 	ldr.w	pc, [sp], #8
    20ce:	bf00      	nop

000020d0 <__aeabi_dcmpge>:
    20d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    20d4:	f7ff ffce 	bl	2074 <__aeabi_cdrcmple>
    20d8:	bf94      	ite	ls
    20da:	2001      	movls	r0, #1
    20dc:	2000      	movhi	r0, #0
    20de:	f85d fb08 	ldr.w	pc, [sp], #8
    20e2:	bf00      	nop

000020e4 <__aeabi_dcmpgt>:
    20e4:	f84d ed08 	str.w	lr, [sp, #-8]!
    20e8:	f7ff ffc4 	bl	2074 <__aeabi_cdrcmple>
    20ec:	bf34      	ite	cc
    20ee:	2001      	movcc	r0, #1
    20f0:	2000      	movcs	r0, #0
    20f2:	f85d fb08 	ldr.w	pc, [sp], #8
    20f6:	bf00      	nop

000020f8 <__libc_init_array>:
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	4e0d      	ldr	r6, [pc, #52]	; (2130 <__libc_init_array+0x38>)
    20fc:	4c0d      	ldr	r4, [pc, #52]	; (2134 <__libc_init_array+0x3c>)
    20fe:	1ba4      	subs	r4, r4, r6
    2100:	10a4      	asrs	r4, r4, #2
    2102:	2500      	movs	r5, #0
    2104:	42a5      	cmp	r5, r4
    2106:	d109      	bne.n	211c <__libc_init_array+0x24>
    2108:	4e0b      	ldr	r6, [pc, #44]	; (2138 <__libc_init_array+0x40>)
    210a:	4c0c      	ldr	r4, [pc, #48]	; (213c <__libc_init_array+0x44>)
    210c:	f000 f85c 	bl	21c8 <_init>
    2110:	1ba4      	subs	r4, r4, r6
    2112:	10a4      	asrs	r4, r4, #2
    2114:	2500      	movs	r5, #0
    2116:	42a5      	cmp	r5, r4
    2118:	d105      	bne.n	2126 <__libc_init_array+0x2e>
    211a:	bd70      	pop	{r4, r5, r6, pc}
    211c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2120:	4798      	blx	r3
    2122:	3501      	adds	r5, #1
    2124:	e7ee      	b.n	2104 <__libc_init_array+0xc>
    2126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    212a:	4798      	blx	r3
    212c:	3501      	adds	r5, #1
    212e:	e7f2      	b.n	2116 <__libc_init_array+0x1e>
    2130:	000021d4 	.word	0x000021d4
    2134:	000021d4 	.word	0x000021d4
    2138:	000021d4 	.word	0x000021d4
    213c:	000021d8 	.word	0x000021d8
    2140:	682f2e2e 	.word	0x682f2e2e
    2144:	702f6c70 	.word	0x702f6c70
    2148:	2f74726f 	.word	0x2f74726f
    214c:	5f6c7068 	.word	0x5f6c7068
    2150:	6f697067 	.word	0x6f697067
    2154:	7361625f 	.word	0x7361625f
    2158:	00682e65 	.word	0x00682e65
    215c:	682f2e2e 	.word	0x682f2e2e
    2160:	732f6c61 	.word	0x732f6c61
    2164:	682f6372 	.word	0x682f6372
    2168:	755f6c61 	.word	0x755f6c61
    216c:	74726173 	.word	0x74726173
    2170:	6e79735f 	.word	0x6e79735f
    2174:	00632e63 	.word	0x00632e63
    2178:	682f2e2e 	.word	0x682f2e2e
    217c:	732f6c70 	.word	0x732f6c70
    2180:	6f637265 	.word	0x6f637265
    2184:	70682f6d 	.word	0x70682f6d
    2188:	65735f6c 	.word	0x65735f6c
    218c:	6d6f6372 	.word	0x6d6f6372
    2190:	0000632e 	.word	0x0000632e
    2194:	40003000 	.word	0x40003000
    2198:	40003400 	.word	0x40003400
    219c:	41012000 	.word	0x41012000
    21a0:	41014000 	.word	0x41014000
    21a4:	43000000 	.word	0x43000000
    21a8:	43000400 	.word	0x43000400
    21ac:	43000800 	.word	0x43000800
    21b0:	43000c00 	.word	0x43000c00

000021b4 <sercomspi_regs>:
	...

000021c8 <_init>:
    21c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ca:	bf00      	nop
    21cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ce:	bc08      	pop	{r3}
    21d0:	469e      	mov	lr, r3
    21d2:	4770      	bx	lr

000021d4 <__init_array_start>:
    21d4:	00000289 	.word	0x00000289

000021d8 <_fini>:
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21da:	bf00      	nop
    21dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21de:	bc08      	pop	{r3}
    21e0:	469e      	mov	lr, r3
    21e2:	4770      	bx	lr

000021e4 <__fini_array_start>:
    21e4:	00000265 	.word	0x00000265
