
Brushed DC motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000044  20000000  000031dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020044  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020044  2**0
                  CONTENTS
  4 .bss          00000118  20000048  00003228  00020048  2**3
                  ALLOC
  5 .stack        00010000  20000160  00003340  00020048  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020072  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f9e4  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000028f1  00000000  00000000  0003faaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a784  00000000  00000000  000423a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001258  00000000  00000000  0004cb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001120  00000000  00000000  0004dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000324fd  00000000  00000000  0004ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013252  00000000  00000000  00081399  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00116365  00000000  00000000  000945eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004d1c  00000000  00000000  001aa950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 01 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     `.. ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	a5 18 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     ....}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 b1 23 00 00 cd 23 00 00 e9 23 00 00     }....#...#...#..
     124:	05 24 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .$..}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 1d 30 00 00 7d 03 00 00 7d 03 00 00     }....0..}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 c5 2b 00 00 7d 03 00 00     }...}....+..}...
     1f4:	e1 2b 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .+..}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000048 	.word	0x20000048
     280:	00000000 	.word	0x00000000
     284:	000031dc 	.word	0x000031dc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000031dc 	.word	0x000031dc
     2c4:	2000004c 	.word	0x2000004c
     2c8:	000031dc 	.word	0x000031dc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000b3d 	.word	0x00000b3d

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	000031dc 	.word	0x000031dc
     35c:	20000000 	.word	0x20000000
     360:	20000044 	.word	0x20000044
     364:	20000048 	.word	0x20000048
     368:	20000160 	.word	0x20000160
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	00003045 	.word	0x00003045
     378:	00002ea5 	.word	0x00002ea5

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	699b      	ldr	r3, [r3, #24]
     3d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	699b      	ldr	r3, [r3, #24]
     3f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     410:	687b      	ldr	r3, [r7, #4]
     412:	699b      	ldr	r3, [r3, #24]
     414:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     418:	687b      	ldr	r3, [r7, #4]
     41a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	60f8      	str	r0, [r7, #12]
     430:	460b      	mov	r3, r1
     432:	607a      	str	r2, [r7, #4]
     434:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     436:	7afb      	ldrb	r3, [r7, #11]
     438:	68fa      	ldr	r2, [r7, #12]
     43a:	01db      	lsls	r3, r3, #7
     43c:	4413      	add	r3, r2
     43e:	3308      	adds	r3, #8
     440:	687a      	ldr	r2, [r7, #4]
     442:	601a      	str	r2, [r3, #0]
}
     444:	bf00      	nop
     446:	3714      	adds	r7, #20
     448:	46bd      	mov	sp, r7
     44a:	f85d 7b04 	ldr.w	r7, [sp], #4
     44e:	4770      	bx	lr

00000450 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     450:	b480      	push	{r7}
     452:	b085      	sub	sp, #20
     454:	af00      	add	r7, sp, #0
     456:	60f8      	str	r0, [r7, #12]
     458:	460b      	mov	r3, r1
     45a:	607a      	str	r2, [r7, #4]
     45c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45e:	7afb      	ldrb	r3, [r7, #11]
     460:	68fa      	ldr	r2, [r7, #12]
     462:	01db      	lsls	r3, r3, #7
     464:	4413      	add	r3, r2
     466:	3304      	adds	r3, #4
     468:	687a      	ldr	r2, [r7, #4]
     46a:	601a      	str	r2, [r3, #0]
}
     46c:	bf00      	nop
     46e:	3714      	adds	r7, #20
     470:	46bd      	mov	sp, r7
     472:	f85d 7b04 	ldr.w	r7, [sp], #4
     476:	4770      	bx	lr

00000478 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     478:	b480      	push	{r7}
     47a:	b085      	sub	sp, #20
     47c:	af00      	add	r7, sp, #0
     47e:	60f8      	str	r0, [r7, #12]
     480:	460b      	mov	r3, r1
     482:	607a      	str	r2, [r7, #4]
     484:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     486:	7afb      	ldrb	r3, [r7, #11]
     488:	68fa      	ldr	r2, [r7, #12]
     48a:	01db      	lsls	r3, r3, #7
     48c:	4413      	add	r3, r2
     48e:	3318      	adds	r3, #24
     490:	687a      	ldr	r2, [r7, #4]
     492:	601a      	str	r2, [r3, #0]
}
     494:	bf00      	nop
     496:	3714      	adds	r7, #20
     498:	46bd      	mov	sp, r7
     49a:	f85d 7b04 	ldr.w	r7, [sp], #4
     49e:	4770      	bx	lr

000004a0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4a0:	b480      	push	{r7}
     4a2:	b085      	sub	sp, #20
     4a4:	af00      	add	r7, sp, #0
     4a6:	60f8      	str	r0, [r7, #12]
     4a8:	460b      	mov	r3, r1
     4aa:	607a      	str	r2, [r7, #4]
     4ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ae:	7afb      	ldrb	r3, [r7, #11]
     4b0:	68fa      	ldr	r2, [r7, #12]
     4b2:	01db      	lsls	r3, r3, #7
     4b4:	4413      	add	r3, r2
     4b6:	3314      	adds	r3, #20
     4b8:	687a      	ldr	r2, [r7, #4]
     4ba:	601a      	str	r2, [r3, #0]
}
     4bc:	bf00      	nop
     4be:	3714      	adds	r7, #20
     4c0:	46bd      	mov	sp, r7
     4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c6:	4770      	bx	lr

000004c8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     4c8:	b480      	push	{r7}
     4ca:	b085      	sub	sp, #20
     4cc:	af00      	add	r7, sp, #0
     4ce:	6078      	str	r0, [r7, #4]
     4d0:	4608      	mov	r0, r1
     4d2:	4611      	mov	r1, r2
     4d4:	461a      	mov	r2, r3
     4d6:	4603      	mov	r3, r0
     4d8:	70fb      	strb	r3, [r7, #3]
     4da:	460b      	mov	r3, r1
     4dc:	70bb      	strb	r3, [r7, #2]
     4de:	4613      	mov	r3, r2
     4e0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e2:	78fa      	ldrb	r2, [r7, #3]
     4e4:	78bb      	ldrb	r3, [r7, #2]
     4e6:	6879      	ldr	r1, [r7, #4]
     4e8:	01d2      	lsls	r2, r2, #7
     4ea:	440a      	add	r2, r1
     4ec:	4413      	add	r3, r2
     4ee:	3330      	adds	r3, #48	; 0x30
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f4:	7bfb      	ldrb	r3, [r7, #15]
     4f6:	f023 030f 	bic.w	r3, r3, #15
     4fa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     4fc:	787b      	ldrb	r3, [r7, #1]
     4fe:	f003 030f 	and.w	r3, r3, #15
     502:	b2da      	uxtb	r2, r3
     504:	7bfb      	ldrb	r3, [r7, #15]
     506:	4313      	orrs	r3, r2
     508:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50a:	78fa      	ldrb	r2, [r7, #3]
     50c:	78bb      	ldrb	r3, [r7, #2]
     50e:	6879      	ldr	r1, [r7, #4]
     510:	01d2      	lsls	r2, r2, #7
     512:	440a      	add	r2, r1
     514:	4413      	add	r3, r2
     516:	3330      	adds	r3, #48	; 0x30
     518:	7bfa      	ldrb	r2, [r7, #15]
     51a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     51c:	bf00      	nop
     51e:	3714      	adds	r7, #20
     520:	46bd      	mov	sp, r7
     522:	f85d 7b04 	ldr.w	r7, [sp], #4
     526:	4770      	bx	lr

00000528 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     528:	b480      	push	{r7}
     52a:	b085      	sub	sp, #20
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
     530:	4608      	mov	r0, r1
     532:	4611      	mov	r1, r2
     534:	461a      	mov	r2, r3
     536:	4603      	mov	r3, r0
     538:	70fb      	strb	r3, [r7, #3]
     53a:	460b      	mov	r3, r1
     53c:	70bb      	strb	r3, [r7, #2]
     53e:	4613      	mov	r3, r2
     540:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     542:	78fa      	ldrb	r2, [r7, #3]
     544:	78bb      	ldrb	r3, [r7, #2]
     546:	6879      	ldr	r1, [r7, #4]
     548:	01d2      	lsls	r2, r2, #7
     54a:	440a      	add	r2, r1
     54c:	4413      	add	r3, r2
     54e:	3330      	adds	r3, #48	; 0x30
     550:	781b      	ldrb	r3, [r3, #0]
     552:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     554:	7bfb      	ldrb	r3, [r7, #15]
     556:	f003 030f 	and.w	r3, r3, #15
     55a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     55c:	787b      	ldrb	r3, [r7, #1]
     55e:	011b      	lsls	r3, r3, #4
     560:	b2da      	uxtb	r2, r3
     562:	7bfb      	ldrb	r3, [r7, #15]
     564:	4313      	orrs	r3, r2
     566:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     568:	78fa      	ldrb	r2, [r7, #3]
     56a:	78bb      	ldrb	r3, [r7, #2]
     56c:	6879      	ldr	r1, [r7, #4]
     56e:	01d2      	lsls	r2, r2, #7
     570:	440a      	add	r2, r1
     572:	4413      	add	r3, r2
     574:	3330      	adds	r3, #48	; 0x30
     576:	7bfa      	ldrb	r2, [r7, #15]
     578:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     57a:	bf00      	nop
     57c:	3714      	adds	r7, #20
     57e:	46bd      	mov	sp, r7
     580:	f85d 7b04 	ldr.w	r7, [sp], #4
     584:	4770      	bx	lr

00000586 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     586:	b480      	push	{r7}
     588:	b085      	sub	sp, #20
     58a:	af00      	add	r7, sp, #0
     58c:	6078      	str	r0, [r7, #4]
     58e:	4608      	mov	r0, r1
     590:	4611      	mov	r1, r2
     592:	461a      	mov	r2, r3
     594:	4603      	mov	r3, r0
     596:	70fb      	strb	r3, [r7, #3]
     598:	460b      	mov	r3, r1
     59a:	70bb      	strb	r3, [r7, #2]
     59c:	4613      	mov	r3, r2
     59e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a0:	78fa      	ldrb	r2, [r7, #3]
     5a2:	78bb      	ldrb	r3, [r7, #2]
     5a4:	6879      	ldr	r1, [r7, #4]
     5a6:	01d2      	lsls	r2, r2, #7
     5a8:	440a      	add	r2, r1
     5aa:	4413      	add	r3, r2
     5ac:	3340      	adds	r3, #64	; 0x40
     5ae:	781b      	ldrb	r3, [r3, #0]
     5b0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	7bfb      	ldrb	r3, [r7, #15]
     5b4:	f023 0301 	bic.w	r3, r3, #1
     5b8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	787a      	ldrb	r2, [r7, #1]
     5bc:	7bfb      	ldrb	r3, [r7, #15]
     5be:	4313      	orrs	r3, r2
     5c0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c2:	78fa      	ldrb	r2, [r7, #3]
     5c4:	78bb      	ldrb	r3, [r7, #2]
     5c6:	6879      	ldr	r1, [r7, #4]
     5c8:	01d2      	lsls	r2, r2, #7
     5ca:	440a      	add	r2, r1
     5cc:	4413      	add	r3, r2
     5ce:	3340      	adds	r3, #64	; 0x40
     5d0:	7bfa      	ldrb	r2, [r7, #15]
     5d2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5d4:	bf00      	nop
     5d6:	3714      	adds	r7, #20
     5d8:	46bd      	mov	sp, r7
     5da:	f85d 7b04 	ldr.w	r7, [sp], #4
     5de:	4770      	bx	lr

000005e0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5e0:	b490      	push	{r4, r7}
     5e2:	b082      	sub	sp, #8
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
     5e8:	460b      	mov	r3, r1
     5ea:	70fb      	strb	r3, [r7, #3]
     5ec:	4613      	mov	r3, r2
     5ee:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5f0:	78fa      	ldrb	r2, [r7, #3]
     5f2:	78bb      	ldrb	r3, [r7, #2]
     5f4:	78f8      	ldrb	r0, [r7, #3]
     5f6:	78b9      	ldrb	r1, [r7, #2]
     5f8:	687c      	ldr	r4, [r7, #4]
     5fa:	01c0      	lsls	r0, r0, #7
     5fc:	4420      	add	r0, r4
     5fe:	4401      	add	r1, r0
     600:	3140      	adds	r1, #64	; 0x40
     602:	7809      	ldrb	r1, [r1, #0]
     604:	b2c9      	uxtb	r1, r1
     606:	f041 0104 	orr.w	r1, r1, #4
     60a:	b2c8      	uxtb	r0, r1
     60c:	6879      	ldr	r1, [r7, #4]
     60e:	01d2      	lsls	r2, r2, #7
     610:	440a      	add	r2, r1
     612:	4413      	add	r3, r2
     614:	3340      	adds	r3, #64	; 0x40
     616:	4602      	mov	r2, r0
     618:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     61a:	bf00      	nop
     61c:	3708      	adds	r7, #8
     61e:	46bd      	mov	sp, r7
     620:	bc90      	pop	{r4, r7}
     622:	4770      	bx	lr

00000624 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     624:	b490      	push	{r4, r7}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	460b      	mov	r3, r1
     62e:	70fb      	strb	r3, [r7, #3]
     630:	4613      	mov	r3, r2
     632:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     634:	78fa      	ldrb	r2, [r7, #3]
     636:	78bb      	ldrb	r3, [r7, #2]
     638:	78f8      	ldrb	r0, [r7, #3]
     63a:	78b9      	ldrb	r1, [r7, #2]
     63c:	687c      	ldr	r4, [r7, #4]
     63e:	01c0      	lsls	r0, r0, #7
     640:	4420      	add	r0, r4
     642:	4401      	add	r1, r0
     644:	3140      	adds	r1, #64	; 0x40
     646:	7809      	ldrb	r1, [r1, #0]
     648:	b2c9      	uxtb	r1, r1
     64a:	f021 0104 	bic.w	r1, r1, #4
     64e:	b2c8      	uxtb	r0, r1
     650:	6879      	ldr	r1, [r7, #4]
     652:	01d2      	lsls	r2, r2, #7
     654:	440a      	add	r2, r1
     656:	4413      	add	r3, r2
     658:	3340      	adds	r3, #64	; 0x40
     65a:	4602      	mov	r2, r0
     65c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     65e:	bf00      	nop
     660:	3708      	adds	r7, #8
     662:	46bd      	mov	sp, r7
     664:	bc90      	pop	{r4, r7}
     666:	4770      	bx	lr

00000668 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     668:	b480      	push	{r7}
     66a:	b085      	sub	sp, #20
     66c:	af00      	add	r7, sp, #0
     66e:	60f8      	str	r0, [r7, #12]
     670:	460b      	mov	r3, r1
     672:	607a      	str	r2, [r7, #4]
     674:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     676:	7afb      	ldrb	r3, [r7, #11]
     678:	68fa      	ldr	r2, [r7, #12]
     67a:	01db      	lsls	r3, r3, #7
     67c:	4413      	add	r3, r2
     67e:	3328      	adds	r3, #40	; 0x28
     680:	687a      	ldr	r2, [r7, #4]
     682:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     684:	bf00      	nop
     686:	3714      	adds	r7, #20
     688:	46bd      	mov	sp, r7
     68a:	f85d 7b04 	ldr.w	r7, [sp], #4
     68e:	4770      	bx	lr

00000690 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	4603      	mov	r3, r0
     698:	6039      	str	r1, [r7, #0]
     69a:	71fb      	strb	r3, [r7, #7]
     69c:	4613      	mov	r3, r2
     69e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     6a0:	79bb      	ldrb	r3, [r7, #6]
     6a2:	2b01      	cmp	r3, #1
     6a4:	d01c      	beq.n	6e0 <_gpio_set_direction+0x50>
     6a6:	2b02      	cmp	r3, #2
     6a8:	d037      	beq.n	71a <_gpio_set_direction+0x8a>
     6aa:	2b00      	cmp	r3, #0
     6ac:	d14e      	bne.n	74c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6ae:	79fb      	ldrb	r3, [r7, #7]
     6b0:	683a      	ldr	r2, [r7, #0]
     6b2:	4619      	mov	r1, r3
     6b4:	482a      	ldr	r0, [pc, #168]	; (760 <_gpio_set_direction+0xd0>)
     6b6:	4b2b      	ldr	r3, [pc, #172]	; (764 <_gpio_set_direction+0xd4>)
     6b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     6ba:	683b      	ldr	r3, [r7, #0]
     6bc:	b29b      	uxth	r3, r3
     6be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     6c2:	79fb      	ldrb	r3, [r7, #7]
     6c4:	4619      	mov	r1, r3
     6c6:	4826      	ldr	r0, [pc, #152]	; (760 <_gpio_set_direction+0xd0>)
     6c8:	4b27      	ldr	r3, [pc, #156]	; (768 <_gpio_set_direction+0xd8>)
     6ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     6d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     6d4:	79fb      	ldrb	r3, [r7, #7]
     6d6:	4619      	mov	r1, r3
     6d8:	4821      	ldr	r0, [pc, #132]	; (760 <_gpio_set_direction+0xd0>)
     6da:	4b23      	ldr	r3, [pc, #140]	; (768 <_gpio_set_direction+0xd8>)
     6dc:	4798      	blx	r3
		break;
     6de:	e03a      	b.n	756 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6e0:	79fb      	ldrb	r3, [r7, #7]
     6e2:	683a      	ldr	r2, [r7, #0]
     6e4:	4619      	mov	r1, r3
     6e6:	481e      	ldr	r0, [pc, #120]	; (760 <_gpio_set_direction+0xd0>)
     6e8:	4b1e      	ldr	r3, [pc, #120]	; (764 <_gpio_set_direction+0xd4>)
     6ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     6ec:	683b      	ldr	r3, [r7, #0]
     6ee:	b29b      	uxth	r3, r3
     6f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     6f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6f8:	79f9      	ldrb	r1, [r7, #7]
     6fa:	461a      	mov	r2, r3
     6fc:	4818      	ldr	r0, [pc, #96]	; (760 <_gpio_set_direction+0xd0>)
     6fe:	4b1a      	ldr	r3, [pc, #104]	; (768 <_gpio_set_direction+0xd8>)
     700:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     702:	683b      	ldr	r3, [r7, #0]
     704:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     70a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     70e:	79f9      	ldrb	r1, [r7, #7]
     710:	461a      	mov	r2, r3
     712:	4813      	ldr	r0, [pc, #76]	; (760 <_gpio_set_direction+0xd0>)
     714:	4b14      	ldr	r3, [pc, #80]	; (768 <_gpio_set_direction+0xd8>)
     716:	4798      	blx	r3
		break;
     718:	e01d      	b.n	756 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     71a:	79fb      	ldrb	r3, [r7, #7]
     71c:	683a      	ldr	r2, [r7, #0]
     71e:	4619      	mov	r1, r3
     720:	480f      	ldr	r0, [pc, #60]	; (760 <_gpio_set_direction+0xd0>)
     722:	4b12      	ldr	r3, [pc, #72]	; (76c <_gpio_set_direction+0xdc>)
     724:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     726:	683b      	ldr	r3, [r7, #0]
     728:	b29b      	uxth	r3, r3
     72a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     72e:	79fb      	ldrb	r3, [r7, #7]
     730:	4619      	mov	r1, r3
     732:	480b      	ldr	r0, [pc, #44]	; (760 <_gpio_set_direction+0xd0>)
     734:	4b0c      	ldr	r3, [pc, #48]	; (768 <_gpio_set_direction+0xd8>)
     736:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     738:	683b      	ldr	r3, [r7, #0]
     73a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     73c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     740:	79fb      	ldrb	r3, [r7, #7]
     742:	4619      	mov	r1, r3
     744:	4806      	ldr	r0, [pc, #24]	; (760 <_gpio_set_direction+0xd0>)
     746:	4b08      	ldr	r3, [pc, #32]	; (768 <_gpio_set_direction+0xd8>)
     748:	4798      	blx	r3
		break;
     74a:	e004      	b.n	756 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     74c:	2246      	movs	r2, #70	; 0x46
     74e:	4908      	ldr	r1, [pc, #32]	; (770 <_gpio_set_direction+0xe0>)
     750:	2000      	movs	r0, #0
     752:	4b08      	ldr	r3, [pc, #32]	; (774 <_gpio_set_direction+0xe4>)
     754:	4798      	blx	r3
	}
}
     756:	bf00      	nop
     758:	3708      	adds	r7, #8
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}
     75e:	bf00      	nop
     760:	41008000 	.word	0x41008000
     764:	00000451 	.word	0x00000451
     768:	00000669 	.word	0x00000669
     76c:	00000429 	.word	0x00000429
     770:	0000308c 	.word	0x0000308c
     774:	0000133d 	.word	0x0000133d

00000778 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     778:	b580      	push	{r7, lr}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
     77e:	4603      	mov	r3, r0
     780:	6039      	str	r1, [r7, #0]
     782:	71fb      	strb	r3, [r7, #7]
     784:	4613      	mov	r3, r2
     786:	71bb      	strb	r3, [r7, #6]
	if (level) {
     788:	79bb      	ldrb	r3, [r7, #6]
     78a:	2b00      	cmp	r3, #0
     78c:	d006      	beq.n	79c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     78e:	79fb      	ldrb	r3, [r7, #7]
     790:	683a      	ldr	r2, [r7, #0]
     792:	4619      	mov	r1, r3
     794:	4806      	ldr	r0, [pc, #24]	; (7b0 <_gpio_set_level+0x38>)
     796:	4b07      	ldr	r3, [pc, #28]	; (7b4 <_gpio_set_level+0x3c>)
     798:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     79a:	e005      	b.n	7a8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     79c:	79fb      	ldrb	r3, [r7, #7]
     79e:	683a      	ldr	r2, [r7, #0]
     7a0:	4619      	mov	r1, r3
     7a2:	4803      	ldr	r0, [pc, #12]	; (7b0 <_gpio_set_level+0x38>)
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <_gpio_set_level+0x40>)
     7a6:	4798      	blx	r3
}
     7a8:	bf00      	nop
     7aa:	3708      	adds	r7, #8
     7ac:	46bd      	mov	sp, r7
     7ae:	bd80      	pop	{r7, pc}
     7b0:	41008000 	.word	0x41008000
     7b4:	00000479 	.word	0x00000479
     7b8:	000004a1 	.word	0x000004a1

000007bc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     7bc:	b580      	push	{r7, lr}
     7be:	b082      	sub	sp, #8
     7c0:	af00      	add	r7, sp, #0
     7c2:	4603      	mov	r3, r0
     7c4:	71fb      	strb	r3, [r7, #7]
     7c6:	460b      	mov	r3, r1
     7c8:	71bb      	strb	r3, [r7, #6]
     7ca:	4613      	mov	r3, r2
     7cc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     7ce:	797b      	ldrb	r3, [r7, #5]
     7d0:	2b01      	cmp	r3, #1
     7d2:	d00a      	beq.n	7ea <_gpio_set_pin_pull_mode+0x2e>
     7d4:	2b02      	cmp	r3, #2
     7d6:	d01f      	beq.n	818 <_gpio_set_pin_pull_mode+0x5c>
     7d8:	2b00      	cmp	r3, #0
     7da:	d134      	bne.n	846 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     7dc:	79ba      	ldrb	r2, [r7, #6]
     7de:	79fb      	ldrb	r3, [r7, #7]
     7e0:	4619      	mov	r1, r3
     7e2:	481e      	ldr	r0, [pc, #120]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     7e4:	4b1e      	ldr	r3, [pc, #120]	; (860 <_gpio_set_pin_pull_mode+0xa4>)
     7e6:	4798      	blx	r3
		break;
     7e8:	e033      	b.n	852 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7ea:	79bb      	ldrb	r3, [r7, #6]
     7ec:	2201      	movs	r2, #1
     7ee:	409a      	lsls	r2, r3
     7f0:	79fb      	ldrb	r3, [r7, #7]
     7f2:	4619      	mov	r1, r3
     7f4:	4819      	ldr	r0, [pc, #100]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     7f6:	4b1b      	ldr	r3, [pc, #108]	; (864 <_gpio_set_pin_pull_mode+0xa8>)
     7f8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7fa:	79ba      	ldrb	r2, [r7, #6]
     7fc:	79fb      	ldrb	r3, [r7, #7]
     7fe:	4619      	mov	r1, r3
     800:	4816      	ldr	r0, [pc, #88]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     802:	4b19      	ldr	r3, [pc, #100]	; (868 <_gpio_set_pin_pull_mode+0xac>)
     804:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     806:	79bb      	ldrb	r3, [r7, #6]
     808:	2201      	movs	r2, #1
     80a:	409a      	lsls	r2, r3
     80c:	79fb      	ldrb	r3, [r7, #7]
     80e:	4619      	mov	r1, r3
     810:	4812      	ldr	r0, [pc, #72]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     812:	4b16      	ldr	r3, [pc, #88]	; (86c <_gpio_set_pin_pull_mode+0xb0>)
     814:	4798      	blx	r3
		break;
     816:	e01c      	b.n	852 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     818:	79bb      	ldrb	r3, [r7, #6]
     81a:	2201      	movs	r2, #1
     81c:	409a      	lsls	r2, r3
     81e:	79fb      	ldrb	r3, [r7, #7]
     820:	4619      	mov	r1, r3
     822:	480e      	ldr	r0, [pc, #56]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     824:	4b0f      	ldr	r3, [pc, #60]	; (864 <_gpio_set_pin_pull_mode+0xa8>)
     826:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     828:	79ba      	ldrb	r2, [r7, #6]
     82a:	79fb      	ldrb	r3, [r7, #7]
     82c:	4619      	mov	r1, r3
     82e:	480b      	ldr	r0, [pc, #44]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     830:	4b0d      	ldr	r3, [pc, #52]	; (868 <_gpio_set_pin_pull_mode+0xac>)
     832:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     834:	79bb      	ldrb	r3, [r7, #6]
     836:	2201      	movs	r2, #1
     838:	409a      	lsls	r2, r3
     83a:	79fb      	ldrb	r3, [r7, #7]
     83c:	4619      	mov	r1, r3
     83e:	4807      	ldr	r0, [pc, #28]	; (85c <_gpio_set_pin_pull_mode+0xa0>)
     840:	4b0b      	ldr	r3, [pc, #44]	; (870 <_gpio_set_pin_pull_mode+0xb4>)
     842:	4798      	blx	r3
		break;
     844:	e005      	b.n	852 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     846:	2289      	movs	r2, #137	; 0x89
     848:	490a      	ldr	r1, [pc, #40]	; (874 <_gpio_set_pin_pull_mode+0xb8>)
     84a:	2000      	movs	r0, #0
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <_gpio_set_pin_pull_mode+0xbc>)
     84e:	4798      	blx	r3
		break;
     850:	bf00      	nop
	}
}
     852:	bf00      	nop
     854:	3708      	adds	r7, #8
     856:	46bd      	mov	sp, r7
     858:	bd80      	pop	{r7, pc}
     85a:	bf00      	nop
     85c:	41008000 	.word	0x41008000
     860:	00000625 	.word	0x00000625
     864:	00000451 	.word	0x00000451
     868:	000005e1 	.word	0x000005e1
     86c:	00000479 	.word	0x00000479
     870:	000004a1 	.word	0x000004a1
     874:	0000308c 	.word	0x0000308c
     878:	0000133d 	.word	0x0000133d

0000087c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     87c:	b590      	push	{r4, r7, lr}
     87e:	b085      	sub	sp, #20
     880:	af00      	add	r7, sp, #0
     882:	6078      	str	r0, [r7, #4]
     884:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     886:	687b      	ldr	r3, [r7, #4]
     888:	095b      	lsrs	r3, r3, #5
     88a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	b2db      	uxtb	r3, r3
     890:	f003 031f 	and.w	r3, r3, #31
     894:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     896:	683b      	ldr	r3, [r7, #0]
     898:	f1b3 3fff 	cmp.w	r3, #4294967295
     89c:	d106      	bne.n	8ac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     89e:	7bba      	ldrb	r2, [r7, #14]
     8a0:	7bf9      	ldrb	r1, [r7, #15]
     8a2:	2300      	movs	r3, #0
     8a4:	4812      	ldr	r0, [pc, #72]	; (8f0 <_gpio_set_pin_function+0x74>)
     8a6:	4c13      	ldr	r4, [pc, #76]	; (8f4 <_gpio_set_pin_function+0x78>)
     8a8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     8aa:	e01d      	b.n	8e8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     8ac:	7bba      	ldrb	r2, [r7, #14]
     8ae:	7bf9      	ldrb	r1, [r7, #15]
     8b0:	2301      	movs	r3, #1
     8b2:	480f      	ldr	r0, [pc, #60]	; (8f0 <_gpio_set_pin_function+0x74>)
     8b4:	4c0f      	ldr	r4, [pc, #60]	; (8f4 <_gpio_set_pin_function+0x78>)
     8b6:	47a0      	blx	r4
		if (pin & 1) {
     8b8:	7bbb      	ldrb	r3, [r7, #14]
     8ba:	f003 0301 	and.w	r3, r3, #1
     8be:	2b00      	cmp	r3, #0
     8c0:	d009      	beq.n	8d6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     8c2:	7bbb      	ldrb	r3, [r7, #14]
     8c4:	085b      	lsrs	r3, r3, #1
     8c6:	b2da      	uxtb	r2, r3
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	b2db      	uxtb	r3, r3
     8cc:	7bf9      	ldrb	r1, [r7, #15]
     8ce:	4808      	ldr	r0, [pc, #32]	; (8f0 <_gpio_set_pin_function+0x74>)
     8d0:	4c09      	ldr	r4, [pc, #36]	; (8f8 <_gpio_set_pin_function+0x7c>)
     8d2:	47a0      	blx	r4
}
     8d4:	e008      	b.n	8e8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     8d6:	7bbb      	ldrb	r3, [r7, #14]
     8d8:	085b      	lsrs	r3, r3, #1
     8da:	b2da      	uxtb	r2, r3
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	b2db      	uxtb	r3, r3
     8e0:	7bf9      	ldrb	r1, [r7, #15]
     8e2:	4803      	ldr	r0, [pc, #12]	; (8f0 <_gpio_set_pin_function+0x74>)
     8e4:	4c05      	ldr	r4, [pc, #20]	; (8fc <_gpio_set_pin_function+0x80>)
     8e6:	47a0      	blx	r4
}
     8e8:	bf00      	nop
     8ea:	3714      	adds	r7, #20
     8ec:	46bd      	mov	sp, r7
     8ee:	bd90      	pop	{r4, r7, pc}
     8f0:	41008000 	.word	0x41008000
     8f4:	00000587 	.word	0x00000587
     8f8:	00000529 	.word	0x00000529
     8fc:	000004c9 	.word	0x000004c9

00000900 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     900:	b580      	push	{r7, lr}
     902:	b082      	sub	sp, #8
     904:	af00      	add	r7, sp, #0
     906:	4603      	mov	r3, r0
     908:	460a      	mov	r2, r1
     90a:	71fb      	strb	r3, [r7, #7]
     90c:	4613      	mov	r3, r2
     90e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     910:	79fb      	ldrb	r3, [r7, #7]
     912:	095b      	lsrs	r3, r3, #5
     914:	b2d8      	uxtb	r0, r3
     916:	79fb      	ldrb	r3, [r7, #7]
     918:	f003 031f 	and.w	r3, r3, #31
     91c:	b2db      	uxtb	r3, r3
     91e:	79ba      	ldrb	r2, [r7, #6]
     920:	4619      	mov	r1, r3
     922:	4b03      	ldr	r3, [pc, #12]	; (930 <gpio_set_pin_pull_mode+0x30>)
     924:	4798      	blx	r3
}
     926:	bf00      	nop
     928:	3708      	adds	r7, #8
     92a:	46bd      	mov	sp, r7
     92c:	bd80      	pop	{r7, pc}
     92e:	bf00      	nop
     930:	000007bd 	.word	0x000007bd

00000934 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     934:	b580      	push	{r7, lr}
     936:	b082      	sub	sp, #8
     938:	af00      	add	r7, sp, #0
     93a:	6078      	str	r0, [r7, #4]
     93c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     93e:	6839      	ldr	r1, [r7, #0]
     940:	6878      	ldr	r0, [r7, #4]
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <gpio_set_pin_function+0x1c>)
     944:	4798      	blx	r3
}
     946:	bf00      	nop
     948:	3708      	adds	r7, #8
     94a:	46bd      	mov	sp, r7
     94c:	bd80      	pop	{r7, pc}
     94e:	bf00      	nop
     950:	0000087d 	.word	0x0000087d

00000954 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     954:	b580      	push	{r7, lr}
     956:	b082      	sub	sp, #8
     958:	af00      	add	r7, sp, #0
     95a:	4603      	mov	r3, r0
     95c:	460a      	mov	r2, r1
     95e:	71fb      	strb	r3, [r7, #7]
     960:	4613      	mov	r3, r2
     962:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     964:	79fb      	ldrb	r3, [r7, #7]
     966:	095b      	lsrs	r3, r3, #5
     968:	b2d8      	uxtb	r0, r3
     96a:	79fb      	ldrb	r3, [r7, #7]
     96c:	f003 031f 	and.w	r3, r3, #31
     970:	2201      	movs	r2, #1
     972:	fa02 f303 	lsl.w	r3, r2, r3
     976:	79ba      	ldrb	r2, [r7, #6]
     978:	4619      	mov	r1, r3
     97a:	4b03      	ldr	r3, [pc, #12]	; (988 <gpio_set_pin_direction+0x34>)
     97c:	4798      	blx	r3
}
     97e:	bf00      	nop
     980:	3708      	adds	r7, #8
     982:	46bd      	mov	sp, r7
     984:	bd80      	pop	{r7, pc}
     986:	bf00      	nop
     988:	00000691 	.word	0x00000691

0000098c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     98c:	b580      	push	{r7, lr}
     98e:	b082      	sub	sp, #8
     990:	af00      	add	r7, sp, #0
     992:	4603      	mov	r3, r0
     994:	460a      	mov	r2, r1
     996:	71fb      	strb	r3, [r7, #7]
     998:	4613      	mov	r3, r2
     99a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     99c:	79fb      	ldrb	r3, [r7, #7]
     99e:	095b      	lsrs	r3, r3, #5
     9a0:	b2d8      	uxtb	r0, r3
     9a2:	79fb      	ldrb	r3, [r7, #7]
     9a4:	f003 031f 	and.w	r3, r3, #31
     9a8:	2201      	movs	r2, #1
     9aa:	fa02 f303 	lsl.w	r3, r2, r3
     9ae:	79ba      	ldrb	r2, [r7, #6]
     9b0:	4619      	mov	r1, r3
     9b2:	4b03      	ldr	r3, [pc, #12]	; (9c0 <gpio_set_pin_level+0x34>)
     9b4:	4798      	blx	r3
}
     9b6:	bf00      	nop
     9b8:	3708      	adds	r7, #8
     9ba:	46bd      	mov	sp, r7
     9bc:	bd80      	pop	{r7, pc}
     9be:	bf00      	nop
     9c0:	00000779 	.word	0x00000779

000009c4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0
	_init_chip();
     9c8:	4b01      	ldr	r3, [pc, #4]	; (9d0 <init_mcu+0xc>)
     9ca:	4798      	blx	r3
}
     9cc:	bf00      	nop
     9ce:	bd80      	pop	{r7, pc}
     9d0:	00001611 	.word	0x00001611

000009d4 <EDBG_UART_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void EDBG_UART_CLOCK_init()
{
     9d4:	b580      	push	{r7, lr}
     9d6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9d8:	2240      	movs	r2, #64	; 0x40
     9da:	2117      	movs	r1, #23
     9dc:	4806      	ldr	r0, [pc, #24]	; (9f8 <EDBG_UART_CLOCK_init+0x24>)
     9de:	4b07      	ldr	r3, [pc, #28]	; (9fc <EDBG_UART_CLOCK_init+0x28>)
     9e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9e2:	2243      	movs	r2, #67	; 0x43
     9e4:	2103      	movs	r1, #3
     9e6:	4804      	ldr	r0, [pc, #16]	; (9f8 <EDBG_UART_CLOCK_init+0x24>)
     9e8:	4b04      	ldr	r3, [pc, #16]	; (9fc <EDBG_UART_CLOCK_init+0x28>)
     9ea:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <EDBG_UART_CLOCK_init+0x2c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <EDBG_UART_CLOCK_init+0x30>)
     9f0:	4798      	blx	r3
}
     9f2:	bf00      	nop
     9f4:	bd80      	pop	{r7, pc}
     9f6:	bf00      	nop
     9f8:	40001c00 	.word	0x40001c00
     9fc:	00000383 	.word	0x00000383
     a00:	40000800 	.word	0x40000800
     a04:	000003c9 	.word	0x000003c9

00000a08 <EDBG_UART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void EDBG_UART_PORT_init()
{
     a08:	b580      	push	{r7, lr}
     a0a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     a0c:	4904      	ldr	r1, [pc, #16]	; (a20 <EDBG_UART_PORT_init+0x18>)
     a0e:	2039      	movs	r0, #57	; 0x39
     a10:	4b04      	ldr	r3, [pc, #16]	; (a24 <EDBG_UART_PORT_init+0x1c>)
     a12:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     a14:	4904      	ldr	r1, [pc, #16]	; (a28 <EDBG_UART_PORT_init+0x20>)
     a16:	2038      	movs	r0, #56	; 0x38
     a18:	4b02      	ldr	r3, [pc, #8]	; (a24 <EDBG_UART_PORT_init+0x1c>)
     a1a:	4798      	blx	r3
}
     a1c:	bf00      	nop
     a1e:	bd80      	pop	{r7, pc}
     a20:	00390003 	.word	0x00390003
     a24:	00000935 	.word	0x00000935
     a28:	00380003 	.word	0x00380003

00000a2c <EDBG_UART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_UART_init(void)
{
     a2c:	b590      	push	{r4, r7, lr}
     a2e:	b083      	sub	sp, #12
     a30:	af02      	add	r7, sp, #8
	EDBG_UART_CLOCK_init();
     a32:	4b08      	ldr	r3, [pc, #32]	; (a54 <EDBG_UART_init+0x28>)
     a34:	4798      	blx	r3
	usart_async_init(&EDBG_UART, SERCOM2, EDBG_UART_buffer, EDBG_UART_BUFFER_SIZE, (void *)NULL);
     a36:	2300      	movs	r3, #0
     a38:	9300      	str	r3, [sp, #0]
     a3a:	2310      	movs	r3, #16
     a3c:	4a06      	ldr	r2, [pc, #24]	; (a58 <EDBG_UART_init+0x2c>)
     a3e:	4907      	ldr	r1, [pc, #28]	; (a5c <EDBG_UART_init+0x30>)
     a40:	4807      	ldr	r0, [pc, #28]	; (a60 <EDBG_UART_init+0x34>)
     a42:	4c08      	ldr	r4, [pc, #32]	; (a64 <EDBG_UART_init+0x38>)
     a44:	47a0      	blx	r4
	EDBG_UART_PORT_init();
     a46:	4b08      	ldr	r3, [pc, #32]	; (a68 <EDBG_UART_init+0x3c>)
     a48:	4798      	blx	r3
}
     a4a:	bf00      	nop
     a4c:	3704      	adds	r7, #4
     a4e:	46bd      	mov	sp, r7
     a50:	bd90      	pop	{r4, r7, pc}
     a52:	bf00      	nop
     a54:	000009d5 	.word	0x000009d5
     a58:	20000064 	.word	0x20000064
     a5c:	41012000 	.word	0x41012000
     a60:	200000c0 	.word	0x200000c0
     a64:	00000f01 	.word	0x00000f01
     a68:	00000a09 	.word	0x00000a09

00000a6c <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     a6c:	b580      	push	{r7, lr}
     a6e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     a70:	4808      	ldr	r0, [pc, #32]	; (a94 <TIMER_1_init+0x28>)
     a72:	4b09      	ldr	r3, [pc, #36]	; (a98 <TIMER_1_init+0x2c>)
     a74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a76:	2240      	movs	r2, #64	; 0x40
     a78:	2109      	movs	r1, #9
     a7a:	4808      	ldr	r0, [pc, #32]	; (a9c <TIMER_1_init+0x30>)
     a7c:	4b08      	ldr	r3, [pc, #32]	; (aa0 <TIMER_1_init+0x34>)
     a7e:	4798      	blx	r3

	timer_init(&TIMER_1, TC0, _tc_get_timer());
     a80:	4b08      	ldr	r3, [pc, #32]	; (aa4 <TIMER_1_init+0x38>)
     a82:	4798      	blx	r3
     a84:	4603      	mov	r3, r0
     a86:	461a      	mov	r2, r3
     a88:	4907      	ldr	r1, [pc, #28]	; (aa8 <TIMER_1_init+0x3c>)
     a8a:	4808      	ldr	r0, [pc, #32]	; (aac <TIMER_1_init+0x40>)
     a8c:	4b08      	ldr	r3, [pc, #32]	; (ab0 <TIMER_1_init+0x44>)
     a8e:	4798      	blx	r3
}
     a90:	bf00      	nop
     a92:	bd80      	pop	{r7, pc}
     a94:	40000800 	.word	0x40000800
     a98:	000003a9 	.word	0x000003a9
     a9c:	40001c00 	.word	0x40001c00
     aa0:	00000383 	.word	0x00000383
     aa4:	00002b7d 	.word	0x00002b7d
     aa8:	40003800 	.word	0x40003800
     aac:	20000110 	.word	0x20000110
     ab0:	00000d35 	.word	0x00000d35

00000ab4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     ab4:	b580      	push	{r7, lr}
     ab6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
     ab8:	4808      	ldr	r0, [pc, #32]	; (adc <TIMER_0_init+0x28>)
     aba:	4b09      	ldr	r3, [pc, #36]	; (ae0 <TIMER_0_init+0x2c>)
     abc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     abe:	2240      	movs	r2, #64	; 0x40
     ac0:	211a      	movs	r1, #26
     ac2:	4808      	ldr	r0, [pc, #32]	; (ae4 <TIMER_0_init+0x30>)
     ac4:	4b08      	ldr	r3, [pc, #32]	; (ae8 <TIMER_0_init+0x34>)
     ac6:	4798      	blx	r3

	timer_init(&TIMER_0, TC2, _tc_get_timer());
     ac8:	4b08      	ldr	r3, [pc, #32]	; (aec <TIMER_0_init+0x38>)
     aca:	4798      	blx	r3
     acc:	4603      	mov	r3, r0
     ace:	461a      	mov	r2, r3
     ad0:	4907      	ldr	r1, [pc, #28]	; (af0 <TIMER_0_init+0x3c>)
     ad2:	4808      	ldr	r0, [pc, #32]	; (af4 <TIMER_0_init+0x40>)
     ad4:	4b08      	ldr	r3, [pc, #32]	; (af8 <TIMER_0_init+0x44>)
     ad6:	4798      	blx	r3
}
     ad8:	bf00      	nop
     ada:	bd80      	pop	{r7, pc}
     adc:	40000800 	.word	0x40000800
     ae0:	00000409 	.word	0x00000409
     ae4:	40001c00 	.word	0x40001c00
     ae8:	00000383 	.word	0x00000383
     aec:	00002b7d 	.word	0x00002b7d
     af0:	4101a000 	.word	0x4101a000
     af4:	2000012c 	.word	0x2000012c
     af8:	00000d35 	.word	0x00000d35

00000afc <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     afc:	b580      	push	{r7, lr}
     afe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     b00:	4902      	ldr	r1, [pc, #8]	; (b0c <PWM_0_PORT_init+0x10>)
     b02:	204a      	movs	r0, #74	; 0x4a
     b04:	4b02      	ldr	r3, [pc, #8]	; (b10 <PWM_0_PORT_init+0x14>)
     b06:	4798      	blx	r3
}
     b08:	bf00      	nop
     b0a:	bd80      	pop	{r7, pc}
     b0c:	004a0005 	.word	0x004a0005
     b10:	00000935 	.word	0x00000935

00000b14 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     b14:	b580      	push	{r7, lr}
     b16:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <PWM_0_CLOCK_init+0x18>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <PWM_0_CLOCK_init+0x1c>)
     b1c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b1e:	2240      	movs	r2, #64	; 0x40
     b20:	2119      	movs	r1, #25
     b22:	4804      	ldr	r0, [pc, #16]	; (b34 <PWM_0_CLOCK_init+0x20>)
     b24:	4b04      	ldr	r3, [pc, #16]	; (b38 <PWM_0_CLOCK_init+0x24>)
     b26:	4798      	blx	r3
}
     b28:	bf00      	nop
     b2a:	bd80      	pop	{r7, pc}
     b2c:	40000800 	.word	0x40000800
     b30:	000003e9 	.word	0x000003e9
     b34:	40001c00 	.word	0x40001c00
     b38:	00000383 	.word	0x00000383

00000b3c <system_init>:

void system_init(void)
{
     b3c:	b580      	push	{r7, lr}
     b3e:	af00      	add	r7, sp, #0
	init_mcu();
     b40:	4b3b      	ldr	r3, [pc, #236]	; (c30 <system_init+0xf4>)
     b42:	4798      	blx	r3

	// GPIO on PB01

	gpio_set_pin_level(SPI_CS,
     b44:	2101      	movs	r1, #1
     b46:	2021      	movs	r0, #33	; 0x21
     b48:	4b3a      	ldr	r3, [pc, #232]	; (c34 <system_init+0xf8>)
     b4a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(SPI_CS, GPIO_DIRECTION_OUT);
     b4c:	2102      	movs	r1, #2
     b4e:	2021      	movs	r0, #33	; 0x21
     b50:	4b39      	ldr	r3, [pc, #228]	; (c38 <system_init+0xfc>)
     b52:	4798      	blx	r3

	gpio_set_pin_function(SPI_CS, GPIO_PIN_FUNCTION_OFF);
     b54:	f04f 31ff 	mov.w	r1, #4294967295
     b58:	2021      	movs	r0, #33	; 0x21
     b5a:	4b38      	ldr	r3, [pc, #224]	; (c3c <system_init+0x100>)
     b5c:	4798      	blx	r3

	// GPIO on PB04

	gpio_set_pin_level(PIN1,
     b5e:	2100      	movs	r1, #0
     b60:	2024      	movs	r0, #36	; 0x24
     b62:	4b34      	ldr	r3, [pc, #208]	; (c34 <system_init+0xf8>)
     b64:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PIN1, GPIO_DIRECTION_OUT);
     b66:	2102      	movs	r1, #2
     b68:	2024      	movs	r0, #36	; 0x24
     b6a:	4b33      	ldr	r3, [pc, #204]	; (c38 <system_init+0xfc>)
     b6c:	4798      	blx	r3

	gpio_set_pin_function(PIN1, GPIO_PIN_FUNCTION_OFF);
     b6e:	f04f 31ff 	mov.w	r1, #4294967295
     b72:	2024      	movs	r0, #36	; 0x24
     b74:	4b31      	ldr	r3, [pc, #196]	; (c3c <system_init+0x100>)
     b76:	4798      	blx	r3

	// GPIO on PB05

	gpio_set_pin_level(PIN2,
     b78:	2100      	movs	r1, #0
     b7a:	2025      	movs	r0, #37	; 0x25
     b7c:	4b2d      	ldr	r3, [pc, #180]	; (c34 <system_init+0xf8>)
     b7e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PIN2, GPIO_DIRECTION_OUT);
     b80:	2102      	movs	r1, #2
     b82:	2025      	movs	r0, #37	; 0x25
     b84:	4b2c      	ldr	r3, [pc, #176]	; (c38 <system_init+0xfc>)
     b86:	4798      	blx	r3

	gpio_set_pin_function(PIN2, GPIO_PIN_FUNCTION_OFF);
     b88:	f04f 31ff 	mov.w	r1, #4294967295
     b8c:	2025      	movs	r0, #37	; 0x25
     b8e:	4b2b      	ldr	r3, [pc, #172]	; (c3c <system_init+0x100>)
     b90:	4798      	blx	r3

	// GPIO on PB06

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT2, GPIO_DIRECTION_IN);
     b92:	2101      	movs	r1, #1
     b94:	2026      	movs	r0, #38	; 0x26
     b96:	4b28      	ldr	r3, [pc, #160]	; (c38 <system_init+0xfc>)
     b98:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT2,
     b9a:	2101      	movs	r1, #1
     b9c:	2026      	movs	r0, #38	; 0x26
     b9e:	4b28      	ldr	r3, [pc, #160]	; (c40 <system_init+0x104>)
     ba0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT2, GPIO_PIN_FUNCTION_OFF);
     ba2:	f04f 31ff 	mov.w	r1, #4294967295
     ba6:	2026      	movs	r0, #38	; 0x26
     ba8:	4b24      	ldr	r3, [pc, #144]	; (c3c <system_init+0x100>)
     baa:	4798      	blx	r3

	// GPIO on PB14

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT3, GPIO_DIRECTION_IN);
     bac:	2101      	movs	r1, #1
     bae:	202e      	movs	r0, #46	; 0x2e
     bb0:	4b21      	ldr	r3, [pc, #132]	; (c38 <system_init+0xfc>)
     bb2:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT3,
     bb4:	2101      	movs	r1, #1
     bb6:	202e      	movs	r0, #46	; 0x2e
     bb8:	4b21      	ldr	r3, [pc, #132]	; (c40 <system_init+0x104>)
     bba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT3, GPIO_PIN_FUNCTION_OFF);
     bbc:	f04f 31ff 	mov.w	r1, #4294967295
     bc0:	202e      	movs	r0, #46	; 0x2e
     bc2:	4b1e      	ldr	r3, [pc, #120]	; (c3c <system_init+0x100>)
     bc4:	4798      	blx	r3

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT4, GPIO_DIRECTION_IN);
     bc6:	2101      	movs	r1, #1
     bc8:	202f      	movs	r0, #47	; 0x2f
     bca:	4b1b      	ldr	r3, [pc, #108]	; (c38 <system_init+0xfc>)
     bcc:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT4,
     bce:	2101      	movs	r1, #1
     bd0:	202f      	movs	r0, #47	; 0x2f
     bd2:	4b1b      	ldr	r3, [pc, #108]	; (c40 <system_init+0x104>)
     bd4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT4, GPIO_PIN_FUNCTION_OFF);
     bd6:	f04f 31ff 	mov.w	r1, #4294967295
     bda:	202f      	movs	r0, #47	; 0x2f
     bdc:	4b17      	ldr	r3, [pc, #92]	; (c3c <system_init+0x100>)
     bde:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     be0:	2101      	movs	r1, #1
     be2:	203f      	movs	r0, #63	; 0x3f
     be4:	4b14      	ldr	r3, [pc, #80]	; (c38 <system_init+0xfc>)
     be6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     be8:	2101      	movs	r1, #1
     bea:	203f      	movs	r0, #63	; 0x3f
     bec:	4b14      	ldr	r3, [pc, #80]	; (c40 <system_init+0x104>)
     bee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     bf0:	f04f 31ff 	mov.w	r1, #4294967295
     bf4:	203f      	movs	r0, #63	; 0x3f
     bf6:	4b11      	ldr	r3, [pc, #68]	; (c3c <system_init+0x100>)
     bf8:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     bfa:	2100      	movs	r1, #0
     bfc:	2052      	movs	r0, #82	; 0x52
     bfe:	4b0d      	ldr	r3, [pc, #52]	; (c34 <system_init+0xf8>)
     c00:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     c02:	2102      	movs	r1, #2
     c04:	2052      	movs	r0, #82	; 0x52
     c06:	4b0c      	ldr	r3, [pc, #48]	; (c38 <system_init+0xfc>)
     c08:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     c0a:	f04f 31ff 	mov.w	r1, #4294967295
     c0e:	2052      	movs	r0, #82	; 0x52
     c10:	4b0a      	ldr	r3, [pc, #40]	; (c3c <system_init+0x100>)
     c12:	4798      	blx	r3

	EDBG_UART_init();
     c14:	4b0b      	ldr	r3, [pc, #44]	; (c44 <system_init+0x108>)
     c16:	4798      	blx	r3

	TIMER_1_init();
     c18:	4b0b      	ldr	r3, [pc, #44]	; (c48 <system_init+0x10c>)
     c1a:	4798      	blx	r3
	TIMER_0_init();
     c1c:	4b0b      	ldr	r3, [pc, #44]	; (c4c <system_init+0x110>)
     c1e:	4798      	blx	r3
	PWM_0_CLOCK_init();
     c20:	4b0b      	ldr	r3, [pc, #44]	; (c50 <system_init+0x114>)
     c22:	4798      	blx	r3

	PWM_0_PORT_init();
     c24:	4b0b      	ldr	r3, [pc, #44]	; (c54 <system_init+0x118>)
     c26:	4798      	blx	r3

	PWM_0_init();
     c28:	4b0b      	ldr	r3, [pc, #44]	; (c58 <system_init+0x11c>)
     c2a:	4798      	blx	r3
}
     c2c:	bf00      	nop
     c2e:	bd80      	pop	{r7, pc}
     c30:	000009c5 	.word	0x000009c5
     c34:	0000098d 	.word	0x0000098d
     c38:	00000955 	.word	0x00000955
     c3c:	00000935 	.word	0x00000935
     c40:	00000901 	.word	0x00000901
     c44:	00000a2d 	.word	0x00000a2d
     c48:	00000a6d 	.word	0x00000a6d
     c4c:	00000ab5 	.word	0x00000ab5
     c50:	00000b15 	.word	0x00000b15
     c54:	00000afd 	.word	0x00000afd
     c58:	00002551 	.word	0x00002551

00000c5c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     c5c:	b480      	push	{r7}
     c5e:	b085      	sub	sp, #20
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c64:	f3ef 8310 	mrs	r3, PRIMASK
     c68:	60fb      	str	r3, [r7, #12]
  return(result);
     c6a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     c6c:	687b      	ldr	r3, [r7, #4]
     c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c70:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     c72:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     c76:	bf00      	nop
     c78:	3714      	adds	r7, #20
     c7a:	46bd      	mov	sp, r7
     c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c80:	4770      	bx	lr

00000c82 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     c82:	b480      	push	{r7}
     c84:	b085      	sub	sp, #20
     c86:	af00      	add	r7, sp, #0
     c88:	6078      	str	r0, [r7, #4]
     c8a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     c94:	68fb      	ldr	r3, [r7, #12]
     c96:	f383 8810 	msr	PRIMASK, r3
}
     c9a:	bf00      	nop
     c9c:	3714      	adds	r7, #20
     c9e:	46bd      	mov	sp, r7
     ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca4:	4770      	bx	lr
	...

00000ca8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b084      	sub	sp, #16
     cac:	af00      	add	r7, sp, #0
     cae:	60f8      	str	r0, [r7, #12]
     cb0:	60b9      	str	r1, [r7, #8]
     cb2:	4613      	mov	r3, r2
     cb4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	2b00      	cmp	r3, #0
     cba:	d004      	beq.n	cc6 <io_read+0x1e>
     cbc:	68bb      	ldr	r3, [r7, #8]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d001      	beq.n	cc6 <io_read+0x1e>
     cc2:	2301      	movs	r3, #1
     cc4:	e000      	b.n	cc8 <io_read+0x20>
     cc6:	2300      	movs	r3, #0
     cc8:	f003 0301 	and.w	r3, r3, #1
     ccc:	b2db      	uxtb	r3, r3
     cce:	223d      	movs	r2, #61	; 0x3d
     cd0:	4907      	ldr	r1, [pc, #28]	; (cf0 <io_read+0x48>)
     cd2:	4618      	mov	r0, r3
     cd4:	4b07      	ldr	r3, [pc, #28]	; (cf4 <io_read+0x4c>)
     cd6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     cd8:	68fb      	ldr	r3, [r7, #12]
     cda:	685b      	ldr	r3, [r3, #4]
     cdc:	88fa      	ldrh	r2, [r7, #6]
     cde:	68b9      	ldr	r1, [r7, #8]
     ce0:	68f8      	ldr	r0, [r7, #12]
     ce2:	4798      	blx	r3
     ce4:	4603      	mov	r3, r0
}
     ce6:	4618      	mov	r0, r3
     ce8:	3710      	adds	r7, #16
     cea:	46bd      	mov	sp, r7
     cec:	bd80      	pop	{r7, pc}
     cee:	bf00      	nop
     cf0:	000030a8 	.word	0x000030a8
     cf4:	0000133d 	.word	0x0000133d

00000cf8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     cf8:	b480      	push	{r7}
     cfa:	b083      	sub	sp, #12
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	681b      	ldr	r3, [r3, #0]
}
     d04:	4618      	mov	r0, r3
     d06:	370c      	adds	r7, #12
     d08:	46bd      	mov	sp, r7
     d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     d0e:	4770      	bx	lr

00000d10 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     d10:	b480      	push	{r7}
     d12:	b083      	sub	sp, #12
     d14:	af00      	add	r7, sp, #0
     d16:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d002      	beq.n	d24 <list_get_next_element+0x14>
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	e000      	b.n	d26 <list_get_next_element+0x16>
     d24:	2300      	movs	r3, #0
}
     d26:	4618      	mov	r0, r3
     d28:	370c      	adds	r7, #12
     d2a:	46bd      	mov	sp, r7
     d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d30:	4770      	bx	lr
	...

00000d34 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     d34:	b580      	push	{r7, lr}
     d36:	b084      	sub	sp, #16
     d38:	af00      	add	r7, sp, #0
     d3a:	60f8      	str	r0, [r7, #12]
     d3c:	60b9      	str	r1, [r7, #8]
     d3e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     d40:	68fb      	ldr	r3, [r7, #12]
     d42:	2b00      	cmp	r3, #0
     d44:	d004      	beq.n	d50 <timer_init+0x1c>
     d46:	68bb      	ldr	r3, [r7, #8]
     d48:	2b00      	cmp	r3, #0
     d4a:	d001      	beq.n	d50 <timer_init+0x1c>
     d4c:	2301      	movs	r3, #1
     d4e:	e000      	b.n	d52 <timer_init+0x1e>
     d50:	2300      	movs	r3, #0
     d52:	f003 0301 	and.w	r3, r3, #1
     d56:	b2db      	uxtb	r3, r3
     d58:	223b      	movs	r2, #59	; 0x3b
     d5a:	490a      	ldr	r1, [pc, #40]	; (d84 <timer_init+0x50>)
     d5c:	4618      	mov	r0, r3
     d5e:	4b0a      	ldr	r3, [pc, #40]	; (d88 <timer_init+0x54>)
     d60:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	68b9      	ldr	r1, [r7, #8]
     d66:	4618      	mov	r0, r3
     d68:	4b08      	ldr	r3, [pc, #32]	; (d8c <timer_init+0x58>)
     d6a:	4798      	blx	r3
	descr->time                           = 0;
     d6c:	68fb      	ldr	r3, [r7, #12]
     d6e:	2200      	movs	r2, #0
     d70:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	4a06      	ldr	r2, [pc, #24]	; (d90 <timer_init+0x5c>)
     d76:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     d78:	2300      	movs	r3, #0
}
     d7a:	4618      	mov	r0, r3
     d7c:	3710      	adds	r7, #16
     d7e:	46bd      	mov	sp, r7
     d80:	bd80      	pop	{r7, pc}
     d82:	bf00      	nop
     d84:	000030bc 	.word	0x000030bc
     d88:	0000133d 	.word	0x0000133d
     d8c:	000028cd 	.word	0x000028cd
     d90:	00000e45 	.word	0x00000e45

00000d94 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     d94:	b580      	push	{r7, lr}
     d96:	b088      	sub	sp, #32
     d98:	af00      	add	r7, sp, #0
     d9a:	60f8      	str	r0, [r7, #12]
     d9c:	60b9      	str	r1, [r7, #8]
     d9e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     da0:	2300      	movs	r3, #0
     da2:	61bb      	str	r3, [r7, #24]
     da4:	68f8      	ldr	r0, [r7, #12]
     da6:	4b23      	ldr	r3, [pc, #140]	; (e34 <timer_add_timer_task+0xa0>)
     da8:	4798      	blx	r3
     daa:	6138      	str	r0, [r7, #16]

	if (!head) {
     dac:	693b      	ldr	r3, [r7, #16]
     dae:	2b00      	cmp	r3, #0
     db0:	d104      	bne.n	dbc <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     db2:	68b9      	ldr	r1, [r7, #8]
     db4:	68f8      	ldr	r0, [r7, #12]
     db6:	4b20      	ldr	r3, [pc, #128]	; (e38 <timer_add_timer_task+0xa4>)
     db8:	4798      	blx	r3
		return;
     dba:	e037      	b.n	e2c <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     dbc:	693b      	ldr	r3, [r7, #16]
     dbe:	61fb      	str	r3, [r7, #28]
     dc0:	e022      	b.n	e08 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
     dc2:	69fb      	ldr	r3, [r7, #28]
     dc4:	685a      	ldr	r2, [r3, #4]
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	429a      	cmp	r2, r3
     dca:	d808      	bhi.n	dde <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
     dcc:	69fb      	ldr	r3, [r7, #28]
     dce:	689a      	ldr	r2, [r3, #8]
     dd0:	69fb      	ldr	r3, [r7, #28]
     dd2:	6859      	ldr	r1, [r3, #4]
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	1acb      	subs	r3, r1, r3
     dd8:	4413      	add	r3, r2
     dda:	617b      	str	r3, [r7, #20]
     ddc:	e009      	b.n	df2 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     dde:	69fb      	ldr	r3, [r7, #28]
     de0:	689a      	ldr	r2, [r3, #8]
     de2:	69fb      	ldr	r3, [r7, #28]
     de4:	685b      	ldr	r3, [r3, #4]
     de6:	441a      	add	r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	425b      	negs	r3, r3
     dec:	4413      	add	r3, r2
     dee:	3301      	adds	r3, #1
     df0:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
     df2:	68bb      	ldr	r3, [r7, #8]
     df4:	689a      	ldr	r2, [r3, #8]
     df6:	697b      	ldr	r3, [r7, #20]
     df8:	429a      	cmp	r2, r3
     dfa:	d909      	bls.n	e10 <timer_add_timer_task+0x7c>
			break;
		prev = it;
     dfc:	69fb      	ldr	r3, [r7, #28]
     dfe:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e00:	69f8      	ldr	r0, [r7, #28]
     e02:	4b0e      	ldr	r3, [pc, #56]	; (e3c <timer_add_timer_task+0xa8>)
     e04:	4798      	blx	r3
     e06:	61f8      	str	r0, [r7, #28]
     e08:	69fb      	ldr	r3, [r7, #28]
     e0a:	2b00      	cmp	r3, #0
     e0c:	d1d9      	bne.n	dc2 <timer_add_timer_task+0x2e>
     e0e:	e000      	b.n	e12 <timer_add_timer_task+0x7e>
			break;
     e10:	bf00      	nop
	}

	if (it == head) {
     e12:	69fa      	ldr	r2, [r7, #28]
     e14:	693b      	ldr	r3, [r7, #16]
     e16:	429a      	cmp	r2, r3
     e18:	d104      	bne.n	e24 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
     e1a:	68b9      	ldr	r1, [r7, #8]
     e1c:	68f8      	ldr	r0, [r7, #12]
     e1e:	4b06      	ldr	r3, [pc, #24]	; (e38 <timer_add_timer_task+0xa4>)
     e20:	4798      	blx	r3
     e22:	e003      	b.n	e2c <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
     e24:	68b9      	ldr	r1, [r7, #8]
     e26:	69b8      	ldr	r0, [r7, #24]
     e28:	4b05      	ldr	r3, [pc, #20]	; (e40 <timer_add_timer_task+0xac>)
     e2a:	4798      	blx	r3
	}
}
     e2c:	3720      	adds	r7, #32
     e2e:	46bd      	mov	sp, r7
     e30:	bd80      	pop	{r7, pc}
     e32:	bf00      	nop
     e34:	00000cf9 	.word	0x00000cf9
     e38:	0000139d 	.word	0x0000139d
     e3c:	00000d11 	.word	0x00000d11
     e40:	000013f5 	.word	0x000013f5

00000e44 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     e44:	b580      	push	{r7, lr}
     e46:	b086      	sub	sp, #24
     e48:	af00      	add	r7, sp, #0
     e4a:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
     e4c:	687b      	ldr	r3, [r7, #4]
     e4e:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
     e50:	693b      	ldr	r3, [r7, #16]
     e52:	3314      	adds	r3, #20
     e54:	4618      	mov	r0, r3
     e56:	4b27      	ldr	r3, [pc, #156]	; (ef4 <timer_process_counted+0xb0>)
     e58:	4798      	blx	r3
     e5a:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
     e5c:	693b      	ldr	r3, [r7, #16]
     e5e:	691b      	ldr	r3, [r3, #16]
     e60:	1c5a      	adds	r2, r3, #1
     e62:	693b      	ldr	r3, [r7, #16]
     e64:	611a      	str	r2, [r3, #16]
     e66:	693b      	ldr	r3, [r7, #16]
     e68:	691b      	ldr	r3, [r3, #16]
     e6a:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e6c:	693b      	ldr	r3, [r7, #16]
     e6e:	7e1b      	ldrb	r3, [r3, #24]
     e70:	b2db      	uxtb	r3, r3
     e72:	f003 0301 	and.w	r3, r3, #1
     e76:	2b00      	cmp	r3, #0
     e78:	d106      	bne.n	e88 <timer_process_counted+0x44>
     e7a:	693b      	ldr	r3, [r7, #16]
     e7c:	7e1b      	ldrb	r3, [r3, #24]
     e7e:	b2db      	uxtb	r3, r3
     e80:	f003 0302 	and.w	r3, r3, #2
     e84:	2b00      	cmp	r3, #0
     e86:	d027      	beq.n	ed8 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e88:	693b      	ldr	r3, [r7, #16]
     e8a:	7e1b      	ldrb	r3, [r3, #24]
     e8c:	b2db      	uxtb	r3, r3
     e8e:	f043 0302 	orr.w	r3, r3, #2
     e92:	b2da      	uxtb	r2, r3
     e94:	693b      	ldr	r3, [r7, #16]
     e96:	761a      	strb	r2, [r3, #24]
		return;
     e98:	e029      	b.n	eee <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
     e9a:	697b      	ldr	r3, [r7, #20]
     e9c:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
     e9e:	693b      	ldr	r3, [r7, #16]
     ea0:	3314      	adds	r3, #20
     ea2:	4618      	mov	r0, r3
     ea4:	4b14      	ldr	r3, [pc, #80]	; (ef8 <timer_process_counted+0xb4>)
     ea6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     ea8:	68bb      	ldr	r3, [r7, #8]
     eaa:	7c1b      	ldrb	r3, [r3, #16]
     eac:	2b01      	cmp	r3, #1
     eae:	d109      	bne.n	ec4 <timer_process_counted+0x80>
			tmp->time_label = time;
     eb0:	68bb      	ldr	r3, [r7, #8]
     eb2:	68fa      	ldr	r2, [r7, #12]
     eb4:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     eb6:	693b      	ldr	r3, [r7, #16]
     eb8:	3314      	adds	r3, #20
     eba:	68fa      	ldr	r2, [r7, #12]
     ebc:	68b9      	ldr	r1, [r7, #8]
     ebe:	4618      	mov	r0, r3
     ec0:	4b0e      	ldr	r3, [pc, #56]	; (efc <timer_process_counted+0xb8>)
     ec2:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ec4:	693b      	ldr	r3, [r7, #16]
     ec6:	3314      	adds	r3, #20
     ec8:	4618      	mov	r0, r3
     eca:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <timer_process_counted+0xb0>)
     ecc:	4798      	blx	r3
     ece:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
     ed0:	68bb      	ldr	r3, [r7, #8]
     ed2:	68db      	ldr	r3, [r3, #12]
     ed4:	68b8      	ldr	r0, [r7, #8]
     ed6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ed8:	697b      	ldr	r3, [r7, #20]
     eda:	2b00      	cmp	r3, #0
     edc:	d007      	beq.n	eee <timer_process_counted+0xaa>
     ede:	697b      	ldr	r3, [r7, #20]
     ee0:	685b      	ldr	r3, [r3, #4]
     ee2:	68fa      	ldr	r2, [r7, #12]
     ee4:	1ad2      	subs	r2, r2, r3
     ee6:	697b      	ldr	r3, [r7, #20]
     ee8:	689b      	ldr	r3, [r3, #8]
     eea:	429a      	cmp	r2, r3
     eec:	d2d5      	bcs.n	e9a <timer_process_counted+0x56>
	}
}
     eee:	3718      	adds	r7, #24
     ef0:	46bd      	mov	sp, r7
     ef2:	bd80      	pop	{r7, pc}
     ef4:	00000cf9 	.word	0x00000cf9
     ef8:	00001419 	.word	0x00001419
     efc:	00000d95 	.word	0x00000d95

00000f00 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
     f00:	b580      	push	{r7, lr}
     f02:	b086      	sub	sp, #24
     f04:	af00      	add	r7, sp, #0
     f06:	60f8      	str	r0, [r7, #12]
     f08:	60b9      	str	r1, [r7, #8]
     f0a:	607a      	str	r2, [r7, #4]
     f0c:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     f0e:	68fb      	ldr	r3, [r7, #12]
     f10:	2b00      	cmp	r3, #0
     f12:	d00a      	beq.n	f2a <usart_async_init+0x2a>
     f14:	68bb      	ldr	r3, [r7, #8]
     f16:	2b00      	cmp	r3, #0
     f18:	d007      	beq.n	f2a <usart_async_init+0x2a>
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d004      	beq.n	f2a <usart_async_init+0x2a>
     f20:	887b      	ldrh	r3, [r7, #2]
     f22:	2b00      	cmp	r3, #0
     f24:	d001      	beq.n	f2a <usart_async_init+0x2a>
     f26:	2301      	movs	r3, #1
     f28:	e000      	b.n	f2c <usart_async_init+0x2c>
     f2a:	2300      	movs	r3, #0
     f2c:	f003 0301 	and.w	r3, r3, #1
     f30:	b2db      	uxtb	r3, r3
     f32:	223a      	movs	r2, #58	; 0x3a
     f34:	4919      	ldr	r1, [pc, #100]	; (f9c <usart_async_init+0x9c>)
     f36:	4618      	mov	r0, r3
     f38:	4b19      	ldr	r3, [pc, #100]	; (fa0 <usart_async_init+0xa0>)
     f3a:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	3334      	adds	r3, #52	; 0x34
     f40:	887a      	ldrh	r2, [r7, #2]
     f42:	6879      	ldr	r1, [r7, #4]
     f44:	4618      	mov	r0, r3
     f46:	4b17      	ldr	r3, [pc, #92]	; (fa4 <usart_async_init+0xa4>)
     f48:	4798      	blx	r3
     f4a:	4603      	mov	r3, r0
     f4c:	2b00      	cmp	r3, #0
     f4e:	d002      	beq.n	f56 <usart_async_init+0x56>
		return ERR_INVALID_ARG;
     f50:	f06f 030c 	mvn.w	r3, #12
     f54:	e01e      	b.n	f94 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	3308      	adds	r3, #8
     f5a:	68b9      	ldr	r1, [r7, #8]
     f5c:	4618      	mov	r0, r3
     f5e:	4b12      	ldr	r3, [pc, #72]	; (fa8 <usart_async_init+0xa8>)
     f60:	4798      	blx	r3
     f62:	6178      	str	r0, [r7, #20]
	if (init_status) {
     f64:	697b      	ldr	r3, [r7, #20]
     f66:	2b00      	cmp	r3, #0
     f68:	d001      	beq.n	f6e <usart_async_init+0x6e>
		return init_status;
     f6a:	697b      	ldr	r3, [r7, #20]
     f6c:	e012      	b.n	f94 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
     f6e:	68fb      	ldr	r3, [r7, #12]
     f70:	4a0e      	ldr	r2, [pc, #56]	; (fac <usart_async_init+0xac>)
     f72:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	4a0e      	ldr	r2, [pc, #56]	; (fb0 <usart_async_init+0xb0>)
     f78:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     f7a:	68fb      	ldr	r3, [r7, #12]
     f7c:	4a0d      	ldr	r2, [pc, #52]	; (fb4 <usart_async_init+0xb4>)
     f7e:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	4a0d      	ldr	r2, [pc, #52]	; (fb8 <usart_async_init+0xb8>)
     f84:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     f86:	68fb      	ldr	r3, [r7, #12]
     f88:	4a0c      	ldr	r2, [pc, #48]	; (fbc <usart_async_init+0xbc>)
     f8a:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     f8c:	68fb      	ldr	r3, [r7, #12]
     f8e:	4a0c      	ldr	r2, [pc, #48]	; (fc0 <usart_async_init+0xc0>)
     f90:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
     f92:	2300      	movs	r3, #0
}
     f94:	4618      	mov	r0, r3
     f96:	3718      	adds	r7, #24
     f98:	46bd      	mov	sp, r7
     f9a:	bd80      	pop	{r7, pc}
     f9c:	000030d4 	.word	0x000030d4
     fa0:	0000133d 	.word	0x0000133d
     fa4:	0000144d 	.word	0x0000144d
     fa8:	00001e11 	.word	0x00001e11
     fac:	0000118d 	.word	0x0000118d
     fb0:	000010fd 	.word	0x000010fd
     fb4:	0000123d 	.word	0x0000123d
     fb8:	000012d5 	.word	0x000012d5
     fbc:	000012a9 	.word	0x000012a9
     fc0:	00001311 	.word	0x00001311

00000fc4 <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	b082      	sub	sp, #8
     fc8:	af00      	add	r7, sp, #0
     fca:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	2b00      	cmp	r3, #0
     fd0:	bf14      	ite	ne
     fd2:	2301      	movne	r3, #1
     fd4:	2300      	moveq	r3, #0
     fd6:	b2db      	uxtb	r3, r3
     fd8:	2261      	movs	r2, #97	; 0x61
     fda:	4907      	ldr	r1, [pc, #28]	; (ff8 <usart_async_enable+0x34>)
     fdc:	4618      	mov	r0, r3
     fde:	4b07      	ldr	r3, [pc, #28]	; (ffc <usart_async_enable+0x38>)
     fe0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     fe2:	687b      	ldr	r3, [r7, #4]
     fe4:	3308      	adds	r3, #8
     fe6:	4618      	mov	r0, r3
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <usart_async_enable+0x3c>)
     fea:	4798      	blx	r3

	return ERR_NONE;
     fec:	2300      	movs	r3, #0
}
     fee:	4618      	mov	r0, r3
     ff0:	3708      	adds	r7, #8
     ff2:	46bd      	mov	sp, r7
     ff4:	bd80      	pop	{r7, pc}
     ff6:	bf00      	nop
     ff8:	000030d4 	.word	0x000030d4
     ffc:	0000133d 	.word	0x0000133d
    1000:	00001ebd 	.word	0x00001ebd

00001004 <usart_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_async_get_io_descriptor(struct usart_async_descriptor *const descr, struct io_descriptor **io)
{
    1004:	b580      	push	{r7, lr}
    1006:	b082      	sub	sp, #8
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
    100c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    100e:	687b      	ldr	r3, [r7, #4]
    1010:	2b00      	cmp	r3, #0
    1012:	d004      	beq.n	101e <usart_async_get_io_descriptor+0x1a>
    1014:	683b      	ldr	r3, [r7, #0]
    1016:	2b00      	cmp	r3, #0
    1018:	d001      	beq.n	101e <usart_async_get_io_descriptor+0x1a>
    101a:	2301      	movs	r3, #1
    101c:	e000      	b.n	1020 <usart_async_get_io_descriptor+0x1c>
    101e:	2300      	movs	r3, #0
    1020:	f003 0301 	and.w	r3, r3, #1
    1024:	b2db      	uxtb	r3, r3
    1026:	2277      	movs	r2, #119	; 0x77
    1028:	4905      	ldr	r1, [pc, #20]	; (1040 <usart_async_get_io_descriptor+0x3c>)
    102a:	4618      	mov	r0, r3
    102c:	4b05      	ldr	r3, [pc, #20]	; (1044 <usart_async_get_io_descriptor+0x40>)
    102e:	4798      	blx	r3

	*io = &descr->io;
    1030:	687a      	ldr	r2, [r7, #4]
    1032:	683b      	ldr	r3, [r7, #0]
    1034:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1036:	2300      	movs	r3, #0
}
    1038:	4618      	mov	r0, r3
    103a:	3708      	adds	r7, #8
    103c:	46bd      	mov	sp, r7
    103e:	bd80      	pop	{r7, pc}
    1040:	000030d4 	.word	0x000030d4
    1044:	0000133d 	.word	0x0000133d

00001048 <usart_async_register_callback>:
/**
 * \brief Register usart callback
 */
int32_t usart_async_register_callback(struct usart_async_descriptor *const descr,
                                      const enum usart_async_callback_type type, usart_cb_t cb)
{
    1048:	b580      	push	{r7, lr}
    104a:	b084      	sub	sp, #16
    104c:	af00      	add	r7, sp, #0
    104e:	60f8      	str	r0, [r7, #12]
    1050:	460b      	mov	r3, r1
    1052:	607a      	str	r2, [r7, #4]
    1054:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1056:	68fb      	ldr	r3, [r7, #12]
    1058:	2b00      	cmp	r3, #0
    105a:	bf14      	ite	ne
    105c:	2301      	movne	r3, #1
    105e:	2300      	moveq	r3, #0
    1060:	b2db      	uxtb	r3, r3
    1062:	2283      	movs	r2, #131	; 0x83
    1064:	4922      	ldr	r1, [pc, #136]	; (10f0 <usart_async_register_callback+0xa8>)
    1066:	4618      	mov	r0, r3
    1068:	4b22      	ldr	r3, [pc, #136]	; (10f4 <usart_async_register_callback+0xac>)
    106a:	4798      	blx	r3

	switch (type) {
    106c:	7afb      	ldrb	r3, [r7, #11]
    106e:	2b01      	cmp	r3, #1
    1070:	d014      	beq.n	109c <usart_async_register_callback+0x54>
    1072:	2b02      	cmp	r3, #2
    1074:	d023      	beq.n	10be <usart_async_register_callback+0x76>
    1076:	2b00      	cmp	r3, #0
    1078:	d132      	bne.n	10e0 <usart_async_register_callback+0x98>
	case USART_ASYNC_RXC_CB:
		descr->usart_cb.rx_done = cb;
    107a:	68fb      	ldr	r3, [r7, #12]
    107c:	687a      	ldr	r2, [r7, #4]
    107e:	629a      	str	r2, [r3, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1080:	68fb      	ldr	r3, [r7, #12]
    1082:	f103 0008 	add.w	r0, r3, #8
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	2b00      	cmp	r3, #0
    108a:	bf14      	ite	ne
    108c:	2301      	movne	r3, #1
    108e:	2300      	moveq	r3, #0
    1090:	b2db      	uxtb	r3, r3
    1092:	461a      	mov	r2, r3
    1094:	2101      	movs	r1, #1
    1096:	4b18      	ldr	r3, [pc, #96]	; (10f8 <usart_async_register_callback+0xb0>)
    1098:	4798      	blx	r3
		break;
    109a:	e024      	b.n	10e6 <usart_async_register_callback+0x9e>
	case USART_ASYNC_TXC_CB:
		descr->usart_cb.tx_done = cb;
    109c:	68fb      	ldr	r3, [r7, #12]
    109e:	687a      	ldr	r2, [r7, #4]
    10a0:	625a      	str	r2, [r3, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    10a2:	68fb      	ldr	r3, [r7, #12]
    10a4:	f103 0008 	add.w	r0, r3, #8
    10a8:	687b      	ldr	r3, [r7, #4]
    10aa:	2b00      	cmp	r3, #0
    10ac:	bf14      	ite	ne
    10ae:	2301      	movne	r3, #1
    10b0:	2300      	moveq	r3, #0
    10b2:	b2db      	uxtb	r3, r3
    10b4:	461a      	mov	r2, r3
    10b6:	2102      	movs	r1, #2
    10b8:	4b0f      	ldr	r3, [pc, #60]	; (10f8 <usart_async_register_callback+0xb0>)
    10ba:	4798      	blx	r3
		break;
    10bc:	e013      	b.n	10e6 <usart_async_register_callback+0x9e>
	case USART_ASYNC_ERROR_CB:
		descr->usart_cb.error = cb;
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	687a      	ldr	r2, [r7, #4]
    10c2:	62da      	str	r2, [r3, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    10c4:	68fb      	ldr	r3, [r7, #12]
    10c6:	f103 0008 	add.w	r0, r3, #8
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	2b00      	cmp	r3, #0
    10ce:	bf14      	ite	ne
    10d0:	2301      	movne	r3, #1
    10d2:	2300      	moveq	r3, #0
    10d4:	b2db      	uxtb	r3, r3
    10d6:	461a      	mov	r2, r3
    10d8:	2103      	movs	r1, #3
    10da:	4b07      	ldr	r3, [pc, #28]	; (10f8 <usart_async_register_callback+0xb0>)
    10dc:	4798      	blx	r3
		break;
    10de:	e002      	b.n	10e6 <usart_async_register_callback+0x9e>
	default:
		return ERR_INVALID_ARG;
    10e0:	f06f 030c 	mvn.w	r3, #12
    10e4:	e000      	b.n	10e8 <usart_async_register_callback+0xa0>
	}

	return ERR_NONE;
    10e6:	2300      	movs	r3, #0
}
    10e8:	4618      	mov	r0, r3
    10ea:	3710      	adds	r7, #16
    10ec:	46bd      	mov	sp, r7
    10ee:	bd80      	pop	{r7, pc}
    10f0:	000030d4 	.word	0x000030d4
    10f4:	0000133d 	.word	0x0000133d
    10f8:	00001fa1 	.word	0x00001fa1

000010fc <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    10fc:	b580      	push	{r7, lr}
    10fe:	b086      	sub	sp, #24
    1100:	af00      	add	r7, sp, #0
    1102:	60f8      	str	r0, [r7, #12]
    1104:	60b9      	str	r1, [r7, #8]
    1106:	4613      	mov	r3, r2
    1108:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    110a:	68fb      	ldr	r3, [r7, #12]
    110c:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    110e:	697b      	ldr	r3, [r7, #20]
    1110:	2b00      	cmp	r3, #0
    1112:	d007      	beq.n	1124 <usart_async_write+0x28>
    1114:	68bb      	ldr	r3, [r7, #8]
    1116:	2b00      	cmp	r3, #0
    1118:	d004      	beq.n	1124 <usart_async_write+0x28>
    111a:	88fb      	ldrh	r3, [r7, #6]
    111c:	2b00      	cmp	r3, #0
    111e:	d001      	beq.n	1124 <usart_async_write+0x28>
    1120:	2301      	movs	r3, #1
    1122:	e000      	b.n	1126 <usart_async_write+0x2a>
    1124:	2300      	movs	r3, #0
    1126:	f003 0301 	and.w	r3, r3, #1
    112a:	b2db      	uxtb	r3, r3
    112c:	f240 123b 	movw	r2, #315	; 0x13b
    1130:	4913      	ldr	r1, [pc, #76]	; (1180 <usart_async_write+0x84>)
    1132:	4618      	mov	r0, r3
    1134:	4b13      	ldr	r3, [pc, #76]	; (1184 <usart_async_write+0x88>)
    1136:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1138:	697b      	ldr	r3, [r7, #20]
    113a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    113e:	697b      	ldr	r3, [r7, #20]
    1140:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1144:	429a      	cmp	r2, r3
    1146:	d002      	beq.n	114e <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
    1148:	f06f 031b 	mvn.w	r3, #27
    114c:	e013      	b.n	1176 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    114e:	697b      	ldr	r3, [r7, #20]
    1150:	68ba      	ldr	r2, [r7, #8]
    1152:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	88fa      	ldrh	r2, [r7, #6]
    1158:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
    115c:	697b      	ldr	r3, [r7, #20]
    115e:	2200      	movs	r2, #0
    1160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1164:	697b      	ldr	r3, [r7, #20]
    1166:	2201      	movs	r2, #1
    1168:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    116a:	697b      	ldr	r3, [r7, #20]
    116c:	3308      	adds	r3, #8
    116e:	4618      	mov	r0, r3
    1170:	4b05      	ldr	r3, [pc, #20]	; (1188 <usart_async_write+0x8c>)
    1172:	4798      	blx	r3

	return (int32_t)length;
    1174:	88fb      	ldrh	r3, [r7, #6]
}
    1176:	4618      	mov	r0, r3
    1178:	3718      	adds	r7, #24
    117a:	46bd      	mov	sp, r7
    117c:	bd80      	pop	{r7, pc}
    117e:	bf00      	nop
    1180:	000030d4 	.word	0x000030d4
    1184:	0000133d 	.word	0x0000133d
    1188:	00001f05 	.word	0x00001f05

0000118c <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    118c:	b580      	push	{r7, lr}
    118e:	b088      	sub	sp, #32
    1190:	af00      	add	r7, sp, #0
    1192:	60f8      	str	r0, [r7, #12]
    1194:	60b9      	str	r1, [r7, #8]
    1196:	4613      	mov	r3, r2
    1198:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
    119a:	2300      	movs	r3, #0
    119c:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    119e:	68fb      	ldr	r3, [r7, #12]
    11a0:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    11a2:	69bb      	ldr	r3, [r7, #24]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d007      	beq.n	11b8 <usart_async_read+0x2c>
    11a8:	68bb      	ldr	r3, [r7, #8]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d004      	beq.n	11b8 <usart_async_read+0x2c>
    11ae:	88fb      	ldrh	r3, [r7, #6]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d001      	beq.n	11b8 <usart_async_read+0x2c>
    11b4:	2301      	movs	r3, #1
    11b6:	e000      	b.n	11ba <usart_async_read+0x2e>
    11b8:	2300      	movs	r3, #0
    11ba:	f003 0301 	and.w	r3, r3, #1
    11be:	b2db      	uxtb	r3, r3
    11c0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    11c4:	4917      	ldr	r1, [pc, #92]	; (1224 <usart_async_read+0x98>)
    11c6:	4618      	mov	r0, r3
    11c8:	4b17      	ldr	r3, [pc, #92]	; (1228 <usart_async_read+0x9c>)
    11ca:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    11cc:	f107 0310 	add.w	r3, r7, #16
    11d0:	4618      	mov	r0, r3
    11d2:	4b16      	ldr	r3, [pc, #88]	; (122c <usart_async_read+0xa0>)
    11d4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    11d6:	69bb      	ldr	r3, [r7, #24]
    11d8:	3334      	adds	r3, #52	; 0x34
    11da:	4618      	mov	r0, r3
    11dc:	4b14      	ldr	r3, [pc, #80]	; (1230 <usart_async_read+0xa4>)
    11de:	4798      	blx	r3
    11e0:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    11e2:	f107 0310 	add.w	r3, r7, #16
    11e6:	4618      	mov	r0, r3
    11e8:	4b12      	ldr	r3, [pc, #72]	; (1234 <usart_async_read+0xa8>)
    11ea:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    11ec:	e00c      	b.n	1208 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    11ee:	69bb      	ldr	r3, [r7, #24]
    11f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
    11f4:	8bfb      	ldrh	r3, [r7, #30]
    11f6:	1c59      	adds	r1, r3, #1
    11f8:	83f9      	strh	r1, [r7, #30]
    11fa:	4619      	mov	r1, r3
    11fc:	68bb      	ldr	r3, [r7, #8]
    11fe:	440b      	add	r3, r1
    1200:	4619      	mov	r1, r3
    1202:	4610      	mov	r0, r2
    1204:	4b0c      	ldr	r3, [pc, #48]	; (1238 <usart_async_read+0xac>)
    1206:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1208:	8bfa      	ldrh	r2, [r7, #30]
    120a:	697b      	ldr	r3, [r7, #20]
    120c:	429a      	cmp	r2, r3
    120e:	d203      	bcs.n	1218 <usart_async_read+0x8c>
    1210:	8bfa      	ldrh	r2, [r7, #30]
    1212:	88fb      	ldrh	r3, [r7, #6]
    1214:	429a      	cmp	r2, r3
    1216:	d3ea      	bcc.n	11ee <usart_async_read+0x62>
	}

	return (int32_t)was_read;
    1218:	8bfb      	ldrh	r3, [r7, #30]
}
    121a:	4618      	mov	r0, r3
    121c:	3720      	adds	r7, #32
    121e:	46bd      	mov	sp, r7
    1220:	bd80      	pop	{r7, pc}
    1222:	bf00      	nop
    1224:	000030d4 	.word	0x000030d4
    1228:	0000133d 	.word	0x0000133d
    122c:	00000c5d 	.word	0x00000c5d
    1230:	000015a5 	.word	0x000015a5
    1234:	00000c83 	.word	0x00000c83
    1238:	000014c1 	.word	0x000014c1

0000123c <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    123c:	b590      	push	{r4, r7, lr}
    123e:	b085      	sub	sp, #20
    1240:	af00      	add	r7, sp, #0
    1242:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	3b08      	subs	r3, #8
    1248:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1256:	429a      	cmp	r2, r3
    1258:	d017      	beq.n	128a <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	f103 0008 	add.w	r0, r3, #8
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    126a:	1c59      	adds	r1, r3, #1
    126c:	b28c      	uxth	r4, r1
    126e:	68f9      	ldr	r1, [r7, #12]
    1270:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
    1274:	4413      	add	r3, r2
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	4619      	mov	r1, r3
    127a:	4b08      	ldr	r3, [pc, #32]	; (129c <usart_process_byte_sent+0x60>)
    127c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    127e:	68fb      	ldr	r3, [r7, #12]
    1280:	3308      	adds	r3, #8
    1282:	4618      	mov	r0, r3
    1284:	4b06      	ldr	r3, [pc, #24]	; (12a0 <usart_process_byte_sent+0x64>)
    1286:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1288:	e004      	b.n	1294 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
    128a:	68fb      	ldr	r3, [r7, #12]
    128c:	3308      	adds	r3, #8
    128e:	4618      	mov	r0, r3
    1290:	4b04      	ldr	r3, [pc, #16]	; (12a4 <usart_process_byte_sent+0x68>)
    1292:	4798      	blx	r3
}
    1294:	bf00      	nop
    1296:	3714      	adds	r7, #20
    1298:	46bd      	mov	sp, r7
    129a:	bd90      	pop	{r4, r7, pc}
    129c:	00001edd 	.word	0x00001edd
    12a0:	00001f05 	.word	0x00001f05
    12a4:	00001f25 	.word	0x00001f25

000012a8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    12a8:	b580      	push	{r7, lr}
    12aa:	b084      	sub	sp, #16
    12ac:	af00      	add	r7, sp, #0
    12ae:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	3b08      	subs	r3, #8
    12b4:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	2200      	movs	r2, #0
    12ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12c0:	2b00      	cmp	r3, #0
    12c2:	d003      	beq.n	12cc <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12c8:	68f8      	ldr	r0, [r7, #12]
    12ca:	4798      	blx	r3
	}
}
    12cc:	bf00      	nop
    12ce:	3710      	adds	r7, #16
    12d0:	46bd      	mov	sp, r7
    12d2:	bd80      	pop	{r7, pc}

000012d4 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    12d4:	b580      	push	{r7, lr}
    12d6:	b084      	sub	sp, #16
    12d8:	af00      	add	r7, sp, #0
    12da:	6078      	str	r0, [r7, #4]
    12dc:	460b      	mov	r3, r1
    12de:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	3b08      	subs	r3, #8
    12e4:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	3334      	adds	r3, #52	; 0x34
    12ea:	78fa      	ldrb	r2, [r7, #3]
    12ec:	4611      	mov	r1, r2
    12ee:	4618      	mov	r0, r3
    12f0:	4b06      	ldr	r3, [pc, #24]	; (130c <usart_fill_rx_buffer+0x38>)
    12f2:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    12f8:	2b00      	cmp	r3, #0
    12fa:	d003      	beq.n	1304 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1300:	68f8      	ldr	r0, [r7, #12]
    1302:	4798      	blx	r3
	}
}
    1304:	bf00      	nop
    1306:	3710      	adds	r7, #16
    1308:	46bd      	mov	sp, r7
    130a:	bd80      	pop	{r7, pc}
    130c:	00001531 	.word	0x00001531

00001310 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1310:	b580      	push	{r7, lr}
    1312:	b084      	sub	sp, #16
    1314:	af00      	add	r7, sp, #0
    1316:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	3b08      	subs	r3, #8
    131c:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	2200      	movs	r2, #0
    1322:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    1324:	68fb      	ldr	r3, [r7, #12]
    1326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1328:	2b00      	cmp	r3, #0
    132a:	d003      	beq.n	1334 <usart_error+0x24>
		descr->usart_cb.error(descr);
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1330:	68f8      	ldr	r0, [r7, #12]
    1332:	4798      	blx	r3
	}
}
    1334:	bf00      	nop
    1336:	3710      	adds	r7, #16
    1338:	46bd      	mov	sp, r7
    133a:	bd80      	pop	{r7, pc}

0000133c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    133c:	b480      	push	{r7}
    133e:	b085      	sub	sp, #20
    1340:	af00      	add	r7, sp, #0
    1342:	4603      	mov	r3, r0
    1344:	60b9      	str	r1, [r7, #8]
    1346:	607a      	str	r2, [r7, #4]
    1348:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    134a:	7bfb      	ldrb	r3, [r7, #15]
    134c:	f083 0301 	eor.w	r3, r3, #1
    1350:	b2db      	uxtb	r3, r3
    1352:	2b00      	cmp	r3, #0
    1354:	d000      	beq.n	1358 <assert+0x1c>
		__asm("BKPT #0");
    1356:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1358:	bf00      	nop
    135a:	3714      	adds	r7, #20
    135c:	46bd      	mov	sp, r7
    135e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1362:	4770      	bx	lr

00001364 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1364:	b480      	push	{r7}
    1366:	b085      	sub	sp, #20
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
    136c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	681b      	ldr	r3, [r3, #0]
    1372:	60fb      	str	r3, [r7, #12]
    1374:	e008      	b.n	1388 <is_list_element+0x24>
		if (it == element) {
    1376:	68fa      	ldr	r2, [r7, #12]
    1378:	683b      	ldr	r3, [r7, #0]
    137a:	429a      	cmp	r2, r3
    137c:	d101      	bne.n	1382 <is_list_element+0x1e>
			return true;
    137e:	2301      	movs	r3, #1
    1380:	e006      	b.n	1390 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1382:	68fb      	ldr	r3, [r7, #12]
    1384:	681b      	ldr	r3, [r3, #0]
    1386:	60fb      	str	r3, [r7, #12]
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	2b00      	cmp	r3, #0
    138c:	d1f3      	bne.n	1376 <is_list_element+0x12>
		}
	}

	return false;
    138e:	2300      	movs	r3, #0
}
    1390:	4618      	mov	r0, r3
    1392:	3714      	adds	r7, #20
    1394:	46bd      	mov	sp, r7
    1396:	f85d 7b04 	ldr.w	r7, [sp], #4
    139a:	4770      	bx	lr

0000139c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
    13a2:	6078      	str	r0, [r7, #4]
    13a4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    13a6:	6839      	ldr	r1, [r7, #0]
    13a8:	6878      	ldr	r0, [r7, #4]
    13aa:	4b0f      	ldr	r3, [pc, #60]	; (13e8 <list_insert_as_head+0x4c>)
    13ac:	4798      	blx	r3
    13ae:	4603      	mov	r3, r0
    13b0:	2b00      	cmp	r3, #0
    13b2:	bf14      	ite	ne
    13b4:	2301      	movne	r3, #1
    13b6:	2300      	moveq	r3, #0
    13b8:	b2db      	uxtb	r3, r3
    13ba:	f083 0301 	eor.w	r3, r3, #1
    13be:	b2db      	uxtb	r3, r3
    13c0:	f003 0301 	and.w	r3, r3, #1
    13c4:	b2db      	uxtb	r3, r3
    13c6:	2239      	movs	r2, #57	; 0x39
    13c8:	4908      	ldr	r1, [pc, #32]	; (13ec <list_insert_as_head+0x50>)
    13ca:	4618      	mov	r0, r3
    13cc:	4b08      	ldr	r3, [pc, #32]	; (13f0 <list_insert_as_head+0x54>)
    13ce:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681a      	ldr	r2, [r3, #0]
    13d4:	683b      	ldr	r3, [r7, #0]
    13d6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	683a      	ldr	r2, [r7, #0]
    13dc:	601a      	str	r2, [r3, #0]
}
    13de:	bf00      	nop
    13e0:	3708      	adds	r7, #8
    13e2:	46bd      	mov	sp, r7
    13e4:	bd80      	pop	{r7, pc}
    13e6:	bf00      	nop
    13e8:	00001365 	.word	0x00001365
    13ec:	000030f4 	.word	0x000030f4
    13f0:	0000133d 	.word	0x0000133d

000013f4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    13f4:	b480      	push	{r7}
    13f6:	b083      	sub	sp, #12
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    13fc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	681a      	ldr	r2, [r3, #0]
    1402:	683b      	ldr	r3, [r7, #0]
    1404:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	683a      	ldr	r2, [r7, #0]
    140a:	601a      	str	r2, [r3, #0]
}
    140c:	bf00      	nop
    140e:	370c      	adds	r7, #12
    1410:	46bd      	mov	sp, r7
    1412:	f85d 7b04 	ldr.w	r7, [sp], #4
    1416:	4770      	bx	lr

00001418 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1418:	b480      	push	{r7}
    141a:	b085      	sub	sp, #20
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2b00      	cmp	r3, #0
    1426:	d009      	beq.n	143c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	681a      	ldr	r2, [r3, #0]
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	e000      	b.n	143e <list_remove_head+0x26>
	}

	return NULL;
    143c:	2300      	movs	r3, #0
}
    143e:	4618      	mov	r0, r3
    1440:	3714      	adds	r7, #20
    1442:	46bd      	mov	sp, r7
    1444:	f85d 7b04 	ldr.w	r7, [sp], #4
    1448:	4770      	bx	lr
	...

0000144c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    144c:	b580      	push	{r7, lr}
    144e:	b084      	sub	sp, #16
    1450:	af00      	add	r7, sp, #0
    1452:	60f8      	str	r0, [r7, #12]
    1454:	60b9      	str	r1, [r7, #8]
    1456:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	2b00      	cmp	r3, #0
    145c:	d007      	beq.n	146e <ringbuffer_init+0x22>
    145e:	68bb      	ldr	r3, [r7, #8]
    1460:	2b00      	cmp	r3, #0
    1462:	d004      	beq.n	146e <ringbuffer_init+0x22>
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	2b00      	cmp	r3, #0
    1468:	d001      	beq.n	146e <ringbuffer_init+0x22>
    146a:	2301      	movs	r3, #1
    146c:	e000      	b.n	1470 <ringbuffer_init+0x24>
    146e:	2300      	movs	r3, #0
    1470:	f003 0301 	and.w	r3, r3, #1
    1474:	b2db      	uxtb	r3, r3
    1476:	2228      	movs	r2, #40	; 0x28
    1478:	490f      	ldr	r1, [pc, #60]	; (14b8 <ringbuffer_init+0x6c>)
    147a:	4618      	mov	r0, r3
    147c:	4b0f      	ldr	r3, [pc, #60]	; (14bc <ringbuffer_init+0x70>)
    147e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	1e5a      	subs	r2, r3, #1
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	4013      	ands	r3, r2
    1488:	2b00      	cmp	r3, #0
    148a:	d002      	beq.n	1492 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    148c:	f06f 030c 	mvn.w	r3, #12
    1490:	e00e      	b.n	14b0 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1492:	687b      	ldr	r3, [r7, #4]
    1494:	1e5a      	subs	r2, r3, #1
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    149a:	68fb      	ldr	r3, [r7, #12]
    149c:	2200      	movs	r2, #0
    149e:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	689a      	ldr	r2, [r3, #8]
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    14a8:	68fb      	ldr	r3, [r7, #12]
    14aa:	68ba      	ldr	r2, [r7, #8]
    14ac:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    14ae:	2300      	movs	r3, #0
}
    14b0:	4618      	mov	r0, r3
    14b2:	3710      	adds	r7, #16
    14b4:	46bd      	mov	sp, r7
    14b6:	bd80      	pop	{r7, pc}
    14b8:	00003114 	.word	0x00003114
    14bc:	0000133d 	.word	0x0000133d

000014c0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	af00      	add	r7, sp, #0
    14c6:	6078      	str	r0, [r7, #4]
    14c8:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	2b00      	cmp	r3, #0
    14ce:	d004      	beq.n	14da <ringbuffer_get+0x1a>
    14d0:	683b      	ldr	r3, [r7, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d001      	beq.n	14da <ringbuffer_get+0x1a>
    14d6:	2301      	movs	r3, #1
    14d8:	e000      	b.n	14dc <ringbuffer_get+0x1c>
    14da:	2300      	movs	r3, #0
    14dc:	f003 0301 	and.w	r3, r3, #1
    14e0:	b2db      	uxtb	r3, r3
    14e2:	2240      	movs	r2, #64	; 0x40
    14e4:	4910      	ldr	r1, [pc, #64]	; (1528 <ringbuffer_get+0x68>)
    14e6:	4618      	mov	r0, r3
    14e8:	4b10      	ldr	r3, [pc, #64]	; (152c <ringbuffer_get+0x6c>)
    14ea:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	68da      	ldr	r2, [r3, #12]
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	689b      	ldr	r3, [r3, #8]
    14f4:	429a      	cmp	r2, r3
    14f6:	d011      	beq.n	151c <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	681a      	ldr	r2, [r3, #0]
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	6899      	ldr	r1, [r3, #8]
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	685b      	ldr	r3, [r3, #4]
    1504:	400b      	ands	r3, r1
    1506:	4413      	add	r3, r2
    1508:	781a      	ldrb	r2, [r3, #0]
    150a:	683b      	ldr	r3, [r7, #0]
    150c:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	689b      	ldr	r3, [r3, #8]
    1512:	1c5a      	adds	r2, r3, #1
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    1518:	2300      	movs	r3, #0
    151a:	e001      	b.n	1520 <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
    151c:	f06f 0309 	mvn.w	r3, #9
}
    1520:	4618      	mov	r0, r3
    1522:	3708      	adds	r7, #8
    1524:	46bd      	mov	sp, r7
    1526:	bd80      	pop	{r7, pc}
    1528:	00003114 	.word	0x00003114
    152c:	0000133d 	.word	0x0000133d

00001530 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1530:	b580      	push	{r7, lr}
    1532:	b082      	sub	sp, #8
    1534:	af00      	add	r7, sp, #0
    1536:	6078      	str	r0, [r7, #4]
    1538:	460b      	mov	r3, r1
    153a:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
    153c:	687b      	ldr	r3, [r7, #4]
    153e:	2b00      	cmp	r3, #0
    1540:	bf14      	ite	ne
    1542:	2301      	movne	r3, #1
    1544:	2300      	moveq	r3, #0
    1546:	b2db      	uxtb	r3, r3
    1548:	2251      	movs	r2, #81	; 0x51
    154a:	4914      	ldr	r1, [pc, #80]	; (159c <ringbuffer_put+0x6c>)
    154c:	4618      	mov	r0, r3
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <ringbuffer_put+0x70>)
    1550:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	681a      	ldr	r2, [r3, #0]
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	68d9      	ldr	r1, [r3, #12]
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	685b      	ldr	r3, [r3, #4]
    155e:	400b      	ands	r3, r1
    1560:	4413      	add	r3, r2
    1562:	78fa      	ldrb	r2, [r7, #3]
    1564:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	68da      	ldr	r2, [r3, #12]
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	689b      	ldr	r3, [r3, #8]
    156e:	1ad2      	subs	r2, r2, r3
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	685b      	ldr	r3, [r3, #4]
    1574:	429a      	cmp	r2, r3
    1576:	d906      	bls.n	1586 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	68da      	ldr	r2, [r3, #12]
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	685b      	ldr	r3, [r3, #4]
    1580:	1ad2      	subs	r2, r2, r3
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	68db      	ldr	r3, [r3, #12]
    158a:	1c5a      	adds	r2, r3, #1
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1590:	2300      	movs	r3, #0
}
    1592:	4618      	mov	r0, r3
    1594:	3708      	adds	r7, #8
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	bf00      	nop
    159c:	00003114 	.word	0x00003114
    15a0:	0000133d 	.word	0x0000133d

000015a4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b082      	sub	sp, #8
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	2b00      	cmp	r3, #0
    15b0:	bf14      	ite	ne
    15b2:	2301      	movne	r3, #1
    15b4:	2300      	moveq	r3, #0
    15b6:	b2db      	uxtb	r3, r3
    15b8:	2267      	movs	r2, #103	; 0x67
    15ba:	4906      	ldr	r1, [pc, #24]	; (15d4 <ringbuffer_num+0x30>)
    15bc:	4618      	mov	r0, r3
    15be:	4b06      	ldr	r3, [pc, #24]	; (15d8 <ringbuffer_num+0x34>)
    15c0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	68da      	ldr	r2, [r3, #12]
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	689b      	ldr	r3, [r3, #8]
    15ca:	1ad3      	subs	r3, r2, r3
}
    15cc:	4618      	mov	r0, r3
    15ce:	3708      	adds	r7, #8
    15d0:	46bd      	mov	sp, r7
    15d2:	bd80      	pop	{r7, pc}
    15d4:	00003114 	.word	0x00003114
    15d8:	0000133d 	.word	0x0000133d

000015dc <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    15dc:	b480      	push	{r7}
    15de:	b083      	sub	sp, #12
    15e0:	af00      	add	r7, sp, #0
    15e2:	6078      	str	r0, [r7, #4]
    15e4:	460b      	mov	r3, r1
    15e6:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	881b      	ldrh	r3, [r3, #0]
    15ec:	b29a      	uxth	r2, r3
    15ee:	887b      	ldrh	r3, [r7, #2]
    15f0:	021b      	lsls	r3, r3, #8
    15f2:	b29b      	uxth	r3, r3
    15f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    15f8:	b29b      	uxth	r3, r3
    15fa:	4313      	orrs	r3, r2
    15fc:	b29a      	uxth	r2, r3
    15fe:	687b      	ldr	r3, [r7, #4]
    1600:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1602:	bf00      	nop
    1604:	370c      	adds	r7, #12
    1606:	46bd      	mov	sp, r7
    1608:	f85d 7b04 	ldr.w	r7, [sp], #4
    160c:	4770      	bx	lr
	...

00001610 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1610:	b580      	push	{r7, lr}
    1612:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1614:	2100      	movs	r1, #0
    1616:	4808      	ldr	r0, [pc, #32]	; (1638 <_init_chip+0x28>)
    1618:	4b08      	ldr	r3, [pc, #32]	; (163c <_init_chip+0x2c>)
    161a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    161c:	4b08      	ldr	r3, [pc, #32]	; (1640 <_init_chip+0x30>)
    161e:	4798      	blx	r3
	_oscctrl_init_sources();
    1620:	4b08      	ldr	r3, [pc, #32]	; (1644 <_init_chip+0x34>)
    1622:	4798      	blx	r3
	_mclk_init();
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <_init_chip+0x38>)
    1626:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1628:	4b08      	ldr	r3, [pc, #32]	; (164c <_init_chip+0x3c>)
    162a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    162c:	f640 70ff 	movw	r0, #4095	; 0xfff
    1630:	4b07      	ldr	r3, [pc, #28]	; (1650 <_init_chip+0x40>)
    1632:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    1634:	bf00      	nop
    1636:	bd80      	pop	{r7, pc}
    1638:	41004000 	.word	0x41004000
    163c:	000015dd 	.word	0x000015dd
    1640:	0000177d 	.word	0x0000177d
    1644:	00001815 	.word	0x00001815
    1648:	000016f9 	.word	0x000016f9
    164c:	00001855 	.word	0x00001855
    1650:	000016a9 	.word	0x000016a9

00001654 <hri_gclk_wait_for_sync>:
{
    1654:	b480      	push	{r7}
    1656:	b083      	sub	sp, #12
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
    165c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    165e:	bf00      	nop
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	685a      	ldr	r2, [r3, #4]
    1664:	683b      	ldr	r3, [r7, #0]
    1666:	4013      	ands	r3, r2
    1668:	2b00      	cmp	r3, #0
    166a:	d1f9      	bne.n	1660 <hri_gclk_wait_for_sync+0xc>
}
    166c:	bf00      	nop
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <hri_gclk_write_GENCTRL_reg>:
{
    1678:	b580      	push	{r7, lr}
    167a:	b084      	sub	sp, #16
    167c:	af00      	add	r7, sp, #0
    167e:	60f8      	str	r0, [r7, #12]
    1680:	460b      	mov	r3, r1
    1682:	607a      	str	r2, [r7, #4]
    1684:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1686:	7afa      	ldrb	r2, [r7, #11]
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	3208      	adds	r2, #8
    168c:	6879      	ldr	r1, [r7, #4]
    168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1692:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1696:	68f8      	ldr	r0, [r7, #12]
    1698:	4b02      	ldr	r3, [pc, #8]	; (16a4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    169a:	4798      	blx	r3
}
    169c:	bf00      	nop
    169e:	3710      	adds	r7, #16
    16a0:	46bd      	mov	sp, r7
    16a2:	bd80      	pop	{r7, pc}
    16a4:	00001655 	.word	0x00001655

000016a8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	b082      	sub	sp, #8
    16ac:	af00      	add	r7, sp, #0
    16ae:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	f003 0301 	and.w	r3, r3, #1
    16b6:	2b00      	cmp	r3, #0
    16b8:	d004      	beq.n	16c4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    16ba:	4a04      	ldr	r2, [pc, #16]	; (16cc <_gclk_init_generators_by_fref+0x24>)
    16bc:	2100      	movs	r1, #0
    16be:	4804      	ldr	r0, [pc, #16]	; (16d0 <_gclk_init_generators_by_fref+0x28>)
    16c0:	4b04      	ldr	r3, [pc, #16]	; (16d4 <_gclk_init_generators_by_fref+0x2c>)
    16c2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    16c4:	bf00      	nop
    16c6:	3708      	adds	r7, #8
    16c8:	46bd      	mov	sp, r7
    16ca:	bd80      	pop	{r7, pc}
    16cc:	00010101 	.word	0x00010101
    16d0:	40001c00 	.word	0x40001c00
    16d4:	00001679 	.word	0x00001679

000016d8 <hri_mclk_write_CPUDIV_reg>:
{
    16d8:	b480      	push	{r7}
    16da:	b083      	sub	sp, #12
    16dc:	af00      	add	r7, sp, #0
    16de:	6078      	str	r0, [r7, #4]
    16e0:	460b      	mov	r3, r1
    16e2:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	78fa      	ldrb	r2, [r7, #3]
    16e8:	715a      	strb	r2, [r3, #5]
}
    16ea:	bf00      	nop
    16ec:	370c      	adds	r7, #12
    16ee:	46bd      	mov	sp, r7
    16f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    16f4:	4770      	bx	lr
	...

000016f8 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	b082      	sub	sp, #8
    16fc:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    16fe:	4b05      	ldr	r3, [pc, #20]	; (1714 <_mclk_init+0x1c>)
    1700:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    1702:	2101      	movs	r1, #1
    1704:	6878      	ldr	r0, [r7, #4]
    1706:	4b04      	ldr	r3, [pc, #16]	; (1718 <_mclk_init+0x20>)
    1708:	4798      	blx	r3
}
    170a:	bf00      	nop
    170c:	3708      	adds	r7, #8
    170e:	46bd      	mov	sp, r7
    1710:	bd80      	pop	{r7, pc}
    1712:	bf00      	nop
    1714:	40000800 	.word	0x40000800
    1718:	000016d9 	.word	0x000016d9

0000171c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    171c:	b480      	push	{r7}
    171e:	b083      	sub	sp, #12
    1720:	af00      	add	r7, sp, #0
    1722:	6078      	str	r0, [r7, #4]
    1724:	460b      	mov	r3, r1
    1726:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	78fa      	ldrb	r2, [r7, #3]
    172c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    172e:	bf00      	nop
    1730:	370c      	adds	r7, #12
    1732:	46bd      	mov	sp, r7
    1734:	f85d 7b04 	ldr.w	r7, [sp], #4
    1738:	4770      	bx	lr

0000173a <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    173a:	b480      	push	{r7}
    173c:	b085      	sub	sp, #20
    173e:	af00      	add	r7, sp, #0
    1740:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	69db      	ldr	r3, [r3, #28]
    1746:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    1748:	68fb      	ldr	r3, [r7, #12]
    174a:	0a1b      	lsrs	r3, r3, #8
    174c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1750:	60fb      	str	r3, [r7, #12]
	return tmp;
    1752:	68fb      	ldr	r3, [r7, #12]
}
    1754:	4618      	mov	r0, r3
    1756:	3714      	adds	r7, #20
    1758:	46bd      	mov	sp, r7
    175a:	f85d 7b04 	ldr.w	r7, [sp], #4
    175e:	4770      	bx	lr

00001760 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    1760:	b480      	push	{r7}
    1762:	b083      	sub	sp, #12
    1764:	af00      	add	r7, sp, #0
    1766:	6078      	str	r0, [r7, #4]
    1768:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    176a:	687b      	ldr	r3, [r7, #4]
    176c:	683a      	ldr	r2, [r7, #0]
    176e:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1770:	bf00      	nop
    1772:	370c      	adds	r7, #12
    1774:	46bd      	mov	sp, r7
    1776:	f85d 7b04 	ldr.w	r7, [sp], #4
    177a:	4770      	bx	lr

0000177c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1782:	4b0c      	ldr	r3, [pc, #48]	; (17b4 <_osc32kctrl_init_sources+0x38>)
    1784:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1786:	2300      	movs	r3, #0
    1788:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    178a:	6878      	ldr	r0, [r7, #4]
    178c:	4b0a      	ldr	r3, [pc, #40]	; (17b8 <_osc32kctrl_init_sources+0x3c>)
    178e:	4798      	blx	r3
    1790:	4603      	mov	r3, r0
    1792:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1794:	887b      	ldrh	r3, [r7, #2]
    1796:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1798:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    179c:	4619      	mov	r1, r3
    179e:	6878      	ldr	r0, [r7, #4]
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <_osc32kctrl_init_sources+0x40>)
    17a2:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    17a4:	2101      	movs	r1, #1
    17a6:	6878      	ldr	r0, [r7, #4]
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <_osc32kctrl_init_sources+0x44>)
    17aa:	4798      	blx	r3
	(void)calib;
}
    17ac:	bf00      	nop
    17ae:	3708      	adds	r7, #8
    17b0:	46bd      	mov	sp, r7
    17b2:	bd80      	pop	{r7, pc}
    17b4:	40001400 	.word	0x40001400
    17b8:	0000173b 	.word	0x0000173b
    17bc:	00001761 	.word	0x00001761
    17c0:	0000171d 	.word	0x0000171d

000017c4 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    17c4:	b480      	push	{r7}
    17c6:	b083      	sub	sp, #12
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	691b      	ldr	r3, [r3, #16]
    17d0:	085b      	lsrs	r3, r3, #1
    17d2:	f003 0301 	and.w	r3, r3, #1
    17d6:	2b00      	cmp	r3, #0
    17d8:	bf14      	ite	ne
    17da:	2301      	movne	r3, #1
    17dc:	2300      	moveq	r3, #0
    17de:	b2db      	uxtb	r3, r3
}
    17e0:	4618      	mov	r0, r3
    17e2:	370c      	adds	r7, #12
    17e4:	46bd      	mov	sp, r7
    17e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ea:	4770      	bx	lr

000017ec <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    17ec:	b480      	push	{r7}
    17ee:	b085      	sub	sp, #20
    17f0:	af00      	add	r7, sp, #0
    17f2:	60f8      	str	r0, [r7, #12]
    17f4:	460b      	mov	r3, r1
    17f6:	607a      	str	r2, [r7, #4]
    17f8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    17fa:	7afb      	ldrb	r3, [r7, #11]
    17fc:	68fa      	ldr	r2, [r7, #12]
    17fe:	3304      	adds	r3, #4
    1800:	009b      	lsls	r3, r3, #2
    1802:	4413      	add	r3, r2
    1804:	687a      	ldr	r2, [r7, #4]
    1806:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1808:	bf00      	nop
    180a:	3714      	adds	r7, #20
    180c:	46bd      	mov	sp, r7
    180e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1812:	4770      	bx	lr

00001814 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	b082      	sub	sp, #8
    1818:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    181a:	4b0a      	ldr	r3, [pc, #40]	; (1844 <_oscctrl_init_sources+0x30>)
    181c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    181e:	4a0a      	ldr	r2, [pc, #40]	; (1848 <_oscctrl_init_sources+0x34>)
    1820:	2101      	movs	r1, #1
    1822:	6878      	ldr	r0, [r7, #4]
    1824:	4b09      	ldr	r3, [pc, #36]	; (184c <_oscctrl_init_sources+0x38>)
    1826:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1828:	bf00      	nop
    182a:	6878      	ldr	r0, [r7, #4]
    182c:	4b08      	ldr	r3, [pc, #32]	; (1850 <_oscctrl_init_sources+0x3c>)
    182e:	4798      	blx	r3
    1830:	4603      	mov	r3, r0
    1832:	f083 0301 	eor.w	r3, r3, #1
    1836:	b2db      	uxtb	r3, r3
    1838:	2b00      	cmp	r3, #0
    183a:	d1f6      	bne.n	182a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    183c:	bf00      	nop
    183e:	3708      	adds	r7, #8
    1840:	46bd      	mov	sp, r7
    1842:	bd80      	pop	{r7, pc}
    1844:	40001000 	.word	0x40001000
    1848:	03002606 	.word	0x03002606
    184c:	000017ed 	.word	0x000017ed
    1850:	000017c5 	.word	0x000017c5

00001854 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1854:	b480      	push	{r7}
    1856:	b083      	sub	sp, #12
    1858:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    185a:	4b04      	ldr	r3, [pc, #16]	; (186c <_oscctrl_init_referenced_generators+0x18>)
    185c:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    185e:	bf00      	nop
    1860:	370c      	adds	r7, #12
    1862:	46bd      	mov	sp, r7
    1864:	f85d 7b04 	ldr.w	r7, [sp], #4
    1868:	4770      	bx	lr
    186a:	bf00      	nop
    186c:	40001000 	.word	0x40001000

00001870 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    1870:	b480      	push	{r7}
    1872:	b083      	sub	sp, #12
    1874:	af00      	add	r7, sp, #0
    1876:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	789b      	ldrb	r3, [r3, #2]
    187c:	b2db      	uxtb	r3, r3
}
    187e:	4618      	mov	r0, r3
    1880:	370c      	adds	r7, #12
    1882:	46bd      	mov	sp, r7
    1884:	f85d 7b04 	ldr.w	r7, [sp], #4
    1888:	4770      	bx	lr

0000188a <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    188a:	b480      	push	{r7}
    188c:	b083      	sub	sp, #12
    188e:	af00      	add	r7, sp, #0
    1890:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	685b      	ldr	r3, [r3, #4]
}
    1896:	4618      	mov	r0, r3
    1898:	370c      	adds	r7, #12
    189a:	46bd      	mov	sp, r7
    189c:	f85d 7b04 	ldr.w	r7, [sp], #4
    18a0:	4770      	bx	lr
	...

000018a4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    18a4:	b590      	push	{r4, r7, lr}
    18a6:	b083      	sub	sp, #12
    18a8:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    18aa:	4b17      	ldr	r3, [pc, #92]	; (1908 <RAMECC_Handler+0x64>)
    18ac:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    18ae:	4817      	ldr	r0, [pc, #92]	; (190c <RAMECC_Handler+0x68>)
    18b0:	4b17      	ldr	r3, [pc, #92]	; (1910 <RAMECC_Handler+0x6c>)
    18b2:	4798      	blx	r3
    18b4:	4603      	mov	r3, r0
    18b6:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    18b8:	683b      	ldr	r3, [r7, #0]
    18ba:	f003 0302 	and.w	r3, r3, #2
    18be:	2b00      	cmp	r3, #0
    18c0:	d00c      	beq.n	18dc <RAMECC_Handler+0x38>
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	681b      	ldr	r3, [r3, #0]
    18c6:	2b00      	cmp	r3, #0
    18c8:	d008      	beq.n	18dc <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	681c      	ldr	r4, [r3, #0]
    18ce:	480f      	ldr	r0, [pc, #60]	; (190c <RAMECC_Handler+0x68>)
    18d0:	4b10      	ldr	r3, [pc, #64]	; (1914 <RAMECC_Handler+0x70>)
    18d2:	4798      	blx	r3
    18d4:	4603      	mov	r3, r0
    18d6:	4618      	mov	r0, r3
    18d8:	47a0      	blx	r4
    18da:	e012      	b.n	1902 <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    18dc:	683b      	ldr	r3, [r7, #0]
    18de:	f003 0301 	and.w	r3, r3, #1
    18e2:	2b00      	cmp	r3, #0
    18e4:	d00c      	beq.n	1900 <RAMECC_Handler+0x5c>
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	685b      	ldr	r3, [r3, #4]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d008      	beq.n	1900 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	685c      	ldr	r4, [r3, #4]
    18f2:	4806      	ldr	r0, [pc, #24]	; (190c <RAMECC_Handler+0x68>)
    18f4:	4b07      	ldr	r3, [pc, #28]	; (1914 <RAMECC_Handler+0x70>)
    18f6:	4798      	blx	r3
    18f8:	4603      	mov	r3, r0
    18fa:	4618      	mov	r0, r3
    18fc:	47a0      	blx	r4
    18fe:	e000      	b.n	1902 <RAMECC_Handler+0x5e>
	} else {
		return;
    1900:	bf00      	nop
	}
}
    1902:	370c      	adds	r7, #12
    1904:	46bd      	mov	sp, r7
    1906:	bd90      	pop	{r4, r7, pc}
    1908:	20000148 	.word	0x20000148
    190c:	41020000 	.word	0x41020000
    1910:	00001871 	.word	0x00001871
    1914:	0000188b 	.word	0x0000188b

00001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1918:	b480      	push	{r7}
    191a:	b083      	sub	sp, #12
    191c:	af00      	add	r7, sp, #0
    191e:	4603      	mov	r3, r0
    1920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1926:	2b00      	cmp	r3, #0
    1928:	db0b      	blt.n	1942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    192a:	4909      	ldr	r1, [pc, #36]	; (1950 <__NVIC_EnableIRQ+0x38>)
    192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1930:	095b      	lsrs	r3, r3, #5
    1932:	88fa      	ldrh	r2, [r7, #6]
    1934:	f002 021f 	and.w	r2, r2, #31
    1938:	2001      	movs	r0, #1
    193a:	fa00 f202 	lsl.w	r2, r0, r2
    193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1942:	bf00      	nop
    1944:	370c      	adds	r7, #12
    1946:	46bd      	mov	sp, r7
    1948:	f85d 7b04 	ldr.w	r7, [sp], #4
    194c:	4770      	bx	lr
    194e:	bf00      	nop
    1950:	e000e100 	.word	0xe000e100

00001954 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	4603      	mov	r3, r0
    195c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1962:	2b00      	cmp	r3, #0
    1964:	db10      	blt.n	1988 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1966:	490b      	ldr	r1, [pc, #44]	; (1994 <__NVIC_DisableIRQ+0x40>)
    1968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    196c:	095b      	lsrs	r3, r3, #5
    196e:	88fa      	ldrh	r2, [r7, #6]
    1970:	f002 021f 	and.w	r2, r2, #31
    1974:	2001      	movs	r0, #1
    1976:	fa00 f202 	lsl.w	r2, r0, r2
    197a:	3320      	adds	r3, #32
    197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1984:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1988:	bf00      	nop
    198a:	370c      	adds	r7, #12
    198c:	46bd      	mov	sp, r7
    198e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1992:	4770      	bx	lr
    1994:	e000e100 	.word	0xe000e100

00001998 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1998:	b480      	push	{r7}
    199a:	b083      	sub	sp, #12
    199c:	af00      	add	r7, sp, #0
    199e:	4603      	mov	r3, r0
    19a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    19a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    19a6:	2b00      	cmp	r3, #0
    19a8:	db0c      	blt.n	19c4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19aa:	4909      	ldr	r1, [pc, #36]	; (19d0 <__NVIC_ClearPendingIRQ+0x38>)
    19ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    19b0:	095b      	lsrs	r3, r3, #5
    19b2:	88fa      	ldrh	r2, [r7, #6]
    19b4:	f002 021f 	and.w	r2, r2, #31
    19b8:	2001      	movs	r0, #1
    19ba:	fa00 f202 	lsl.w	r2, r0, r2
    19be:	3360      	adds	r3, #96	; 0x60
    19c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    19c4:	bf00      	nop
    19c6:	370c      	adds	r7, #12
    19c8:	46bd      	mov	sp, r7
    19ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ce:	4770      	bx	lr
    19d0:	e000e100 	.word	0xe000e100

000019d4 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    19d4:	b480      	push	{r7}
    19d6:	b083      	sub	sp, #12
    19d8:	af00      	add	r7, sp, #0
    19da:	6078      	str	r0, [r7, #4]
    19dc:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    19de:	bf00      	nop
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	69da      	ldr	r2, [r3, #28]
    19e4:	683b      	ldr	r3, [r7, #0]
    19e6:	4013      	ands	r3, r2
    19e8:	2b00      	cmp	r3, #0
    19ea:	d1f9      	bne.n	19e0 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    19ec:	bf00      	nop
    19ee:	370c      	adds	r7, #12
    19f0:	46bd      	mov	sp, r7
    19f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f6:	4770      	bx	lr

000019f8 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    19f8:	b480      	push	{r7}
    19fa:	b083      	sub	sp, #12
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	69da      	ldr	r2, [r3, #28]
    1a06:	683b      	ldr	r3, [r7, #0]
    1a08:	4013      	ands	r3, r2
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	bf14      	ite	ne
    1a0e:	2301      	movne	r3, #1
    1a10:	2300      	moveq	r3, #0
    1a12:	b2db      	uxtb	r3, r3
}
    1a14:	4618      	mov	r0, r3
    1a16:	370c      	adds	r7, #12
    1a18:	46bd      	mov	sp, r7
    1a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a1e:	4770      	bx	lr

00001a20 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    1a20:	b480      	push	{r7}
    1a22:	b083      	sub	sp, #12
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	7e1b      	ldrb	r3, [r3, #24]
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	f003 0301 	and.w	r3, r3, #1
    1a32:	2b00      	cmp	r3, #0
    1a34:	bf14      	ite	ne
    1a36:	2301      	movne	r3, #1
    1a38:	2300      	moveq	r3, #0
    1a3a:	b2db      	uxtb	r3, r3
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	370c      	adds	r7, #12
    1a40:	46bd      	mov	sp, r7
    1a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a46:	4770      	bx	lr

00001a48 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1a48:	b480      	push	{r7}
    1a4a:	b083      	sub	sp, #12
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	7e1b      	ldrb	r3, [r3, #24]
    1a54:	b2db      	uxtb	r3, r3
    1a56:	085b      	lsrs	r3, r3, #1
    1a58:	f003 0301 	and.w	r3, r3, #1
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	bf14      	ite	ne
    1a60:	2301      	movne	r3, #1
    1a62:	2300      	moveq	r3, #0
    1a64:	b2db      	uxtb	r3, r3
}
    1a66:	4618      	mov	r0, r3
    1a68:	370c      	adds	r7, #12
    1a6a:	46bd      	mov	sp, r7
    1a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a70:	4770      	bx	lr

00001a72 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    1a72:	b480      	push	{r7}
    1a74:	b083      	sub	sp, #12
    1a76:	af00      	add	r7, sp, #0
    1a78:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	7e1b      	ldrb	r3, [r3, #24]
    1a7e:	b2db      	uxtb	r3, r3
    1a80:	089b      	lsrs	r3, r3, #2
    1a82:	f003 0301 	and.w	r3, r3, #1
    1a86:	2b00      	cmp	r3, #0
    1a88:	bf14      	ite	ne
    1a8a:	2301      	movne	r3, #1
    1a8c:	2300      	moveq	r3, #0
    1a8e:	b2db      	uxtb	r3, r3
}
    1a90:	4618      	mov	r0, r3
    1a92:	370c      	adds	r7, #12
    1a94:	46bd      	mov	sp, r7
    1a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a9a:	4770      	bx	lr

00001a9c <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    1a9c:	b480      	push	{r7}
    1a9e:	b083      	sub	sp, #12
    1aa0:	af00      	add	r7, sp, #0
    1aa2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	7e1b      	ldrb	r3, [r3, #24]
    1aa8:	b2db      	uxtb	r3, r3
    1aaa:	09db      	lsrs	r3, r3, #7
    1aac:	f003 0301 	and.w	r3, r3, #1
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	bf14      	ite	ne
    1ab4:	2301      	movne	r3, #1
    1ab6:	2300      	moveq	r3, #0
    1ab8:	b2db      	uxtb	r3, r3
}
    1aba:	4618      	mov	r0, r3
    1abc:	370c      	adds	r7, #12
    1abe:	46bd      	mov	sp, r7
    1ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac4:	4770      	bx	lr

00001ac6 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    1ac6:	b480      	push	{r7}
    1ac8:	b083      	sub	sp, #12
    1aca:	af00      	add	r7, sp, #0
    1acc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	761a      	strb	r2, [r3, #24]
}
    1ad4:	bf00      	nop
    1ad6:	370c      	adds	r7, #12
    1ad8:	46bd      	mov	sp, r7
    1ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ade:	4770      	bx	lr

00001ae0 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    1ae0:	b480      	push	{r7}
    1ae2:	b083      	sub	sp, #12
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	2201      	movs	r2, #1
    1aec:	759a      	strb	r2, [r3, #22]
}
    1aee:	bf00      	nop
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr

00001afa <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    1afa:	b480      	push	{r7}
    1afc:	b083      	sub	sp, #12
    1afe:	af00      	add	r7, sp, #0
    1b00:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	7d9b      	ldrb	r3, [r3, #22]
    1b06:	b2db      	uxtb	r3, r3
    1b08:	f003 0301 	and.w	r3, r3, #1
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	bf14      	ite	ne
    1b10:	2301      	movne	r3, #1
    1b12:	2300      	moveq	r3, #0
    1b14:	b2db      	uxtb	r3, r3
}
    1b16:	4618      	mov	r0, r3
    1b18:	370c      	adds	r7, #12
    1b1a:	46bd      	mov	sp, r7
    1b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b20:	4770      	bx	lr

00001b22 <hri_sercomusart_write_INTEN_DRE_bit>:

static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value)
{
    1b22:	b480      	push	{r7}
    1b24:	b083      	sub	sp, #12
    1b26:	af00      	add	r7, sp, #0
    1b28:	6078      	str	r0, [r7, #4]
    1b2a:	460b      	mov	r3, r1
    1b2c:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1b2e:	78fb      	ldrb	r3, [r7, #3]
    1b30:	f083 0301 	eor.w	r3, r3, #1
    1b34:	b2db      	uxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	d003      	beq.n	1b42 <hri_sercomusart_write_INTEN_DRE_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	2201      	movs	r2, #1
    1b3e:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}
    1b40:	e002      	b.n	1b48 <hri_sercomusart_write_INTEN_DRE_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2201      	movs	r2, #1
    1b46:	759a      	strb	r2, [r3, #22]
}
    1b48:	bf00      	nop
    1b4a:	370c      	adds	r7, #12
    1b4c:	46bd      	mov	sp, r7
    1b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b52:	4770      	bx	lr

00001b54 <hri_sercomusart_clear_INTEN_DRE_bit>:

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    1b54:	b480      	push	{r7}
    1b56:	b083      	sub	sp, #12
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	2201      	movs	r2, #1
    1b60:	751a      	strb	r2, [r3, #20]
}
    1b62:	bf00      	nop
    1b64:	370c      	adds	r7, #12
    1b66:	46bd      	mov	sp, r7
    1b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b6c:	4770      	bx	lr

00001b6e <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    1b6e:	b480      	push	{r7}
    1b70:	b083      	sub	sp, #12
    1b72:	af00      	add	r7, sp, #0
    1b74:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	2202      	movs	r2, #2
    1b7a:	759a      	strb	r2, [r3, #22]
}
    1b7c:	bf00      	nop
    1b7e:	370c      	adds	r7, #12
    1b80:	46bd      	mov	sp, r7
    1b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b86:	4770      	bx	lr

00001b88 <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    1b88:	b480      	push	{r7}
    1b8a:	b083      	sub	sp, #12
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	7d9b      	ldrb	r3, [r3, #22]
    1b94:	b2db      	uxtb	r3, r3
    1b96:	085b      	lsrs	r3, r3, #1
    1b98:	f003 0301 	and.w	r3, r3, #1
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	bf14      	ite	ne
    1ba0:	2301      	movne	r3, #1
    1ba2:	2300      	moveq	r3, #0
    1ba4:	b2db      	uxtb	r3, r3
}
    1ba6:	4618      	mov	r0, r3
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr

00001bb2 <hri_sercomusart_write_INTEN_TXC_bit>:

static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value)
{
    1bb2:	b480      	push	{r7}
    1bb4:	b083      	sub	sp, #12
    1bb6:	af00      	add	r7, sp, #0
    1bb8:	6078      	str	r0, [r7, #4]
    1bba:	460b      	mov	r3, r1
    1bbc:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1bbe:	78fb      	ldrb	r3, [r7, #3]
    1bc0:	f083 0301 	eor.w	r3, r3, #1
    1bc4:	b2db      	uxtb	r3, r3
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d003      	beq.n	1bd2 <hri_sercomusart_write_INTEN_TXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	2202      	movs	r2, #2
    1bce:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}
    1bd0:	e002      	b.n	1bd8 <hri_sercomusart_write_INTEN_TXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1bd2:	687b      	ldr	r3, [r7, #4]
    1bd4:	2202      	movs	r2, #2
    1bd6:	759a      	strb	r2, [r3, #22]
}
    1bd8:	bf00      	nop
    1bda:	370c      	adds	r7, #12
    1bdc:	46bd      	mov	sp, r7
    1bde:	f85d 7b04 	ldr.w	r7, [sp], #4
    1be2:	4770      	bx	lr

00001be4 <hri_sercomusart_clear_INTEN_TXC_bit>:

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    1be4:	b480      	push	{r7}
    1be6:	b083      	sub	sp, #12
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	2202      	movs	r2, #2
    1bf0:	751a      	strb	r2, [r3, #20]
}
    1bf2:	bf00      	nop
    1bf4:	370c      	adds	r7, #12
    1bf6:	46bd      	mov	sp, r7
    1bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bfc:	4770      	bx	lr

00001bfe <hri_sercomusart_write_INTEN_RXC_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_RXC) >> SERCOM_USART_INTENSET_RXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value)
{
    1bfe:	b480      	push	{r7}
    1c00:	b083      	sub	sp, #12
    1c02:	af00      	add	r7, sp, #0
    1c04:	6078      	str	r0, [r7, #4]
    1c06:	460b      	mov	r3, r1
    1c08:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1c0a:	78fb      	ldrb	r3, [r7, #3]
    1c0c:	f083 0301 	eor.w	r3, r3, #1
    1c10:	b2db      	uxtb	r3, r3
    1c12:	2b00      	cmp	r3, #0
    1c14:	d003      	beq.n	1c1e <hri_sercomusart_write_INTEN_RXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1c16:	687b      	ldr	r3, [r7, #4]
    1c18:	2204      	movs	r2, #4
    1c1a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
	}
}
    1c1c:	e002      	b.n	1c24 <hri_sercomusart_write_INTEN_RXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	2204      	movs	r2, #4
    1c22:	759a      	strb	r2, [r3, #22]
}
    1c24:	bf00      	nop
    1c26:	370c      	adds	r7, #12
    1c28:	46bd      	mov	sp, r7
    1c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c2e:	4770      	bx	lr

00001c30 <hri_sercomusart_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_ERROR) >> SERCOM_USART_INTENSET_ERROR_Pos;
}

static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    1c30:	b480      	push	{r7}
    1c32:	b083      	sub	sp, #12
    1c34:	af00      	add	r7, sp, #0
    1c36:	6078      	str	r0, [r7, #4]
    1c38:	460b      	mov	r3, r1
    1c3a:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	f083 0301 	eor.w	r3, r3, #1
    1c42:	b2db      	uxtb	r3, r3
    1c44:	2b00      	cmp	r3, #0
    1c46:	d003      	beq.n	1c50 <hri_sercomusart_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
	}
}
    1c4e:	e002      	b.n	1c56 <hri_sercomusart_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	2280      	movs	r2, #128	; 0x80
    1c54:	759a      	strb	r2, [r3, #22]
}
    1c56:	bf00      	nop
    1c58:	370c      	adds	r7, #12
    1c5a:	46bd      	mov	sp, r7
    1c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c60:	4770      	bx	lr
	...

00001c64 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f043 0202 	orr.w	r2, r3, #2
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1c78:	2103      	movs	r1, #3
    1c7a:	6878      	ldr	r0, [r7, #4]
    1c7c:	4b02      	ldr	r3, [pc, #8]	; (1c88 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    1c7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1c80:	bf00      	nop
    1c82:	3708      	adds	r7, #8
    1c84:	46bd      	mov	sp, r7
    1c86:	bd80      	pop	{r7, pc}
    1c88:	000019d5 	.word	0x000019d5

00001c8c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1c8c:	b580      	push	{r7, lr}
    1c8e:	b082      	sub	sp, #8
    1c90:	af00      	add	r7, sp, #0
    1c92:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	f023 0202 	bic.w	r2, r3, #2
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1ca0:	2103      	movs	r1, #3
    1ca2:	6878      	ldr	r0, [r7, #4]
    1ca4:	4b02      	ldr	r3, [pc, #8]	; (1cb0 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    1ca6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ca8:	bf00      	nop
    1caa:	3708      	adds	r7, #8
    1cac:	46bd      	mov	sp, r7
    1cae:	bd80      	pop	{r7, pc}
    1cb0:	000019d5 	.word	0x000019d5

00001cb4 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b084      	sub	sp, #16
    1cb8:	af00      	add	r7, sp, #0
    1cba:	6078      	str	r0, [r7, #4]
    1cbc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1cbe:	2103      	movs	r1, #3
    1cc0:	6878      	ldr	r0, [r7, #4]
    1cc2:	4b07      	ldr	r3, [pc, #28]	; (1ce0 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    1cc4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1cc6:	687b      	ldr	r3, [r7, #4]
    1cc8:	681b      	ldr	r3, [r3, #0]
    1cca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1ccc:	68fa      	ldr	r2, [r7, #12]
    1cce:	683b      	ldr	r3, [r7, #0]
    1cd0:	4013      	ands	r3, r2
    1cd2:	60fb      	str	r3, [r7, #12]
	return tmp;
    1cd4:	68fb      	ldr	r3, [r7, #12]
}
    1cd6:	4618      	mov	r0, r3
    1cd8:	3710      	adds	r7, #16
    1cda:	46bd      	mov	sp, r7
    1cdc:	bd80      	pop	{r7, pc}
    1cde:	bf00      	nop
    1ce0:	000019d5 	.word	0x000019d5

00001ce4 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b082      	sub	sp, #8
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
    1cec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	683a      	ldr	r2, [r7, #0]
    1cf2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1cf4:	2103      	movs	r1, #3
    1cf6:	6878      	ldr	r0, [r7, #4]
    1cf8:	4b02      	ldr	r3, [pc, #8]	; (1d04 <hri_sercomusart_write_CTRLA_reg+0x20>)
    1cfa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1cfc:	bf00      	nop
    1cfe:	3708      	adds	r7, #8
    1d00:	46bd      	mov	sp, r7
    1d02:	bd80      	pop	{r7, pc}
    1d04:	000019d5 	.word	0x000019d5

00001d08 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	b082      	sub	sp, #8
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	6078      	str	r0, [r7, #4]
    1d10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1d12:	687b      	ldr	r3, [r7, #4]
    1d14:	683a      	ldr	r2, [r7, #0]
    1d16:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    1d18:	211f      	movs	r1, #31
    1d1a:	6878      	ldr	r0, [r7, #4]
    1d1c:	4b02      	ldr	r3, [pc, #8]	; (1d28 <hri_sercomusart_write_CTRLB_reg+0x20>)
    1d1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1d20:	bf00      	nop
    1d22:	3708      	adds	r7, #8
    1d24:	46bd      	mov	sp, r7
    1d26:	bd80      	pop	{r7, pc}
    1d28:	000019d5 	.word	0x000019d5

00001d2c <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    1d2c:	b480      	push	{r7}
    1d2e:	b083      	sub	sp, #12
    1d30:	af00      	add	r7, sp, #0
    1d32:	6078      	str	r0, [r7, #4]
    1d34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	683a      	ldr	r2, [r7, #0]
    1d3a:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1d3c:	bf00      	nop
    1d3e:	370c      	adds	r7, #12
    1d40:	46bd      	mov	sp, r7
    1d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d46:	4770      	bx	lr

00001d48 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    1d48:	b480      	push	{r7}
    1d4a:	b083      	sub	sp, #12
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
    1d50:	460b      	mov	r3, r1
    1d52:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	887a      	ldrh	r2, [r7, #2]
    1d58:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1d5a:	bf00      	nop
    1d5c:	370c      	adds	r7, #12
    1d5e:	46bd      	mov	sp, r7
    1d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d64:	4770      	bx	lr

00001d66 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1d66:	b480      	push	{r7}
    1d68:	b083      	sub	sp, #12
    1d6a:	af00      	add	r7, sp, #0
    1d6c:	6078      	str	r0, [r7, #4]
    1d6e:	460b      	mov	r3, r1
    1d70:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	78fa      	ldrb	r2, [r7, #3]
    1d76:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1d78:	bf00      	nop
    1d7a:	370c      	adds	r7, #12
    1d7c:	46bd      	mov	sp, r7
    1d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d82:	4770      	bx	lr

00001d84 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1d84:	b480      	push	{r7}
    1d86:	b083      	sub	sp, #12
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
    1d8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	683a      	ldr	r2, [r7, #0]
    1d92:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1d94:	bf00      	nop
    1d96:	370c      	adds	r7, #12
    1d98:	46bd      	mov	sp, r7
    1d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d9e:	4770      	bx	lr

00001da0 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1da0:	b480      	push	{r7}
    1da2:	b083      	sub	sp, #12
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1dac:	4618      	mov	r0, r3
    1dae:	370c      	adds	r7, #12
    1db0:	46bd      	mov	sp, r7
    1db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1db6:	4770      	bx	lr

00001db8 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1db8:	b480      	push	{r7}
    1dba:	b083      	sub	sp, #12
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	6078      	str	r0, [r7, #4]
    1dc0:	460b      	mov	r3, r1
    1dc2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	78fa      	ldrb	r2, [r7, #3]
    1dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1dcc:	bf00      	nop
    1dce:	370c      	adds	r7, #12
    1dd0:	46bd      	mov	sp, r7
    1dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd6:	4770      	bx	lr

00001dd8 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    1dd8:	b480      	push	{r7}
    1dda:	b083      	sub	sp, #12
    1ddc:	af00      	add	r7, sp, #0
    1dde:	6078      	str	r0, [r7, #4]
    1de0:	460b      	mov	r3, r1
    1de2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	887a      	ldrh	r2, [r7, #2]
    1de8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1dea:	bf00      	nop
    1dec:	370c      	adds	r7, #12
    1dee:	46bd      	mov	sp, r7
    1df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1df4:	4770      	bx	lr

00001df6 <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    1df6:	b480      	push	{r7}
    1df8:	b083      	sub	sp, #12
    1dfa:	af00      	add	r7, sp, #0
    1dfc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	8b5b      	ldrh	r3, [r3, #26]
    1e02:	b29b      	uxth	r3, r3
}
    1e04:	4618      	mov	r0, r3
    1e06:	370c      	adds	r7, #12
    1e08:	46bd      	mov	sp, r7
    1e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e0e:	4770      	bx	lr

00001e10 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    1e10:	b580      	push	{r7, lr}
    1e12:	b086      	sub	sp, #24
    1e14:	af00      	add	r7, sp, #0
    1e16:	6078      	str	r0, [r7, #4]
    1e18:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	bf14      	ite	ne
    1e20:	2301      	movne	r3, #1
    1e22:	2300      	moveq	r3, #0
    1e24:	b2db      	uxtb	r3, r3
    1e26:	22cb      	movs	r2, #203	; 0xcb
    1e28:	491c      	ldr	r1, [pc, #112]	; (1e9c <_usart_async_init+0x8c>)
    1e2a:	4618      	mov	r0, r3
    1e2c:	4b1c      	ldr	r3, [pc, #112]	; (1ea0 <_usart_async_init+0x90>)
    1e2e:	4798      	blx	r3

	init_status = _usart_init(hw);
    1e30:	6838      	ldr	r0, [r7, #0]
    1e32:	4b1c      	ldr	r3, [pc, #112]	; (1ea4 <_usart_async_init+0x94>)
    1e34:	4798      	blx	r3
    1e36:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1e38:	68fb      	ldr	r3, [r7, #12]
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d001      	beq.n	1e42 <_usart_async_init+0x32>
		return init_status;
    1e3e:	68fb      	ldr	r3, [r7, #12]
    1e40:	e027      	b.n	1e92 <_usart_async_init+0x82>
	}
	device->hw = hw;
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	683a      	ldr	r2, [r7, #0]
    1e46:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1e48:	6879      	ldr	r1, [r7, #4]
    1e4a:	6838      	ldr	r0, [r7, #0]
    1e4c:	4b16      	ldr	r3, [pc, #88]	; (1ea8 <_usart_async_init+0x98>)
    1e4e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    1e50:	6838      	ldr	r0, [r7, #0]
    1e52:	4b16      	ldr	r3, [pc, #88]	; (1eac <_usart_async_init+0x9c>)
    1e54:	4798      	blx	r3
    1e56:	4603      	mov	r3, r0
    1e58:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    1e5a:	2300      	movs	r3, #0
    1e5c:	613b      	str	r3, [r7, #16]
    1e5e:	e014      	b.n	1e8a <_usart_async_init+0x7a>
		NVIC_DisableIRQ((IRQn_Type)irq);
    1e60:	7dfb      	ldrb	r3, [r7, #23]
    1e62:	b21b      	sxth	r3, r3
    1e64:	4618      	mov	r0, r3
    1e66:	4b12      	ldr	r3, [pc, #72]	; (1eb0 <_usart_async_init+0xa0>)
    1e68:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    1e6a:	7dfb      	ldrb	r3, [r7, #23]
    1e6c:	b21b      	sxth	r3, r3
    1e6e:	4618      	mov	r0, r3
    1e70:	4b10      	ldr	r3, [pc, #64]	; (1eb4 <_usart_async_init+0xa4>)
    1e72:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    1e74:	7dfb      	ldrb	r3, [r7, #23]
    1e76:	b21b      	sxth	r3, r3
    1e78:	4618      	mov	r0, r3
    1e7a:	4b0f      	ldr	r3, [pc, #60]	; (1eb8 <_usart_async_init+0xa8>)
    1e7c:	4798      	blx	r3
		irq++;
    1e7e:	7dfb      	ldrb	r3, [r7, #23]
    1e80:	3301      	adds	r3, #1
    1e82:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    1e84:	693b      	ldr	r3, [r7, #16]
    1e86:	3301      	adds	r3, #1
    1e88:	613b      	str	r3, [r7, #16]
    1e8a:	693b      	ldr	r3, [r7, #16]
    1e8c:	2b03      	cmp	r3, #3
    1e8e:	d9e7      	bls.n	1e60 <_usart_async_init+0x50>
	}
	return ERR_NONE;
    1e90:	2300      	movs	r3, #0
}
    1e92:	4618      	mov	r0, r3
    1e94:	3718      	adds	r7, #24
    1e96:	46bd      	mov	sp, r7
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	bf00      	nop
    1e9c:	00003138 	.word	0x00003138
    1ea0:	0000133d 	.word	0x0000133d
    1ea4:	000021cd 	.word	0x000021cd
    1ea8:	000021a1 	.word	0x000021a1
    1eac:	0000238d 	.word	0x0000238d
    1eb0:	00001955 	.word	0x00001955
    1eb4:	00001999 	.word	0x00001999
    1eb8:	00001919 	.word	0x00001919

00001ebc <_usart_async_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	699b      	ldr	r3, [r3, #24]
    1ec8:	4618      	mov	r0, r3
    1eca:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <_usart_async_enable+0x1c>)
    1ecc:	4798      	blx	r3
}
    1ece:	bf00      	nop
    1ed0:	3708      	adds	r7, #8
    1ed2:	46bd      	mov	sp, r7
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	bf00      	nop
    1ed8:	00001c65 	.word	0x00001c65

00001edc <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	460b      	mov	r3, r1
    1ee6:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	699b      	ldr	r3, [r3, #24]
    1eec:	78fa      	ldrb	r2, [r7, #3]
    1eee:	4611      	mov	r1, r2
    1ef0:	4618      	mov	r0, r3
    1ef2:	4b03      	ldr	r3, [pc, #12]	; (1f00 <_usart_async_write_byte+0x24>)
    1ef4:	4798      	blx	r3
}
    1ef6:	bf00      	nop
    1ef8:	3708      	adds	r7, #8
    1efa:	46bd      	mov	sp, r7
    1efc:	bd80      	pop	{r7, pc}
    1efe:	bf00      	nop
    1f00:	00001d85 	.word	0x00001d85

00001f04 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    1f04:	b580      	push	{r7, lr}
    1f06:	b082      	sub	sp, #8
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	699b      	ldr	r3, [r3, #24]
    1f10:	4618      	mov	r0, r3
    1f12:	4b03      	ldr	r3, [pc, #12]	; (1f20 <_usart_async_enable_byte_sent_irq+0x1c>)
    1f14:	4798      	blx	r3
}
    1f16:	bf00      	nop
    1f18:	3708      	adds	r7, #8
    1f1a:	46bd      	mov	sp, r7
    1f1c:	bd80      	pop	{r7, pc}
    1f1e:	bf00      	nop
    1f20:	00001ae1 	.word	0x00001ae1

00001f24 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    1f24:	b580      	push	{r7, lr}
    1f26:	b082      	sub	sp, #8
    1f28:	af00      	add	r7, sp, #0
    1f2a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	699b      	ldr	r3, [r3, #24]
    1f30:	4618      	mov	r0, r3
    1f32:	4b03      	ldr	r3, [pc, #12]	; (1f40 <_usart_async_enable_tx_done_irq+0x1c>)
    1f34:	4798      	blx	r3
}
    1f36:	bf00      	nop
    1f38:	3708      	adds	r7, #8
    1f3a:	46bd      	mov	sp, r7
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	bf00      	nop
    1f40:	00001b6f 	.word	0x00001b6f

00001f44 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1f44:	b4b0      	push	{r4, r5, r7}
    1f46:	b08d      	sub	sp, #52	; 0x34
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1f4c:	4b13      	ldr	r3, [pc, #76]	; (1f9c <_sercom_get_hardware_index+0x58>)
    1f4e:	f107 040c 	add.w	r4, r7, #12
    1f52:	461d      	mov	r5, r3
    1f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f60:	2300      	movs	r3, #0
    1f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    1f64:	e010      	b.n	1f88 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f68:	009b      	lsls	r3, r3, #2
    1f6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1f6e:	4413      	add	r3, r2
    1f70:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1f74:	461a      	mov	r2, r3
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	429a      	cmp	r2, r3
    1f7a:	d102      	bne.n	1f82 <_sercom_get_hardware_index+0x3e>
			return i;
    1f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f7e:	b2db      	uxtb	r3, r3
    1f80:	e006      	b.n	1f90 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f84:	3301      	adds	r3, #1
    1f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    1f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f8a:	2b07      	cmp	r3, #7
    1f8c:	d9eb      	bls.n	1f66 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1f8e:	2300      	movs	r3, #0
}
    1f90:	4618      	mov	r0, r3
    1f92:	3734      	adds	r7, #52	; 0x34
    1f94:	46bd      	mov	sp, r7
    1f96:	bcb0      	pop	{r4, r5, r7}
    1f98:	4770      	bx	lr
    1f9a:	bf00      	nop
    1f9c:	00003154 	.word	0x00003154

00001fa0 <_usart_async_set_irq_state>:
/**
 * \brief Enable/disable USART interrupt
 */
void _usart_async_set_irq_state(struct _usart_async_device *const device, const enum _usart_async_callback_type type,
                                const bool state)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b082      	sub	sp, #8
    1fa4:	af00      	add	r7, sp, #0
    1fa6:	6078      	str	r0, [r7, #4]
    1fa8:	460b      	mov	r3, r1
    1faa:	70fb      	strb	r3, [r7, #3]
    1fac:	4613      	mov	r3, r2
    1fae:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	bf14      	ite	ne
    1fb6:	2301      	movne	r3, #1
    1fb8:	2300      	moveq	r3, #0
    1fba:	b2db      	uxtb	r3, r3
    1fbc:	f240 222b 	movw	r2, #555	; 0x22b
    1fc0:	4918      	ldr	r1, [pc, #96]	; (2024 <_usart_async_set_irq_state+0x84>)
    1fc2:	4618      	mov	r0, r3
    1fc4:	4b18      	ldr	r3, [pc, #96]	; (2028 <_usart_async_set_irq_state+0x88>)
    1fc6:	4798      	blx	r3

	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1fc8:	78fb      	ldrb	r3, [r7, #3]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d002      	beq.n	1fd4 <_usart_async_set_irq_state+0x34>
    1fce:	78fb      	ldrb	r3, [r7, #3]
    1fd0:	2b02      	cmp	r3, #2
    1fd2:	d10e      	bne.n	1ff2 <_usart_async_set_irq_state+0x52>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	699b      	ldr	r3, [r3, #24]
    1fd8:	78ba      	ldrb	r2, [r7, #2]
    1fda:	4611      	mov	r1, r2
    1fdc:	4618      	mov	r0, r3
    1fde:	4b13      	ldr	r3, [pc, #76]	; (202c <_usart_async_set_irq_state+0x8c>)
    1fe0:	4798      	blx	r3
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	699b      	ldr	r3, [r3, #24]
    1fe6:	78ba      	ldrb	r2, [r7, #2]
    1fe8:	4611      	mov	r1, r2
    1fea:	4618      	mov	r0, r3
    1fec:	4b10      	ldr	r3, [pc, #64]	; (2030 <_usart_async_set_irq_state+0x90>)
    1fee:	4798      	blx	r3
	} else if (USART_ASYNC_RX_DONE == type) {
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
	} else if (USART_ASYNC_ERROR == type) {
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    1ff0:	e014      	b.n	201c <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_RX_DONE == type) {
    1ff2:	78fb      	ldrb	r3, [r7, #3]
    1ff4:	2b01      	cmp	r3, #1
    1ff6:	d107      	bne.n	2008 <_usart_async_set_irq_state+0x68>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	699b      	ldr	r3, [r3, #24]
    1ffc:	78ba      	ldrb	r2, [r7, #2]
    1ffe:	4611      	mov	r1, r2
    2000:	4618      	mov	r0, r3
    2002:	4b0c      	ldr	r3, [pc, #48]	; (2034 <_usart_async_set_irq_state+0x94>)
    2004:	4798      	blx	r3
}
    2006:	e009      	b.n	201c <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_ERROR == type) {
    2008:	78fb      	ldrb	r3, [r7, #3]
    200a:	2b03      	cmp	r3, #3
    200c:	d106      	bne.n	201c <_usart_async_set_irq_state+0x7c>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	699b      	ldr	r3, [r3, #24]
    2012:	78ba      	ldrb	r2, [r7, #2]
    2014:	4611      	mov	r1, r2
    2016:	4618      	mov	r0, r3
    2018:	4b07      	ldr	r3, [pc, #28]	; (2038 <_usart_async_set_irq_state+0x98>)
    201a:	4798      	blx	r3
}
    201c:	bf00      	nop
    201e:	3708      	adds	r7, #8
    2020:	46bd      	mov	sp, r7
    2022:	bd80      	pop	{r7, pc}
    2024:	00003138 	.word	0x00003138
    2028:	0000133d 	.word	0x0000133d
    202c:	00001b23 	.word	0x00001b23
    2030:	00001bb3 	.word	0x00001bb3
    2034:	00001bff 	.word	0x00001bff
    2038:	00001c31 	.word	0x00001c31

0000203c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    203c:	b590      	push	{r4, r7, lr}
    203e:	b085      	sub	sp, #20
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	699b      	ldr	r3, [r3, #24]
    2048:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    204a:	68f8      	ldr	r0, [r7, #12]
    204c:	4b2f      	ldr	r3, [pc, #188]	; (210c <_sercom_usart_interrupt_handler+0xd0>)
    204e:	4798      	blx	r3
    2050:	4603      	mov	r3, r0
    2052:	2b00      	cmp	r3, #0
    2054:	d00d      	beq.n	2072 <_sercom_usart_interrupt_handler+0x36>
    2056:	68f8      	ldr	r0, [r7, #12]
    2058:	4b2d      	ldr	r3, [pc, #180]	; (2110 <_sercom_usart_interrupt_handler+0xd4>)
    205a:	4798      	blx	r3
    205c:	4603      	mov	r3, r0
    205e:	2b00      	cmp	r3, #0
    2060:	d007      	beq.n	2072 <_sercom_usart_interrupt_handler+0x36>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    2062:	68f8      	ldr	r0, [r7, #12]
    2064:	4b2b      	ldr	r3, [pc, #172]	; (2114 <_sercom_usart_interrupt_handler+0xd8>)
    2066:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	681b      	ldr	r3, [r3, #0]
    206c:	6878      	ldr	r0, [r7, #4]
    206e:	4798      	blx	r3
    2070:	e049      	b.n	2106 <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2072:	68f8      	ldr	r0, [r7, #12]
    2074:	4b28      	ldr	r3, [pc, #160]	; (2118 <_sercom_usart_interrupt_handler+0xdc>)
    2076:	4798      	blx	r3
    2078:	4603      	mov	r3, r0
    207a:	2b00      	cmp	r3, #0
    207c:	d00d      	beq.n	209a <_sercom_usart_interrupt_handler+0x5e>
    207e:	68f8      	ldr	r0, [r7, #12]
    2080:	4b26      	ldr	r3, [pc, #152]	; (211c <_sercom_usart_interrupt_handler+0xe0>)
    2082:	4798      	blx	r3
    2084:	4603      	mov	r3, r0
    2086:	2b00      	cmp	r3, #0
    2088:	d007      	beq.n	209a <_sercom_usart_interrupt_handler+0x5e>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    208a:	68f8      	ldr	r0, [r7, #12]
    208c:	4b24      	ldr	r3, [pc, #144]	; (2120 <_sercom_usart_interrupt_handler+0xe4>)
    208e:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	689b      	ldr	r3, [r3, #8]
    2094:	6878      	ldr	r0, [r7, #4]
    2096:	4798      	blx	r3
    2098:	e035      	b.n	2106 <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    209a:	68f8      	ldr	r0, [r7, #12]
    209c:	4b21      	ldr	r3, [pc, #132]	; (2124 <_sercom_usart_interrupt_handler+0xe8>)
    209e:	4798      	blx	r3
    20a0:	4603      	mov	r3, r0
    20a2:	2b00      	cmp	r3, #0
    20a4:	d017      	beq.n	20d6 <_sercom_usart_interrupt_handler+0x9a>
		if (hri_sercomusart_read_STATUS_reg(hw)
    20a6:	68f8      	ldr	r0, [r7, #12]
    20a8:	4b1f      	ldr	r3, [pc, #124]	; (2128 <_sercom_usart_interrupt_handler+0xec>)
    20aa:	4798      	blx	r3
    20ac:	4603      	mov	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    20ae:	f003 0337 	and.w	r3, r3, #55	; 0x37
		if (hri_sercomusart_read_STATUS_reg(hw)
    20b2:	2b00      	cmp	r3, #0
    20b4:	d004      	beq.n	20c0 <_sercom_usart_interrupt_handler+0x84>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    20b6:	21ff      	movs	r1, #255	; 0xff
    20b8:	68f8      	ldr	r0, [r7, #12]
    20ba:	4b1c      	ldr	r3, [pc, #112]	; (212c <_sercom_usart_interrupt_handler+0xf0>)
    20bc:	4798      	blx	r3
			return;
    20be:	e022      	b.n	2106 <_sercom_usart_interrupt_handler+0xca>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    20c0:	687b      	ldr	r3, [r7, #4]
    20c2:	685c      	ldr	r4, [r3, #4]
    20c4:	68f8      	ldr	r0, [r7, #12]
    20c6:	4b1a      	ldr	r3, [pc, #104]	; (2130 <_sercom_usart_interrupt_handler+0xf4>)
    20c8:	4798      	blx	r3
    20ca:	4603      	mov	r3, r0
    20cc:	b2db      	uxtb	r3, r3
    20ce:	4619      	mov	r1, r3
    20d0:	6878      	ldr	r0, [r7, #4]
    20d2:	47a0      	blx	r4
    20d4:	e017      	b.n	2106 <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    20d6:	68f8      	ldr	r0, [r7, #12]
    20d8:	4b16      	ldr	r3, [pc, #88]	; (2134 <_sercom_usart_interrupt_handler+0xf8>)
    20da:	4798      	blx	r3
    20dc:	4603      	mov	r3, r0
    20de:	2b00      	cmp	r3, #0
    20e0:	d011      	beq.n	2106 <_sercom_usart_interrupt_handler+0xca>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    20e2:	68f8      	ldr	r0, [r7, #12]
    20e4:	4b14      	ldr	r3, [pc, #80]	; (2138 <_sercom_usart_interrupt_handler+0xfc>)
    20e6:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	68db      	ldr	r3, [r3, #12]
    20ec:	6878      	ldr	r0, [r7, #4]
    20ee:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    20f0:	68f8      	ldr	r0, [r7, #12]
    20f2:	4b0d      	ldr	r3, [pc, #52]	; (2128 <_sercom_usart_interrupt_handler+0xec>)
    20f4:	4798      	blx	r3
    20f6:	4603      	mov	r3, r0
    20f8:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    20fa:	68bb      	ldr	r3, [r7, #8]
    20fc:	b29b      	uxth	r3, r3
    20fe:	4619      	mov	r1, r3
    2100:	68f8      	ldr	r0, [r7, #12]
    2102:	4b0a      	ldr	r3, [pc, #40]	; (212c <_sercom_usart_interrupt_handler+0xf0>)
    2104:	4798      	blx	r3
	}
}
    2106:	3714      	adds	r7, #20
    2108:	46bd      	mov	sp, r7
    210a:	bd90      	pop	{r4, r7, pc}
    210c:	00001a21 	.word	0x00001a21
    2110:	00001afb 	.word	0x00001afb
    2114:	00001b55 	.word	0x00001b55
    2118:	00001a49 	.word	0x00001a49
    211c:	00001b89 	.word	0x00001b89
    2120:	00001be5 	.word	0x00001be5
    2124:	00001a73 	.word	0x00001a73
    2128:	00001df7 	.word	0x00001df7
    212c:	00001dd9 	.word	0x00001dd9
    2130:	00001da1 	.word	0x00001da1
    2134:	00001a9d 	.word	0x00001a9d
    2138:	00001ac7 	.word	0x00001ac7

0000213c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    213c:	b580      	push	{r7, lr}
    213e:	b084      	sub	sp, #16
    2140:	af00      	add	r7, sp, #0
    2142:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2144:	6878      	ldr	r0, [r7, #4]
    2146:	4b12      	ldr	r3, [pc, #72]	; (2190 <_get_sercom_index+0x54>)
    2148:	4798      	blx	r3
    214a:	4603      	mov	r3, r0
    214c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    214e:	2300      	movs	r3, #0
    2150:	73fb      	strb	r3, [r7, #15]
    2152:	e00f      	b.n	2174 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    2154:	7bfa      	ldrb	r2, [r7, #15]
    2156:	490f      	ldr	r1, [pc, #60]	; (2194 <_get_sercom_index+0x58>)
    2158:	4613      	mov	r3, r2
    215a:	005b      	lsls	r3, r3, #1
    215c:	4413      	add	r3, r2
    215e:	00db      	lsls	r3, r3, #3
    2160:	440b      	add	r3, r1
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	7bba      	ldrb	r2, [r7, #14]
    2166:	429a      	cmp	r2, r3
    2168:	d101      	bne.n	216e <_get_sercom_index+0x32>
			return i;
    216a:	7bfb      	ldrb	r3, [r7, #15]
    216c:	e00c      	b.n	2188 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    216e:	7bfb      	ldrb	r3, [r7, #15]
    2170:	3301      	adds	r3, #1
    2172:	73fb      	strb	r3, [r7, #15]
    2174:	7bfb      	ldrb	r3, [r7, #15]
    2176:	2b00      	cmp	r3, #0
    2178:	d0ec      	beq.n	2154 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    217a:	f240 226b 	movw	r2, #619	; 0x26b
    217e:	4906      	ldr	r1, [pc, #24]	; (2198 <_get_sercom_index+0x5c>)
    2180:	2000      	movs	r0, #0
    2182:	4b06      	ldr	r3, [pc, #24]	; (219c <_get_sercom_index+0x60>)
    2184:	4798      	blx	r3
	return 0;
    2186:	2300      	movs	r3, #0
}
    2188:	4618      	mov	r0, r3
    218a:	3710      	adds	r7, #16
    218c:	46bd      	mov	sp, r7
    218e:	bd80      	pop	{r7, pc}
    2190:	00001f45 	.word	0x00001f45
    2194:	20000000 	.word	0x20000000
    2198:	00003138 	.word	0x00003138
    219c:	0000133d 	.word	0x0000133d

000021a0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    21a0:	b480      	push	{r7}
    21a2:	b083      	sub	sp, #12
    21a4:	af00      	add	r7, sp, #0
    21a6:	6078      	str	r0, [r7, #4]
    21a8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM2) {
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	4a05      	ldr	r2, [pc, #20]	; (21c4 <_sercom_init_irq_param+0x24>)
    21ae:	4293      	cmp	r3, r2
    21b0:	d102      	bne.n	21b8 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    21b2:	4a05      	ldr	r2, [pc, #20]	; (21c8 <_sercom_init_irq_param+0x28>)
    21b4:	683b      	ldr	r3, [r7, #0]
    21b6:	6013      	str	r3, [r2, #0]
	}
}
    21b8:	bf00      	nop
    21ba:	370c      	adds	r7, #12
    21bc:	46bd      	mov	sp, r7
    21be:	f85d 7b04 	ldr.w	r7, [sp], #4
    21c2:	4770      	bx	lr
    21c4:	41012000 	.word	0x41012000
    21c8:	20000074 	.word	0x20000074

000021cc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b084      	sub	sp, #16
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    21d4:	6878      	ldr	r0, [r7, #4]
    21d6:	4b61      	ldr	r3, [pc, #388]	; (235c <_usart_init+0x190>)
    21d8:	4798      	blx	r3
    21da:	4603      	mov	r3, r0
    21dc:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    21de:	2101      	movs	r1, #1
    21e0:	6878      	ldr	r0, [r7, #4]
    21e2:	4b5f      	ldr	r3, [pc, #380]	; (2360 <_usart_init+0x194>)
    21e4:	4798      	blx	r3
    21e6:	4603      	mov	r3, r0
    21e8:	f083 0301 	eor.w	r3, r3, #1
    21ec:	b2db      	uxtb	r3, r3
    21ee:	2b00      	cmp	r3, #0
    21f0:	d020      	beq.n	2234 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    21f2:	7bfa      	ldrb	r2, [r7, #15]
    21f4:	495b      	ldr	r1, [pc, #364]	; (2364 <_usart_init+0x198>)
    21f6:	4613      	mov	r3, r2
    21f8:	005b      	lsls	r3, r3, #1
    21fa:	4413      	add	r3, r2
    21fc:	00db      	lsls	r3, r3, #3
    21fe:	440b      	add	r3, r1
    2200:	3304      	adds	r3, #4
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	f003 031c 	and.w	r3, r3, #28
    2208:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    220a:	2102      	movs	r1, #2
    220c:	6878      	ldr	r0, [r7, #4]
    220e:	4b56      	ldr	r3, [pc, #344]	; (2368 <_usart_init+0x19c>)
    2210:	4798      	blx	r3
    2212:	4603      	mov	r3, r0
    2214:	2b00      	cmp	r3, #0
    2216:	d006      	beq.n	2226 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2218:	6878      	ldr	r0, [r7, #4]
    221a:	4b54      	ldr	r3, [pc, #336]	; (236c <_usart_init+0x1a0>)
    221c:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    221e:	2102      	movs	r1, #2
    2220:	6878      	ldr	r0, [r7, #4]
    2222:	4b53      	ldr	r3, [pc, #332]	; (2370 <_usart_init+0x1a4>)
    2224:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2226:	68bb      	ldr	r3, [r7, #8]
    2228:	f043 0301 	orr.w	r3, r3, #1
    222c:	4619      	mov	r1, r3
    222e:	6878      	ldr	r0, [r7, #4]
    2230:	4b50      	ldr	r3, [pc, #320]	; (2374 <_usart_init+0x1a8>)
    2232:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2234:	2101      	movs	r1, #1
    2236:	6878      	ldr	r0, [r7, #4]
    2238:	4b4d      	ldr	r3, [pc, #308]	; (2370 <_usart_init+0x1a4>)
    223a:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    223c:	7bfa      	ldrb	r2, [r7, #15]
    223e:	4949      	ldr	r1, [pc, #292]	; (2364 <_usart_init+0x198>)
    2240:	4613      	mov	r3, r2
    2242:	005b      	lsls	r3, r3, #1
    2244:	4413      	add	r3, r2
    2246:	00db      	lsls	r3, r3, #3
    2248:	440b      	add	r3, r1
    224a:	3304      	adds	r3, #4
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	4619      	mov	r1, r3
    2250:	6878      	ldr	r0, [r7, #4]
    2252:	4b48      	ldr	r3, [pc, #288]	; (2374 <_usart_init+0x1a8>)
    2254:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2256:	7bfa      	ldrb	r2, [r7, #15]
    2258:	4942      	ldr	r1, [pc, #264]	; (2364 <_usart_init+0x198>)
    225a:	4613      	mov	r3, r2
    225c:	005b      	lsls	r3, r3, #1
    225e:	4413      	add	r3, r2
    2260:	00db      	lsls	r3, r3, #3
    2262:	440b      	add	r3, r1
    2264:	3308      	adds	r3, #8
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	4619      	mov	r1, r3
    226a:	6878      	ldr	r0, [r7, #4]
    226c:	4b42      	ldr	r3, [pc, #264]	; (2378 <_usart_init+0x1ac>)
    226e:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2270:	7bfa      	ldrb	r2, [r7, #15]
    2272:	493c      	ldr	r1, [pc, #240]	; (2364 <_usart_init+0x198>)
    2274:	4613      	mov	r3, r2
    2276:	005b      	lsls	r3, r3, #1
    2278:	4413      	add	r3, r2
    227a:	00db      	lsls	r3, r3, #3
    227c:	440b      	add	r3, r1
    227e:	330c      	adds	r3, #12
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	4619      	mov	r1, r3
    2284:	6878      	ldr	r0, [r7, #4]
    2286:	4b3d      	ldr	r3, [pc, #244]	; (237c <_usart_init+0x1b0>)
    2288:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    228a:	7bfa      	ldrb	r2, [r7, #15]
    228c:	4935      	ldr	r1, [pc, #212]	; (2364 <_usart_init+0x198>)
    228e:	4613      	mov	r3, r2
    2290:	005b      	lsls	r3, r3, #1
    2292:	4413      	add	r3, r2
    2294:	00db      	lsls	r3, r3, #3
    2296:	440b      	add	r3, r1
    2298:	3304      	adds	r3, #4
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    22a0:	2b00      	cmp	r3, #0
    22a2:	d10c      	bne.n	22be <_usart_init+0xf2>
    22a4:	7bfa      	ldrb	r2, [r7, #15]
    22a6:	492f      	ldr	r1, [pc, #188]	; (2364 <_usart_init+0x198>)
    22a8:	4613      	mov	r3, r2
    22aa:	005b      	lsls	r3, r3, #1
    22ac:	4413      	add	r3, r2
    22ae:	00db      	lsls	r3, r3, #3
    22b0:	440b      	add	r3, r1
    22b2:	3304      	adds	r3, #4
    22b4:	681b      	ldr	r3, [r3, #0]
    22b6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    22ba:	2b00      	cmp	r3, #0
    22bc:	d022      	beq.n	2304 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    22be:	7bfa      	ldrb	r2, [r7, #15]
    22c0:	4928      	ldr	r1, [pc, #160]	; (2364 <_usart_init+0x198>)
    22c2:	4613      	mov	r3, r2
    22c4:	005b      	lsls	r3, r3, #1
    22c6:	4413      	add	r3, r2
    22c8:	00db      	lsls	r3, r3, #3
    22ca:	440b      	add	r3, r1
    22cc:	3310      	adds	r3, #16
    22ce:	881b      	ldrh	r3, [r3, #0]
    22d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    22d4:	b299      	uxth	r1, r3
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	8993      	ldrh	r3, [r2, #12]
    22da:	f361 030c 	bfi	r3, r1, #0, #13
    22de:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    22e0:	7bfa      	ldrb	r2, [r7, #15]
    22e2:	4920      	ldr	r1, [pc, #128]	; (2364 <_usart_init+0x198>)
    22e4:	4613      	mov	r3, r2
    22e6:	005b      	lsls	r3, r3, #1
    22e8:	4413      	add	r3, r2
    22ea:	00db      	lsls	r3, r3, #3
    22ec:	440b      	add	r3, r1
    22ee:	3312      	adds	r3, #18
    22f0:	781b      	ldrb	r3, [r3, #0]
    22f2:	f003 0307 	and.w	r3, r3, #7
    22f6:	b2d9      	uxtb	r1, r3
    22f8:	687a      	ldr	r2, [r7, #4]
    22fa:	8993      	ldrh	r3, [r2, #12]
    22fc:	f361 334f 	bfi	r3, r1, #13, #3
    2300:	8193      	strh	r3, [r2, #12]
    2302:	e00c      	b.n	231e <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2304:	7bfa      	ldrb	r2, [r7, #15]
    2306:	4917      	ldr	r1, [pc, #92]	; (2364 <_usart_init+0x198>)
    2308:	4613      	mov	r3, r2
    230a:	005b      	lsls	r3, r3, #1
    230c:	4413      	add	r3, r2
    230e:	00db      	lsls	r3, r3, #3
    2310:	440b      	add	r3, r1
    2312:	3310      	adds	r3, #16
    2314:	881b      	ldrh	r3, [r3, #0]
    2316:	4619      	mov	r1, r3
    2318:	6878      	ldr	r0, [r7, #4]
    231a:	4b19      	ldr	r3, [pc, #100]	; (2380 <_usart_init+0x1b4>)
    231c:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    231e:	7bfa      	ldrb	r2, [r7, #15]
    2320:	4910      	ldr	r1, [pc, #64]	; (2364 <_usart_init+0x198>)
    2322:	4613      	mov	r3, r2
    2324:	005b      	lsls	r3, r3, #1
    2326:	4413      	add	r3, r2
    2328:	00db      	lsls	r3, r3, #3
    232a:	440b      	add	r3, r1
    232c:	3313      	adds	r3, #19
    232e:	781b      	ldrb	r3, [r3, #0]
    2330:	4619      	mov	r1, r3
    2332:	6878      	ldr	r0, [r7, #4]
    2334:	4b13      	ldr	r3, [pc, #76]	; (2384 <_usart_init+0x1b8>)
    2336:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2338:	7bfa      	ldrb	r2, [r7, #15]
    233a:	490a      	ldr	r1, [pc, #40]	; (2364 <_usart_init+0x198>)
    233c:	4613      	mov	r3, r2
    233e:	005b      	lsls	r3, r3, #1
    2340:	4413      	add	r3, r2
    2342:	00db      	lsls	r3, r3, #3
    2344:	440b      	add	r3, r1
    2346:	3314      	adds	r3, #20
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	4619      	mov	r1, r3
    234c:	6878      	ldr	r0, [r7, #4]
    234e:	4b0e      	ldr	r3, [pc, #56]	; (2388 <_usart_init+0x1bc>)
    2350:	4798      	blx	r3

	return ERR_NONE;
    2352:	2300      	movs	r3, #0
}
    2354:	4618      	mov	r0, r3
    2356:	3710      	adds	r7, #16
    2358:	46bd      	mov	sp, r7
    235a:	bd80      	pop	{r7, pc}
    235c:	0000213d 	.word	0x0000213d
    2360:	000019f9 	.word	0x000019f9
    2364:	20000000 	.word	0x20000000
    2368:	00001cb5 	.word	0x00001cb5
    236c:	00001c8d 	.word	0x00001c8d
    2370:	000019d5 	.word	0x000019d5
    2374:	00001ce5 	.word	0x00001ce5
    2378:	00001d09 	.word	0x00001d09
    237c:	00001d2d 	.word	0x00001d2d
    2380:	00001d49 	.word	0x00001d49
    2384:	00001d67 	.word	0x00001d67
    2388:	00001db9 	.word	0x00001db9

0000238c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2394:	6878      	ldr	r0, [r7, #4]
    2396:	4b05      	ldr	r3, [pc, #20]	; (23ac <_sercom_get_irq_num+0x20>)
    2398:	4798      	blx	r3
    239a:	4603      	mov	r3, r0
    239c:	009b      	lsls	r3, r3, #2
    239e:	b2db      	uxtb	r3, r3
    23a0:	332e      	adds	r3, #46	; 0x2e
    23a2:	b2db      	uxtb	r3, r3
}
    23a4:	4618      	mov	r0, r3
    23a6:	3708      	adds	r7, #8
    23a8:	46bd      	mov	sp, r7
    23aa:	bd80      	pop	{r7, pc}
    23ac:	00001f45 	.word	0x00001f45

000023b0 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    23b4:	4b03      	ldr	r3, [pc, #12]	; (23c4 <SERCOM2_0_Handler+0x14>)
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	4618      	mov	r0, r3
    23ba:	4b03      	ldr	r3, [pc, #12]	; (23c8 <SERCOM2_0_Handler+0x18>)
    23bc:	4798      	blx	r3
}
    23be:	bf00      	nop
    23c0:	bd80      	pop	{r7, pc}
    23c2:	bf00      	nop
    23c4:	20000074 	.word	0x20000074
    23c8:	0000203d 	.word	0x0000203d

000023cc <SERCOM2_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    23cc:	b580      	push	{r7, lr}
    23ce:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    23d0:	4b03      	ldr	r3, [pc, #12]	; (23e0 <SERCOM2_1_Handler+0x14>)
    23d2:	681b      	ldr	r3, [r3, #0]
    23d4:	4618      	mov	r0, r3
    23d6:	4b03      	ldr	r3, [pc, #12]	; (23e4 <SERCOM2_1_Handler+0x18>)
    23d8:	4798      	blx	r3
}
    23da:	bf00      	nop
    23dc:	bd80      	pop	{r7, pc}
    23de:	bf00      	nop
    23e0:	20000074 	.word	0x20000074
    23e4:	0000203d 	.word	0x0000203d

000023e8 <SERCOM2_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    23e8:	b580      	push	{r7, lr}
    23ea:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    23ec:	4b03      	ldr	r3, [pc, #12]	; (23fc <SERCOM2_2_Handler+0x14>)
    23ee:	681b      	ldr	r3, [r3, #0]
    23f0:	4618      	mov	r0, r3
    23f2:	4b03      	ldr	r3, [pc, #12]	; (2400 <SERCOM2_2_Handler+0x18>)
    23f4:	4798      	blx	r3
}
    23f6:	bf00      	nop
    23f8:	bd80      	pop	{r7, pc}
    23fa:	bf00      	nop
    23fc:	20000074 	.word	0x20000074
    2400:	0000203d 	.word	0x0000203d

00002404 <SERCOM2_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    2404:	b580      	push	{r7, lr}
    2406:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2408:	4b03      	ldr	r3, [pc, #12]	; (2418 <SERCOM2_3_Handler+0x14>)
    240a:	681b      	ldr	r3, [r3, #0]
    240c:	4618      	mov	r0, r3
    240e:	4b03      	ldr	r3, [pc, #12]	; (241c <SERCOM2_3_Handler+0x18>)
    2410:	4798      	blx	r3
}
    2412:	bf00      	nop
    2414:	bd80      	pop	{r7, pc}
    2416:	bf00      	nop
    2418:	20000074 	.word	0x20000074
    241c:	0000203d 	.word	0x0000203d

00002420 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2420:	b480      	push	{r7}
    2422:	b083      	sub	sp, #12
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    242a:	bf00      	nop
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	689a      	ldr	r2, [r3, #8]
    2430:	683b      	ldr	r3, [r7, #0]
    2432:	4013      	ands	r3, r2
    2434:	2b00      	cmp	r3, #0
    2436:	d1f9      	bne.n	242c <hri_tcc_wait_for_sync+0xc>
	};
}
    2438:	bf00      	nop
    243a:	370c      	adds	r7, #12
    243c:	46bd      	mov	sp, r7
    243e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2442:	4770      	bx	lr

00002444 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2444:	b480      	push	{r7}
    2446:	b083      	sub	sp, #12
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
    244c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	689a      	ldr	r2, [r3, #8]
    2452:	683b      	ldr	r3, [r7, #0]
    2454:	4013      	ands	r3, r2
    2456:	2b00      	cmp	r3, #0
    2458:	bf14      	ite	ne
    245a:	2301      	movne	r3, #1
    245c:	2300      	moveq	r3, #0
    245e:	b2db      	uxtb	r3, r3
}
    2460:	4618      	mov	r0, r3
    2462:	370c      	adds	r7, #12
    2464:	46bd      	mov	sp, r7
    2466:	f85d 7b04 	ldr.w	r7, [sp], #4
    246a:	4770      	bx	lr

0000246c <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    246c:	b580      	push	{r7, lr}
    246e:	b084      	sub	sp, #16
    2470:	af00      	add	r7, sp, #0
    2472:	6078      	str	r0, [r7, #4]
    2474:	460b      	mov	r3, r1
    2476:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    247e:	68fb      	ldr	r3, [r7, #12]
    2480:	f023 0302 	bic.w	r3, r3, #2
    2484:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    2486:	78fb      	ldrb	r3, [r7, #3]
    2488:	005b      	lsls	r3, r3, #1
    248a:	461a      	mov	r2, r3
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	4313      	orrs	r3, r2
    2490:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	68fa      	ldr	r2, [r7, #12]
    2496:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2498:	2103      	movs	r1, #3
    249a:	6878      	ldr	r0, [r7, #4]
    249c:	4b02      	ldr	r3, [pc, #8]	; (24a8 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    249e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    24a0:	bf00      	nop
    24a2:	3710      	adds	r7, #16
    24a4:	46bd      	mov	sp, r7
    24a6:	bd80      	pop	{r7, pc}
    24a8:	00002421 	.word	0x00002421

000024ac <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    24ac:	b580      	push	{r7, lr}
    24ae:	b082      	sub	sp, #8
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	f023 0202 	bic.w	r2, r3, #2
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    24c0:	2103      	movs	r1, #3
    24c2:	6878      	ldr	r0, [r7, #4]
    24c4:	4b02      	ldr	r3, [pc, #8]	; (24d0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    24c6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    24c8:	bf00      	nop
    24ca:	3708      	adds	r7, #8
    24cc:	46bd      	mov	sp, r7
    24ce:	bd80      	pop	{r7, pc}
    24d0:	00002421 	.word	0x00002421

000024d4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    24d4:	b580      	push	{r7, lr}
    24d6:	b084      	sub	sp, #16
    24d8:	af00      	add	r7, sp, #0
    24da:	6078      	str	r0, [r7, #4]
    24dc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    24de:	2103      	movs	r1, #3
    24e0:	6878      	ldr	r0, [r7, #4]
    24e2:	4b07      	ldr	r3, [pc, #28]	; (2500 <hri_tcc_get_CTRLA_reg+0x2c>)
    24e4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    24e6:	687b      	ldr	r3, [r7, #4]
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    24ec:	68fa      	ldr	r2, [r7, #12]
    24ee:	683b      	ldr	r3, [r7, #0]
    24f0:	4013      	ands	r3, r2
    24f2:	60fb      	str	r3, [r7, #12]
	return tmp;
    24f4:	68fb      	ldr	r3, [r7, #12]
}
    24f6:	4618      	mov	r0, r3
    24f8:	3710      	adds	r7, #16
    24fa:	46bd      	mov	sp, r7
    24fc:	bd80      	pop	{r7, pc}
    24fe:	bf00      	nop
    2500:	00002421 	.word	0x00002421

00002504 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    2504:	b580      	push	{r7, lr}
    2506:	b082      	sub	sp, #8
    2508:	af00      	add	r7, sp, #0
    250a:	6078      	str	r0, [r7, #4]
    250c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	683a      	ldr	r2, [r7, #0]
    2512:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2514:	2103      	movs	r1, #3
    2516:	6878      	ldr	r0, [r7, #4]
    2518:	4b02      	ldr	r3, [pc, #8]	; (2524 <hri_tcc_write_CTRLA_reg+0x20>)
    251a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    251c:	bf00      	nop
    251e:	3708      	adds	r7, #8
    2520:	46bd      	mov	sp, r7
    2522:	bd80      	pop	{r7, pc}
    2524:	00002421 	.word	0x00002421

00002528 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    2528:	b580      	push	{r7, lr}
    252a:	b082      	sub	sp, #8
    252c:	af00      	add	r7, sp, #0
    252e:	6078      	str	r0, [r7, #4]
    2530:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	683a      	ldr	r2, [r7, #0]
    2536:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    2538:	f643 71ff 	movw	r1, #16383	; 0x3fff
    253c:	6878      	ldr	r0, [r7, #4]
    253e:	4b03      	ldr	r3, [pc, #12]	; (254c <hri_tcc_write_WAVE_reg+0x24>)
    2540:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2542:	bf00      	nop
    2544:	3708      	adds	r7, #8
    2546:	46bd      	mov	sp, r7
    2548:	bd80      	pop	{r7, pc}
    254a:	bf00      	nop
    254c:	00002421 	.word	0x00002421

00002550 <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    2550:	b580      	push	{r7, lr}
    2552:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    2554:	2101      	movs	r1, #1
    2556:	4817      	ldr	r0, [pc, #92]	; (25b4 <PWM_0_init+0x64>)
    2558:	4b17      	ldr	r3, [pc, #92]	; (25b8 <PWM_0_init+0x68>)
    255a:	4798      	blx	r3
    255c:	4603      	mov	r3, r0
    255e:	f083 0301 	eor.w	r3, r3, #1
    2562:	b2db      	uxtb	r3, r3
    2564:	2b00      	cmp	r3, #0
    2566:	d011      	beq.n	258c <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    2568:	2102      	movs	r1, #2
    256a:	4812      	ldr	r0, [pc, #72]	; (25b4 <PWM_0_init+0x64>)
    256c:	4b13      	ldr	r3, [pc, #76]	; (25bc <PWM_0_init+0x6c>)
    256e:	4798      	blx	r3
    2570:	4603      	mov	r3, r0
    2572:	2b00      	cmp	r3, #0
    2574:	d006      	beq.n	2584 <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    2576:	480f      	ldr	r0, [pc, #60]	; (25b4 <PWM_0_init+0x64>)
    2578:	4b11      	ldr	r3, [pc, #68]	; (25c0 <PWM_0_init+0x70>)
    257a:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    257c:	2102      	movs	r1, #2
    257e:	480d      	ldr	r0, [pc, #52]	; (25b4 <PWM_0_init+0x64>)
    2580:	4b10      	ldr	r3, [pc, #64]	; (25c4 <PWM_0_init+0x74>)
    2582:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    2584:	2101      	movs	r1, #1
    2586:	480b      	ldr	r0, [pc, #44]	; (25b4 <PWM_0_init+0x64>)
    2588:	4b0f      	ldr	r3, [pc, #60]	; (25c8 <PWM_0_init+0x78>)
    258a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    258c:	2101      	movs	r1, #1
    258e:	4809      	ldr	r0, [pc, #36]	; (25b4 <PWM_0_init+0x64>)
    2590:	4b0c      	ldr	r3, [pc, #48]	; (25c4 <PWM_0_init+0x74>)
    2592:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    2594:	f44f 7180 	mov.w	r1, #256	; 0x100
    2598:	4806      	ldr	r0, [pc, #24]	; (25b4 <PWM_0_init+0x64>)
    259a:	4b0b      	ldr	r3, [pc, #44]	; (25c8 <PWM_0_init+0x78>)
    259c:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    259e:	2102      	movs	r1, #2
    25a0:	4804      	ldr	r0, [pc, #16]	; (25b4 <PWM_0_init+0x64>)
    25a2:	4b0a      	ldr	r3, [pc, #40]	; (25cc <PWM_0_init+0x7c>)
    25a4:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    25a6:	2101      	movs	r1, #1
    25a8:	4802      	ldr	r0, [pc, #8]	; (25b4 <PWM_0_init+0x64>)
    25aa:	4b09      	ldr	r3, [pc, #36]	; (25d0 <PWM_0_init+0x80>)
    25ac:	4798      	blx	r3

	return 0;
    25ae:	2300      	movs	r3, #0
}
    25b0:	4618      	mov	r0, r3
    25b2:	bd80      	pop	{r7, pc}
    25b4:	41016000 	.word	0x41016000
    25b8:	00002445 	.word	0x00002445
    25bc:	000024d5 	.word	0x000024d5
    25c0:	000024ad 	.word	0x000024ad
    25c4:	00002421 	.word	0x00002421
    25c8:	00002505 	.word	0x00002505
    25cc:	00002529 	.word	0x00002529
    25d0:	0000246d 	.word	0x0000246d

000025d4 <__NVIC_EnableIRQ>:
{
    25d4:	b480      	push	{r7}
    25d6:	b083      	sub	sp, #12
    25d8:	af00      	add	r7, sp, #0
    25da:	4603      	mov	r3, r0
    25dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    25de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    25e2:	2b00      	cmp	r3, #0
    25e4:	db0b      	blt.n	25fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25e6:	4909      	ldr	r1, [pc, #36]	; (260c <__NVIC_EnableIRQ+0x38>)
    25e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    25ec:	095b      	lsrs	r3, r3, #5
    25ee:	88fa      	ldrh	r2, [r7, #6]
    25f0:	f002 021f 	and.w	r2, r2, #31
    25f4:	2001      	movs	r0, #1
    25f6:	fa00 f202 	lsl.w	r2, r0, r2
    25fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    25fe:	bf00      	nop
    2600:	370c      	adds	r7, #12
    2602:	46bd      	mov	sp, r7
    2604:	f85d 7b04 	ldr.w	r7, [sp], #4
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	e000e100 	.word	0xe000e100

00002610 <__NVIC_DisableIRQ>:
{
    2610:	b480      	push	{r7}
    2612:	b083      	sub	sp, #12
    2614:	af00      	add	r7, sp, #0
    2616:	4603      	mov	r3, r0
    2618:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    261a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    261e:	2b00      	cmp	r3, #0
    2620:	db10      	blt.n	2644 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2622:	490b      	ldr	r1, [pc, #44]	; (2650 <__NVIC_DisableIRQ+0x40>)
    2624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2628:	095b      	lsrs	r3, r3, #5
    262a:	88fa      	ldrh	r2, [r7, #6]
    262c:	f002 021f 	and.w	r2, r2, #31
    2630:	2001      	movs	r0, #1
    2632:	fa00 f202 	lsl.w	r2, r0, r2
    2636:	3320      	adds	r3, #32
    2638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    263c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2640:	f3bf 8f6f 	isb	sy
}
    2644:	bf00      	nop
    2646:	370c      	adds	r7, #12
    2648:	46bd      	mov	sp, r7
    264a:	f85d 7b04 	ldr.w	r7, [sp], #4
    264e:	4770      	bx	lr
    2650:	e000e100 	.word	0xe000e100

00002654 <__NVIC_ClearPendingIRQ>:
{
    2654:	b480      	push	{r7}
    2656:	b083      	sub	sp, #12
    2658:	af00      	add	r7, sp, #0
    265a:	4603      	mov	r3, r0
    265c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2662:	2b00      	cmp	r3, #0
    2664:	db0c      	blt.n	2680 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2666:	4909      	ldr	r1, [pc, #36]	; (268c <__NVIC_ClearPendingIRQ+0x38>)
    2668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    266c:	095b      	lsrs	r3, r3, #5
    266e:	88fa      	ldrh	r2, [r7, #6]
    2670:	f002 021f 	and.w	r2, r2, #31
    2674:	2001      	movs	r0, #1
    2676:	fa00 f202 	lsl.w	r2, r0, r2
    267a:	3360      	adds	r3, #96	; 0x60
    267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2680:	bf00      	nop
    2682:	370c      	adds	r7, #12
    2684:	46bd      	mov	sp, r7
    2686:	f85d 7b04 	ldr.w	r7, [sp], #4
    268a:	4770      	bx	lr
    268c:	e000e100 	.word	0xe000e100

00002690 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2690:	b480      	push	{r7}
    2692:	b083      	sub	sp, #12
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
    2698:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    269a:	bf00      	nop
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	691a      	ldr	r2, [r3, #16]
    26a0:	683b      	ldr	r3, [r7, #0]
    26a2:	4013      	ands	r3, r2
    26a4:	2b00      	cmp	r3, #0
    26a6:	d1f9      	bne.n	269c <hri_tc_wait_for_sync+0xc>
	};
}
    26a8:	bf00      	nop
    26aa:	370c      	adds	r7, #12
    26ac:	46bd      	mov	sp, r7
    26ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b2:	4770      	bx	lr

000026b4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    26b4:	b480      	push	{r7}
    26b6:	b083      	sub	sp, #12
    26b8:	af00      	add	r7, sp, #0
    26ba:	6078      	str	r0, [r7, #4]
    26bc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    26be:	687b      	ldr	r3, [r7, #4]
    26c0:	691a      	ldr	r2, [r3, #16]
    26c2:	683b      	ldr	r3, [r7, #0]
    26c4:	4013      	ands	r3, r2
    26c6:	2b00      	cmp	r3, #0
    26c8:	bf14      	ite	ne
    26ca:	2301      	movne	r3, #1
    26cc:	2300      	moveq	r3, #0
    26ce:	b2db      	uxtb	r3, r3
}
    26d0:	4618      	mov	r0, r3
    26d2:	370c      	adds	r7, #12
    26d4:	46bd      	mov	sp, r7
    26d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26da:	4770      	bx	lr

000026dc <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    26dc:	b480      	push	{r7}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	7a9b      	ldrb	r3, [r3, #10]
    26e8:	b2db      	uxtb	r3, r3
    26ea:	f003 0301 	and.w	r3, r3, #1
    26ee:	2b00      	cmp	r3, #0
    26f0:	bf14      	ite	ne
    26f2:	2301      	movne	r3, #1
    26f4:	2300      	moveq	r3, #0
    26f6:	b2db      	uxtb	r3, r3
}
    26f8:	4618      	mov	r0, r3
    26fa:	370c      	adds	r7, #12
    26fc:	46bd      	mov	sp, r7
    26fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2702:	4770      	bx	lr

00002704 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    2704:	b480      	push	{r7}
    2706:	b083      	sub	sp, #12
    2708:	af00      	add	r7, sp, #0
    270a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	2201      	movs	r2, #1
    2710:	729a      	strb	r2, [r3, #10]
}
    2712:	bf00      	nop
    2714:	370c      	adds	r7, #12
    2716:	46bd      	mov	sp, r7
    2718:	f85d 7b04 	ldr.w	r7, [sp], #4
    271c:	4770      	bx	lr

0000271e <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    271e:	b480      	push	{r7}
    2720:	b083      	sub	sp, #12
    2722:	af00      	add	r7, sp, #0
    2724:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	2201      	movs	r2, #1
    272a:	725a      	strb	r2, [r3, #9]
}
    272c:	bf00      	nop
    272e:	370c      	adds	r7, #12
    2730:	46bd      	mov	sp, r7
    2732:	f85d 7b04 	ldr.w	r7, [sp], #4
    2736:	4770      	bx	lr

00002738 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2738:	b580      	push	{r7, lr}
    273a:	b082      	sub	sp, #8
    273c:	af00      	add	r7, sp, #0
    273e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	f023 0202 	bic.w	r2, r3, #2
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    274c:	2103      	movs	r1, #3
    274e:	6878      	ldr	r0, [r7, #4]
    2750:	4b02      	ldr	r3, [pc, #8]	; (275c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    2752:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2754:	bf00      	nop
    2756:	3708      	adds	r7, #8
    2758:	46bd      	mov	sp, r7
    275a:	bd80      	pop	{r7, pc}
    275c:	00002691 	.word	0x00002691

00002760 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    2760:	b580      	push	{r7, lr}
    2762:	b084      	sub	sp, #16
    2764:	af00      	add	r7, sp, #0
    2766:	6078      	str	r0, [r7, #4]
    2768:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    276a:	2103      	movs	r1, #3
    276c:	6878      	ldr	r0, [r7, #4]
    276e:	4b07      	ldr	r3, [pc, #28]	; (278c <hri_tc_get_CTRLA_reg+0x2c>)
    2770:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2778:	68fa      	ldr	r2, [r7, #12]
    277a:	683b      	ldr	r3, [r7, #0]
    277c:	4013      	ands	r3, r2
    277e:	60fb      	str	r3, [r7, #12]
	return tmp;
    2780:	68fb      	ldr	r3, [r7, #12]
}
    2782:	4618      	mov	r0, r3
    2784:	3710      	adds	r7, #16
    2786:	46bd      	mov	sp, r7
    2788:	bd80      	pop	{r7, pc}
    278a:	bf00      	nop
    278c:	00002691 	.word	0x00002691

00002790 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    2790:	b580      	push	{r7, lr}
    2792:	b082      	sub	sp, #8
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    279a:	687b      	ldr	r3, [r7, #4]
    279c:	683a      	ldr	r2, [r7, #0]
    279e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    27a0:	2103      	movs	r1, #3
    27a2:	6878      	ldr	r0, [r7, #4]
    27a4:	4b02      	ldr	r3, [pc, #8]	; (27b0 <hri_tc_write_CTRLA_reg+0x20>)
    27a6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    27a8:	bf00      	nop
    27aa:	3708      	adds	r7, #8
    27ac:	46bd      	mov	sp, r7
    27ae:	bd80      	pop	{r7, pc}
    27b0:	00002691 	.word	0x00002691

000027b4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    27b4:	b480      	push	{r7}
    27b6:	b083      	sub	sp, #12
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
    27bc:	460b      	mov	r3, r1
    27be:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	887a      	ldrh	r2, [r7, #2]
    27c4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    27c6:	bf00      	nop
    27c8:	370c      	adds	r7, #12
    27ca:	46bd      	mov	sp, r7
    27cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    27d0:	4770      	bx	lr

000027d2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    27d2:	b480      	push	{r7}
    27d4:	b083      	sub	sp, #12
    27d6:	af00      	add	r7, sp, #0
    27d8:	6078      	str	r0, [r7, #4]
    27da:	460b      	mov	r3, r1
    27dc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	78fa      	ldrb	r2, [r7, #3]
    27e2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    27e4:	bf00      	nop
    27e6:	370c      	adds	r7, #12
    27e8:	46bd      	mov	sp, r7
    27ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ee:	4770      	bx	lr

000027f0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    27f0:	b480      	push	{r7}
    27f2:	b083      	sub	sp, #12
    27f4:	af00      	add	r7, sp, #0
    27f6:	6078      	str	r0, [r7, #4]
    27f8:	460b      	mov	r3, r1
    27fa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	78fa      	ldrb	r2, [r7, #3]
    2800:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    2802:	bf00      	nop
    2804:	370c      	adds	r7, #12
    2806:	46bd      	mov	sp, r7
    2808:	f85d 7b04 	ldr.w	r7, [sp], #4
    280c:	4770      	bx	lr
	...

00002810 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    2810:	b580      	push	{r7, lr}
    2812:	b082      	sub	sp, #8
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
    2818:	460b      	mov	r3, r1
    281a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	78fa      	ldrb	r2, [r7, #3]
    2820:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    2822:	2120      	movs	r1, #32
    2824:	6878      	ldr	r0, [r7, #4]
    2826:	4b03      	ldr	r3, [pc, #12]	; (2834 <hri_tccount8_write_PER_reg+0x24>)
    2828:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    282a:	bf00      	nop
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop
    2834:	00002691 	.word	0x00002691

00002838 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    2838:	b580      	push	{r7, lr}
    283a:	b082      	sub	sp, #8
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	460b      	mov	r3, r1
    2842:	70fb      	strb	r3, [r7, #3]
    2844:	4613      	mov	r3, r2
    2846:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2848:	78fb      	ldrb	r3, [r7, #3]
    284a:	687a      	ldr	r2, [r7, #4]
    284c:	4413      	add	r3, r2
    284e:	78ba      	ldrb	r2, [r7, #2]
    2850:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2852:	21c0      	movs	r1, #192	; 0xc0
    2854:	6878      	ldr	r0, [r7, #4]
    2856:	4b03      	ldr	r3, [pc, #12]	; (2864 <hri_tccount8_write_CC_reg+0x2c>)
    2858:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    285a:	bf00      	nop
    285c:	3708      	adds	r7, #8
    285e:	46bd      	mov	sp, r7
    2860:	bd80      	pop	{r7, pc}
    2862:	bf00      	nop
    2864:	00002691 	.word	0x00002691

00002868 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    2870:	460b      	mov	r3, r1
    2872:	70fb      	strb	r3, [r7, #3]
    2874:	4613      	mov	r3, r2
    2876:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2878:	78fb      	ldrb	r3, [r7, #3]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	330c      	adds	r3, #12
    287e:	005b      	lsls	r3, r3, #1
    2880:	4413      	add	r3, r2
    2882:	883a      	ldrh	r2, [r7, #0]
    2884:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    2886:	21c0      	movs	r1, #192	; 0xc0
    2888:	6878      	ldr	r0, [r7, #4]
    288a:	4b03      	ldr	r3, [pc, #12]	; (2898 <hri_tccount16_write_CC_reg+0x30>)
    288c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    288e:	bf00      	nop
    2890:	3708      	adds	r7, #8
    2892:	46bd      	mov	sp, r7
    2894:	bd80      	pop	{r7, pc}
    2896:	bf00      	nop
    2898:	00002691 	.word	0x00002691

0000289c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    289c:	b580      	push	{r7, lr}
    289e:	b084      	sub	sp, #16
    28a0:	af00      	add	r7, sp, #0
    28a2:	60f8      	str	r0, [r7, #12]
    28a4:	460b      	mov	r3, r1
    28a6:	607a      	str	r2, [r7, #4]
    28a8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    28aa:	7afb      	ldrb	r3, [r7, #11]
    28ac:	68fa      	ldr	r2, [r7, #12]
    28ae:	3306      	adds	r3, #6
    28b0:	009b      	lsls	r3, r3, #2
    28b2:	4413      	add	r3, r2
    28b4:	687a      	ldr	r2, [r7, #4]
    28b6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    28b8:	21c0      	movs	r1, #192	; 0xc0
    28ba:	68f8      	ldr	r0, [r7, #12]
    28bc:	4b02      	ldr	r3, [pc, #8]	; (28c8 <hri_tccount32_write_CC_reg+0x2c>)
    28be:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    28c0:	bf00      	nop
    28c2:	3710      	adds	r7, #16
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	00002691 	.word	0x00002691

000028cc <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b084      	sub	sp, #16
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    28d6:	6838      	ldr	r0, [r7, #0]
    28d8:	4b93      	ldr	r3, [pc, #588]	; (2b28 <_timer_init+0x25c>)
    28da:	4798      	blx	r3
    28dc:	4603      	mov	r3, r0
    28de:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	683a      	ldr	r2, [r7, #0]
    28e4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    28e6:	228f      	movs	r2, #143	; 0x8f
    28e8:	4990      	ldr	r1, [pc, #576]	; (2b2c <_timer_init+0x260>)
    28ea:	2001      	movs	r0, #1
    28ec:	4b90      	ldr	r3, [pc, #576]	; (2b30 <_timer_init+0x264>)
    28ee:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    28f0:	2101      	movs	r1, #1
    28f2:	6838      	ldr	r0, [r7, #0]
    28f4:	4b8f      	ldr	r3, [pc, #572]	; (2b34 <_timer_init+0x268>)
    28f6:	4798      	blx	r3
    28f8:	4603      	mov	r3, r0
    28fa:	f083 0301 	eor.w	r3, r3, #1
    28fe:	b2db      	uxtb	r3, r3
    2900:	2b00      	cmp	r3, #0
    2902:	d011      	beq.n	2928 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2904:	2102      	movs	r1, #2
    2906:	6838      	ldr	r0, [r7, #0]
    2908:	4b8b      	ldr	r3, [pc, #556]	; (2b38 <_timer_init+0x26c>)
    290a:	4798      	blx	r3
    290c:	4603      	mov	r3, r0
    290e:	2b00      	cmp	r3, #0
    2910:	d006      	beq.n	2920 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    2912:	6838      	ldr	r0, [r7, #0]
    2914:	4b89      	ldr	r3, [pc, #548]	; (2b3c <_timer_init+0x270>)
    2916:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    2918:	2102      	movs	r1, #2
    291a:	6838      	ldr	r0, [r7, #0]
    291c:	4b88      	ldr	r3, [pc, #544]	; (2b40 <_timer_init+0x274>)
    291e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    2920:	2101      	movs	r1, #1
    2922:	6838      	ldr	r0, [r7, #0]
    2924:	4b87      	ldr	r3, [pc, #540]	; (2b44 <_timer_init+0x278>)
    2926:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    2928:	2101      	movs	r1, #1
    292a:	6838      	ldr	r0, [r7, #0]
    292c:	4b84      	ldr	r3, [pc, #528]	; (2b40 <_timer_init+0x274>)
    292e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2930:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2934:	4984      	ldr	r1, [pc, #528]	; (2b48 <_timer_init+0x27c>)
    2936:	4613      	mov	r3, r2
    2938:	009b      	lsls	r3, r3, #2
    293a:	4413      	add	r3, r2
    293c:	009b      	lsls	r3, r3, #2
    293e:	440b      	add	r3, r1
    2940:	3304      	adds	r3, #4
    2942:	681b      	ldr	r3, [r3, #0]
    2944:	4619      	mov	r1, r3
    2946:	6838      	ldr	r0, [r7, #0]
    2948:	4b7e      	ldr	r3, [pc, #504]	; (2b44 <_timer_init+0x278>)
    294a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    294c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2950:	497d      	ldr	r1, [pc, #500]	; (2b48 <_timer_init+0x27c>)
    2952:	4613      	mov	r3, r2
    2954:	009b      	lsls	r3, r3, #2
    2956:	4413      	add	r3, r2
    2958:	009b      	lsls	r3, r3, #2
    295a:	440b      	add	r3, r1
    295c:	330a      	adds	r3, #10
    295e:	781b      	ldrb	r3, [r3, #0]
    2960:	4619      	mov	r1, r3
    2962:	6838      	ldr	r0, [r7, #0]
    2964:	4b79      	ldr	r3, [pc, #484]	; (2b4c <_timer_init+0x280>)
    2966:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2968:	f997 200f 	ldrsb.w	r2, [r7, #15]
    296c:	4976      	ldr	r1, [pc, #472]	; (2b48 <_timer_init+0x27c>)
    296e:	4613      	mov	r3, r2
    2970:	009b      	lsls	r3, r3, #2
    2972:	4413      	add	r3, r2
    2974:	009b      	lsls	r3, r3, #2
    2976:	440b      	add	r3, r1
    2978:	3308      	adds	r3, #8
    297a:	881b      	ldrh	r3, [r3, #0]
    297c:	4619      	mov	r1, r3
    297e:	6838      	ldr	r0, [r7, #0]
    2980:	4b73      	ldr	r3, [pc, #460]	; (2b50 <_timer_init+0x284>)
    2982:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    2984:	2101      	movs	r1, #1
    2986:	6838      	ldr	r0, [r7, #0]
    2988:	4b72      	ldr	r3, [pc, #456]	; (2b54 <_timer_init+0x288>)
    298a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    298c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2990:	496d      	ldr	r1, [pc, #436]	; (2b48 <_timer_init+0x27c>)
    2992:	4613      	mov	r3, r2
    2994:	009b      	lsls	r3, r3, #2
    2996:	4413      	add	r3, r2
    2998:	009b      	lsls	r3, r3, #2
    299a:	440b      	add	r3, r1
    299c:	3304      	adds	r3, #4
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	f003 030c 	and.w	r3, r3, #12
    29a4:	2b08      	cmp	r3, #8
    29a6:	d11e      	bne.n	29e6 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    29a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    29ac:	4966      	ldr	r1, [pc, #408]	; (2b48 <_timer_init+0x27c>)
    29ae:	4613      	mov	r3, r2
    29b0:	009b      	lsls	r3, r3, #2
    29b2:	4413      	add	r3, r2
    29b4:	009b      	lsls	r3, r3, #2
    29b6:	440b      	add	r3, r1
    29b8:	330c      	adds	r3, #12
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	461a      	mov	r2, r3
    29be:	2100      	movs	r1, #0
    29c0:	6838      	ldr	r0, [r7, #0]
    29c2:	4b65      	ldr	r3, [pc, #404]	; (2b58 <_timer_init+0x28c>)
    29c4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    29c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    29ca:	495f      	ldr	r1, [pc, #380]	; (2b48 <_timer_init+0x27c>)
    29cc:	4613      	mov	r3, r2
    29ce:	009b      	lsls	r3, r3, #2
    29d0:	4413      	add	r3, r2
    29d2:	009b      	lsls	r3, r3, #2
    29d4:	440b      	add	r3, r1
    29d6:	3310      	adds	r3, #16
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	461a      	mov	r2, r3
    29dc:	2101      	movs	r1, #1
    29de:	6838      	ldr	r0, [r7, #0]
    29e0:	4b5d      	ldr	r3, [pc, #372]	; (2b58 <_timer_init+0x28c>)
    29e2:	4798      	blx	r3
    29e4:	e06a      	b.n	2abc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    29e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    29ea:	4957      	ldr	r1, [pc, #348]	; (2b48 <_timer_init+0x27c>)
    29ec:	4613      	mov	r3, r2
    29ee:	009b      	lsls	r3, r3, #2
    29f0:	4413      	add	r3, r2
    29f2:	009b      	lsls	r3, r3, #2
    29f4:	440b      	add	r3, r1
    29f6:	3304      	adds	r3, #4
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	f003 030c 	and.w	r3, r3, #12
    29fe:	2b00      	cmp	r3, #0
    2a00:	d120      	bne.n	2a44 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2a02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a06:	4950      	ldr	r1, [pc, #320]	; (2b48 <_timer_init+0x27c>)
    2a08:	4613      	mov	r3, r2
    2a0a:	009b      	lsls	r3, r3, #2
    2a0c:	4413      	add	r3, r2
    2a0e:	009b      	lsls	r3, r3, #2
    2a10:	440b      	add	r3, r1
    2a12:	330c      	adds	r3, #12
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	b29b      	uxth	r3, r3
    2a18:	461a      	mov	r2, r3
    2a1a:	2100      	movs	r1, #0
    2a1c:	6838      	ldr	r0, [r7, #0]
    2a1e:	4b4f      	ldr	r3, [pc, #316]	; (2b5c <_timer_init+0x290>)
    2a20:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2a22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a26:	4948      	ldr	r1, [pc, #288]	; (2b48 <_timer_init+0x27c>)
    2a28:	4613      	mov	r3, r2
    2a2a:	009b      	lsls	r3, r3, #2
    2a2c:	4413      	add	r3, r2
    2a2e:	009b      	lsls	r3, r3, #2
    2a30:	440b      	add	r3, r1
    2a32:	3310      	adds	r3, #16
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	b29b      	uxth	r3, r3
    2a38:	461a      	mov	r2, r3
    2a3a:	2101      	movs	r1, #1
    2a3c:	6838      	ldr	r0, [r7, #0]
    2a3e:	4b47      	ldr	r3, [pc, #284]	; (2b5c <_timer_init+0x290>)
    2a40:	4798      	blx	r3
    2a42:	e03b      	b.n	2abc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2a44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a48:	493f      	ldr	r1, [pc, #252]	; (2b48 <_timer_init+0x27c>)
    2a4a:	4613      	mov	r3, r2
    2a4c:	009b      	lsls	r3, r3, #2
    2a4e:	4413      	add	r3, r2
    2a50:	009b      	lsls	r3, r3, #2
    2a52:	440b      	add	r3, r1
    2a54:	3304      	adds	r3, #4
    2a56:	681b      	ldr	r3, [r3, #0]
    2a58:	f003 030c 	and.w	r3, r3, #12
    2a5c:	2b04      	cmp	r3, #4
    2a5e:	d12d      	bne.n	2abc <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2a60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a64:	4938      	ldr	r1, [pc, #224]	; (2b48 <_timer_init+0x27c>)
    2a66:	4613      	mov	r3, r2
    2a68:	009b      	lsls	r3, r3, #2
    2a6a:	4413      	add	r3, r2
    2a6c:	009b      	lsls	r3, r3, #2
    2a6e:	440b      	add	r3, r1
    2a70:	330c      	adds	r3, #12
    2a72:	681b      	ldr	r3, [r3, #0]
    2a74:	b2db      	uxtb	r3, r3
    2a76:	461a      	mov	r2, r3
    2a78:	2100      	movs	r1, #0
    2a7a:	6838      	ldr	r0, [r7, #0]
    2a7c:	4b38      	ldr	r3, [pc, #224]	; (2b60 <_timer_init+0x294>)
    2a7e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2a80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a84:	4930      	ldr	r1, [pc, #192]	; (2b48 <_timer_init+0x27c>)
    2a86:	4613      	mov	r3, r2
    2a88:	009b      	lsls	r3, r3, #2
    2a8a:	4413      	add	r3, r2
    2a8c:	009b      	lsls	r3, r3, #2
    2a8e:	440b      	add	r3, r1
    2a90:	3310      	adds	r3, #16
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	b2db      	uxtb	r3, r3
    2a96:	461a      	mov	r2, r3
    2a98:	2101      	movs	r1, #1
    2a9a:	6838      	ldr	r0, [r7, #0]
    2a9c:	4b30      	ldr	r3, [pc, #192]	; (2b60 <_timer_init+0x294>)
    2a9e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2aa0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2aa4:	4928      	ldr	r1, [pc, #160]	; (2b48 <_timer_init+0x27c>)
    2aa6:	4613      	mov	r3, r2
    2aa8:	009b      	lsls	r3, r3, #2
    2aaa:	4413      	add	r3, r2
    2aac:	009b      	lsls	r3, r3, #2
    2aae:	440b      	add	r3, r1
    2ab0:	330b      	adds	r3, #11
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	4619      	mov	r1, r3
    2ab6:	6838      	ldr	r0, [r7, #0]
    2ab8:	4b2a      	ldr	r3, [pc, #168]	; (2b64 <_timer_init+0x298>)
    2aba:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    2abc:	6838      	ldr	r0, [r7, #0]
    2abe:	4b2a      	ldr	r3, [pc, #168]	; (2b68 <_timer_init+0x29c>)
    2ac0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    2ac2:	6879      	ldr	r1, [r7, #4]
    2ac4:	6838      	ldr	r0, [r7, #0]
    2ac6:	4b29      	ldr	r3, [pc, #164]	; (2b6c <_timer_init+0x2a0>)
    2ac8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2aca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2ace:	491e      	ldr	r1, [pc, #120]	; (2b48 <_timer_init+0x27c>)
    2ad0:	4613      	mov	r3, r2
    2ad2:	009b      	lsls	r3, r3, #2
    2ad4:	4413      	add	r3, r2
    2ad6:	009b      	lsls	r3, r3, #2
    2ad8:	440b      	add	r3, r1
    2ada:	3302      	adds	r3, #2
    2adc:	f9b3 3000 	ldrsh.w	r3, [r3]
    2ae0:	4618      	mov	r0, r3
    2ae2:	4b23      	ldr	r3, [pc, #140]	; (2b70 <_timer_init+0x2a4>)
    2ae4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2ae6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2aea:	4917      	ldr	r1, [pc, #92]	; (2b48 <_timer_init+0x27c>)
    2aec:	4613      	mov	r3, r2
    2aee:	009b      	lsls	r3, r3, #2
    2af0:	4413      	add	r3, r2
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	440b      	add	r3, r1
    2af6:	3302      	adds	r3, #2
    2af8:	f9b3 3000 	ldrsh.w	r3, [r3]
    2afc:	4618      	mov	r0, r3
    2afe:	4b1d      	ldr	r3, [pc, #116]	; (2b74 <_timer_init+0x2a8>)
    2b00:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    2b02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2b06:	4910      	ldr	r1, [pc, #64]	; (2b48 <_timer_init+0x27c>)
    2b08:	4613      	mov	r3, r2
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	4413      	add	r3, r2
    2b0e:	009b      	lsls	r3, r3, #2
    2b10:	440b      	add	r3, r1
    2b12:	3302      	adds	r3, #2
    2b14:	f9b3 3000 	ldrsh.w	r3, [r3]
    2b18:	4618      	mov	r0, r3
    2b1a:	4b17      	ldr	r3, [pc, #92]	; (2b78 <_timer_init+0x2ac>)
    2b1c:	4798      	blx	r3

	return ERR_NONE;
    2b1e:	2300      	movs	r3, #0
}
    2b20:	4618      	mov	r0, r3
    2b22:	3710      	adds	r7, #16
    2b24:	46bd      	mov	sp, r7
    2b26:	bd80      	pop	{r7, pc}
    2b28:	00002bfd 	.word	0x00002bfd
    2b2c:	00003188 	.word	0x00003188
    2b30:	0000133d 	.word	0x0000133d
    2b34:	000026b5 	.word	0x000026b5
    2b38:	00002761 	.word	0x00002761
    2b3c:	00002739 	.word	0x00002739
    2b40:	00002691 	.word	0x00002691
    2b44:	00002791 	.word	0x00002791
    2b48:	20000018 	.word	0x20000018
    2b4c:	000027f1 	.word	0x000027f1
    2b50:	000027b5 	.word	0x000027b5
    2b54:	000027d3 	.word	0x000027d3
    2b58:	0000289d 	.word	0x0000289d
    2b5c:	00002869 	.word	0x00002869
    2b60:	00002839 	.word	0x00002839
    2b64:	00002811 	.word	0x00002811
    2b68:	0000271f 	.word	0x0000271f
    2b6c:	00002c65 	.word	0x00002c65
    2b70:	00002611 	.word	0x00002611
    2b74:	00002655 	.word	0x00002655
    2b78:	000025d5 	.word	0x000025d5

00002b7c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    2b7c:	b480      	push	{r7}
    2b7e:	af00      	add	r7, sp, #0
	return NULL;
    2b80:	2300      	movs	r3, #0
}
    2b82:	4618      	mov	r0, r3
    2b84:	46bd      	mov	sp, r7
    2b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b8a:	4770      	bx	lr

00002b8c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b084      	sub	sp, #16
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	68db      	ldr	r3, [r3, #12]
    2b98:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2b9a:	68f8      	ldr	r0, [r7, #12]
    2b9c:	4b07      	ldr	r3, [pc, #28]	; (2bbc <tc_interrupt_handler+0x30>)
    2b9e:	4798      	blx	r3
    2ba0:	4603      	mov	r3, r0
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d006      	beq.n	2bb4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    2ba6:	68f8      	ldr	r0, [r7, #12]
    2ba8:	4b05      	ldr	r3, [pc, #20]	; (2bc0 <tc_interrupt_handler+0x34>)
    2baa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	6878      	ldr	r0, [r7, #4]
    2bb2:	4798      	blx	r3
	}
}
    2bb4:	bf00      	nop
    2bb6:	3710      	adds	r7, #16
    2bb8:	46bd      	mov	sp, r7
    2bba:	bd80      	pop	{r7, pc}
    2bbc:	000026dd 	.word	0x000026dd
    2bc0:	00002705 	.word	0x00002705

00002bc4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    2bc8:	4b03      	ldr	r3, [pc, #12]	; (2bd8 <TC0_Handler+0x14>)
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	4618      	mov	r0, r3
    2bce:	4b03      	ldr	r3, [pc, #12]	; (2bdc <TC0_Handler+0x18>)
    2bd0:	4798      	blx	r3
}
    2bd2:	bf00      	nop
    2bd4:	bd80      	pop	{r7, pc}
    2bd6:	bf00      	nop
    2bd8:	200000a0 	.word	0x200000a0
    2bdc:	00002b8d 	.word	0x00002b8d

00002be0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    2be0:	b580      	push	{r7, lr}
    2be2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    2be4:	4b03      	ldr	r3, [pc, #12]	; (2bf4 <TC2_Handler+0x14>)
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	4618      	mov	r0, r3
    2bea:	4b03      	ldr	r3, [pc, #12]	; (2bf8 <TC2_Handler+0x18>)
    2bec:	4798      	blx	r3
}
    2bee:	bf00      	nop
    2bf0:	bd80      	pop	{r7, pc}
    2bf2:	bf00      	nop
    2bf4:	200000a4 	.word	0x200000a4
    2bf8:	00002b8d 	.word	0x00002b8d

00002bfc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b084      	sub	sp, #16
    2c00:	af00      	add	r7, sp, #0
    2c02:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    2c04:	6878      	ldr	r0, [r7, #4]
    2c06:	4b13      	ldr	r3, [pc, #76]	; (2c54 <get_tc_index+0x58>)
    2c08:	4798      	blx	r3
    2c0a:	4603      	mov	r3, r0
    2c0c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2c0e:	2300      	movs	r3, #0
    2c10:	73fb      	strb	r3, [r7, #15]
    2c12:	e010      	b.n	2c36 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    2c14:	7bfa      	ldrb	r2, [r7, #15]
    2c16:	4910      	ldr	r1, [pc, #64]	; (2c58 <get_tc_index+0x5c>)
    2c18:	4613      	mov	r3, r2
    2c1a:	009b      	lsls	r3, r3, #2
    2c1c:	4413      	add	r3, r2
    2c1e:	009b      	lsls	r3, r3, #2
    2c20:	440b      	add	r3, r1
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	7bba      	ldrb	r2, [r7, #14]
    2c26:	429a      	cmp	r2, r3
    2c28:	d102      	bne.n	2c30 <get_tc_index+0x34>
			return i;
    2c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c2e:	e00d      	b.n	2c4c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2c30:	7bfb      	ldrb	r3, [r7, #15]
    2c32:	3301      	adds	r3, #1
    2c34:	73fb      	strb	r3, [r7, #15]
    2c36:	7bfb      	ldrb	r3, [r7, #15]
    2c38:	2b01      	cmp	r3, #1
    2c3a:	d9eb      	bls.n	2c14 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    2c3c:	f44f 72a3 	mov.w	r2, #326	; 0x146
    2c40:	4906      	ldr	r1, [pc, #24]	; (2c5c <get_tc_index+0x60>)
    2c42:	2000      	movs	r0, #0
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <get_tc_index+0x64>)
    2c46:	4798      	blx	r3
	return -1;
    2c48:	f04f 33ff 	mov.w	r3, #4294967295
}
    2c4c:	4618      	mov	r0, r3
    2c4e:	3710      	adds	r7, #16
    2c50:	46bd      	mov	sp, r7
    2c52:	bd80      	pop	{r7, pc}
    2c54:	00002ca9 	.word	0x00002ca9
    2c58:	20000018 	.word	0x20000018
    2c5c:	00003188 	.word	0x00003188
    2c60:	0000133d 	.word	0x0000133d

00002c64 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    2c64:	b480      	push	{r7}
    2c66:	b083      	sub	sp, #12
    2c68:	af00      	add	r7, sp, #0
    2c6a:	6078      	str	r0, [r7, #4]
    2c6c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	4a09      	ldr	r2, [pc, #36]	; (2c98 <_tc_init_irq_param+0x34>)
    2c72:	4293      	cmp	r3, r2
    2c74:	d102      	bne.n	2c7c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    2c76:	4a09      	ldr	r2, [pc, #36]	; (2c9c <_tc_init_irq_param+0x38>)
    2c78:	683b      	ldr	r3, [r7, #0]
    2c7a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    2c7c:	687b      	ldr	r3, [r7, #4]
    2c7e:	4a08      	ldr	r2, [pc, #32]	; (2ca0 <_tc_init_irq_param+0x3c>)
    2c80:	4293      	cmp	r3, r2
    2c82:	d102      	bne.n	2c8a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    2c84:	4a07      	ldr	r2, [pc, #28]	; (2ca4 <_tc_init_irq_param+0x40>)
    2c86:	683b      	ldr	r3, [r7, #0]
    2c88:	6013      	str	r3, [r2, #0]
	}
}
    2c8a:	bf00      	nop
    2c8c:	370c      	adds	r7, #12
    2c8e:	46bd      	mov	sp, r7
    2c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c94:	4770      	bx	lr
    2c96:	bf00      	nop
    2c98:	40003800 	.word	0x40003800
    2c9c:	200000a0 	.word	0x200000a0
    2ca0:	4101a000 	.word	0x4101a000
    2ca4:	200000a4 	.word	0x200000a4

00002ca8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    2ca8:	b4b0      	push	{r4, r5, r7}
    2caa:	b08d      	sub	sp, #52	; 0x34
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2cb0:	4b13      	ldr	r3, [pc, #76]	; (2d00 <_get_hardware_offset+0x58>)
    2cb2:	f107 040c 	add.w	r4, r7, #12
    2cb6:	461d      	mov	r5, r3
    2cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2cc4:	2300      	movs	r3, #0
    2cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cc8:	e010      	b.n	2cec <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ccc:	009b      	lsls	r3, r3, #2
    2cce:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2cd2:	4413      	add	r3, r2
    2cd4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    2cd8:	461a      	mov	r2, r3
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	429a      	cmp	r2, r3
    2cde:	d102      	bne.n	2ce6 <_get_hardware_offset+0x3e>
			return i;
    2ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce2:	b2db      	uxtb	r3, r3
    2ce4:	e006      	b.n	2cf4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce8:	3301      	adds	r3, #1
    2cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cee:	2b07      	cmp	r3, #7
    2cf0:	d9eb      	bls.n	2cca <_get_hardware_offset+0x22>
		}
	}
	return 0;
    2cf2:	2300      	movs	r3, #0
}
    2cf4:	4618      	mov	r0, r3
    2cf6:	3734      	adds	r7, #52	; 0x34
    2cf8:	46bd      	mov	sp, r7
    2cfa:	bcb0      	pop	{r4, r5, r7}
    2cfc:	4770      	bx	lr
    2cfe:	bf00      	nop
    2d00:	0000319c 	.word	0x0000319c

00002d04 <hri_port_set_OUT_reg>:
{
    2d04:	b480      	push	{r7}
    2d06:	b085      	sub	sp, #20
    2d08:	af00      	add	r7, sp, #0
    2d0a:	60f8      	str	r0, [r7, #12]
    2d0c:	460b      	mov	r3, r1
    2d0e:	607a      	str	r2, [r7, #4]
    2d10:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d12:	7afb      	ldrb	r3, [r7, #11]
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	01db      	lsls	r3, r3, #7
    2d18:	4413      	add	r3, r2
    2d1a:	3318      	adds	r3, #24
    2d1c:	687a      	ldr	r2, [r7, #4]
    2d1e:	601a      	str	r2, [r3, #0]
}
    2d20:	bf00      	nop
    2d22:	3714      	adds	r7, #20
    2d24:	46bd      	mov	sp, r7
    2d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d2a:	4770      	bx	lr

00002d2c <hri_port_clear_OUT_reg>:
{
    2d2c:	b480      	push	{r7}
    2d2e:	b085      	sub	sp, #20
    2d30:	af00      	add	r7, sp, #0
    2d32:	60f8      	str	r0, [r7, #12]
    2d34:	460b      	mov	r3, r1
    2d36:	607a      	str	r2, [r7, #4]
    2d38:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d3a:	7afb      	ldrb	r3, [r7, #11]
    2d3c:	68fa      	ldr	r2, [r7, #12]
    2d3e:	01db      	lsls	r3, r3, #7
    2d40:	4413      	add	r3, r2
    2d42:	3314      	adds	r3, #20
    2d44:	687a      	ldr	r2, [r7, #4]
    2d46:	601a      	str	r2, [r3, #0]
}
    2d48:	bf00      	nop
    2d4a:	3714      	adds	r7, #20
    2d4c:	46bd      	mov	sp, r7
    2d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d52:	4770      	bx	lr

00002d54 <_gpio_set_level>:
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b082      	sub	sp, #8
    2d58:	af00      	add	r7, sp, #0
    2d5a:	4603      	mov	r3, r0
    2d5c:	6039      	str	r1, [r7, #0]
    2d5e:	71fb      	strb	r3, [r7, #7]
    2d60:	4613      	mov	r3, r2
    2d62:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2d64:	79bb      	ldrb	r3, [r7, #6]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d006      	beq.n	2d78 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    2d6a:	79fb      	ldrb	r3, [r7, #7]
    2d6c:	683a      	ldr	r2, [r7, #0]
    2d6e:	4619      	mov	r1, r3
    2d70:	4806      	ldr	r0, [pc, #24]	; (2d8c <_gpio_set_level+0x38>)
    2d72:	4b07      	ldr	r3, [pc, #28]	; (2d90 <_gpio_set_level+0x3c>)
    2d74:	4798      	blx	r3
}
    2d76:	e005      	b.n	2d84 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2d78:	79fb      	ldrb	r3, [r7, #7]
    2d7a:	683a      	ldr	r2, [r7, #0]
    2d7c:	4619      	mov	r1, r3
    2d7e:	4803      	ldr	r0, [pc, #12]	; (2d8c <_gpio_set_level+0x38>)
    2d80:	4b04      	ldr	r3, [pc, #16]	; (2d94 <_gpio_set_level+0x40>)
    2d82:	4798      	blx	r3
}
    2d84:	bf00      	nop
    2d86:	3708      	adds	r7, #8
    2d88:	46bd      	mov	sp, r7
    2d8a:	bd80      	pop	{r7, pc}
    2d8c:	41008000 	.word	0x41008000
    2d90:	00002d05 	.word	0x00002d05
    2d94:	00002d2d 	.word	0x00002d2d

00002d98 <gpio_set_pin_level>:
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	4603      	mov	r3, r0
    2da0:	460a      	mov	r2, r1
    2da2:	71fb      	strb	r3, [r7, #7]
    2da4:	4613      	mov	r3, r2
    2da6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2da8:	79fb      	ldrb	r3, [r7, #7]
    2daa:	095b      	lsrs	r3, r3, #5
    2dac:	b2d8      	uxtb	r0, r3
    2dae:	79fb      	ldrb	r3, [r7, #7]
    2db0:	f003 031f 	and.w	r3, r3, #31
    2db4:	2201      	movs	r2, #1
    2db6:	fa02 f303 	lsl.w	r3, r2, r3
    2dba:	79ba      	ldrb	r2, [r7, #6]
    2dbc:	4619      	mov	r1, r3
    2dbe:	4b03      	ldr	r3, [pc, #12]	; (2dcc <gpio_set_pin_level+0x34>)
    2dc0:	4798      	blx	r3
}
    2dc2:	bf00      	nop
    2dc4:	3708      	adds	r7, #8
    2dc6:	46bd      	mov	sp, r7
    2dc8:	bd80      	pop	{r7, pc}
    2dca:	bf00      	nop
    2dcc:	00002d55 	.word	0x00002d55

00002dd0 <rx_cb_USART_0>:
// int counter = 0;
// int counts = 0;
// double actual_duty_cycle = 0;

static void rx_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b084      	sub	sp, #16
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	6078      	str	r0, [r7, #4]

	//Read the first bit of the input buffer and set the direction of rotation
	if(buff[0] == 43){
    2dd8:	4b2d      	ldr	r3, [pc, #180]	; (2e90 <rx_cb_USART_0+0xc0>)
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	2b2b      	cmp	r3, #43	; 0x2b
    2dde:	d108      	bne.n	2df2 <rx_cb_USART_0+0x22>
		
		//Positive direction of rotation
		gpio_set_pin_level(PIN1,false);
    2de0:	2100      	movs	r1, #0
    2de2:	2024      	movs	r0, #36	; 0x24
    2de4:	4b2b      	ldr	r3, [pc, #172]	; (2e94 <rx_cb_USART_0+0xc4>)
    2de6:	4798      	blx	r3
		gpio_set_pin_level(PIN2,true);
    2de8:	2101      	movs	r1, #1
    2dea:	2025      	movs	r0, #37	; 0x25
    2dec:	4b29      	ldr	r3, [pc, #164]	; (2e94 <rx_cb_USART_0+0xc4>)
    2dee:	4798      	blx	r3
    2df0:	e00b      	b.n	2e0a <rx_cb_USART_0+0x3a>
 	}else if(buff[0] == 45){
    2df2:	4b27      	ldr	r3, [pc, #156]	; (2e90 <rx_cb_USART_0+0xc0>)
    2df4:	781b      	ldrb	r3, [r3, #0]
    2df6:	2b2d      	cmp	r3, #45	; 0x2d
    2df8:	d107      	bne.n	2e0a <rx_cb_USART_0+0x3a>
 		
 		//Negative direction of rotation
 		gpio_set_pin_level(PIN1,true);
    2dfa:	2101      	movs	r1, #1
    2dfc:	2024      	movs	r0, #36	; 0x24
    2dfe:	4b25      	ldr	r3, [pc, #148]	; (2e94 <rx_cb_USART_0+0xc4>)
    2e00:	4798      	blx	r3
 		gpio_set_pin_level(PIN2,false);
    2e02:	2100      	movs	r1, #0
    2e04:	2025      	movs	r0, #37	; 0x25
    2e06:	4b23      	ldr	r3, [pc, #140]	; (2e94 <rx_cb_USART_0+0xc4>)
    2e08:	4798      	blx	r3
 	}
	 
	int i = 1;
    2e0a:	2301      	movs	r3, #1
    2e0c:	60fb      	str	r3, [r7, #12]
 	if(buff[1] >= 48 && buff[1] <= 57){
    2e0e:	4b20      	ldr	r3, [pc, #128]	; (2e90 <rx_cb_USART_0+0xc0>)
    2e10:	785b      	ldrb	r3, [r3, #1]
    2e12:	2b2f      	cmp	r3, #47	; 0x2f
    2e14:	d924      	bls.n	2e60 <rx_cb_USART_0+0x90>
    2e16:	4b1e      	ldr	r3, [pc, #120]	; (2e90 <rx_cb_USART_0+0xc0>)
    2e18:	785b      	ldrb	r3, [r3, #1]
    2e1a:	2b39      	cmp	r3, #57	; 0x39
    2e1c:	d820      	bhi.n	2e60 <rx_cb_USART_0+0x90>
		while (buff[i] != 10) {
    2e1e:	e018      	b.n	2e52 <rx_cb_USART_0+0x82>
			delta = duty_cycle * 10 + (buff[i] - 48);
    2e20:	4b1d      	ldr	r3, [pc, #116]	; (2e98 <rx_cb_USART_0+0xc8>)
    2e22:	681a      	ldr	r2, [r3, #0]
    2e24:	4613      	mov	r3, r2
    2e26:	009b      	lsls	r3, r3, #2
    2e28:	4413      	add	r3, r2
    2e2a:	005b      	lsls	r3, r3, #1
    2e2c:	4619      	mov	r1, r3
    2e2e:	4a18      	ldr	r2, [pc, #96]	; (2e90 <rx_cb_USART_0+0xc0>)
    2e30:	68fb      	ldr	r3, [r7, #12]
    2e32:	4413      	add	r3, r2
    2e34:	781b      	ldrb	r3, [r3, #0]
    2e36:	3b30      	subs	r3, #48	; 0x30
    2e38:	440b      	add	r3, r1
    2e3a:	4a18      	ldr	r2, [pc, #96]	; (2e9c <rx_cb_USART_0+0xcc>)
    2e3c:	6013      	str	r3, [r2, #0]
			duty_cycle = delta;
    2e3e:	4b17      	ldr	r3, [pc, #92]	; (2e9c <rx_cb_USART_0+0xcc>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	4a15      	ldr	r2, [pc, #84]	; (2e98 <rx_cb_USART_0+0xc8>)
    2e44:	6013      	str	r3, [r2, #0]
			i++;
    2e46:	68fb      	ldr	r3, [r7, #12]
    2e48:	3301      	adds	r3, #1
    2e4a:	60fb      	str	r3, [r7, #12]
			flag = true;
    2e4c:	4b14      	ldr	r3, [pc, #80]	; (2ea0 <rx_cb_USART_0+0xd0>)
    2e4e:	2201      	movs	r2, #1
    2e50:	701a      	strb	r2, [r3, #0]
		while (buff[i] != 10) {
    2e52:	4a0f      	ldr	r2, [pc, #60]	; (2e90 <rx_cb_USART_0+0xc0>)
    2e54:	68fb      	ldr	r3, [r7, #12]
    2e56:	4413      	add	r3, r2
    2e58:	781b      	ldrb	r3, [r3, #0]
    2e5a:	2b0a      	cmp	r3, #10
    2e5c:	d1e0      	bne.n	2e20 <rx_cb_USART_0+0x50>
 	if(buff[1] >= 48 && buff[1] <= 57){
    2e5e:	e005      	b.n	2e6c <rx_cb_USART_0+0x9c>
		}
	}else{
		duty_cycle = 0;
    2e60:	4b0d      	ldr	r3, [pc, #52]	; (2e98 <rx_cb_USART_0+0xc8>)
    2e62:	2200      	movs	r2, #0
    2e64:	601a      	str	r2, [r3, #0]
		flag = false;
    2e66:	4b0e      	ldr	r3, [pc, #56]	; (2ea0 <rx_cb_USART_0+0xd0>)
    2e68:	2200      	movs	r2, #0
    2e6a:	701a      	strb	r2, [r3, #0]
	}

	//Clear the buffer
	for(int i = 0; i < sizeof(buff); i++){
    2e6c:	2300      	movs	r3, #0
    2e6e:	60bb      	str	r3, [r7, #8]
    2e70:	e007      	b.n	2e82 <rx_cb_USART_0+0xb2>
		buff[i] = 0;
    2e72:	4a07      	ldr	r2, [pc, #28]	; (2e90 <rx_cb_USART_0+0xc0>)
    2e74:	68bb      	ldr	r3, [r7, #8]
    2e76:	4413      	add	r3, r2
    2e78:	2200      	movs	r2, #0
    2e7a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(buff); i++){
    2e7c:	68bb      	ldr	r3, [r7, #8]
    2e7e:	3301      	adds	r3, #1
    2e80:	60bb      	str	r3, [r7, #8]
    2e82:	68bb      	ldr	r3, [r7, #8]
    2e84:	2b04      	cmp	r3, #4
    2e86:	d9f4      	bls.n	2e72 <rx_cb_USART_0+0xa2>
		}
}
    2e88:	bf00      	nop
    2e8a:	3710      	adds	r7, #16
    2e8c:	46bd      	mov	sp, r7
    2e8e:	bd80      	pop	{r7, pc}
    2e90:	200000a8 	.word	0x200000a8
    2e94:	00002d99 	.word	0x00002d99
    2e98:	200000b8 	.word	0x200000b8
    2e9c:	200000bc 	.word	0x200000bc
    2ea0:	20000040 	.word	0x20000040

00002ea4 <main>:
// 	flag = true;
// }


int main(void)
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	af00      	add	r7, sp, #0
	
	atmel_start_init();
    2ea8:	4b0f      	ldr	r3, [pc, #60]	; (2ee8 <main+0x44>)
    2eaa:	4798      	blx	r3

	/* Initialization of the UART communication */
	usart_async_register_callback(&EDBG_UART, USART_ASYNC_RXC_CB, rx_cb_USART_0);
    2eac:	4a0f      	ldr	r2, [pc, #60]	; (2eec <main+0x48>)
    2eae:	2100      	movs	r1, #0
    2eb0:	480f      	ldr	r0, [pc, #60]	; (2ef0 <main+0x4c>)
    2eb2:	4b10      	ldr	r3, [pc, #64]	; (2ef4 <main+0x50>)
    2eb4:	4798      	blx	r3
	usart_async_get_io_descriptor(&EDBG_UART, &io_UART);
    2eb6:	4910      	ldr	r1, [pc, #64]	; (2ef8 <main+0x54>)
    2eb8:	480d      	ldr	r0, [pc, #52]	; (2ef0 <main+0x4c>)
    2eba:	4b10      	ldr	r3, [pc, #64]	; (2efc <main+0x58>)
    2ebc:	4798      	blx	r3
	usart_async_enable(&EDBG_UART);
    2ebe:	480c      	ldr	r0, [pc, #48]	; (2ef0 <main+0x4c>)
    2ec0:	4b0f      	ldr	r3, [pc, #60]	; (2f00 <main+0x5c>)
    2ec2:	4798      	blx	r3
// 	
// 	//Add timer task for the second timer
// 	timer_add_task(&TIMER_1, &task2);
// 	timer_start(&TIMER_1);
	
	tcc_set_period_value(TCC0, 0xffff/50);
    2ec4:	f240 511e 	movw	r1, #1310	; 0x51e
    2ec8:	480e      	ldr	r0, [pc, #56]	; (2f04 <main+0x60>)
    2eca:	4b0f      	ldr	r3, [pc, #60]	; (2f08 <main+0x64>)
    2ecc:	4798      	blx	r3
	//io_write(io_UART, example_EDBG_UART, 12);

	while (1){
		
		//Read input command from terminal
		io_read(io_UART,buff,5);
    2ece:	4b0a      	ldr	r3, [pc, #40]	; (2ef8 <main+0x54>)
    2ed0:	681b      	ldr	r3, [r3, #0]
    2ed2:	2205      	movs	r2, #5
    2ed4:	490d      	ldr	r1, [pc, #52]	; (2f0c <main+0x68>)
    2ed6:	4618      	mov	r0, r3
    2ed8:	4b0d      	ldr	r3, [pc, #52]	; (2f10 <main+0x6c>)
    2eda:	4798      	blx	r3
		tcc_set_compare_value(TCC0, 0, 0);
    2edc:	2200      	movs	r2, #0
    2ede:	2100      	movs	r1, #0
    2ee0:	4808      	ldr	r0, [pc, #32]	; (2f04 <main+0x60>)
    2ee2:	4b0c      	ldr	r3, [pc, #48]	; (2f14 <main+0x70>)
    2ee4:	4798      	blx	r3
		io_read(io_UART,buff,5);
    2ee6:	e7f2      	b.n	2ece <main+0x2a>
    2ee8:	000002d1 	.word	0x000002d1
    2eec:	00002dd1 	.word	0x00002dd1
    2ef0:	200000c0 	.word	0x200000c0
    2ef4:	00001049 	.word	0x00001049
    2ef8:	20000158 	.word	0x20000158
    2efc:	00001005 	.word	0x00001005
    2f00:	00000fc5 	.word	0x00000fc5
    2f04:	41016000 	.word	0x41016000
    2f08:	00002ff1 	.word	0x00002ff1
    2f0c:	200000a8 	.word	0x200000a8
    2f10:	00000ca9 	.word	0x00000ca9
    2f14:	00002fb1 	.word	0x00002fb1

00002f18 <hri_tcc_wait_for_sync>:
{
    2f18:	b480      	push	{r7}
    2f1a:	b083      	sub	sp, #12
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
    2f20:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2f22:	bf00      	nop
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	689a      	ldr	r2, [r3, #8]
    2f28:	683b      	ldr	r3, [r7, #0]
    2f2a:	4013      	ands	r3, r2
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d1f9      	bne.n	2f24 <hri_tcc_wait_for_sync+0xc>
}
    2f30:	bf00      	nop
    2f32:	370c      	adds	r7, #12
    2f34:	46bd      	mov	sp, r7
    2f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f3a:	4770      	bx	lr

00002f3c <hri_tcc_clear_INTFLAG_reg>:
{
    2f3c:	b480      	push	{r7}
    2f3e:	b083      	sub	sp, #12
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
    2f44:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	683a      	ldr	r2, [r7, #0]
    2f4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2f4c:	bf00      	nop
    2f4e:	370c      	adds	r7, #12
    2f50:	46bd      	mov	sp, r7
    2f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f56:	4770      	bx	lr

00002f58 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	b082      	sub	sp, #8
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	6078      	str	r0, [r7, #4]
    2f60:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    2f62:	687b      	ldr	r3, [r7, #4]
    2f64:	683a      	ldr	r2, [r7, #0]
    2f66:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2f68:	2180      	movs	r1, #128	; 0x80
    2f6a:	6878      	ldr	r0, [r7, #4]
    2f6c:	4b02      	ldr	r3, [pc, #8]	; (2f78 <hri_tcc_write_PER_reg+0x20>)
    2f6e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2f70:	bf00      	nop
    2f72:	3708      	adds	r7, #8
    2f74:	46bd      	mov	sp, r7
    2f76:	bd80      	pop	{r7, pc}
    2f78:	00002f19 	.word	0x00002f19

00002f7c <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b084      	sub	sp, #16
    2f80:	af00      	add	r7, sp, #0
    2f82:	60f8      	str	r0, [r7, #12]
    2f84:	460b      	mov	r3, r1
    2f86:	607a      	str	r2, [r7, #4]
    2f88:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    2f8a:	7afb      	ldrb	r3, [r7, #11]
    2f8c:	68fa      	ldr	r2, [r7, #12]
    2f8e:	3310      	adds	r3, #16
    2f90:	009b      	lsls	r3, r3, #2
    2f92:	4413      	add	r3, r2
    2f94:	687a      	ldr	r2, [r7, #4]
    2f96:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    2f98:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    2f9c:	68f8      	ldr	r0, [r7, #12]
    2f9e:	4b03      	ldr	r3, [pc, #12]	; (2fac <hri_tcc_write_CC_reg+0x30>)
    2fa0:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    2fa2:	bf00      	nop
    2fa4:	3710      	adds	r7, #16
    2fa6:	46bd      	mov	sp, r7
    2fa8:	bd80      	pop	{r7, pc}
    2faa:	bf00      	nop
    2fac:	00002f19 	.word	0x00002f19

00002fb0 <tcc_set_compare_value>:
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
    2fb0:	b580      	push	{r7, lr}
    2fb2:	b084      	sub	sp, #16
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	60f8      	str	r0, [r7, #12]
    2fb8:	60b9      	str	r1, [r7, #8]
    2fba:	4613      	mov	r3, r2
    2fbc:	71fb      	strb	r3, [r7, #7]
	hri_tcc_write_CC_reg(hw, channel_index, value);
    2fbe:	79fb      	ldrb	r3, [r7, #7]
    2fc0:	68ba      	ldr	r2, [r7, #8]
    2fc2:	4619      	mov	r1, r3
    2fc4:	68f8      	ldr	r0, [r7, #12]
    2fc6:	4b08      	ldr	r3, [pc, #32]	; (2fe8 <tcc_set_compare_value+0x38>)
    2fc8:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    2fca:	79fb      	ldrb	r3, [r7, #7]
    2fcc:	2201      	movs	r2, #1
    2fce:	fa02 f303 	lsl.w	r3, r2, r3
    2fd2:	021b      	lsls	r3, r3, #8
    2fd4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2fd8:	4619      	mov	r1, r3
    2fda:	68f8      	ldr	r0, [r7, #12]
    2fdc:	4b03      	ldr	r3, [pc, #12]	; (2fec <tcc_set_compare_value+0x3c>)
    2fde:	4798      	blx	r3
}
    2fe0:	bf00      	nop
    2fe2:	3710      	adds	r7, #16
    2fe4:	46bd      	mov	sp, r7
    2fe6:	bd80      	pop	{r7, pc}
    2fe8:	00002f7d 	.word	0x00002f7d
    2fec:	00002f19 	.word	0x00002f19

00002ff0 <tcc_set_period_value>:
{
	hri_tcc_write_CCBUF_reg(hw, channel_index, value);
}

void tcc_set_period_value(void *const hw, uint32_t value)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
    2ff8:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(hw, value);
    2ffa:	6839      	ldr	r1, [r7, #0]
    2ffc:	6878      	ldr	r0, [r7, #4]
    2ffe:	4b05      	ldr	r3, [pc, #20]	; (3014 <tcc_set_period_value+0x24>)
    3000:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    3002:	2180      	movs	r1, #128	; 0x80
    3004:	6878      	ldr	r0, [r7, #4]
    3006:	4b04      	ldr	r3, [pc, #16]	; (3018 <tcc_set_period_value+0x28>)
    3008:	4798      	blx	r3
}
    300a:	bf00      	nop
    300c:	3708      	adds	r7, #8
    300e:	46bd      	mov	sp, r7
    3010:	bd80      	pop	{r7, pc}
    3012:	bf00      	nop
    3014:	00002f59 	.word	0x00002f59
    3018:	00002f19 	.word	0x00002f19

0000301c <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    301c:	b580      	push	{r7, lr}
    301e:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    3020:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3024:	4804      	ldr	r0, [pc, #16]	; (3038 <TCC0_1_Handler+0x1c>)
    3026:	4b05      	ldr	r3, [pc, #20]	; (303c <TCC0_1_Handler+0x20>)
    3028:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    302a:	4b05      	ldr	r3, [pc, #20]	; (3040 <TCC0_1_Handler+0x24>)
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	4802      	ldr	r0, [pc, #8]	; (3038 <TCC0_1_Handler+0x1c>)
    3030:	4798      	blx	r3
}
    3032:	bf00      	nop
    3034:	bd80      	pop	{r7, pc}
    3036:	bf00      	nop
    3038:	41016000 	.word	0x41016000
    303c:	00002f3d 	.word	0x00002f3d
    3040:	2000015c 	.word	0x2000015c

00003044 <__libc_init_array>:
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	4e0d      	ldr	r6, [pc, #52]	; (307c <__libc_init_array+0x38>)
    3048:	4c0d      	ldr	r4, [pc, #52]	; (3080 <__libc_init_array+0x3c>)
    304a:	1ba4      	subs	r4, r4, r6
    304c:	10a4      	asrs	r4, r4, #2
    304e:	2500      	movs	r5, #0
    3050:	42a5      	cmp	r5, r4
    3052:	d109      	bne.n	3068 <__libc_init_array+0x24>
    3054:	4e0b      	ldr	r6, [pc, #44]	; (3084 <__libc_init_array+0x40>)
    3056:	4c0c      	ldr	r4, [pc, #48]	; (3088 <__libc_init_array+0x44>)
    3058:	f000 f8b0 	bl	31bc <_init>
    305c:	1ba4      	subs	r4, r4, r6
    305e:	10a4      	asrs	r4, r4, #2
    3060:	2500      	movs	r5, #0
    3062:	42a5      	cmp	r5, r4
    3064:	d105      	bne.n	3072 <__libc_init_array+0x2e>
    3066:	bd70      	pop	{r4, r5, r6, pc}
    3068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    306c:	4798      	blx	r3
    306e:	3501      	adds	r5, #1
    3070:	e7ee      	b.n	3050 <__libc_init_array+0xc>
    3072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3076:	4798      	blx	r3
    3078:	3501      	adds	r5, #1
    307a:	e7f2      	b.n	3062 <__libc_init_array+0x1e>
    307c:	000031c8 	.word	0x000031c8
    3080:	000031c8 	.word	0x000031c8
    3084:	000031c8 	.word	0x000031c8
    3088:	000031cc 	.word	0x000031cc
    308c:	682f2e2e 	.word	0x682f2e2e
    3090:	702f6c70 	.word	0x702f6c70
    3094:	2f74726f 	.word	0x2f74726f
    3098:	5f6c7068 	.word	0x5f6c7068
    309c:	6f697067 	.word	0x6f697067
    30a0:	7361625f 	.word	0x7361625f
    30a4:	00682e65 	.word	0x00682e65
    30a8:	682f2e2e 	.word	0x682f2e2e
    30ac:	732f6c61 	.word	0x732f6c61
    30b0:	682f6372 	.word	0x682f6372
    30b4:	695f6c61 	.word	0x695f6c61
    30b8:	00632e6f 	.word	0x00632e6f
    30bc:	682f2e2e 	.word	0x682f2e2e
    30c0:	732f6c61 	.word	0x732f6c61
    30c4:	682f6372 	.word	0x682f6372
    30c8:	745f6c61 	.word	0x745f6c61
    30cc:	72656d69 	.word	0x72656d69
    30d0:	0000632e 	.word	0x0000632e
    30d4:	682f2e2e 	.word	0x682f2e2e
    30d8:	732f6c61 	.word	0x732f6c61
    30dc:	682f6372 	.word	0x682f6372
    30e0:	755f6c61 	.word	0x755f6c61
    30e4:	74726173 	.word	0x74726173
    30e8:	7973615f 	.word	0x7973615f
    30ec:	632e636e 	.word	0x632e636e
    30f0:	00000000 	.word	0x00000000
    30f4:	682f2e2e 	.word	0x682f2e2e
    30f8:	752f6c61 	.word	0x752f6c61
    30fc:	736c6974 	.word	0x736c6974
    3100:	6372732f 	.word	0x6372732f
    3104:	6974752f 	.word	0x6974752f
    3108:	6c5f736c 	.word	0x6c5f736c
    310c:	2e747369 	.word	0x2e747369
    3110:	00000063 	.word	0x00000063
    3114:	682f2e2e 	.word	0x682f2e2e
    3118:	752f6c61 	.word	0x752f6c61
    311c:	736c6974 	.word	0x736c6974
    3120:	6372732f 	.word	0x6372732f
    3124:	6974752f 	.word	0x6974752f
    3128:	725f736c 	.word	0x725f736c
    312c:	62676e69 	.word	0x62676e69
    3130:	65666675 	.word	0x65666675
    3134:	00632e72 	.word	0x00632e72
    3138:	682f2e2e 	.word	0x682f2e2e
    313c:	732f6c70 	.word	0x732f6c70
    3140:	6f637265 	.word	0x6f637265
    3144:	70682f6d 	.word	0x70682f6d
    3148:	65735f6c 	.word	0x65735f6c
    314c:	6d6f6372 	.word	0x6d6f6372
    3150:	0000632e 	.word	0x0000632e
    3154:	40003000 	.word	0x40003000
    3158:	40003400 	.word	0x40003400
    315c:	41012000 	.word	0x41012000
    3160:	41014000 	.word	0x41014000
    3164:	43000000 	.word	0x43000000
    3168:	43000400 	.word	0x43000400
    316c:	43000800 	.word	0x43000800
    3170:	43000c00 	.word	0x43000c00

00003174 <sercomspi_regs>:
	...
    3188:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    3198:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    31a8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    31b8:	43001800                                ...C

000031bc <_init>:
    31bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31be:	bf00      	nop
    31c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    31c2:	bc08      	pop	{r3}
    31c4:	469e      	mov	lr, r3
    31c6:	4770      	bx	lr

000031c8 <__init_array_start>:
    31c8:	00000289 	.word	0x00000289

000031cc <_fini>:
    31cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ce:	bf00      	nop
    31d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    31d2:	bc08      	pop	{r3}
    31d4:	469e      	mov	lr, r3
    31d6:	4770      	bx	lr

000031d8 <__fini_array_start>:
    31d8:	00000265 	.word	0x00000265
