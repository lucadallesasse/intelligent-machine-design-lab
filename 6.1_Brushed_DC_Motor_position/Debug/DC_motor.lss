
DC_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ac8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20000000  00005ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200b0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200b0  2**0
                  CONTENTS
  4 .bss          000001dc  200000b0  00005b78  000200b0  2**2
                  ALLOC
  5 .stack        00010004  2000028c  00005d54  000200b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029295  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ae3  00000000  00000000  000493cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cb60  00000000  00000000  0004ceaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016a8  00000000  00000000  00059a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000014f0  00000000  00000000  0005b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037389  00000000  00000000  0005c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000198dc  00000000  00000000  00093930  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00124347  00000000  00000000  000ad20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000637c  00000000  00000000  001d1554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 02 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 e5 1e 00 00 7d 03 00 00 7d 03 00 00     }.......}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	5d 22 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     ]"..}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 69 2d 00 00 85 2d 00 00 a1 2d 00 00     }...i-...-...-..
     124:	bd 2d 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .-..}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 79 44 00 00 7d 03 00 00 7d 03 00 00     }...yD..}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 fd 3c 00 00 a9 36 00 00     }...}....<...6..
     1f4:	c5 36 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .6..}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000b0 	.word	0x200000b0
     280:	00000000 	.word	0x00000000
     284:	00005ac8 	.word	0x00005ac8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005ac8 	.word	0x00005ac8
     2c4:	200000b4 	.word	0x200000b4
     2c8:	00005ac8 	.word	0x00005ac8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000c4d 	.word	0x00000c4d

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	00005ac8 	.word	0x00005ac8
     35c:	20000000 	.word	0x20000000
     360:	200000b0 	.word	0x200000b0
     364:	200000b0 	.word	0x200000b0
     368:	2000028c 	.word	0x2000028c
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	00004e45 	.word	0x00004e45
     378:	000040a9 	.word	0x000040a9

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	695b      	ldr	r3, [r3, #20]
     3d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	695b      	ldr	r3, [r3, #20]
     3f4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     410:	687b      	ldr	r3, [r7, #4]
     412:	699b      	ldr	r3, [r3, #24]
     414:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     418:	687b      	ldr	r3, [r7, #4]
     41a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     428:	b480      	push	{r7}
     42a:	b083      	sub	sp, #12
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     430:	687b      	ldr	r3, [r7, #4]
     432:	699b      	ldr	r3, [r3, #24]
     434:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     438:	687b      	ldr	r3, [r7, #4]
     43a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43c:	bf00      	nop
     43e:	370c      	adds	r7, #12
     440:	46bd      	mov	sp, r7
     442:	f85d 7b04 	ldr.w	r7, [sp], #4
     446:	4770      	bx	lr

00000448 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     448:	b480      	push	{r7}
     44a:	b083      	sub	sp, #12
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     450:	687b      	ldr	r3, [r7, #4]
     452:	699b      	ldr	r3, [r3, #24]
     454:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     458:	687b      	ldr	r3, [r7, #4]
     45a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45c:	bf00      	nop
     45e:	370c      	adds	r7, #12
     460:	46bd      	mov	sp, r7
     462:	f85d 7b04 	ldr.w	r7, [sp], #4
     466:	4770      	bx	lr

00000468 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     468:	b480      	push	{r7}
     46a:	b083      	sub	sp, #12
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     470:	687b      	ldr	r3, [r7, #4]
     472:	699b      	ldr	r3, [r3, #24]
     474:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     478:	687b      	ldr	r3, [r7, #4]
     47a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47c:	bf00      	nop
     47e:	370c      	adds	r7, #12
     480:	46bd      	mov	sp, r7
     482:	f85d 7b04 	ldr.w	r7, [sp], #4
     486:	4770      	bx	lr

00000488 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     488:	b480      	push	{r7}
     48a:	b085      	sub	sp, #20
     48c:	af00      	add	r7, sp, #0
     48e:	60f8      	str	r0, [r7, #12]
     490:	460b      	mov	r3, r1
     492:	607a      	str	r2, [r7, #4]
     494:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     496:	7afb      	ldrb	r3, [r7, #11]
     498:	68fa      	ldr	r2, [r7, #12]
     49a:	01db      	lsls	r3, r3, #7
     49c:	4413      	add	r3, r2
     49e:	3308      	adds	r3, #8
     4a0:	687a      	ldr	r2, [r7, #4]
     4a2:	601a      	str	r2, [r3, #0]
}
     4a4:	bf00      	nop
     4a6:	3714      	adds	r7, #20
     4a8:	46bd      	mov	sp, r7
     4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ae:	4770      	bx	lr

000004b0 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     4b0:	b480      	push	{r7}
     4b2:	b085      	sub	sp, #20
     4b4:	af00      	add	r7, sp, #0
     4b6:	60f8      	str	r0, [r7, #12]
     4b8:	460b      	mov	r3, r1
     4ba:	607a      	str	r2, [r7, #4]
     4bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4be:	7afb      	ldrb	r3, [r7, #11]
     4c0:	68fa      	ldr	r2, [r7, #12]
     4c2:	01db      	lsls	r3, r3, #7
     4c4:	4413      	add	r3, r2
     4c6:	3304      	adds	r3, #4
     4c8:	687a      	ldr	r2, [r7, #4]
     4ca:	601a      	str	r2, [r3, #0]
}
     4cc:	bf00      	nop
     4ce:	3714      	adds	r7, #20
     4d0:	46bd      	mov	sp, r7
     4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4d6:	4770      	bx	lr

000004d8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4d8:	b480      	push	{r7}
     4da:	b085      	sub	sp, #20
     4dc:	af00      	add	r7, sp, #0
     4de:	60f8      	str	r0, [r7, #12]
     4e0:	460b      	mov	r3, r1
     4e2:	607a      	str	r2, [r7, #4]
     4e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e6:	7afb      	ldrb	r3, [r7, #11]
     4e8:	68fa      	ldr	r2, [r7, #12]
     4ea:	01db      	lsls	r3, r3, #7
     4ec:	4413      	add	r3, r2
     4ee:	3318      	adds	r3, #24
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	601a      	str	r2, [r3, #0]
}
     4f4:	bf00      	nop
     4f6:	3714      	adds	r7, #20
     4f8:	46bd      	mov	sp, r7
     4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
     4fe:	4770      	bx	lr

00000500 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     500:	b480      	push	{r7}
     502:	b085      	sub	sp, #20
     504:	af00      	add	r7, sp, #0
     506:	60f8      	str	r0, [r7, #12]
     508:	460b      	mov	r3, r1
     50a:	607a      	str	r2, [r7, #4]
     50c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	7afb      	ldrb	r3, [r7, #11]
     510:	68fa      	ldr	r2, [r7, #12]
     512:	01db      	lsls	r3, r3, #7
     514:	4413      	add	r3, r2
     516:	3314      	adds	r3, #20
     518:	687a      	ldr	r2, [r7, #4]
     51a:	601a      	str	r2, [r3, #0]
}
     51c:	bf00      	nop
     51e:	3714      	adds	r7, #20
     520:	46bd      	mov	sp, r7
     522:	f85d 7b04 	ldr.w	r7, [sp], #4
     526:	4770      	bx	lr

00000528 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     528:	b480      	push	{r7}
     52a:	b085      	sub	sp, #20
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
     530:	4608      	mov	r0, r1
     532:	4611      	mov	r1, r2
     534:	461a      	mov	r2, r3
     536:	4603      	mov	r3, r0
     538:	70fb      	strb	r3, [r7, #3]
     53a:	460b      	mov	r3, r1
     53c:	70bb      	strb	r3, [r7, #2]
     53e:	4613      	mov	r3, r2
     540:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     542:	78fa      	ldrb	r2, [r7, #3]
     544:	78bb      	ldrb	r3, [r7, #2]
     546:	6879      	ldr	r1, [r7, #4]
     548:	01d2      	lsls	r2, r2, #7
     54a:	440a      	add	r2, r1
     54c:	4413      	add	r3, r2
     54e:	3330      	adds	r3, #48	; 0x30
     550:	781b      	ldrb	r3, [r3, #0]
     552:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     554:	7bfb      	ldrb	r3, [r7, #15]
     556:	f023 030f 	bic.w	r3, r3, #15
     55a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     55c:	787b      	ldrb	r3, [r7, #1]
     55e:	f003 030f 	and.w	r3, r3, #15
     562:	b2da      	uxtb	r2, r3
     564:	7bfb      	ldrb	r3, [r7, #15]
     566:	4313      	orrs	r3, r2
     568:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	78fa      	ldrb	r2, [r7, #3]
     56c:	78bb      	ldrb	r3, [r7, #2]
     56e:	6879      	ldr	r1, [r7, #4]
     570:	01d2      	lsls	r2, r2, #7
     572:	440a      	add	r2, r1
     574:	4413      	add	r3, r2
     576:	3330      	adds	r3, #48	; 0x30
     578:	7bfa      	ldrb	r2, [r7, #15]
     57a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     57c:	bf00      	nop
     57e:	3714      	adds	r7, #20
     580:	46bd      	mov	sp, r7
     582:	f85d 7b04 	ldr.w	r7, [sp], #4
     586:	4770      	bx	lr

00000588 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     588:	b480      	push	{r7}
     58a:	b085      	sub	sp, #20
     58c:	af00      	add	r7, sp, #0
     58e:	6078      	str	r0, [r7, #4]
     590:	4608      	mov	r0, r1
     592:	4611      	mov	r1, r2
     594:	461a      	mov	r2, r3
     596:	4603      	mov	r3, r0
     598:	70fb      	strb	r3, [r7, #3]
     59a:	460b      	mov	r3, r1
     59c:	70bb      	strb	r3, [r7, #2]
     59e:	4613      	mov	r3, r2
     5a0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a2:	78fa      	ldrb	r2, [r7, #3]
     5a4:	78bb      	ldrb	r3, [r7, #2]
     5a6:	6879      	ldr	r1, [r7, #4]
     5a8:	01d2      	lsls	r2, r2, #7
     5aa:	440a      	add	r2, r1
     5ac:	4413      	add	r3, r2
     5ae:	3330      	adds	r3, #48	; 0x30
     5b0:	781b      	ldrb	r3, [r3, #0]
     5b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5b4:	7bfb      	ldrb	r3, [r7, #15]
     5b6:	f003 030f 	and.w	r3, r3, #15
     5ba:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     5bc:	787b      	ldrb	r3, [r7, #1]
     5be:	011b      	lsls	r3, r3, #4
     5c0:	b2da      	uxtb	r2, r3
     5c2:	7bfb      	ldrb	r3, [r7, #15]
     5c4:	4313      	orrs	r3, r2
     5c6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c8:	78fa      	ldrb	r2, [r7, #3]
     5ca:	78bb      	ldrb	r3, [r7, #2]
     5cc:	6879      	ldr	r1, [r7, #4]
     5ce:	01d2      	lsls	r2, r2, #7
     5d0:	440a      	add	r2, r1
     5d2:	4413      	add	r3, r2
     5d4:	3330      	adds	r3, #48	; 0x30
     5d6:	7bfa      	ldrb	r2, [r7, #15]
     5d8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5da:	bf00      	nop
     5dc:	3714      	adds	r7, #20
     5de:	46bd      	mov	sp, r7
     5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e4:	4770      	bx	lr

000005e6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     5e6:	b480      	push	{r7}
     5e8:	b085      	sub	sp, #20
     5ea:	af00      	add	r7, sp, #0
     5ec:	6078      	str	r0, [r7, #4]
     5ee:	4608      	mov	r0, r1
     5f0:	4611      	mov	r1, r2
     5f2:	461a      	mov	r2, r3
     5f4:	4603      	mov	r3, r0
     5f6:	70fb      	strb	r3, [r7, #3]
     5f8:	460b      	mov	r3, r1
     5fa:	70bb      	strb	r3, [r7, #2]
     5fc:	4613      	mov	r3, r2
     5fe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     600:	78fa      	ldrb	r2, [r7, #3]
     602:	78bb      	ldrb	r3, [r7, #2]
     604:	6879      	ldr	r1, [r7, #4]
     606:	01d2      	lsls	r2, r2, #7
     608:	440a      	add	r2, r1
     60a:	4413      	add	r3, r2
     60c:	3340      	adds	r3, #64	; 0x40
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	7bfb      	ldrb	r3, [r7, #15]
     614:	f023 0301 	bic.w	r3, r3, #1
     618:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	787a      	ldrb	r2, [r7, #1]
     61c:	7bfb      	ldrb	r3, [r7, #15]
     61e:	4313      	orrs	r3, r2
     620:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	78fa      	ldrb	r2, [r7, #3]
     624:	78bb      	ldrb	r3, [r7, #2]
     626:	6879      	ldr	r1, [r7, #4]
     628:	01d2      	lsls	r2, r2, #7
     62a:	440a      	add	r2, r1
     62c:	4413      	add	r3, r2
     62e:	3340      	adds	r3, #64	; 0x40
     630:	7bfa      	ldrb	r2, [r7, #15]
     632:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     634:	bf00      	nop
     636:	3714      	adds	r7, #20
     638:	46bd      	mov	sp, r7
     63a:	f85d 7b04 	ldr.w	r7, [sp], #4
     63e:	4770      	bx	lr

00000640 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     640:	b490      	push	{r4, r7}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
     648:	460b      	mov	r3, r1
     64a:	70fb      	strb	r3, [r7, #3]
     64c:	4613      	mov	r3, r2
     64e:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     650:	78fa      	ldrb	r2, [r7, #3]
     652:	78bb      	ldrb	r3, [r7, #2]
     654:	78f8      	ldrb	r0, [r7, #3]
     656:	78b9      	ldrb	r1, [r7, #2]
     658:	687c      	ldr	r4, [r7, #4]
     65a:	01c0      	lsls	r0, r0, #7
     65c:	4420      	add	r0, r4
     65e:	4401      	add	r1, r0
     660:	3140      	adds	r1, #64	; 0x40
     662:	7809      	ldrb	r1, [r1, #0]
     664:	b2c9      	uxtb	r1, r1
     666:	f041 0104 	orr.w	r1, r1, #4
     66a:	b2c8      	uxtb	r0, r1
     66c:	6879      	ldr	r1, [r7, #4]
     66e:	01d2      	lsls	r2, r2, #7
     670:	440a      	add	r2, r1
     672:	4413      	add	r3, r2
     674:	3340      	adds	r3, #64	; 0x40
     676:	4602      	mov	r2, r0
     678:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     67a:	bf00      	nop
     67c:	3708      	adds	r7, #8
     67e:	46bd      	mov	sp, r7
     680:	bc90      	pop	{r4, r7}
     682:	4770      	bx	lr

00000684 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     684:	b490      	push	{r4, r7}
     686:	b082      	sub	sp, #8
     688:	af00      	add	r7, sp, #0
     68a:	6078      	str	r0, [r7, #4]
     68c:	460b      	mov	r3, r1
     68e:	70fb      	strb	r3, [r7, #3]
     690:	4613      	mov	r3, r2
     692:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     694:	78fa      	ldrb	r2, [r7, #3]
     696:	78bb      	ldrb	r3, [r7, #2]
     698:	78f8      	ldrb	r0, [r7, #3]
     69a:	78b9      	ldrb	r1, [r7, #2]
     69c:	687c      	ldr	r4, [r7, #4]
     69e:	01c0      	lsls	r0, r0, #7
     6a0:	4420      	add	r0, r4
     6a2:	4401      	add	r1, r0
     6a4:	3140      	adds	r1, #64	; 0x40
     6a6:	7809      	ldrb	r1, [r1, #0]
     6a8:	b2c9      	uxtb	r1, r1
     6aa:	f021 0104 	bic.w	r1, r1, #4
     6ae:	b2c8      	uxtb	r0, r1
     6b0:	6879      	ldr	r1, [r7, #4]
     6b2:	01d2      	lsls	r2, r2, #7
     6b4:	440a      	add	r2, r1
     6b6:	4413      	add	r3, r2
     6b8:	3340      	adds	r3, #64	; 0x40
     6ba:	4602      	mov	r2, r0
     6bc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6be:	bf00      	nop
     6c0:	3708      	adds	r7, #8
     6c2:	46bd      	mov	sp, r7
     6c4:	bc90      	pop	{r4, r7}
     6c6:	4770      	bx	lr

000006c8 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     6c8:	b480      	push	{r7}
     6ca:	b085      	sub	sp, #20
     6cc:	af00      	add	r7, sp, #0
     6ce:	60f8      	str	r0, [r7, #12]
     6d0:	460b      	mov	r3, r1
     6d2:	607a      	str	r2, [r7, #4]
     6d4:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d6:	7afb      	ldrb	r3, [r7, #11]
     6d8:	68fa      	ldr	r2, [r7, #12]
     6da:	01db      	lsls	r3, r3, #7
     6dc:	4413      	add	r3, r2
     6de:	3328      	adds	r3, #40	; 0x28
     6e0:	687a      	ldr	r2, [r7, #4]
     6e2:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6e4:	bf00      	nop
     6e6:	3714      	adds	r7, #20
     6e8:	46bd      	mov	sp, r7
     6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ee:	4770      	bx	lr

000006f0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	4603      	mov	r3, r0
     6f8:	6039      	str	r1, [r7, #0]
     6fa:	71fb      	strb	r3, [r7, #7]
     6fc:	4613      	mov	r3, r2
     6fe:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     700:	79bb      	ldrb	r3, [r7, #6]
     702:	2b01      	cmp	r3, #1
     704:	d01c      	beq.n	740 <_gpio_set_direction+0x50>
     706:	2b02      	cmp	r3, #2
     708:	d037      	beq.n	77a <_gpio_set_direction+0x8a>
     70a:	2b00      	cmp	r3, #0
     70c:	d14e      	bne.n	7ac <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     70e:	79fb      	ldrb	r3, [r7, #7]
     710:	683a      	ldr	r2, [r7, #0]
     712:	4619      	mov	r1, r3
     714:	482a      	ldr	r0, [pc, #168]	; (7c0 <_gpio_set_direction+0xd0>)
     716:	4b2b      	ldr	r3, [pc, #172]	; (7c4 <_gpio_set_direction+0xd4>)
     718:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     71a:	683b      	ldr	r3, [r7, #0]
     71c:	b29b      	uxth	r3, r3
     71e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     722:	79fb      	ldrb	r3, [r7, #7]
     724:	4619      	mov	r1, r3
     726:	4826      	ldr	r0, [pc, #152]	; (7c0 <_gpio_set_direction+0xd0>)
     728:	4b27      	ldr	r3, [pc, #156]	; (7c8 <_gpio_set_direction+0xd8>)
     72a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     72c:	683b      	ldr	r3, [r7, #0]
     72e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     730:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     734:	79fb      	ldrb	r3, [r7, #7]
     736:	4619      	mov	r1, r3
     738:	4821      	ldr	r0, [pc, #132]	; (7c0 <_gpio_set_direction+0xd0>)
     73a:	4b23      	ldr	r3, [pc, #140]	; (7c8 <_gpio_set_direction+0xd8>)
     73c:	4798      	blx	r3
		break;
     73e:	e03a      	b.n	7b6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     740:	79fb      	ldrb	r3, [r7, #7]
     742:	683a      	ldr	r2, [r7, #0]
     744:	4619      	mov	r1, r3
     746:	481e      	ldr	r0, [pc, #120]	; (7c0 <_gpio_set_direction+0xd0>)
     748:	4b1e      	ldr	r3, [pc, #120]	; (7c4 <_gpio_set_direction+0xd4>)
     74a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     74c:	683b      	ldr	r3, [r7, #0]
     74e:	b29b      	uxth	r3, r3
     750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     758:	79f9      	ldrb	r1, [r7, #7]
     75a:	461a      	mov	r2, r3
     75c:	4818      	ldr	r0, [pc, #96]	; (7c0 <_gpio_set_direction+0xd0>)
     75e:	4b1a      	ldr	r3, [pc, #104]	; (7c8 <_gpio_set_direction+0xd8>)
     760:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     762:	683b      	ldr	r3, [r7, #0]
     764:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     766:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     76a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     76e:	79f9      	ldrb	r1, [r7, #7]
     770:	461a      	mov	r2, r3
     772:	4813      	ldr	r0, [pc, #76]	; (7c0 <_gpio_set_direction+0xd0>)
     774:	4b14      	ldr	r3, [pc, #80]	; (7c8 <_gpio_set_direction+0xd8>)
     776:	4798      	blx	r3
		break;
     778:	e01d      	b.n	7b6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     77a:	79fb      	ldrb	r3, [r7, #7]
     77c:	683a      	ldr	r2, [r7, #0]
     77e:	4619      	mov	r1, r3
     780:	480f      	ldr	r0, [pc, #60]	; (7c0 <_gpio_set_direction+0xd0>)
     782:	4b12      	ldr	r3, [pc, #72]	; (7cc <_gpio_set_direction+0xdc>)
     784:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     786:	683b      	ldr	r3, [r7, #0]
     788:	b29b      	uxth	r3, r3
     78a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     78e:	79fb      	ldrb	r3, [r7, #7]
     790:	4619      	mov	r1, r3
     792:	480b      	ldr	r0, [pc, #44]	; (7c0 <_gpio_set_direction+0xd0>)
     794:	4b0c      	ldr	r3, [pc, #48]	; (7c8 <_gpio_set_direction+0xd8>)
     796:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     798:	683b      	ldr	r3, [r7, #0]
     79a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     79c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     7a0:	79fb      	ldrb	r3, [r7, #7]
     7a2:	4619      	mov	r1, r3
     7a4:	4806      	ldr	r0, [pc, #24]	; (7c0 <_gpio_set_direction+0xd0>)
     7a6:	4b08      	ldr	r3, [pc, #32]	; (7c8 <_gpio_set_direction+0xd8>)
     7a8:	4798      	blx	r3
		break;
     7aa:	e004      	b.n	7b6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     7ac:	2246      	movs	r2, #70	; 0x46
     7ae:	4908      	ldr	r1, [pc, #32]	; (7d0 <_gpio_set_direction+0xe0>)
     7b0:	2000      	movs	r0, #0
     7b2:	4b08      	ldr	r3, [pc, #32]	; (7d4 <_gpio_set_direction+0xe4>)
     7b4:	4798      	blx	r3
	}
}
     7b6:	bf00      	nop
     7b8:	3708      	adds	r7, #8
     7ba:	46bd      	mov	sp, r7
     7bc:	bd80      	pop	{r7, pc}
     7be:	bf00      	nop
     7c0:	41008000 	.word	0x41008000
     7c4:	000004b1 	.word	0x000004b1
     7c8:	000006c9 	.word	0x000006c9
     7cc:	00000489 	.word	0x00000489
     7d0:	0000576c 	.word	0x0000576c
     7d4:	00001629 	.word	0x00001629

000007d8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b082      	sub	sp, #8
     7dc:	af00      	add	r7, sp, #0
     7de:	4603      	mov	r3, r0
     7e0:	6039      	str	r1, [r7, #0]
     7e2:	71fb      	strb	r3, [r7, #7]
     7e4:	4613      	mov	r3, r2
     7e6:	71bb      	strb	r3, [r7, #6]
	if (level) {
     7e8:	79bb      	ldrb	r3, [r7, #6]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d006      	beq.n	7fc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     7ee:	79fb      	ldrb	r3, [r7, #7]
     7f0:	683a      	ldr	r2, [r7, #0]
     7f2:	4619      	mov	r1, r3
     7f4:	4806      	ldr	r0, [pc, #24]	; (810 <_gpio_set_level+0x38>)
     7f6:	4b07      	ldr	r3, [pc, #28]	; (814 <_gpio_set_level+0x3c>)
     7f8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     7fa:	e005      	b.n	808 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     7fc:	79fb      	ldrb	r3, [r7, #7]
     7fe:	683a      	ldr	r2, [r7, #0]
     800:	4619      	mov	r1, r3
     802:	4803      	ldr	r0, [pc, #12]	; (810 <_gpio_set_level+0x38>)
     804:	4b04      	ldr	r3, [pc, #16]	; (818 <_gpio_set_level+0x40>)
     806:	4798      	blx	r3
}
     808:	bf00      	nop
     80a:	3708      	adds	r7, #8
     80c:	46bd      	mov	sp, r7
     80e:	bd80      	pop	{r7, pc}
     810:	41008000 	.word	0x41008000
     814:	000004d9 	.word	0x000004d9
     818:	00000501 	.word	0x00000501

0000081c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	4603      	mov	r3, r0
     824:	71fb      	strb	r3, [r7, #7]
     826:	460b      	mov	r3, r1
     828:	71bb      	strb	r3, [r7, #6]
     82a:	4613      	mov	r3, r2
     82c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     82e:	797b      	ldrb	r3, [r7, #5]
     830:	2b01      	cmp	r3, #1
     832:	d00a      	beq.n	84a <_gpio_set_pin_pull_mode+0x2e>
     834:	2b02      	cmp	r3, #2
     836:	d01f      	beq.n	878 <_gpio_set_pin_pull_mode+0x5c>
     838:	2b00      	cmp	r3, #0
     83a:	d134      	bne.n	8a6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     83c:	79ba      	ldrb	r2, [r7, #6]
     83e:	79fb      	ldrb	r3, [r7, #7]
     840:	4619      	mov	r1, r3
     842:	481e      	ldr	r0, [pc, #120]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     844:	4b1e      	ldr	r3, [pc, #120]	; (8c0 <_gpio_set_pin_pull_mode+0xa4>)
     846:	4798      	blx	r3
		break;
     848:	e033      	b.n	8b2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     84a:	79bb      	ldrb	r3, [r7, #6]
     84c:	2201      	movs	r2, #1
     84e:	409a      	lsls	r2, r3
     850:	79fb      	ldrb	r3, [r7, #7]
     852:	4619      	mov	r1, r3
     854:	4819      	ldr	r0, [pc, #100]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     856:	4b1b      	ldr	r3, [pc, #108]	; (8c4 <_gpio_set_pin_pull_mode+0xa8>)
     858:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     85a:	79ba      	ldrb	r2, [r7, #6]
     85c:	79fb      	ldrb	r3, [r7, #7]
     85e:	4619      	mov	r1, r3
     860:	4816      	ldr	r0, [pc, #88]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     862:	4b19      	ldr	r3, [pc, #100]	; (8c8 <_gpio_set_pin_pull_mode+0xac>)
     864:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     866:	79bb      	ldrb	r3, [r7, #6]
     868:	2201      	movs	r2, #1
     86a:	409a      	lsls	r2, r3
     86c:	79fb      	ldrb	r3, [r7, #7]
     86e:	4619      	mov	r1, r3
     870:	4812      	ldr	r0, [pc, #72]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     872:	4b16      	ldr	r3, [pc, #88]	; (8cc <_gpio_set_pin_pull_mode+0xb0>)
     874:	4798      	blx	r3
		break;
     876:	e01c      	b.n	8b2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     878:	79bb      	ldrb	r3, [r7, #6]
     87a:	2201      	movs	r2, #1
     87c:	409a      	lsls	r2, r3
     87e:	79fb      	ldrb	r3, [r7, #7]
     880:	4619      	mov	r1, r3
     882:	480e      	ldr	r0, [pc, #56]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     884:	4b0f      	ldr	r3, [pc, #60]	; (8c4 <_gpio_set_pin_pull_mode+0xa8>)
     886:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     888:	79ba      	ldrb	r2, [r7, #6]
     88a:	79fb      	ldrb	r3, [r7, #7]
     88c:	4619      	mov	r1, r3
     88e:	480b      	ldr	r0, [pc, #44]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     890:	4b0d      	ldr	r3, [pc, #52]	; (8c8 <_gpio_set_pin_pull_mode+0xac>)
     892:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     894:	79bb      	ldrb	r3, [r7, #6]
     896:	2201      	movs	r2, #1
     898:	409a      	lsls	r2, r3
     89a:	79fb      	ldrb	r3, [r7, #7]
     89c:	4619      	mov	r1, r3
     89e:	4807      	ldr	r0, [pc, #28]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     8a0:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <_gpio_set_pin_pull_mode+0xb4>)
     8a2:	4798      	blx	r3
		break;
     8a4:	e005      	b.n	8b2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     8a6:	2289      	movs	r2, #137	; 0x89
     8a8:	490a      	ldr	r1, [pc, #40]	; (8d4 <_gpio_set_pin_pull_mode+0xb8>)
     8aa:	2000      	movs	r0, #0
     8ac:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <_gpio_set_pin_pull_mode+0xbc>)
     8ae:	4798      	blx	r3
		break;
     8b0:	bf00      	nop
	}
}
     8b2:	bf00      	nop
     8b4:	3708      	adds	r7, #8
     8b6:	46bd      	mov	sp, r7
     8b8:	bd80      	pop	{r7, pc}
     8ba:	bf00      	nop
     8bc:	41008000 	.word	0x41008000
     8c0:	00000685 	.word	0x00000685
     8c4:	000004b1 	.word	0x000004b1
     8c8:	00000641 	.word	0x00000641
     8cc:	000004d9 	.word	0x000004d9
     8d0:	00000501 	.word	0x00000501
     8d4:	0000576c 	.word	0x0000576c
     8d8:	00001629 	.word	0x00001629

000008dc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     8dc:	b590      	push	{r4, r7, lr}
     8de:	b085      	sub	sp, #20
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
     8e4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	095b      	lsrs	r3, r3, #5
     8ea:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	b2db      	uxtb	r3, r3
     8f0:	f003 031f 	and.w	r3, r3, #31
     8f4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     8f6:	683b      	ldr	r3, [r7, #0]
     8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
     8fc:	d106      	bne.n	90c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     8fe:	7bba      	ldrb	r2, [r7, #14]
     900:	7bf9      	ldrb	r1, [r7, #15]
     902:	2300      	movs	r3, #0
     904:	4812      	ldr	r0, [pc, #72]	; (950 <_gpio_set_pin_function+0x74>)
     906:	4c13      	ldr	r4, [pc, #76]	; (954 <_gpio_set_pin_function+0x78>)
     908:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     90a:	e01d      	b.n	948 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     90c:	7bba      	ldrb	r2, [r7, #14]
     90e:	7bf9      	ldrb	r1, [r7, #15]
     910:	2301      	movs	r3, #1
     912:	480f      	ldr	r0, [pc, #60]	; (950 <_gpio_set_pin_function+0x74>)
     914:	4c0f      	ldr	r4, [pc, #60]	; (954 <_gpio_set_pin_function+0x78>)
     916:	47a0      	blx	r4
		if (pin & 1) {
     918:	7bbb      	ldrb	r3, [r7, #14]
     91a:	f003 0301 	and.w	r3, r3, #1
     91e:	2b00      	cmp	r3, #0
     920:	d009      	beq.n	936 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     922:	7bbb      	ldrb	r3, [r7, #14]
     924:	085b      	lsrs	r3, r3, #1
     926:	b2da      	uxtb	r2, r3
     928:	683b      	ldr	r3, [r7, #0]
     92a:	b2db      	uxtb	r3, r3
     92c:	7bf9      	ldrb	r1, [r7, #15]
     92e:	4808      	ldr	r0, [pc, #32]	; (950 <_gpio_set_pin_function+0x74>)
     930:	4c09      	ldr	r4, [pc, #36]	; (958 <_gpio_set_pin_function+0x7c>)
     932:	47a0      	blx	r4
}
     934:	e008      	b.n	948 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     936:	7bbb      	ldrb	r3, [r7, #14]
     938:	085b      	lsrs	r3, r3, #1
     93a:	b2da      	uxtb	r2, r3
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	b2db      	uxtb	r3, r3
     940:	7bf9      	ldrb	r1, [r7, #15]
     942:	4803      	ldr	r0, [pc, #12]	; (950 <_gpio_set_pin_function+0x74>)
     944:	4c05      	ldr	r4, [pc, #20]	; (95c <_gpio_set_pin_function+0x80>)
     946:	47a0      	blx	r4
}
     948:	bf00      	nop
     94a:	3714      	adds	r7, #20
     94c:	46bd      	mov	sp, r7
     94e:	bd90      	pop	{r4, r7, pc}
     950:	41008000 	.word	0x41008000
     954:	000005e7 	.word	0x000005e7
     958:	00000589 	.word	0x00000589
     95c:	00000529 	.word	0x00000529

00000960 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	4603      	mov	r3, r0
     968:	460a      	mov	r2, r1
     96a:	71fb      	strb	r3, [r7, #7]
     96c:	4613      	mov	r3, r2
     96e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     970:	79fb      	ldrb	r3, [r7, #7]
     972:	095b      	lsrs	r3, r3, #5
     974:	b2d8      	uxtb	r0, r3
     976:	79fb      	ldrb	r3, [r7, #7]
     978:	f003 031f 	and.w	r3, r3, #31
     97c:	b2db      	uxtb	r3, r3
     97e:	79ba      	ldrb	r2, [r7, #6]
     980:	4619      	mov	r1, r3
     982:	4b03      	ldr	r3, [pc, #12]	; (990 <gpio_set_pin_pull_mode+0x30>)
     984:	4798      	blx	r3
}
     986:	bf00      	nop
     988:	3708      	adds	r7, #8
     98a:	46bd      	mov	sp, r7
     98c:	bd80      	pop	{r7, pc}
     98e:	bf00      	nop
     990:	0000081d 	.word	0x0000081d

00000994 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     994:	b580      	push	{r7, lr}
     996:	b082      	sub	sp, #8
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
     99c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     99e:	6839      	ldr	r1, [r7, #0]
     9a0:	6878      	ldr	r0, [r7, #4]
     9a2:	4b03      	ldr	r3, [pc, #12]	; (9b0 <gpio_set_pin_function+0x1c>)
     9a4:	4798      	blx	r3
}
     9a6:	bf00      	nop
     9a8:	3708      	adds	r7, #8
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop
     9b0:	000008dd 	.word	0x000008dd

000009b4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	b082      	sub	sp, #8
     9b8:	af00      	add	r7, sp, #0
     9ba:	4603      	mov	r3, r0
     9bc:	460a      	mov	r2, r1
     9be:	71fb      	strb	r3, [r7, #7]
     9c0:	4613      	mov	r3, r2
     9c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     9c4:	79fb      	ldrb	r3, [r7, #7]
     9c6:	095b      	lsrs	r3, r3, #5
     9c8:	b2d8      	uxtb	r0, r3
     9ca:	79fb      	ldrb	r3, [r7, #7]
     9cc:	f003 031f 	and.w	r3, r3, #31
     9d0:	2201      	movs	r2, #1
     9d2:	fa02 f303 	lsl.w	r3, r2, r3
     9d6:	79ba      	ldrb	r2, [r7, #6]
     9d8:	4619      	mov	r1, r3
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <gpio_set_pin_direction+0x34>)
     9dc:	4798      	blx	r3
}
     9de:	bf00      	nop
     9e0:	3708      	adds	r7, #8
     9e2:	46bd      	mov	sp, r7
     9e4:	bd80      	pop	{r7, pc}
     9e6:	bf00      	nop
     9e8:	000006f1 	.word	0x000006f1

000009ec <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	4603      	mov	r3, r0
     9f4:	460a      	mov	r2, r1
     9f6:	71fb      	strb	r3, [r7, #7]
     9f8:	4613      	mov	r3, r2
     9fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     9fc:	79fb      	ldrb	r3, [r7, #7]
     9fe:	095b      	lsrs	r3, r3, #5
     a00:	b2d8      	uxtb	r0, r3
     a02:	79fb      	ldrb	r3, [r7, #7]
     a04:	f003 031f 	and.w	r3, r3, #31
     a08:	2201      	movs	r2, #1
     a0a:	fa02 f303 	lsl.w	r3, r2, r3
     a0e:	79ba      	ldrb	r2, [r7, #6]
     a10:	4619      	mov	r1, r3
     a12:	4b03      	ldr	r3, [pc, #12]	; (a20 <gpio_set_pin_level+0x34>)
     a14:	4798      	blx	r3
}
     a16:	bf00      	nop
     a18:	3708      	adds	r7, #8
     a1a:	46bd      	mov	sp, r7
     a1c:	bd80      	pop	{r7, pc}
     a1e:	bf00      	nop
     a20:	000007d9 	.word	0x000007d9

00000a24 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     a24:	b580      	push	{r7, lr}
     a26:	af00      	add	r7, sp, #0
	_init_chip();
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <init_mcu+0xc>)
     a2a:	4798      	blx	r3
}
     a2c:	bf00      	nop
     a2e:	bd80      	pop	{r7, pc}
     a30:	00001999 	.word	0x00001999

00000a34 <EXTERNAL_IRQ_0_init>:
struct timer_descriptor       TIMER_2;

static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

void EXTERNAL_IRQ_0_init(void)
{
     a34:	b580      	push	{r7, lr}
     a36:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a38:	2240      	movs	r2, #64	; 0x40
     a3a:	2104      	movs	r1, #4
     a3c:	480b      	ldr	r0, [pc, #44]	; (a6c <EXTERNAL_IRQ_0_init+0x38>)
     a3e:	4b0c      	ldr	r3, [pc, #48]	; (a70 <EXTERNAL_IRQ_0_init+0x3c>)
     a40:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     a42:	480c      	ldr	r0, [pc, #48]	; (a74 <EXTERNAL_IRQ_0_init+0x40>)
     a44:	4b0c      	ldr	r3, [pc, #48]	; (a78 <EXTERNAL_IRQ_0_init+0x44>)
     a46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB00, GPIO_DIRECTION_IN);
     a48:	2101      	movs	r1, #1
     a4a:	2020      	movs	r0, #32
     a4c:	4b0b      	ldr	r3, [pc, #44]	; (a7c <EXTERNAL_IRQ_0_init+0x48>)
     a4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB00,
     a50:	2100      	movs	r1, #0
     a52:	2020      	movs	r0, #32
     a54:	4b0a      	ldr	r3, [pc, #40]	; (a80 <EXTERNAL_IRQ_0_init+0x4c>)
     a56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB00, PINMUX_PB00A_EIC_EXTINT0);
     a58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     a5c:	2020      	movs	r0, #32
     a5e:	4b09      	ldr	r3, [pc, #36]	; (a84 <EXTERNAL_IRQ_0_init+0x50>)
     a60:	4798      	blx	r3

	ext_irq_init();
     a62:	4b09      	ldr	r3, [pc, #36]	; (a88 <EXTERNAL_IRQ_0_init+0x54>)
     a64:	4798      	blx	r3
}
     a66:	bf00      	nop
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	40001c00 	.word	0x40001c00
     a70:	00000383 	.word	0x00000383
     a74:	40000800 	.word	0x40000800
     a78:	000003a9 	.word	0x000003a9
     a7c:	000009b5 	.word	0x000009b5
     a80:	00000961 	.word	0x00000961
     a84:	00000995 	.word	0x00000995
     a88:	00000d6d 	.word	0x00000d6d

00000a8c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     a8c:	b580      	push	{r7, lr}
     a8e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a90:	2240      	movs	r2, #64	; 0x40
     a92:	210b      	movs	r1, #11
     a94:	4804      	ldr	r0, [pc, #16]	; (aa8 <EVENT_SYSTEM_0_init+0x1c>)
     a96:	4b05      	ldr	r3, [pc, #20]	; (aac <EVENT_SYSTEM_0_init+0x20>)
     a98:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     a9a:	4805      	ldr	r0, [pc, #20]	; (ab0 <EVENT_SYSTEM_0_init+0x24>)
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <EVENT_SYSTEM_0_init+0x28>)
     a9e:	4798      	blx	r3

	event_system_init();
     aa0:	4b05      	ldr	r3, [pc, #20]	; (ab8 <EVENT_SYSTEM_0_init+0x2c>)
     aa2:	4798      	blx	r3
}
     aa4:	bf00      	nop
     aa6:	bd80      	pop	{r7, pc}
     aa8:	40001c00 	.word	0x40001c00
     aac:	00000383 	.word	0x00000383
     ab0:	40000800 	.word	0x40000800
     ab4:	00000409 	.word	0x00000409
     ab8:	00000d59 	.word	0x00000d59

00000abc <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     abc:	b580      	push	{r7, lr}
     abe:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ac0:	2240      	movs	r2, #64	; 0x40
     ac2:	2117      	movs	r1, #23
     ac4:	4806      	ldr	r0, [pc, #24]	; (ae0 <USART_0_CLOCK_init+0x24>)
     ac6:	4b07      	ldr	r3, [pc, #28]	; (ae4 <USART_0_CLOCK_init+0x28>)
     ac8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aca:	2243      	movs	r2, #67	; 0x43
     acc:	2103      	movs	r1, #3
     ace:	4804      	ldr	r0, [pc, #16]	; (ae0 <USART_0_CLOCK_init+0x24>)
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <USART_0_CLOCK_init+0x28>)
     ad2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     ad4:	4804      	ldr	r0, [pc, #16]	; (ae8 <USART_0_CLOCK_init+0x2c>)
     ad6:	4b05      	ldr	r3, [pc, #20]	; (aec <USART_0_CLOCK_init+0x30>)
     ad8:	4798      	blx	r3
}
     ada:	bf00      	nop
     adc:	bd80      	pop	{r7, pc}
     ade:	bf00      	nop
     ae0:	40001c00 	.word	0x40001c00
     ae4:	00000383 	.word	0x00000383
     ae8:	40000800 	.word	0x40000800
     aec:	00000429 	.word	0x00000429

00000af0 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     af0:	b580      	push	{r7, lr}
     af2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     af4:	4904      	ldr	r1, [pc, #16]	; (b08 <USART_0_PORT_init+0x18>)
     af6:	2039      	movs	r0, #57	; 0x39
     af8:	4b04      	ldr	r3, [pc, #16]	; (b0c <USART_0_PORT_init+0x1c>)
     afa:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     afc:	4904      	ldr	r1, [pc, #16]	; (b10 <USART_0_PORT_init+0x20>)
     afe:	2038      	movs	r0, #56	; 0x38
     b00:	4b02      	ldr	r3, [pc, #8]	; (b0c <USART_0_PORT_init+0x1c>)
     b02:	4798      	blx	r3
}
     b04:	bf00      	nop
     b06:	bd80      	pop	{r7, pc}
     b08:	00390003 	.word	0x00390003
     b0c:	00000995 	.word	0x00000995
     b10:	00380003 	.word	0x00380003

00000b14 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     b14:	b590      	push	{r4, r7, lr}
     b16:	b083      	sub	sp, #12
     b18:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     b1a:	4b08      	ldr	r3, [pc, #32]	; (b3c <USART_0_init+0x28>)
     b1c:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     b1e:	2300      	movs	r3, #0
     b20:	9300      	str	r3, [sp, #0]
     b22:	2310      	movs	r3, #16
     b24:	4a06      	ldr	r2, [pc, #24]	; (b40 <USART_0_init+0x2c>)
     b26:	4907      	ldr	r1, [pc, #28]	; (b44 <USART_0_init+0x30>)
     b28:	4807      	ldr	r0, [pc, #28]	; (b48 <USART_0_init+0x34>)
     b2a:	4c08      	ldr	r4, [pc, #32]	; (b4c <USART_0_init+0x38>)
     b2c:	47a0      	blx	r4
	USART_0_PORT_init();
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <USART_0_init+0x3c>)
     b30:	4798      	blx	r3
}
     b32:	bf00      	nop
     b34:	3704      	adds	r7, #4
     b36:	46bd      	mov	sp, r7
     b38:	bd90      	pop	{r4, r7, pc}
     b3a:	bf00      	nop
     b3c:	00000abd 	.word	0x00000abd
     b40:	200000cc 	.word	0x200000cc
     b44:	41012000 	.word	0x41012000
     b48:	200001ec 	.word	0x200001ec
     b4c:	00001231 	.word	0x00001231
     b50:	00000af1 	.word	0x00000af1

00000b54 <TIMER_0_CLOCK_init>:

void TIMER_0_CLOCK_init(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     b58:	4804      	ldr	r0, [pc, #16]	; (b6c <TIMER_0_CLOCK_init+0x18>)
     b5a:	4b05      	ldr	r3, [pc, #20]	; (b70 <TIMER_0_CLOCK_init+0x1c>)
     b5c:	4798      	blx	r3

	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b5e:	2240      	movs	r2, #64	; 0x40
     b60:	2109      	movs	r1, #9
     b62:	4804      	ldr	r0, [pc, #16]	; (b74 <TIMER_0_CLOCK_init+0x20>)
     b64:	4b04      	ldr	r3, [pc, #16]	; (b78 <TIMER_0_CLOCK_init+0x24>)
     b66:	4798      	blx	r3
}
     b68:	bf00      	nop
     b6a:	bd80      	pop	{r7, pc}
     b6c:	40000800 	.word	0x40000800
     b70:	000003c9 	.word	0x000003c9
     b74:	40001c00 	.word	0x40001c00
     b78:	00000383 	.word	0x00000383

00000b7c <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
     b80:	4808      	ldr	r0, [pc, #32]	; (ba4 <TIMER_1_init+0x28>)
     b82:	4b09      	ldr	r3, [pc, #36]	; (ba8 <TIMER_1_init+0x2c>)
     b84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b86:	2240      	movs	r2, #64	; 0x40
     b88:	2109      	movs	r1, #9
     b8a:	4808      	ldr	r0, [pc, #32]	; (bac <TIMER_1_init+0x30>)
     b8c:	4b08      	ldr	r3, [pc, #32]	; (bb0 <TIMER_1_init+0x34>)
     b8e:	4798      	blx	r3

	timer_init(&TIMER_1, TC1, _tc_get_timer());
     b90:	4b08      	ldr	r3, [pc, #32]	; (bb4 <TIMER_1_init+0x38>)
     b92:	4798      	blx	r3
     b94:	4603      	mov	r3, r0
     b96:	461a      	mov	r2, r3
     b98:	4907      	ldr	r1, [pc, #28]	; (bb8 <TIMER_1_init+0x3c>)
     b9a:	4808      	ldr	r0, [pc, #32]	; (bbc <TIMER_1_init+0x40>)
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <TIMER_1_init+0x44>)
     b9e:	4798      	blx	r3
}
     ba0:	bf00      	nop
     ba2:	bd80      	pop	{r7, pc}
     ba4:	40000800 	.word	0x40000800
     ba8:	000003e9 	.word	0x000003e9
     bac:	40001c00 	.word	0x40001c00
     bb0:	00000383 	.word	0x00000383
     bb4:	00003601 	.word	0x00003601
     bb8:	40003c00 	.word	0x40003c00
     bbc:	200001d0 	.word	0x200001d0
     bc0:	00000f19 	.word	0x00000f19

00000bc4 <TIMER_2_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_2_init(void)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
     bc8:	4808      	ldr	r0, [pc, #32]	; (bec <TIMER_2_init+0x28>)
     bca:	4b09      	ldr	r3, [pc, #36]	; (bf0 <TIMER_2_init+0x2c>)
     bcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	211a      	movs	r1, #26
     bd2:	4808      	ldr	r0, [pc, #32]	; (bf4 <TIMER_2_init+0x30>)
     bd4:	4b08      	ldr	r3, [pc, #32]	; (bf8 <TIMER_2_init+0x34>)
     bd6:	4798      	blx	r3

	timer_init(&TIMER_2, TC2, _tc_get_timer());
     bd8:	4b08      	ldr	r3, [pc, #32]	; (bfc <TIMER_2_init+0x38>)
     bda:	4798      	blx	r3
     bdc:	4603      	mov	r3, r0
     bde:	461a      	mov	r2, r3
     be0:	4907      	ldr	r1, [pc, #28]	; (c00 <TIMER_2_init+0x3c>)
     be2:	4808      	ldr	r0, [pc, #32]	; (c04 <TIMER_2_init+0x40>)
     be4:	4b08      	ldr	r3, [pc, #32]	; (c08 <TIMER_2_init+0x44>)
     be6:	4798      	blx	r3
}
     be8:	bf00      	nop
     bea:	bd80      	pop	{r7, pc}
     bec:	40000800 	.word	0x40000800
     bf0:	00000469 	.word	0x00000469
     bf4:	40001c00 	.word	0x40001c00
     bf8:	00000383 	.word	0x00000383
     bfc:	00003601 	.word	0x00003601
     c00:	4101a000 	.word	0x4101a000
     c04:	200001b4 	.word	0x200001b4
     c08:	00000f19 	.word	0x00000f19

00000c0c <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     c10:	4902      	ldr	r1, [pc, #8]	; (c1c <PWM_0_PORT_init+0x10>)
     c12:	204a      	movs	r0, #74	; 0x4a
     c14:	4b02      	ldr	r3, [pc, #8]	; (c20 <PWM_0_PORT_init+0x14>)
     c16:	4798      	blx	r3
}
     c18:	bf00      	nop
     c1a:	bd80      	pop	{r7, pc}
     c1c:	004a0005 	.word	0x004a0005
     c20:	00000995 	.word	0x00000995

00000c24 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     c24:	b580      	push	{r7, lr}
     c26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     c28:	4804      	ldr	r0, [pc, #16]	; (c3c <PWM_0_CLOCK_init+0x18>)
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <PWM_0_CLOCK_init+0x1c>)
     c2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c2e:	2240      	movs	r2, #64	; 0x40
     c30:	2119      	movs	r1, #25
     c32:	4804      	ldr	r0, [pc, #16]	; (c44 <PWM_0_CLOCK_init+0x20>)
     c34:	4b04      	ldr	r3, [pc, #16]	; (c48 <PWM_0_CLOCK_init+0x24>)
     c36:	4798      	blx	r3
}
     c38:	bf00      	nop
     c3a:	bd80      	pop	{r7, pc}
     c3c:	40000800 	.word	0x40000800
     c40:	00000449 	.word	0x00000449
     c44:	40001c00 	.word	0x40001c00
     c48:	00000383 	.word	0x00000383

00000c4c <system_init>:

void system_init(void)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	af00      	add	r7, sp, #0
	init_mcu();
     c50:	4b1f      	ldr	r3, [pc, #124]	; (cd0 <system_init+0x84>)
     c52:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(MOTOR_INPUT_2,
     c54:	2100      	movs	r1, #0
     c56:	2006      	movs	r0, #6
     c58:	4b1e      	ldr	r3, [pc, #120]	; (cd4 <system_init+0x88>)
     c5a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_INPUT_2, GPIO_DIRECTION_OUT);
     c5c:	2102      	movs	r1, #2
     c5e:	2006      	movs	r0, #6
     c60:	4b1d      	ldr	r3, [pc, #116]	; (cd8 <system_init+0x8c>)
     c62:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_INPUT_2, GPIO_PIN_FUNCTION_OFF);
     c64:	f04f 31ff 	mov.w	r1, #4294967295
     c68:	2006      	movs	r0, #6
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <system_init+0x90>)
     c6c:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(MOTOR_INPUT_1,
     c6e:	2100      	movs	r1, #0
     c70:	2007      	movs	r0, #7
     c72:	4b18      	ldr	r3, [pc, #96]	; (cd4 <system_init+0x88>)
     c74:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_INPUT_1, GPIO_DIRECTION_OUT);
     c76:	2102      	movs	r1, #2
     c78:	2007      	movs	r0, #7
     c7a:	4b17      	ldr	r3, [pc, #92]	; (cd8 <system_init+0x8c>)
     c7c:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_INPUT_1, GPIO_PIN_FUNCTION_OFF);
     c7e:	f04f 31ff 	mov.w	r1, #4294967295
     c82:	2007      	movs	r0, #7
     c84:	4b15      	ldr	r3, [pc, #84]	; (cdc <system_init+0x90>)
     c86:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(HAL_SENSOR_B, GPIO_DIRECTION_IN);
     c88:	2101      	movs	r1, #1
     c8a:	2021      	movs	r0, #33	; 0x21
     c8c:	4b12      	ldr	r3, [pc, #72]	; (cd8 <system_init+0x8c>)
     c8e:	4798      	blx	r3

	gpio_set_pin_pull_mode(HAL_SENSOR_B,
     c90:	2102      	movs	r1, #2
     c92:	2021      	movs	r0, #33	; 0x21
     c94:	4b12      	ldr	r3, [pc, #72]	; (ce0 <system_init+0x94>)
     c96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(HAL_SENSOR_B, GPIO_PIN_FUNCTION_OFF);
     c98:	f04f 31ff 	mov.w	r1, #4294967295
     c9c:	2021      	movs	r0, #33	; 0x21
     c9e:	4b0f      	ldr	r3, [pc, #60]	; (cdc <system_init+0x90>)
     ca0:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     ca2:	4b10      	ldr	r3, [pc, #64]	; (ce4 <system_init+0x98>)
     ca4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     ca6:	4b10      	ldr	r3, [pc, #64]	; (ce8 <system_init+0x9c>)
     ca8:	4798      	blx	r3

	USART_0_init();
     caa:	4b10      	ldr	r3, [pc, #64]	; (cec <system_init+0xa0>)
     cac:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     cae:	4b10      	ldr	r3, [pc, #64]	; (cf0 <system_init+0xa4>)
     cb0:	4798      	blx	r3

	TIMER_0_init();
     cb2:	4b10      	ldr	r3, [pc, #64]	; (cf4 <system_init+0xa8>)
     cb4:	4798      	blx	r3

	TIMER_1_init();
     cb6:	4b10      	ldr	r3, [pc, #64]	; (cf8 <system_init+0xac>)
     cb8:	4798      	blx	r3
	TIMER_2_init();
     cba:	4b10      	ldr	r3, [pc, #64]	; (cfc <system_init+0xb0>)
     cbc:	4798      	blx	r3
	PWM_0_CLOCK_init();
     cbe:	4b10      	ldr	r3, [pc, #64]	; (d00 <system_init+0xb4>)
     cc0:	4798      	blx	r3

	PWM_0_PORT_init();
     cc2:	4b10      	ldr	r3, [pc, #64]	; (d04 <system_init+0xb8>)
     cc4:	4798      	blx	r3

	PWM_0_init();
     cc6:	4b10      	ldr	r3, [pc, #64]	; (d08 <system_init+0xbc>)
     cc8:	4798      	blx	r3
}
     cca:	bf00      	nop
     ccc:	bd80      	pop	{r7, pc}
     cce:	bf00      	nop
     cd0:	00000a25 	.word	0x00000a25
     cd4:	000009ed 	.word	0x000009ed
     cd8:	000009b5 	.word	0x000009b5
     cdc:	00000995 	.word	0x00000995
     ce0:	00000961 	.word	0x00000961
     ce4:	00000a35 	.word	0x00000a35
     ce8:	00000a8d 	.word	0x00000a8d
     cec:	00000b15 	.word	0x00000b15
     cf0:	00000b55 	.word	0x00000b55
     cf4:	00003975 	.word	0x00003975
     cf8:	00000b7d 	.word	0x00000b7d
     cfc:	00000bc5 	.word	0x00000bc5
     d00:	00000c25 	.word	0x00000c25
     d04:	00000c0d 	.word	0x00000c0d
     d08:	00002f29 	.word	0x00002f29

00000d0c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     d0c:	b480      	push	{r7}
     d0e:	b085      	sub	sp, #20
     d10:	af00      	add	r7, sp, #0
     d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d14:	f3ef 8310 	mrs	r3, PRIMASK
     d18:	60fb      	str	r3, [r7, #12]
  return(result);
     d1a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d22:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d26:	bf00      	nop
     d28:	3714      	adds	r7, #20
     d2a:	46bd      	mov	sp, r7
     d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d30:	4770      	bx	lr

00000d32 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     d32:	b480      	push	{r7}
     d34:	b085      	sub	sp, #20
     d36:	af00      	add	r7, sp, #0
     d38:	6078      	str	r0, [r7, #4]
     d3a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	681b      	ldr	r3, [r3, #0]
     d42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	f383 8810 	msr	PRIMASK, r3
}
     d4a:	bf00      	nop
     d4c:	3714      	adds	r7, #20
     d4e:	46bd      	mov	sp, r7
     d50:	f85d 7b04 	ldr.w	r7, [sp], #4
     d54:	4770      	bx	lr
	...

00000d58 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     d58:	b580      	push	{r7, lr}
     d5a:	af00      	add	r7, sp, #0
	return _event_system_init();
     d5c:	4b02      	ldr	r3, [pc, #8]	; (d68 <event_system_init+0x10>)
     d5e:	4798      	blx	r3
     d60:	4603      	mov	r3, r0
}
     d62:	4618      	mov	r0, r3
     d64:	bd80      	pop	{r7, pc}
     d66:	bf00      	nop
     d68:	00001f81 	.word	0x00001f81

00000d6c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b082      	sub	sp, #8
     d70:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d72:	2300      	movs	r3, #0
     d74:	80fb      	strh	r3, [r7, #6]
     d76:	e00e      	b.n	d96 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     d78:	88fb      	ldrh	r3, [r7, #6]
     d7a:	4a0c      	ldr	r2, [pc, #48]	; (dac <ext_irq_init+0x40>)
     d7c:	00db      	lsls	r3, r3, #3
     d7e:	4413      	add	r3, r2
     d80:	f04f 32ff 	mov.w	r2, #4294967295
     d84:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     d86:	88fb      	ldrh	r3, [r7, #6]
     d88:	4a08      	ldr	r2, [pc, #32]	; (dac <ext_irq_init+0x40>)
     d8a:	2100      	movs	r1, #0
     d8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d90:	88fb      	ldrh	r3, [r7, #6]
     d92:	3301      	adds	r3, #1
     d94:	80fb      	strh	r3, [r7, #6]
     d96:	88fb      	ldrh	r3, [r7, #6]
     d98:	2b00      	cmp	r3, #0
     d9a:	d0ed      	beq.n	d78 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
     d9c:	4804      	ldr	r0, [pc, #16]	; (db0 <ext_irq_init+0x44>)
     d9e:	4b05      	ldr	r3, [pc, #20]	; (db4 <ext_irq_init+0x48>)
     da0:	4798      	blx	r3
     da2:	4603      	mov	r3, r0
}
     da4:	4618      	mov	r0, r3
     da6:	3708      	adds	r7, #8
     da8:	46bd      	mov	sp, r7
     daa:	bd80      	pop	{r7, pc}
     dac:	200000dc 	.word	0x200000dc
     db0:	00000db9 	.word	0x00000db9
     db4:	00001cc5 	.word	0x00001cc5

00000db8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     db8:	b580      	push	{r7, lr}
     dba:	b084      	sub	sp, #16
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     dc0:	2300      	movs	r3, #0
     dc2:	73fb      	strb	r3, [r7, #15]
     dc4:	2301      	movs	r3, #1
     dc6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
     dc8:	e02a      	b.n	e20 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
     dca:	7bba      	ldrb	r2, [r7, #14]
     dcc:	7bfb      	ldrb	r3, [r7, #15]
     dce:	4413      	add	r3, r2
     dd0:	105b      	asrs	r3, r3, #1
     dd2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
     dd4:	7b7b      	ldrb	r3, [r7, #13]
     dd6:	2b00      	cmp	r3, #0
     dd8:	d127      	bne.n	e2a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     dda:	7b7b      	ldrb	r3, [r7, #13]
     ddc:	4a16      	ldr	r2, [pc, #88]	; (e38 <process_ext_irq+0x80>)
     dde:	00db      	lsls	r3, r3, #3
     de0:	4413      	add	r3, r2
     de2:	685a      	ldr	r2, [r3, #4]
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	429a      	cmp	r2, r3
     de8:	d10b      	bne.n	e02 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
     dea:	7b7b      	ldrb	r3, [r7, #13]
     dec:	4a12      	ldr	r2, [pc, #72]	; (e38 <process_ext_irq+0x80>)
     dee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     df2:	2b00      	cmp	r3, #0
     df4:	d01b      	beq.n	e2e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
     df6:	7b7b      	ldrb	r3, [r7, #13]
     df8:	4a0f      	ldr	r2, [pc, #60]	; (e38 <process_ext_irq+0x80>)
     dfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     dfe:	4798      	blx	r3
			}
			return;
     e00:	e015      	b.n	e2e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
     e02:	7b7b      	ldrb	r3, [r7, #13]
     e04:	4a0c      	ldr	r2, [pc, #48]	; (e38 <process_ext_irq+0x80>)
     e06:	00db      	lsls	r3, r3, #3
     e08:	4413      	add	r3, r2
     e0a:	685a      	ldr	r2, [r3, #4]
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	429a      	cmp	r2, r3
     e10:	d203      	bcs.n	e1a <process_ext_irq+0x62>
			lower = middle + 1;
     e12:	7b7b      	ldrb	r3, [r7, #13]
     e14:	3301      	adds	r3, #1
     e16:	73fb      	strb	r3, [r7, #15]
     e18:	e002      	b.n	e20 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
     e1a:	7b7b      	ldrb	r3, [r7, #13]
     e1c:	3b01      	subs	r3, #1
     e1e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
     e20:	7bba      	ldrb	r2, [r7, #14]
     e22:	7bfb      	ldrb	r3, [r7, #15]
     e24:	429a      	cmp	r2, r3
     e26:	d2d0      	bcs.n	dca <process_ext_irq+0x12>
     e28:	e002      	b.n	e30 <process_ext_irq+0x78>
			return;
     e2a:	bf00      	nop
     e2c:	e000      	b.n	e30 <process_ext_irq+0x78>
			return;
     e2e:	bf00      	nop
		}
	}
}
     e30:	3710      	adds	r7, #16
     e32:	46bd      	mov	sp, r7
     e34:	bd80      	pop	{r7, pc}
     e36:	bf00      	nop
     e38:	200000dc 	.word	0x200000dc

00000e3c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e3c:	b580      	push	{r7, lr}
     e3e:	b084      	sub	sp, #16
     e40:	af00      	add	r7, sp, #0
     e42:	60f8      	str	r0, [r7, #12]
     e44:	60b9      	str	r1, [r7, #8]
     e46:	4613      	mov	r3, r2
     e48:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d004      	beq.n	e5a <io_write+0x1e>
     e50:	68bb      	ldr	r3, [r7, #8]
     e52:	2b00      	cmp	r3, #0
     e54:	d001      	beq.n	e5a <io_write+0x1e>
     e56:	2301      	movs	r3, #1
     e58:	e000      	b.n	e5c <io_write+0x20>
     e5a:	2300      	movs	r3, #0
     e5c:	f003 0301 	and.w	r3, r3, #1
     e60:	b2db      	uxtb	r3, r3
     e62:	2234      	movs	r2, #52	; 0x34
     e64:	4907      	ldr	r1, [pc, #28]	; (e84 <io_write+0x48>)
     e66:	4618      	mov	r0, r3
     e68:	4b07      	ldr	r3, [pc, #28]	; (e88 <io_write+0x4c>)
     e6a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     e6c:	68fb      	ldr	r3, [r7, #12]
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	88fa      	ldrh	r2, [r7, #6]
     e72:	68b9      	ldr	r1, [r7, #8]
     e74:	68f8      	ldr	r0, [r7, #12]
     e76:	4798      	blx	r3
     e78:	4603      	mov	r3, r0
}
     e7a:	4618      	mov	r0, r3
     e7c:	3710      	adds	r7, #16
     e7e:	46bd      	mov	sp, r7
     e80:	bd80      	pop	{r7, pc}
     e82:	bf00      	nop
     e84:	00005788 	.word	0x00005788
     e88:	00001629 	.word	0x00001629

00000e8c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     e8c:	b580      	push	{r7, lr}
     e8e:	b084      	sub	sp, #16
     e90:	af00      	add	r7, sp, #0
     e92:	60f8      	str	r0, [r7, #12]
     e94:	60b9      	str	r1, [r7, #8]
     e96:	4613      	mov	r3, r2
     e98:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     e9a:	68fb      	ldr	r3, [r7, #12]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d004      	beq.n	eaa <io_read+0x1e>
     ea0:	68bb      	ldr	r3, [r7, #8]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d001      	beq.n	eaa <io_read+0x1e>
     ea6:	2301      	movs	r3, #1
     ea8:	e000      	b.n	eac <io_read+0x20>
     eaa:	2300      	movs	r3, #0
     eac:	f003 0301 	and.w	r3, r3, #1
     eb0:	b2db      	uxtb	r3, r3
     eb2:	223d      	movs	r2, #61	; 0x3d
     eb4:	4907      	ldr	r1, [pc, #28]	; (ed4 <io_read+0x48>)
     eb6:	4618      	mov	r0, r3
     eb8:	4b07      	ldr	r3, [pc, #28]	; (ed8 <io_read+0x4c>)
     eba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	685b      	ldr	r3, [r3, #4]
     ec0:	88fa      	ldrh	r2, [r7, #6]
     ec2:	68b9      	ldr	r1, [r7, #8]
     ec4:	68f8      	ldr	r0, [r7, #12]
     ec6:	4798      	blx	r3
     ec8:	4603      	mov	r3, r0
}
     eca:	4618      	mov	r0, r3
     ecc:	3710      	adds	r7, #16
     ece:	46bd      	mov	sp, r7
     ed0:	bd80      	pop	{r7, pc}
     ed2:	bf00      	nop
     ed4:	00005788 	.word	0x00005788
     ed8:	00001629 	.word	0x00001629

00000edc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     edc:	b480      	push	{r7}
     ede:	b083      	sub	sp, #12
     ee0:	af00      	add	r7, sp, #0
     ee2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	681b      	ldr	r3, [r3, #0]
}
     ee8:	4618      	mov	r0, r3
     eea:	370c      	adds	r7, #12
     eec:	46bd      	mov	sp, r7
     eee:	f85d 7b04 	ldr.w	r7, [sp], #4
     ef2:	4770      	bx	lr

00000ef4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	2b00      	cmp	r3, #0
     f00:	d002      	beq.n	f08 <list_get_next_element+0x14>
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	e000      	b.n	f0a <list_get_next_element+0x16>
     f08:	2300      	movs	r3, #0
}
     f0a:	4618      	mov	r0, r3
     f0c:	370c      	adds	r7, #12
     f0e:	46bd      	mov	sp, r7
     f10:	f85d 7b04 	ldr.w	r7, [sp], #4
     f14:	4770      	bx	lr
	...

00000f18 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     f18:	b580      	push	{r7, lr}
     f1a:	b084      	sub	sp, #16
     f1c:	af00      	add	r7, sp, #0
     f1e:	60f8      	str	r0, [r7, #12]
     f20:	60b9      	str	r1, [r7, #8]
     f22:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	2b00      	cmp	r3, #0
     f28:	d004      	beq.n	f34 <timer_init+0x1c>
     f2a:	68bb      	ldr	r3, [r7, #8]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d001      	beq.n	f34 <timer_init+0x1c>
     f30:	2301      	movs	r3, #1
     f32:	e000      	b.n	f36 <timer_init+0x1e>
     f34:	2300      	movs	r3, #0
     f36:	f003 0301 	and.w	r3, r3, #1
     f3a:	b2db      	uxtb	r3, r3
     f3c:	223b      	movs	r2, #59	; 0x3b
     f3e:	490a      	ldr	r1, [pc, #40]	; (f68 <timer_init+0x50>)
     f40:	4618      	mov	r0, r3
     f42:	4b0a      	ldr	r3, [pc, #40]	; (f6c <timer_init+0x54>)
     f44:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     f46:	68fb      	ldr	r3, [r7, #12]
     f48:	68b9      	ldr	r1, [r7, #8]
     f4a:	4618      	mov	r0, r3
     f4c:	4b08      	ldr	r3, [pc, #32]	; (f70 <timer_init+0x58>)
     f4e:	4798      	blx	r3
	descr->time                           = 0;
     f50:	68fb      	ldr	r3, [r7, #12]
     f52:	2200      	movs	r2, #0
     f54:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	4a06      	ldr	r2, [pc, #24]	; (f74 <timer_init+0x5c>)
     f5a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     f5c:	2300      	movs	r3, #0
}
     f5e:	4618      	mov	r0, r3
     f60:	3710      	adds	r7, #16
     f62:	46bd      	mov	sp, r7
     f64:	bd80      	pop	{r7, pc}
     f66:	bf00      	nop
     f68:	0000579c 	.word	0x0000579c
     f6c:	00001629 	.word	0x00001629
     f70:	00003311 	.word	0x00003311
     f74:	00001175 	.word	0x00001175

00000f78 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	2b00      	cmp	r3, #0
     f84:	bf14      	ite	ne
     f86:	2301      	movne	r3, #1
     f88:	2300      	moveq	r3, #0
     f8a:	b2db      	uxtb	r3, r3
     f8c:	2253      	movs	r2, #83	; 0x53
     f8e:	490b      	ldr	r1, [pc, #44]	; (fbc <timer_start+0x44>)
     f90:	4618      	mov	r0, r3
     f92:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <timer_start+0x48>)
     f94:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	4618      	mov	r0, r3
     f9a:	4b0a      	ldr	r3, [pc, #40]	; (fc4 <timer_start+0x4c>)
     f9c:	4798      	blx	r3
     f9e:	4603      	mov	r3, r0
     fa0:	2b00      	cmp	r3, #0
     fa2:	d002      	beq.n	faa <timer_start+0x32>
		return ERR_DENIED;
     fa4:	f06f 0310 	mvn.w	r3, #16
     fa8:	e004      	b.n	fb4 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	4618      	mov	r0, r3
     fae:	4b06      	ldr	r3, [pc, #24]	; (fc8 <timer_start+0x50>)
     fb0:	4798      	blx	r3

	return ERR_NONE;
     fb2:	2300      	movs	r3, #0
}
     fb4:	4618      	mov	r0, r3
     fb6:	3708      	adds	r7, #8
     fb8:	46bd      	mov	sp, r7
     fba:	bd80      	pop	{r7, pc}
     fbc:	0000579c 	.word	0x0000579c
     fc0:	00001629 	.word	0x00001629
     fc4:	000035e1 	.word	0x000035e1
     fc8:	000035c1 	.word	0x000035c1

00000fcc <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b084      	sub	sp, #16
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
     fd4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	2b00      	cmp	r3, #0
     fda:	d004      	beq.n	fe6 <timer_add_task+0x1a>
     fdc:	683b      	ldr	r3, [r7, #0]
     fde:	2b00      	cmp	r3, #0
     fe0:	d001      	beq.n	fe6 <timer_add_task+0x1a>
     fe2:	2301      	movs	r3, #1
     fe4:	e000      	b.n	fe8 <timer_add_task+0x1c>
     fe6:	2300      	movs	r3, #0
     fe8:	f003 0301 	and.w	r3, r3, #1
     fec:	b2db      	uxtb	r3, r3
     fee:	227a      	movs	r2, #122	; 0x7a
     ff0:	492d      	ldr	r1, [pc, #180]	; (10a8 <timer_add_task+0xdc>)
     ff2:	4618      	mov	r0, r3
     ff4:	4b2d      	ldr	r3, [pc, #180]	; (10ac <timer_add_task+0xe0>)
     ff6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	7e1b      	ldrb	r3, [r3, #24]
     ffc:	b2db      	uxtb	r3, r3
     ffe:	f043 0301 	orr.w	r3, r3, #1
    1002:	b2da      	uxtb	r2, r3
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	3314      	adds	r3, #20
    100c:	6839      	ldr	r1, [r7, #0]
    100e:	4618      	mov	r0, r3
    1010:	4b27      	ldr	r3, [pc, #156]	; (10b0 <timer_add_task+0xe4>)
    1012:	4798      	blx	r3
    1014:	4603      	mov	r3, r0
    1016:	2b00      	cmp	r3, #0
    1018:	d00f      	beq.n	103a <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	7e1b      	ldrb	r3, [r3, #24]
    101e:	b2db      	uxtb	r3, r3
    1020:	f023 0301 	bic.w	r3, r3, #1
    1024:	b2da      	uxtb	r2, r3
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    102a:	227f      	movs	r2, #127	; 0x7f
    102c:	491e      	ldr	r1, [pc, #120]	; (10a8 <timer_add_task+0xdc>)
    102e:	2000      	movs	r0, #0
    1030:	4b1e      	ldr	r3, [pc, #120]	; (10ac <timer_add_task+0xe0>)
    1032:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1034:	f06f 0311 	mvn.w	r3, #17
    1038:	e032      	b.n	10a0 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	691a      	ldr	r2, [r3, #16]
    103e:	683b      	ldr	r3, [r7, #0]
    1040:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	f103 0014 	add.w	r0, r3, #20
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	691b      	ldr	r3, [r3, #16]
    104c:	461a      	mov	r2, r3
    104e:	6839      	ldr	r1, [r7, #0]
    1050:	4b18      	ldr	r3, [pc, #96]	; (10b4 <timer_add_task+0xe8>)
    1052:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	7e1b      	ldrb	r3, [r3, #24]
    1058:	b2db      	uxtb	r3, r3
    105a:	f023 0301 	bic.w	r3, r3, #1
    105e:	b2da      	uxtb	r2, r3
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	7e1b      	ldrb	r3, [r3, #24]
    1068:	b2db      	uxtb	r3, r3
    106a:	f003 0302 	and.w	r3, r3, #2
    106e:	2b00      	cmp	r3, #0
    1070:	d015      	beq.n	109e <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    1072:	f107 030c 	add.w	r3, r7, #12
    1076:	4618      	mov	r0, r3
    1078:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <timer_add_task+0xec>)
    107a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	7e1b      	ldrb	r3, [r3, #24]
    1080:	b2db      	uxtb	r3, r3
    1082:	f023 0302 	bic.w	r3, r3, #2
    1086:	b2da      	uxtb	r2, r3
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	4618      	mov	r0, r3
    1090:	4b0a      	ldr	r3, [pc, #40]	; (10bc <timer_add_task+0xf0>)
    1092:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1094:	f107 030c 	add.w	r3, r7, #12
    1098:	4618      	mov	r0, r3
    109a:	4b09      	ldr	r3, [pc, #36]	; (10c0 <timer_add_task+0xf4>)
    109c:	4798      	blx	r3
	}

	return ERR_NONE;
    109e:	2300      	movs	r3, #0
}
    10a0:	4618      	mov	r0, r3
    10a2:	3710      	adds	r7, #16
    10a4:	46bd      	mov	sp, r7
    10a6:	bd80      	pop	{r7, pc}
    10a8:	0000579c 	.word	0x0000579c
    10ac:	00001629 	.word	0x00001629
    10b0:	00001651 	.word	0x00001651
    10b4:	000010c5 	.word	0x000010c5
    10b8:	00000d0d 	.word	0x00000d0d
    10bc:	00003611 	.word	0x00003611
    10c0:	00000d33 	.word	0x00000d33

000010c4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	b088      	sub	sp, #32
    10c8:	af00      	add	r7, sp, #0
    10ca:	60f8      	str	r0, [r7, #12]
    10cc:	60b9      	str	r1, [r7, #8]
    10ce:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    10d0:	2300      	movs	r3, #0
    10d2:	61bb      	str	r3, [r7, #24]
    10d4:	68f8      	ldr	r0, [r7, #12]
    10d6:	4b23      	ldr	r3, [pc, #140]	; (1164 <timer_add_timer_task+0xa0>)
    10d8:	4798      	blx	r3
    10da:	6138      	str	r0, [r7, #16]

	if (!head) {
    10dc:	693b      	ldr	r3, [r7, #16]
    10de:	2b00      	cmp	r3, #0
    10e0:	d104      	bne.n	10ec <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    10e2:	68b9      	ldr	r1, [r7, #8]
    10e4:	68f8      	ldr	r0, [r7, #12]
    10e6:	4b20      	ldr	r3, [pc, #128]	; (1168 <timer_add_timer_task+0xa4>)
    10e8:	4798      	blx	r3
		return;
    10ea:	e037      	b.n	115c <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    10ec:	693b      	ldr	r3, [r7, #16]
    10ee:	61fb      	str	r3, [r7, #28]
    10f0:	e022      	b.n	1138 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    10f2:	69fb      	ldr	r3, [r7, #28]
    10f4:	685a      	ldr	r2, [r3, #4]
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	429a      	cmp	r2, r3
    10fa:	d808      	bhi.n	110e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    10fc:	69fb      	ldr	r3, [r7, #28]
    10fe:	689a      	ldr	r2, [r3, #8]
    1100:	69fb      	ldr	r3, [r7, #28]
    1102:	6859      	ldr	r1, [r3, #4]
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	1acb      	subs	r3, r1, r3
    1108:	4413      	add	r3, r2
    110a:	617b      	str	r3, [r7, #20]
    110c:	e009      	b.n	1122 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    110e:	69fb      	ldr	r3, [r7, #28]
    1110:	689a      	ldr	r2, [r3, #8]
    1112:	69fb      	ldr	r3, [r7, #28]
    1114:	685b      	ldr	r3, [r3, #4]
    1116:	441a      	add	r2, r3
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	425b      	negs	r3, r3
    111c:	4413      	add	r3, r2
    111e:	3301      	adds	r3, #1
    1120:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1122:	68bb      	ldr	r3, [r7, #8]
    1124:	689a      	ldr	r2, [r3, #8]
    1126:	697b      	ldr	r3, [r7, #20]
    1128:	429a      	cmp	r2, r3
    112a:	d909      	bls.n	1140 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    112c:	69fb      	ldr	r3, [r7, #28]
    112e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1130:	69f8      	ldr	r0, [r7, #28]
    1132:	4b0e      	ldr	r3, [pc, #56]	; (116c <timer_add_timer_task+0xa8>)
    1134:	4798      	blx	r3
    1136:	61f8      	str	r0, [r7, #28]
    1138:	69fb      	ldr	r3, [r7, #28]
    113a:	2b00      	cmp	r3, #0
    113c:	d1d9      	bne.n	10f2 <timer_add_timer_task+0x2e>
    113e:	e000      	b.n	1142 <timer_add_timer_task+0x7e>
			break;
    1140:	bf00      	nop
	}

	if (it == head) {
    1142:	69fa      	ldr	r2, [r7, #28]
    1144:	693b      	ldr	r3, [r7, #16]
    1146:	429a      	cmp	r2, r3
    1148:	d104      	bne.n	1154 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    114a:	68b9      	ldr	r1, [r7, #8]
    114c:	68f8      	ldr	r0, [r7, #12]
    114e:	4b06      	ldr	r3, [pc, #24]	; (1168 <timer_add_timer_task+0xa4>)
    1150:	4798      	blx	r3
    1152:	e003      	b.n	115c <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    1154:	68b9      	ldr	r1, [r7, #8]
    1156:	69b8      	ldr	r0, [r7, #24]
    1158:	4b05      	ldr	r3, [pc, #20]	; (1170 <timer_add_timer_task+0xac>)
    115a:	4798      	blx	r3
	}
}
    115c:	3720      	adds	r7, #32
    115e:	46bd      	mov	sp, r7
    1160:	bd80      	pop	{r7, pc}
    1162:	bf00      	nop
    1164:	00000edd 	.word	0x00000edd
    1168:	00001689 	.word	0x00001689
    116c:	00000ef5 	.word	0x00000ef5
    1170:	000016e1 	.word	0x000016e1

00001174 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1174:	b580      	push	{r7, lr}
    1176:	b086      	sub	sp, #24
    1178:	af00      	add	r7, sp, #0
    117a:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1180:	693b      	ldr	r3, [r7, #16]
    1182:	3314      	adds	r3, #20
    1184:	4618      	mov	r0, r3
    1186:	4b27      	ldr	r3, [pc, #156]	; (1224 <timer_process_counted+0xb0>)
    1188:	4798      	blx	r3
    118a:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    118c:	693b      	ldr	r3, [r7, #16]
    118e:	691b      	ldr	r3, [r3, #16]
    1190:	1c5a      	adds	r2, r3, #1
    1192:	693b      	ldr	r3, [r7, #16]
    1194:	611a      	str	r2, [r3, #16]
    1196:	693b      	ldr	r3, [r7, #16]
    1198:	691b      	ldr	r3, [r3, #16]
    119a:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    119c:	693b      	ldr	r3, [r7, #16]
    119e:	7e1b      	ldrb	r3, [r3, #24]
    11a0:	b2db      	uxtb	r3, r3
    11a2:	f003 0301 	and.w	r3, r3, #1
    11a6:	2b00      	cmp	r3, #0
    11a8:	d106      	bne.n	11b8 <timer_process_counted+0x44>
    11aa:	693b      	ldr	r3, [r7, #16]
    11ac:	7e1b      	ldrb	r3, [r3, #24]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	f003 0302 	and.w	r3, r3, #2
    11b4:	2b00      	cmp	r3, #0
    11b6:	d027      	beq.n	1208 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    11b8:	693b      	ldr	r3, [r7, #16]
    11ba:	7e1b      	ldrb	r3, [r3, #24]
    11bc:	b2db      	uxtb	r3, r3
    11be:	f043 0302 	orr.w	r3, r3, #2
    11c2:	b2da      	uxtb	r2, r3
    11c4:	693b      	ldr	r3, [r7, #16]
    11c6:	761a      	strb	r2, [r3, #24]
		return;
    11c8:	e029      	b.n	121e <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    11ca:	697b      	ldr	r3, [r7, #20]
    11cc:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    11ce:	693b      	ldr	r3, [r7, #16]
    11d0:	3314      	adds	r3, #20
    11d2:	4618      	mov	r0, r3
    11d4:	4b14      	ldr	r3, [pc, #80]	; (1228 <timer_process_counted+0xb4>)
    11d6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    11d8:	68bb      	ldr	r3, [r7, #8]
    11da:	7c1b      	ldrb	r3, [r3, #16]
    11dc:	2b01      	cmp	r3, #1
    11de:	d109      	bne.n	11f4 <timer_process_counted+0x80>
			tmp->time_label = time;
    11e0:	68bb      	ldr	r3, [r7, #8]
    11e2:	68fa      	ldr	r2, [r7, #12]
    11e4:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    11e6:	693b      	ldr	r3, [r7, #16]
    11e8:	3314      	adds	r3, #20
    11ea:	68fa      	ldr	r2, [r7, #12]
    11ec:	68b9      	ldr	r1, [r7, #8]
    11ee:	4618      	mov	r0, r3
    11f0:	4b0e      	ldr	r3, [pc, #56]	; (122c <timer_process_counted+0xb8>)
    11f2:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    11f4:	693b      	ldr	r3, [r7, #16]
    11f6:	3314      	adds	r3, #20
    11f8:	4618      	mov	r0, r3
    11fa:	4b0a      	ldr	r3, [pc, #40]	; (1224 <timer_process_counted+0xb0>)
    11fc:	4798      	blx	r3
    11fe:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    1200:	68bb      	ldr	r3, [r7, #8]
    1202:	68db      	ldr	r3, [r3, #12]
    1204:	68b8      	ldr	r0, [r7, #8]
    1206:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1208:	697b      	ldr	r3, [r7, #20]
    120a:	2b00      	cmp	r3, #0
    120c:	d007      	beq.n	121e <timer_process_counted+0xaa>
    120e:	697b      	ldr	r3, [r7, #20]
    1210:	685b      	ldr	r3, [r3, #4]
    1212:	68fa      	ldr	r2, [r7, #12]
    1214:	1ad2      	subs	r2, r2, r3
    1216:	697b      	ldr	r3, [r7, #20]
    1218:	689b      	ldr	r3, [r3, #8]
    121a:	429a      	cmp	r2, r3
    121c:	d2d5      	bcs.n	11ca <timer_process_counted+0x56>
	}
}
    121e:	3718      	adds	r7, #24
    1220:	46bd      	mov	sp, r7
    1222:	bd80      	pop	{r7, pc}
    1224:	00000edd 	.word	0x00000edd
    1228:	00001705 	.word	0x00001705
    122c:	000010c5 	.word	0x000010c5

00001230 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    1230:	b580      	push	{r7, lr}
    1232:	b086      	sub	sp, #24
    1234:	af00      	add	r7, sp, #0
    1236:	60f8      	str	r0, [r7, #12]
    1238:	60b9      	str	r1, [r7, #8]
    123a:	607a      	str	r2, [r7, #4]
    123c:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	2b00      	cmp	r3, #0
    1242:	d00a      	beq.n	125a <usart_async_init+0x2a>
    1244:	68bb      	ldr	r3, [r7, #8]
    1246:	2b00      	cmp	r3, #0
    1248:	d007      	beq.n	125a <usart_async_init+0x2a>
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	2b00      	cmp	r3, #0
    124e:	d004      	beq.n	125a <usart_async_init+0x2a>
    1250:	887b      	ldrh	r3, [r7, #2]
    1252:	2b00      	cmp	r3, #0
    1254:	d001      	beq.n	125a <usart_async_init+0x2a>
    1256:	2301      	movs	r3, #1
    1258:	e000      	b.n	125c <usart_async_init+0x2c>
    125a:	2300      	movs	r3, #0
    125c:	f003 0301 	and.w	r3, r3, #1
    1260:	b2db      	uxtb	r3, r3
    1262:	223a      	movs	r2, #58	; 0x3a
    1264:	4919      	ldr	r1, [pc, #100]	; (12cc <usart_async_init+0x9c>)
    1266:	4618      	mov	r0, r3
    1268:	4b19      	ldr	r3, [pc, #100]	; (12d0 <usart_async_init+0xa0>)
    126a:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	3334      	adds	r3, #52	; 0x34
    1270:	887a      	ldrh	r2, [r7, #2]
    1272:	6879      	ldr	r1, [r7, #4]
    1274:	4618      	mov	r0, r3
    1276:	4b17      	ldr	r3, [pc, #92]	; (12d4 <usart_async_init+0xa4>)
    1278:	4798      	blx	r3
    127a:	4603      	mov	r3, r0
    127c:	2b00      	cmp	r3, #0
    127e:	d002      	beq.n	1286 <usart_async_init+0x56>
		return ERR_INVALID_ARG;
    1280:	f06f 030c 	mvn.w	r3, #12
    1284:	e01e      	b.n	12c4 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
    1286:	68fb      	ldr	r3, [r7, #12]
    1288:	3308      	adds	r3, #8
    128a:	68b9      	ldr	r1, [r7, #8]
    128c:	4618      	mov	r0, r3
    128e:	4b12      	ldr	r3, [pc, #72]	; (12d8 <usart_async_init+0xa8>)
    1290:	4798      	blx	r3
    1292:	6178      	str	r0, [r7, #20]
	if (init_status) {
    1294:	697b      	ldr	r3, [r7, #20]
    1296:	2b00      	cmp	r3, #0
    1298:	d001      	beq.n	129e <usart_async_init+0x6e>
		return init_status;
    129a:	697b      	ldr	r3, [r7, #20]
    129c:	e012      	b.n	12c4 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
    129e:	68fb      	ldr	r3, [r7, #12]
    12a0:	4a0e      	ldr	r2, [pc, #56]	; (12dc <usart_async_init+0xac>)
    12a2:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	4a0e      	ldr	r2, [pc, #56]	; (12e0 <usart_async_init+0xb0>)
    12a8:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    12aa:	68fb      	ldr	r3, [r7, #12]
    12ac:	4a0d      	ldr	r2, [pc, #52]	; (12e4 <usart_async_init+0xb4>)
    12ae:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	4a0d      	ldr	r2, [pc, #52]	; (12e8 <usart_async_init+0xb8>)
    12b4:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	4a0c      	ldr	r2, [pc, #48]	; (12ec <usart_async_init+0xbc>)
    12ba:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	4a0c      	ldr	r2, [pc, #48]	; (12f0 <usart_async_init+0xc0>)
    12c0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    12c2:	2300      	movs	r3, #0
}
    12c4:	4618      	mov	r0, r3
    12c6:	3718      	adds	r7, #24
    12c8:	46bd      	mov	sp, r7
    12ca:	bd80      	pop	{r7, pc}
    12cc:	000057b4 	.word	0x000057b4
    12d0:	00001629 	.word	0x00001629
    12d4:	00001739 	.word	0x00001739
    12d8:	000027c9 	.word	0x000027c9
    12dc:	00001479 	.word	0x00001479
    12e0:	000013e9 	.word	0x000013e9
    12e4:	00001529 	.word	0x00001529
    12e8:	000015c1 	.word	0x000015c1
    12ec:	00001595 	.word	0x00001595
    12f0:	000015fd 	.word	0x000015fd

000012f4 <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	af00      	add	r7, sp, #0
    12fa:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	2b00      	cmp	r3, #0
    1300:	bf14      	ite	ne
    1302:	2301      	movne	r3, #1
    1304:	2300      	moveq	r3, #0
    1306:	b2db      	uxtb	r3, r3
    1308:	2261      	movs	r2, #97	; 0x61
    130a:	4907      	ldr	r1, [pc, #28]	; (1328 <usart_async_enable+0x34>)
    130c:	4618      	mov	r0, r3
    130e:	4b07      	ldr	r3, [pc, #28]	; (132c <usart_async_enable+0x38>)
    1310:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	3308      	adds	r3, #8
    1316:	4618      	mov	r0, r3
    1318:	4b05      	ldr	r3, [pc, #20]	; (1330 <usart_async_enable+0x3c>)
    131a:	4798      	blx	r3

	return ERR_NONE;
    131c:	2300      	movs	r3, #0
}
    131e:	4618      	mov	r0, r3
    1320:	3708      	adds	r7, #8
    1322:	46bd      	mov	sp, r7
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	000057b4 	.word	0x000057b4
    132c:	00001629 	.word	0x00001629
    1330:	00002875 	.word	0x00002875

00001334 <usart_async_register_callback>:
/**
 * \brief Register usart callback
 */
int32_t usart_async_register_callback(struct usart_async_descriptor *const descr,
                                      const enum usart_async_callback_type type, usart_cb_t cb)
{
    1334:	b580      	push	{r7, lr}
    1336:	b084      	sub	sp, #16
    1338:	af00      	add	r7, sp, #0
    133a:	60f8      	str	r0, [r7, #12]
    133c:	460b      	mov	r3, r1
    133e:	607a      	str	r2, [r7, #4]
    1340:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	2b00      	cmp	r3, #0
    1346:	bf14      	ite	ne
    1348:	2301      	movne	r3, #1
    134a:	2300      	moveq	r3, #0
    134c:	b2db      	uxtb	r3, r3
    134e:	2283      	movs	r2, #131	; 0x83
    1350:	4922      	ldr	r1, [pc, #136]	; (13dc <usart_async_register_callback+0xa8>)
    1352:	4618      	mov	r0, r3
    1354:	4b22      	ldr	r3, [pc, #136]	; (13e0 <usart_async_register_callback+0xac>)
    1356:	4798      	blx	r3

	switch (type) {
    1358:	7afb      	ldrb	r3, [r7, #11]
    135a:	2b01      	cmp	r3, #1
    135c:	d014      	beq.n	1388 <usart_async_register_callback+0x54>
    135e:	2b02      	cmp	r3, #2
    1360:	d023      	beq.n	13aa <usart_async_register_callback+0x76>
    1362:	2b00      	cmp	r3, #0
    1364:	d132      	bne.n	13cc <usart_async_register_callback+0x98>
	case USART_ASYNC_RXC_CB:
		descr->usart_cb.rx_done = cb;
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	687a      	ldr	r2, [r7, #4]
    136a:	629a      	str	r2, [r3, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	f103 0008 	add.w	r0, r3, #8
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	2b00      	cmp	r3, #0
    1376:	bf14      	ite	ne
    1378:	2301      	movne	r3, #1
    137a:	2300      	moveq	r3, #0
    137c:	b2db      	uxtb	r3, r3
    137e:	461a      	mov	r2, r3
    1380:	2101      	movs	r1, #1
    1382:	4b18      	ldr	r3, [pc, #96]	; (13e4 <usart_async_register_callback+0xb0>)
    1384:	4798      	blx	r3
		break;
    1386:	e024      	b.n	13d2 <usart_async_register_callback+0x9e>
	case USART_ASYNC_TXC_CB:
		descr->usart_cb.tx_done = cb;
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	687a      	ldr	r2, [r7, #4]
    138c:	625a      	str	r2, [r3, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	f103 0008 	add.w	r0, r3, #8
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	2b00      	cmp	r3, #0
    1398:	bf14      	ite	ne
    139a:	2301      	movne	r3, #1
    139c:	2300      	moveq	r3, #0
    139e:	b2db      	uxtb	r3, r3
    13a0:	461a      	mov	r2, r3
    13a2:	2102      	movs	r1, #2
    13a4:	4b0f      	ldr	r3, [pc, #60]	; (13e4 <usart_async_register_callback+0xb0>)
    13a6:	4798      	blx	r3
		break;
    13a8:	e013      	b.n	13d2 <usart_async_register_callback+0x9e>
	case USART_ASYNC_ERROR_CB:
		descr->usart_cb.error = cb;
    13aa:	68fb      	ldr	r3, [r7, #12]
    13ac:	687a      	ldr	r2, [r7, #4]
    13ae:	62da      	str	r2, [r3, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    13b0:	68fb      	ldr	r3, [r7, #12]
    13b2:	f103 0008 	add.w	r0, r3, #8
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	2b00      	cmp	r3, #0
    13ba:	bf14      	ite	ne
    13bc:	2301      	movne	r3, #1
    13be:	2300      	moveq	r3, #0
    13c0:	b2db      	uxtb	r3, r3
    13c2:	461a      	mov	r2, r3
    13c4:	2103      	movs	r1, #3
    13c6:	4b07      	ldr	r3, [pc, #28]	; (13e4 <usart_async_register_callback+0xb0>)
    13c8:	4798      	blx	r3
		break;
    13ca:	e002      	b.n	13d2 <usart_async_register_callback+0x9e>
	default:
		return ERR_INVALID_ARG;
    13cc:	f06f 030c 	mvn.w	r3, #12
    13d0:	e000      	b.n	13d4 <usart_async_register_callback+0xa0>
	}

	return ERR_NONE;
    13d2:	2300      	movs	r3, #0
}
    13d4:	4618      	mov	r0, r3
    13d6:	3710      	adds	r7, #16
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}
    13dc:	000057b4 	.word	0x000057b4
    13e0:	00001629 	.word	0x00001629
    13e4:	00002959 	.word	0x00002959

000013e8 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	b086      	sub	sp, #24
    13ec:	af00      	add	r7, sp, #0
    13ee:	60f8      	str	r0, [r7, #12]
    13f0:	60b9      	str	r1, [r7, #8]
    13f2:	4613      	mov	r3, r2
    13f4:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    13fa:	697b      	ldr	r3, [r7, #20]
    13fc:	2b00      	cmp	r3, #0
    13fe:	d007      	beq.n	1410 <usart_async_write+0x28>
    1400:	68bb      	ldr	r3, [r7, #8]
    1402:	2b00      	cmp	r3, #0
    1404:	d004      	beq.n	1410 <usart_async_write+0x28>
    1406:	88fb      	ldrh	r3, [r7, #6]
    1408:	2b00      	cmp	r3, #0
    140a:	d001      	beq.n	1410 <usart_async_write+0x28>
    140c:	2301      	movs	r3, #1
    140e:	e000      	b.n	1412 <usart_async_write+0x2a>
    1410:	2300      	movs	r3, #0
    1412:	f003 0301 	and.w	r3, r3, #1
    1416:	b2db      	uxtb	r3, r3
    1418:	f240 123b 	movw	r2, #315	; 0x13b
    141c:	4913      	ldr	r1, [pc, #76]	; (146c <usart_async_write+0x84>)
    141e:	4618      	mov	r0, r3
    1420:	4b13      	ldr	r3, [pc, #76]	; (1470 <usart_async_write+0x88>)
    1422:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1424:	697b      	ldr	r3, [r7, #20]
    1426:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    142a:	697b      	ldr	r3, [r7, #20]
    142c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1430:	429a      	cmp	r2, r3
    1432:	d002      	beq.n	143a <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
    1434:	f06f 031b 	mvn.w	r3, #27
    1438:	e013      	b.n	1462 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    143a:	697b      	ldr	r3, [r7, #20]
    143c:	68ba      	ldr	r2, [r7, #8]
    143e:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1440:	697b      	ldr	r3, [r7, #20]
    1442:	88fa      	ldrh	r2, [r7, #6]
    1444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
    1448:	697b      	ldr	r3, [r7, #20]
    144a:	2200      	movs	r2, #0
    144c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1450:	697b      	ldr	r3, [r7, #20]
    1452:	2201      	movs	r2, #1
    1454:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1456:	697b      	ldr	r3, [r7, #20]
    1458:	3308      	adds	r3, #8
    145a:	4618      	mov	r0, r3
    145c:	4b05      	ldr	r3, [pc, #20]	; (1474 <usart_async_write+0x8c>)
    145e:	4798      	blx	r3

	return (int32_t)length;
    1460:	88fb      	ldrh	r3, [r7, #6]
}
    1462:	4618      	mov	r0, r3
    1464:	3718      	adds	r7, #24
    1466:	46bd      	mov	sp, r7
    1468:	bd80      	pop	{r7, pc}
    146a:	bf00      	nop
    146c:	000057b4 	.word	0x000057b4
    1470:	00001629 	.word	0x00001629
    1474:	000028bd 	.word	0x000028bd

00001478 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1478:	b580      	push	{r7, lr}
    147a:	b088      	sub	sp, #32
    147c:	af00      	add	r7, sp, #0
    147e:	60f8      	str	r0, [r7, #12]
    1480:	60b9      	str	r1, [r7, #8]
    1482:	4613      	mov	r3, r2
    1484:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
    1486:	2300      	movs	r3, #0
    1488:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    148e:	69bb      	ldr	r3, [r7, #24]
    1490:	2b00      	cmp	r3, #0
    1492:	d007      	beq.n	14a4 <usart_async_read+0x2c>
    1494:	68bb      	ldr	r3, [r7, #8]
    1496:	2b00      	cmp	r3, #0
    1498:	d004      	beq.n	14a4 <usart_async_read+0x2c>
    149a:	88fb      	ldrh	r3, [r7, #6]
    149c:	2b00      	cmp	r3, #0
    149e:	d001      	beq.n	14a4 <usart_async_read+0x2c>
    14a0:	2301      	movs	r3, #1
    14a2:	e000      	b.n	14a6 <usart_async_read+0x2e>
    14a4:	2300      	movs	r3, #0
    14a6:	f003 0301 	and.w	r3, r3, #1
    14aa:	b2db      	uxtb	r3, r3
    14ac:	f44f 72ac 	mov.w	r2, #344	; 0x158
    14b0:	4917      	ldr	r1, [pc, #92]	; (1510 <usart_async_read+0x98>)
    14b2:	4618      	mov	r0, r3
    14b4:	4b17      	ldr	r3, [pc, #92]	; (1514 <usart_async_read+0x9c>)
    14b6:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    14b8:	f107 0310 	add.w	r3, r7, #16
    14bc:	4618      	mov	r0, r3
    14be:	4b16      	ldr	r3, [pc, #88]	; (1518 <usart_async_read+0xa0>)
    14c0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    14c2:	69bb      	ldr	r3, [r7, #24]
    14c4:	3334      	adds	r3, #52	; 0x34
    14c6:	4618      	mov	r0, r3
    14c8:	4b14      	ldr	r3, [pc, #80]	; (151c <usart_async_read+0xa4>)
    14ca:	4798      	blx	r3
    14cc:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    14ce:	f107 0310 	add.w	r3, r7, #16
    14d2:	4618      	mov	r0, r3
    14d4:	4b12      	ldr	r3, [pc, #72]	; (1520 <usart_async_read+0xa8>)
    14d6:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    14d8:	e00c      	b.n	14f4 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    14da:	69bb      	ldr	r3, [r7, #24]
    14dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
    14e0:	8bfb      	ldrh	r3, [r7, #30]
    14e2:	1c59      	adds	r1, r3, #1
    14e4:	83f9      	strh	r1, [r7, #30]
    14e6:	4619      	mov	r1, r3
    14e8:	68bb      	ldr	r3, [r7, #8]
    14ea:	440b      	add	r3, r1
    14ec:	4619      	mov	r1, r3
    14ee:	4610      	mov	r0, r2
    14f0:	4b0c      	ldr	r3, [pc, #48]	; (1524 <usart_async_read+0xac>)
    14f2:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    14f4:	8bfa      	ldrh	r2, [r7, #30]
    14f6:	697b      	ldr	r3, [r7, #20]
    14f8:	429a      	cmp	r2, r3
    14fa:	d203      	bcs.n	1504 <usart_async_read+0x8c>
    14fc:	8bfa      	ldrh	r2, [r7, #30]
    14fe:	88fb      	ldrh	r3, [r7, #6]
    1500:	429a      	cmp	r2, r3
    1502:	d3ea      	bcc.n	14da <usart_async_read+0x62>
	}

	return (int32_t)was_read;
    1504:	8bfb      	ldrh	r3, [r7, #30]
}
    1506:	4618      	mov	r0, r3
    1508:	3720      	adds	r7, #32
    150a:	46bd      	mov	sp, r7
    150c:	bd80      	pop	{r7, pc}
    150e:	bf00      	nop
    1510:	000057b4 	.word	0x000057b4
    1514:	00001629 	.word	0x00001629
    1518:	00000d0d 	.word	0x00000d0d
    151c:	00001891 	.word	0x00001891
    1520:	00000d33 	.word	0x00000d33
    1524:	000017ad 	.word	0x000017ad

00001528 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    1528:	b590      	push	{r4, r7, lr}
    152a:	b085      	sub	sp, #20
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	3b08      	subs	r3, #8
    1534:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1542:	429a      	cmp	r2, r3
    1544:	d017      	beq.n	1576 <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	f103 0008 	add.w	r0, r3, #8
    154c:	68fb      	ldr	r3, [r7, #12]
    154e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1550:	68fb      	ldr	r3, [r7, #12]
    1552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    1556:	1c59      	adds	r1, r3, #1
    1558:	b28c      	uxth	r4, r1
    155a:	68f9      	ldr	r1, [r7, #12]
    155c:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
    1560:	4413      	add	r3, r2
    1562:	781b      	ldrb	r3, [r3, #0]
    1564:	4619      	mov	r1, r3
    1566:	4b08      	ldr	r3, [pc, #32]	; (1588 <usart_process_byte_sent+0x60>)
    1568:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	3308      	adds	r3, #8
    156e:	4618      	mov	r0, r3
    1570:	4b06      	ldr	r3, [pc, #24]	; (158c <usart_process_byte_sent+0x64>)
    1572:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1574:	e004      	b.n	1580 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	3308      	adds	r3, #8
    157a:	4618      	mov	r0, r3
    157c:	4b04      	ldr	r3, [pc, #16]	; (1590 <usart_process_byte_sent+0x68>)
    157e:	4798      	blx	r3
}
    1580:	bf00      	nop
    1582:	3714      	adds	r7, #20
    1584:	46bd      	mov	sp, r7
    1586:	bd90      	pop	{r4, r7, pc}
    1588:	00002895 	.word	0x00002895
    158c:	000028bd 	.word	0x000028bd
    1590:	000028dd 	.word	0x000028dd

00001594 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1594:	b580      	push	{r7, lr}
    1596:	b084      	sub	sp, #16
    1598:	af00      	add	r7, sp, #0
    159a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	3b08      	subs	r3, #8
    15a0:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	2200      	movs	r2, #0
    15a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15ac:	2b00      	cmp	r3, #0
    15ae:	d003      	beq.n	15b8 <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15b4:	68f8      	ldr	r0, [r7, #12]
    15b6:	4798      	blx	r3
	}
}
    15b8:	bf00      	nop
    15ba:	3710      	adds	r7, #16
    15bc:	46bd      	mov	sp, r7
    15be:	bd80      	pop	{r7, pc}

000015c0 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b084      	sub	sp, #16
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
    15c8:	460b      	mov	r3, r1
    15ca:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	3b08      	subs	r3, #8
    15d0:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	3334      	adds	r3, #52	; 0x34
    15d6:	78fa      	ldrb	r2, [r7, #3]
    15d8:	4611      	mov	r1, r2
    15da:	4618      	mov	r0, r3
    15dc:	4b06      	ldr	r3, [pc, #24]	; (15f8 <usart_fill_rx_buffer+0x38>)
    15de:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    15e0:	68fb      	ldr	r3, [r7, #12]
    15e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15e4:	2b00      	cmp	r3, #0
    15e6:	d003      	beq.n	15f0 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15ec:	68f8      	ldr	r0, [r7, #12]
    15ee:	4798      	blx	r3
	}
}
    15f0:	bf00      	nop
    15f2:	3710      	adds	r7, #16
    15f4:	46bd      	mov	sp, r7
    15f6:	bd80      	pop	{r7, pc}
    15f8:	0000181d 	.word	0x0000181d

000015fc <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    15fc:	b580      	push	{r7, lr}
    15fe:	b084      	sub	sp, #16
    1600:	af00      	add	r7, sp, #0
    1602:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	3b08      	subs	r3, #8
    1608:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    160a:	68fb      	ldr	r3, [r7, #12]
    160c:	2200      	movs	r2, #0
    160e:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    1610:	68fb      	ldr	r3, [r7, #12]
    1612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1614:	2b00      	cmp	r3, #0
    1616:	d003      	beq.n	1620 <usart_error+0x24>
		descr->usart_cb.error(descr);
    1618:	68fb      	ldr	r3, [r7, #12]
    161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    161c:	68f8      	ldr	r0, [r7, #12]
    161e:	4798      	blx	r3
	}
}
    1620:	bf00      	nop
    1622:	3710      	adds	r7, #16
    1624:	46bd      	mov	sp, r7
    1626:	bd80      	pop	{r7, pc}

00001628 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1628:	b480      	push	{r7}
    162a:	b085      	sub	sp, #20
    162c:	af00      	add	r7, sp, #0
    162e:	4603      	mov	r3, r0
    1630:	60b9      	str	r1, [r7, #8]
    1632:	607a      	str	r2, [r7, #4]
    1634:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    1636:	7bfb      	ldrb	r3, [r7, #15]
    1638:	f083 0301 	eor.w	r3, r3, #1
    163c:	b2db      	uxtb	r3, r3
    163e:	2b00      	cmp	r3, #0
    1640:	d000      	beq.n	1644 <assert+0x1c>
		__asm("BKPT #0");
    1642:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1644:	bf00      	nop
    1646:	3714      	adds	r7, #20
    1648:	46bd      	mov	sp, r7
    164a:	f85d 7b04 	ldr.w	r7, [sp], #4
    164e:	4770      	bx	lr

00001650 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1650:	b480      	push	{r7}
    1652:	b085      	sub	sp, #20
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
    1658:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	60fb      	str	r3, [r7, #12]
    1660:	e008      	b.n	1674 <is_list_element+0x24>
		if (it == element) {
    1662:	68fa      	ldr	r2, [r7, #12]
    1664:	683b      	ldr	r3, [r7, #0]
    1666:	429a      	cmp	r2, r3
    1668:	d101      	bne.n	166e <is_list_element+0x1e>
			return true;
    166a:	2301      	movs	r3, #1
    166c:	e006      	b.n	167c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	60fb      	str	r3, [r7, #12]
    1674:	68fb      	ldr	r3, [r7, #12]
    1676:	2b00      	cmp	r3, #0
    1678:	d1f3      	bne.n	1662 <is_list_element+0x12>
		}
	}

	return false;
    167a:	2300      	movs	r3, #0
}
    167c:	4618      	mov	r0, r3
    167e:	3714      	adds	r7, #20
    1680:	46bd      	mov	sp, r7
    1682:	f85d 7b04 	ldr.w	r7, [sp], #4
    1686:	4770      	bx	lr

00001688 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1688:	b580      	push	{r7, lr}
    168a:	b082      	sub	sp, #8
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1692:	6839      	ldr	r1, [r7, #0]
    1694:	6878      	ldr	r0, [r7, #4]
    1696:	4b0f      	ldr	r3, [pc, #60]	; (16d4 <list_insert_as_head+0x4c>)
    1698:	4798      	blx	r3
    169a:	4603      	mov	r3, r0
    169c:	2b00      	cmp	r3, #0
    169e:	bf14      	ite	ne
    16a0:	2301      	movne	r3, #1
    16a2:	2300      	moveq	r3, #0
    16a4:	b2db      	uxtb	r3, r3
    16a6:	f083 0301 	eor.w	r3, r3, #1
    16aa:	b2db      	uxtb	r3, r3
    16ac:	f003 0301 	and.w	r3, r3, #1
    16b0:	b2db      	uxtb	r3, r3
    16b2:	2239      	movs	r2, #57	; 0x39
    16b4:	4908      	ldr	r1, [pc, #32]	; (16d8 <list_insert_as_head+0x50>)
    16b6:	4618      	mov	r0, r3
    16b8:	4b08      	ldr	r3, [pc, #32]	; (16dc <list_insert_as_head+0x54>)
    16ba:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	681a      	ldr	r2, [r3, #0]
    16c0:	683b      	ldr	r3, [r7, #0]
    16c2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	683a      	ldr	r2, [r7, #0]
    16c8:	601a      	str	r2, [r3, #0]
}
    16ca:	bf00      	nop
    16cc:	3708      	adds	r7, #8
    16ce:	46bd      	mov	sp, r7
    16d0:	bd80      	pop	{r7, pc}
    16d2:	bf00      	nop
    16d4:	00001651 	.word	0x00001651
    16d8:	000057d4 	.word	0x000057d4
    16dc:	00001629 	.word	0x00001629

000016e0 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    16e0:	b480      	push	{r7}
    16e2:	b083      	sub	sp, #12
    16e4:	af00      	add	r7, sp, #0
    16e6:	6078      	str	r0, [r7, #4]
    16e8:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	681a      	ldr	r2, [r3, #0]
    16ee:	683b      	ldr	r3, [r7, #0]
    16f0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	683a      	ldr	r2, [r7, #0]
    16f6:	601a      	str	r2, [r3, #0]
}
    16f8:	bf00      	nop
    16fa:	370c      	adds	r7, #12
    16fc:	46bd      	mov	sp, r7
    16fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1702:	4770      	bx	lr

00001704 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1704:	b480      	push	{r7}
    1706:	b085      	sub	sp, #20
    1708:	af00      	add	r7, sp, #0
    170a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	2b00      	cmp	r3, #0
    1712:	d009      	beq.n	1728 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	681a      	ldr	r2, [r3, #0]
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	e000      	b.n	172a <list_remove_head+0x26>
	}

	return NULL;
    1728:	2300      	movs	r3, #0
}
    172a:	4618      	mov	r0, r3
    172c:	3714      	adds	r7, #20
    172e:	46bd      	mov	sp, r7
    1730:	f85d 7b04 	ldr.w	r7, [sp], #4
    1734:	4770      	bx	lr
	...

00001738 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1738:	b580      	push	{r7, lr}
    173a:	b084      	sub	sp, #16
    173c:	af00      	add	r7, sp, #0
    173e:	60f8      	str	r0, [r7, #12]
    1740:	60b9      	str	r1, [r7, #8]
    1742:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    1744:	68fb      	ldr	r3, [r7, #12]
    1746:	2b00      	cmp	r3, #0
    1748:	d007      	beq.n	175a <ringbuffer_init+0x22>
    174a:	68bb      	ldr	r3, [r7, #8]
    174c:	2b00      	cmp	r3, #0
    174e:	d004      	beq.n	175a <ringbuffer_init+0x22>
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	2b00      	cmp	r3, #0
    1754:	d001      	beq.n	175a <ringbuffer_init+0x22>
    1756:	2301      	movs	r3, #1
    1758:	e000      	b.n	175c <ringbuffer_init+0x24>
    175a:	2300      	movs	r3, #0
    175c:	f003 0301 	and.w	r3, r3, #1
    1760:	b2db      	uxtb	r3, r3
    1762:	2228      	movs	r2, #40	; 0x28
    1764:	490f      	ldr	r1, [pc, #60]	; (17a4 <ringbuffer_init+0x6c>)
    1766:	4618      	mov	r0, r3
    1768:	4b0f      	ldr	r3, [pc, #60]	; (17a8 <ringbuffer_init+0x70>)
    176a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	1e5a      	subs	r2, r3, #1
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	4013      	ands	r3, r2
    1774:	2b00      	cmp	r3, #0
    1776:	d002      	beq.n	177e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    1778:	f06f 030c 	mvn.w	r3, #12
    177c:	e00e      	b.n	179c <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	1e5a      	subs	r2, r3, #1
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    1786:	68fb      	ldr	r3, [r7, #12]
    1788:	2200      	movs	r2, #0
    178a:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    178c:	68fb      	ldr	r3, [r7, #12]
    178e:	689a      	ldr	r2, [r3, #8]
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	68ba      	ldr	r2, [r7, #8]
    1798:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    179a:	2300      	movs	r3, #0
}
    179c:	4618      	mov	r0, r3
    179e:	3710      	adds	r7, #16
    17a0:	46bd      	mov	sp, r7
    17a2:	bd80      	pop	{r7, pc}
    17a4:	000057f4 	.word	0x000057f4
    17a8:	00001629 	.word	0x00001629

000017ac <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
    17b4:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d004      	beq.n	17c6 <ringbuffer_get+0x1a>
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	2b00      	cmp	r3, #0
    17c0:	d001      	beq.n	17c6 <ringbuffer_get+0x1a>
    17c2:	2301      	movs	r3, #1
    17c4:	e000      	b.n	17c8 <ringbuffer_get+0x1c>
    17c6:	2300      	movs	r3, #0
    17c8:	f003 0301 	and.w	r3, r3, #1
    17cc:	b2db      	uxtb	r3, r3
    17ce:	2240      	movs	r2, #64	; 0x40
    17d0:	4910      	ldr	r1, [pc, #64]	; (1814 <ringbuffer_get+0x68>)
    17d2:	4618      	mov	r0, r3
    17d4:	4b10      	ldr	r3, [pc, #64]	; (1818 <ringbuffer_get+0x6c>)
    17d6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	68da      	ldr	r2, [r3, #12]
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	689b      	ldr	r3, [r3, #8]
    17e0:	429a      	cmp	r2, r3
    17e2:	d011      	beq.n	1808 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	681a      	ldr	r2, [r3, #0]
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	6899      	ldr	r1, [r3, #8]
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	685b      	ldr	r3, [r3, #4]
    17f0:	400b      	ands	r3, r1
    17f2:	4413      	add	r3, r2
    17f4:	781a      	ldrb	r2, [r3, #0]
    17f6:	683b      	ldr	r3, [r7, #0]
    17f8:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    17fa:	687b      	ldr	r3, [r7, #4]
    17fc:	689b      	ldr	r3, [r3, #8]
    17fe:	1c5a      	adds	r2, r3, #1
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    1804:	2300      	movs	r3, #0
    1806:	e001      	b.n	180c <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
    1808:	f06f 0309 	mvn.w	r3, #9
}
    180c:	4618      	mov	r0, r3
    180e:	3708      	adds	r7, #8
    1810:	46bd      	mov	sp, r7
    1812:	bd80      	pop	{r7, pc}
    1814:	000057f4 	.word	0x000057f4
    1818:	00001629 	.word	0x00001629

0000181c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    181c:	b580      	push	{r7, lr}
    181e:	b082      	sub	sp, #8
    1820:	af00      	add	r7, sp, #0
    1822:	6078      	str	r0, [r7, #4]
    1824:	460b      	mov	r3, r1
    1826:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	2b00      	cmp	r3, #0
    182c:	bf14      	ite	ne
    182e:	2301      	movne	r3, #1
    1830:	2300      	moveq	r3, #0
    1832:	b2db      	uxtb	r3, r3
    1834:	2251      	movs	r2, #81	; 0x51
    1836:	4914      	ldr	r1, [pc, #80]	; (1888 <ringbuffer_put+0x6c>)
    1838:	4618      	mov	r0, r3
    183a:	4b14      	ldr	r3, [pc, #80]	; (188c <ringbuffer_put+0x70>)
    183c:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	681a      	ldr	r2, [r3, #0]
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	68d9      	ldr	r1, [r3, #12]
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	685b      	ldr	r3, [r3, #4]
    184a:	400b      	ands	r3, r1
    184c:	4413      	add	r3, r2
    184e:	78fa      	ldrb	r2, [r7, #3]
    1850:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	68da      	ldr	r2, [r3, #12]
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	689b      	ldr	r3, [r3, #8]
    185a:	1ad2      	subs	r2, r2, r3
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	685b      	ldr	r3, [r3, #4]
    1860:	429a      	cmp	r2, r3
    1862:	d906      	bls.n	1872 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	68da      	ldr	r2, [r3, #12]
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	685b      	ldr	r3, [r3, #4]
    186c:	1ad2      	subs	r2, r2, r3
    186e:	687b      	ldr	r3, [r7, #4]
    1870:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	68db      	ldr	r3, [r3, #12]
    1876:	1c5a      	adds	r2, r3, #1
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    187c:	2300      	movs	r3, #0
}
    187e:	4618      	mov	r0, r3
    1880:	3708      	adds	r7, #8
    1882:	46bd      	mov	sp, r7
    1884:	bd80      	pop	{r7, pc}
    1886:	bf00      	nop
    1888:	000057f4 	.word	0x000057f4
    188c:	00001629 	.word	0x00001629

00001890 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1890:	b580      	push	{r7, lr}
    1892:	b082      	sub	sp, #8
    1894:	af00      	add	r7, sp, #0
    1896:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	2b00      	cmp	r3, #0
    189c:	bf14      	ite	ne
    189e:	2301      	movne	r3, #1
    18a0:	2300      	moveq	r3, #0
    18a2:	b2db      	uxtb	r3, r3
    18a4:	2267      	movs	r2, #103	; 0x67
    18a6:	4906      	ldr	r1, [pc, #24]	; (18c0 <ringbuffer_num+0x30>)
    18a8:	4618      	mov	r0, r3
    18aa:	4b06      	ldr	r3, [pc, #24]	; (18c4 <ringbuffer_num+0x34>)
    18ac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    18ae:	687b      	ldr	r3, [r7, #4]
    18b0:	68da      	ldr	r2, [r3, #12]
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	689b      	ldr	r3, [r3, #8]
    18b6:	1ad3      	subs	r3, r2, r3
}
    18b8:	4618      	mov	r0, r3
    18ba:	3708      	adds	r7, #8
    18bc:	46bd      	mov	sp, r7
    18be:	bd80      	pop	{r7, pc}
    18c0:	000057f4 	.word	0x000057f4
    18c4:	00001629 	.word	0x00001629

000018c8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    18c8:	b480      	push	{r7}
    18ca:	b085      	sub	sp, #20
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <_sbrk+0x38>)
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d102      	bne.n	18de <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    18d8:	4b09      	ldr	r3, [pc, #36]	; (1900 <_sbrk+0x38>)
    18da:	4a0a      	ldr	r2, [pc, #40]	; (1904 <_sbrk+0x3c>)
    18dc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    18de:	4b08      	ldr	r3, [pc, #32]	; (1900 <_sbrk+0x38>)
    18e0:	681b      	ldr	r3, [r3, #0]
    18e2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    18e4:	4b06      	ldr	r3, [pc, #24]	; (1900 <_sbrk+0x38>)
    18e6:	681a      	ldr	r2, [r3, #0]
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	4413      	add	r3, r2
    18ec:	4a04      	ldr	r2, [pc, #16]	; (1900 <_sbrk+0x38>)
    18ee:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
    18f0:	68fb      	ldr	r3, [r7, #12]
}
    18f2:	4618      	mov	r0, r3
    18f4:	3714      	adds	r7, #20
    18f6:	46bd      	mov	sp, r7
    18f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    18fc:	4770      	bx	lr
    18fe:	bf00      	nop
    1900:	200000e4 	.word	0x200000e4
    1904:	20010290 	.word	0x20010290

00001908 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
    1908:	b480      	push	{r7}
    190a:	b083      	sub	sp, #12
    190c:	af00      	add	r7, sp, #0
    190e:	4603      	mov	r3, r0
    1910:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1916:	2b00      	cmp	r3, #0
    1918:	db0c      	blt.n	1934 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    191a:	4909      	ldr	r1, [pc, #36]	; (1940 <__NVIC_SetPendingIRQ+0x38>)
    191c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1920:	095b      	lsrs	r3, r3, #5
    1922:	88fa      	ldrh	r2, [r7, #6]
    1924:	f002 021f 	and.w	r2, r2, #31
    1928:	2001      	movs	r0, #1
    192a:	fa00 f202 	lsl.w	r2, r0, r2
    192e:	3340      	adds	r3, #64	; 0x40
    1930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1934:	bf00      	nop
    1936:	370c      	adds	r7, #12
    1938:	46bd      	mov	sp, r7
    193a:	f85d 7b04 	ldr.w	r7, [sp], #4
    193e:	4770      	bx	lr
    1940:	e000e100 	.word	0xe000e100

00001944 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	4603      	mov	r3, r0
    194c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    194e:	79fb      	ldrb	r3, [r7, #7]
    1950:	b21b      	sxth	r3, r3
    1952:	4618      	mov	r0, r3
    1954:	4b02      	ldr	r3, [pc, #8]	; (1960 <_irq_set+0x1c>)
    1956:	4798      	blx	r3
}
    1958:	bf00      	nop
    195a:	3708      	adds	r7, #8
    195c:	46bd      	mov	sp, r7
    195e:	bd80      	pop	{r7, pc}
    1960:	00001909 	.word	0x00001909

00001964 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1964:	b480      	push	{r7}
    1966:	b083      	sub	sp, #12
    1968:	af00      	add	r7, sp, #0
    196a:	6078      	str	r0, [r7, #4]
    196c:	460b      	mov	r3, r1
    196e:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	881b      	ldrh	r3, [r3, #0]
    1974:	b29a      	uxth	r2, r3
    1976:	887b      	ldrh	r3, [r7, #2]
    1978:	021b      	lsls	r3, r3, #8
    197a:	b29b      	uxth	r3, r3
    197c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1980:	b29b      	uxth	r3, r3
    1982:	4313      	orrs	r3, r2
    1984:	b29a      	uxth	r2, r3
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    198a:	bf00      	nop
    198c:	370c      	adds	r7, #12
    198e:	46bd      	mov	sp, r7
    1990:	f85d 7b04 	ldr.w	r7, [sp], #4
    1994:	4770      	bx	lr
	...

00001998 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1998:	b580      	push	{r7, lr}
    199a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    199c:	2100      	movs	r1, #0
    199e:	4808      	ldr	r0, [pc, #32]	; (19c0 <_init_chip+0x28>)
    19a0:	4b08      	ldr	r3, [pc, #32]	; (19c4 <_init_chip+0x2c>)
    19a2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    19a4:	4b08      	ldr	r3, [pc, #32]	; (19c8 <_init_chip+0x30>)
    19a6:	4798      	blx	r3
	_oscctrl_init_sources();
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <_init_chip+0x34>)
    19aa:	4798      	blx	r3
	_mclk_init();
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <_init_chip+0x38>)
    19ae:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    19b0:	4b08      	ldr	r3, [pc, #32]	; (19d4 <_init_chip+0x3c>)
    19b2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    19b4:	f640 70ff 	movw	r0, #4095	; 0xfff
    19b8:	4b07      	ldr	r3, [pc, #28]	; (19d8 <_init_chip+0x40>)
    19ba:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    19bc:	bf00      	nop
    19be:	bd80      	pop	{r7, pc}
    19c0:	41004000 	.word	0x41004000
    19c4:	00001965 	.word	0x00001965
    19c8:	00002135 	.word	0x00002135
    19cc:	000021cd 	.word	0x000021cd
    19d0:	000020b1 	.word	0x000020b1
    19d4:	0000220d 	.word	0x0000220d
    19d8:	00002061 	.word	0x00002061

000019dc <__NVIC_EnableIRQ>:
{
    19dc:	b480      	push	{r7}
    19de:	b083      	sub	sp, #12
    19e0:	af00      	add	r7, sp, #0
    19e2:	4603      	mov	r3, r0
    19e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    19e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    19ea:	2b00      	cmp	r3, #0
    19ec:	db0b      	blt.n	1a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19ee:	4909      	ldr	r1, [pc, #36]	; (1a14 <__NVIC_EnableIRQ+0x38>)
    19f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    19f4:	095b      	lsrs	r3, r3, #5
    19f6:	88fa      	ldrh	r2, [r7, #6]
    19f8:	f002 021f 	and.w	r2, r2, #31
    19fc:	2001      	movs	r0, #1
    19fe:	fa00 f202 	lsl.w	r2, r0, r2
    1a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1a06:	bf00      	nop
    1a08:	370c      	adds	r7, #12
    1a0a:	46bd      	mov	sp, r7
    1a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a10:	4770      	bx	lr
    1a12:	bf00      	nop
    1a14:	e000e100 	.word	0xe000e100

00001a18 <__NVIC_DisableIRQ>:
{
    1a18:	b480      	push	{r7}
    1a1a:	b083      	sub	sp, #12
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	4603      	mov	r3, r0
    1a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1a26:	2b00      	cmp	r3, #0
    1a28:	db10      	blt.n	1a4c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a2a:	490b      	ldr	r1, [pc, #44]	; (1a58 <__NVIC_DisableIRQ+0x40>)
    1a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1a30:	095b      	lsrs	r3, r3, #5
    1a32:	88fa      	ldrh	r2, [r7, #6]
    1a34:	f002 021f 	and.w	r2, r2, #31
    1a38:	2001      	movs	r0, #1
    1a3a:	fa00 f202 	lsl.w	r2, r0, r2
    1a3e:	3320      	adds	r3, #32
    1a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a48:	f3bf 8f6f 	isb	sy
}
    1a4c:	bf00      	nop
    1a4e:	370c      	adds	r7, #12
    1a50:	46bd      	mov	sp, r7
    1a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a56:	4770      	bx	lr
    1a58:	e000e100 	.word	0xe000e100

00001a5c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1a5c:	b480      	push	{r7}
    1a5e:	b083      	sub	sp, #12
    1a60:	af00      	add	r7, sp, #0
    1a62:	4603      	mov	r3, r0
    1a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	db0c      	blt.n	1a88 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a6e:	4909      	ldr	r1, [pc, #36]	; (1a94 <__NVIC_ClearPendingIRQ+0x38>)
    1a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1a74:	095b      	lsrs	r3, r3, #5
    1a76:	88fa      	ldrh	r2, [r7, #6]
    1a78:	f002 021f 	and.w	r2, r2, #31
    1a7c:	2001      	movs	r0, #1
    1a7e:	fa00 f202 	lsl.w	r2, r0, r2
    1a82:	3360      	adds	r3, #96	; 0x60
    1a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1a88:	bf00      	nop
    1a8a:	370c      	adds	r7, #12
    1a8c:	46bd      	mov	sp, r7
    1a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a92:	4770      	bx	lr
    1a94:	e000e100 	.word	0xe000e100

00001a98 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    1a98:	b480      	push	{r7}
    1a9a:	b083      	sub	sp, #12
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	6078      	str	r0, [r7, #4]
    1aa0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1aa2:	bf00      	nop
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	685a      	ldr	r2, [r3, #4]
    1aa8:	683b      	ldr	r3, [r7, #0]
    1aaa:	4013      	ands	r3, r2
    1aac:	2b00      	cmp	r3, #0
    1aae:	d1f9      	bne.n	1aa4 <hri_eic_wait_for_sync+0xc>
	};
}
    1ab0:	bf00      	nop
    1ab2:	370c      	adds	r7, #12
    1ab4:	46bd      	mov	sp, r7
    1ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1aba:	4770      	bx	lr

00001abc <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    1abc:	b480      	push	{r7}
    1abe:	b083      	sub	sp, #12
    1ac0:	af00      	add	r7, sp, #0
    1ac2:	6078      	str	r0, [r7, #4]
    1ac4:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	685a      	ldr	r2, [r3, #4]
    1aca:	683b      	ldr	r3, [r7, #0]
    1acc:	4013      	ands	r3, r2
    1ace:	2b00      	cmp	r3, #0
    1ad0:	bf14      	ite	ne
    1ad2:	2301      	movne	r3, #1
    1ad4:	2300      	moveq	r3, #0
    1ad6:	b2db      	uxtb	r3, r3
}
    1ad8:	4618      	mov	r0, r3
    1ada:	370c      	adds	r7, #12
    1adc:	46bd      	mov	sp, r7
    1ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ae2:	4770      	bx	lr

00001ae4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    1ae4:	b480      	push	{r7}
    1ae6:	b083      	sub	sp, #12
    1ae8:	af00      	add	r7, sp, #0
    1aea:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	695b      	ldr	r3, [r3, #20]
}
    1af0:	4618      	mov	r0, r3
    1af2:	370c      	adds	r7, #12
    1af4:	46bd      	mov	sp, r7
    1af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1afa:	4770      	bx	lr

00001afc <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	683a      	ldr	r2, [r7, #0]
    1b0a:	615a      	str	r2, [r3, #20]
}
    1b0c:	bf00      	nop
    1b0e:	370c      	adds	r7, #12
    1b10:	46bd      	mov	sp, r7
    1b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b16:	4770      	bx	lr

00001b18 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	781b      	ldrb	r3, [r3, #0]
    1b24:	b2db      	uxtb	r3, r3
    1b26:	f043 0302 	orr.w	r3, r3, #2
    1b2a:	b2da      	uxtb	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    1b30:	2103      	movs	r1, #3
    1b32:	6878      	ldr	r0, [r7, #4]
    1b34:	4b02      	ldr	r3, [pc, #8]	; (1b40 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    1b36:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1b38:	bf00      	nop
    1b3a:	3708      	adds	r7, #8
    1b3c:	46bd      	mov	sp, r7
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	00001a99 	.word	0x00001a99

00001b44 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	781b      	ldrb	r3, [r3, #0]
    1b50:	b2db      	uxtb	r3, r3
    1b52:	f023 0302 	bic.w	r3, r3, #2
    1b56:	b2da      	uxtb	r2, r3
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    1b5c:	2103      	movs	r1, #3
    1b5e:	6878      	ldr	r0, [r7, #4]
    1b60:	4b02      	ldr	r3, [pc, #8]	; (1b6c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    1b62:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1b64:	bf00      	nop
    1b66:	3708      	adds	r7, #8
    1b68:	46bd      	mov	sp, r7
    1b6a:	bd80      	pop	{r7, pc}
    1b6c:	00001a99 	.word	0x00001a99

00001b70 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    1b70:	b580      	push	{r7, lr}
    1b72:	b084      	sub	sp, #16
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
    1b78:	460b      	mov	r3, r1
    1b7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    1b82:	7bfb      	ldrb	r3, [r7, #15]
    1b84:	f023 0310 	bic.w	r3, r3, #16
    1b88:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    1b8a:	78fb      	ldrb	r3, [r7, #3]
    1b8c:	011b      	lsls	r3, r3, #4
    1b8e:	b25a      	sxtb	r2, r3
    1b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1b94:	4313      	orrs	r3, r2
    1b96:	b25b      	sxtb	r3, r3
    1b98:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	7bfa      	ldrb	r2, [r7, #15]
    1b9e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    1ba0:	2103      	movs	r1, #3
    1ba2:	6878      	ldr	r0, [r7, #4]
    1ba4:	4b02      	ldr	r3, [pc, #8]	; (1bb0 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    1ba6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1ba8:	bf00      	nop
    1baa:	3710      	adds	r7, #16
    1bac:	46bd      	mov	sp, r7
    1bae:	bd80      	pop	{r7, pc}
    1bb0:	00001a99 	.word	0x00001a99

00001bb4 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b084      	sub	sp, #16
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    1bc0:	2103      	movs	r1, #3
    1bc2:	6878      	ldr	r0, [r7, #4]
    1bc4:	4b06      	ldr	r3, [pc, #24]	; (1be0 <hri_eic_get_CTRLA_reg+0x2c>)
    1bc6:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    1bce:	7bfa      	ldrb	r2, [r7, #15]
    1bd0:	78fb      	ldrb	r3, [r7, #3]
    1bd2:	4013      	ands	r3, r2
    1bd4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    1bd6:	7bfb      	ldrb	r3, [r7, #15]
}
    1bd8:	4618      	mov	r0, r3
    1bda:	3710      	adds	r7, #16
    1bdc:	46bd      	mov	sp, r7
    1bde:	bd80      	pop	{r7, pc}
    1be0:	00001a99 	.word	0x00001a99

00001be4 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    1be4:	b580      	push	{r7, lr}
    1be6:	b082      	sub	sp, #8
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
    1bec:	460b      	mov	r3, r1
    1bee:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	78fa      	ldrb	r2, [r7, #3]
    1bf4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    1bf6:	2103      	movs	r1, #3
    1bf8:	6878      	ldr	r0, [r7, #4]
    1bfa:	4b03      	ldr	r3, [pc, #12]	; (1c08 <hri_eic_write_CTRLA_reg+0x24>)
    1bfc:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1bfe:	bf00      	nop
    1c00:	3708      	adds	r7, #8
    1c02:	46bd      	mov	sp, r7
    1c04:	bd80      	pop	{r7, pc}
    1c06:	bf00      	nop
    1c08:	00001a99 	.word	0x00001a99

00001c0c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    1c0c:	b480      	push	{r7}
    1c0e:	b083      	sub	sp, #12
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
    1c14:	460b      	mov	r3, r1
    1c16:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	78fa      	ldrb	r2, [r7, #3]
    1c1c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1c1e:	bf00      	nop
    1c20:	370c      	adds	r7, #12
    1c22:	46bd      	mov	sp, r7
    1c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c28:	4770      	bx	lr

00001c2a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    1c2a:	b480      	push	{r7}
    1c2c:	b083      	sub	sp, #12
    1c2e:	af00      	add	r7, sp, #0
    1c30:	6078      	str	r0, [r7, #4]
    1c32:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	683a      	ldr	r2, [r7, #0]
    1c38:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1c3a:	bf00      	nop
    1c3c:	370c      	adds	r7, #12
    1c3e:	46bd      	mov	sp, r7
    1c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c44:	4770      	bx	lr

00001c46 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    1c46:	b480      	push	{r7}
    1c48:	b083      	sub	sp, #12
    1c4a:	af00      	add	r7, sp, #0
    1c4c:	6078      	str	r0, [r7, #4]
    1c4e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	683a      	ldr	r2, [r7, #0]
    1c54:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1c56:	bf00      	nop
    1c58:	370c      	adds	r7, #12
    1c5a:	46bd      	mov	sp, r7
    1c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c60:	4770      	bx	lr

00001c62 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    1c62:	b480      	push	{r7}
    1c64:	b085      	sub	sp, #20
    1c66:	af00      	add	r7, sp, #0
    1c68:	60f8      	str	r0, [r7, #12]
    1c6a:	460b      	mov	r3, r1
    1c6c:	607a      	str	r2, [r7, #4]
    1c6e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1c70:	7afb      	ldrb	r3, [r7, #11]
    1c72:	68fa      	ldr	r2, [r7, #12]
    1c74:	3306      	adds	r3, #6
    1c76:	009b      	lsls	r3, r3, #2
    1c78:	4413      	add	r3, r2
    1c7a:	687a      	ldr	r2, [r7, #4]
    1c7c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1c7e:	bf00      	nop
    1c80:	3714      	adds	r7, #20
    1c82:	46bd      	mov	sp, r7
    1c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c88:	4770      	bx	lr

00001c8a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    1c8a:	b480      	push	{r7}
    1c8c:	b083      	sub	sp, #12
    1c8e:	af00      	add	r7, sp, #0
    1c90:	6078      	str	r0, [r7, #4]
    1c92:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	683a      	ldr	r2, [r7, #0]
    1c98:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    1c9a:	bf00      	nop
    1c9c:	370c      	adds	r7, #12
    1c9e:	46bd      	mov	sp, r7
    1ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ca4:	4770      	bx	lr

00001ca6 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    1ca6:	b480      	push	{r7}
    1ca8:	b083      	sub	sp, #12
    1caa:	af00      	add	r7, sp, #0
    1cac:	6078      	str	r0, [r7, #4]
    1cae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	683a      	ldr	r2, [r7, #0]
    1cb4:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    1cb6:	bf00      	nop
    1cb8:	370c      	adds	r7, #12
    1cba:	46bd      	mov	sp, r7
    1cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc0:	4770      	bx	lr
	...

00001cc4 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b082      	sub	sp, #8
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1ccc:	2101      	movs	r1, #1
    1cce:	482a      	ldr	r0, [pc, #168]	; (1d78 <_ext_irq_init+0xb4>)
    1cd0:	4b2a      	ldr	r3, [pc, #168]	; (1d7c <_ext_irq_init+0xb8>)
    1cd2:	4798      	blx	r3
    1cd4:	4603      	mov	r3, r0
    1cd6:	f083 0301 	eor.w	r3, r3, #1
    1cda:	b2db      	uxtb	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d011      	beq.n	1d04 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1ce0:	2102      	movs	r1, #2
    1ce2:	4825      	ldr	r0, [pc, #148]	; (1d78 <_ext_irq_init+0xb4>)
    1ce4:	4b26      	ldr	r3, [pc, #152]	; (1d80 <_ext_irq_init+0xbc>)
    1ce6:	4798      	blx	r3
    1ce8:	4603      	mov	r3, r0
    1cea:	2b00      	cmp	r3, #0
    1cec:	d006      	beq.n	1cfc <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    1cee:	4822      	ldr	r0, [pc, #136]	; (1d78 <_ext_irq_init+0xb4>)
    1cf0:	4b24      	ldr	r3, [pc, #144]	; (1d84 <_ext_irq_init+0xc0>)
    1cf2:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    1cf4:	2102      	movs	r1, #2
    1cf6:	4820      	ldr	r0, [pc, #128]	; (1d78 <_ext_irq_init+0xb4>)
    1cf8:	4b23      	ldr	r3, [pc, #140]	; (1d88 <_ext_irq_init+0xc4>)
    1cfa:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    1cfc:	2101      	movs	r1, #1
    1cfe:	481e      	ldr	r0, [pc, #120]	; (1d78 <_ext_irq_init+0xb4>)
    1d00:	4b22      	ldr	r3, [pc, #136]	; (1d8c <_ext_irq_init+0xc8>)
    1d02:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    1d04:	2101      	movs	r1, #1
    1d06:	481c      	ldr	r0, [pc, #112]	; (1d78 <_ext_irq_init+0xb4>)
    1d08:	4b1f      	ldr	r3, [pc, #124]	; (1d88 <_ext_irq_init+0xc4>)
    1d0a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    1d0c:	2100      	movs	r1, #0
    1d0e:	481a      	ldr	r0, [pc, #104]	; (1d78 <_ext_irq_init+0xb4>)
    1d10:	4b1f      	ldr	r3, [pc, #124]	; (1d90 <_ext_irq_init+0xcc>)
    1d12:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    1d14:	2100      	movs	r1, #0
    1d16:	4818      	ldr	r0, [pc, #96]	; (1d78 <_ext_irq_init+0xb4>)
    1d18:	4b1e      	ldr	r3, [pc, #120]	; (1d94 <_ext_irq_init+0xd0>)
    1d1a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    1d1c:	2101      	movs	r1, #1
    1d1e:	4816      	ldr	r0, [pc, #88]	; (1d78 <_ext_irq_init+0xb4>)
    1d20:	4b1d      	ldr	r3, [pc, #116]	; (1d98 <_ext_irq_init+0xd4>)
    1d22:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    1d24:	2100      	movs	r1, #0
    1d26:	4814      	ldr	r0, [pc, #80]	; (1d78 <_ext_irq_init+0xb4>)
    1d28:	4b1c      	ldr	r3, [pc, #112]	; (1d9c <_ext_irq_init+0xd8>)
    1d2a:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    1d2c:	2100      	movs	r1, #0
    1d2e:	4812      	ldr	r0, [pc, #72]	; (1d78 <_ext_irq_init+0xb4>)
    1d30:	4b1b      	ldr	r3, [pc, #108]	; (1da0 <_ext_irq_init+0xdc>)
    1d32:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    1d34:	2100      	movs	r1, #0
    1d36:	4810      	ldr	r0, [pc, #64]	; (1d78 <_ext_irq_init+0xb4>)
    1d38:	4b1a      	ldr	r3, [pc, #104]	; (1da4 <_ext_irq_init+0xe0>)
    1d3a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    1d3c:	220c      	movs	r2, #12
    1d3e:	2100      	movs	r1, #0
    1d40:	480d      	ldr	r0, [pc, #52]	; (1d78 <_ext_irq_init+0xb4>)
    1d42:	4b19      	ldr	r3, [pc, #100]	; (1da8 <_ext_irq_init+0xe4>)
    1d44:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    1d46:	2200      	movs	r2, #0
    1d48:	2101      	movs	r1, #1
    1d4a:	480b      	ldr	r0, [pc, #44]	; (1d78 <_ext_irq_init+0xb4>)
    1d4c:	4b16      	ldr	r3, [pc, #88]	; (1da8 <_ext_irq_init+0xe4>)
    1d4e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    1d50:	4809      	ldr	r0, [pc, #36]	; (1d78 <_ext_irq_init+0xb4>)
    1d52:	4b16      	ldr	r3, [pc, #88]	; (1dac <_ext_irq_init+0xe8>)
    1d54:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    1d56:	200c      	movs	r0, #12
    1d58:	4b15      	ldr	r3, [pc, #84]	; (1db0 <_ext_irq_init+0xec>)
    1d5a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    1d5c:	200c      	movs	r0, #12
    1d5e:	4b15      	ldr	r3, [pc, #84]	; (1db4 <_ext_irq_init+0xf0>)
    1d60:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    1d62:	200c      	movs	r0, #12
    1d64:	4b14      	ldr	r3, [pc, #80]	; (1db8 <_ext_irq_init+0xf4>)
    1d66:	4798      	blx	r3

	callback = cb;
    1d68:	4a14      	ldr	r2, [pc, #80]	; (1dbc <_ext_irq_init+0xf8>)
    1d6a:	687b      	ldr	r3, [r7, #4]
    1d6c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    1d6e:	2300      	movs	r3, #0
}
    1d70:	4618      	mov	r0, r3
    1d72:	3708      	adds	r7, #8
    1d74:	46bd      	mov	sp, r7
    1d76:	bd80      	pop	{r7, pc}
    1d78:	40002800 	.word	0x40002800
    1d7c:	00001abd 	.word	0x00001abd
    1d80:	00001bb5 	.word	0x00001bb5
    1d84:	00001b45 	.word	0x00001b45
    1d88:	00001a99 	.word	0x00001a99
    1d8c:	00001be5 	.word	0x00001be5
    1d90:	00001b71 	.word	0x00001b71
    1d94:	00001c0d 	.word	0x00001c0d
    1d98:	00001c2b 	.word	0x00001c2b
    1d9c:	00001c47 	.word	0x00001c47
    1da0:	00001c8b 	.word	0x00001c8b
    1da4:	00001ca7 	.word	0x00001ca7
    1da8:	00001c63 	.word	0x00001c63
    1dac:	00001b19 	.word	0x00001b19
    1db0:	00001a19 	.word	0x00001a19
    1db4:	00001a5d 	.word	0x00001a5d
    1db8:	000019dd 	.word	0x000019dd
    1dbc:	200000e8 	.word	0x200000e8

00001dc0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b084      	sub	sp, #16
    1dc4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1dc6:	483f      	ldr	r0, [pc, #252]	; (1ec4 <_ext_irq_handler+0x104>)
    1dc8:	4b3f      	ldr	r3, [pc, #252]	; (1ec8 <_ext_irq_handler+0x108>)
    1dca:	4798      	blx	r3
    1dcc:	4603      	mov	r3, r0
    1dce:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    1dd0:	f04f 33ff 	mov.w	r3, #4294967295
    1dd4:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1dd6:	683b      	ldr	r3, [r7, #0]
    1dd8:	4619      	mov	r1, r3
    1dda:	483a      	ldr	r0, [pc, #232]	; (1ec4 <_ext_irq_handler+0x104>)
    1ddc:	4b3b      	ldr	r3, [pc, #236]	; (1ecc <_ext_irq_handler+0x10c>)
    1dde:	4798      	blx	r3

	ASSERT(callback);
    1de0:	4b3b      	ldr	r3, [pc, #236]	; (1ed0 <_ext_irq_handler+0x110>)
    1de2:	681b      	ldr	r3, [r3, #0]
    1de4:	2b00      	cmp	r3, #0
    1de6:	bf14      	ite	ne
    1de8:	2301      	movne	r3, #1
    1dea:	2300      	moveq	r3, #0
    1dec:	b2db      	uxtb	r3, r3
    1dee:	22e8      	movs	r2, #232	; 0xe8
    1df0:	4938      	ldr	r1, [pc, #224]	; (1ed4 <_ext_irq_handler+0x114>)
    1df2:	4618      	mov	r0, r3
    1df4:	4b38      	ldr	r3, [pc, #224]	; (1ed8 <_ext_irq_handler+0x118>)
    1df6:	4798      	blx	r3

	while (flags) {
    1df8:	e05c      	b.n	1eb4 <_ext_irq_handler+0xf4>
		pos = ffs(flags) - 1;
    1dfa:	683b      	ldr	r3, [r7, #0]
    1dfc:	4618      	mov	r0, r3
    1dfe:	4b37      	ldr	r3, [pc, #220]	; (1edc <_ext_irq_handler+0x11c>)
    1e00:	4798      	blx	r3
    1e02:	4603      	mov	r3, r0
    1e04:	b2db      	uxtb	r3, r3
    1e06:	3b01      	subs	r3, #1
    1e08:	b2db      	uxtb	r3, r3
    1e0a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    1e0c:	e043      	b.n	1e96 <_ext_irq_handler+0xd6>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1e0e:	2300      	movs	r3, #0
    1e10:	71fb      	strb	r3, [r7, #7]
    1e12:	2301      	movs	r3, #1
    1e14:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    1e16:	e020      	b.n	1e5a <_ext_irq_handler+0x9a>
				middle = (upper + lower) >> 1;
    1e18:	79ba      	ldrb	r2, [r7, #6]
    1e1a:	79fb      	ldrb	r3, [r7, #7]
    1e1c:	4413      	add	r3, r2
    1e1e:	105b      	asrs	r3, r3, #1
    1e20:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    1e22:	797b      	ldrb	r3, [r7, #5]
    1e24:	4a2e      	ldr	r2, [pc, #184]	; (1ee0 <_ext_irq_handler+0x120>)
    1e26:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    1e2a:	461a      	mov	r2, r3
    1e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e30:	429a      	cmp	r2, r3
    1e32:	d102      	bne.n	1e3a <_ext_irq_handler+0x7a>
					pin = _map[middle].pin;
    1e34:	2320      	movs	r3, #32
    1e36:	60bb      	str	r3, [r7, #8]
					break;
    1e38:	e013      	b.n	1e62 <_ext_irq_handler+0xa2>
				}
				if (_map[middle].extint < pos) {
    1e3a:	797b      	ldrb	r3, [r7, #5]
    1e3c:	4a28      	ldr	r2, [pc, #160]	; (1ee0 <_ext_irq_handler+0x120>)
    1e3e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    1e42:	461a      	mov	r2, r3
    1e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e48:	429a      	cmp	r2, r3
    1e4a:	da03      	bge.n	1e54 <_ext_irq_handler+0x94>
					lower = middle + 1;
    1e4c:	797b      	ldrb	r3, [r7, #5]
    1e4e:	3301      	adds	r3, #1
    1e50:	71fb      	strb	r3, [r7, #7]
    1e52:	e002      	b.n	1e5a <_ext_irq_handler+0x9a>
				} else {
					upper = middle - 1;
    1e54:	797b      	ldrb	r3, [r7, #5]
    1e56:	3b01      	subs	r3, #1
    1e58:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    1e5a:	79ba      	ldrb	r2, [r7, #6]
    1e5c:	79fb      	ldrb	r3, [r7, #7]
    1e5e:	429a      	cmp	r2, r3
    1e60:	d2da      	bcs.n	1e18 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1e62:	68bb      	ldr	r3, [r7, #8]
    1e64:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e68:	d003      	beq.n	1e72 <_ext_irq_handler+0xb2>
				callback(pin);
    1e6a:	4b19      	ldr	r3, [pc, #100]	; (1ed0 <_ext_irq_handler+0x110>)
    1e6c:	681b      	ldr	r3, [r3, #0]
    1e6e:	68b8      	ldr	r0, [r7, #8]
    1e70:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e76:	2201      	movs	r2, #1
    1e78:	fa02 f303 	lsl.w	r3, r2, r3
    1e7c:	43da      	mvns	r2, r3
    1e7e:	683b      	ldr	r3, [r7, #0]
    1e80:	4013      	ands	r3, r2
    1e82:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    1e84:	683b      	ldr	r3, [r7, #0]
    1e86:	4618      	mov	r0, r3
    1e88:	4b14      	ldr	r3, [pc, #80]	; (1edc <_ext_irq_handler+0x11c>)
    1e8a:	4798      	blx	r3
    1e8c:	4603      	mov	r3, r0
    1e8e:	b2db      	uxtb	r3, r3
    1e90:	3b01      	subs	r3, #1
    1e92:	b2db      	uxtb	r3, r3
    1e94:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    1e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e9e:	d1b6      	bne.n	1e0e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1ea0:	4808      	ldr	r0, [pc, #32]	; (1ec4 <_ext_irq_handler+0x104>)
    1ea2:	4b09      	ldr	r3, [pc, #36]	; (1ec8 <_ext_irq_handler+0x108>)
    1ea4:	4798      	blx	r3
    1ea6:	4603      	mov	r3, r0
    1ea8:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1eaa:	683b      	ldr	r3, [r7, #0]
    1eac:	4619      	mov	r1, r3
    1eae:	4805      	ldr	r0, [pc, #20]	; (1ec4 <_ext_irq_handler+0x104>)
    1eb0:	4b06      	ldr	r3, [pc, #24]	; (1ecc <_ext_irq_handler+0x10c>)
    1eb2:	4798      	blx	r3
	while (flags) {
    1eb4:	683b      	ldr	r3, [r7, #0]
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d19f      	bne.n	1dfa <_ext_irq_handler+0x3a>
	}
}
    1eba:	bf00      	nop
    1ebc:	3710      	adds	r7, #16
    1ebe:	46bd      	mov	sp, r7
    1ec0:	bd80      	pop	{r7, pc}
    1ec2:	bf00      	nop
    1ec4:	40002800 	.word	0x40002800
    1ec8:	00001ae5 	.word	0x00001ae5
    1ecc:	00001afd 	.word	0x00001afd
    1ed0:	200000e8 	.word	0x200000e8
    1ed4:	00005820 	.word	0x00005820
    1ed8:	00001629 	.word	0x00001629
    1edc:	00004e2d 	.word	0x00004e2d
    1ee0:	00005818 	.word	0x00005818

00001ee4 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    1ee4:	b580      	push	{r7, lr}
    1ee6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    1ee8:	4b01      	ldr	r3, [pc, #4]	; (1ef0 <EIC_0_Handler+0xc>)
    1eea:	4798      	blx	r3
}
    1eec:	bf00      	nop
    1eee:	bd80      	pop	{r7, pc}
    1ef0:	00001dc1 	.word	0x00001dc1

00001ef4 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b085      	sub	sp, #20
    1ef8:	af00      	add	r7, sp, #0
    1efa:	60f8      	str	r0, [r7, #12]
    1efc:	460b      	mov	r3, r1
    1efe:	607a      	str	r2, [r7, #4]
    1f00:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1f02:	7afa      	ldrb	r2, [r7, #11]
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	3248      	adds	r2, #72	; 0x48
    1f08:	6879      	ldr	r1, [r7, #4]
    1f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    1f0e:	bf00      	nop
    1f10:	3714      	adds	r7, #20
    1f12:	46bd      	mov	sp, r7
    1f14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f18:	4770      	bx	lr

00001f1a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    1f1a:	b480      	push	{r7}
    1f1c:	b083      	sub	sp, #12
    1f1e:	af00      	add	r7, sp, #0
    1f20:	6078      	str	r0, [r7, #4]
    1f22:	460b      	mov	r3, r1
    1f24:	70fb      	strb	r3, [r7, #3]
    1f26:	4613      	mov	r3, r2
    1f28:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1f2a:	78fb      	ldrb	r3, [r7, #3]
    1f2c:	687a      	ldr	r2, [r7, #4]
    1f2e:	3304      	adds	r3, #4
    1f30:	00db      	lsls	r3, r3, #3
    1f32:	4413      	add	r3, r2
    1f34:	78ba      	ldrb	r2, [r7, #2]
    1f36:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1f38:	78fb      	ldrb	r3, [r7, #3]
    1f3a:	78ba      	ldrb	r2, [r7, #2]
    1f3c:	43d2      	mvns	r2, r2
    1f3e:	b2d1      	uxtb	r1, r2
    1f40:	687a      	ldr	r2, [r7, #4]
    1f42:	3304      	adds	r3, #4
    1f44:	00db      	lsls	r3, r3, #3
    1f46:	4413      	add	r3, r2
    1f48:	460a      	mov	r2, r1
    1f4a:	711a      	strb	r2, [r3, #4]
}
    1f4c:	bf00      	nop
    1f4e:	370c      	adds	r7, #12
    1f50:	46bd      	mov	sp, r7
    1f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f56:	4770      	bx	lr

00001f58 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    1f58:	b480      	push	{r7}
    1f5a:	b085      	sub	sp, #20
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	60f8      	str	r0, [r7, #12]
    1f60:	460b      	mov	r3, r1
    1f62:	607a      	str	r2, [r7, #4]
    1f64:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1f66:	7afa      	ldrb	r2, [r7, #11]
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	3204      	adds	r2, #4
    1f6c:	6879      	ldr	r1, [r7, #4]
    1f6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    1f72:	bf00      	nop
    1f74:	3714      	adds	r7, #20
    1f76:	46bd      	mov	sp, r7
    1f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f7c:	4770      	bx	lr
	...

00001f80 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1f80:	b580      	push	{r7, lr}
    1f82:	b082      	sub	sp, #8
    1f84:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1f86:	2300      	movs	r3, #0
    1f88:	71fb      	strb	r3, [r7, #7]
    1f8a:	e00b      	b.n	1fa4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1f8c:	79fb      	ldrb	r3, [r7, #7]
    1f8e:	4a18      	ldr	r2, [pc, #96]	; (1ff0 <_event_system_init+0x70>)
    1f90:	5cd3      	ldrb	r3, [r2, r3]
    1f92:	461a      	mov	r2, r3
    1f94:	79fb      	ldrb	r3, [r7, #7]
    1f96:	4619      	mov	r1, r3
    1f98:	4816      	ldr	r0, [pc, #88]	; (1ff4 <_event_system_init+0x74>)
    1f9a:	4b17      	ldr	r3, [pc, #92]	; (1ff8 <_event_system_init+0x78>)
    1f9c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    1f9e:	79fb      	ldrb	r3, [r7, #7]
    1fa0:	3301      	adds	r3, #1
    1fa2:	71fb      	strb	r3, [r7, #7]
    1fa4:	79fb      	ldrb	r3, [r7, #7]
    1fa6:	2b42      	cmp	r3, #66	; 0x42
    1fa8:	d9f0      	bls.n	1f8c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1faa:	2300      	movs	r3, #0
    1fac:	71fb      	strb	r3, [r7, #7]
    1fae:	e016      	b.n	1fde <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1fb0:	79fb      	ldrb	r3, [r7, #7]
    1fb2:	4a12      	ldr	r2, [pc, #72]	; (1ffc <_event_system_init+0x7c>)
    1fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    1fb8:	461a      	mov	r2, r3
    1fba:	79fb      	ldrb	r3, [r7, #7]
    1fbc:	4619      	mov	r1, r3
    1fbe:	480d      	ldr	r0, [pc, #52]	; (1ff4 <_event_system_init+0x74>)
    1fc0:	4b0f      	ldr	r3, [pc, #60]	; (2000 <_event_system_init+0x80>)
    1fc2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1fc4:	79fb      	ldrb	r3, [r7, #7]
    1fc6:	4a0f      	ldr	r2, [pc, #60]	; (2004 <_event_system_init+0x84>)
    1fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fcc:	b2da      	uxtb	r2, r3
    1fce:	79fb      	ldrb	r3, [r7, #7]
    1fd0:	4619      	mov	r1, r3
    1fd2:	4808      	ldr	r0, [pc, #32]	; (1ff4 <_event_system_init+0x74>)
    1fd4:	4b0c      	ldr	r3, [pc, #48]	; (2008 <_event_system_init+0x88>)
    1fd6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1fd8:	79fb      	ldrb	r3, [r7, #7]
    1fda:	3301      	adds	r3, #1
    1fdc:	71fb      	strb	r3, [r7, #7]
    1fde:	79fb      	ldrb	r3, [r7, #7]
    1fe0:	2b1f      	cmp	r3, #31
    1fe2:	d9e5      	bls.n	1fb0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    1fe4:	2300      	movs	r3, #0
}
    1fe6:	4618      	mov	r0, r3
    1fe8:	3708      	adds	r7, #8
    1fea:	46bd      	mov	sp, r7
    1fec:	bd80      	pop	{r7, pc}
    1fee:	bf00      	nop
    1ff0:	00005838 	.word	0x00005838
    1ff4:	4100e000 	.word	0x4100e000
    1ff8:	00001ef5 	.word	0x00001ef5
    1ffc:	0000587c 	.word	0x0000587c
    2000:	00001f59 	.word	0x00001f59
    2004:	000058bc 	.word	0x000058bc
    2008:	00001f1b 	.word	0x00001f1b

0000200c <hri_gclk_wait_for_sync>:
{
    200c:	b480      	push	{r7}
    200e:	b083      	sub	sp, #12
    2010:	af00      	add	r7, sp, #0
    2012:	6078      	str	r0, [r7, #4]
    2014:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2016:	bf00      	nop
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	685a      	ldr	r2, [r3, #4]
    201c:	683b      	ldr	r3, [r7, #0]
    201e:	4013      	ands	r3, r2
    2020:	2b00      	cmp	r3, #0
    2022:	d1f9      	bne.n	2018 <hri_gclk_wait_for_sync+0xc>
}
    2024:	bf00      	nop
    2026:	370c      	adds	r7, #12
    2028:	46bd      	mov	sp, r7
    202a:	f85d 7b04 	ldr.w	r7, [sp], #4
    202e:	4770      	bx	lr

00002030 <hri_gclk_write_GENCTRL_reg>:
{
    2030:	b580      	push	{r7, lr}
    2032:	b084      	sub	sp, #16
    2034:	af00      	add	r7, sp, #0
    2036:	60f8      	str	r0, [r7, #12]
    2038:	460b      	mov	r3, r1
    203a:	607a      	str	r2, [r7, #4]
    203c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    203e:	7afa      	ldrb	r2, [r7, #11]
    2040:	68fb      	ldr	r3, [r7, #12]
    2042:	3208      	adds	r2, #8
    2044:	6879      	ldr	r1, [r7, #4]
    2046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    204a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    204e:	68f8      	ldr	r0, [r7, #12]
    2050:	4b02      	ldr	r3, [pc, #8]	; (205c <hri_gclk_write_GENCTRL_reg+0x2c>)
    2052:	4798      	blx	r3
}
    2054:	bf00      	nop
    2056:	3710      	adds	r7, #16
    2058:	46bd      	mov	sp, r7
    205a:	bd80      	pop	{r7, pc}
    205c:	0000200d 	.word	0x0000200d

00002060 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2060:	b580      	push	{r7, lr}
    2062:	b082      	sub	sp, #8
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	f003 0301 	and.w	r3, r3, #1
    206e:	2b00      	cmp	r3, #0
    2070:	d004      	beq.n	207c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    2072:	4a04      	ldr	r2, [pc, #16]	; (2084 <_gclk_init_generators_by_fref+0x24>)
    2074:	2100      	movs	r1, #0
    2076:	4804      	ldr	r0, [pc, #16]	; (2088 <_gclk_init_generators_by_fref+0x28>)
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <_gclk_init_generators_by_fref+0x2c>)
    207a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    207c:	bf00      	nop
    207e:	3708      	adds	r7, #8
    2080:	46bd      	mov	sp, r7
    2082:	bd80      	pop	{r7, pc}
    2084:	00010101 	.word	0x00010101
    2088:	40001c00 	.word	0x40001c00
    208c:	00002031 	.word	0x00002031

00002090 <hri_mclk_write_CPUDIV_reg>:
{
    2090:	b480      	push	{r7}
    2092:	b083      	sub	sp, #12
    2094:	af00      	add	r7, sp, #0
    2096:	6078      	str	r0, [r7, #4]
    2098:	460b      	mov	r3, r1
    209a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	78fa      	ldrb	r2, [r7, #3]
    20a0:	715a      	strb	r2, [r3, #5]
}
    20a2:	bf00      	nop
    20a4:	370c      	adds	r7, #12
    20a6:	46bd      	mov	sp, r7
    20a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ac:	4770      	bx	lr
	...

000020b0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    20b6:	4b05      	ldr	r3, [pc, #20]	; (20cc <_mclk_init+0x1c>)
    20b8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    20ba:	2101      	movs	r1, #1
    20bc:	6878      	ldr	r0, [r7, #4]
    20be:	4b04      	ldr	r3, [pc, #16]	; (20d0 <_mclk_init+0x20>)
    20c0:	4798      	blx	r3
}
    20c2:	bf00      	nop
    20c4:	3708      	adds	r7, #8
    20c6:	46bd      	mov	sp, r7
    20c8:	bd80      	pop	{r7, pc}
    20ca:	bf00      	nop
    20cc:	40000800 	.word	0x40000800
    20d0:	00002091 	.word	0x00002091

000020d4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	460b      	mov	r3, r1
    20de:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	78fa      	ldrb	r2, [r7, #3]
    20e4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    20e6:	bf00      	nop
    20e8:	370c      	adds	r7, #12
    20ea:	46bd      	mov	sp, r7
    20ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    20f0:	4770      	bx	lr

000020f2 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    20f2:	b480      	push	{r7}
    20f4:	b085      	sub	sp, #20
    20f6:	af00      	add	r7, sp, #0
    20f8:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	69db      	ldr	r3, [r3, #28]
    20fe:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	0a1b      	lsrs	r3, r3, #8
    2104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2108:	60fb      	str	r3, [r7, #12]
	return tmp;
    210a:	68fb      	ldr	r3, [r7, #12]
}
    210c:	4618      	mov	r0, r3
    210e:	3714      	adds	r7, #20
    2110:	46bd      	mov	sp, r7
    2112:	f85d 7b04 	ldr.w	r7, [sp], #4
    2116:	4770      	bx	lr

00002118 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    2118:	b480      	push	{r7}
    211a:	b083      	sub	sp, #12
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
    2120:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	683a      	ldr	r2, [r7, #0]
    2126:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2128:	bf00      	nop
    212a:	370c      	adds	r7, #12
    212c:	46bd      	mov	sp, r7
    212e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2132:	4770      	bx	lr

00002134 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    2134:	b580      	push	{r7, lr}
    2136:	b082      	sub	sp, #8
    2138:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    213a:	4b0c      	ldr	r3, [pc, #48]	; (216c <_osc32kctrl_init_sources+0x38>)
    213c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    213e:	2300      	movs	r3, #0
    2140:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    2142:	6878      	ldr	r0, [r7, #4]
    2144:	4b0a      	ldr	r3, [pc, #40]	; (2170 <_osc32kctrl_init_sources+0x3c>)
    2146:	4798      	blx	r3
    2148:	4603      	mov	r3, r0
    214a:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    214c:	887b      	ldrh	r3, [r7, #2]
    214e:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    2150:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2154:	4619      	mov	r1, r3
    2156:	6878      	ldr	r0, [r7, #4]
    2158:	4b06      	ldr	r3, [pc, #24]	; (2174 <_osc32kctrl_init_sources+0x40>)
    215a:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    215c:	2101      	movs	r1, #1
    215e:	6878      	ldr	r0, [r7, #4]
    2160:	4b05      	ldr	r3, [pc, #20]	; (2178 <_osc32kctrl_init_sources+0x44>)
    2162:	4798      	blx	r3
	(void)calib;
}
    2164:	bf00      	nop
    2166:	3708      	adds	r7, #8
    2168:	46bd      	mov	sp, r7
    216a:	bd80      	pop	{r7, pc}
    216c:	40001400 	.word	0x40001400
    2170:	000020f3 	.word	0x000020f3
    2174:	00002119 	.word	0x00002119
    2178:	000020d5 	.word	0x000020d5

0000217c <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    217c:	b480      	push	{r7}
    217e:	b083      	sub	sp, #12
    2180:	af00      	add	r7, sp, #0
    2182:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	691b      	ldr	r3, [r3, #16]
    2188:	085b      	lsrs	r3, r3, #1
    218a:	f003 0301 	and.w	r3, r3, #1
    218e:	2b00      	cmp	r3, #0
    2190:	bf14      	ite	ne
    2192:	2301      	movne	r3, #1
    2194:	2300      	moveq	r3, #0
    2196:	b2db      	uxtb	r3, r3
}
    2198:	4618      	mov	r0, r3
    219a:	370c      	adds	r7, #12
    219c:	46bd      	mov	sp, r7
    219e:	f85d 7b04 	ldr.w	r7, [sp], #4
    21a2:	4770      	bx	lr

000021a4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    21a4:	b480      	push	{r7}
    21a6:	b085      	sub	sp, #20
    21a8:	af00      	add	r7, sp, #0
    21aa:	60f8      	str	r0, [r7, #12]
    21ac:	460b      	mov	r3, r1
    21ae:	607a      	str	r2, [r7, #4]
    21b0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    21b2:	7afb      	ldrb	r3, [r7, #11]
    21b4:	68fa      	ldr	r2, [r7, #12]
    21b6:	3304      	adds	r3, #4
    21b8:	009b      	lsls	r3, r3, #2
    21ba:	4413      	add	r3, r2
    21bc:	687a      	ldr	r2, [r7, #4]
    21be:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    21c0:	bf00      	nop
    21c2:	3714      	adds	r7, #20
    21c4:	46bd      	mov	sp, r7
    21c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ca:	4770      	bx	lr

000021cc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b082      	sub	sp, #8
    21d0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    21d2:	4b0a      	ldr	r3, [pc, #40]	; (21fc <_oscctrl_init_sources+0x30>)
    21d4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    21d6:	4a0a      	ldr	r2, [pc, #40]	; (2200 <_oscctrl_init_sources+0x34>)
    21d8:	2101      	movs	r1, #1
    21da:	6878      	ldr	r0, [r7, #4]
    21dc:	4b09      	ldr	r3, [pc, #36]	; (2204 <_oscctrl_init_sources+0x38>)
    21de:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    21e0:	bf00      	nop
    21e2:	6878      	ldr	r0, [r7, #4]
    21e4:	4b08      	ldr	r3, [pc, #32]	; (2208 <_oscctrl_init_sources+0x3c>)
    21e6:	4798      	blx	r3
    21e8:	4603      	mov	r3, r0
    21ea:	f083 0301 	eor.w	r3, r3, #1
    21ee:	b2db      	uxtb	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d1f6      	bne.n	21e2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    21f4:	bf00      	nop
    21f6:	3708      	adds	r7, #8
    21f8:	46bd      	mov	sp, r7
    21fa:	bd80      	pop	{r7, pc}
    21fc:	40001000 	.word	0x40001000
    2200:	03002606 	.word	0x03002606
    2204:	000021a5 	.word	0x000021a5
    2208:	0000217d 	.word	0x0000217d

0000220c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    220c:	b480      	push	{r7}
    220e:	b083      	sub	sp, #12
    2210:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    2212:	4b04      	ldr	r3, [pc, #16]	; (2224 <_oscctrl_init_referenced_generators+0x18>)
    2214:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    2216:	bf00      	nop
    2218:	370c      	adds	r7, #12
    221a:	46bd      	mov	sp, r7
    221c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2220:	4770      	bx	lr
    2222:	bf00      	nop
    2224:	40001000 	.word	0x40001000

00002228 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	789b      	ldrb	r3, [r3, #2]
    2234:	b2db      	uxtb	r3, r3
}
    2236:	4618      	mov	r0, r3
    2238:	370c      	adds	r7, #12
    223a:	46bd      	mov	sp, r7
    223c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2240:	4770      	bx	lr

00002242 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    2242:	b480      	push	{r7}
    2244:	b083      	sub	sp, #12
    2246:	af00      	add	r7, sp, #0
    2248:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	685b      	ldr	r3, [r3, #4]
}
    224e:	4618      	mov	r0, r3
    2250:	370c      	adds	r7, #12
    2252:	46bd      	mov	sp, r7
    2254:	f85d 7b04 	ldr.w	r7, [sp], #4
    2258:	4770      	bx	lr
	...

0000225c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    225c:	b590      	push	{r4, r7, lr}
    225e:	b083      	sub	sp, #12
    2260:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    2262:	4b17      	ldr	r3, [pc, #92]	; (22c0 <RAMECC_Handler+0x64>)
    2264:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2266:	4817      	ldr	r0, [pc, #92]	; (22c4 <RAMECC_Handler+0x68>)
    2268:	4b17      	ldr	r3, [pc, #92]	; (22c8 <RAMECC_Handler+0x6c>)
    226a:	4798      	blx	r3
    226c:	4603      	mov	r3, r0
    226e:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2270:	683b      	ldr	r3, [r7, #0]
    2272:	f003 0302 	and.w	r3, r3, #2
    2276:	2b00      	cmp	r3, #0
    2278:	d00c      	beq.n	2294 <RAMECC_Handler+0x38>
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	681b      	ldr	r3, [r3, #0]
    227e:	2b00      	cmp	r3, #0
    2280:	d008      	beq.n	2294 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	681c      	ldr	r4, [r3, #0]
    2286:	480f      	ldr	r0, [pc, #60]	; (22c4 <RAMECC_Handler+0x68>)
    2288:	4b10      	ldr	r3, [pc, #64]	; (22cc <RAMECC_Handler+0x70>)
    228a:	4798      	blx	r3
    228c:	4603      	mov	r3, r0
    228e:	4618      	mov	r0, r3
    2290:	47a0      	blx	r4
    2292:	e012      	b.n	22ba <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2294:	683b      	ldr	r3, [r7, #0]
    2296:	f003 0301 	and.w	r3, r3, #1
    229a:	2b00      	cmp	r3, #0
    229c:	d00c      	beq.n	22b8 <RAMECC_Handler+0x5c>
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	685b      	ldr	r3, [r3, #4]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d008      	beq.n	22b8 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	685c      	ldr	r4, [r3, #4]
    22aa:	4806      	ldr	r0, [pc, #24]	; (22c4 <RAMECC_Handler+0x68>)
    22ac:	4b07      	ldr	r3, [pc, #28]	; (22cc <RAMECC_Handler+0x70>)
    22ae:	4798      	blx	r3
    22b0:	4603      	mov	r3, r0
    22b2:	4618      	mov	r0, r3
    22b4:	47a0      	blx	r4
    22b6:	e000      	b.n	22ba <RAMECC_Handler+0x5e>
	} else {
		return;
    22b8:	bf00      	nop
	}
}
    22ba:	370c      	adds	r7, #12
    22bc:	46bd      	mov	sp, r7
    22be:	bd90      	pop	{r4, r7, pc}
    22c0:	2000023c 	.word	0x2000023c
    22c4:	41020000 	.word	0x41020000
    22c8:	00002229 	.word	0x00002229
    22cc:	00002243 	.word	0x00002243

000022d0 <__NVIC_EnableIRQ>:
{
    22d0:	b480      	push	{r7}
    22d2:	b083      	sub	sp, #12
    22d4:	af00      	add	r7, sp, #0
    22d6:	4603      	mov	r3, r0
    22d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    22da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    22de:	2b00      	cmp	r3, #0
    22e0:	db0b      	blt.n	22fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22e2:	4909      	ldr	r1, [pc, #36]	; (2308 <__NVIC_EnableIRQ+0x38>)
    22e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    22e8:	095b      	lsrs	r3, r3, #5
    22ea:	88fa      	ldrh	r2, [r7, #6]
    22ec:	f002 021f 	and.w	r2, r2, #31
    22f0:	2001      	movs	r0, #1
    22f2:	fa00 f202 	lsl.w	r2, r0, r2
    22f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    22fa:	bf00      	nop
    22fc:	370c      	adds	r7, #12
    22fe:	46bd      	mov	sp, r7
    2300:	f85d 7b04 	ldr.w	r7, [sp], #4
    2304:	4770      	bx	lr
    2306:	bf00      	nop
    2308:	e000e100 	.word	0xe000e100

0000230c <__NVIC_DisableIRQ>:
{
    230c:	b480      	push	{r7}
    230e:	b083      	sub	sp, #12
    2310:	af00      	add	r7, sp, #0
    2312:	4603      	mov	r3, r0
    2314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    231a:	2b00      	cmp	r3, #0
    231c:	db10      	blt.n	2340 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    231e:	490b      	ldr	r1, [pc, #44]	; (234c <__NVIC_DisableIRQ+0x40>)
    2320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2324:	095b      	lsrs	r3, r3, #5
    2326:	88fa      	ldrh	r2, [r7, #6]
    2328:	f002 021f 	and.w	r2, r2, #31
    232c:	2001      	movs	r0, #1
    232e:	fa00 f202 	lsl.w	r2, r0, r2
    2332:	3320      	adds	r3, #32
    2334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    233c:	f3bf 8f6f 	isb	sy
}
    2340:	bf00      	nop
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr
    234c:	e000e100 	.word	0xe000e100

00002350 <__NVIC_ClearPendingIRQ>:
{
    2350:	b480      	push	{r7}
    2352:	b083      	sub	sp, #12
    2354:	af00      	add	r7, sp, #0
    2356:	4603      	mov	r3, r0
    2358:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    235a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    235e:	2b00      	cmp	r3, #0
    2360:	db0c      	blt.n	237c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2362:	4909      	ldr	r1, [pc, #36]	; (2388 <__NVIC_ClearPendingIRQ+0x38>)
    2364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2368:	095b      	lsrs	r3, r3, #5
    236a:	88fa      	ldrh	r2, [r7, #6]
    236c:	f002 021f 	and.w	r2, r2, #31
    2370:	2001      	movs	r0, #1
    2372:	fa00 f202 	lsl.w	r2, r0, r2
    2376:	3360      	adds	r3, #96	; 0x60
    2378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    237c:	bf00      	nop
    237e:	370c      	adds	r7, #12
    2380:	46bd      	mov	sp, r7
    2382:	f85d 7b04 	ldr.w	r7, [sp], #4
    2386:	4770      	bx	lr
    2388:	e000e100 	.word	0xe000e100

0000238c <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    238c:	b480      	push	{r7}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    2394:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2396:	bf00      	nop
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	69da      	ldr	r2, [r3, #28]
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	4013      	ands	r3, r2
    23a0:	2b00      	cmp	r3, #0
    23a2:	d1f9      	bne.n	2398 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    23a4:	bf00      	nop
    23a6:	370c      	adds	r7, #12
    23a8:	46bd      	mov	sp, r7
    23aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ae:	4770      	bx	lr

000023b0 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    23b0:	b480      	push	{r7}
    23b2:	b083      	sub	sp, #12
    23b4:	af00      	add	r7, sp, #0
    23b6:	6078      	str	r0, [r7, #4]
    23b8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	69da      	ldr	r2, [r3, #28]
    23be:	683b      	ldr	r3, [r7, #0]
    23c0:	4013      	ands	r3, r2
    23c2:	2b00      	cmp	r3, #0
    23c4:	bf14      	ite	ne
    23c6:	2301      	movne	r3, #1
    23c8:	2300      	moveq	r3, #0
    23ca:	b2db      	uxtb	r3, r3
}
    23cc:	4618      	mov	r0, r3
    23ce:	370c      	adds	r7, #12
    23d0:	46bd      	mov	sp, r7
    23d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    23d6:	4770      	bx	lr

000023d8 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    23d8:	b480      	push	{r7}
    23da:	b083      	sub	sp, #12
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	7e1b      	ldrb	r3, [r3, #24]
    23e4:	b2db      	uxtb	r3, r3
    23e6:	f003 0301 	and.w	r3, r3, #1
    23ea:	2b00      	cmp	r3, #0
    23ec:	bf14      	ite	ne
    23ee:	2301      	movne	r3, #1
    23f0:	2300      	moveq	r3, #0
    23f2:	b2db      	uxtb	r3, r3
}
    23f4:	4618      	mov	r0, r3
    23f6:	370c      	adds	r7, #12
    23f8:	46bd      	mov	sp, r7
    23fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    23fe:	4770      	bx	lr

00002400 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2400:	b480      	push	{r7}
    2402:	b083      	sub	sp, #12
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	7e1b      	ldrb	r3, [r3, #24]
    240c:	b2db      	uxtb	r3, r3
    240e:	085b      	lsrs	r3, r3, #1
    2410:	f003 0301 	and.w	r3, r3, #1
    2414:	2b00      	cmp	r3, #0
    2416:	bf14      	ite	ne
    2418:	2301      	movne	r3, #1
    241a:	2300      	moveq	r3, #0
    241c:	b2db      	uxtb	r3, r3
}
    241e:	4618      	mov	r0, r3
    2420:	370c      	adds	r7, #12
    2422:	46bd      	mov	sp, r7
    2424:	f85d 7b04 	ldr.w	r7, [sp], #4
    2428:	4770      	bx	lr

0000242a <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    242a:	b480      	push	{r7}
    242c:	b083      	sub	sp, #12
    242e:	af00      	add	r7, sp, #0
    2430:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	7e1b      	ldrb	r3, [r3, #24]
    2436:	b2db      	uxtb	r3, r3
    2438:	089b      	lsrs	r3, r3, #2
    243a:	f003 0301 	and.w	r3, r3, #1
    243e:	2b00      	cmp	r3, #0
    2440:	bf14      	ite	ne
    2442:	2301      	movne	r3, #1
    2444:	2300      	moveq	r3, #0
    2446:	b2db      	uxtb	r3, r3
}
    2448:	4618      	mov	r0, r3
    244a:	370c      	adds	r7, #12
    244c:	46bd      	mov	sp, r7
    244e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2452:	4770      	bx	lr

00002454 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    2454:	b480      	push	{r7}
    2456:	b083      	sub	sp, #12
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	7e1b      	ldrb	r3, [r3, #24]
    2460:	b2db      	uxtb	r3, r3
    2462:	09db      	lsrs	r3, r3, #7
    2464:	f003 0301 	and.w	r3, r3, #1
    2468:	2b00      	cmp	r3, #0
    246a:	bf14      	ite	ne
    246c:	2301      	movne	r3, #1
    246e:	2300      	moveq	r3, #0
    2470:	b2db      	uxtb	r3, r3
}
    2472:	4618      	mov	r0, r3
    2474:	370c      	adds	r7, #12
    2476:	46bd      	mov	sp, r7
    2478:	f85d 7b04 	ldr.w	r7, [sp], #4
    247c:	4770      	bx	lr

0000247e <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    247e:	b480      	push	{r7}
    2480:	b083      	sub	sp, #12
    2482:	af00      	add	r7, sp, #0
    2484:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	2280      	movs	r2, #128	; 0x80
    248a:	761a      	strb	r2, [r3, #24]
}
    248c:	bf00      	nop
    248e:	370c      	adds	r7, #12
    2490:	46bd      	mov	sp, r7
    2492:	f85d 7b04 	ldr.w	r7, [sp], #4
    2496:	4770      	bx	lr

00002498 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    2498:	b480      	push	{r7}
    249a:	b083      	sub	sp, #12
    249c:	af00      	add	r7, sp, #0
    249e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	2201      	movs	r2, #1
    24a4:	759a      	strb	r2, [r3, #22]
}
    24a6:	bf00      	nop
    24a8:	370c      	adds	r7, #12
    24aa:	46bd      	mov	sp, r7
    24ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    24b0:	4770      	bx	lr

000024b2 <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    24b2:	b480      	push	{r7}
    24b4:	b083      	sub	sp, #12
    24b6:	af00      	add	r7, sp, #0
    24b8:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	7d9b      	ldrb	r3, [r3, #22]
    24be:	b2db      	uxtb	r3, r3
    24c0:	f003 0301 	and.w	r3, r3, #1
    24c4:	2b00      	cmp	r3, #0
    24c6:	bf14      	ite	ne
    24c8:	2301      	movne	r3, #1
    24ca:	2300      	moveq	r3, #0
    24cc:	b2db      	uxtb	r3, r3
}
    24ce:	4618      	mov	r0, r3
    24d0:	370c      	adds	r7, #12
    24d2:	46bd      	mov	sp, r7
    24d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24d8:	4770      	bx	lr

000024da <hri_sercomusart_write_INTEN_DRE_bit>:

static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value)
{
    24da:	b480      	push	{r7}
    24dc:	b083      	sub	sp, #12
    24de:	af00      	add	r7, sp, #0
    24e0:	6078      	str	r0, [r7, #4]
    24e2:	460b      	mov	r3, r1
    24e4:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    24e6:	78fb      	ldrb	r3, [r7, #3]
    24e8:	f083 0301 	eor.w	r3, r3, #1
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2b00      	cmp	r3, #0
    24f0:	d003      	beq.n	24fa <hri_sercomusart_write_INTEN_DRE_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    24f2:	687b      	ldr	r3, [r7, #4]
    24f4:	2201      	movs	r2, #1
    24f6:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}
    24f8:	e002      	b.n	2500 <hri_sercomusart_write_INTEN_DRE_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	2201      	movs	r2, #1
    24fe:	759a      	strb	r2, [r3, #22]
}
    2500:	bf00      	nop
    2502:	370c      	adds	r7, #12
    2504:	46bd      	mov	sp, r7
    2506:	f85d 7b04 	ldr.w	r7, [sp], #4
    250a:	4770      	bx	lr

0000250c <hri_sercomusart_clear_INTEN_DRE_bit>:

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    250c:	b480      	push	{r7}
    250e:	b083      	sub	sp, #12
    2510:	af00      	add	r7, sp, #0
    2512:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2514:	687b      	ldr	r3, [r7, #4]
    2516:	2201      	movs	r2, #1
    2518:	751a      	strb	r2, [r3, #20]
}
    251a:	bf00      	nop
    251c:	370c      	adds	r7, #12
    251e:	46bd      	mov	sp, r7
    2520:	f85d 7b04 	ldr.w	r7, [sp], #4
    2524:	4770      	bx	lr

00002526 <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    2526:	b480      	push	{r7}
    2528:	b083      	sub	sp, #12
    252a:	af00      	add	r7, sp, #0
    252c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	2202      	movs	r2, #2
    2532:	759a      	strb	r2, [r3, #22]
}
    2534:	bf00      	nop
    2536:	370c      	adds	r7, #12
    2538:	46bd      	mov	sp, r7
    253a:	f85d 7b04 	ldr.w	r7, [sp], #4
    253e:	4770      	bx	lr

00002540 <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    2540:	b480      	push	{r7}
    2542:	b083      	sub	sp, #12
    2544:	af00      	add	r7, sp, #0
    2546:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	7d9b      	ldrb	r3, [r3, #22]
    254c:	b2db      	uxtb	r3, r3
    254e:	085b      	lsrs	r3, r3, #1
    2550:	f003 0301 	and.w	r3, r3, #1
    2554:	2b00      	cmp	r3, #0
    2556:	bf14      	ite	ne
    2558:	2301      	movne	r3, #1
    255a:	2300      	moveq	r3, #0
    255c:	b2db      	uxtb	r3, r3
}
    255e:	4618      	mov	r0, r3
    2560:	370c      	adds	r7, #12
    2562:	46bd      	mov	sp, r7
    2564:	f85d 7b04 	ldr.w	r7, [sp], #4
    2568:	4770      	bx	lr

0000256a <hri_sercomusart_write_INTEN_TXC_bit>:

static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value)
{
    256a:	b480      	push	{r7}
    256c:	b083      	sub	sp, #12
    256e:	af00      	add	r7, sp, #0
    2570:	6078      	str	r0, [r7, #4]
    2572:	460b      	mov	r3, r1
    2574:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    2576:	78fb      	ldrb	r3, [r7, #3]
    2578:	f083 0301 	eor.w	r3, r3, #1
    257c:	b2db      	uxtb	r3, r3
    257e:	2b00      	cmp	r3, #0
    2580:	d003      	beq.n	258a <hri_sercomusart_write_INTEN_TXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	2202      	movs	r2, #2
    2586:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}
    2588:	e002      	b.n	2590 <hri_sercomusart_write_INTEN_TXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	2202      	movs	r2, #2
    258e:	759a      	strb	r2, [r3, #22]
}
    2590:	bf00      	nop
    2592:	370c      	adds	r7, #12
    2594:	46bd      	mov	sp, r7
    2596:	f85d 7b04 	ldr.w	r7, [sp], #4
    259a:	4770      	bx	lr

0000259c <hri_sercomusart_clear_INTEN_TXC_bit>:

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	2202      	movs	r2, #2
    25a8:	751a      	strb	r2, [r3, #20]
}
    25aa:	bf00      	nop
    25ac:	370c      	adds	r7, #12
    25ae:	46bd      	mov	sp, r7
    25b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25b4:	4770      	bx	lr

000025b6 <hri_sercomusart_write_INTEN_RXC_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_RXC) >> SERCOM_USART_INTENSET_RXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value)
{
    25b6:	b480      	push	{r7}
    25b8:	b083      	sub	sp, #12
    25ba:	af00      	add	r7, sp, #0
    25bc:	6078      	str	r0, [r7, #4]
    25be:	460b      	mov	r3, r1
    25c0:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    25c2:	78fb      	ldrb	r3, [r7, #3]
    25c4:	f083 0301 	eor.w	r3, r3, #1
    25c8:	b2db      	uxtb	r3, r3
    25ca:	2b00      	cmp	r3, #0
    25cc:	d003      	beq.n	25d6 <hri_sercomusart_write_INTEN_RXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	2204      	movs	r2, #4
    25d2:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
	}
}
    25d4:	e002      	b.n	25dc <hri_sercomusart_write_INTEN_RXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	2204      	movs	r2, #4
    25da:	759a      	strb	r2, [r3, #22]
}
    25dc:	bf00      	nop
    25de:	370c      	adds	r7, #12
    25e0:	46bd      	mov	sp, r7
    25e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    25e6:	4770      	bx	lr

000025e8 <hri_sercomusart_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_ERROR) >> SERCOM_USART_INTENSET_ERROR_Pos;
}

static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    25e8:	b480      	push	{r7}
    25ea:	b083      	sub	sp, #12
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
    25f0:	460b      	mov	r3, r1
    25f2:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    25f4:	78fb      	ldrb	r3, [r7, #3]
    25f6:	f083 0301 	eor.w	r3, r3, #1
    25fa:	b2db      	uxtb	r3, r3
    25fc:	2b00      	cmp	r3, #0
    25fe:	d003      	beq.n	2608 <hri_sercomusart_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	2280      	movs	r2, #128	; 0x80
    2604:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
	}
}
    2606:	e002      	b.n	260e <hri_sercomusart_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	2280      	movs	r2, #128	; 0x80
    260c:	759a      	strb	r2, [r3, #22]
}
    260e:	bf00      	nop
    2610:	370c      	adds	r7, #12
    2612:	46bd      	mov	sp, r7
    2614:	f85d 7b04 	ldr.w	r7, [sp], #4
    2618:	4770      	bx	lr
	...

0000261c <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    261c:	b580      	push	{r7, lr}
    261e:	b082      	sub	sp, #8
    2620:	af00      	add	r7, sp, #0
    2622:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	681b      	ldr	r3, [r3, #0]
    2628:	f043 0202 	orr.w	r2, r3, #2
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2630:	2103      	movs	r1, #3
    2632:	6878      	ldr	r0, [r7, #4]
    2634:	4b02      	ldr	r3, [pc, #8]	; (2640 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    2636:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2638:	bf00      	nop
    263a:	3708      	adds	r7, #8
    263c:	46bd      	mov	sp, r7
    263e:	bd80      	pop	{r7, pc}
    2640:	0000238d 	.word	0x0000238d

00002644 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2644:	b580      	push	{r7, lr}
    2646:	b082      	sub	sp, #8
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	681b      	ldr	r3, [r3, #0]
    2650:	f023 0202 	bic.w	r2, r3, #2
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2658:	2103      	movs	r1, #3
    265a:	6878      	ldr	r0, [r7, #4]
    265c:	4b02      	ldr	r3, [pc, #8]	; (2668 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    265e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2660:	bf00      	nop
    2662:	3708      	adds	r7, #8
    2664:	46bd      	mov	sp, r7
    2666:	bd80      	pop	{r7, pc}
    2668:	0000238d 	.word	0x0000238d

0000266c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    266c:	b580      	push	{r7, lr}
    266e:	b084      	sub	sp, #16
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
    2674:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2676:	2103      	movs	r1, #3
    2678:	6878      	ldr	r0, [r7, #4]
    267a:	4b07      	ldr	r3, [pc, #28]	; (2698 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    267c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    267e:	687b      	ldr	r3, [r7, #4]
    2680:	681b      	ldr	r3, [r3, #0]
    2682:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2684:	68fa      	ldr	r2, [r7, #12]
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	4013      	ands	r3, r2
    268a:	60fb      	str	r3, [r7, #12]
	return tmp;
    268c:	68fb      	ldr	r3, [r7, #12]
}
    268e:	4618      	mov	r0, r3
    2690:	3710      	adds	r7, #16
    2692:	46bd      	mov	sp, r7
    2694:	bd80      	pop	{r7, pc}
    2696:	bf00      	nop
    2698:	0000238d 	.word	0x0000238d

0000269c <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    269c:	b580      	push	{r7, lr}
    269e:	b082      	sub	sp, #8
    26a0:	af00      	add	r7, sp, #0
    26a2:	6078      	str	r0, [r7, #4]
    26a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	683a      	ldr	r2, [r7, #0]
    26aa:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    26ac:	2103      	movs	r1, #3
    26ae:	6878      	ldr	r0, [r7, #4]
    26b0:	4b02      	ldr	r3, [pc, #8]	; (26bc <hri_sercomusart_write_CTRLA_reg+0x20>)
    26b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26b4:	bf00      	nop
    26b6:	3708      	adds	r7, #8
    26b8:	46bd      	mov	sp, r7
    26ba:	bd80      	pop	{r7, pc}
    26bc:	0000238d 	.word	0x0000238d

000026c0 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    26c0:	b580      	push	{r7, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
    26c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	683a      	ldr	r2, [r7, #0]
    26ce:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    26d0:	211f      	movs	r1, #31
    26d2:	6878      	ldr	r0, [r7, #4]
    26d4:	4b02      	ldr	r3, [pc, #8]	; (26e0 <hri_sercomusart_write_CTRLB_reg+0x20>)
    26d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26d8:	bf00      	nop
    26da:	3708      	adds	r7, #8
    26dc:	46bd      	mov	sp, r7
    26de:	bd80      	pop	{r7, pc}
    26e0:	0000238d 	.word	0x0000238d

000026e4 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    26e4:	b480      	push	{r7}
    26e6:	b083      	sub	sp, #12
    26e8:	af00      	add	r7, sp, #0
    26ea:	6078      	str	r0, [r7, #4]
    26ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	683a      	ldr	r2, [r7, #0]
    26f2:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26f4:	bf00      	nop
    26f6:	370c      	adds	r7, #12
    26f8:	46bd      	mov	sp, r7
    26fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    26fe:	4770      	bx	lr

00002700 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    2700:	b480      	push	{r7}
    2702:	b083      	sub	sp, #12
    2704:	af00      	add	r7, sp, #0
    2706:	6078      	str	r0, [r7, #4]
    2708:	460b      	mov	r3, r1
    270a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	887a      	ldrh	r2, [r7, #2]
    2710:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2712:	bf00      	nop
    2714:	370c      	adds	r7, #12
    2716:	46bd      	mov	sp, r7
    2718:	f85d 7b04 	ldr.w	r7, [sp], #4
    271c:	4770      	bx	lr

0000271e <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    271e:	b480      	push	{r7}
    2720:	b083      	sub	sp, #12
    2722:	af00      	add	r7, sp, #0
    2724:	6078      	str	r0, [r7, #4]
    2726:	460b      	mov	r3, r1
    2728:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	78fa      	ldrb	r2, [r7, #3]
    272e:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2730:	bf00      	nop
    2732:	370c      	adds	r7, #12
    2734:	46bd      	mov	sp, r7
    2736:	f85d 7b04 	ldr.w	r7, [sp], #4
    273a:	4770      	bx	lr

0000273c <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    273c:	b480      	push	{r7}
    273e:	b083      	sub	sp, #12
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    274c:	bf00      	nop
    274e:	370c      	adds	r7, #12
    2750:	46bd      	mov	sp, r7
    2752:	f85d 7b04 	ldr.w	r7, [sp], #4
    2756:	4770      	bx	lr

00002758 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    2758:	b480      	push	{r7}
    275a:	b083      	sub	sp, #12
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    2764:	4618      	mov	r0, r3
    2766:	370c      	adds	r7, #12
    2768:	46bd      	mov	sp, r7
    276a:	f85d 7b04 	ldr.w	r7, [sp], #4
    276e:	4770      	bx	lr

00002770 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    2770:	b480      	push	{r7}
    2772:	b083      	sub	sp, #12
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
    2778:	460b      	mov	r3, r1
    277a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	78fa      	ldrb	r2, [r7, #3]
    2780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2784:	bf00      	nop
    2786:	370c      	adds	r7, #12
    2788:	46bd      	mov	sp, r7
    278a:	f85d 7b04 	ldr.w	r7, [sp], #4
    278e:	4770      	bx	lr

00002790 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    2790:	b480      	push	{r7}
    2792:	b083      	sub	sp, #12
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	460b      	mov	r3, r1
    279a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	887a      	ldrh	r2, [r7, #2]
    27a0:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    27a2:	bf00      	nop
    27a4:	370c      	adds	r7, #12
    27a6:	46bd      	mov	sp, r7
    27a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ac:	4770      	bx	lr

000027ae <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    27ae:	b480      	push	{r7}
    27b0:	b083      	sub	sp, #12
    27b2:	af00      	add	r7, sp, #0
    27b4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	8b5b      	ldrh	r3, [r3, #26]
    27ba:	b29b      	uxth	r3, r3
}
    27bc:	4618      	mov	r0, r3
    27be:	370c      	adds	r7, #12
    27c0:	46bd      	mov	sp, r7
    27c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c6:	4770      	bx	lr

000027c8 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    27c8:	b580      	push	{r7, lr}
    27ca:	b086      	sub	sp, #24
    27cc:	af00      	add	r7, sp, #0
    27ce:	6078      	str	r0, [r7, #4]
    27d0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	2b00      	cmp	r3, #0
    27d6:	bf14      	ite	ne
    27d8:	2301      	movne	r3, #1
    27da:	2300      	moveq	r3, #0
    27dc:	b2db      	uxtb	r3, r3
    27de:	22cb      	movs	r2, #203	; 0xcb
    27e0:	491c      	ldr	r1, [pc, #112]	; (2854 <_usart_async_init+0x8c>)
    27e2:	4618      	mov	r0, r3
    27e4:	4b1c      	ldr	r3, [pc, #112]	; (2858 <_usart_async_init+0x90>)
    27e6:	4798      	blx	r3

	init_status = _usart_init(hw);
    27e8:	6838      	ldr	r0, [r7, #0]
    27ea:	4b1c      	ldr	r3, [pc, #112]	; (285c <_usart_async_init+0x94>)
    27ec:	4798      	blx	r3
    27ee:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    27f0:	68fb      	ldr	r3, [r7, #12]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d001      	beq.n	27fa <_usart_async_init+0x32>
		return init_status;
    27f6:	68fb      	ldr	r3, [r7, #12]
    27f8:	e027      	b.n	284a <_usart_async_init+0x82>
	}
	device->hw = hw;
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	683a      	ldr	r2, [r7, #0]
    27fe:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2800:	6879      	ldr	r1, [r7, #4]
    2802:	6838      	ldr	r0, [r7, #0]
    2804:	4b16      	ldr	r3, [pc, #88]	; (2860 <_usart_async_init+0x98>)
    2806:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2808:	6838      	ldr	r0, [r7, #0]
    280a:	4b16      	ldr	r3, [pc, #88]	; (2864 <_usart_async_init+0x9c>)
    280c:	4798      	blx	r3
    280e:	4603      	mov	r3, r0
    2810:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    2812:	2300      	movs	r3, #0
    2814:	613b      	str	r3, [r7, #16]
    2816:	e014      	b.n	2842 <_usart_async_init+0x7a>
		NVIC_DisableIRQ((IRQn_Type)irq);
    2818:	7dfb      	ldrb	r3, [r7, #23]
    281a:	b21b      	sxth	r3, r3
    281c:	4618      	mov	r0, r3
    281e:	4b12      	ldr	r3, [pc, #72]	; (2868 <_usart_async_init+0xa0>)
    2820:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    2822:	7dfb      	ldrb	r3, [r7, #23]
    2824:	b21b      	sxth	r3, r3
    2826:	4618      	mov	r0, r3
    2828:	4b10      	ldr	r3, [pc, #64]	; (286c <_usart_async_init+0xa4>)
    282a:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    282c:	7dfb      	ldrb	r3, [r7, #23]
    282e:	b21b      	sxth	r3, r3
    2830:	4618      	mov	r0, r3
    2832:	4b0f      	ldr	r3, [pc, #60]	; (2870 <_usart_async_init+0xa8>)
    2834:	4798      	blx	r3
		irq++;
    2836:	7dfb      	ldrb	r3, [r7, #23]
    2838:	3301      	adds	r3, #1
    283a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	3301      	adds	r3, #1
    2840:	613b      	str	r3, [r7, #16]
    2842:	693b      	ldr	r3, [r7, #16]
    2844:	2b03      	cmp	r3, #3
    2846:	d9e7      	bls.n	2818 <_usart_async_init+0x50>
	}
	return ERR_NONE;
    2848:	2300      	movs	r3, #0
}
    284a:	4618      	mov	r0, r3
    284c:	3718      	adds	r7, #24
    284e:	46bd      	mov	sp, r7
    2850:	bd80      	pop	{r7, pc}
    2852:	bf00      	nop
    2854:	0000593c 	.word	0x0000593c
    2858:	00001629 	.word	0x00001629
    285c:	00002b85 	.word	0x00002b85
    2860:	00002b59 	.word	0x00002b59
    2864:	00002d45 	.word	0x00002d45
    2868:	0000230d 	.word	0x0000230d
    286c:	00002351 	.word	0x00002351
    2870:	000022d1 	.word	0x000022d1

00002874 <_usart_async_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
    2874:	b580      	push	{r7, lr}
    2876:	b082      	sub	sp, #8
    2878:	af00      	add	r7, sp, #0
    287a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	699b      	ldr	r3, [r3, #24]
    2880:	4618      	mov	r0, r3
    2882:	4b03      	ldr	r3, [pc, #12]	; (2890 <_usart_async_enable+0x1c>)
    2884:	4798      	blx	r3
}
    2886:	bf00      	nop
    2888:	3708      	adds	r7, #8
    288a:	46bd      	mov	sp, r7
    288c:	bd80      	pop	{r7, pc}
    288e:	bf00      	nop
    2890:	0000261d 	.word	0x0000261d

00002894 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    2894:	b580      	push	{r7, lr}
    2896:	b082      	sub	sp, #8
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
    289c:	460b      	mov	r3, r1
    289e:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	699b      	ldr	r3, [r3, #24]
    28a4:	78fa      	ldrb	r2, [r7, #3]
    28a6:	4611      	mov	r1, r2
    28a8:	4618      	mov	r0, r3
    28aa:	4b03      	ldr	r3, [pc, #12]	; (28b8 <_usart_async_write_byte+0x24>)
    28ac:	4798      	blx	r3
}
    28ae:	bf00      	nop
    28b0:	3708      	adds	r7, #8
    28b2:	46bd      	mov	sp, r7
    28b4:	bd80      	pop	{r7, pc}
    28b6:	bf00      	nop
    28b8:	0000273d 	.word	0x0000273d

000028bc <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    28bc:	b580      	push	{r7, lr}
    28be:	b082      	sub	sp, #8
    28c0:	af00      	add	r7, sp, #0
    28c2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	699b      	ldr	r3, [r3, #24]
    28c8:	4618      	mov	r0, r3
    28ca:	4b03      	ldr	r3, [pc, #12]	; (28d8 <_usart_async_enable_byte_sent_irq+0x1c>)
    28cc:	4798      	blx	r3
}
    28ce:	bf00      	nop
    28d0:	3708      	adds	r7, #8
    28d2:	46bd      	mov	sp, r7
    28d4:	bd80      	pop	{r7, pc}
    28d6:	bf00      	nop
    28d8:	00002499 	.word	0x00002499

000028dc <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b082      	sub	sp, #8
    28e0:	af00      	add	r7, sp, #0
    28e2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	699b      	ldr	r3, [r3, #24]
    28e8:	4618      	mov	r0, r3
    28ea:	4b03      	ldr	r3, [pc, #12]	; (28f8 <_usart_async_enable_tx_done_irq+0x1c>)
    28ec:	4798      	blx	r3
}
    28ee:	bf00      	nop
    28f0:	3708      	adds	r7, #8
    28f2:	46bd      	mov	sp, r7
    28f4:	bd80      	pop	{r7, pc}
    28f6:	bf00      	nop
    28f8:	00002527 	.word	0x00002527

000028fc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    28fc:	b4b0      	push	{r4, r5, r7}
    28fe:	b08d      	sub	sp, #52	; 0x34
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2904:	4b13      	ldr	r3, [pc, #76]	; (2954 <_sercom_get_hardware_index+0x58>)
    2906:	f107 040c 	add.w	r4, r7, #12
    290a:	461d      	mov	r5, r3
    290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2910:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2918:	2300      	movs	r3, #0
    291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    291c:	e010      	b.n	2940 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2920:	009b      	lsls	r3, r3, #2
    2922:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2926:	4413      	add	r3, r2
    2928:	f853 3c24 	ldr.w	r3, [r3, #-36]
    292c:	461a      	mov	r2, r3
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	429a      	cmp	r2, r3
    2932:	d102      	bne.n	293a <_sercom_get_hardware_index+0x3e>
			return i;
    2934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2936:	b2db      	uxtb	r3, r3
    2938:	e006      	b.n	2948 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    293c:	3301      	adds	r3, #1
    293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2942:	2b07      	cmp	r3, #7
    2944:	d9eb      	bls.n	291e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    2946:	2300      	movs	r3, #0
}
    2948:	4618      	mov	r0, r3
    294a:	3734      	adds	r7, #52	; 0x34
    294c:	46bd      	mov	sp, r7
    294e:	bcb0      	pop	{r4, r5, r7}
    2950:	4770      	bx	lr
    2952:	bf00      	nop
    2954:	00005958 	.word	0x00005958

00002958 <_usart_async_set_irq_state>:
/**
 * \brief Enable/disable USART interrupt
 */
void _usart_async_set_irq_state(struct _usart_async_device *const device, const enum _usart_async_callback_type type,
                                const bool state)
{
    2958:	b580      	push	{r7, lr}
    295a:	b082      	sub	sp, #8
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
    2960:	460b      	mov	r3, r1
    2962:	70fb      	strb	r3, [r7, #3]
    2964:	4613      	mov	r3, r2
    2966:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	2b00      	cmp	r3, #0
    296c:	bf14      	ite	ne
    296e:	2301      	movne	r3, #1
    2970:	2300      	moveq	r3, #0
    2972:	b2db      	uxtb	r3, r3
    2974:	f240 222b 	movw	r2, #555	; 0x22b
    2978:	4918      	ldr	r1, [pc, #96]	; (29dc <_usart_async_set_irq_state+0x84>)
    297a:	4618      	mov	r0, r3
    297c:	4b18      	ldr	r3, [pc, #96]	; (29e0 <_usart_async_set_irq_state+0x88>)
    297e:	4798      	blx	r3

	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2980:	78fb      	ldrb	r3, [r7, #3]
    2982:	2b00      	cmp	r3, #0
    2984:	d002      	beq.n	298c <_usart_async_set_irq_state+0x34>
    2986:	78fb      	ldrb	r3, [r7, #3]
    2988:	2b02      	cmp	r3, #2
    298a:	d10e      	bne.n	29aa <_usart_async_set_irq_state+0x52>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	699b      	ldr	r3, [r3, #24]
    2990:	78ba      	ldrb	r2, [r7, #2]
    2992:	4611      	mov	r1, r2
    2994:	4618      	mov	r0, r3
    2996:	4b13      	ldr	r3, [pc, #76]	; (29e4 <_usart_async_set_irq_state+0x8c>)
    2998:	4798      	blx	r3
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	699b      	ldr	r3, [r3, #24]
    299e:	78ba      	ldrb	r2, [r7, #2]
    29a0:	4611      	mov	r1, r2
    29a2:	4618      	mov	r0, r3
    29a4:	4b10      	ldr	r3, [pc, #64]	; (29e8 <_usart_async_set_irq_state+0x90>)
    29a6:	4798      	blx	r3
	} else if (USART_ASYNC_RX_DONE == type) {
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
	} else if (USART_ASYNC_ERROR == type) {
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    29a8:	e014      	b.n	29d4 <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_RX_DONE == type) {
    29aa:	78fb      	ldrb	r3, [r7, #3]
    29ac:	2b01      	cmp	r3, #1
    29ae:	d107      	bne.n	29c0 <_usart_async_set_irq_state+0x68>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	699b      	ldr	r3, [r3, #24]
    29b4:	78ba      	ldrb	r2, [r7, #2]
    29b6:	4611      	mov	r1, r2
    29b8:	4618      	mov	r0, r3
    29ba:	4b0c      	ldr	r3, [pc, #48]	; (29ec <_usart_async_set_irq_state+0x94>)
    29bc:	4798      	blx	r3
}
    29be:	e009      	b.n	29d4 <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_ERROR == type) {
    29c0:	78fb      	ldrb	r3, [r7, #3]
    29c2:	2b03      	cmp	r3, #3
    29c4:	d106      	bne.n	29d4 <_usart_async_set_irq_state+0x7c>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	699b      	ldr	r3, [r3, #24]
    29ca:	78ba      	ldrb	r2, [r7, #2]
    29cc:	4611      	mov	r1, r2
    29ce:	4618      	mov	r0, r3
    29d0:	4b07      	ldr	r3, [pc, #28]	; (29f0 <_usart_async_set_irq_state+0x98>)
    29d2:	4798      	blx	r3
}
    29d4:	bf00      	nop
    29d6:	3708      	adds	r7, #8
    29d8:	46bd      	mov	sp, r7
    29da:	bd80      	pop	{r7, pc}
    29dc:	0000593c 	.word	0x0000593c
    29e0:	00001629 	.word	0x00001629
    29e4:	000024db 	.word	0x000024db
    29e8:	0000256b 	.word	0x0000256b
    29ec:	000025b7 	.word	0x000025b7
    29f0:	000025e9 	.word	0x000025e9

000029f4 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    29f4:	b590      	push	{r4, r7, lr}
    29f6:	b085      	sub	sp, #20
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	699b      	ldr	r3, [r3, #24]
    2a00:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2a02:	68f8      	ldr	r0, [r7, #12]
    2a04:	4b2f      	ldr	r3, [pc, #188]	; (2ac4 <_sercom_usart_interrupt_handler+0xd0>)
    2a06:	4798      	blx	r3
    2a08:	4603      	mov	r3, r0
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d00d      	beq.n	2a2a <_sercom_usart_interrupt_handler+0x36>
    2a0e:	68f8      	ldr	r0, [r7, #12]
    2a10:	4b2d      	ldr	r3, [pc, #180]	; (2ac8 <_sercom_usart_interrupt_handler+0xd4>)
    2a12:	4798      	blx	r3
    2a14:	4603      	mov	r3, r0
    2a16:	2b00      	cmp	r3, #0
    2a18:	d007      	beq.n	2a2a <_sercom_usart_interrupt_handler+0x36>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    2a1a:	68f8      	ldr	r0, [r7, #12]
    2a1c:	4b2b      	ldr	r3, [pc, #172]	; (2acc <_sercom_usart_interrupt_handler+0xd8>)
    2a1e:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	6878      	ldr	r0, [r7, #4]
    2a26:	4798      	blx	r3
    2a28:	e049      	b.n	2abe <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2a2a:	68f8      	ldr	r0, [r7, #12]
    2a2c:	4b28      	ldr	r3, [pc, #160]	; (2ad0 <_sercom_usart_interrupt_handler+0xdc>)
    2a2e:	4798      	blx	r3
    2a30:	4603      	mov	r3, r0
    2a32:	2b00      	cmp	r3, #0
    2a34:	d00d      	beq.n	2a52 <_sercom_usart_interrupt_handler+0x5e>
    2a36:	68f8      	ldr	r0, [r7, #12]
    2a38:	4b26      	ldr	r3, [pc, #152]	; (2ad4 <_sercom_usart_interrupt_handler+0xe0>)
    2a3a:	4798      	blx	r3
    2a3c:	4603      	mov	r3, r0
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d007      	beq.n	2a52 <_sercom_usart_interrupt_handler+0x5e>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    2a42:	68f8      	ldr	r0, [r7, #12]
    2a44:	4b24      	ldr	r3, [pc, #144]	; (2ad8 <_sercom_usart_interrupt_handler+0xe4>)
    2a46:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	689b      	ldr	r3, [r3, #8]
    2a4c:	6878      	ldr	r0, [r7, #4]
    2a4e:	4798      	blx	r3
    2a50:	e035      	b.n	2abe <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2a52:	68f8      	ldr	r0, [r7, #12]
    2a54:	4b21      	ldr	r3, [pc, #132]	; (2adc <_sercom_usart_interrupt_handler+0xe8>)
    2a56:	4798      	blx	r3
    2a58:	4603      	mov	r3, r0
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d017      	beq.n	2a8e <_sercom_usart_interrupt_handler+0x9a>
		if (hri_sercomusart_read_STATUS_reg(hw)
    2a5e:	68f8      	ldr	r0, [r7, #12]
    2a60:	4b1f      	ldr	r3, [pc, #124]	; (2ae0 <_sercom_usart_interrupt_handler+0xec>)
    2a62:	4798      	blx	r3
    2a64:	4603      	mov	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    2a66:	f003 0337 	and.w	r3, r3, #55	; 0x37
		if (hri_sercomusart_read_STATUS_reg(hw)
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d004      	beq.n	2a78 <_sercom_usart_interrupt_handler+0x84>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    2a6e:	21ff      	movs	r1, #255	; 0xff
    2a70:	68f8      	ldr	r0, [r7, #12]
    2a72:	4b1c      	ldr	r3, [pc, #112]	; (2ae4 <_sercom_usart_interrupt_handler+0xf0>)
    2a74:	4798      	blx	r3
			return;
    2a76:	e022      	b.n	2abe <_sercom_usart_interrupt_handler+0xca>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	685c      	ldr	r4, [r3, #4]
    2a7c:	68f8      	ldr	r0, [r7, #12]
    2a7e:	4b1a      	ldr	r3, [pc, #104]	; (2ae8 <_sercom_usart_interrupt_handler+0xf4>)
    2a80:	4798      	blx	r3
    2a82:	4603      	mov	r3, r0
    2a84:	b2db      	uxtb	r3, r3
    2a86:	4619      	mov	r1, r3
    2a88:	6878      	ldr	r0, [r7, #4]
    2a8a:	47a0      	blx	r4
    2a8c:	e017      	b.n	2abe <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2a8e:	68f8      	ldr	r0, [r7, #12]
    2a90:	4b16      	ldr	r3, [pc, #88]	; (2aec <_sercom_usart_interrupt_handler+0xf8>)
    2a92:	4798      	blx	r3
    2a94:	4603      	mov	r3, r0
    2a96:	2b00      	cmp	r3, #0
    2a98:	d011      	beq.n	2abe <_sercom_usart_interrupt_handler+0xca>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    2a9a:	68f8      	ldr	r0, [r7, #12]
    2a9c:	4b14      	ldr	r3, [pc, #80]	; (2af0 <_sercom_usart_interrupt_handler+0xfc>)
    2a9e:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	68db      	ldr	r3, [r3, #12]
    2aa4:	6878      	ldr	r0, [r7, #4]
    2aa6:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    2aa8:	68f8      	ldr	r0, [r7, #12]
    2aaa:	4b0d      	ldr	r3, [pc, #52]	; (2ae0 <_sercom_usart_interrupt_handler+0xec>)
    2aac:	4798      	blx	r3
    2aae:	4603      	mov	r3, r0
    2ab0:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    2ab2:	68bb      	ldr	r3, [r7, #8]
    2ab4:	b29b      	uxth	r3, r3
    2ab6:	4619      	mov	r1, r3
    2ab8:	68f8      	ldr	r0, [r7, #12]
    2aba:	4b0a      	ldr	r3, [pc, #40]	; (2ae4 <_sercom_usart_interrupt_handler+0xf0>)
    2abc:	4798      	blx	r3
	}
}
    2abe:	3714      	adds	r7, #20
    2ac0:	46bd      	mov	sp, r7
    2ac2:	bd90      	pop	{r4, r7, pc}
    2ac4:	000023d9 	.word	0x000023d9
    2ac8:	000024b3 	.word	0x000024b3
    2acc:	0000250d 	.word	0x0000250d
    2ad0:	00002401 	.word	0x00002401
    2ad4:	00002541 	.word	0x00002541
    2ad8:	0000259d 	.word	0x0000259d
    2adc:	0000242b 	.word	0x0000242b
    2ae0:	000027af 	.word	0x000027af
    2ae4:	00002791 	.word	0x00002791
    2ae8:	00002759 	.word	0x00002759
    2aec:	00002455 	.word	0x00002455
    2af0:	0000247f 	.word	0x0000247f

00002af4 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    2af4:	b580      	push	{r7, lr}
    2af6:	b084      	sub	sp, #16
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2afc:	6878      	ldr	r0, [r7, #4]
    2afe:	4b12      	ldr	r3, [pc, #72]	; (2b48 <_get_sercom_index+0x54>)
    2b00:	4798      	blx	r3
    2b02:	4603      	mov	r3, r0
    2b04:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2b06:	2300      	movs	r3, #0
    2b08:	73fb      	strb	r3, [r7, #15]
    2b0a:	e00f      	b.n	2b2c <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    2b0c:	7bfa      	ldrb	r2, [r7, #15]
    2b0e:	490f      	ldr	r1, [pc, #60]	; (2b4c <_get_sercom_index+0x58>)
    2b10:	4613      	mov	r3, r2
    2b12:	005b      	lsls	r3, r3, #1
    2b14:	4413      	add	r3, r2
    2b16:	00db      	lsls	r3, r3, #3
    2b18:	440b      	add	r3, r1
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	7bba      	ldrb	r2, [r7, #14]
    2b1e:	429a      	cmp	r2, r3
    2b20:	d101      	bne.n	2b26 <_get_sercom_index+0x32>
			return i;
    2b22:	7bfb      	ldrb	r3, [r7, #15]
    2b24:	e00c      	b.n	2b40 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2b26:	7bfb      	ldrb	r3, [r7, #15]
    2b28:	3301      	adds	r3, #1
    2b2a:	73fb      	strb	r3, [r7, #15]
    2b2c:	7bfb      	ldrb	r3, [r7, #15]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d0ec      	beq.n	2b0c <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    2b32:	f240 226b 	movw	r2, #619	; 0x26b
    2b36:	4906      	ldr	r1, [pc, #24]	; (2b50 <_get_sercom_index+0x5c>)
    2b38:	2000      	movs	r0, #0
    2b3a:	4b06      	ldr	r3, [pc, #24]	; (2b54 <_get_sercom_index+0x60>)
    2b3c:	4798      	blx	r3
	return 0;
    2b3e:	2300      	movs	r3, #0
}
    2b40:	4618      	mov	r0, r3
    2b42:	3710      	adds	r7, #16
    2b44:	46bd      	mov	sp, r7
    2b46:	bd80      	pop	{r7, pc}
    2b48:	000028fd 	.word	0x000028fd
    2b4c:	20000000 	.word	0x20000000
    2b50:	0000593c 	.word	0x0000593c
    2b54:	00001629 	.word	0x00001629

00002b58 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    2b58:	b480      	push	{r7}
    2b5a:	b083      	sub	sp, #12
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
    2b60:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM2) {
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	4a05      	ldr	r2, [pc, #20]	; (2b7c <_sercom_init_irq_param+0x24>)
    2b66:	4293      	cmp	r3, r2
    2b68:	d102      	bne.n	2b70 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    2b6a:	4a05      	ldr	r2, [pc, #20]	; (2b80 <_sercom_init_irq_param+0x28>)
    2b6c:	683b      	ldr	r3, [r7, #0]
    2b6e:	6013      	str	r3, [r2, #0]
	}
}
    2b70:	bf00      	nop
    2b72:	370c      	adds	r7, #12
    2b74:	46bd      	mov	sp, r7
    2b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b7a:	4770      	bx	lr
    2b7c:	41012000 	.word	0x41012000
    2b80:	200000ec 	.word	0x200000ec

00002b84 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2b84:	b580      	push	{r7, lr}
    2b86:	b084      	sub	sp, #16
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    2b8c:	6878      	ldr	r0, [r7, #4]
    2b8e:	4b61      	ldr	r3, [pc, #388]	; (2d14 <_usart_init+0x190>)
    2b90:	4798      	blx	r3
    2b92:	4603      	mov	r3, r0
    2b94:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2b96:	2101      	movs	r1, #1
    2b98:	6878      	ldr	r0, [r7, #4]
    2b9a:	4b5f      	ldr	r3, [pc, #380]	; (2d18 <_usart_init+0x194>)
    2b9c:	4798      	blx	r3
    2b9e:	4603      	mov	r3, r0
    2ba0:	f083 0301 	eor.w	r3, r3, #1
    2ba4:	b2db      	uxtb	r3, r3
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d020      	beq.n	2bec <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2baa:	7bfa      	ldrb	r2, [r7, #15]
    2bac:	495b      	ldr	r1, [pc, #364]	; (2d1c <_usart_init+0x198>)
    2bae:	4613      	mov	r3, r2
    2bb0:	005b      	lsls	r3, r3, #1
    2bb2:	4413      	add	r3, r2
    2bb4:	00db      	lsls	r3, r3, #3
    2bb6:	440b      	add	r3, r1
    2bb8:	3304      	adds	r3, #4
    2bba:	681b      	ldr	r3, [r3, #0]
    2bbc:	f003 031c 	and.w	r3, r3, #28
    2bc0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2bc2:	2102      	movs	r1, #2
    2bc4:	6878      	ldr	r0, [r7, #4]
    2bc6:	4b56      	ldr	r3, [pc, #344]	; (2d20 <_usart_init+0x19c>)
    2bc8:	4798      	blx	r3
    2bca:	4603      	mov	r3, r0
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d006      	beq.n	2bde <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2bd0:	6878      	ldr	r0, [r7, #4]
    2bd2:	4b54      	ldr	r3, [pc, #336]	; (2d24 <_usart_init+0x1a0>)
    2bd4:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2bd6:	2102      	movs	r1, #2
    2bd8:	6878      	ldr	r0, [r7, #4]
    2bda:	4b53      	ldr	r3, [pc, #332]	; (2d28 <_usart_init+0x1a4>)
    2bdc:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2bde:	68bb      	ldr	r3, [r7, #8]
    2be0:	f043 0301 	orr.w	r3, r3, #1
    2be4:	4619      	mov	r1, r3
    2be6:	6878      	ldr	r0, [r7, #4]
    2be8:	4b50      	ldr	r3, [pc, #320]	; (2d2c <_usart_init+0x1a8>)
    2bea:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2bec:	2101      	movs	r1, #1
    2bee:	6878      	ldr	r0, [r7, #4]
    2bf0:	4b4d      	ldr	r3, [pc, #308]	; (2d28 <_usart_init+0x1a4>)
    2bf2:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2bf4:	7bfa      	ldrb	r2, [r7, #15]
    2bf6:	4949      	ldr	r1, [pc, #292]	; (2d1c <_usart_init+0x198>)
    2bf8:	4613      	mov	r3, r2
    2bfa:	005b      	lsls	r3, r3, #1
    2bfc:	4413      	add	r3, r2
    2bfe:	00db      	lsls	r3, r3, #3
    2c00:	440b      	add	r3, r1
    2c02:	3304      	adds	r3, #4
    2c04:	681b      	ldr	r3, [r3, #0]
    2c06:	4619      	mov	r1, r3
    2c08:	6878      	ldr	r0, [r7, #4]
    2c0a:	4b48      	ldr	r3, [pc, #288]	; (2d2c <_usart_init+0x1a8>)
    2c0c:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2c0e:	7bfa      	ldrb	r2, [r7, #15]
    2c10:	4942      	ldr	r1, [pc, #264]	; (2d1c <_usart_init+0x198>)
    2c12:	4613      	mov	r3, r2
    2c14:	005b      	lsls	r3, r3, #1
    2c16:	4413      	add	r3, r2
    2c18:	00db      	lsls	r3, r3, #3
    2c1a:	440b      	add	r3, r1
    2c1c:	3308      	adds	r3, #8
    2c1e:	681b      	ldr	r3, [r3, #0]
    2c20:	4619      	mov	r1, r3
    2c22:	6878      	ldr	r0, [r7, #4]
    2c24:	4b42      	ldr	r3, [pc, #264]	; (2d30 <_usart_init+0x1ac>)
    2c26:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2c28:	7bfa      	ldrb	r2, [r7, #15]
    2c2a:	493c      	ldr	r1, [pc, #240]	; (2d1c <_usart_init+0x198>)
    2c2c:	4613      	mov	r3, r2
    2c2e:	005b      	lsls	r3, r3, #1
    2c30:	4413      	add	r3, r2
    2c32:	00db      	lsls	r3, r3, #3
    2c34:	440b      	add	r3, r1
    2c36:	330c      	adds	r3, #12
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	4619      	mov	r1, r3
    2c3c:	6878      	ldr	r0, [r7, #4]
    2c3e:	4b3d      	ldr	r3, [pc, #244]	; (2d34 <_usart_init+0x1b0>)
    2c40:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2c42:	7bfa      	ldrb	r2, [r7, #15]
    2c44:	4935      	ldr	r1, [pc, #212]	; (2d1c <_usart_init+0x198>)
    2c46:	4613      	mov	r3, r2
    2c48:	005b      	lsls	r3, r3, #1
    2c4a:	4413      	add	r3, r2
    2c4c:	00db      	lsls	r3, r3, #3
    2c4e:	440b      	add	r3, r1
    2c50:	3304      	adds	r3, #4
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d10c      	bne.n	2c76 <_usart_init+0xf2>
    2c5c:	7bfa      	ldrb	r2, [r7, #15]
    2c5e:	492f      	ldr	r1, [pc, #188]	; (2d1c <_usart_init+0x198>)
    2c60:	4613      	mov	r3, r2
    2c62:	005b      	lsls	r3, r3, #1
    2c64:	4413      	add	r3, r2
    2c66:	00db      	lsls	r3, r3, #3
    2c68:	440b      	add	r3, r1
    2c6a:	3304      	adds	r3, #4
    2c6c:	681b      	ldr	r3, [r3, #0]
    2c6e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    2c72:	2b00      	cmp	r3, #0
    2c74:	d022      	beq.n	2cbc <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2c76:	7bfa      	ldrb	r2, [r7, #15]
    2c78:	4928      	ldr	r1, [pc, #160]	; (2d1c <_usart_init+0x198>)
    2c7a:	4613      	mov	r3, r2
    2c7c:	005b      	lsls	r3, r3, #1
    2c7e:	4413      	add	r3, r2
    2c80:	00db      	lsls	r3, r3, #3
    2c82:	440b      	add	r3, r1
    2c84:	3310      	adds	r3, #16
    2c86:	881b      	ldrh	r3, [r3, #0]
    2c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
    2c8c:	b299      	uxth	r1, r3
    2c8e:	687a      	ldr	r2, [r7, #4]
    2c90:	8993      	ldrh	r3, [r2, #12]
    2c92:	f361 030c 	bfi	r3, r1, #0, #13
    2c96:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2c98:	7bfa      	ldrb	r2, [r7, #15]
    2c9a:	4920      	ldr	r1, [pc, #128]	; (2d1c <_usart_init+0x198>)
    2c9c:	4613      	mov	r3, r2
    2c9e:	005b      	lsls	r3, r3, #1
    2ca0:	4413      	add	r3, r2
    2ca2:	00db      	lsls	r3, r3, #3
    2ca4:	440b      	add	r3, r1
    2ca6:	3312      	adds	r3, #18
    2ca8:	781b      	ldrb	r3, [r3, #0]
    2caa:	f003 0307 	and.w	r3, r3, #7
    2cae:	b2d9      	uxtb	r1, r3
    2cb0:	687a      	ldr	r2, [r7, #4]
    2cb2:	8993      	ldrh	r3, [r2, #12]
    2cb4:	f361 334f 	bfi	r3, r1, #13, #3
    2cb8:	8193      	strh	r3, [r2, #12]
    2cba:	e00c      	b.n	2cd6 <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2cbc:	7bfa      	ldrb	r2, [r7, #15]
    2cbe:	4917      	ldr	r1, [pc, #92]	; (2d1c <_usart_init+0x198>)
    2cc0:	4613      	mov	r3, r2
    2cc2:	005b      	lsls	r3, r3, #1
    2cc4:	4413      	add	r3, r2
    2cc6:	00db      	lsls	r3, r3, #3
    2cc8:	440b      	add	r3, r1
    2cca:	3310      	adds	r3, #16
    2ccc:	881b      	ldrh	r3, [r3, #0]
    2cce:	4619      	mov	r1, r3
    2cd0:	6878      	ldr	r0, [r7, #4]
    2cd2:	4b19      	ldr	r3, [pc, #100]	; (2d38 <_usart_init+0x1b4>)
    2cd4:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2cd6:	7bfa      	ldrb	r2, [r7, #15]
    2cd8:	4910      	ldr	r1, [pc, #64]	; (2d1c <_usart_init+0x198>)
    2cda:	4613      	mov	r3, r2
    2cdc:	005b      	lsls	r3, r3, #1
    2cde:	4413      	add	r3, r2
    2ce0:	00db      	lsls	r3, r3, #3
    2ce2:	440b      	add	r3, r1
    2ce4:	3313      	adds	r3, #19
    2ce6:	781b      	ldrb	r3, [r3, #0]
    2ce8:	4619      	mov	r1, r3
    2cea:	6878      	ldr	r0, [r7, #4]
    2cec:	4b13      	ldr	r3, [pc, #76]	; (2d3c <_usart_init+0x1b8>)
    2cee:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2cf0:	7bfa      	ldrb	r2, [r7, #15]
    2cf2:	490a      	ldr	r1, [pc, #40]	; (2d1c <_usart_init+0x198>)
    2cf4:	4613      	mov	r3, r2
    2cf6:	005b      	lsls	r3, r3, #1
    2cf8:	4413      	add	r3, r2
    2cfa:	00db      	lsls	r3, r3, #3
    2cfc:	440b      	add	r3, r1
    2cfe:	3314      	adds	r3, #20
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	4619      	mov	r1, r3
    2d04:	6878      	ldr	r0, [r7, #4]
    2d06:	4b0e      	ldr	r3, [pc, #56]	; (2d40 <_usart_init+0x1bc>)
    2d08:	4798      	blx	r3

	return ERR_NONE;
    2d0a:	2300      	movs	r3, #0
}
    2d0c:	4618      	mov	r0, r3
    2d0e:	3710      	adds	r7, #16
    2d10:	46bd      	mov	sp, r7
    2d12:	bd80      	pop	{r7, pc}
    2d14:	00002af5 	.word	0x00002af5
    2d18:	000023b1 	.word	0x000023b1
    2d1c:	20000000 	.word	0x20000000
    2d20:	0000266d 	.word	0x0000266d
    2d24:	00002645 	.word	0x00002645
    2d28:	0000238d 	.word	0x0000238d
    2d2c:	0000269d 	.word	0x0000269d
    2d30:	000026c1 	.word	0x000026c1
    2d34:	000026e5 	.word	0x000026e5
    2d38:	00002701 	.word	0x00002701
    2d3c:	0000271f 	.word	0x0000271f
    2d40:	00002771 	.word	0x00002771

00002d44 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2d44:	b580      	push	{r7, lr}
    2d46:	b082      	sub	sp, #8
    2d48:	af00      	add	r7, sp, #0
    2d4a:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2d4c:	6878      	ldr	r0, [r7, #4]
    2d4e:	4b05      	ldr	r3, [pc, #20]	; (2d64 <_sercom_get_irq_num+0x20>)
    2d50:	4798      	blx	r3
    2d52:	4603      	mov	r3, r0
    2d54:	009b      	lsls	r3, r3, #2
    2d56:	b2db      	uxtb	r3, r3
    2d58:	332e      	adds	r3, #46	; 0x2e
    2d5a:	b2db      	uxtb	r3, r3
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	3708      	adds	r7, #8
    2d60:	46bd      	mov	sp, r7
    2d62:	bd80      	pop	{r7, pc}
    2d64:	000028fd 	.word	0x000028fd

00002d68 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <SERCOM2_0_Handler+0x14>)
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	4618      	mov	r0, r3
    2d72:	4b03      	ldr	r3, [pc, #12]	; (2d80 <SERCOM2_0_Handler+0x18>)
    2d74:	4798      	blx	r3
}
    2d76:	bf00      	nop
    2d78:	bd80      	pop	{r7, pc}
    2d7a:	bf00      	nop
    2d7c:	200000ec 	.word	0x200000ec
    2d80:	000029f5 	.word	0x000029f5

00002d84 <SERCOM2_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    2d84:	b580      	push	{r7, lr}
    2d86:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2d88:	4b03      	ldr	r3, [pc, #12]	; (2d98 <SERCOM2_1_Handler+0x14>)
    2d8a:	681b      	ldr	r3, [r3, #0]
    2d8c:	4618      	mov	r0, r3
    2d8e:	4b03      	ldr	r3, [pc, #12]	; (2d9c <SERCOM2_1_Handler+0x18>)
    2d90:	4798      	blx	r3
}
    2d92:	bf00      	nop
    2d94:	bd80      	pop	{r7, pc}
    2d96:	bf00      	nop
    2d98:	200000ec 	.word	0x200000ec
    2d9c:	000029f5 	.word	0x000029f5

00002da0 <SERCOM2_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2da4:	4b03      	ldr	r3, [pc, #12]	; (2db4 <SERCOM2_2_Handler+0x14>)
    2da6:	681b      	ldr	r3, [r3, #0]
    2da8:	4618      	mov	r0, r3
    2daa:	4b03      	ldr	r3, [pc, #12]	; (2db8 <SERCOM2_2_Handler+0x18>)
    2dac:	4798      	blx	r3
}
    2dae:	bf00      	nop
    2db0:	bd80      	pop	{r7, pc}
    2db2:	bf00      	nop
    2db4:	200000ec 	.word	0x200000ec
    2db8:	000029f5 	.word	0x000029f5

00002dbc <SERCOM2_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    2dbc:	b580      	push	{r7, lr}
    2dbe:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2dc0:	4b03      	ldr	r3, [pc, #12]	; (2dd0 <SERCOM2_3_Handler+0x14>)
    2dc2:	681b      	ldr	r3, [r3, #0]
    2dc4:	4618      	mov	r0, r3
    2dc6:	4b03      	ldr	r3, [pc, #12]	; (2dd4 <SERCOM2_3_Handler+0x18>)
    2dc8:	4798      	blx	r3
}
    2dca:	bf00      	nop
    2dcc:	bd80      	pop	{r7, pc}
    2dce:	bf00      	nop
    2dd0:	200000ec 	.word	0x200000ec
    2dd4:	000029f5 	.word	0x000029f5

00002dd8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2dd8:	b480      	push	{r7}
    2dda:	b083      	sub	sp, #12
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6078      	str	r0, [r7, #4]
    2de0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2de2:	bf00      	nop
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	689a      	ldr	r2, [r3, #8]
    2de8:	683b      	ldr	r3, [r7, #0]
    2dea:	4013      	ands	r3, r2
    2dec:	2b00      	cmp	r3, #0
    2dee:	d1f9      	bne.n	2de4 <hri_tcc_wait_for_sync+0xc>
	};
}
    2df0:	bf00      	nop
    2df2:	370c      	adds	r7, #12
    2df4:	46bd      	mov	sp, r7
    2df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dfa:	4770      	bx	lr

00002dfc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2dfc:	b480      	push	{r7}
    2dfe:	b083      	sub	sp, #12
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
    2e04:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    2e06:	687b      	ldr	r3, [r7, #4]
    2e08:	689a      	ldr	r2, [r3, #8]
    2e0a:	683b      	ldr	r3, [r7, #0]
    2e0c:	4013      	ands	r3, r2
    2e0e:	2b00      	cmp	r3, #0
    2e10:	bf14      	ite	ne
    2e12:	2301      	movne	r3, #1
    2e14:	2300      	moveq	r3, #0
    2e16:	b2db      	uxtb	r3, r3
}
    2e18:	4618      	mov	r0, r3
    2e1a:	370c      	adds	r7, #12
    2e1c:	46bd      	mov	sp, r7
    2e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e22:	4770      	bx	lr

00002e24 <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    2e24:	b580      	push	{r7, lr}
    2e26:	b084      	sub	sp, #16
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
    2e2c:	460b      	mov	r3, r1
    2e2e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	f023 0302 	bic.w	r3, r3, #2
    2e3c:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    2e3e:	78fb      	ldrb	r3, [r7, #3]
    2e40:	005b      	lsls	r3, r3, #1
    2e42:	461a      	mov	r2, r3
    2e44:	68fb      	ldr	r3, [r7, #12]
    2e46:	4313      	orrs	r3, r2
    2e48:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	68fa      	ldr	r2, [r7, #12]
    2e4e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2e50:	2103      	movs	r1, #3
    2e52:	6878      	ldr	r0, [r7, #4]
    2e54:	4b02      	ldr	r3, [pc, #8]	; (2e60 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    2e56:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2e58:	bf00      	nop
    2e5a:	3710      	adds	r7, #16
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}
    2e60:	00002dd9 	.word	0x00002dd9

00002e64 <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2e64:	b580      	push	{r7, lr}
    2e66:	b082      	sub	sp, #8
    2e68:	af00      	add	r7, sp, #0
    2e6a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	681b      	ldr	r3, [r3, #0]
    2e70:	f023 0202 	bic.w	r2, r3, #2
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2e78:	2103      	movs	r1, #3
    2e7a:	6878      	ldr	r0, [r7, #4]
    2e7c:	4b02      	ldr	r3, [pc, #8]	; (2e88 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    2e7e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2e80:	bf00      	nop
    2e82:	3708      	adds	r7, #8
    2e84:	46bd      	mov	sp, r7
    2e86:	bd80      	pop	{r7, pc}
    2e88:	00002dd9 	.word	0x00002dd9

00002e8c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b084      	sub	sp, #16
    2e90:	af00      	add	r7, sp, #0
    2e92:	6078      	str	r0, [r7, #4]
    2e94:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2e96:	2103      	movs	r1, #3
    2e98:	6878      	ldr	r0, [r7, #4]
    2e9a:	4b07      	ldr	r3, [pc, #28]	; (2eb8 <hri_tcc_get_CTRLA_reg+0x2c>)
    2e9c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	681b      	ldr	r3, [r3, #0]
    2ea2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2ea4:	68fa      	ldr	r2, [r7, #12]
    2ea6:	683b      	ldr	r3, [r7, #0]
    2ea8:	4013      	ands	r3, r2
    2eaa:	60fb      	str	r3, [r7, #12]
	return tmp;
    2eac:	68fb      	ldr	r3, [r7, #12]
}
    2eae:	4618      	mov	r0, r3
    2eb0:	3710      	adds	r7, #16
    2eb2:	46bd      	mov	sp, r7
    2eb4:	bd80      	pop	{r7, pc}
    2eb6:	bf00      	nop
    2eb8:	00002dd9 	.word	0x00002dd9

00002ebc <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b082      	sub	sp, #8
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
    2ec4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	683a      	ldr	r2, [r7, #0]
    2eca:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2ecc:	2103      	movs	r1, #3
    2ece:	6878      	ldr	r0, [r7, #4]
    2ed0:	4b02      	ldr	r3, [pc, #8]	; (2edc <hri_tcc_write_CTRLA_reg+0x20>)
    2ed2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2ed4:	bf00      	nop
    2ed6:	3708      	adds	r7, #8
    2ed8:	46bd      	mov	sp, r7
    2eda:	bd80      	pop	{r7, pc}
    2edc:	00002dd9 	.word	0x00002dd9

00002ee0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    2ee0:	b480      	push	{r7}
    2ee2:	b083      	sub	sp, #12
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
    2ee8:	460b      	mov	r3, r1
    2eea:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	78fa      	ldrb	r2, [r7, #3]
    2ef0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    2ef2:	bf00      	nop
    2ef4:	370c      	adds	r7, #12
    2ef6:	46bd      	mov	sp, r7
    2ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2efc:	4770      	bx	lr
	...

00002f00 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b082      	sub	sp, #8
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
    2f08:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	683a      	ldr	r2, [r7, #0]
    2f0e:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    2f10:	f643 71ff 	movw	r1, #16383	; 0x3fff
    2f14:	6878      	ldr	r0, [r7, #4]
    2f16:	4b03      	ldr	r3, [pc, #12]	; (2f24 <hri_tcc_write_WAVE_reg+0x24>)
    2f18:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2f1a:	bf00      	nop
    2f1c:	3708      	adds	r7, #8
    2f1e:	46bd      	mov	sp, r7
    2f20:	bd80      	pop	{r7, pc}
    2f22:	bf00      	nop
    2f24:	00002dd9 	.word	0x00002dd9

00002f28 <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    2f2c:	2101      	movs	r1, #1
    2f2e:	4819      	ldr	r0, [pc, #100]	; (2f94 <PWM_0_init+0x6c>)
    2f30:	4b19      	ldr	r3, [pc, #100]	; (2f98 <PWM_0_init+0x70>)
    2f32:	4798      	blx	r3
    2f34:	4603      	mov	r3, r0
    2f36:	f083 0301 	eor.w	r3, r3, #1
    2f3a:	b2db      	uxtb	r3, r3
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d011      	beq.n	2f64 <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    2f40:	2102      	movs	r1, #2
    2f42:	4814      	ldr	r0, [pc, #80]	; (2f94 <PWM_0_init+0x6c>)
    2f44:	4b15      	ldr	r3, [pc, #84]	; (2f9c <PWM_0_init+0x74>)
    2f46:	4798      	blx	r3
    2f48:	4603      	mov	r3, r0
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d006      	beq.n	2f5c <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    2f4e:	4811      	ldr	r0, [pc, #68]	; (2f94 <PWM_0_init+0x6c>)
    2f50:	4b13      	ldr	r3, [pc, #76]	; (2fa0 <PWM_0_init+0x78>)
    2f52:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    2f54:	2102      	movs	r1, #2
    2f56:	480f      	ldr	r0, [pc, #60]	; (2f94 <PWM_0_init+0x6c>)
    2f58:	4b12      	ldr	r3, [pc, #72]	; (2fa4 <PWM_0_init+0x7c>)
    2f5a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    2f5c:	2101      	movs	r1, #1
    2f5e:	480d      	ldr	r0, [pc, #52]	; (2f94 <PWM_0_init+0x6c>)
    2f60:	4b11      	ldr	r3, [pc, #68]	; (2fa8 <PWM_0_init+0x80>)
    2f62:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    2f64:	2101      	movs	r1, #1
    2f66:	480b      	ldr	r0, [pc, #44]	; (2f94 <PWM_0_init+0x6c>)
    2f68:	4b0e      	ldr	r3, [pc, #56]	; (2fa4 <PWM_0_init+0x7c>)
    2f6a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    2f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2f70:	4808      	ldr	r0, [pc, #32]	; (2f94 <PWM_0_init+0x6c>)
    2f72:	4b0d      	ldr	r3, [pc, #52]	; (2fa8 <PWM_0_init+0x80>)
    2f74:	4798      	blx	r3
	//		 | 0 << TCC_DRVCTRL_NRE3_Pos /* Non-Recoverable State 3 Output Enable: disabled */
	//		 | 0 << TCC_DRVCTRL_NRE2_Pos /* Non-Recoverable State 2 Output Enable: disabled */
	//		 | 0 << TCC_DRVCTRL_NRE1_Pos /* Non-Recoverable State 1 Output Enable: disabled */
	//		 | 0 << TCC_DRVCTRL_NRE0_Pos); /* Non-Recoverable State 0 Output Enable: disabled */

	hri_tcc_write_DBGCTRL_reg(TCC0,
    2f76:	2101      	movs	r1, #1
    2f78:	4806      	ldr	r0, [pc, #24]	; (2f94 <PWM_0_init+0x6c>)
    2f7a:	4b0c      	ldr	r3, [pc, #48]	; (2fac <PWM_0_init+0x84>)
    2f7c:	4798      	blx	r3
	//		 | 0 << TCC_WEXCTRL_DTIEN2_Pos /* Dead-time Insertion Generator 2 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN1_Pos /* Dead-time Insertion Generator 1 Enable: 0 */
	//		 | 0 << TCC_WEXCTRL_DTIEN0_Pos /* Dead-time Insertion Generator 0 Enable: 0 */
	//		 | 0x0); /* Output Matrix: 0x0 */

	hri_tcc_write_WAVE_reg(TCC0,
    2f7e:	2102      	movs	r1, #2
    2f80:	4804      	ldr	r0, [pc, #16]	; (2f94 <PWM_0_init+0x6c>)
    2f82:	4b0b      	ldr	r3, [pc, #44]	; (2fb0 <PWM_0_init+0x88>)
    2f84:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    2f86:	2101      	movs	r1, #1
    2f88:	4802      	ldr	r0, [pc, #8]	; (2f94 <PWM_0_init+0x6c>)
    2f8a:	4b0a      	ldr	r3, [pc, #40]	; (2fb4 <PWM_0_init+0x8c>)
    2f8c:	4798      	blx	r3

	return 0;
    2f8e:	2300      	movs	r3, #0
}
    2f90:	4618      	mov	r0, r3
    2f92:	bd80      	pop	{r7, pc}
    2f94:	41016000 	.word	0x41016000
    2f98:	00002dfd 	.word	0x00002dfd
    2f9c:	00002e8d 	.word	0x00002e8d
    2fa0:	00002e65 	.word	0x00002e65
    2fa4:	00002dd9 	.word	0x00002dd9
    2fa8:	00002ebd 	.word	0x00002ebd
    2fac:	00002ee1 	.word	0x00002ee1
    2fb0:	00002f01 	.word	0x00002f01
    2fb4:	00002e25 	.word	0x00002e25

00002fb8 <__NVIC_EnableIRQ>:
{
    2fb8:	b480      	push	{r7}
    2fba:	b083      	sub	sp, #12
    2fbc:	af00      	add	r7, sp, #0
    2fbe:	4603      	mov	r3, r0
    2fc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	db0b      	blt.n	2fe2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fca:	4909      	ldr	r1, [pc, #36]	; (2ff0 <__NVIC_EnableIRQ+0x38>)
    2fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fd0:	095b      	lsrs	r3, r3, #5
    2fd2:	88fa      	ldrh	r2, [r7, #6]
    2fd4:	f002 021f 	and.w	r2, r2, #31
    2fd8:	2001      	movs	r0, #1
    2fda:	fa00 f202 	lsl.w	r2, r0, r2
    2fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2fe2:	bf00      	nop
    2fe4:	370c      	adds	r7, #12
    2fe6:	46bd      	mov	sp, r7
    2fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fec:	4770      	bx	lr
    2fee:	bf00      	nop
    2ff0:	e000e100 	.word	0xe000e100

00002ff4 <__NVIC_DisableIRQ>:
{
    2ff4:	b480      	push	{r7}
    2ff6:	b083      	sub	sp, #12
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	4603      	mov	r3, r0
    2ffc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3002:	2b00      	cmp	r3, #0
    3004:	db10      	blt.n	3028 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3006:	490b      	ldr	r1, [pc, #44]	; (3034 <__NVIC_DisableIRQ+0x40>)
    3008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    300c:	095b      	lsrs	r3, r3, #5
    300e:	88fa      	ldrh	r2, [r7, #6]
    3010:	f002 021f 	and.w	r2, r2, #31
    3014:	2001      	movs	r0, #1
    3016:	fa00 f202 	lsl.w	r2, r0, r2
    301a:	3320      	adds	r3, #32
    301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3024:	f3bf 8f6f 	isb	sy
}
    3028:	bf00      	nop
    302a:	370c      	adds	r7, #12
    302c:	46bd      	mov	sp, r7
    302e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3032:	4770      	bx	lr
    3034:	e000e100 	.word	0xe000e100

00003038 <__NVIC_ClearPendingIRQ>:
{
    3038:	b480      	push	{r7}
    303a:	b083      	sub	sp, #12
    303c:	af00      	add	r7, sp, #0
    303e:	4603      	mov	r3, r0
    3040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3046:	2b00      	cmp	r3, #0
    3048:	db0c      	blt.n	3064 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    304a:	4909      	ldr	r1, [pc, #36]	; (3070 <__NVIC_ClearPendingIRQ+0x38>)
    304c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3050:	095b      	lsrs	r3, r3, #5
    3052:	88fa      	ldrh	r2, [r7, #6]
    3054:	f002 021f 	and.w	r2, r2, #31
    3058:	2001      	movs	r0, #1
    305a:	fa00 f202 	lsl.w	r2, r0, r2
    305e:	3360      	adds	r3, #96	; 0x60
    3060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3064:	bf00      	nop
    3066:	370c      	adds	r7, #12
    3068:	46bd      	mov	sp, r7
    306a:	f85d 7b04 	ldr.w	r7, [sp], #4
    306e:	4770      	bx	lr
    3070:	e000e100 	.word	0xe000e100

00003074 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    3074:	b480      	push	{r7}
    3076:	b083      	sub	sp, #12
    3078:	af00      	add	r7, sp, #0
    307a:	6078      	str	r0, [r7, #4]
    307c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    307e:	bf00      	nop
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	691a      	ldr	r2, [r3, #16]
    3084:	683b      	ldr	r3, [r7, #0]
    3086:	4013      	ands	r3, r2
    3088:	2b00      	cmp	r3, #0
    308a:	d1f9      	bne.n	3080 <hri_tc_wait_for_sync+0xc>
	};
}
    308c:	bf00      	nop
    308e:	370c      	adds	r7, #12
    3090:	46bd      	mov	sp, r7
    3092:	f85d 7b04 	ldr.w	r7, [sp], #4
    3096:	4770      	bx	lr

00003098 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    3098:	b480      	push	{r7}
    309a:	b083      	sub	sp, #12
    309c:	af00      	add	r7, sp, #0
    309e:	6078      	str	r0, [r7, #4]
    30a0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	691a      	ldr	r2, [r3, #16]
    30a6:	683b      	ldr	r3, [r7, #0]
    30a8:	4013      	ands	r3, r2
    30aa:	2b00      	cmp	r3, #0
    30ac:	bf14      	ite	ne
    30ae:	2301      	movne	r3, #1
    30b0:	2300      	moveq	r3, #0
    30b2:	b2db      	uxtb	r3, r3
}
    30b4:	4618      	mov	r0, r3
    30b6:	370c      	adds	r7, #12
    30b8:	46bd      	mov	sp, r7
    30ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    30be:	4770      	bx	lr

000030c0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    30c0:	b480      	push	{r7}
    30c2:	b083      	sub	sp, #12
    30c4:	af00      	add	r7, sp, #0
    30c6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	7a9b      	ldrb	r3, [r3, #10]
    30cc:	b2db      	uxtb	r3, r3
    30ce:	f003 0301 	and.w	r3, r3, #1
    30d2:	2b00      	cmp	r3, #0
    30d4:	bf14      	ite	ne
    30d6:	2301      	movne	r3, #1
    30d8:	2300      	moveq	r3, #0
    30da:	b2db      	uxtb	r3, r3
}
    30dc:	4618      	mov	r0, r3
    30de:	370c      	adds	r7, #12
    30e0:	46bd      	mov	sp, r7
    30e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30e6:	4770      	bx	lr

000030e8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    30e8:	b480      	push	{r7}
    30ea:	b083      	sub	sp, #12
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	2201      	movs	r2, #1
    30f4:	729a      	strb	r2, [r3, #10]
}
    30f6:	bf00      	nop
    30f8:	370c      	adds	r7, #12
    30fa:	46bd      	mov	sp, r7
    30fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3100:	4770      	bx	lr

00003102 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    3102:	b480      	push	{r7}
    3104:	b083      	sub	sp, #12
    3106:	af00      	add	r7, sp, #0
    3108:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	2201      	movs	r2, #1
    310e:	725a      	strb	r2, [r3, #9]
}
    3110:	bf00      	nop
    3112:	370c      	adds	r7, #12
    3114:	46bd      	mov	sp, r7
    3116:	f85d 7b04 	ldr.w	r7, [sp], #4
    311a:	4770      	bx	lr

0000311c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    311c:	b580      	push	{r7, lr}
    311e:	b082      	sub	sp, #8
    3120:	af00      	add	r7, sp, #0
    3122:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	681b      	ldr	r3, [r3, #0]
    3128:	f043 0202 	orr.w	r2, r3, #2
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3130:	2103      	movs	r1, #3
    3132:	6878      	ldr	r0, [r7, #4]
    3134:	4b02      	ldr	r3, [pc, #8]	; (3140 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    3136:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3138:	bf00      	nop
    313a:	3708      	adds	r7, #8
    313c:	46bd      	mov	sp, r7
    313e:	bd80      	pop	{r7, pc}
    3140:	00003075 	.word	0x00003075

00003144 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    3144:	b580      	push	{r7, lr}
    3146:	b084      	sub	sp, #16
    3148:	af00      	add	r7, sp, #0
    314a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    314c:	2103      	movs	r1, #3
    314e:	6878      	ldr	r0, [r7, #4]
    3150:	4b09      	ldr	r3, [pc, #36]	; (3178 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    3152:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    315a:	68fb      	ldr	r3, [r7, #12]
    315c:	085b      	lsrs	r3, r3, #1
    315e:	f003 0301 	and.w	r3, r3, #1
    3162:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	2b00      	cmp	r3, #0
    3168:	bf14      	ite	ne
    316a:	2301      	movne	r3, #1
    316c:	2300      	moveq	r3, #0
    316e:	b2db      	uxtb	r3, r3
}
    3170:	4618      	mov	r0, r3
    3172:	3710      	adds	r7, #16
    3174:	46bd      	mov	sp, r7
    3176:	bd80      	pop	{r7, pc}
    3178:	00003075 	.word	0x00003075

0000317c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	f023 0202 	bic.w	r2, r3, #2
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3190:	2103      	movs	r1, #3
    3192:	6878      	ldr	r0, [r7, #4]
    3194:	4b02      	ldr	r3, [pc, #8]	; (31a0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    3196:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3198:	bf00      	nop
    319a:	3708      	adds	r7, #8
    319c:	46bd      	mov	sp, r7
    319e:	bd80      	pop	{r7, pc}
    31a0:	00003075 	.word	0x00003075

000031a4 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    31a4:	b580      	push	{r7, lr}
    31a6:	b084      	sub	sp, #16
    31a8:	af00      	add	r7, sp, #0
    31aa:	6078      	str	r0, [r7, #4]
    31ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    31ae:	2103      	movs	r1, #3
    31b0:	6878      	ldr	r0, [r7, #4]
    31b2:	4b07      	ldr	r3, [pc, #28]	; (31d0 <hri_tc_get_CTRLA_reg+0x2c>)
    31b4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    31bc:	68fa      	ldr	r2, [r7, #12]
    31be:	683b      	ldr	r3, [r7, #0]
    31c0:	4013      	ands	r3, r2
    31c2:	60fb      	str	r3, [r7, #12]
	return tmp;
    31c4:	68fb      	ldr	r3, [r7, #12]
}
    31c6:	4618      	mov	r0, r3
    31c8:	3710      	adds	r7, #16
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	bf00      	nop
    31d0:	00003075 	.word	0x00003075

000031d4 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b082      	sub	sp, #8
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
    31dc:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	683a      	ldr	r2, [r7, #0]
    31e2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    31e4:	2103      	movs	r1, #3
    31e6:	6878      	ldr	r0, [r7, #4]
    31e8:	4b02      	ldr	r3, [pc, #8]	; (31f4 <hri_tc_write_CTRLA_reg+0x20>)
    31ea:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    31ec:	bf00      	nop
    31ee:	3708      	adds	r7, #8
    31f0:	46bd      	mov	sp, r7
    31f2:	bd80      	pop	{r7, pc}
    31f4:	00003075 	.word	0x00003075

000031f8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    31f8:	b480      	push	{r7}
    31fa:	b083      	sub	sp, #12
    31fc:	af00      	add	r7, sp, #0
    31fe:	6078      	str	r0, [r7, #4]
    3200:	460b      	mov	r3, r1
    3202:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	887a      	ldrh	r2, [r7, #2]
    3208:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    320a:	bf00      	nop
    320c:	370c      	adds	r7, #12
    320e:	46bd      	mov	sp, r7
    3210:	f85d 7b04 	ldr.w	r7, [sp], #4
    3214:	4770      	bx	lr

00003216 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    3216:	b480      	push	{r7}
    3218:	b083      	sub	sp, #12
    321a:	af00      	add	r7, sp, #0
    321c:	6078      	str	r0, [r7, #4]
    321e:	460b      	mov	r3, r1
    3220:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	78fa      	ldrb	r2, [r7, #3]
    3226:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    3228:	bf00      	nop
    322a:	370c      	adds	r7, #12
    322c:	46bd      	mov	sp, r7
    322e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3232:	4770      	bx	lr

00003234 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    3234:	b480      	push	{r7}
    3236:	b083      	sub	sp, #12
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
    323c:	460b      	mov	r3, r1
    323e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	78fa      	ldrb	r2, [r7, #3]
    3244:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    3246:	bf00      	nop
    3248:	370c      	adds	r7, #12
    324a:	46bd      	mov	sp, r7
    324c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3250:	4770      	bx	lr
	...

00003254 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    3254:	b580      	push	{r7, lr}
    3256:	b082      	sub	sp, #8
    3258:	af00      	add	r7, sp, #0
    325a:	6078      	str	r0, [r7, #4]
    325c:	460b      	mov	r3, r1
    325e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	78fa      	ldrb	r2, [r7, #3]
    3264:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    3266:	2120      	movs	r1, #32
    3268:	6878      	ldr	r0, [r7, #4]
    326a:	4b03      	ldr	r3, [pc, #12]	; (3278 <hri_tccount8_write_PER_reg+0x24>)
    326c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    326e:	bf00      	nop
    3270:	3708      	adds	r7, #8
    3272:	46bd      	mov	sp, r7
    3274:	bd80      	pop	{r7, pc}
    3276:	bf00      	nop
    3278:	00003075 	.word	0x00003075

0000327c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
    3284:	460b      	mov	r3, r1
    3286:	70fb      	strb	r3, [r7, #3]
    3288:	4613      	mov	r3, r2
    328a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    328c:	78fb      	ldrb	r3, [r7, #3]
    328e:	687a      	ldr	r2, [r7, #4]
    3290:	4413      	add	r3, r2
    3292:	78ba      	ldrb	r2, [r7, #2]
    3294:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    3296:	21c0      	movs	r1, #192	; 0xc0
    3298:	6878      	ldr	r0, [r7, #4]
    329a:	4b03      	ldr	r3, [pc, #12]	; (32a8 <hri_tccount8_write_CC_reg+0x2c>)
    329c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    329e:	bf00      	nop
    32a0:	3708      	adds	r7, #8
    32a2:	46bd      	mov	sp, r7
    32a4:	bd80      	pop	{r7, pc}
    32a6:	bf00      	nop
    32a8:	00003075 	.word	0x00003075

000032ac <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
    32b4:	460b      	mov	r3, r1
    32b6:	70fb      	strb	r3, [r7, #3]
    32b8:	4613      	mov	r3, r2
    32ba:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    32bc:	78fb      	ldrb	r3, [r7, #3]
    32be:	687a      	ldr	r2, [r7, #4]
    32c0:	330c      	adds	r3, #12
    32c2:	005b      	lsls	r3, r3, #1
    32c4:	4413      	add	r3, r2
    32c6:	883a      	ldrh	r2, [r7, #0]
    32c8:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    32ca:	21c0      	movs	r1, #192	; 0xc0
    32cc:	6878      	ldr	r0, [r7, #4]
    32ce:	4b03      	ldr	r3, [pc, #12]	; (32dc <hri_tccount16_write_CC_reg+0x30>)
    32d0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    32d2:	bf00      	nop
    32d4:	3708      	adds	r7, #8
    32d6:	46bd      	mov	sp, r7
    32d8:	bd80      	pop	{r7, pc}
    32da:	bf00      	nop
    32dc:	00003075 	.word	0x00003075

000032e0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b084      	sub	sp, #16
    32e4:	af00      	add	r7, sp, #0
    32e6:	60f8      	str	r0, [r7, #12]
    32e8:	460b      	mov	r3, r1
    32ea:	607a      	str	r2, [r7, #4]
    32ec:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    32ee:	7afb      	ldrb	r3, [r7, #11]
    32f0:	68fa      	ldr	r2, [r7, #12]
    32f2:	3306      	adds	r3, #6
    32f4:	009b      	lsls	r3, r3, #2
    32f6:	4413      	add	r3, r2
    32f8:	687a      	ldr	r2, [r7, #4]
    32fa:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    32fc:	21c0      	movs	r1, #192	; 0xc0
    32fe:	68f8      	ldr	r0, [r7, #12]
    3300:	4b02      	ldr	r3, [pc, #8]	; (330c <hri_tccount32_write_CC_reg+0x2c>)
    3302:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3304:	bf00      	nop
    3306:	3710      	adds	r7, #16
    3308:	46bd      	mov	sp, r7
    330a:	bd80      	pop	{r7, pc}
    330c:	00003075 	.word	0x00003075

00003310 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    3310:	b580      	push	{r7, lr}
    3312:	b084      	sub	sp, #16
    3314:	af00      	add	r7, sp, #0
    3316:	6078      	str	r0, [r7, #4]
    3318:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    331a:	6838      	ldr	r0, [r7, #0]
    331c:	4b93      	ldr	r3, [pc, #588]	; (356c <_timer_init+0x25c>)
    331e:	4798      	blx	r3
    3320:	4603      	mov	r3, r0
    3322:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	683a      	ldr	r2, [r7, #0]
    3328:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    332a:	2291      	movs	r2, #145	; 0x91
    332c:	4990      	ldr	r1, [pc, #576]	; (3570 <_timer_init+0x260>)
    332e:	2001      	movs	r0, #1
    3330:	4b90      	ldr	r3, [pc, #576]	; (3574 <_timer_init+0x264>)
    3332:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3334:	2101      	movs	r1, #1
    3336:	6838      	ldr	r0, [r7, #0]
    3338:	4b8f      	ldr	r3, [pc, #572]	; (3578 <_timer_init+0x268>)
    333a:	4798      	blx	r3
    333c:	4603      	mov	r3, r0
    333e:	f083 0301 	eor.w	r3, r3, #1
    3342:	b2db      	uxtb	r3, r3
    3344:	2b00      	cmp	r3, #0
    3346:	d011      	beq.n	336c <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3348:	2102      	movs	r1, #2
    334a:	6838      	ldr	r0, [r7, #0]
    334c:	4b8b      	ldr	r3, [pc, #556]	; (357c <_timer_init+0x26c>)
    334e:	4798      	blx	r3
    3350:	4603      	mov	r3, r0
    3352:	2b00      	cmp	r3, #0
    3354:	d006      	beq.n	3364 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    3356:	6838      	ldr	r0, [r7, #0]
    3358:	4b89      	ldr	r3, [pc, #548]	; (3580 <_timer_init+0x270>)
    335a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    335c:	2102      	movs	r1, #2
    335e:	6838      	ldr	r0, [r7, #0]
    3360:	4b88      	ldr	r3, [pc, #544]	; (3584 <_timer_init+0x274>)
    3362:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    3364:	2101      	movs	r1, #1
    3366:	6838      	ldr	r0, [r7, #0]
    3368:	4b87      	ldr	r3, [pc, #540]	; (3588 <_timer_init+0x278>)
    336a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    336c:	2101      	movs	r1, #1
    336e:	6838      	ldr	r0, [r7, #0]
    3370:	4b84      	ldr	r3, [pc, #528]	; (3584 <_timer_init+0x274>)
    3372:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3374:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3378:	4984      	ldr	r1, [pc, #528]	; (358c <_timer_init+0x27c>)
    337a:	4613      	mov	r3, r2
    337c:	009b      	lsls	r3, r3, #2
    337e:	4413      	add	r3, r2
    3380:	009b      	lsls	r3, r3, #2
    3382:	440b      	add	r3, r1
    3384:	3304      	adds	r3, #4
    3386:	681b      	ldr	r3, [r3, #0]
    3388:	4619      	mov	r1, r3
    338a:	6838      	ldr	r0, [r7, #0]
    338c:	4b7e      	ldr	r3, [pc, #504]	; (3588 <_timer_init+0x278>)
    338e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3390:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3394:	497d      	ldr	r1, [pc, #500]	; (358c <_timer_init+0x27c>)
    3396:	4613      	mov	r3, r2
    3398:	009b      	lsls	r3, r3, #2
    339a:	4413      	add	r3, r2
    339c:	009b      	lsls	r3, r3, #2
    339e:	440b      	add	r3, r1
    33a0:	330a      	adds	r3, #10
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	4619      	mov	r1, r3
    33a6:	6838      	ldr	r0, [r7, #0]
    33a8:	4b79      	ldr	r3, [pc, #484]	; (3590 <_timer_init+0x280>)
    33aa:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    33ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33b0:	4976      	ldr	r1, [pc, #472]	; (358c <_timer_init+0x27c>)
    33b2:	4613      	mov	r3, r2
    33b4:	009b      	lsls	r3, r3, #2
    33b6:	4413      	add	r3, r2
    33b8:	009b      	lsls	r3, r3, #2
    33ba:	440b      	add	r3, r1
    33bc:	3308      	adds	r3, #8
    33be:	881b      	ldrh	r3, [r3, #0]
    33c0:	4619      	mov	r1, r3
    33c2:	6838      	ldr	r0, [r7, #0]
    33c4:	4b73      	ldr	r3, [pc, #460]	; (3594 <_timer_init+0x284>)
    33c6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    33c8:	2101      	movs	r1, #1
    33ca:	6838      	ldr	r0, [r7, #0]
    33cc:	4b72      	ldr	r3, [pc, #456]	; (3598 <_timer_init+0x288>)
    33ce:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    33d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33d4:	496d      	ldr	r1, [pc, #436]	; (358c <_timer_init+0x27c>)
    33d6:	4613      	mov	r3, r2
    33d8:	009b      	lsls	r3, r3, #2
    33da:	4413      	add	r3, r2
    33dc:	009b      	lsls	r3, r3, #2
    33de:	440b      	add	r3, r1
    33e0:	3304      	adds	r3, #4
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	f003 030c 	and.w	r3, r3, #12
    33e8:	2b08      	cmp	r3, #8
    33ea:	d11e      	bne.n	342a <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    33ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33f0:	4966      	ldr	r1, [pc, #408]	; (358c <_timer_init+0x27c>)
    33f2:	4613      	mov	r3, r2
    33f4:	009b      	lsls	r3, r3, #2
    33f6:	4413      	add	r3, r2
    33f8:	009b      	lsls	r3, r3, #2
    33fa:	440b      	add	r3, r1
    33fc:	330c      	adds	r3, #12
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	461a      	mov	r2, r3
    3402:	2100      	movs	r1, #0
    3404:	6838      	ldr	r0, [r7, #0]
    3406:	4b65      	ldr	r3, [pc, #404]	; (359c <_timer_init+0x28c>)
    3408:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    340a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    340e:	495f      	ldr	r1, [pc, #380]	; (358c <_timer_init+0x27c>)
    3410:	4613      	mov	r3, r2
    3412:	009b      	lsls	r3, r3, #2
    3414:	4413      	add	r3, r2
    3416:	009b      	lsls	r3, r3, #2
    3418:	440b      	add	r3, r1
    341a:	3310      	adds	r3, #16
    341c:	681b      	ldr	r3, [r3, #0]
    341e:	461a      	mov	r2, r3
    3420:	2101      	movs	r1, #1
    3422:	6838      	ldr	r0, [r7, #0]
    3424:	4b5d      	ldr	r3, [pc, #372]	; (359c <_timer_init+0x28c>)
    3426:	4798      	blx	r3
    3428:	e06a      	b.n	3500 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    342a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    342e:	4957      	ldr	r1, [pc, #348]	; (358c <_timer_init+0x27c>)
    3430:	4613      	mov	r3, r2
    3432:	009b      	lsls	r3, r3, #2
    3434:	4413      	add	r3, r2
    3436:	009b      	lsls	r3, r3, #2
    3438:	440b      	add	r3, r1
    343a:	3304      	adds	r3, #4
    343c:	681b      	ldr	r3, [r3, #0]
    343e:	f003 030c 	and.w	r3, r3, #12
    3442:	2b00      	cmp	r3, #0
    3444:	d120      	bne.n	3488 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3446:	f997 200f 	ldrsb.w	r2, [r7, #15]
    344a:	4950      	ldr	r1, [pc, #320]	; (358c <_timer_init+0x27c>)
    344c:	4613      	mov	r3, r2
    344e:	009b      	lsls	r3, r3, #2
    3450:	4413      	add	r3, r2
    3452:	009b      	lsls	r3, r3, #2
    3454:	440b      	add	r3, r1
    3456:	330c      	adds	r3, #12
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	b29b      	uxth	r3, r3
    345c:	461a      	mov	r2, r3
    345e:	2100      	movs	r1, #0
    3460:	6838      	ldr	r0, [r7, #0]
    3462:	4b4f      	ldr	r3, [pc, #316]	; (35a0 <_timer_init+0x290>)
    3464:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3466:	f997 200f 	ldrsb.w	r2, [r7, #15]
    346a:	4948      	ldr	r1, [pc, #288]	; (358c <_timer_init+0x27c>)
    346c:	4613      	mov	r3, r2
    346e:	009b      	lsls	r3, r3, #2
    3470:	4413      	add	r3, r2
    3472:	009b      	lsls	r3, r3, #2
    3474:	440b      	add	r3, r1
    3476:	3310      	adds	r3, #16
    3478:	681b      	ldr	r3, [r3, #0]
    347a:	b29b      	uxth	r3, r3
    347c:	461a      	mov	r2, r3
    347e:	2101      	movs	r1, #1
    3480:	6838      	ldr	r0, [r7, #0]
    3482:	4b47      	ldr	r3, [pc, #284]	; (35a0 <_timer_init+0x290>)
    3484:	4798      	blx	r3
    3486:	e03b      	b.n	3500 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3488:	f997 200f 	ldrsb.w	r2, [r7, #15]
    348c:	493f      	ldr	r1, [pc, #252]	; (358c <_timer_init+0x27c>)
    348e:	4613      	mov	r3, r2
    3490:	009b      	lsls	r3, r3, #2
    3492:	4413      	add	r3, r2
    3494:	009b      	lsls	r3, r3, #2
    3496:	440b      	add	r3, r1
    3498:	3304      	adds	r3, #4
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	f003 030c 	and.w	r3, r3, #12
    34a0:	2b04      	cmp	r3, #4
    34a2:	d12d      	bne.n	3500 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    34a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34a8:	4938      	ldr	r1, [pc, #224]	; (358c <_timer_init+0x27c>)
    34aa:	4613      	mov	r3, r2
    34ac:	009b      	lsls	r3, r3, #2
    34ae:	4413      	add	r3, r2
    34b0:	009b      	lsls	r3, r3, #2
    34b2:	440b      	add	r3, r1
    34b4:	330c      	adds	r3, #12
    34b6:	681b      	ldr	r3, [r3, #0]
    34b8:	b2db      	uxtb	r3, r3
    34ba:	461a      	mov	r2, r3
    34bc:	2100      	movs	r1, #0
    34be:	6838      	ldr	r0, [r7, #0]
    34c0:	4b38      	ldr	r3, [pc, #224]	; (35a4 <_timer_init+0x294>)
    34c2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    34c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34c8:	4930      	ldr	r1, [pc, #192]	; (358c <_timer_init+0x27c>)
    34ca:	4613      	mov	r3, r2
    34cc:	009b      	lsls	r3, r3, #2
    34ce:	4413      	add	r3, r2
    34d0:	009b      	lsls	r3, r3, #2
    34d2:	440b      	add	r3, r1
    34d4:	3310      	adds	r3, #16
    34d6:	681b      	ldr	r3, [r3, #0]
    34d8:	b2db      	uxtb	r3, r3
    34da:	461a      	mov	r2, r3
    34dc:	2101      	movs	r1, #1
    34de:	6838      	ldr	r0, [r7, #0]
    34e0:	4b30      	ldr	r3, [pc, #192]	; (35a4 <_timer_init+0x294>)
    34e2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    34e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34e8:	4928      	ldr	r1, [pc, #160]	; (358c <_timer_init+0x27c>)
    34ea:	4613      	mov	r3, r2
    34ec:	009b      	lsls	r3, r3, #2
    34ee:	4413      	add	r3, r2
    34f0:	009b      	lsls	r3, r3, #2
    34f2:	440b      	add	r3, r1
    34f4:	330b      	adds	r3, #11
    34f6:	781b      	ldrb	r3, [r3, #0]
    34f8:	4619      	mov	r1, r3
    34fa:	6838      	ldr	r0, [r7, #0]
    34fc:	4b2a      	ldr	r3, [pc, #168]	; (35a8 <_timer_init+0x298>)
    34fe:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    3500:	6838      	ldr	r0, [r7, #0]
    3502:	4b2a      	ldr	r3, [pc, #168]	; (35ac <_timer_init+0x29c>)
    3504:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    3506:	6879      	ldr	r1, [r7, #4]
    3508:	6838      	ldr	r0, [r7, #0]
    350a:	4b29      	ldr	r3, [pc, #164]	; (35b0 <_timer_init+0x2a0>)
    350c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    350e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3512:	491e      	ldr	r1, [pc, #120]	; (358c <_timer_init+0x27c>)
    3514:	4613      	mov	r3, r2
    3516:	009b      	lsls	r3, r3, #2
    3518:	4413      	add	r3, r2
    351a:	009b      	lsls	r3, r3, #2
    351c:	440b      	add	r3, r1
    351e:	3302      	adds	r3, #2
    3520:	f9b3 3000 	ldrsh.w	r3, [r3]
    3524:	4618      	mov	r0, r3
    3526:	4b23      	ldr	r3, [pc, #140]	; (35b4 <_timer_init+0x2a4>)
    3528:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    352a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    352e:	4917      	ldr	r1, [pc, #92]	; (358c <_timer_init+0x27c>)
    3530:	4613      	mov	r3, r2
    3532:	009b      	lsls	r3, r3, #2
    3534:	4413      	add	r3, r2
    3536:	009b      	lsls	r3, r3, #2
    3538:	440b      	add	r3, r1
    353a:	3302      	adds	r3, #2
    353c:	f9b3 3000 	ldrsh.w	r3, [r3]
    3540:	4618      	mov	r0, r3
    3542:	4b1d      	ldr	r3, [pc, #116]	; (35b8 <_timer_init+0x2a8>)
    3544:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    3546:	f997 200f 	ldrsb.w	r2, [r7, #15]
    354a:	4910      	ldr	r1, [pc, #64]	; (358c <_timer_init+0x27c>)
    354c:	4613      	mov	r3, r2
    354e:	009b      	lsls	r3, r3, #2
    3550:	4413      	add	r3, r2
    3552:	009b      	lsls	r3, r3, #2
    3554:	440b      	add	r3, r1
    3556:	3302      	adds	r3, #2
    3558:	f9b3 3000 	ldrsh.w	r3, [r3]
    355c:	4618      	mov	r0, r3
    355e:	4b17      	ldr	r3, [pc, #92]	; (35bc <_timer_init+0x2ac>)
    3560:	4798      	blx	r3

	return ERR_NONE;
    3562:	2300      	movs	r3, #0
}
    3564:	4618      	mov	r0, r3
    3566:	3710      	adds	r7, #16
    3568:	46bd      	mov	sp, r7
    356a:	bd80      	pop	{r7, pc}
    356c:	000036e1 	.word	0x000036e1
    3570:	0000598c 	.word	0x0000598c
    3574:	00001629 	.word	0x00001629
    3578:	00003099 	.word	0x00003099
    357c:	000031a5 	.word	0x000031a5
    3580:	0000317d 	.word	0x0000317d
    3584:	00003075 	.word	0x00003075
    3588:	000031d5 	.word	0x000031d5
    358c:	20000018 	.word	0x20000018
    3590:	00003235 	.word	0x00003235
    3594:	000031f9 	.word	0x000031f9
    3598:	00003217 	.word	0x00003217
    359c:	000032e1 	.word	0x000032e1
    35a0:	000032ad 	.word	0x000032ad
    35a4:	0000327d 	.word	0x0000327d
    35a8:	00003255 	.word	0x00003255
    35ac:	00003103 	.word	0x00003103
    35b0:	00003749 	.word	0x00003749
    35b4:	00002ff5 	.word	0x00002ff5
    35b8:	00003039 	.word	0x00003039
    35bc:	00002fb9 	.word	0x00002fb9

000035c0 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    35c0:	b580      	push	{r7, lr}
    35c2:	b082      	sub	sp, #8
    35c4:	af00      	add	r7, sp, #0
    35c6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	68db      	ldr	r3, [r3, #12]
    35cc:	4618      	mov	r0, r3
    35ce:	4b03      	ldr	r3, [pc, #12]	; (35dc <_timer_start+0x1c>)
    35d0:	4798      	blx	r3
}
    35d2:	bf00      	nop
    35d4:	3708      	adds	r7, #8
    35d6:	46bd      	mov	sp, r7
    35d8:	bd80      	pop	{r7, pc}
    35da:	bf00      	nop
    35dc:	0000311d 	.word	0x0000311d

000035e0 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    35e0:	b580      	push	{r7, lr}
    35e2:	b082      	sub	sp, #8
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	68db      	ldr	r3, [r3, #12]
    35ec:	4618      	mov	r0, r3
    35ee:	4b03      	ldr	r3, [pc, #12]	; (35fc <_timer_is_started+0x1c>)
    35f0:	4798      	blx	r3
    35f2:	4603      	mov	r3, r0
}
    35f4:	4618      	mov	r0, r3
    35f6:	3708      	adds	r7, #8
    35f8:	46bd      	mov	sp, r7
    35fa:	bd80      	pop	{r7, pc}
    35fc:	00003145 	.word	0x00003145

00003600 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    3600:	b480      	push	{r7}
    3602:	af00      	add	r7, sp, #0
	return NULL;
    3604:	2300      	movs	r3, #0
}
    3606:	4618      	mov	r0, r3
    3608:	46bd      	mov	sp, r7
    360a:	f85d 7b04 	ldr.w	r7, [sp], #4
    360e:	4770      	bx	lr

00003610 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    3610:	b580      	push	{r7, lr}
    3612:	b084      	sub	sp, #16
    3614:	af00      	add	r7, sp, #0
    3616:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	68db      	ldr	r3, [r3, #12]
    361c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    361e:	68f8      	ldr	r0, [r7, #12]
    3620:	4b0e      	ldr	r3, [pc, #56]	; (365c <_timer_set_irq+0x4c>)
    3622:	4798      	blx	r3
    3624:	4603      	mov	r3, r0
    3626:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    3628:	f240 1213 	movw	r2, #275	; 0x113
    362c:	490c      	ldr	r1, [pc, #48]	; (3660 <_timer_set_irq+0x50>)
    362e:	2001      	movs	r0, #1
    3630:	4b0c      	ldr	r3, [pc, #48]	; (3664 <_timer_set_irq+0x54>)
    3632:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    3634:	f997 200b 	ldrsb.w	r2, [r7, #11]
    3638:	490b      	ldr	r1, [pc, #44]	; (3668 <_timer_set_irq+0x58>)
    363a:	4613      	mov	r3, r2
    363c:	009b      	lsls	r3, r3, #2
    363e:	4413      	add	r3, r2
    3640:	009b      	lsls	r3, r3, #2
    3642:	440b      	add	r3, r1
    3644:	3302      	adds	r3, #2
    3646:	f9b3 3000 	ldrsh.w	r3, [r3]
    364a:	b2db      	uxtb	r3, r3
    364c:	4618      	mov	r0, r3
    364e:	4b07      	ldr	r3, [pc, #28]	; (366c <_timer_set_irq+0x5c>)
    3650:	4798      	blx	r3
}
    3652:	bf00      	nop
    3654:	3710      	adds	r7, #16
    3656:	46bd      	mov	sp, r7
    3658:	bd80      	pop	{r7, pc}
    365a:	bf00      	nop
    365c:	000036e1 	.word	0x000036e1
    3660:	0000598c 	.word	0x0000598c
    3664:	00001629 	.word	0x00001629
    3668:	20000018 	.word	0x20000018
    366c:	00001945 	.word	0x00001945

00003670 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3670:	b580      	push	{r7, lr}
    3672:	b084      	sub	sp, #16
    3674:	af00      	add	r7, sp, #0
    3676:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	68db      	ldr	r3, [r3, #12]
    367c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    367e:	68f8      	ldr	r0, [r7, #12]
    3680:	4b07      	ldr	r3, [pc, #28]	; (36a0 <tc_interrupt_handler+0x30>)
    3682:	4798      	blx	r3
    3684:	4603      	mov	r3, r0
    3686:	2b00      	cmp	r3, #0
    3688:	d006      	beq.n	3698 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    368a:	68f8      	ldr	r0, [r7, #12]
    368c:	4b05      	ldr	r3, [pc, #20]	; (36a4 <tc_interrupt_handler+0x34>)
    368e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	681b      	ldr	r3, [r3, #0]
    3694:	6878      	ldr	r0, [r7, #4]
    3696:	4798      	blx	r3
	}
}
    3698:	bf00      	nop
    369a:	3710      	adds	r7, #16
    369c:	46bd      	mov	sp, r7
    369e:	bd80      	pop	{r7, pc}
    36a0:	000030c1 	.word	0x000030c1
    36a4:	000030e9 	.word	0x000030e9

000036a8 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    36a8:	b580      	push	{r7, lr}
    36aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    36ac:	4b03      	ldr	r3, [pc, #12]	; (36bc <TC1_Handler+0x14>)
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	4618      	mov	r0, r3
    36b2:	4b03      	ldr	r3, [pc, #12]	; (36c0 <TC1_Handler+0x18>)
    36b4:	4798      	blx	r3
}
    36b6:	bf00      	nop
    36b8:	bd80      	pop	{r7, pc}
    36ba:	bf00      	nop
    36bc:	2000011c 	.word	0x2000011c
    36c0:	00003671 	.word	0x00003671

000036c4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    36c4:	b580      	push	{r7, lr}
    36c6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    36c8:	4b03      	ldr	r3, [pc, #12]	; (36d8 <TC2_Handler+0x14>)
    36ca:	681b      	ldr	r3, [r3, #0]
    36cc:	4618      	mov	r0, r3
    36ce:	4b03      	ldr	r3, [pc, #12]	; (36dc <TC2_Handler+0x18>)
    36d0:	4798      	blx	r3
}
    36d2:	bf00      	nop
    36d4:	bd80      	pop	{r7, pc}
    36d6:	bf00      	nop
    36d8:	20000120 	.word	0x20000120
    36dc:	00003671 	.word	0x00003671

000036e0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b084      	sub	sp, #16
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    36e8:	6878      	ldr	r0, [r7, #4]
    36ea:	4b13      	ldr	r3, [pc, #76]	; (3738 <get_tc_index+0x58>)
    36ec:	4798      	blx	r3
    36ee:	4603      	mov	r3, r0
    36f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    36f2:	2300      	movs	r3, #0
    36f4:	73fb      	strb	r3, [r7, #15]
    36f6:	e010      	b.n	371a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    36f8:	7bfa      	ldrb	r2, [r7, #15]
    36fa:	4910      	ldr	r1, [pc, #64]	; (373c <get_tc_index+0x5c>)
    36fc:	4613      	mov	r3, r2
    36fe:	009b      	lsls	r3, r3, #2
    3700:	4413      	add	r3, r2
    3702:	009b      	lsls	r3, r3, #2
    3704:	440b      	add	r3, r1
    3706:	781b      	ldrb	r3, [r3, #0]
    3708:	7bba      	ldrb	r2, [r7, #14]
    370a:	429a      	cmp	r2, r3
    370c:	d102      	bne.n	3714 <get_tc_index+0x34>
			return i;
    370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3712:	e00d      	b.n	3730 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3714:	7bfb      	ldrb	r3, [r7, #15]
    3716:	3301      	adds	r3, #1
    3718:	73fb      	strb	r3, [r7, #15]
    371a:	7bfb      	ldrb	r3, [r7, #15]
    371c:	2b01      	cmp	r3, #1
    371e:	d9eb      	bls.n	36f8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    3720:	f44f 72a4 	mov.w	r2, #328	; 0x148
    3724:	4906      	ldr	r1, [pc, #24]	; (3740 <get_tc_index+0x60>)
    3726:	2000      	movs	r0, #0
    3728:	4b06      	ldr	r3, [pc, #24]	; (3744 <get_tc_index+0x64>)
    372a:	4798      	blx	r3
	return -1;
    372c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3730:	4618      	mov	r0, r3
    3732:	3710      	adds	r7, #16
    3734:	46bd      	mov	sp, r7
    3736:	bd80      	pop	{r7, pc}
    3738:	000037a1 	.word	0x000037a1
    373c:	20000018 	.word	0x20000018
    3740:	0000598c 	.word	0x0000598c
    3744:	00001629 	.word	0x00001629

00003748 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    3748:	b480      	push	{r7}
    374a:	b083      	sub	sp, #12
    374c:	af00      	add	r7, sp, #0
    374e:	6078      	str	r0, [r7, #4]
    3750:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    3752:	687b      	ldr	r3, [r7, #4]
    3754:	4a0c      	ldr	r2, [pc, #48]	; (3788 <_tc_init_irq_param+0x40>)
    3756:	4293      	cmp	r3, r2
    3758:	d102      	bne.n	3760 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _pwm_device *)dev;
    375a:	4a0c      	ldr	r2, [pc, #48]	; (378c <_tc_init_irq_param+0x44>)
    375c:	683b      	ldr	r3, [r7, #0]
    375e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    3760:	687b      	ldr	r3, [r7, #4]
    3762:	4a0b      	ldr	r2, [pc, #44]	; (3790 <_tc_init_irq_param+0x48>)
    3764:	4293      	cmp	r3, r2
    3766:	d102      	bne.n	376e <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    3768:	4a0a      	ldr	r2, [pc, #40]	; (3794 <_tc_init_irq_param+0x4c>)
    376a:	683b      	ldr	r3, [r7, #0]
    376c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	4a09      	ldr	r2, [pc, #36]	; (3798 <_tc_init_irq_param+0x50>)
    3772:	4293      	cmp	r3, r2
    3774:	d102      	bne.n	377c <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    3776:	4a09      	ldr	r2, [pc, #36]	; (379c <_tc_init_irq_param+0x54>)
    3778:	683b      	ldr	r3, [r7, #0]
    377a:	6013      	str	r3, [r2, #0]
	}
}
    377c:	bf00      	nop
    377e:	370c      	adds	r7, #12
    3780:	46bd      	mov	sp, r7
    3782:	f85d 7b04 	ldr.w	r7, [sp], #4
    3786:	4770      	bx	lr
    3788:	40003800 	.word	0x40003800
    378c:	20000118 	.word	0x20000118
    3790:	40003c00 	.word	0x40003c00
    3794:	2000011c 	.word	0x2000011c
    3798:	4101a000 	.word	0x4101a000
    379c:	20000120 	.word	0x20000120

000037a0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    37a0:	b4b0      	push	{r4, r5, r7}
    37a2:	b08d      	sub	sp, #52	; 0x34
    37a4:	af00      	add	r7, sp, #0
    37a6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    37a8:	4b13      	ldr	r3, [pc, #76]	; (37f8 <_get_hardware_offset+0x58>)
    37aa:	f107 040c 	add.w	r4, r7, #12
    37ae:	461d      	mov	r5, r3
    37b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    37b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    37b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    37b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    37bc:	2300      	movs	r3, #0
    37be:	62fb      	str	r3, [r7, #44]	; 0x2c
    37c0:	e010      	b.n	37e4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    37c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37c4:	009b      	lsls	r3, r3, #2
    37c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    37ca:	4413      	add	r3, r2
    37cc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    37d0:	461a      	mov	r2, r3
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	429a      	cmp	r2, r3
    37d6:	d102      	bne.n	37de <_get_hardware_offset+0x3e>
			return i;
    37d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37da:	b2db      	uxtb	r3, r3
    37dc:	e006      	b.n	37ec <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    37de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37e0:	3301      	adds	r3, #1
    37e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    37e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37e6:	2b07      	cmp	r3, #7
    37e8:	d9eb      	bls.n	37c2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    37ea:	2300      	movs	r3, #0
}
    37ec:	4618      	mov	r0, r3
    37ee:	3734      	adds	r7, #52	; 0x34
    37f0:	46bd      	mov	sp, r7
    37f2:	bcb0      	pop	{r4, r5, r7}
    37f4:	4770      	bx	lr
    37f6:	bf00      	nop
    37f8:	000059a0 	.word	0x000059a0

000037fc <hri_tc_wait_for_sync>:
{
    37fc:	b480      	push	{r7}
    37fe:	b083      	sub	sp, #12
    3800:	af00      	add	r7, sp, #0
    3802:	6078      	str	r0, [r7, #4]
    3804:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3806:	bf00      	nop
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	691a      	ldr	r2, [r3, #16]
    380c:	683b      	ldr	r3, [r7, #0]
    380e:	4013      	ands	r3, r2
    3810:	2b00      	cmp	r3, #0
    3812:	d1f9      	bne.n	3808 <hri_tc_wait_for_sync+0xc>
}
    3814:	bf00      	nop
    3816:	370c      	adds	r7, #12
    3818:	46bd      	mov	sp, r7
    381a:	f85d 7b04 	ldr.w	r7, [sp], #4
    381e:	4770      	bx	lr

00003820 <hri_tc_is_syncing>:
{
    3820:	b480      	push	{r7}
    3822:	b083      	sub	sp, #12
    3824:	af00      	add	r7, sp, #0
    3826:	6078      	str	r0, [r7, #4]
    3828:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	691a      	ldr	r2, [r3, #16]
    382e:	683b      	ldr	r3, [r7, #0]
    3830:	4013      	ands	r3, r2
    3832:	2b00      	cmp	r3, #0
    3834:	bf14      	ite	ne
    3836:	2301      	movne	r3, #1
    3838:	2300      	moveq	r3, #0
    383a:	b2db      	uxtb	r3, r3
}
    383c:	4618      	mov	r0, r3
    383e:	370c      	adds	r7, #12
    3840:	46bd      	mov	sp, r7
    3842:	f85d 7b04 	ldr.w	r7, [sp], #4
    3846:	4770      	bx	lr

00003848 <hri_tc_write_CTRLB_reg>:
{
    3848:	b480      	push	{r7}
    384a:	b083      	sub	sp, #12
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
    3850:	460b      	mov	r3, r1
    3852:	70fb      	strb	r3, [r7, #3]
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    3854:	687b      	ldr	r3, [r7, #4]
    3856:	78fa      	ldrb	r2, [r7, #3]
    3858:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    385a:	78fb      	ldrb	r3, [r7, #3]
    385c:	43db      	mvns	r3, r3
    385e:	b2da      	uxtb	r2, r3
    3860:	687b      	ldr	r3, [r7, #4]
    3862:	711a      	strb	r2, [r3, #4]
}
    3864:	bf00      	nop
    3866:	370c      	adds	r7, #12
    3868:	46bd      	mov	sp, r7
    386a:	f85d 7b04 	ldr.w	r7, [sp], #4
    386e:	4770      	bx	lr

00003870 <hri_tc_write_INTEN_reg>:
{
    3870:	b480      	push	{r7}
    3872:	b083      	sub	sp, #12
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	460b      	mov	r3, r1
    387a:	70fb      	strb	r3, [r7, #3]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    387c:	687b      	ldr	r3, [r7, #4]
    387e:	78fa      	ldrb	r2, [r7, #3]
    3880:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    3882:	78fb      	ldrb	r3, [r7, #3]
    3884:	43db      	mvns	r3, r3
    3886:	b2da      	uxtb	r2, r3
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	721a      	strb	r2, [r3, #8]
}
    388c:	bf00      	nop
    388e:	370c      	adds	r7, #12
    3890:	46bd      	mov	sp, r7
    3892:	f85d 7b04 	ldr.w	r7, [sp], #4
    3896:	4770      	bx	lr

00003898 <hri_tc_write_CTRLA_ENABLE_bit>:
{
    3898:	b580      	push	{r7, lr}
    389a:	b084      	sub	sp, #16
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
    38a0:	460b      	mov	r3, r1
    38a2:	70fb      	strb	r3, [r7, #3]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	60fb      	str	r3, [r7, #12]
	tmp &= ~TC_CTRLA_ENABLE;
    38aa:	68fb      	ldr	r3, [r7, #12]
    38ac:	f023 0302 	bic.w	r3, r3, #2
    38b0:	60fb      	str	r3, [r7, #12]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    38b2:	78fb      	ldrb	r3, [r7, #3]
    38b4:	005b      	lsls	r3, r3, #1
    38b6:	461a      	mov	r2, r3
    38b8:	68fb      	ldr	r3, [r7, #12]
    38ba:	4313      	orrs	r3, r2
    38bc:	60fb      	str	r3, [r7, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	68fa      	ldr	r2, [r7, #12]
    38c2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    38c4:	2103      	movs	r1, #3
    38c6:	6878      	ldr	r0, [r7, #4]
    38c8:	4b02      	ldr	r3, [pc, #8]	; (38d4 <hri_tc_write_CTRLA_ENABLE_bit+0x3c>)
    38ca:	4798      	blx	r3
}
    38cc:	bf00      	nop
    38ce:	3710      	adds	r7, #16
    38d0:	46bd      	mov	sp, r7
    38d2:	bd80      	pop	{r7, pc}
    38d4:	000037fd 	.word	0x000037fd

000038d8 <hri_tc_clear_CTRLA_ENABLE_bit>:
{
    38d8:	b580      	push	{r7, lr}
    38da:	b082      	sub	sp, #8
    38dc:	af00      	add	r7, sp, #0
    38de:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	f023 0202 	bic.w	r2, r3, #2
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    38ec:	2103      	movs	r1, #3
    38ee:	6878      	ldr	r0, [r7, #4]
    38f0:	4b02      	ldr	r3, [pc, #8]	; (38fc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    38f2:	4798      	blx	r3
}
    38f4:	bf00      	nop
    38f6:	3708      	adds	r7, #8
    38f8:	46bd      	mov	sp, r7
    38fa:	bd80      	pop	{r7, pc}
    38fc:	000037fd 	.word	0x000037fd

00003900 <hri_tc_get_CTRLA_reg>:
{
    3900:	b580      	push	{r7, lr}
    3902:	b084      	sub	sp, #16
    3904:	af00      	add	r7, sp, #0
    3906:	6078      	str	r0, [r7, #4]
    3908:	6039      	str	r1, [r7, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    390a:	2103      	movs	r1, #3
    390c:	6878      	ldr	r0, [r7, #4]
    390e:	4b07      	ldr	r3, [pc, #28]	; (392c <hri_tc_get_CTRLA_reg+0x2c>)
    3910:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3918:	68fa      	ldr	r2, [r7, #12]
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	4013      	ands	r3, r2
    391e:	60fb      	str	r3, [r7, #12]
	return tmp;
    3920:	68fb      	ldr	r3, [r7, #12]
}
    3922:	4618      	mov	r0, r3
    3924:	3710      	adds	r7, #16
    3926:	46bd      	mov	sp, r7
    3928:	bd80      	pop	{r7, pc}
    392a:	bf00      	nop
    392c:	000037fd 	.word	0x000037fd

00003930 <hri_tc_write_CTRLA_reg>:
{
    3930:	b580      	push	{r7, lr}
    3932:	b082      	sub	sp, #8
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
    3938:	6039      	str	r1, [r7, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	683a      	ldr	r2, [r7, #0]
    393e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3940:	2103      	movs	r1, #3
    3942:	6878      	ldr	r0, [r7, #4]
    3944:	4b02      	ldr	r3, [pc, #8]	; (3950 <hri_tc_write_CTRLA_reg+0x20>)
    3946:	4798      	blx	r3
}
    3948:	bf00      	nop
    394a:	3708      	adds	r7, #8
    394c:	46bd      	mov	sp, r7
    394e:	bd80      	pop	{r7, pc}
    3950:	000037fd 	.word	0x000037fd

00003954 <hri_tc_write_EVCTRL_reg>:
{
    3954:	b480      	push	{r7}
    3956:	b083      	sub	sp, #12
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	460b      	mov	r3, r1
    395e:	807b      	strh	r3, [r7, #2]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3960:	687b      	ldr	r3, [r7, #4]
    3962:	887a      	ldrh	r2, [r7, #2]
    3964:	80da      	strh	r2, [r3, #6]
}
    3966:	bf00      	nop
    3968:	370c      	adds	r7, #12
    396a:	46bd      	mov	sp, r7
    396c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3970:	4770      	bx	lr
	...

00003974 <TIMER_0_init>:

/**
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{
    3974:	b580      	push	{r7, lr}
    3976:	af00      	add	r7, sp, #0

	if (!hri_tc_is_syncing(TC0, TC_SYNCBUSY_SWRST)) {
    3978:	2101      	movs	r1, #1
    397a:	481b      	ldr	r0, [pc, #108]	; (39e8 <TIMER_0_init+0x74>)
    397c:	4b1b      	ldr	r3, [pc, #108]	; (39ec <TIMER_0_init+0x78>)
    397e:	4798      	blx	r3
    3980:	4603      	mov	r3, r0
    3982:	f083 0301 	eor.w	r3, r3, #1
    3986:	b2db      	uxtb	r3, r3
    3988:	2b00      	cmp	r3, #0
    398a:	d011      	beq.n	39b0 <TIMER_0_init+0x3c>
		if (hri_tc_get_CTRLA_reg(TC0, TC_CTRLA_ENABLE)) {
    398c:	2102      	movs	r1, #2
    398e:	4816      	ldr	r0, [pc, #88]	; (39e8 <TIMER_0_init+0x74>)
    3990:	4b17      	ldr	r3, [pc, #92]	; (39f0 <TIMER_0_init+0x7c>)
    3992:	4798      	blx	r3
    3994:	4603      	mov	r3, r0
    3996:	2b00      	cmp	r3, #0
    3998:	d006      	beq.n	39a8 <TIMER_0_init+0x34>
			hri_tc_clear_CTRLA_ENABLE_bit(TC0);
    399a:	4813      	ldr	r0, [pc, #76]	; (39e8 <TIMER_0_init+0x74>)
    399c:	4b15      	ldr	r3, [pc, #84]	; (39f4 <TIMER_0_init+0x80>)
    399e:	4798      	blx	r3
			hri_tc_wait_for_sync(TC0, TC_SYNCBUSY_ENABLE);
    39a0:	2102      	movs	r1, #2
    39a2:	4811      	ldr	r0, [pc, #68]	; (39e8 <TIMER_0_init+0x74>)
    39a4:	4b14      	ldr	r3, [pc, #80]	; (39f8 <TIMER_0_init+0x84>)
    39a6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(TC0, TC_CTRLA_SWRST);
    39a8:	2101      	movs	r1, #1
    39aa:	480f      	ldr	r0, [pc, #60]	; (39e8 <TIMER_0_init+0x74>)
    39ac:	4b13      	ldr	r3, [pc, #76]	; (39fc <TIMER_0_init+0x88>)
    39ae:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(TC0, TC_SYNCBUSY_SWRST);
    39b0:	2101      	movs	r1, #1
    39b2:	480d      	ldr	r0, [pc, #52]	; (39e8 <TIMER_0_init+0x74>)
    39b4:	4b10      	ldr	r3, [pc, #64]	; (39f8 <TIMER_0_init+0x84>)
    39b6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(TC0,
    39b8:	4911      	ldr	r1, [pc, #68]	; (3a00 <TIMER_0_init+0x8c>)
    39ba:	480b      	ldr	r0, [pc, #44]	; (39e8 <TIMER_0_init+0x74>)
    39bc:	4b0f      	ldr	r3, [pc, #60]	; (39fc <TIMER_0_init+0x88>)
    39be:	4798      	blx	r3
	                           | 0 << TC_CTRLA_ONDEMAND_Pos  /* Clock On Demand: disabled */
	                           | 0 << TC_CTRLA_RUNSTDBY_Pos  /* Run in Standby: disabled */
	                           | 3 << TC_CTRLA_PRESCALER_Pos /* Setting: 3 */
	                           | 0x0 << TC_CTRLA_MODE_Pos);  /* Operating Mode: 0x0 */

	hri_tc_write_CTRLB_reg(TC0,
    39c0:	2100      	movs	r1, #0
    39c2:	4809      	ldr	r0, [pc, #36]	; (39e8 <TIMER_0_init+0x74>)
    39c4:	4b0f      	ldr	r3, [pc, #60]	; (3a04 <TIMER_0_init+0x90>)
    39c6:	4798      	blx	r3

	// hri_tccount16_write_CC_reg(TC0, 1 ,0x0); /* Compare/Capture Value: 0x0 */

	// hri_tccount16_write_COUNT_reg(TC0,0x0); /* Counter Value: 0x0 */

	hri_tc_write_EVCTRL_reg(
    39c8:	2125      	movs	r1, #37	; 0x25
    39ca:	4807      	ldr	r0, [pc, #28]	; (39e8 <TIMER_0_init+0x74>)
    39cc:	4b0e      	ldr	r3, [pc, #56]	; (3a08 <TIMER_0_init+0x94>)
    39ce:	4798      	blx	r3
	        | 0 << TC_EVCTRL_OVFEO_Pos /* Overflow/Underflow Event Output Enable: disabled */
	        | 1 << TC_EVCTRL_TCEI_Pos  /* TC Event Input: enabled */
	        | 0 << TC_EVCTRL_TCINV_Pos /* TC Inverted Event Input: disabled */
	        | 5);                      /* Event Action: 5 */

	hri_tc_write_INTEN_reg(TC0,
    39d0:	2110      	movs	r1, #16
    39d2:	4805      	ldr	r0, [pc, #20]	; (39e8 <TIMER_0_init+0x74>)
    39d4:	4b0d      	ldr	r3, [pc, #52]	; (3a0c <TIMER_0_init+0x98>)
    39d6:	4798      	blx	r3
	                       1 << TC_INTENSET_MC0_Pos         /* Match or Capture Channel 0 Interrupt Enable: enabled */
	                           | 0 << TC_INTENSET_MC1_Pos   /* Match or Capture Channel 1 Interrupt Enable: disabled */
	                           | 0 << TC_INTENSET_ERR_Pos   /* Error Interrupt Enable: disabled */
	                           | 0 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC0, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    39d8:	2101      	movs	r1, #1
    39da:	4803      	ldr	r0, [pc, #12]	; (39e8 <TIMER_0_init+0x74>)
    39dc:	4b0c      	ldr	r3, [pc, #48]	; (3a10 <TIMER_0_init+0x9c>)
    39de:	4798      	blx	r3

	return 0;
    39e0:	2300      	movs	r3, #0
}
    39e2:	4618      	mov	r0, r3
    39e4:	bd80      	pop	{r7, pc}
    39e6:	bf00      	nop
    39e8:	40003800 	.word	0x40003800
    39ec:	00003821 	.word	0x00003821
    39f0:	00003901 	.word	0x00003901
    39f4:	000038d9 	.word	0x000038d9
    39f8:	000037fd 	.word	0x000037fd
    39fc:	00003931 	.word	0x00003931
    3a00:	00030300 	.word	0x00030300
    3a04:	00003849 	.word	0x00003849
    3a08:	00003955 	.word	0x00003955
    3a0c:	00003871 	.word	0x00003871
    3a10:	00003899 	.word	0x00003899

00003a14 <__NVIC_EnableIRQ>:
{
    3a14:	b480      	push	{r7}
    3a16:	b083      	sub	sp, #12
    3a18:	af00      	add	r7, sp, #0
    3a1a:	4603      	mov	r3, r0
    3a1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a22:	2b00      	cmp	r3, #0
    3a24:	db0b      	blt.n	3a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a26:	4909      	ldr	r1, [pc, #36]	; (3a4c <__NVIC_EnableIRQ+0x38>)
    3a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a2c:	095b      	lsrs	r3, r3, #5
    3a2e:	88fa      	ldrh	r2, [r7, #6]
    3a30:	f002 021f 	and.w	r2, r2, #31
    3a34:	2001      	movs	r0, #1
    3a36:	fa00 f202 	lsl.w	r2, r0, r2
    3a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3a3e:	bf00      	nop
    3a40:	370c      	adds	r7, #12
    3a42:	46bd      	mov	sp, r7
    3a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a48:	4770      	bx	lr
    3a4a:	bf00      	nop
    3a4c:	e000e100 	.word	0xe000e100

00003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3a50:	b480      	push	{r7}
    3a52:	b083      	sub	sp, #12
    3a54:	af00      	add	r7, sp, #0
    3a56:	4603      	mov	r3, r0
    3a58:	6039      	str	r1, [r7, #0]
    3a5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a60:	2b00      	cmp	r3, #0
    3a62:	db0a      	blt.n	3a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a64:	490d      	ldr	r1, [pc, #52]	; (3a9c <__NVIC_SetPriority+0x4c>)
    3a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a6a:	683a      	ldr	r2, [r7, #0]
    3a6c:	b2d2      	uxtb	r2, r2
    3a6e:	0152      	lsls	r2, r2, #5
    3a70:	b2d2      	uxtb	r2, r2
    3a72:	440b      	add	r3, r1
    3a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    3a78:	e00a      	b.n	3a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a7a:	4909      	ldr	r1, [pc, #36]	; (3aa0 <__NVIC_SetPriority+0x50>)
    3a7c:	88fb      	ldrh	r3, [r7, #6]
    3a7e:	f003 030f 	and.w	r3, r3, #15
    3a82:	3b04      	subs	r3, #4
    3a84:	683a      	ldr	r2, [r7, #0]
    3a86:	b2d2      	uxtb	r2, r2
    3a88:	0152      	lsls	r2, r2, #5
    3a8a:	b2d2      	uxtb	r2, r2
    3a8c:	440b      	add	r3, r1
    3a8e:	761a      	strb	r2, [r3, #24]
}
    3a90:	bf00      	nop
    3a92:	370c      	adds	r7, #12
    3a94:	46bd      	mov	sp, r7
    3a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a9a:	4770      	bx	lr
    3a9c:	e000e100 	.word	0xe000e100
    3aa0:	e000ed00 	.word	0xe000ed00

00003aa4 <hri_port_read_DIR_reg>:
{
    3aa4:	b480      	push	{r7}
    3aa6:	b083      	sub	sp, #12
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
    3aac:	460b      	mov	r3, r1
    3aae:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3ab0:	78fb      	ldrb	r3, [r7, #3]
    3ab2:	687a      	ldr	r2, [r7, #4]
    3ab4:	01db      	lsls	r3, r3, #7
    3ab6:	4413      	add	r3, r2
    3ab8:	681b      	ldr	r3, [r3, #0]
}
    3aba:	4618      	mov	r0, r3
    3abc:	370c      	adds	r7, #12
    3abe:	46bd      	mov	sp, r7
    3ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac4:	4770      	bx	lr

00003ac6 <hri_port_set_OUT_reg>:
{
    3ac6:	b480      	push	{r7}
    3ac8:	b085      	sub	sp, #20
    3aca:	af00      	add	r7, sp, #0
    3acc:	60f8      	str	r0, [r7, #12]
    3ace:	460b      	mov	r3, r1
    3ad0:	607a      	str	r2, [r7, #4]
    3ad2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ad4:	7afb      	ldrb	r3, [r7, #11]
    3ad6:	68fa      	ldr	r2, [r7, #12]
    3ad8:	01db      	lsls	r3, r3, #7
    3ada:	4413      	add	r3, r2
    3adc:	3318      	adds	r3, #24
    3ade:	687a      	ldr	r2, [r7, #4]
    3ae0:	601a      	str	r2, [r3, #0]
}
    3ae2:	bf00      	nop
    3ae4:	3714      	adds	r7, #20
    3ae6:	46bd      	mov	sp, r7
    3ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aec:	4770      	bx	lr

00003aee <hri_port_read_OUT_reg>:
{
    3aee:	b480      	push	{r7}
    3af0:	b083      	sub	sp, #12
    3af2:	af00      	add	r7, sp, #0
    3af4:	6078      	str	r0, [r7, #4]
    3af6:	460b      	mov	r3, r1
    3af8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3afa:	78fb      	ldrb	r3, [r7, #3]
    3afc:	687a      	ldr	r2, [r7, #4]
    3afe:	01db      	lsls	r3, r3, #7
    3b00:	4413      	add	r3, r2
    3b02:	3310      	adds	r3, #16
    3b04:	681b      	ldr	r3, [r3, #0]
}
    3b06:	4618      	mov	r0, r3
    3b08:	370c      	adds	r7, #12
    3b0a:	46bd      	mov	sp, r7
    3b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b10:	4770      	bx	lr

00003b12 <hri_port_clear_OUT_reg>:
{
    3b12:	b480      	push	{r7}
    3b14:	b085      	sub	sp, #20
    3b16:	af00      	add	r7, sp, #0
    3b18:	60f8      	str	r0, [r7, #12]
    3b1a:	460b      	mov	r3, r1
    3b1c:	607a      	str	r2, [r7, #4]
    3b1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b20:	7afb      	ldrb	r3, [r7, #11]
    3b22:	68fa      	ldr	r2, [r7, #12]
    3b24:	01db      	lsls	r3, r3, #7
    3b26:	4413      	add	r3, r2
    3b28:	3314      	adds	r3, #20
    3b2a:	687a      	ldr	r2, [r7, #4]
    3b2c:	601a      	str	r2, [r3, #0]
}
    3b2e:	bf00      	nop
    3b30:	3714      	adds	r7, #20
    3b32:	46bd      	mov	sp, r7
    3b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b38:	4770      	bx	lr

00003b3a <hri_port_read_IN_reg>:
{
    3b3a:	b480      	push	{r7}
    3b3c:	b083      	sub	sp, #12
    3b3e:	af00      	add	r7, sp, #0
    3b40:	6078      	str	r0, [r7, #4]
    3b42:	460b      	mov	r3, r1
    3b44:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3b46:	78fb      	ldrb	r3, [r7, #3]
    3b48:	687a      	ldr	r2, [r7, #4]
    3b4a:	01db      	lsls	r3, r3, #7
    3b4c:	4413      	add	r3, r2
    3b4e:	3320      	adds	r3, #32
    3b50:	681b      	ldr	r3, [r3, #0]
}
    3b52:	4618      	mov	r0, r3
    3b54:	370c      	adds	r7, #12
    3b56:	46bd      	mov	sp, r7
    3b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b5c:	4770      	bx	lr

00003b5e <hri_tc_wait_for_sync>:
{
    3b5e:	b480      	push	{r7}
    3b60:	b083      	sub	sp, #12
    3b62:	af00      	add	r7, sp, #0
    3b64:	6078      	str	r0, [r7, #4]
    3b66:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3b68:	bf00      	nop
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	691a      	ldr	r2, [r3, #16]
    3b6e:	683b      	ldr	r3, [r7, #0]
    3b70:	4013      	ands	r3, r2
    3b72:	2b00      	cmp	r3, #0
    3b74:	d1f9      	bne.n	3b6a <hri_tc_wait_for_sync+0xc>
}
    3b76:	bf00      	nop
    3b78:	370c      	adds	r7, #12
    3b7a:	46bd      	mov	sp, r7
    3b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b80:	4770      	bx	lr

00003b82 <hri_tc_clear_INTFLAG_MC0_bit>:
{
    3b82:	b480      	push	{r7}
    3b84:	b083      	sub	sp, #12
    3b86:	af00      	add	r7, sp, #0
    3b88:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	2210      	movs	r2, #16
    3b8e:	729a      	strb	r2, [r3, #10]
}
    3b90:	bf00      	nop
    3b92:	370c      	adds	r7, #12
    3b94:	46bd      	mov	sp, r7
    3b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b9a:	4770      	bx	lr

00003b9c <hri_tccount16_read_CC_reg>:
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	b082      	sub	sp, #8
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
    3ba4:	460b      	mov	r3, r1
    3ba6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    3ba8:	21c0      	movs	r1, #192	; 0xc0
    3baa:	6878      	ldr	r0, [r7, #4]
    3bac:	4b06      	ldr	r3, [pc, #24]	; (3bc8 <hri_tccount16_read_CC_reg+0x2c>)
    3bae:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    3bb0:	78fb      	ldrb	r3, [r7, #3]
    3bb2:	687a      	ldr	r2, [r7, #4]
    3bb4:	330c      	adds	r3, #12
    3bb6:	005b      	lsls	r3, r3, #1
    3bb8:	4413      	add	r3, r2
    3bba:	889b      	ldrh	r3, [r3, #4]
    3bbc:	b29b      	uxth	r3, r3
}
    3bbe:	4618      	mov	r0, r3
    3bc0:	3708      	adds	r7, #8
    3bc2:	46bd      	mov	sp, r7
    3bc4:	bd80      	pop	{r7, pc}
    3bc6:	bf00      	nop
    3bc8:	00003b5f 	.word	0x00003b5f

00003bcc <_gpio_set_level>:
{
    3bcc:	b580      	push	{r7, lr}
    3bce:	b082      	sub	sp, #8
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	4603      	mov	r3, r0
    3bd4:	6039      	str	r1, [r7, #0]
    3bd6:	71fb      	strb	r3, [r7, #7]
    3bd8:	4613      	mov	r3, r2
    3bda:	71bb      	strb	r3, [r7, #6]
	if (level) {
    3bdc:	79bb      	ldrb	r3, [r7, #6]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d006      	beq.n	3bf0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3be2:	79fb      	ldrb	r3, [r7, #7]
    3be4:	683a      	ldr	r2, [r7, #0]
    3be6:	4619      	mov	r1, r3
    3be8:	4806      	ldr	r0, [pc, #24]	; (3c04 <_gpio_set_level+0x38>)
    3bea:	4b07      	ldr	r3, [pc, #28]	; (3c08 <_gpio_set_level+0x3c>)
    3bec:	4798      	blx	r3
}
    3bee:	e005      	b.n	3bfc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    3bf0:	79fb      	ldrb	r3, [r7, #7]
    3bf2:	683a      	ldr	r2, [r7, #0]
    3bf4:	4619      	mov	r1, r3
    3bf6:	4803      	ldr	r0, [pc, #12]	; (3c04 <_gpio_set_level+0x38>)
    3bf8:	4b04      	ldr	r3, [pc, #16]	; (3c0c <_gpio_set_level+0x40>)
    3bfa:	4798      	blx	r3
}
    3bfc:	bf00      	nop
    3bfe:	3708      	adds	r7, #8
    3c00:	46bd      	mov	sp, r7
    3c02:	bd80      	pop	{r7, pc}
    3c04:	41008000 	.word	0x41008000
    3c08:	00003ac7 	.word	0x00003ac7
    3c0c:	00003b13 	.word	0x00003b13

00003c10 <_gpio_get_level>:
{
    3c10:	b580      	push	{r7, lr}
    3c12:	b086      	sub	sp, #24
    3c14:	af00      	add	r7, sp, #0
    3c16:	4603      	mov	r3, r0
    3c18:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
    3c1a:	f107 030c 	add.w	r3, r7, #12
    3c1e:	4618      	mov	r0, r3
    3c20:	4b13      	ldr	r3, [pc, #76]	; (3c70 <_gpio_get_level+0x60>)
    3c22:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    3c24:	79fb      	ldrb	r3, [r7, #7]
    3c26:	4619      	mov	r1, r3
    3c28:	4812      	ldr	r0, [pc, #72]	; (3c74 <_gpio_get_level+0x64>)
    3c2a:	4b13      	ldr	r3, [pc, #76]	; (3c78 <_gpio_get_level+0x68>)
    3c2c:	4798      	blx	r3
    3c2e:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3c30:	79fb      	ldrb	r3, [r7, #7]
    3c32:	4619      	mov	r1, r3
    3c34:	480f      	ldr	r0, [pc, #60]	; (3c74 <_gpio_get_level+0x64>)
    3c36:	4b11      	ldr	r3, [pc, #68]	; (3c7c <_gpio_get_level+0x6c>)
    3c38:	4798      	blx	r3
    3c3a:	4602      	mov	r2, r0
    3c3c:	697b      	ldr	r3, [r7, #20]
    3c3e:	43db      	mvns	r3, r3
    3c40:	4013      	ands	r3, r2
    3c42:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3c44:	79fb      	ldrb	r3, [r7, #7]
    3c46:	4619      	mov	r1, r3
    3c48:	480a      	ldr	r0, [pc, #40]	; (3c74 <_gpio_get_level+0x64>)
    3c4a:	4b0d      	ldr	r3, [pc, #52]	; (3c80 <_gpio_get_level+0x70>)
    3c4c:	4798      	blx	r3
    3c4e:	4602      	mov	r2, r0
    3c50:	697b      	ldr	r3, [r7, #20]
    3c52:	4013      	ands	r3, r2
    3c54:	693a      	ldr	r2, [r7, #16]
    3c56:	4313      	orrs	r3, r2
    3c58:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3c5a:	f107 030c 	add.w	r3, r7, #12
    3c5e:	4618      	mov	r0, r3
    3c60:	4b08      	ldr	r3, [pc, #32]	; (3c84 <_gpio_get_level+0x74>)
    3c62:	4798      	blx	r3
	return tmp;
    3c64:	693b      	ldr	r3, [r7, #16]
}
    3c66:	4618      	mov	r0, r3
    3c68:	3718      	adds	r7, #24
    3c6a:	46bd      	mov	sp, r7
    3c6c:	bd80      	pop	{r7, pc}
    3c6e:	bf00      	nop
    3c70:	00000d0d 	.word	0x00000d0d
    3c74:	41008000 	.word	0x41008000
    3c78:	00003aa5 	.word	0x00003aa5
    3c7c:	00003b3b 	.word	0x00003b3b
    3c80:	00003aef 	.word	0x00003aef
    3c84:	00000d33 	.word	0x00000d33

00003c88 <gpio_set_pin_level>:
{
    3c88:	b580      	push	{r7, lr}
    3c8a:	b082      	sub	sp, #8
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	4603      	mov	r3, r0
    3c90:	460a      	mov	r2, r1
    3c92:	71fb      	strb	r3, [r7, #7]
    3c94:	4613      	mov	r3, r2
    3c96:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3c98:	79fb      	ldrb	r3, [r7, #7]
    3c9a:	095b      	lsrs	r3, r3, #5
    3c9c:	b2d8      	uxtb	r0, r3
    3c9e:	79fb      	ldrb	r3, [r7, #7]
    3ca0:	f003 031f 	and.w	r3, r3, #31
    3ca4:	2201      	movs	r2, #1
    3ca6:	fa02 f303 	lsl.w	r3, r2, r3
    3caa:	79ba      	ldrb	r2, [r7, #6]
    3cac:	4619      	mov	r1, r3
    3cae:	4b03      	ldr	r3, [pc, #12]	; (3cbc <gpio_set_pin_level+0x34>)
    3cb0:	4798      	blx	r3
}
    3cb2:	bf00      	nop
    3cb4:	3708      	adds	r7, #8
    3cb6:	46bd      	mov	sp, r7
    3cb8:	bd80      	pop	{r7, pc}
    3cba:	bf00      	nop
    3cbc:	00003bcd 	.word	0x00003bcd

00003cc0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b082      	sub	sp, #8
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	4603      	mov	r3, r0
    3cc8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3cca:	79fb      	ldrb	r3, [r7, #7]
    3ccc:	095b      	lsrs	r3, r3, #5
    3cce:	b2db      	uxtb	r3, r3
    3cd0:	4618      	mov	r0, r3
    3cd2:	4b09      	ldr	r3, [pc, #36]	; (3cf8 <gpio_get_pin_level+0x38>)
    3cd4:	4798      	blx	r3
    3cd6:	4601      	mov	r1, r0
    3cd8:	79fb      	ldrb	r3, [r7, #7]
    3cda:	f003 031f 	and.w	r3, r3, #31
    3cde:	2201      	movs	r2, #1
    3ce0:	fa02 f303 	lsl.w	r3, r2, r3
    3ce4:	400b      	ands	r3, r1
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	bf14      	ite	ne
    3cea:	2301      	movne	r3, #1
    3cec:	2300      	moveq	r3, #0
    3cee:	b2db      	uxtb	r3, r3
}
    3cf0:	4618      	mov	r0, r3
    3cf2:	3708      	adds	r7, #8
    3cf4:	46bd      	mov	sp, r7
    3cf6:	bd80      	pop	{r7, pc}
    3cf8:	00003c11 	.word	0x00003c11

00003cfc <TC0_Handler>:
static int32_t level = 0;
int32_t controlled_pos = 0;
int32_t controlled_vel = 0;

// Will be fired at each rising edge of HAL sensor A
void TC0_Handler(){
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
	hri_tc_clear_INTFLAG_MC0_bit(TC0);
    3d02:	4829      	ldr	r0, [pc, #164]	; (3da8 <TC0_Handler+0xac>)
    3d04:	4b29      	ldr	r3, [pc, #164]	; (3dac <TC0_Handler+0xb0>)
    3d06:	4798      	blx	r3
	
	// periodCC0 * 60 / (1440 * 1.5MHz)
	periodCC0 = (uint32_t)hri_tccount16_read_CC_reg(TC0, 0); 
    3d08:	2100      	movs	r1, #0
    3d0a:	4827      	ldr	r0, [pc, #156]	; (3da8 <TC0_Handler+0xac>)
    3d0c:	4b28      	ldr	r3, [pc, #160]	; (3db0 <TC0_Handler+0xb4>)
    3d0e:	4798      	blx	r3
    3d10:	4603      	mov	r3, r0
    3d12:	461a      	mov	r2, r3
    3d14:	4b27      	ldr	r3, [pc, #156]	; (3db4 <TC0_Handler+0xb8>)
    3d16:	601a      	str	r2, [r3, #0]
	pulses++;
    3d18:	4b27      	ldr	r3, [pc, #156]	; (3db8 <TC0_Handler+0xbc>)
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	3301      	adds	r3, #1
    3d1e:	4a26      	ldr	r2, [pc, #152]	; (3db8 <TC0_Handler+0xbc>)
    3d20:	6013      	str	r3, [r2, #0]
	
	// Getting the direction and the number of steps in each direction
	
	// read HAL_SENSOR_B 
	bool hal_sensor_b = gpio_get_pin_level(HAL_SENSOR_B);
    3d22:	2021      	movs	r0, #33	; 0x21
    3d24:	4b25      	ldr	r3, [pc, #148]	; (3dbc <TC0_Handler+0xc0>)
    3d26:	4798      	blx	r3
    3d28:	4603      	mov	r3, r0
    3d2a:	71fb      	strb	r3, [r7, #7]
	
	if ((hal_sensor_b == false) && (direction == -1))
    3d2c:	79fb      	ldrb	r3, [r7, #7]
    3d2e:	f083 0301 	eor.w	r3, r3, #1
    3d32:	b2db      	uxtb	r3, r3
    3d34:	2b00      	cmp	r3, #0
    3d36:	d009      	beq.n	3d4c <TC0_Handler+0x50>
    3d38:	4b21      	ldr	r3, [pc, #132]	; (3dc0 <TC0_Handler+0xc4>)
    3d3a:	f993 3000 	ldrsb.w	r3, [r3]
    3d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d42:	d103      	bne.n	3d4c <TC0_Handler+0x50>
	{
		direction = 1; // Reverse
    3d44:	4b1e      	ldr	r3, [pc, #120]	; (3dc0 <TC0_Handler+0xc4>)
    3d46:	2201      	movs	r2, #1
    3d48:	701a      	strb	r2, [r3, #0]
    3d4a:	e00a      	b.n	3d62 <TC0_Handler+0x66>
	}
	else if ((hal_sensor_b == true) && (direction == 1))
    3d4c:	79fb      	ldrb	r3, [r7, #7]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d007      	beq.n	3d62 <TC0_Handler+0x66>
    3d52:	4b1b      	ldr	r3, [pc, #108]	; (3dc0 <TC0_Handler+0xc4>)
    3d54:	f993 3000 	ldrsb.w	r3, [r3]
    3d58:	2b01      	cmp	r3, #1
    3d5a:	d102      	bne.n	3d62 <TC0_Handler+0x66>
	{
		direction = -1;
    3d5c:	4b18      	ldr	r3, [pc, #96]	; (3dc0 <TC0_Handler+0xc4>)
    3d5e:	22ff      	movs	r2, #255	; 0xff
    3d60:	701a      	strb	r2, [r3, #0]
	}
	
	if (direction == 1)
    3d62:	4b17      	ldr	r3, [pc, #92]	; (3dc0 <TC0_Handler+0xc4>)
    3d64:	f993 3000 	ldrsb.w	r3, [r3]
    3d68:	2b01      	cmp	r3, #1
    3d6a:	d105      	bne.n	3d78 <TC0_Handler+0x7c>
	{
		steps++;
    3d6c:	4b15      	ldr	r3, [pc, #84]	; (3dc4 <TC0_Handler+0xc8>)
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	3301      	adds	r3, #1
    3d72:	4a14      	ldr	r2, [pc, #80]	; (3dc4 <TC0_Handler+0xc8>)
    3d74:	6013      	str	r3, [r2, #0]
    3d76:	e004      	b.n	3d82 <TC0_Handler+0x86>
	}
	else
	{
		steps--;
    3d78:	4b12      	ldr	r3, [pc, #72]	; (3dc4 <TC0_Handler+0xc8>)
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	3b01      	subs	r3, #1
    3d7e:	4a11      	ldr	r2, [pc, #68]	; (3dc4 <TC0_Handler+0xc8>)
    3d80:	6013      	str	r3, [r2, #0]
	}
	
	if ((steps > 30000) || (steps < -30000))
    3d82:	4b10      	ldr	r3, [pc, #64]	; (3dc4 <TC0_Handler+0xc8>)
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	f247 5230 	movw	r2, #30000	; 0x7530
    3d8a:	4293      	cmp	r3, r2
    3d8c:	dc04      	bgt.n	3d98 <TC0_Handler+0x9c>
    3d8e:	4b0d      	ldr	r3, [pc, #52]	; (3dc4 <TC0_Handler+0xc8>)
    3d90:	681b      	ldr	r3, [r3, #0]
    3d92:	4a0d      	ldr	r2, [pc, #52]	; (3dc8 <TC0_Handler+0xcc>)
    3d94:	4293      	cmp	r3, r2
    3d96:	da02      	bge.n	3d9e <TC0_Handler+0xa2>
	{
		steps = 0;
    3d98:	4b0a      	ldr	r3, [pc, #40]	; (3dc4 <TC0_Handler+0xc8>)
    3d9a:	2200      	movs	r2, #0
    3d9c:	601a      	str	r2, [r3, #0]
	}	
}
    3d9e:	bf00      	nop
    3da0:	3708      	adds	r7, #8
    3da2:	46bd      	mov	sp, r7
    3da4:	bd80      	pop	{r7, pc}
    3da6:	bf00      	nop
    3da8:	40003800 	.word	0x40003800
    3dac:	00003b83 	.word	0x00003b83
    3db0:	00003b9d 	.word	0x00003b9d
    3db4:	2000012c 	.word	0x2000012c
    3db8:	20000130 	.word	0x20000130
    3dbc:	00003cc1 	.word	0x00003cc1
    3dc0:	20000040 	.word	0x20000040
    3dc4:	20000138 	.word	0x20000138
    3dc8:	ffff8ad0 	.word	0xffff8ad0

00003dcc <uart_rx_cb>:

static void uart_rx_cb(const struct usart_async_descriptor *const io_descr)
{
    3dcc:	b480      	push	{r7}
    3dce:	b083      	sub	sp, #12
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
	/* Receive completed */
	data_arrived = 1;
    3dd4:	4b04      	ldr	r3, [pc, #16]	; (3de8 <uart_rx_cb+0x1c>)
    3dd6:	2201      	movs	r2, #1
    3dd8:	601a      	str	r2, [r3, #0]
}
    3dda:	bf00      	nop
    3ddc:	370c      	adds	r7, #12
    3dde:	46bd      	mov	sp, r7
    3de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de4:	4770      	bx	lr
    3de6:	bf00      	nop
    3de8:	20000124 	.word	0x20000124

00003dec <TIMER_1_task1_cb>:

/**
 *	capture the number of pulses in the past 10ms
 */
static void TIMER_1_task1_cb(const struct timer_task *const timer_task)
{
    3dec:	b590      	push	{r4, r7, lr}
    3dee:	b083      	sub	sp, #12
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
	rpm = (pulses * 100 /*Hz*/ * 60.0 /*Min*/ / (1440)); 
    3df4:	4b13      	ldr	r3, [pc, #76]	; (3e44 <TIMER_1_task1_cb+0x58>)
    3df6:	681b      	ldr	r3, [r3, #0]
    3df8:	2264      	movs	r2, #100	; 0x64
    3dfa:	fb02 f203 	mul.w	r2, r2, r3
    3dfe:	4b12      	ldr	r3, [pc, #72]	; (3e48 <TIMER_1_task1_cb+0x5c>)
    3e00:	4610      	mov	r0, r2
    3e02:	4798      	blx	r3
    3e04:	4c11      	ldr	r4, [pc, #68]	; (3e4c <TIMER_1_task1_cb+0x60>)
    3e06:	f04f 0200 	mov.w	r2, #0
    3e0a:	4b11      	ldr	r3, [pc, #68]	; (3e50 <TIMER_1_task1_cb+0x64>)
    3e0c:	47a0      	blx	r4
    3e0e:	4603      	mov	r3, r0
    3e10:	460c      	mov	r4, r1
    3e12:	4618      	mov	r0, r3
    3e14:	4621      	mov	r1, r4
    3e16:	4c0f      	ldr	r4, [pc, #60]	; (3e54 <TIMER_1_task1_cb+0x68>)
    3e18:	f04f 0200 	mov.w	r2, #0
    3e1c:	4b0e      	ldr	r3, [pc, #56]	; (3e58 <TIMER_1_task1_cb+0x6c>)
    3e1e:	47a0      	blx	r4
    3e20:	4603      	mov	r3, r0
    3e22:	460c      	mov	r4, r1
    3e24:	4619      	mov	r1, r3
    3e26:	4622      	mov	r2, r4
    3e28:	4b0c      	ldr	r3, [pc, #48]	; (3e5c <TIMER_1_task1_cb+0x70>)
    3e2a:	4608      	mov	r0, r1
    3e2c:	4611      	mov	r1, r2
    3e2e:	4798      	blx	r3
    3e30:	4602      	mov	r2, r0
    3e32:	4b0b      	ldr	r3, [pc, #44]	; (3e60 <TIMER_1_task1_cb+0x74>)
    3e34:	601a      	str	r2, [r3, #0]
	pulses = 0;
    3e36:	4b03      	ldr	r3, [pc, #12]	; (3e44 <TIMER_1_task1_cb+0x58>)
    3e38:	2200      	movs	r2, #0
    3e3a:	601a      	str	r2, [r3, #0]
}
    3e3c:	bf00      	nop
    3e3e:	370c      	adds	r7, #12
    3e40:	46bd      	mov	sp, r7
    3e42:	bd90      	pop	{r4, r7, pc}
    3e44:	20000130 	.word	0x20000130
    3e48:	000048dd 	.word	0x000048dd
    3e4c:	000049c9 	.word	0x000049c9
    3e50:	404e0000 	.word	0x404e0000
    3e54:	00004c1d 	.word	0x00004c1d
    3e58:	40968000 	.word	0x40968000
    3e5c:	00004ded 	.word	0x00004ded
    3e60:	20000134 	.word	0x20000134

00003e64 <TIMER_1_task2_cb>:

// send the RPM value every 100ms
static void TIMER_1_task2_cb(const struct timer_task *const timer_task)
{
    3e64:	b590      	push	{r4, r7, lr}
    3e66:	b087      	sub	sp, #28
    3e68:	af02      	add	r7, sp, #8
    3e6a:	6078      	str	r0, [r7, #4]
	//size_t payload_length = sprintf(payload, "[position = %d | speed = %lu RPM | direction = %d]\n",steps, rpm, direction);
	size_t string_length = sprintf(string, "[position = %d | speed = %d RPM | dutycycle_speed = %ld | position_control = %ld]\n",steps, rpm*direction, controlled_vel, controlled_pos);
    3e6c:	4b11      	ldr	r3, [pc, #68]	; (3eb4 <TIMER_1_task2_cb+0x50>)
    3e6e:	6819      	ldr	r1, [r3, #0]
    3e70:	4b11      	ldr	r3, [pc, #68]	; (3eb8 <TIMER_1_task2_cb+0x54>)
    3e72:	f993 3000 	ldrsb.w	r3, [r3]
    3e76:	461a      	mov	r2, r3
    3e78:	4b10      	ldr	r3, [pc, #64]	; (3ebc <TIMER_1_task2_cb+0x58>)
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	fb03 f002 	mul.w	r0, r3, r2
    3e80:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <TIMER_1_task2_cb+0x5c>)
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	4a0f      	ldr	r2, [pc, #60]	; (3ec4 <TIMER_1_task2_cb+0x60>)
    3e86:	6812      	ldr	r2, [r2, #0]
    3e88:	9201      	str	r2, [sp, #4]
    3e8a:	9300      	str	r3, [sp, #0]
    3e8c:	4603      	mov	r3, r0
    3e8e:	460a      	mov	r2, r1
    3e90:	490d      	ldr	r1, [pc, #52]	; (3ec8 <TIMER_1_task2_cb+0x64>)
    3e92:	480e      	ldr	r0, [pc, #56]	; (3ecc <TIMER_1_task2_cb+0x68>)
    3e94:	4c0e      	ldr	r4, [pc, #56]	; (3ed0 <TIMER_1_task2_cb+0x6c>)
    3e96:	47a0      	blx	r4
    3e98:	4603      	mov	r3, r0
    3e9a:	60fb      	str	r3, [r7, #12]
	io_write(&USART_0.io, string, string_length);
    3e9c:	68fb      	ldr	r3, [r7, #12]
    3e9e:	b29b      	uxth	r3, r3
    3ea0:	461a      	mov	r2, r3
    3ea2:	490a      	ldr	r1, [pc, #40]	; (3ecc <TIMER_1_task2_cb+0x68>)
    3ea4:	480b      	ldr	r0, [pc, #44]	; (3ed4 <TIMER_1_task2_cb+0x70>)
    3ea6:	4b0c      	ldr	r3, [pc, #48]	; (3ed8 <TIMER_1_task2_cb+0x74>)
    3ea8:	4798      	blx	r3
}
    3eaa:	bf00      	nop
    3eac:	3714      	adds	r7, #20
    3eae:	46bd      	mov	sp, r7
    3eb0:	bd90      	pop	{r4, r7, pc}
    3eb2:	bf00      	nop
    3eb4:	20000138 	.word	0x20000138
    3eb8:	20000040 	.word	0x20000040
    3ebc:	20000134 	.word	0x20000134
    3ec0:	20000144 	.word	0x20000144
    3ec4:	20000140 	.word	0x20000140
    3ec8:	000059c0 	.word	0x000059c0
    3ecc:	2000024c 	.word	0x2000024c
    3ed0:	00004e8d 	.word	0x00004e8d
    3ed4:	200001ec 	.word	0x200001ec
    3ed8:	00000e3d 	.word	0x00000e3d

00003edc <TIMER_1_config>:

void TIMER_1_config(void)
{
    3edc:	b580      	push	{r7, lr}
    3ede:	af00      	add	r7, sp, #0
	TIMER_1_task1.interval = 10;              // 100Hz calculate RPM
    3ee0:	4b0f      	ldr	r3, [pc, #60]	; (3f20 <TIMER_1_config+0x44>)
    3ee2:	220a      	movs	r2, #10
    3ee4:	609a      	str	r2, [r3, #8]
	TIMER_1_task1.cb       = TIMER_1_task1_cb;
    3ee6:	4b0e      	ldr	r3, [pc, #56]	; (3f20 <TIMER_1_config+0x44>)
    3ee8:	4a0e      	ldr	r2, [pc, #56]	; (3f24 <TIMER_1_config+0x48>)
    3eea:	60da      	str	r2, [r3, #12]
	TIMER_1_task1.mode     = TIMER_TASK_REPEAT;
    3eec:	4b0c      	ldr	r3, [pc, #48]	; (3f20 <TIMER_1_config+0x44>)
    3eee:	2201      	movs	r2, #1
    3ef0:	741a      	strb	r2, [r3, #16]
	TIMER_1_task2.interval = 100;            // 10Hz send to UART
    3ef2:	4b0d      	ldr	r3, [pc, #52]	; (3f28 <TIMER_1_config+0x4c>)
    3ef4:	2264      	movs	r2, #100	; 0x64
    3ef6:	609a      	str	r2, [r3, #8]
	TIMER_1_task2.cb       = TIMER_1_task2_cb;
    3ef8:	4b0b      	ldr	r3, [pc, #44]	; (3f28 <TIMER_1_config+0x4c>)
    3efa:	4a0c      	ldr	r2, [pc, #48]	; (3f2c <TIMER_1_config+0x50>)
    3efc:	60da      	str	r2, [r3, #12]
	TIMER_1_task2.mode     = TIMER_TASK_REPEAT;
    3efe:	4b0a      	ldr	r3, [pc, #40]	; (3f28 <TIMER_1_config+0x4c>)
    3f00:	2201      	movs	r2, #1
    3f02:	741a      	strb	r2, [r3, #16]

	timer_add_task(&TIMER_1, &TIMER_1_task1);
    3f04:	4906      	ldr	r1, [pc, #24]	; (3f20 <TIMER_1_config+0x44>)
    3f06:	480a      	ldr	r0, [pc, #40]	; (3f30 <TIMER_1_config+0x54>)
    3f08:	4b0a      	ldr	r3, [pc, #40]	; (3f34 <TIMER_1_config+0x58>)
    3f0a:	4798      	blx	r3
	timer_add_task(&TIMER_1, &TIMER_1_task2);
    3f0c:	4906      	ldr	r1, [pc, #24]	; (3f28 <TIMER_1_config+0x4c>)
    3f0e:	4808      	ldr	r0, [pc, #32]	; (3f30 <TIMER_1_config+0x54>)
    3f10:	4b08      	ldr	r3, [pc, #32]	; (3f34 <TIMER_1_config+0x58>)
    3f12:	4798      	blx	r3
	timer_start(&TIMER_1);
    3f14:	4806      	ldr	r0, [pc, #24]	; (3f30 <TIMER_1_config+0x54>)
    3f16:	4b08      	ldr	r3, [pc, #32]	; (3f38 <TIMER_1_config+0x5c>)
    3f18:	4798      	blx	r3
}
    3f1a:	bf00      	nop
    3f1c:	bd80      	pop	{r7, pc}
    3f1e:	bf00      	nop
    3f20:	20000148 	.word	0x20000148
    3f24:	00003ded 	.word	0x00003ded
    3f28:	2000015c 	.word	0x2000015c
    3f2c:	00003e65 	.word	0x00003e65
    3f30:	200001d0 	.word	0x200001d0
    3f34:	00000fcd 	.word	0x00000fcd
    3f38:	00000f79 	.word	0x00000f79

00003f3c <TIMER_2_task2_cb>:

static void TIMER_2_task2_cb(const struct timer_task *const timer_task)
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	b082      	sub	sp, #8
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
		controlled_pos = p_position_control(steps, level);
    3f44:	4b2f      	ldr	r3, [pc, #188]	; (4004 <TIMER_2_task2_cb+0xc8>)
    3f46:	681a      	ldr	r2, [r3, #0]
    3f48:	4b2f      	ldr	r3, [pc, #188]	; (4008 <TIMER_2_task2_cb+0xcc>)
    3f4a:	681b      	ldr	r3, [r3, #0]
    3f4c:	4619      	mov	r1, r3
    3f4e:	4610      	mov	r0, r2
    3f50:	4b2e      	ldr	r3, [pc, #184]	; (400c <TIMER_2_task2_cb+0xd0>)
    3f52:	4798      	blx	r3
    3f54:	4602      	mov	r2, r0
    3f56:	4b2e      	ldr	r3, [pc, #184]	; (4010 <TIMER_2_task2_cb+0xd4>)
    3f58:	601a      	str	r2, [r3, #0]
		controlled_vel = p_speed_control(rpm*direction, controlled_pos*MAX_RPM/100);
    3f5a:	4b2e      	ldr	r3, [pc, #184]	; (4014 <TIMER_2_task2_cb+0xd8>)
    3f5c:	f993 3000 	ldrsb.w	r3, [r3]
    3f60:	461a      	mov	r2, r3
    3f62:	4b2d      	ldr	r3, [pc, #180]	; (4018 <TIMER_2_task2_cb+0xdc>)
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	fb03 f302 	mul.w	r3, r3, r2
    3f6a:	4618      	mov	r0, r3
    3f6c:	4b28      	ldr	r3, [pc, #160]	; (4010 <TIMER_2_task2_cb+0xd4>)
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	226c      	movs	r2, #108	; 0x6c
    3f72:	fb02 f303 	mul.w	r3, r2, r3
    3f76:	4a29      	ldr	r2, [pc, #164]	; (401c <TIMER_2_task2_cb+0xe0>)
    3f78:	fb82 1203 	smull	r1, r2, r2, r3
    3f7c:	1152      	asrs	r2, r2, #5
    3f7e:	17db      	asrs	r3, r3, #31
    3f80:	1ad3      	subs	r3, r2, r3
    3f82:	4619      	mov	r1, r3
    3f84:	4b26      	ldr	r3, [pc, #152]	; (4020 <TIMER_2_task2_cb+0xe4>)
    3f86:	4798      	blx	r3
    3f88:	4602      	mov	r2, r0
    3f8a:	4b26      	ldr	r3, [pc, #152]	; (4024 <TIMER_2_task2_cb+0xe8>)
    3f8c:	601a      	str	r2, [r3, #0]
		
		if(controlled_vel >= 0){
    3f8e:	4b25      	ldr	r3, [pc, #148]	; (4024 <TIMER_2_task2_cb+0xe8>)
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	2b00      	cmp	r3, #0
    3f94:	db19      	blt.n	3fca <TIMER_2_task2_cb+0x8e>
			
			gpio_set_pin_level(MOTOR_INPUT_2, false);
    3f96:	2100      	movs	r1, #0
    3f98:	2006      	movs	r0, #6
    3f9a:	4b23      	ldr	r3, [pc, #140]	; (4028 <TIMER_2_task2_cb+0xec>)
    3f9c:	4798      	blx	r3
			gpio_set_pin_level(MOTOR_INPUT_1, true);
    3f9e:	2101      	movs	r1, #1
    3fa0:	2007      	movs	r0, #7
    3fa2:	4b21      	ldr	r3, [pc, #132]	; (4028 <TIMER_2_task2_cb+0xec>)
    3fa4:	4798      	blx	r3
			pwm_out(600,600*controlled_vel/100);
    3fa6:	4b1f      	ldr	r3, [pc, #124]	; (4024 <TIMER_2_task2_cb+0xe8>)
    3fa8:	681b      	ldr	r3, [r3, #0]
    3faa:	f44f 7216 	mov.w	r2, #600	; 0x258
    3fae:	fb02 f303 	mul.w	r3, r2, r3
    3fb2:	4a1a      	ldr	r2, [pc, #104]	; (401c <TIMER_2_task2_cb+0xe0>)
    3fb4:	fb82 1203 	smull	r1, r2, r2, r3
    3fb8:	1152      	asrs	r2, r2, #5
    3fba:	17db      	asrs	r3, r3, #31
    3fbc:	1ad3      	subs	r3, r2, r3
    3fbe:	4619      	mov	r1, r3
    3fc0:	f44f 7016 	mov.w	r0, #600	; 0x258
    3fc4:	4b19      	ldr	r3, [pc, #100]	; (402c <TIMER_2_task2_cb+0xf0>)
    3fc6:	4798      	blx	r3
			
			gpio_set_pin_level(MOTOR_INPUT_2, true);
			gpio_set_pin_level(MOTOR_INPUT_1, false);
			pwm_out(600,600*(-controlled_vel)/100);
		}
}
    3fc8:	e017      	b.n	3ffa <TIMER_2_task2_cb+0xbe>
			gpio_set_pin_level(MOTOR_INPUT_2, true);
    3fca:	2101      	movs	r1, #1
    3fcc:	2006      	movs	r0, #6
    3fce:	4b16      	ldr	r3, [pc, #88]	; (4028 <TIMER_2_task2_cb+0xec>)
    3fd0:	4798      	blx	r3
			gpio_set_pin_level(MOTOR_INPUT_1, false);
    3fd2:	2100      	movs	r1, #0
    3fd4:	2007      	movs	r0, #7
    3fd6:	4b14      	ldr	r3, [pc, #80]	; (4028 <TIMER_2_task2_cb+0xec>)
    3fd8:	4798      	blx	r3
			pwm_out(600,600*(-controlled_vel)/100);
    3fda:	4b12      	ldr	r3, [pc, #72]	; (4024 <TIMER_2_task2_cb+0xe8>)
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	4a14      	ldr	r2, [pc, #80]	; (4030 <TIMER_2_task2_cb+0xf4>)
    3fe0:	fb02 f303 	mul.w	r3, r2, r3
    3fe4:	4a0d      	ldr	r2, [pc, #52]	; (401c <TIMER_2_task2_cb+0xe0>)
    3fe6:	fb82 1203 	smull	r1, r2, r2, r3
    3fea:	1152      	asrs	r2, r2, #5
    3fec:	17db      	asrs	r3, r3, #31
    3fee:	1ad3      	subs	r3, r2, r3
    3ff0:	4619      	mov	r1, r3
    3ff2:	f44f 7016 	mov.w	r0, #600	; 0x258
    3ff6:	4b0d      	ldr	r3, [pc, #52]	; (402c <TIMER_2_task2_cb+0xf0>)
    3ff8:	4798      	blx	r3
}
    3ffa:	bf00      	nop
    3ffc:	3708      	adds	r7, #8
    3ffe:	46bd      	mov	sp, r7
    4000:	bd80      	pop	{r7, pc}
    4002:	bf00      	nop
    4004:	20000138 	.word	0x20000138
    4008:	2000013c 	.word	0x2000013c
    400c:	0000455d 	.word	0x0000455d
    4010:	20000140 	.word	0x20000140
    4014:	20000040 	.word	0x20000040
    4018:	20000134 	.word	0x20000134
    401c:	51eb851f 	.word	0x51eb851f
    4020:	000044a1 	.word	0x000044a1
    4024:	20000144 	.word	0x20000144
    4028:	00003c89 	.word	0x00003c89
    402c:	00004071 	.word	0x00004071
    4030:	fffffda8 	.word	0xfffffda8

00004034 <TIMER_2_config>:

void TIMER_2_config(void)
{
    4034:	b580      	push	{r7, lr}
    4036:	af00      	add	r7, sp, #0
	TIMER_2_task2.interval = 2;
    4038:	4b08      	ldr	r3, [pc, #32]	; (405c <TIMER_2_config+0x28>)
    403a:	2202      	movs	r2, #2
    403c:	609a      	str	r2, [r3, #8]
	TIMER_2_task2.cb       = TIMER_2_task2_cb;
    403e:	4b07      	ldr	r3, [pc, #28]	; (405c <TIMER_2_config+0x28>)
    4040:	4a07      	ldr	r2, [pc, #28]	; (4060 <TIMER_2_config+0x2c>)
    4042:	60da      	str	r2, [r3, #12]
	TIMER_2_task2.mode     = TIMER_TASK_REPEAT;
    4044:	4b05      	ldr	r3, [pc, #20]	; (405c <TIMER_2_config+0x28>)
    4046:	2201      	movs	r2, #1
    4048:	741a      	strb	r2, [r3, #16]

	timer_add_task(&TIMER_2, &TIMER_2_task2);
    404a:	4904      	ldr	r1, [pc, #16]	; (405c <TIMER_2_config+0x28>)
    404c:	4805      	ldr	r0, [pc, #20]	; (4064 <TIMER_2_config+0x30>)
    404e:	4b06      	ldr	r3, [pc, #24]	; (4068 <TIMER_2_config+0x34>)
    4050:	4798      	blx	r3
	timer_start(&TIMER_2);
    4052:	4804      	ldr	r0, [pc, #16]	; (4064 <TIMER_2_config+0x30>)
    4054:	4b05      	ldr	r3, [pc, #20]	; (406c <TIMER_2_config+0x38>)
    4056:	4798      	blx	r3
}
    4058:	bf00      	nop
    405a:	bd80      	pop	{r7, pc}
    405c:	20000184 	.word	0x20000184
    4060:	00003f3d 	.word	0x00003f3d
    4064:	200001b4 	.word	0x200001b4
    4068:	00000fcd 	.word	0x00000fcd
    406c:	00000f79 	.word	0x00000f79

00004070 <pwm_out>:

void pwm_out(uint32_t period, uint32_t duty_cycle){
    4070:	b580      	push	{r7, lr}
    4072:	b082      	sub	sp, #8
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    4078:	6039      	str	r1, [r7, #0]
	//function to set the pwm duty cycle
	tcc_disable(TCC0);
    407a:	4807      	ldr	r0, [pc, #28]	; (4098 <pwm_out+0x28>)
    407c:	4b07      	ldr	r3, [pc, #28]	; (409c <pwm_out+0x2c>)
    407e:	4798      	blx	r3
	tcc_set_compare_value(TCC0,duty_cycle,0);
    4080:	2200      	movs	r2, #0
    4082:	6839      	ldr	r1, [r7, #0]
    4084:	4804      	ldr	r0, [pc, #16]	; (4098 <pwm_out+0x28>)
    4086:	4b06      	ldr	r3, [pc, #24]	; (40a0 <pwm_out+0x30>)
    4088:	4798      	blx	r3
	tcc_enable(TCC0);
    408a:	4803      	ldr	r0, [pc, #12]	; (4098 <pwm_out+0x28>)
    408c:	4b05      	ldr	r3, [pc, #20]	; (40a4 <pwm_out+0x34>)
    408e:	4798      	blx	r3
}
    4090:	bf00      	nop
    4092:	3708      	adds	r7, #8
    4094:	46bd      	mov	sp, r7
    4096:	bd80      	pop	{r7, pc}
    4098:	41016000 	.word	0x41016000
    409c:	000043e5 	.word	0x000043e5
    40a0:	0000440d 	.word	0x0000440d
    40a4:	000043bd 	.word	0x000043bd

000040a8 <main>:

int main(void)
{
    40a8:	b580      	push	{r7, lr}
    40aa:	b082      	sub	sp, #8
    40ac:	af00      	add	r7, sp, #0
	uint8_t recv_char;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    40ae:	4b73      	ldr	r3, [pc, #460]	; (427c <main+0x1d4>)
    40b0:	4798      	blx	r3
	
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, uart_rx_cb);
    40b2:	4a73      	ldr	r2, [pc, #460]	; (4280 <main+0x1d8>)
    40b4:	2100      	movs	r1, #0
    40b6:	4873      	ldr	r0, [pc, #460]	; (4284 <main+0x1dc>)
    40b8:	4b73      	ldr	r3, [pc, #460]	; (4288 <main+0x1e0>)
    40ba:	4798      	blx	r3
	usart_async_enable(&USART_0);
    40bc:	4871      	ldr	r0, [pc, #452]	; (4284 <main+0x1dc>)
    40be:	4b73      	ldr	r3, [pc, #460]	; (428c <main+0x1e4>)
    40c0:	4798      	blx	r3
	
	TIMER_1_config();
    40c2:	4b73      	ldr	r3, [pc, #460]	; (4290 <main+0x1e8>)
    40c4:	4798      	blx	r3
	TIMER_2_config();
    40c6:	4b73      	ldr	r3, [pc, #460]	; (4294 <main+0x1ec>)
    40c8:	4798      	blx	r3
	
	tcc_set_period_value(TCC0,600);
    40ca:	f44f 7116 	mov.w	r1, #600	; 0x258
    40ce:	4872      	ldr	r0, [pc, #456]	; (4298 <main+0x1f0>)
    40d0:	4b72      	ldr	r3, [pc, #456]	; (429c <main+0x1f4>)
    40d2:	4798      	blx	r3
	tcc_set_compare_value(TCC0,0,0);
    40d4:	2200      	movs	r2, #0
    40d6:	2100      	movs	r1, #0
    40d8:	486f      	ldr	r0, [pc, #444]	; (4298 <main+0x1f0>)
    40da:	4b71      	ldr	r3, [pc, #452]	; (42a0 <main+0x1f8>)
    40dc:	4798      	blx	r3
	tcc_enable(TCC0);
    40de:	486e      	ldr	r0, [pc, #440]	; (4298 <main+0x1f0>)
    40e0:	4b70      	ldr	r3, [pc, #448]	; (42a4 <main+0x1fc>)
    40e2:	4798      	blx	r3
	
	NVIC_SetPriority(TC0_IRQn, 0);
    40e4:	2100      	movs	r1, #0
    40e6:	206b      	movs	r0, #107	; 0x6b
    40e8:	4b6f      	ldr	r3, [pc, #444]	; (42a8 <main+0x200>)
    40ea:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
    40ec:	206b      	movs	r0, #107	; 0x6b
    40ee:	4b6f      	ldr	r3, [pc, #444]	; (42ac <main+0x204>)
    40f0:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
    40f2:	b662      	cpsie	i
	__enable_irq();
	
	while (1) {	
		if (data_arrived == 0) {
    40f4:	4b6e      	ldr	r3, [pc, #440]	; (42b0 <main+0x208>)
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	2b00      	cmp	r3, #0
    40fa:	f000 80bc 	beq.w	4276 <main+0x1ce>
			continue;
		}

		while (io_read(&USART_0.io, &recv_char, 1) == 1) {
    40fe:	e023      	b.n	4148 <main+0xa0>
			if (recv_char == '\n')
    4100:	79fb      	ldrb	r3, [r7, #7]
    4102:	2b0a      	cmp	r3, #10
    4104:	d10c      	bne.n	4120 <main+0x78>
			{
				uart_ready = true;
    4106:	4b6b      	ldr	r3, [pc, #428]	; (42b4 <main+0x20c>)
    4108:	2201      	movs	r2, #1
    410a:	701a      	strb	r2, [r3, #0]
				input_ready = false;
    410c:	4b6a      	ldr	r3, [pc, #424]	; (42b8 <main+0x210>)
    410e:	2200      	movs	r2, #0
    4110:	701a      	strb	r2, [r3, #0]
				input_char_count--;
    4112:	4b6a      	ldr	r3, [pc, #424]	; (42bc <main+0x214>)
    4114:	781b      	ldrb	r3, [r3, #0]
    4116:	3b01      	subs	r3, #1
    4118:	b2da      	uxtb	r2, r3
    411a:	4b68      	ldr	r3, [pc, #416]	; (42bc <main+0x214>)
    411c:	701a      	strb	r2, [r3, #0]
				break;
    411e:	e01c      	b.n	415a <main+0xb2>
			}
			user_input[input_char_count++] = recv_char;
    4120:	4b66      	ldr	r3, [pc, #408]	; (42bc <main+0x214>)
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	1c5a      	adds	r2, r3, #1
    4126:	b2d1      	uxtb	r1, r2
    4128:	4a64      	ldr	r2, [pc, #400]	; (42bc <main+0x214>)
    412a:	7011      	strb	r1, [r2, #0]
    412c:	461a      	mov	r2, r3
    412e:	79f9      	ldrb	r1, [r7, #7]
    4130:	4b63      	ldr	r3, [pc, #396]	; (42c0 <main+0x218>)
    4132:	5499      	strb	r1, [r3, r2]
			while (io_write(&USART_0.io, &recv_char, 1) != 1) {
    4134:	bf00      	nop
    4136:	1dfb      	adds	r3, r7, #7
    4138:	2201      	movs	r2, #1
    413a:	4619      	mov	r1, r3
    413c:	4851      	ldr	r0, [pc, #324]	; (4284 <main+0x1dc>)
    413e:	4b61      	ldr	r3, [pc, #388]	; (42c4 <main+0x21c>)
    4140:	4798      	blx	r3
    4142:	4603      	mov	r3, r0
    4144:	2b01      	cmp	r3, #1
    4146:	d1f6      	bne.n	4136 <main+0x8e>
		while (io_read(&USART_0.io, &recv_char, 1) == 1) {
    4148:	1dfb      	adds	r3, r7, #7
    414a:	2201      	movs	r2, #1
    414c:	4619      	mov	r1, r3
    414e:	484d      	ldr	r0, [pc, #308]	; (4284 <main+0x1dc>)
    4150:	4b5d      	ldr	r3, [pc, #372]	; (42c8 <main+0x220>)
    4152:	4798      	blx	r3
    4154:	4603      	mov	r3, r0
    4156:	2b01      	cmp	r3, #1
    4158:	d0d2      	beq.n	4100 <main+0x58>
			}
		}
		data_arrived = 0;
    415a:	4b55      	ldr	r3, [pc, #340]	; (42b0 <main+0x208>)
    415c:	2200      	movs	r2, #0
    415e:	601a      	str	r2, [r3, #0]
		if (uart_ready)
    4160:	4b54      	ldr	r3, [pc, #336]	; (42b4 <main+0x20c>)
    4162:	781b      	ldrb	r3, [r3, #0]
    4164:	2b00      	cmp	r3, #0
    4166:	d0c5      	beq.n	40f4 <main+0x4c>
		{
			level = 0;
    4168:	4b58      	ldr	r3, [pc, #352]	; (42cc <main+0x224>)
    416a:	2200      	movs	r2, #0
    416c:	601a      	str	r2, [r3, #0]
			
			if (input_char_count == 2)
    416e:	4b53      	ldr	r3, [pc, #332]	; (42bc <main+0x214>)
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	2b02      	cmp	r3, #2
    4174:	d105      	bne.n	4182 <main+0xda>
			{
				level = user_input[1] - '0';
    4176:	4b52      	ldr	r3, [pc, #328]	; (42c0 <main+0x218>)
    4178:	785b      	ldrb	r3, [r3, #1]
    417a:	3b30      	subs	r3, #48	; 0x30
    417c:	4a53      	ldr	r2, [pc, #332]	; (42cc <main+0x224>)
    417e:	6013      	str	r3, [r2, #0]
    4180:	e04a      	b.n	4218 <main+0x170>
			}
			else if (input_char_count == 3)
    4182:	4b4e      	ldr	r3, [pc, #312]	; (42bc <main+0x214>)
    4184:	781b      	ldrb	r3, [r3, #0]
    4186:	2b03      	cmp	r3, #3
    4188:	d10f      	bne.n	41aa <main+0x102>
			{
				level = ((user_input[1] - '0') * 10) + (user_input[2] - '0');
    418a:	4b4d      	ldr	r3, [pc, #308]	; (42c0 <main+0x218>)
    418c:	785b      	ldrb	r3, [r3, #1]
    418e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4192:	4613      	mov	r3, r2
    4194:	009b      	lsls	r3, r3, #2
    4196:	4413      	add	r3, r2
    4198:	005b      	lsls	r3, r3, #1
    419a:	461a      	mov	r2, r3
    419c:	4b48      	ldr	r3, [pc, #288]	; (42c0 <main+0x218>)
    419e:	789b      	ldrb	r3, [r3, #2]
    41a0:	3b30      	subs	r3, #48	; 0x30
    41a2:	4413      	add	r3, r2
    41a4:	4a49      	ldr	r2, [pc, #292]	; (42cc <main+0x224>)
    41a6:	6013      	str	r3, [r2, #0]
    41a8:	e036      	b.n	4218 <main+0x170>
			}
			else if (input_char_count == 4)
    41aa:	4b44      	ldr	r3, [pc, #272]	; (42bc <main+0x214>)
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2b04      	cmp	r3, #4
    41b0:	d115      	bne.n	41de <main+0x136>
			{
				level = ((user_input[1] - '0') * 100) +  ((user_input[2] - '0') * 10) + (user_input[3] - '0');
    41b2:	4b43      	ldr	r3, [pc, #268]	; (42c0 <main+0x218>)
    41b4:	785b      	ldrb	r3, [r3, #1]
    41b6:	3b30      	subs	r3, #48	; 0x30
    41b8:	2264      	movs	r2, #100	; 0x64
    41ba:	fb02 f103 	mul.w	r1, r2, r3
    41be:	4b40      	ldr	r3, [pc, #256]	; (42c0 <main+0x218>)
    41c0:	789b      	ldrb	r3, [r3, #2]
    41c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    41c6:	4613      	mov	r3, r2
    41c8:	009b      	lsls	r3, r3, #2
    41ca:	4413      	add	r3, r2
    41cc:	005b      	lsls	r3, r3, #1
    41ce:	18ca      	adds	r2, r1, r3
    41d0:	4b3b      	ldr	r3, [pc, #236]	; (42c0 <main+0x218>)
    41d2:	78db      	ldrb	r3, [r3, #3]
    41d4:	3b30      	subs	r3, #48	; 0x30
    41d6:	4413      	add	r3, r2
    41d8:	4a3c      	ldr	r2, [pc, #240]	; (42cc <main+0x224>)
    41da:	6013      	str	r3, [r2, #0]
    41dc:	e01c      	b.n	4218 <main+0x170>
			}
			else 
			{
				level = ((user_input[1] - '0') * 1000) + ((user_input[2] - '0') * 100) +  ((user_input[3] - '0') * 10) + (user_input[4] - '0');
    41de:	4b38      	ldr	r3, [pc, #224]	; (42c0 <main+0x218>)
    41e0:	785b      	ldrb	r3, [r3, #1]
    41e2:	3b30      	subs	r3, #48	; 0x30
    41e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41e8:	fb02 f203 	mul.w	r2, r2, r3
    41ec:	4b34      	ldr	r3, [pc, #208]	; (42c0 <main+0x218>)
    41ee:	789b      	ldrb	r3, [r3, #2]
    41f0:	3b30      	subs	r3, #48	; 0x30
    41f2:	2164      	movs	r1, #100	; 0x64
    41f4:	fb01 f303 	mul.w	r3, r1, r3
    41f8:	18d1      	adds	r1, r2, r3
    41fa:	4b31      	ldr	r3, [pc, #196]	; (42c0 <main+0x218>)
    41fc:	78db      	ldrb	r3, [r3, #3]
    41fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4202:	4613      	mov	r3, r2
    4204:	009b      	lsls	r3, r3, #2
    4206:	4413      	add	r3, r2
    4208:	005b      	lsls	r3, r3, #1
    420a:	18ca      	adds	r2, r1, r3
    420c:	4b2c      	ldr	r3, [pc, #176]	; (42c0 <main+0x218>)
    420e:	791b      	ldrb	r3, [r3, #4]
    4210:	3b30      	subs	r3, #48	; 0x30
    4212:	4413      	add	r3, r2
    4214:	4a2d      	ldr	r2, [pc, #180]	; (42cc <main+0x224>)
    4216:	6013      	str	r3, [r2, #0]
			}
			
			if(user_input[0] == '+')
    4218:	4b29      	ldr	r3, [pc, #164]	; (42c0 <main+0x218>)
    421a:	781b      	ldrb	r3, [r3, #0]
    421c:	2b2b      	cmp	r3, #43	; 0x2b
    421e:	d104      	bne.n	422a <main+0x182>
			{
				level = level;
    4220:	4b2a      	ldr	r3, [pc, #168]	; (42cc <main+0x224>)
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	4a29      	ldr	r2, [pc, #164]	; (42cc <main+0x224>)
    4226:	6013      	str	r3, [r2, #0]
    4228:	e008      	b.n	423c <main+0x194>
			}
			else if (user_input[0] == '-')
    422a:	4b25      	ldr	r3, [pc, #148]	; (42c0 <main+0x218>)
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	2b2d      	cmp	r3, #45	; 0x2d
    4230:	d104      	bne.n	423c <main+0x194>
			{
				level = -level;
    4232:	4b26      	ldr	r3, [pc, #152]	; (42cc <main+0x224>)
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	425b      	negs	r3, r3
    4238:	4a24      	ldr	r2, [pc, #144]	; (42cc <main+0x224>)
    423a:	6013      	str	r3, [r2, #0]
			}
			
			if (level > 3000)
    423c:	4b23      	ldr	r3, [pc, #140]	; (42cc <main+0x224>)
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4244:	4293      	cmp	r3, r2
    4246:	dd04      	ble.n	4252 <main+0x1aa>
			{
				level = 3000;
    4248:	4b20      	ldr	r3, [pc, #128]	; (42cc <main+0x224>)
    424a:	f640 32b8 	movw	r2, #3000	; 0xbb8
    424e:	601a      	str	r2, [r3, #0]
    4250:	e007      	b.n	4262 <main+0x1ba>
			}
			else if (level < -3000)
    4252:	4b1e      	ldr	r3, [pc, #120]	; (42cc <main+0x224>)
    4254:	681b      	ldr	r3, [r3, #0]
    4256:	4a1e      	ldr	r2, [pc, #120]	; (42d0 <main+0x228>)
    4258:	4293      	cmp	r3, r2
    425a:	da02      	bge.n	4262 <main+0x1ba>
			{
				level = -3000;
    425c:	4b1b      	ldr	r3, [pc, #108]	; (42cc <main+0x224>)
    425e:	4a1c      	ldr	r2, [pc, #112]	; (42d0 <main+0x228>)
    4260:	601a      	str	r2, [r3, #0]
			}
	
			input_ready = true;
    4262:	4b15      	ldr	r3, [pc, #84]	; (42b8 <main+0x210>)
    4264:	2201      	movs	r2, #1
    4266:	701a      	strb	r2, [r3, #0]
			uart_ready = false;
    4268:	4b12      	ldr	r3, [pc, #72]	; (42b4 <main+0x20c>)
    426a:	2200      	movs	r2, #0
    426c:	701a      	strb	r2, [r3, #0]
			input_char_count = 0;
    426e:	4b13      	ldr	r3, [pc, #76]	; (42bc <main+0x214>)
    4270:	2200      	movs	r2, #0
    4272:	701a      	strb	r2, [r3, #0]
    4274:	e73e      	b.n	40f4 <main+0x4c>
			continue;
    4276:	bf00      	nop
		if (data_arrived == 0) {
    4278:	e73c      	b.n	40f4 <main+0x4c>
    427a:	bf00      	nop
    427c:	000002d1 	.word	0x000002d1
    4280:	00003dcd 	.word	0x00003dcd
    4284:	200001ec 	.word	0x200001ec
    4288:	00001335 	.word	0x00001335
    428c:	000012f5 	.word	0x000012f5
    4290:	00003edd 	.word	0x00003edd
    4294:	00004035 	.word	0x00004035
    4298:	41016000 	.word	0x41016000
    429c:	0000444d 	.word	0x0000444d
    42a0:	0000440d 	.word	0x0000440d
    42a4:	000043bd 	.word	0x000043bd
    42a8:	00003a51 	.word	0x00003a51
    42ac:	00003a15 	.word	0x00003a15
    42b0:	20000124 	.word	0x20000124
    42b4:	20000129 	.word	0x20000129
    42b8:	2000012a 	.word	0x2000012a
    42bc:	20000128 	.word	0x20000128
    42c0:	20000280 	.word	0x20000280
    42c4:	00000e3d 	.word	0x00000e3d
    42c8:	00000e8d 	.word	0x00000e8d
    42cc:	2000013c 	.word	0x2000013c
    42d0:	fffff448 	.word	0xfffff448

000042d4 <hri_tcc_wait_for_sync>:
{
    42d4:	b480      	push	{r7}
    42d6:	b083      	sub	sp, #12
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
    42dc:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    42de:	bf00      	nop
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	689a      	ldr	r2, [r3, #8]
    42e4:	683b      	ldr	r3, [r7, #0]
    42e6:	4013      	ands	r3, r2
    42e8:	2b00      	cmp	r3, #0
    42ea:	d1f9      	bne.n	42e0 <hri_tcc_wait_for_sync+0xc>
}
    42ec:	bf00      	nop
    42ee:	370c      	adds	r7, #12
    42f0:	46bd      	mov	sp, r7
    42f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f6:	4770      	bx	lr

000042f8 <hri_tcc_clear_INTFLAG_reg>:
{
    42f8:	b480      	push	{r7}
    42fa:	b083      	sub	sp, #12
    42fc:	af00      	add	r7, sp, #0
    42fe:	6078      	str	r0, [r7, #4]
    4300:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	683a      	ldr	r2, [r7, #0]
    4306:	62da      	str	r2, [r3, #44]	; 0x2c
}
    4308:	bf00      	nop
    430a:	370c      	adds	r7, #12
    430c:	46bd      	mov	sp, r7
    430e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4312:	4770      	bx	lr

00004314 <hri_tcc_set_CTRLA_ENABLE_bit>:
{
    4314:	b580      	push	{r7, lr}
    4316:	b082      	sub	sp, #8
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	f043 0202 	orr.w	r2, r3, #2
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4328:	2103      	movs	r1, #3
    432a:	6878      	ldr	r0, [r7, #4]
    432c:	4b02      	ldr	r3, [pc, #8]	; (4338 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    432e:	4798      	blx	r3
}
    4330:	bf00      	nop
    4332:	3708      	adds	r7, #8
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}
    4338:	000042d5 	.word	0x000042d5

0000433c <hri_tcc_clear_CTRLA_ENABLE_bit>:
{
    433c:	b580      	push	{r7, lr}
    433e:	b082      	sub	sp, #8
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	681b      	ldr	r3, [r3, #0]
    4348:	f023 0202 	bic.w	r2, r3, #2
    434c:	687b      	ldr	r3, [r7, #4]
    434e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4350:	2103      	movs	r1, #3
    4352:	6878      	ldr	r0, [r7, #4]
    4354:	4b02      	ldr	r3, [pc, #8]	; (4360 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    4356:	4798      	blx	r3
}
    4358:	bf00      	nop
    435a:	3708      	adds	r7, #8
    435c:	46bd      	mov	sp, r7
    435e:	bd80      	pop	{r7, pc}
    4360:	000042d5 	.word	0x000042d5

00004364 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    4364:	b580      	push	{r7, lr}
    4366:	b082      	sub	sp, #8
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
    436c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	683a      	ldr	r2, [r7, #0]
    4372:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    4374:	2180      	movs	r1, #128	; 0x80
    4376:	6878      	ldr	r0, [r7, #4]
    4378:	4b02      	ldr	r3, [pc, #8]	; (4384 <hri_tcc_write_PER_reg+0x20>)
    437a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    437c:	bf00      	nop
    437e:	3708      	adds	r7, #8
    4380:	46bd      	mov	sp, r7
    4382:	bd80      	pop	{r7, pc}
    4384:	000042d5 	.word	0x000042d5

00004388 <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    4388:	b580      	push	{r7, lr}
    438a:	b084      	sub	sp, #16
    438c:	af00      	add	r7, sp, #0
    438e:	60f8      	str	r0, [r7, #12]
    4390:	460b      	mov	r3, r1
    4392:	607a      	str	r2, [r7, #4]
    4394:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    4396:	7afb      	ldrb	r3, [r7, #11]
    4398:	68fa      	ldr	r2, [r7, #12]
    439a:	3310      	adds	r3, #16
    439c:	009b      	lsls	r3, r3, #2
    439e:	4413      	add	r3, r2
    43a0:	687a      	ldr	r2, [r7, #4]
    43a2:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    43a4:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    43a8:	68f8      	ldr	r0, [r7, #12]
    43aa:	4b03      	ldr	r3, [pc, #12]	; (43b8 <hri_tcc_write_CC_reg+0x30>)
    43ac:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    43ae:	bf00      	nop
    43b0:	3710      	adds	r7, #16
    43b2:	46bd      	mov	sp, r7
    43b4:	bd80      	pop	{r7, pc}
    43b6:	bf00      	nop
    43b8:	000042d5 	.word	0x000042d5

000043bc <tcc_enable>:
struct _tcc_callback {
	void (*pwm_mc0_cb)(void *const hw);
} tcc_cb;

void tcc_enable(void *const hw)
{
    43bc:	b580      	push	{r7, lr}
    43be:	b082      	sub	sp, #8
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    43c4:	2102      	movs	r1, #2
    43c6:	6878      	ldr	r0, [r7, #4]
    43c8:	4b04      	ldr	r3, [pc, #16]	; (43dc <tcc_enable+0x20>)
    43ca:	4798      	blx	r3
	hri_tcc_set_CTRLA_ENABLE_bit(hw);
    43cc:	6878      	ldr	r0, [r7, #4]
    43ce:	4b04      	ldr	r3, [pc, #16]	; (43e0 <tcc_enable+0x24>)
    43d0:	4798      	blx	r3
}
    43d2:	bf00      	nop
    43d4:	3708      	adds	r7, #8
    43d6:	46bd      	mov	sp, r7
    43d8:	bd80      	pop	{r7, pc}
    43da:	bf00      	nop
    43dc:	000042d5 	.word	0x000042d5
    43e0:	00004315 	.word	0x00004315

000043e4 <tcc_disable>:

void tcc_disable(void *const hw)
{
    43e4:	b580      	push	{r7, lr}
    43e6:	b082      	sub	sp, #8
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    43ec:	2102      	movs	r1, #2
    43ee:	6878      	ldr	r0, [r7, #4]
    43f0:	4b04      	ldr	r3, [pc, #16]	; (4404 <tcc_disable+0x20>)
    43f2:	4798      	blx	r3
	hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    43f4:	6878      	ldr	r0, [r7, #4]
    43f6:	4b04      	ldr	r3, [pc, #16]	; (4408 <tcc_disable+0x24>)
    43f8:	4798      	blx	r3
}
    43fa:	bf00      	nop
    43fc:	3708      	adds	r7, #8
    43fe:	46bd      	mov	sp, r7
    4400:	bd80      	pop	{r7, pc}
    4402:	bf00      	nop
    4404:	000042d5 	.word	0x000042d5
    4408:	0000433d 	.word	0x0000433d

0000440c <tcc_set_compare_value>:
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
    440c:	b580      	push	{r7, lr}
    440e:	b084      	sub	sp, #16
    4410:	af00      	add	r7, sp, #0
    4412:	60f8      	str	r0, [r7, #12]
    4414:	60b9      	str	r1, [r7, #8]
    4416:	4613      	mov	r3, r2
    4418:	71fb      	strb	r3, [r7, #7]
	hri_tcc_write_CC_reg(hw, channel_index, value);
    441a:	79fb      	ldrb	r3, [r7, #7]
    441c:	68ba      	ldr	r2, [r7, #8]
    441e:	4619      	mov	r1, r3
    4420:	68f8      	ldr	r0, [r7, #12]
    4422:	4b08      	ldr	r3, [pc, #32]	; (4444 <tcc_set_compare_value+0x38>)
    4424:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    4426:	79fb      	ldrb	r3, [r7, #7]
    4428:	2201      	movs	r2, #1
    442a:	fa02 f303 	lsl.w	r3, r2, r3
    442e:	021b      	lsls	r3, r3, #8
    4430:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4434:	4619      	mov	r1, r3
    4436:	68f8      	ldr	r0, [r7, #12]
    4438:	4b03      	ldr	r3, [pc, #12]	; (4448 <tcc_set_compare_value+0x3c>)
    443a:	4798      	blx	r3
}
    443c:	bf00      	nop
    443e:	3710      	adds	r7, #16
    4440:	46bd      	mov	sp, r7
    4442:	bd80      	pop	{r7, pc}
    4444:	00004389 	.word	0x00004389
    4448:	000042d5 	.word	0x000042d5

0000444c <tcc_set_period_value>:
{
	hri_tcc_write_CCBUF_reg(hw, channel_index, value);
}

void tcc_set_period_value(void *const hw, uint32_t value)
{
    444c:	b580      	push	{r7, lr}
    444e:	b082      	sub	sp, #8
    4450:	af00      	add	r7, sp, #0
    4452:	6078      	str	r0, [r7, #4]
    4454:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(hw, value);
    4456:	6839      	ldr	r1, [r7, #0]
    4458:	6878      	ldr	r0, [r7, #4]
    445a:	4b05      	ldr	r3, [pc, #20]	; (4470 <tcc_set_period_value+0x24>)
    445c:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    445e:	2180      	movs	r1, #128	; 0x80
    4460:	6878      	ldr	r0, [r7, #4]
    4462:	4b04      	ldr	r3, [pc, #16]	; (4474 <tcc_set_period_value+0x28>)
    4464:	4798      	blx	r3
}
    4466:	bf00      	nop
    4468:	3708      	adds	r7, #8
    446a:	46bd      	mov	sp, r7
    446c:	bd80      	pop	{r7, pc}
    446e:	bf00      	nop
    4470:	00004365 	.word	0x00004365
    4474:	000042d5 	.word	0x000042d5

00004478 <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    4478:	b580      	push	{r7, lr}
    447a:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    447c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4480:	4804      	ldr	r0, [pc, #16]	; (4494 <TCC0_1_Handler+0x1c>)
    4482:	4b05      	ldr	r3, [pc, #20]	; (4498 <TCC0_1_Handler+0x20>)
    4484:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    4486:	4b05      	ldr	r3, [pc, #20]	; (449c <TCC0_1_Handler+0x24>)
    4488:	681b      	ldr	r3, [r3, #0]
    448a:	4802      	ldr	r0, [pc, #8]	; (4494 <TCC0_1_Handler+0x1c>)
    448c:	4798      	blx	r3
}
    448e:	bf00      	nop
    4490:	bd80      	pop	{r7, pc}
    4492:	bf00      	nop
    4494:	41016000 	.word	0x41016000
    4498:	000042f9 	.word	0x000042f9
    449c:	20000284 	.word	0x20000284

000044a0 <p_speed_control>:
// define the duty cycle to be produced by the micro controller
float dutycycle_speed = 0.0;
float dutycycle_pos = 0.0;

int32_t p_speed_control(int32_t current_speed, int32_t target_speed)
{
    44a0:	b480      	push	{r7}
    44a2:	b085      	sub	sp, #20
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
    44a8:	6039      	str	r1, [r7, #0]
	volatile float current_error;
	
	volatile float P_term = 0.0;
    44aa:	f04f 0300 	mov.w	r3, #0
    44ae:	60bb      	str	r3, [r7, #8]
	
	current_error = target_speed - current_speed;
    44b0:	683a      	ldr	r2, [r7, #0]
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	1ad3      	subs	r3, r2, r3
    44b6:	ee07 3a90 	vmov	s15, r3
    44ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    44be:	edc7 7a03 	vstr	s15, [r7, #12]
	P_error = current_error;
    44c2:	68fb      	ldr	r3, [r7, #12]
    44c4:	4a1e      	ldr	r2, [pc, #120]	; (4540 <p_speed_control+0xa0>)
    44c6:	6013      	str	r3, [r2, #0]
	
	P_term = Kp_speed*P_error;
    44c8:	4b1e      	ldr	r3, [pc, #120]	; (4544 <p_speed_control+0xa4>)
    44ca:	ed93 7a00 	vldr	s14, [r3]
    44ce:	4b1c      	ldr	r3, [pc, #112]	; (4540 <p_speed_control+0xa0>)
    44d0:	edd3 7a00 	vldr	s15, [r3]
    44d4:	ee67 7a27 	vmul.f32	s15, s14, s15
    44d8:	edc7 7a02 	vstr	s15, [r7, #8]
	
	dutycycle_speed = P_term + dutycycle_speed;
    44dc:	ed97 7a02 	vldr	s14, [r7, #8]
    44e0:	4b19      	ldr	r3, [pc, #100]	; (4548 <p_speed_control+0xa8>)
    44e2:	edd3 7a00 	vldr	s15, [r3]
    44e6:	ee77 7a27 	vadd.f32	s15, s14, s15
    44ea:	4b17      	ldr	r3, [pc, #92]	; (4548 <p_speed_control+0xa8>)
    44ec:	edc3 7a00 	vstr	s15, [r3]
	
	if (dutycycle_speed > 100)
    44f0:	4b15      	ldr	r3, [pc, #84]	; (4548 <p_speed_control+0xa8>)
    44f2:	edd3 7a00 	vldr	s15, [r3]
    44f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 454c <p_speed_control+0xac>
    44fa:	eef4 7ac7 	vcmpe.f32	s15, s14
    44fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4502:	dd03      	ble.n	450c <p_speed_control+0x6c>
	{
		dutycycle_speed = 100;
    4504:	4b10      	ldr	r3, [pc, #64]	; (4548 <p_speed_control+0xa8>)
    4506:	4a12      	ldr	r2, [pc, #72]	; (4550 <p_speed_control+0xb0>)
    4508:	601a      	str	r2, [r3, #0]
    450a:	e00c      	b.n	4526 <p_speed_control+0x86>
	}
	else if (dutycycle_speed <= -100)    //Only output dutycycle between zero and 100%!!
    450c:	4b0e      	ldr	r3, [pc, #56]	; (4548 <p_speed_control+0xa8>)
    450e:	edd3 7a00 	vldr	s15, [r3]
    4512:	ed9f 7a10 	vldr	s14, [pc, #64]	; 4554 <p_speed_control+0xb4>
    4516:	eef4 7ac7 	vcmpe.f32	s15, s14
    451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    451e:	d802      	bhi.n	4526 <p_speed_control+0x86>
	{
		dutycycle_speed = -100;
    4520:	4b09      	ldr	r3, [pc, #36]	; (4548 <p_speed_control+0xa8>)
    4522:	4a0d      	ldr	r2, [pc, #52]	; (4558 <p_speed_control+0xb8>)
    4524:	601a      	str	r2, [r3, #0]
	}
	
	//size_t debug_length = sprintf(debug, "dutycycle_speed = %ld\n",dutycycle_speed);
	//io_write(&USART_0.io, debug, debug_length);
	
	return dutycycle_speed;
    4526:	4b08      	ldr	r3, [pc, #32]	; (4548 <p_speed_control+0xa8>)
    4528:	edd3 7a00 	vldr	s15, [r3]
    452c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4530:	ee17 3a90 	vmov	r3, s15
}
    4534:	4618      	mov	r0, r3
    4536:	3714      	adds	r7, #20
    4538:	46bd      	mov	sp, r7
    453a:	f85d 7b04 	ldr.w	r7, [sp], #4
    453e:	4770      	bx	lr
    4540:	2000019c 	.word	0x2000019c
    4544:	20000044 	.word	0x20000044
    4548:	200001a4 	.word	0x200001a4
    454c:	42c80000 	.word	0x42c80000
    4550:	42c80000 	.word	0x42c80000
    4554:	c2c80000 	.word	0xc2c80000
    4558:	c2c80000 	.word	0xc2c80000

0000455c <p_position_control>:

int32_t p_position_control(int32_t current_position, int32_t target_position)
{
    455c:	b480      	push	{r7}
    455e:	b089      	sub	sp, #36	; 0x24
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
    4564:	6039      	str	r1, [r7, #0]
	volatile float current_error;
	
	volatile float P_term = 0.0;
    4566:	f04f 0300 	mov.w	r3, #0
    456a:	613b      	str	r3, [r7, #16]
	volatile float I_term = 0.0;
    456c:	f04f 0300 	mov.w	r3, #0
    4570:	60fb      	str	r3, [r7, #12]
	float i_max = 100.0;
    4572:	4b2e      	ldr	r3, [pc, #184]	; (462c <p_position_control+0xd0>)
    4574:	61fb      	str	r3, [r7, #28]
	float i_min = -100.0;
    4576:	4b2e      	ldr	r3, [pc, #184]	; (4630 <p_position_control+0xd4>)
    4578:	61bb      	str	r3, [r7, #24]
	
	P_error = target_position - current_position;
    457a:	683a      	ldr	r2, [r7, #0]
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	1ad3      	subs	r3, r2, r3
    4580:	ee07 3a90 	vmov	s15, r3
    4584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4588:	4b2a      	ldr	r3, [pc, #168]	; (4634 <p_position_control+0xd8>)
    458a:	edc3 7a00 	vstr	s15, [r3]
// 	else if (I_error < i_min)
// 	{
// 		I_error = i_min;
// 	}
	
	P_term = Kp_pos*P_error;
    458e:	4b2a      	ldr	r3, [pc, #168]	; (4638 <p_position_control+0xdc>)
    4590:	ed93 7a00 	vldr	s14, [r3]
    4594:	4b27      	ldr	r3, [pc, #156]	; (4634 <p_position_control+0xd8>)
    4596:	edd3 7a00 	vldr	s15, [r3]
    459a:	ee67 7a27 	vmul.f32	s15, s14, s15
    459e:	edc7 7a04 	vstr	s15, [r7, #16]
	//I_term = Ki_pos*I_error;
	
	dutycycle_pos = P_term;
    45a2:	693b      	ldr	r3, [r7, #16]
    45a4:	4a25      	ldr	r2, [pc, #148]	; (463c <p_position_control+0xe0>)
    45a6:	6013      	str	r3, [r2, #0]
	
	if (dutycycle_pos >= 300 )
    45a8:	4b24      	ldr	r3, [pc, #144]	; (463c <p_position_control+0xe0>)
    45aa:	edd3 7a00 	vldr	s15, [r3]
    45ae:	ed9f 7a24 	vldr	s14, [pc, #144]	; 4640 <p_position_control+0xe4>
    45b2:	eef4 7ac7 	vcmpe.f32	s15, s14
    45b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45ba:	db03      	blt.n	45c4 <p_position_control+0x68>
	{
		dutycycle_pos = 300;
    45bc:	4b1f      	ldr	r3, [pc, #124]	; (463c <p_position_control+0xe0>)
    45be:	4a21      	ldr	r2, [pc, #132]	; (4644 <p_position_control+0xe8>)
    45c0:	601a      	str	r2, [r3, #0]
    45c2:	e025      	b.n	4610 <p_position_control+0xb4>
	}
	else if (dutycycle_pos <= -300)
    45c4:	4b1d      	ldr	r3, [pc, #116]	; (463c <p_position_control+0xe0>)
    45c6:	edd3 7a00 	vldr	s15, [r3]
    45ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4648 <p_position_control+0xec>
    45ce:	eef4 7ac7 	vcmpe.f32	s15, s14
    45d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45d6:	d803      	bhi.n	45e0 <p_position_control+0x84>
	{
		dutycycle_pos = -300;
    45d8:	4b18      	ldr	r3, [pc, #96]	; (463c <p_position_control+0xe0>)
    45da:	4a1c      	ldr	r2, [pc, #112]	; (464c <p_position_control+0xf0>)
    45dc:	601a      	str	r2, [r3, #0]
    45de:	e017      	b.n	4610 <p_position_control+0xb4>
	}
	else if (dutycycle_pos < 50 || dutycycle_pos > -50){
    45e0:	4b16      	ldr	r3, [pc, #88]	; (463c <p_position_control+0xe0>)
    45e2:	edd3 7a00 	vldr	s15, [r3]
    45e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 4650 <p_position_control+0xf4>
    45ea:	eef4 7ac7 	vcmpe.f32	s15, s14
    45ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45f2:	d409      	bmi.n	4608 <p_position_control+0xac>
    45f4:	4b11      	ldr	r3, [pc, #68]	; (463c <p_position_control+0xe0>)
    45f6:	edd3 7a00 	vldr	s15, [r3]
    45fa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 4654 <p_position_control+0xf8>
    45fe:	eef4 7ac7 	vcmpe.f32	s15, s14
    4602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4606:	dd03      	ble.n	4610 <p_position_control+0xb4>
		dutycycle_pos = 0;
    4608:	4b0c      	ldr	r3, [pc, #48]	; (463c <p_position_control+0xe0>)
    460a:	f04f 0200 	mov.w	r2, #0
    460e:	601a      	str	r2, [r3, #0]
	}
	
	return dutycycle_pos;
    4610:	4b0a      	ldr	r3, [pc, #40]	; (463c <p_position_control+0xe0>)
    4612:	edd3 7a00 	vldr	s15, [r3]
    4616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    461a:	ee17 3a90 	vmov	r3, s15
    461e:	4618      	mov	r0, r3
    4620:	3724      	adds	r7, #36	; 0x24
    4622:	46bd      	mov	sp, r7
    4624:	f85d 7b04 	ldr.w	r7, [sp], #4
    4628:	4770      	bx	lr
    462a:	bf00      	nop
    462c:	42c80000 	.word	0x42c80000
    4630:	c2c80000 	.word	0xc2c80000
    4634:	2000019c 	.word	0x2000019c
    4638:	20000048 	.word	0x20000048
    463c:	200001a8 	.word	0x200001a8
    4640:	43960000 	.word	0x43960000
    4644:	43960000 	.word	0x43960000
    4648:	c3960000 	.word	0xc3960000
    464c:	c3960000 	.word	0xc3960000
    4650:	42480000 	.word	0x42480000
    4654:	c2480000 	.word	0xc2480000

00004658 <__aeabi_drsub>:
    4658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    465c:	e002      	b.n	4664 <__adddf3>
    465e:	bf00      	nop

00004660 <__aeabi_dsub>:
    4660:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004664 <__adddf3>:
    4664:	b530      	push	{r4, r5, lr}
    4666:	ea4f 0441 	mov.w	r4, r1, lsl #1
    466a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    466e:	ea94 0f05 	teq	r4, r5
    4672:	bf08      	it	eq
    4674:	ea90 0f02 	teqeq	r0, r2
    4678:	bf1f      	itttt	ne
    467a:	ea54 0c00 	orrsne.w	ip, r4, r0
    467e:	ea55 0c02 	orrsne.w	ip, r5, r2
    4682:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4686:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    468a:	f000 80e2 	beq.w	4852 <__adddf3+0x1ee>
    468e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4692:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4696:	bfb8      	it	lt
    4698:	426d      	neglt	r5, r5
    469a:	dd0c      	ble.n	46b6 <__adddf3+0x52>
    469c:	442c      	add	r4, r5
    469e:	ea80 0202 	eor.w	r2, r0, r2
    46a2:	ea81 0303 	eor.w	r3, r1, r3
    46a6:	ea82 0000 	eor.w	r0, r2, r0
    46aa:	ea83 0101 	eor.w	r1, r3, r1
    46ae:	ea80 0202 	eor.w	r2, r0, r2
    46b2:	ea81 0303 	eor.w	r3, r1, r3
    46b6:	2d36      	cmp	r5, #54	; 0x36
    46b8:	bf88      	it	hi
    46ba:	bd30      	pophi	{r4, r5, pc}
    46bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    46c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    46c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    46c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    46cc:	d002      	beq.n	46d4 <__adddf3+0x70>
    46ce:	4240      	negs	r0, r0
    46d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    46d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    46d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    46dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    46e0:	d002      	beq.n	46e8 <__adddf3+0x84>
    46e2:	4252      	negs	r2, r2
    46e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    46e8:	ea94 0f05 	teq	r4, r5
    46ec:	f000 80a7 	beq.w	483e <__adddf3+0x1da>
    46f0:	f1a4 0401 	sub.w	r4, r4, #1
    46f4:	f1d5 0e20 	rsbs	lr, r5, #32
    46f8:	db0d      	blt.n	4716 <__adddf3+0xb2>
    46fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    46fe:	fa22 f205 	lsr.w	r2, r2, r5
    4702:	1880      	adds	r0, r0, r2
    4704:	f141 0100 	adc.w	r1, r1, #0
    4708:	fa03 f20e 	lsl.w	r2, r3, lr
    470c:	1880      	adds	r0, r0, r2
    470e:	fa43 f305 	asr.w	r3, r3, r5
    4712:	4159      	adcs	r1, r3
    4714:	e00e      	b.n	4734 <__adddf3+0xd0>
    4716:	f1a5 0520 	sub.w	r5, r5, #32
    471a:	f10e 0e20 	add.w	lr, lr, #32
    471e:	2a01      	cmp	r2, #1
    4720:	fa03 fc0e 	lsl.w	ip, r3, lr
    4724:	bf28      	it	cs
    4726:	f04c 0c02 	orrcs.w	ip, ip, #2
    472a:	fa43 f305 	asr.w	r3, r3, r5
    472e:	18c0      	adds	r0, r0, r3
    4730:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4738:	d507      	bpl.n	474a <__adddf3+0xe6>
    473a:	f04f 0e00 	mov.w	lr, #0
    473e:	f1dc 0c00 	rsbs	ip, ip, #0
    4742:	eb7e 0000 	sbcs.w	r0, lr, r0
    4746:	eb6e 0101 	sbc.w	r1, lr, r1
    474a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    474e:	d31b      	bcc.n	4788 <__adddf3+0x124>
    4750:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4754:	d30c      	bcc.n	4770 <__adddf3+0x10c>
    4756:	0849      	lsrs	r1, r1, #1
    4758:	ea5f 0030 	movs.w	r0, r0, rrx
    475c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4760:	f104 0401 	add.w	r4, r4, #1
    4764:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4768:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    476c:	f080 809a 	bcs.w	48a4 <__adddf3+0x240>
    4770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4774:	bf08      	it	eq
    4776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    477a:	f150 0000 	adcs.w	r0, r0, #0
    477e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4782:	ea41 0105 	orr.w	r1, r1, r5
    4786:	bd30      	pop	{r4, r5, pc}
    4788:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    478c:	4140      	adcs	r0, r0
    478e:	eb41 0101 	adc.w	r1, r1, r1
    4792:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4796:	f1a4 0401 	sub.w	r4, r4, #1
    479a:	d1e9      	bne.n	4770 <__adddf3+0x10c>
    479c:	f091 0f00 	teq	r1, #0
    47a0:	bf04      	itt	eq
    47a2:	4601      	moveq	r1, r0
    47a4:	2000      	moveq	r0, #0
    47a6:	fab1 f381 	clz	r3, r1
    47aa:	bf08      	it	eq
    47ac:	3320      	addeq	r3, #32
    47ae:	f1a3 030b 	sub.w	r3, r3, #11
    47b2:	f1b3 0220 	subs.w	r2, r3, #32
    47b6:	da0c      	bge.n	47d2 <__adddf3+0x16e>
    47b8:	320c      	adds	r2, #12
    47ba:	dd08      	ble.n	47ce <__adddf3+0x16a>
    47bc:	f102 0c14 	add.w	ip, r2, #20
    47c0:	f1c2 020c 	rsb	r2, r2, #12
    47c4:	fa01 f00c 	lsl.w	r0, r1, ip
    47c8:	fa21 f102 	lsr.w	r1, r1, r2
    47cc:	e00c      	b.n	47e8 <__adddf3+0x184>
    47ce:	f102 0214 	add.w	r2, r2, #20
    47d2:	bfd8      	it	le
    47d4:	f1c2 0c20 	rsble	ip, r2, #32
    47d8:	fa01 f102 	lsl.w	r1, r1, r2
    47dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    47e0:	bfdc      	itt	le
    47e2:	ea41 010c 	orrle.w	r1, r1, ip
    47e6:	4090      	lslle	r0, r2
    47e8:	1ae4      	subs	r4, r4, r3
    47ea:	bfa2      	ittt	ge
    47ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    47f0:	4329      	orrge	r1, r5
    47f2:	bd30      	popge	{r4, r5, pc}
    47f4:	ea6f 0404 	mvn.w	r4, r4
    47f8:	3c1f      	subs	r4, #31
    47fa:	da1c      	bge.n	4836 <__adddf3+0x1d2>
    47fc:	340c      	adds	r4, #12
    47fe:	dc0e      	bgt.n	481e <__adddf3+0x1ba>
    4800:	f104 0414 	add.w	r4, r4, #20
    4804:	f1c4 0220 	rsb	r2, r4, #32
    4808:	fa20 f004 	lsr.w	r0, r0, r4
    480c:	fa01 f302 	lsl.w	r3, r1, r2
    4810:	ea40 0003 	orr.w	r0, r0, r3
    4814:	fa21 f304 	lsr.w	r3, r1, r4
    4818:	ea45 0103 	orr.w	r1, r5, r3
    481c:	bd30      	pop	{r4, r5, pc}
    481e:	f1c4 040c 	rsb	r4, r4, #12
    4822:	f1c4 0220 	rsb	r2, r4, #32
    4826:	fa20 f002 	lsr.w	r0, r0, r2
    482a:	fa01 f304 	lsl.w	r3, r1, r4
    482e:	ea40 0003 	orr.w	r0, r0, r3
    4832:	4629      	mov	r1, r5
    4834:	bd30      	pop	{r4, r5, pc}
    4836:	fa21 f004 	lsr.w	r0, r1, r4
    483a:	4629      	mov	r1, r5
    483c:	bd30      	pop	{r4, r5, pc}
    483e:	f094 0f00 	teq	r4, #0
    4842:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4846:	bf06      	itte	eq
    4848:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    484c:	3401      	addeq	r4, #1
    484e:	3d01      	subne	r5, #1
    4850:	e74e      	b.n	46f0 <__adddf3+0x8c>
    4852:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4856:	bf18      	it	ne
    4858:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    485c:	d029      	beq.n	48b2 <__adddf3+0x24e>
    485e:	ea94 0f05 	teq	r4, r5
    4862:	bf08      	it	eq
    4864:	ea90 0f02 	teqeq	r0, r2
    4868:	d005      	beq.n	4876 <__adddf3+0x212>
    486a:	ea54 0c00 	orrs.w	ip, r4, r0
    486e:	bf04      	itt	eq
    4870:	4619      	moveq	r1, r3
    4872:	4610      	moveq	r0, r2
    4874:	bd30      	pop	{r4, r5, pc}
    4876:	ea91 0f03 	teq	r1, r3
    487a:	bf1e      	ittt	ne
    487c:	2100      	movne	r1, #0
    487e:	2000      	movne	r0, #0
    4880:	bd30      	popne	{r4, r5, pc}
    4882:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4886:	d105      	bne.n	4894 <__adddf3+0x230>
    4888:	0040      	lsls	r0, r0, #1
    488a:	4149      	adcs	r1, r1
    488c:	bf28      	it	cs
    488e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4892:	bd30      	pop	{r4, r5, pc}
    4894:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4898:	bf3c      	itt	cc
    489a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    489e:	bd30      	popcc	{r4, r5, pc}
    48a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    48a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    48a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    48ac:	f04f 0000 	mov.w	r0, #0
    48b0:	bd30      	pop	{r4, r5, pc}
    48b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    48b6:	bf1a      	itte	ne
    48b8:	4619      	movne	r1, r3
    48ba:	4610      	movne	r0, r2
    48bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    48c0:	bf1c      	itt	ne
    48c2:	460b      	movne	r3, r1
    48c4:	4602      	movne	r2, r0
    48c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    48ca:	bf06      	itte	eq
    48cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    48d0:	ea91 0f03 	teqeq	r1, r3
    48d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    48d8:	bd30      	pop	{r4, r5, pc}
    48da:	bf00      	nop

000048dc <__aeabi_ui2d>:
    48dc:	f090 0f00 	teq	r0, #0
    48e0:	bf04      	itt	eq
    48e2:	2100      	moveq	r1, #0
    48e4:	4770      	bxeq	lr
    48e6:	b530      	push	{r4, r5, lr}
    48e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    48ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    48f0:	f04f 0500 	mov.w	r5, #0
    48f4:	f04f 0100 	mov.w	r1, #0
    48f8:	e750      	b.n	479c <__adddf3+0x138>
    48fa:	bf00      	nop

000048fc <__aeabi_i2d>:
    48fc:	f090 0f00 	teq	r0, #0
    4900:	bf04      	itt	eq
    4902:	2100      	moveq	r1, #0
    4904:	4770      	bxeq	lr
    4906:	b530      	push	{r4, r5, lr}
    4908:	f44f 6480 	mov.w	r4, #1024	; 0x400
    490c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4910:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4914:	bf48      	it	mi
    4916:	4240      	negmi	r0, r0
    4918:	f04f 0100 	mov.w	r1, #0
    491c:	e73e      	b.n	479c <__adddf3+0x138>
    491e:	bf00      	nop

00004920 <__aeabi_f2d>:
    4920:	0042      	lsls	r2, r0, #1
    4922:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4926:	ea4f 0131 	mov.w	r1, r1, rrx
    492a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    492e:	bf1f      	itttt	ne
    4930:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4938:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    493c:	4770      	bxne	lr
    493e:	f092 0f00 	teq	r2, #0
    4942:	bf14      	ite	ne
    4944:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4948:	4770      	bxeq	lr
    494a:	b530      	push	{r4, r5, lr}
    494c:	f44f 7460 	mov.w	r4, #896	; 0x380
    4950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4958:	e720      	b.n	479c <__adddf3+0x138>
    495a:	bf00      	nop

0000495c <__aeabi_ul2d>:
    495c:	ea50 0201 	orrs.w	r2, r0, r1
    4960:	bf08      	it	eq
    4962:	4770      	bxeq	lr
    4964:	b530      	push	{r4, r5, lr}
    4966:	f04f 0500 	mov.w	r5, #0
    496a:	e00a      	b.n	4982 <__aeabi_l2d+0x16>

0000496c <__aeabi_l2d>:
    496c:	ea50 0201 	orrs.w	r2, r0, r1
    4970:	bf08      	it	eq
    4972:	4770      	bxeq	lr
    4974:	b530      	push	{r4, r5, lr}
    4976:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    497a:	d502      	bpl.n	4982 <__aeabi_l2d+0x16>
    497c:	4240      	negs	r0, r0
    497e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4982:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4986:	f104 0432 	add.w	r4, r4, #50	; 0x32
    498a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    498e:	f43f aedc 	beq.w	474a <__adddf3+0xe6>
    4992:	f04f 0203 	mov.w	r2, #3
    4996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    499a:	bf18      	it	ne
    499c:	3203      	addne	r2, #3
    499e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    49a2:	bf18      	it	ne
    49a4:	3203      	addne	r2, #3
    49a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    49aa:	f1c2 0320 	rsb	r3, r2, #32
    49ae:	fa00 fc03 	lsl.w	ip, r0, r3
    49b2:	fa20 f002 	lsr.w	r0, r0, r2
    49b6:	fa01 fe03 	lsl.w	lr, r1, r3
    49ba:	ea40 000e 	orr.w	r0, r0, lr
    49be:	fa21 f102 	lsr.w	r1, r1, r2
    49c2:	4414      	add	r4, r2
    49c4:	e6c1      	b.n	474a <__adddf3+0xe6>
    49c6:	bf00      	nop

000049c8 <__aeabi_dmul>:
    49c8:	b570      	push	{r4, r5, r6, lr}
    49ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    49ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    49d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    49d6:	bf1d      	ittte	ne
    49d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    49dc:	ea94 0f0c 	teqne	r4, ip
    49e0:	ea95 0f0c 	teqne	r5, ip
    49e4:	f000 f8de 	bleq	4ba4 <__aeabi_dmul+0x1dc>
    49e8:	442c      	add	r4, r5
    49ea:	ea81 0603 	eor.w	r6, r1, r3
    49ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    49f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    49f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    49fa:	bf18      	it	ne
    49fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4a08:	d038      	beq.n	4a7c <__aeabi_dmul+0xb4>
    4a0a:	fba0 ce02 	umull	ip, lr, r0, r2
    4a0e:	f04f 0500 	mov.w	r5, #0
    4a12:	fbe1 e502 	umlal	lr, r5, r1, r2
    4a16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4a1a:	fbe0 e503 	umlal	lr, r5, r0, r3
    4a1e:	f04f 0600 	mov.w	r6, #0
    4a22:	fbe1 5603 	umlal	r5, r6, r1, r3
    4a26:	f09c 0f00 	teq	ip, #0
    4a2a:	bf18      	it	ne
    4a2c:	f04e 0e01 	orrne.w	lr, lr, #1
    4a30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4a34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4a38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4a3c:	d204      	bcs.n	4a48 <__aeabi_dmul+0x80>
    4a3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4a42:	416d      	adcs	r5, r5
    4a44:	eb46 0606 	adc.w	r6, r6, r6
    4a48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4a4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4a50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4a54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4a58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4a5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4a60:	bf88      	it	hi
    4a62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4a66:	d81e      	bhi.n	4aa6 <__aeabi_dmul+0xde>
    4a68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4a6c:	bf08      	it	eq
    4a6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4a72:	f150 0000 	adcs.w	r0, r0, #0
    4a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4a7a:	bd70      	pop	{r4, r5, r6, pc}
    4a7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4a80:	ea46 0101 	orr.w	r1, r6, r1
    4a84:	ea40 0002 	orr.w	r0, r0, r2
    4a88:	ea81 0103 	eor.w	r1, r1, r3
    4a8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4a90:	bfc2      	ittt	gt
    4a92:	ebd4 050c 	rsbsgt	r5, r4, ip
    4a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4a9a:	bd70      	popgt	{r4, r5, r6, pc}
    4a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4aa0:	f04f 0e00 	mov.w	lr, #0
    4aa4:	3c01      	subs	r4, #1
    4aa6:	f300 80ab 	bgt.w	4c00 <__aeabi_dmul+0x238>
    4aaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4aae:	bfde      	ittt	le
    4ab0:	2000      	movle	r0, #0
    4ab2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4ab6:	bd70      	pople	{r4, r5, r6, pc}
    4ab8:	f1c4 0400 	rsb	r4, r4, #0
    4abc:	3c20      	subs	r4, #32
    4abe:	da35      	bge.n	4b2c <__aeabi_dmul+0x164>
    4ac0:	340c      	adds	r4, #12
    4ac2:	dc1b      	bgt.n	4afc <__aeabi_dmul+0x134>
    4ac4:	f104 0414 	add.w	r4, r4, #20
    4ac8:	f1c4 0520 	rsb	r5, r4, #32
    4acc:	fa00 f305 	lsl.w	r3, r0, r5
    4ad0:	fa20 f004 	lsr.w	r0, r0, r4
    4ad4:	fa01 f205 	lsl.w	r2, r1, r5
    4ad8:	ea40 0002 	orr.w	r0, r0, r2
    4adc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4ae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4ae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ae8:	fa21 f604 	lsr.w	r6, r1, r4
    4aec:	eb42 0106 	adc.w	r1, r2, r6
    4af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4af4:	bf08      	it	eq
    4af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4afa:	bd70      	pop	{r4, r5, r6, pc}
    4afc:	f1c4 040c 	rsb	r4, r4, #12
    4b00:	f1c4 0520 	rsb	r5, r4, #32
    4b04:	fa00 f304 	lsl.w	r3, r0, r4
    4b08:	fa20 f005 	lsr.w	r0, r0, r5
    4b0c:	fa01 f204 	lsl.w	r2, r1, r4
    4b10:	ea40 0002 	orr.w	r0, r0, r2
    4b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4b18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4b1c:	f141 0100 	adc.w	r1, r1, #0
    4b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4b24:	bf08      	it	eq
    4b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4b2a:	bd70      	pop	{r4, r5, r6, pc}
    4b2c:	f1c4 0520 	rsb	r5, r4, #32
    4b30:	fa00 f205 	lsl.w	r2, r0, r5
    4b34:	ea4e 0e02 	orr.w	lr, lr, r2
    4b38:	fa20 f304 	lsr.w	r3, r0, r4
    4b3c:	fa01 f205 	lsl.w	r2, r1, r5
    4b40:	ea43 0302 	orr.w	r3, r3, r2
    4b44:	fa21 f004 	lsr.w	r0, r1, r4
    4b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4b4c:	fa21 f204 	lsr.w	r2, r1, r4
    4b50:	ea20 0002 	bic.w	r0, r0, r2
    4b54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4b5c:	bf08      	it	eq
    4b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4b62:	bd70      	pop	{r4, r5, r6, pc}
    4b64:	f094 0f00 	teq	r4, #0
    4b68:	d10f      	bne.n	4b8a <__aeabi_dmul+0x1c2>
    4b6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4b6e:	0040      	lsls	r0, r0, #1
    4b70:	eb41 0101 	adc.w	r1, r1, r1
    4b74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4b78:	bf08      	it	eq
    4b7a:	3c01      	subeq	r4, #1
    4b7c:	d0f7      	beq.n	4b6e <__aeabi_dmul+0x1a6>
    4b7e:	ea41 0106 	orr.w	r1, r1, r6
    4b82:	f095 0f00 	teq	r5, #0
    4b86:	bf18      	it	ne
    4b88:	4770      	bxne	lr
    4b8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4b8e:	0052      	lsls	r2, r2, #1
    4b90:	eb43 0303 	adc.w	r3, r3, r3
    4b94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4b98:	bf08      	it	eq
    4b9a:	3d01      	subeq	r5, #1
    4b9c:	d0f7      	beq.n	4b8e <__aeabi_dmul+0x1c6>
    4b9e:	ea43 0306 	orr.w	r3, r3, r6
    4ba2:	4770      	bx	lr
    4ba4:	ea94 0f0c 	teq	r4, ip
    4ba8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4bac:	bf18      	it	ne
    4bae:	ea95 0f0c 	teqne	r5, ip
    4bb2:	d00c      	beq.n	4bce <__aeabi_dmul+0x206>
    4bb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4bb8:	bf18      	it	ne
    4bba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4bbe:	d1d1      	bne.n	4b64 <__aeabi_dmul+0x19c>
    4bc0:	ea81 0103 	eor.w	r1, r1, r3
    4bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4bc8:	f04f 0000 	mov.w	r0, #0
    4bcc:	bd70      	pop	{r4, r5, r6, pc}
    4bce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4bd2:	bf06      	itte	eq
    4bd4:	4610      	moveq	r0, r2
    4bd6:	4619      	moveq	r1, r3
    4bd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4bdc:	d019      	beq.n	4c12 <__aeabi_dmul+0x24a>
    4bde:	ea94 0f0c 	teq	r4, ip
    4be2:	d102      	bne.n	4bea <__aeabi_dmul+0x222>
    4be4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4be8:	d113      	bne.n	4c12 <__aeabi_dmul+0x24a>
    4bea:	ea95 0f0c 	teq	r5, ip
    4bee:	d105      	bne.n	4bfc <__aeabi_dmul+0x234>
    4bf0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4bf4:	bf1c      	itt	ne
    4bf6:	4610      	movne	r0, r2
    4bf8:	4619      	movne	r1, r3
    4bfa:	d10a      	bne.n	4c12 <__aeabi_dmul+0x24a>
    4bfc:	ea81 0103 	eor.w	r1, r1, r3
    4c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4c04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4c08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4c0c:	f04f 0000 	mov.w	r0, #0
    4c10:	bd70      	pop	{r4, r5, r6, pc}
    4c12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4c16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4c1a:	bd70      	pop	{r4, r5, r6, pc}

00004c1c <__aeabi_ddiv>:
    4c1c:	b570      	push	{r4, r5, r6, lr}
    4c1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4c22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4c26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4c2a:	bf1d      	ittte	ne
    4c2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4c30:	ea94 0f0c 	teqne	r4, ip
    4c34:	ea95 0f0c 	teqne	r5, ip
    4c38:	f000 f8a7 	bleq	4d8a <__aeabi_ddiv+0x16e>
    4c3c:	eba4 0405 	sub.w	r4, r4, r5
    4c40:	ea81 0e03 	eor.w	lr, r1, r3
    4c44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4c48:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4c4c:	f000 8088 	beq.w	4d60 <__aeabi_ddiv+0x144>
    4c50:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4c54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4c58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    4c5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4c60:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4c64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4c68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    4c6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4c70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4c74:	429d      	cmp	r5, r3
    4c76:	bf08      	it	eq
    4c78:	4296      	cmpeq	r6, r2
    4c7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    4c7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    4c82:	d202      	bcs.n	4c8a <__aeabi_ddiv+0x6e>
    4c84:	085b      	lsrs	r3, r3, #1
    4c86:	ea4f 0232 	mov.w	r2, r2, rrx
    4c8a:	1ab6      	subs	r6, r6, r2
    4c8c:	eb65 0503 	sbc.w	r5, r5, r3
    4c90:	085b      	lsrs	r3, r3, #1
    4c92:	ea4f 0232 	mov.w	r2, r2, rrx
    4c96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4c9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    4c9e:	ebb6 0e02 	subs.w	lr, r6, r2
    4ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
    4ca6:	bf22      	ittt	cs
    4ca8:	1ab6      	subcs	r6, r6, r2
    4caa:	4675      	movcs	r5, lr
    4cac:	ea40 000c 	orrcs.w	r0, r0, ip
    4cb0:	085b      	lsrs	r3, r3, #1
    4cb2:	ea4f 0232 	mov.w	r2, r2, rrx
    4cb6:	ebb6 0e02 	subs.w	lr, r6, r2
    4cba:	eb75 0e03 	sbcs.w	lr, r5, r3
    4cbe:	bf22      	ittt	cs
    4cc0:	1ab6      	subcs	r6, r6, r2
    4cc2:	4675      	movcs	r5, lr
    4cc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4cc8:	085b      	lsrs	r3, r3, #1
    4cca:	ea4f 0232 	mov.w	r2, r2, rrx
    4cce:	ebb6 0e02 	subs.w	lr, r6, r2
    4cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
    4cd6:	bf22      	ittt	cs
    4cd8:	1ab6      	subcs	r6, r6, r2
    4cda:	4675      	movcs	r5, lr
    4cdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4ce0:	085b      	lsrs	r3, r3, #1
    4ce2:	ea4f 0232 	mov.w	r2, r2, rrx
    4ce6:	ebb6 0e02 	subs.w	lr, r6, r2
    4cea:	eb75 0e03 	sbcs.w	lr, r5, r3
    4cee:	bf22      	ittt	cs
    4cf0:	1ab6      	subcs	r6, r6, r2
    4cf2:	4675      	movcs	r5, lr
    4cf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4cf8:	ea55 0e06 	orrs.w	lr, r5, r6
    4cfc:	d018      	beq.n	4d30 <__aeabi_ddiv+0x114>
    4cfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
    4d02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    4d06:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4d0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4d0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    4d12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    4d16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4d1a:	d1c0      	bne.n	4c9e <__aeabi_ddiv+0x82>
    4d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4d20:	d10b      	bne.n	4d3a <__aeabi_ddiv+0x11e>
    4d22:	ea41 0100 	orr.w	r1, r1, r0
    4d26:	f04f 0000 	mov.w	r0, #0
    4d2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    4d2e:	e7b6      	b.n	4c9e <__aeabi_ddiv+0x82>
    4d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4d34:	bf04      	itt	eq
    4d36:	4301      	orreq	r1, r0
    4d38:	2000      	moveq	r0, #0
    4d3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4d3e:	bf88      	it	hi
    4d40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4d44:	f63f aeaf 	bhi.w	4aa6 <__aeabi_dmul+0xde>
    4d48:	ebb5 0c03 	subs.w	ip, r5, r3
    4d4c:	bf04      	itt	eq
    4d4e:	ebb6 0c02 	subseq.w	ip, r6, r2
    4d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4d56:	f150 0000 	adcs.w	r0, r0, #0
    4d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4d5e:	bd70      	pop	{r4, r5, r6, pc}
    4d60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4d64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4d68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    4d6c:	bfc2      	ittt	gt
    4d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4d76:	bd70      	popgt	{r4, r5, r6, pc}
    4d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4d7c:	f04f 0e00 	mov.w	lr, #0
    4d80:	3c01      	subs	r4, #1
    4d82:	e690      	b.n	4aa6 <__aeabi_dmul+0xde>
    4d84:	ea45 0e06 	orr.w	lr, r5, r6
    4d88:	e68d      	b.n	4aa6 <__aeabi_dmul+0xde>
    4d8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4d8e:	ea94 0f0c 	teq	r4, ip
    4d92:	bf08      	it	eq
    4d94:	ea95 0f0c 	teqeq	r5, ip
    4d98:	f43f af3b 	beq.w	4c12 <__aeabi_dmul+0x24a>
    4d9c:	ea94 0f0c 	teq	r4, ip
    4da0:	d10a      	bne.n	4db8 <__aeabi_ddiv+0x19c>
    4da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4da6:	f47f af34 	bne.w	4c12 <__aeabi_dmul+0x24a>
    4daa:	ea95 0f0c 	teq	r5, ip
    4dae:	f47f af25 	bne.w	4bfc <__aeabi_dmul+0x234>
    4db2:	4610      	mov	r0, r2
    4db4:	4619      	mov	r1, r3
    4db6:	e72c      	b.n	4c12 <__aeabi_dmul+0x24a>
    4db8:	ea95 0f0c 	teq	r5, ip
    4dbc:	d106      	bne.n	4dcc <__aeabi_ddiv+0x1b0>
    4dbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4dc2:	f43f aefd 	beq.w	4bc0 <__aeabi_dmul+0x1f8>
    4dc6:	4610      	mov	r0, r2
    4dc8:	4619      	mov	r1, r3
    4dca:	e722      	b.n	4c12 <__aeabi_dmul+0x24a>
    4dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4dd0:	bf18      	it	ne
    4dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4dd6:	f47f aec5 	bne.w	4b64 <__aeabi_dmul+0x19c>
    4dda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4dde:	f47f af0d 	bne.w	4bfc <__aeabi_dmul+0x234>
    4de2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    4de6:	f47f aeeb 	bne.w	4bc0 <__aeabi_dmul+0x1f8>
    4dea:	e712      	b.n	4c12 <__aeabi_dmul+0x24a>

00004dec <__aeabi_d2uiz>:
    4dec:	004a      	lsls	r2, r1, #1
    4dee:	d211      	bcs.n	4e14 <__aeabi_d2uiz+0x28>
    4df0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    4df4:	d211      	bcs.n	4e1a <__aeabi_d2uiz+0x2e>
    4df6:	d50d      	bpl.n	4e14 <__aeabi_d2uiz+0x28>
    4df8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    4dfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    4e00:	d40e      	bmi.n	4e20 <__aeabi_d2uiz+0x34>
    4e02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4e0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    4e0e:	fa23 f002 	lsr.w	r0, r3, r2
    4e12:	4770      	bx	lr
    4e14:	f04f 0000 	mov.w	r0, #0
    4e18:	4770      	bx	lr
    4e1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    4e1e:	d102      	bne.n	4e26 <__aeabi_d2uiz+0x3a>
    4e20:	f04f 30ff 	mov.w	r0, #4294967295
    4e24:	4770      	bx	lr
    4e26:	f04f 0000 	mov.w	r0, #0
    4e2a:	4770      	bx	lr

00004e2c <ffs>:
    4e2c:	b140      	cbz	r0, 4e40 <ffs+0x14>
    4e2e:	2200      	movs	r2, #0
    4e30:	fa40 f102 	asr.w	r1, r0, r2
    4e34:	1c53      	adds	r3, r2, #1
    4e36:	07c9      	lsls	r1, r1, #31
    4e38:	461a      	mov	r2, r3
    4e3a:	d5f9      	bpl.n	4e30 <ffs+0x4>
    4e3c:	4618      	mov	r0, r3
    4e3e:	4770      	bx	lr
    4e40:	4603      	mov	r3, r0
    4e42:	e7fb      	b.n	4e3c <ffs+0x10>

00004e44 <__libc_init_array>:
    4e44:	b570      	push	{r4, r5, r6, lr}
    4e46:	4e0d      	ldr	r6, [pc, #52]	; (4e7c <__libc_init_array+0x38>)
    4e48:	4c0d      	ldr	r4, [pc, #52]	; (4e80 <__libc_init_array+0x3c>)
    4e4a:	1ba4      	subs	r4, r4, r6
    4e4c:	10a4      	asrs	r4, r4, #2
    4e4e:	2500      	movs	r5, #0
    4e50:	42a5      	cmp	r5, r4
    4e52:	d109      	bne.n	4e68 <__libc_init_array+0x24>
    4e54:	4e0b      	ldr	r6, [pc, #44]	; (4e84 <__libc_init_array+0x40>)
    4e56:	4c0c      	ldr	r4, [pc, #48]	; (4e88 <__libc_init_array+0x44>)
    4e58:	f000 fe26 	bl	5aa8 <_init>
    4e5c:	1ba4      	subs	r4, r4, r6
    4e5e:	10a4      	asrs	r4, r4, #2
    4e60:	2500      	movs	r5, #0
    4e62:	42a5      	cmp	r5, r4
    4e64:	d105      	bne.n	4e72 <__libc_init_array+0x2e>
    4e66:	bd70      	pop	{r4, r5, r6, pc}
    4e68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4e6c:	4798      	blx	r3
    4e6e:	3501      	adds	r5, #1
    4e70:	e7ee      	b.n	4e50 <__libc_init_array+0xc>
    4e72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4e76:	4798      	blx	r3
    4e78:	3501      	adds	r5, #1
    4e7a:	e7f2      	b.n	4e62 <__libc_init_array+0x1e>
    4e7c:	00005ab4 	.word	0x00005ab4
    4e80:	00005ab4 	.word	0x00005ab4
    4e84:	00005ab4 	.word	0x00005ab4
    4e88:	00005ab8 	.word	0x00005ab8

00004e8c <siprintf>:
    4e8c:	b40e      	push	{r1, r2, r3}
    4e8e:	b500      	push	{lr}
    4e90:	b09c      	sub	sp, #112	; 0x70
    4e92:	f44f 7102 	mov.w	r1, #520	; 0x208
    4e96:	ab1d      	add	r3, sp, #116	; 0x74
    4e98:	f8ad 1014 	strh.w	r1, [sp, #20]
    4e9c:	9002      	str	r0, [sp, #8]
    4e9e:	9006      	str	r0, [sp, #24]
    4ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ea4:	480a      	ldr	r0, [pc, #40]	; (4ed0 <siprintf+0x44>)
    4ea6:	9104      	str	r1, [sp, #16]
    4ea8:	9107      	str	r1, [sp, #28]
    4eaa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4eae:	f853 2b04 	ldr.w	r2, [r3], #4
    4eb2:	f8ad 1016 	strh.w	r1, [sp, #22]
    4eb6:	6800      	ldr	r0, [r0, #0]
    4eb8:	9301      	str	r3, [sp, #4]
    4eba:	a902      	add	r1, sp, #8
    4ebc:	f000 f8c4 	bl	5048 <_svfiprintf_r>
    4ec0:	9b02      	ldr	r3, [sp, #8]
    4ec2:	2200      	movs	r2, #0
    4ec4:	701a      	strb	r2, [r3, #0]
    4ec6:	b01c      	add	sp, #112	; 0x70
    4ec8:	f85d eb04 	ldr.w	lr, [sp], #4
    4ecc:	b003      	add	sp, #12
    4ece:	4770      	bx	lr
    4ed0:	2000004c 	.word	0x2000004c

00004ed4 <_malloc_r>:
    4ed4:	b570      	push	{r4, r5, r6, lr}
    4ed6:	1ccd      	adds	r5, r1, #3
    4ed8:	f025 0503 	bic.w	r5, r5, #3
    4edc:	3508      	adds	r5, #8
    4ede:	2d0c      	cmp	r5, #12
    4ee0:	bf38      	it	cc
    4ee2:	250c      	movcc	r5, #12
    4ee4:	2d00      	cmp	r5, #0
    4ee6:	4606      	mov	r6, r0
    4ee8:	db01      	blt.n	4eee <_malloc_r+0x1a>
    4eea:	42a9      	cmp	r1, r5
    4eec:	d903      	bls.n	4ef6 <_malloc_r+0x22>
    4eee:	230c      	movs	r3, #12
    4ef0:	6033      	str	r3, [r6, #0]
    4ef2:	2000      	movs	r0, #0
    4ef4:	bd70      	pop	{r4, r5, r6, pc}
    4ef6:	f000 fbb8 	bl	566a <__malloc_lock>
    4efa:	4a23      	ldr	r2, [pc, #140]	; (4f88 <_malloc_r+0xb4>)
    4efc:	6814      	ldr	r4, [r2, #0]
    4efe:	4621      	mov	r1, r4
    4f00:	b991      	cbnz	r1, 4f28 <_malloc_r+0x54>
    4f02:	4c22      	ldr	r4, [pc, #136]	; (4f8c <_malloc_r+0xb8>)
    4f04:	6823      	ldr	r3, [r4, #0]
    4f06:	b91b      	cbnz	r3, 4f10 <_malloc_r+0x3c>
    4f08:	4630      	mov	r0, r6
    4f0a:	f000 fb27 	bl	555c <_sbrk_r>
    4f0e:	6020      	str	r0, [r4, #0]
    4f10:	4629      	mov	r1, r5
    4f12:	4630      	mov	r0, r6
    4f14:	f000 fb22 	bl	555c <_sbrk_r>
    4f18:	1c43      	adds	r3, r0, #1
    4f1a:	d126      	bne.n	4f6a <_malloc_r+0x96>
    4f1c:	230c      	movs	r3, #12
    4f1e:	6033      	str	r3, [r6, #0]
    4f20:	4630      	mov	r0, r6
    4f22:	f000 fba3 	bl	566c <__malloc_unlock>
    4f26:	e7e4      	b.n	4ef2 <_malloc_r+0x1e>
    4f28:	680b      	ldr	r3, [r1, #0]
    4f2a:	1b5b      	subs	r3, r3, r5
    4f2c:	d41a      	bmi.n	4f64 <_malloc_r+0x90>
    4f2e:	2b0b      	cmp	r3, #11
    4f30:	d90f      	bls.n	4f52 <_malloc_r+0x7e>
    4f32:	600b      	str	r3, [r1, #0]
    4f34:	50cd      	str	r5, [r1, r3]
    4f36:	18cc      	adds	r4, r1, r3
    4f38:	4630      	mov	r0, r6
    4f3a:	f000 fb97 	bl	566c <__malloc_unlock>
    4f3e:	f104 000b 	add.w	r0, r4, #11
    4f42:	1d23      	adds	r3, r4, #4
    4f44:	f020 0007 	bic.w	r0, r0, #7
    4f48:	1ac3      	subs	r3, r0, r3
    4f4a:	d01b      	beq.n	4f84 <_malloc_r+0xb0>
    4f4c:	425a      	negs	r2, r3
    4f4e:	50e2      	str	r2, [r4, r3]
    4f50:	bd70      	pop	{r4, r5, r6, pc}
    4f52:	428c      	cmp	r4, r1
    4f54:	bf0d      	iteet	eq
    4f56:	6863      	ldreq	r3, [r4, #4]
    4f58:	684b      	ldrne	r3, [r1, #4]
    4f5a:	6063      	strne	r3, [r4, #4]
    4f5c:	6013      	streq	r3, [r2, #0]
    4f5e:	bf18      	it	ne
    4f60:	460c      	movne	r4, r1
    4f62:	e7e9      	b.n	4f38 <_malloc_r+0x64>
    4f64:	460c      	mov	r4, r1
    4f66:	6849      	ldr	r1, [r1, #4]
    4f68:	e7ca      	b.n	4f00 <_malloc_r+0x2c>
    4f6a:	1cc4      	adds	r4, r0, #3
    4f6c:	f024 0403 	bic.w	r4, r4, #3
    4f70:	42a0      	cmp	r0, r4
    4f72:	d005      	beq.n	4f80 <_malloc_r+0xac>
    4f74:	1a21      	subs	r1, r4, r0
    4f76:	4630      	mov	r0, r6
    4f78:	f000 faf0 	bl	555c <_sbrk_r>
    4f7c:	3001      	adds	r0, #1
    4f7e:	d0cd      	beq.n	4f1c <_malloc_r+0x48>
    4f80:	6025      	str	r5, [r4, #0]
    4f82:	e7d9      	b.n	4f38 <_malloc_r+0x64>
    4f84:	bd70      	pop	{r4, r5, r6, pc}
    4f86:	bf00      	nop
    4f88:	200001ac 	.word	0x200001ac
    4f8c:	200001b0 	.word	0x200001b0

00004f90 <__ssputs_r>:
    4f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f94:	688e      	ldr	r6, [r1, #8]
    4f96:	429e      	cmp	r6, r3
    4f98:	4682      	mov	sl, r0
    4f9a:	460c      	mov	r4, r1
    4f9c:	4691      	mov	r9, r2
    4f9e:	4698      	mov	r8, r3
    4fa0:	d835      	bhi.n	500e <__ssputs_r+0x7e>
    4fa2:	898a      	ldrh	r2, [r1, #12]
    4fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    4fa8:	d031      	beq.n	500e <__ssputs_r+0x7e>
    4faa:	6825      	ldr	r5, [r4, #0]
    4fac:	6909      	ldr	r1, [r1, #16]
    4fae:	1a6f      	subs	r7, r5, r1
    4fb0:	6965      	ldr	r5, [r4, #20]
    4fb2:	2302      	movs	r3, #2
    4fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4fb8:	fb95 f5f3 	sdiv	r5, r5, r3
    4fbc:	f108 0301 	add.w	r3, r8, #1
    4fc0:	443b      	add	r3, r7
    4fc2:	429d      	cmp	r5, r3
    4fc4:	bf38      	it	cc
    4fc6:	461d      	movcc	r5, r3
    4fc8:	0553      	lsls	r3, r2, #21
    4fca:	d531      	bpl.n	5030 <__ssputs_r+0xa0>
    4fcc:	4629      	mov	r1, r5
    4fce:	f7ff ff81 	bl	4ed4 <_malloc_r>
    4fd2:	4606      	mov	r6, r0
    4fd4:	b950      	cbnz	r0, 4fec <__ssputs_r+0x5c>
    4fd6:	230c      	movs	r3, #12
    4fd8:	f8ca 3000 	str.w	r3, [sl]
    4fdc:	89a3      	ldrh	r3, [r4, #12]
    4fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4fe2:	81a3      	strh	r3, [r4, #12]
    4fe4:	f04f 30ff 	mov.w	r0, #4294967295
    4fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fec:	463a      	mov	r2, r7
    4fee:	6921      	ldr	r1, [r4, #16]
    4ff0:	f000 fb16 	bl	5620 <memcpy>
    4ff4:	89a3      	ldrh	r3, [r4, #12]
    4ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    4ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ffe:	81a3      	strh	r3, [r4, #12]
    5000:	6126      	str	r6, [r4, #16]
    5002:	6165      	str	r5, [r4, #20]
    5004:	443e      	add	r6, r7
    5006:	1bed      	subs	r5, r5, r7
    5008:	6026      	str	r6, [r4, #0]
    500a:	60a5      	str	r5, [r4, #8]
    500c:	4646      	mov	r6, r8
    500e:	4546      	cmp	r6, r8
    5010:	bf28      	it	cs
    5012:	4646      	movcs	r6, r8
    5014:	4632      	mov	r2, r6
    5016:	4649      	mov	r1, r9
    5018:	6820      	ldr	r0, [r4, #0]
    501a:	f000 fb0c 	bl	5636 <memmove>
    501e:	68a3      	ldr	r3, [r4, #8]
    5020:	1b9b      	subs	r3, r3, r6
    5022:	60a3      	str	r3, [r4, #8]
    5024:	6823      	ldr	r3, [r4, #0]
    5026:	441e      	add	r6, r3
    5028:	6026      	str	r6, [r4, #0]
    502a:	2000      	movs	r0, #0
    502c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5030:	462a      	mov	r2, r5
    5032:	f000 fb6b 	bl	570c <_realloc_r>
    5036:	4606      	mov	r6, r0
    5038:	2800      	cmp	r0, #0
    503a:	d1e1      	bne.n	5000 <__ssputs_r+0x70>
    503c:	6921      	ldr	r1, [r4, #16]
    503e:	4650      	mov	r0, sl
    5040:	f000 fb16 	bl	5670 <_free_r>
    5044:	e7c7      	b.n	4fd6 <__ssputs_r+0x46>
	...

00005048 <_svfiprintf_r>:
    5048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    504c:	b09d      	sub	sp, #116	; 0x74
    504e:	4680      	mov	r8, r0
    5050:	9303      	str	r3, [sp, #12]
    5052:	898b      	ldrh	r3, [r1, #12]
    5054:	061c      	lsls	r4, r3, #24
    5056:	460d      	mov	r5, r1
    5058:	4616      	mov	r6, r2
    505a:	d50f      	bpl.n	507c <_svfiprintf_r+0x34>
    505c:	690b      	ldr	r3, [r1, #16]
    505e:	b96b      	cbnz	r3, 507c <_svfiprintf_r+0x34>
    5060:	2140      	movs	r1, #64	; 0x40
    5062:	f7ff ff37 	bl	4ed4 <_malloc_r>
    5066:	6028      	str	r0, [r5, #0]
    5068:	6128      	str	r0, [r5, #16]
    506a:	b928      	cbnz	r0, 5078 <_svfiprintf_r+0x30>
    506c:	230c      	movs	r3, #12
    506e:	f8c8 3000 	str.w	r3, [r8]
    5072:	f04f 30ff 	mov.w	r0, #4294967295
    5076:	e0c5      	b.n	5204 <_svfiprintf_r+0x1bc>
    5078:	2340      	movs	r3, #64	; 0x40
    507a:	616b      	str	r3, [r5, #20]
    507c:	2300      	movs	r3, #0
    507e:	9309      	str	r3, [sp, #36]	; 0x24
    5080:	2320      	movs	r3, #32
    5082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5086:	2330      	movs	r3, #48	; 0x30
    5088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    508c:	f04f 0b01 	mov.w	fp, #1
    5090:	4637      	mov	r7, r6
    5092:	463c      	mov	r4, r7
    5094:	f814 3b01 	ldrb.w	r3, [r4], #1
    5098:	2b00      	cmp	r3, #0
    509a:	d13c      	bne.n	5116 <_svfiprintf_r+0xce>
    509c:	ebb7 0a06 	subs.w	sl, r7, r6
    50a0:	d00b      	beq.n	50ba <_svfiprintf_r+0x72>
    50a2:	4653      	mov	r3, sl
    50a4:	4632      	mov	r2, r6
    50a6:	4629      	mov	r1, r5
    50a8:	4640      	mov	r0, r8
    50aa:	f7ff ff71 	bl	4f90 <__ssputs_r>
    50ae:	3001      	adds	r0, #1
    50b0:	f000 80a3 	beq.w	51fa <_svfiprintf_r+0x1b2>
    50b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    50b6:	4453      	add	r3, sl
    50b8:	9309      	str	r3, [sp, #36]	; 0x24
    50ba:	783b      	ldrb	r3, [r7, #0]
    50bc:	2b00      	cmp	r3, #0
    50be:	f000 809c 	beq.w	51fa <_svfiprintf_r+0x1b2>
    50c2:	2300      	movs	r3, #0
    50c4:	f04f 32ff 	mov.w	r2, #4294967295
    50c8:	9304      	str	r3, [sp, #16]
    50ca:	9307      	str	r3, [sp, #28]
    50cc:	9205      	str	r2, [sp, #20]
    50ce:	9306      	str	r3, [sp, #24]
    50d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    50d4:	931a      	str	r3, [sp, #104]	; 0x68
    50d6:	2205      	movs	r2, #5
    50d8:	7821      	ldrb	r1, [r4, #0]
    50da:	4850      	ldr	r0, [pc, #320]	; (521c <_svfiprintf_r+0x1d4>)
    50dc:	f000 fa50 	bl	5580 <memchr>
    50e0:	1c67      	adds	r7, r4, #1
    50e2:	9b04      	ldr	r3, [sp, #16]
    50e4:	b9d8      	cbnz	r0, 511e <_svfiprintf_r+0xd6>
    50e6:	06d9      	lsls	r1, r3, #27
    50e8:	bf44      	itt	mi
    50ea:	2220      	movmi	r2, #32
    50ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    50f0:	071a      	lsls	r2, r3, #28
    50f2:	bf44      	itt	mi
    50f4:	222b      	movmi	r2, #43	; 0x2b
    50f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    50fa:	7822      	ldrb	r2, [r4, #0]
    50fc:	2a2a      	cmp	r2, #42	; 0x2a
    50fe:	d016      	beq.n	512e <_svfiprintf_r+0xe6>
    5100:	9a07      	ldr	r2, [sp, #28]
    5102:	2100      	movs	r1, #0
    5104:	200a      	movs	r0, #10
    5106:	4627      	mov	r7, r4
    5108:	3401      	adds	r4, #1
    510a:	783b      	ldrb	r3, [r7, #0]
    510c:	3b30      	subs	r3, #48	; 0x30
    510e:	2b09      	cmp	r3, #9
    5110:	d951      	bls.n	51b6 <_svfiprintf_r+0x16e>
    5112:	b1c9      	cbz	r1, 5148 <_svfiprintf_r+0x100>
    5114:	e011      	b.n	513a <_svfiprintf_r+0xf2>
    5116:	2b25      	cmp	r3, #37	; 0x25
    5118:	d0c0      	beq.n	509c <_svfiprintf_r+0x54>
    511a:	4627      	mov	r7, r4
    511c:	e7b9      	b.n	5092 <_svfiprintf_r+0x4a>
    511e:	4a3f      	ldr	r2, [pc, #252]	; (521c <_svfiprintf_r+0x1d4>)
    5120:	1a80      	subs	r0, r0, r2
    5122:	fa0b f000 	lsl.w	r0, fp, r0
    5126:	4318      	orrs	r0, r3
    5128:	9004      	str	r0, [sp, #16]
    512a:	463c      	mov	r4, r7
    512c:	e7d3      	b.n	50d6 <_svfiprintf_r+0x8e>
    512e:	9a03      	ldr	r2, [sp, #12]
    5130:	1d11      	adds	r1, r2, #4
    5132:	6812      	ldr	r2, [r2, #0]
    5134:	9103      	str	r1, [sp, #12]
    5136:	2a00      	cmp	r2, #0
    5138:	db01      	blt.n	513e <_svfiprintf_r+0xf6>
    513a:	9207      	str	r2, [sp, #28]
    513c:	e004      	b.n	5148 <_svfiprintf_r+0x100>
    513e:	4252      	negs	r2, r2
    5140:	f043 0302 	orr.w	r3, r3, #2
    5144:	9207      	str	r2, [sp, #28]
    5146:	9304      	str	r3, [sp, #16]
    5148:	783b      	ldrb	r3, [r7, #0]
    514a:	2b2e      	cmp	r3, #46	; 0x2e
    514c:	d10e      	bne.n	516c <_svfiprintf_r+0x124>
    514e:	787b      	ldrb	r3, [r7, #1]
    5150:	2b2a      	cmp	r3, #42	; 0x2a
    5152:	f107 0101 	add.w	r1, r7, #1
    5156:	d132      	bne.n	51be <_svfiprintf_r+0x176>
    5158:	9b03      	ldr	r3, [sp, #12]
    515a:	1d1a      	adds	r2, r3, #4
    515c:	681b      	ldr	r3, [r3, #0]
    515e:	9203      	str	r2, [sp, #12]
    5160:	2b00      	cmp	r3, #0
    5162:	bfb8      	it	lt
    5164:	f04f 33ff 	movlt.w	r3, #4294967295
    5168:	3702      	adds	r7, #2
    516a:	9305      	str	r3, [sp, #20]
    516c:	4c2c      	ldr	r4, [pc, #176]	; (5220 <_svfiprintf_r+0x1d8>)
    516e:	7839      	ldrb	r1, [r7, #0]
    5170:	2203      	movs	r2, #3
    5172:	4620      	mov	r0, r4
    5174:	f000 fa04 	bl	5580 <memchr>
    5178:	b138      	cbz	r0, 518a <_svfiprintf_r+0x142>
    517a:	2340      	movs	r3, #64	; 0x40
    517c:	1b00      	subs	r0, r0, r4
    517e:	fa03 f000 	lsl.w	r0, r3, r0
    5182:	9b04      	ldr	r3, [sp, #16]
    5184:	4303      	orrs	r3, r0
    5186:	9304      	str	r3, [sp, #16]
    5188:	3701      	adds	r7, #1
    518a:	7839      	ldrb	r1, [r7, #0]
    518c:	4825      	ldr	r0, [pc, #148]	; (5224 <_svfiprintf_r+0x1dc>)
    518e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5192:	2206      	movs	r2, #6
    5194:	1c7e      	adds	r6, r7, #1
    5196:	f000 f9f3 	bl	5580 <memchr>
    519a:	2800      	cmp	r0, #0
    519c:	d035      	beq.n	520a <_svfiprintf_r+0x1c2>
    519e:	4b22      	ldr	r3, [pc, #136]	; (5228 <_svfiprintf_r+0x1e0>)
    51a0:	b9fb      	cbnz	r3, 51e2 <_svfiprintf_r+0x19a>
    51a2:	9b03      	ldr	r3, [sp, #12]
    51a4:	3307      	adds	r3, #7
    51a6:	f023 0307 	bic.w	r3, r3, #7
    51aa:	3308      	adds	r3, #8
    51ac:	9303      	str	r3, [sp, #12]
    51ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51b0:	444b      	add	r3, r9
    51b2:	9309      	str	r3, [sp, #36]	; 0x24
    51b4:	e76c      	b.n	5090 <_svfiprintf_r+0x48>
    51b6:	fb00 3202 	mla	r2, r0, r2, r3
    51ba:	2101      	movs	r1, #1
    51bc:	e7a3      	b.n	5106 <_svfiprintf_r+0xbe>
    51be:	2300      	movs	r3, #0
    51c0:	9305      	str	r3, [sp, #20]
    51c2:	4618      	mov	r0, r3
    51c4:	240a      	movs	r4, #10
    51c6:	460f      	mov	r7, r1
    51c8:	3101      	adds	r1, #1
    51ca:	783a      	ldrb	r2, [r7, #0]
    51cc:	3a30      	subs	r2, #48	; 0x30
    51ce:	2a09      	cmp	r2, #9
    51d0:	d903      	bls.n	51da <_svfiprintf_r+0x192>
    51d2:	2b00      	cmp	r3, #0
    51d4:	d0ca      	beq.n	516c <_svfiprintf_r+0x124>
    51d6:	9005      	str	r0, [sp, #20]
    51d8:	e7c8      	b.n	516c <_svfiprintf_r+0x124>
    51da:	fb04 2000 	mla	r0, r4, r0, r2
    51de:	2301      	movs	r3, #1
    51e0:	e7f1      	b.n	51c6 <_svfiprintf_r+0x17e>
    51e2:	ab03      	add	r3, sp, #12
    51e4:	9300      	str	r3, [sp, #0]
    51e6:	462a      	mov	r2, r5
    51e8:	4b10      	ldr	r3, [pc, #64]	; (522c <_svfiprintf_r+0x1e4>)
    51ea:	a904      	add	r1, sp, #16
    51ec:	4640      	mov	r0, r8
    51ee:	f3af 8000 	nop.w
    51f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    51f6:	4681      	mov	r9, r0
    51f8:	d1d9      	bne.n	51ae <_svfiprintf_r+0x166>
    51fa:	89ab      	ldrh	r3, [r5, #12]
    51fc:	065b      	lsls	r3, r3, #25
    51fe:	f53f af38 	bmi.w	5072 <_svfiprintf_r+0x2a>
    5202:	9809      	ldr	r0, [sp, #36]	; 0x24
    5204:	b01d      	add	sp, #116	; 0x74
    5206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    520a:	ab03      	add	r3, sp, #12
    520c:	9300      	str	r3, [sp, #0]
    520e:	462a      	mov	r2, r5
    5210:	4b06      	ldr	r3, [pc, #24]	; (522c <_svfiprintf_r+0x1e4>)
    5212:	a904      	add	r1, sp, #16
    5214:	4640      	mov	r0, r8
    5216:	f000 f881 	bl	531c <_printf_i>
    521a:	e7ea      	b.n	51f2 <_svfiprintf_r+0x1aa>
    521c:	00005a74 	.word	0x00005a74
    5220:	00005a7a 	.word	0x00005a7a
    5224:	00005a7e 	.word	0x00005a7e
    5228:	00000000 	.word	0x00000000
    522c:	00004f91 	.word	0x00004f91

00005230 <_printf_common>:
    5230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5234:	4691      	mov	r9, r2
    5236:	461f      	mov	r7, r3
    5238:	688a      	ldr	r2, [r1, #8]
    523a:	690b      	ldr	r3, [r1, #16]
    523c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5240:	4293      	cmp	r3, r2
    5242:	bfb8      	it	lt
    5244:	4613      	movlt	r3, r2
    5246:	f8c9 3000 	str.w	r3, [r9]
    524a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    524e:	4606      	mov	r6, r0
    5250:	460c      	mov	r4, r1
    5252:	b112      	cbz	r2, 525a <_printf_common+0x2a>
    5254:	3301      	adds	r3, #1
    5256:	f8c9 3000 	str.w	r3, [r9]
    525a:	6823      	ldr	r3, [r4, #0]
    525c:	0699      	lsls	r1, r3, #26
    525e:	bf42      	ittt	mi
    5260:	f8d9 3000 	ldrmi.w	r3, [r9]
    5264:	3302      	addmi	r3, #2
    5266:	f8c9 3000 	strmi.w	r3, [r9]
    526a:	6825      	ldr	r5, [r4, #0]
    526c:	f015 0506 	ands.w	r5, r5, #6
    5270:	d107      	bne.n	5282 <_printf_common+0x52>
    5272:	f104 0a19 	add.w	sl, r4, #25
    5276:	68e3      	ldr	r3, [r4, #12]
    5278:	f8d9 2000 	ldr.w	r2, [r9]
    527c:	1a9b      	subs	r3, r3, r2
    527e:	429d      	cmp	r5, r3
    5280:	db29      	blt.n	52d6 <_printf_common+0xa6>
    5282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5286:	6822      	ldr	r2, [r4, #0]
    5288:	3300      	adds	r3, #0
    528a:	bf18      	it	ne
    528c:	2301      	movne	r3, #1
    528e:	0692      	lsls	r2, r2, #26
    5290:	d42e      	bmi.n	52f0 <_printf_common+0xc0>
    5292:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5296:	4639      	mov	r1, r7
    5298:	4630      	mov	r0, r6
    529a:	47c0      	blx	r8
    529c:	3001      	adds	r0, #1
    529e:	d021      	beq.n	52e4 <_printf_common+0xb4>
    52a0:	6823      	ldr	r3, [r4, #0]
    52a2:	68e5      	ldr	r5, [r4, #12]
    52a4:	f8d9 2000 	ldr.w	r2, [r9]
    52a8:	f003 0306 	and.w	r3, r3, #6
    52ac:	2b04      	cmp	r3, #4
    52ae:	bf08      	it	eq
    52b0:	1aad      	subeq	r5, r5, r2
    52b2:	68a3      	ldr	r3, [r4, #8]
    52b4:	6922      	ldr	r2, [r4, #16]
    52b6:	bf0c      	ite	eq
    52b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    52bc:	2500      	movne	r5, #0
    52be:	4293      	cmp	r3, r2
    52c0:	bfc4      	itt	gt
    52c2:	1a9b      	subgt	r3, r3, r2
    52c4:	18ed      	addgt	r5, r5, r3
    52c6:	f04f 0900 	mov.w	r9, #0
    52ca:	341a      	adds	r4, #26
    52cc:	454d      	cmp	r5, r9
    52ce:	d11b      	bne.n	5308 <_printf_common+0xd8>
    52d0:	2000      	movs	r0, #0
    52d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52d6:	2301      	movs	r3, #1
    52d8:	4652      	mov	r2, sl
    52da:	4639      	mov	r1, r7
    52dc:	4630      	mov	r0, r6
    52de:	47c0      	blx	r8
    52e0:	3001      	adds	r0, #1
    52e2:	d103      	bne.n	52ec <_printf_common+0xbc>
    52e4:	f04f 30ff 	mov.w	r0, #4294967295
    52e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52ec:	3501      	adds	r5, #1
    52ee:	e7c2      	b.n	5276 <_printf_common+0x46>
    52f0:	18e1      	adds	r1, r4, r3
    52f2:	1c5a      	adds	r2, r3, #1
    52f4:	2030      	movs	r0, #48	; 0x30
    52f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    52fa:	4422      	add	r2, r4
    52fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5304:	3302      	adds	r3, #2
    5306:	e7c4      	b.n	5292 <_printf_common+0x62>
    5308:	2301      	movs	r3, #1
    530a:	4622      	mov	r2, r4
    530c:	4639      	mov	r1, r7
    530e:	4630      	mov	r0, r6
    5310:	47c0      	blx	r8
    5312:	3001      	adds	r0, #1
    5314:	d0e6      	beq.n	52e4 <_printf_common+0xb4>
    5316:	f109 0901 	add.w	r9, r9, #1
    531a:	e7d7      	b.n	52cc <_printf_common+0x9c>

0000531c <_printf_i>:
    531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5320:	4617      	mov	r7, r2
    5322:	7e0a      	ldrb	r2, [r1, #24]
    5324:	b085      	sub	sp, #20
    5326:	2a6e      	cmp	r2, #110	; 0x6e
    5328:	4698      	mov	r8, r3
    532a:	4606      	mov	r6, r0
    532c:	460c      	mov	r4, r1
    532e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5330:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5334:	f000 80bc 	beq.w	54b0 <_printf_i+0x194>
    5338:	d81a      	bhi.n	5370 <_printf_i+0x54>
    533a:	2a63      	cmp	r2, #99	; 0x63
    533c:	d02e      	beq.n	539c <_printf_i+0x80>
    533e:	d80a      	bhi.n	5356 <_printf_i+0x3a>
    5340:	2a00      	cmp	r2, #0
    5342:	f000 80c8 	beq.w	54d6 <_printf_i+0x1ba>
    5346:	2a58      	cmp	r2, #88	; 0x58
    5348:	f000 808a 	beq.w	5460 <_printf_i+0x144>
    534c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5350:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5354:	e02a      	b.n	53ac <_printf_i+0x90>
    5356:	2a64      	cmp	r2, #100	; 0x64
    5358:	d001      	beq.n	535e <_printf_i+0x42>
    535a:	2a69      	cmp	r2, #105	; 0x69
    535c:	d1f6      	bne.n	534c <_printf_i+0x30>
    535e:	6821      	ldr	r1, [r4, #0]
    5360:	681a      	ldr	r2, [r3, #0]
    5362:	f011 0f80 	tst.w	r1, #128	; 0x80
    5366:	d023      	beq.n	53b0 <_printf_i+0x94>
    5368:	1d11      	adds	r1, r2, #4
    536a:	6019      	str	r1, [r3, #0]
    536c:	6813      	ldr	r3, [r2, #0]
    536e:	e027      	b.n	53c0 <_printf_i+0xa4>
    5370:	2a73      	cmp	r2, #115	; 0x73
    5372:	f000 80b4 	beq.w	54de <_printf_i+0x1c2>
    5376:	d808      	bhi.n	538a <_printf_i+0x6e>
    5378:	2a6f      	cmp	r2, #111	; 0x6f
    537a:	d02a      	beq.n	53d2 <_printf_i+0xb6>
    537c:	2a70      	cmp	r2, #112	; 0x70
    537e:	d1e5      	bne.n	534c <_printf_i+0x30>
    5380:	680a      	ldr	r2, [r1, #0]
    5382:	f042 0220 	orr.w	r2, r2, #32
    5386:	600a      	str	r2, [r1, #0]
    5388:	e003      	b.n	5392 <_printf_i+0x76>
    538a:	2a75      	cmp	r2, #117	; 0x75
    538c:	d021      	beq.n	53d2 <_printf_i+0xb6>
    538e:	2a78      	cmp	r2, #120	; 0x78
    5390:	d1dc      	bne.n	534c <_printf_i+0x30>
    5392:	2278      	movs	r2, #120	; 0x78
    5394:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5398:	496e      	ldr	r1, [pc, #440]	; (5554 <_printf_i+0x238>)
    539a:	e064      	b.n	5466 <_printf_i+0x14a>
    539c:	681a      	ldr	r2, [r3, #0]
    539e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    53a2:	1d11      	adds	r1, r2, #4
    53a4:	6019      	str	r1, [r3, #0]
    53a6:	6813      	ldr	r3, [r2, #0]
    53a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    53ac:	2301      	movs	r3, #1
    53ae:	e0a3      	b.n	54f8 <_printf_i+0x1dc>
    53b0:	f011 0f40 	tst.w	r1, #64	; 0x40
    53b4:	f102 0104 	add.w	r1, r2, #4
    53b8:	6019      	str	r1, [r3, #0]
    53ba:	d0d7      	beq.n	536c <_printf_i+0x50>
    53bc:	f9b2 3000 	ldrsh.w	r3, [r2]
    53c0:	2b00      	cmp	r3, #0
    53c2:	da03      	bge.n	53cc <_printf_i+0xb0>
    53c4:	222d      	movs	r2, #45	; 0x2d
    53c6:	425b      	negs	r3, r3
    53c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    53cc:	4962      	ldr	r1, [pc, #392]	; (5558 <_printf_i+0x23c>)
    53ce:	220a      	movs	r2, #10
    53d0:	e017      	b.n	5402 <_printf_i+0xe6>
    53d2:	6820      	ldr	r0, [r4, #0]
    53d4:	6819      	ldr	r1, [r3, #0]
    53d6:	f010 0f80 	tst.w	r0, #128	; 0x80
    53da:	d003      	beq.n	53e4 <_printf_i+0xc8>
    53dc:	1d08      	adds	r0, r1, #4
    53de:	6018      	str	r0, [r3, #0]
    53e0:	680b      	ldr	r3, [r1, #0]
    53e2:	e006      	b.n	53f2 <_printf_i+0xd6>
    53e4:	f010 0f40 	tst.w	r0, #64	; 0x40
    53e8:	f101 0004 	add.w	r0, r1, #4
    53ec:	6018      	str	r0, [r3, #0]
    53ee:	d0f7      	beq.n	53e0 <_printf_i+0xc4>
    53f0:	880b      	ldrh	r3, [r1, #0]
    53f2:	4959      	ldr	r1, [pc, #356]	; (5558 <_printf_i+0x23c>)
    53f4:	2a6f      	cmp	r2, #111	; 0x6f
    53f6:	bf14      	ite	ne
    53f8:	220a      	movne	r2, #10
    53fa:	2208      	moveq	r2, #8
    53fc:	2000      	movs	r0, #0
    53fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5402:	6865      	ldr	r5, [r4, #4]
    5404:	60a5      	str	r5, [r4, #8]
    5406:	2d00      	cmp	r5, #0
    5408:	f2c0 809c 	blt.w	5544 <_printf_i+0x228>
    540c:	6820      	ldr	r0, [r4, #0]
    540e:	f020 0004 	bic.w	r0, r0, #4
    5412:	6020      	str	r0, [r4, #0]
    5414:	2b00      	cmp	r3, #0
    5416:	d13f      	bne.n	5498 <_printf_i+0x17c>
    5418:	2d00      	cmp	r5, #0
    541a:	f040 8095 	bne.w	5548 <_printf_i+0x22c>
    541e:	4675      	mov	r5, lr
    5420:	2a08      	cmp	r2, #8
    5422:	d10b      	bne.n	543c <_printf_i+0x120>
    5424:	6823      	ldr	r3, [r4, #0]
    5426:	07da      	lsls	r2, r3, #31
    5428:	d508      	bpl.n	543c <_printf_i+0x120>
    542a:	6923      	ldr	r3, [r4, #16]
    542c:	6862      	ldr	r2, [r4, #4]
    542e:	429a      	cmp	r2, r3
    5430:	bfde      	ittt	le
    5432:	2330      	movle	r3, #48	; 0x30
    5434:	f805 3c01 	strble.w	r3, [r5, #-1]
    5438:	f105 35ff 	addle.w	r5, r5, #4294967295
    543c:	ebae 0305 	sub.w	r3, lr, r5
    5440:	6123      	str	r3, [r4, #16]
    5442:	f8cd 8000 	str.w	r8, [sp]
    5446:	463b      	mov	r3, r7
    5448:	aa03      	add	r2, sp, #12
    544a:	4621      	mov	r1, r4
    544c:	4630      	mov	r0, r6
    544e:	f7ff feef 	bl	5230 <_printf_common>
    5452:	3001      	adds	r0, #1
    5454:	d155      	bne.n	5502 <_printf_i+0x1e6>
    5456:	f04f 30ff 	mov.w	r0, #4294967295
    545a:	b005      	add	sp, #20
    545c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5460:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5464:	493c      	ldr	r1, [pc, #240]	; (5558 <_printf_i+0x23c>)
    5466:	6822      	ldr	r2, [r4, #0]
    5468:	6818      	ldr	r0, [r3, #0]
    546a:	f012 0f80 	tst.w	r2, #128	; 0x80
    546e:	f100 0504 	add.w	r5, r0, #4
    5472:	601d      	str	r5, [r3, #0]
    5474:	d001      	beq.n	547a <_printf_i+0x15e>
    5476:	6803      	ldr	r3, [r0, #0]
    5478:	e002      	b.n	5480 <_printf_i+0x164>
    547a:	0655      	lsls	r5, r2, #25
    547c:	d5fb      	bpl.n	5476 <_printf_i+0x15a>
    547e:	8803      	ldrh	r3, [r0, #0]
    5480:	07d0      	lsls	r0, r2, #31
    5482:	bf44      	itt	mi
    5484:	f042 0220 	orrmi.w	r2, r2, #32
    5488:	6022      	strmi	r2, [r4, #0]
    548a:	b91b      	cbnz	r3, 5494 <_printf_i+0x178>
    548c:	6822      	ldr	r2, [r4, #0]
    548e:	f022 0220 	bic.w	r2, r2, #32
    5492:	6022      	str	r2, [r4, #0]
    5494:	2210      	movs	r2, #16
    5496:	e7b1      	b.n	53fc <_printf_i+0xe0>
    5498:	4675      	mov	r5, lr
    549a:	fbb3 f0f2 	udiv	r0, r3, r2
    549e:	fb02 3310 	mls	r3, r2, r0, r3
    54a2:	5ccb      	ldrb	r3, [r1, r3]
    54a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    54a8:	4603      	mov	r3, r0
    54aa:	2800      	cmp	r0, #0
    54ac:	d1f5      	bne.n	549a <_printf_i+0x17e>
    54ae:	e7b7      	b.n	5420 <_printf_i+0x104>
    54b0:	6808      	ldr	r0, [r1, #0]
    54b2:	681a      	ldr	r2, [r3, #0]
    54b4:	6949      	ldr	r1, [r1, #20]
    54b6:	f010 0f80 	tst.w	r0, #128	; 0x80
    54ba:	d004      	beq.n	54c6 <_printf_i+0x1aa>
    54bc:	1d10      	adds	r0, r2, #4
    54be:	6018      	str	r0, [r3, #0]
    54c0:	6813      	ldr	r3, [r2, #0]
    54c2:	6019      	str	r1, [r3, #0]
    54c4:	e007      	b.n	54d6 <_printf_i+0x1ba>
    54c6:	f010 0f40 	tst.w	r0, #64	; 0x40
    54ca:	f102 0004 	add.w	r0, r2, #4
    54ce:	6018      	str	r0, [r3, #0]
    54d0:	6813      	ldr	r3, [r2, #0]
    54d2:	d0f6      	beq.n	54c2 <_printf_i+0x1a6>
    54d4:	8019      	strh	r1, [r3, #0]
    54d6:	2300      	movs	r3, #0
    54d8:	6123      	str	r3, [r4, #16]
    54da:	4675      	mov	r5, lr
    54dc:	e7b1      	b.n	5442 <_printf_i+0x126>
    54de:	681a      	ldr	r2, [r3, #0]
    54e0:	1d11      	adds	r1, r2, #4
    54e2:	6019      	str	r1, [r3, #0]
    54e4:	6815      	ldr	r5, [r2, #0]
    54e6:	6862      	ldr	r2, [r4, #4]
    54e8:	2100      	movs	r1, #0
    54ea:	4628      	mov	r0, r5
    54ec:	f000 f848 	bl	5580 <memchr>
    54f0:	b108      	cbz	r0, 54f6 <_printf_i+0x1da>
    54f2:	1b40      	subs	r0, r0, r5
    54f4:	6060      	str	r0, [r4, #4]
    54f6:	6863      	ldr	r3, [r4, #4]
    54f8:	6123      	str	r3, [r4, #16]
    54fa:	2300      	movs	r3, #0
    54fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5500:	e79f      	b.n	5442 <_printf_i+0x126>
    5502:	6923      	ldr	r3, [r4, #16]
    5504:	462a      	mov	r2, r5
    5506:	4639      	mov	r1, r7
    5508:	4630      	mov	r0, r6
    550a:	47c0      	blx	r8
    550c:	3001      	adds	r0, #1
    550e:	d0a2      	beq.n	5456 <_printf_i+0x13a>
    5510:	6823      	ldr	r3, [r4, #0]
    5512:	079b      	lsls	r3, r3, #30
    5514:	d507      	bpl.n	5526 <_printf_i+0x20a>
    5516:	2500      	movs	r5, #0
    5518:	f104 0919 	add.w	r9, r4, #25
    551c:	68e3      	ldr	r3, [r4, #12]
    551e:	9a03      	ldr	r2, [sp, #12]
    5520:	1a9b      	subs	r3, r3, r2
    5522:	429d      	cmp	r5, r3
    5524:	db05      	blt.n	5532 <_printf_i+0x216>
    5526:	68e0      	ldr	r0, [r4, #12]
    5528:	9b03      	ldr	r3, [sp, #12]
    552a:	4298      	cmp	r0, r3
    552c:	bfb8      	it	lt
    552e:	4618      	movlt	r0, r3
    5530:	e793      	b.n	545a <_printf_i+0x13e>
    5532:	2301      	movs	r3, #1
    5534:	464a      	mov	r2, r9
    5536:	4639      	mov	r1, r7
    5538:	4630      	mov	r0, r6
    553a:	47c0      	blx	r8
    553c:	3001      	adds	r0, #1
    553e:	d08a      	beq.n	5456 <_printf_i+0x13a>
    5540:	3501      	adds	r5, #1
    5542:	e7eb      	b.n	551c <_printf_i+0x200>
    5544:	2b00      	cmp	r3, #0
    5546:	d1a7      	bne.n	5498 <_printf_i+0x17c>
    5548:	780b      	ldrb	r3, [r1, #0]
    554a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    554e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5552:	e765      	b.n	5420 <_printf_i+0x104>
    5554:	00005a96 	.word	0x00005a96
    5558:	00005a85 	.word	0x00005a85

0000555c <_sbrk_r>:
    555c:	b538      	push	{r3, r4, r5, lr}
    555e:	4c06      	ldr	r4, [pc, #24]	; (5578 <_sbrk_r+0x1c>)
    5560:	2300      	movs	r3, #0
    5562:	4605      	mov	r5, r0
    5564:	4608      	mov	r0, r1
    5566:	6023      	str	r3, [r4, #0]
    5568:	f7fc f9ae 	bl	18c8 <_sbrk>
    556c:	1c43      	adds	r3, r0, #1
    556e:	d102      	bne.n	5576 <_sbrk_r+0x1a>
    5570:	6823      	ldr	r3, [r4, #0]
    5572:	b103      	cbz	r3, 5576 <_sbrk_r+0x1a>
    5574:	602b      	str	r3, [r5, #0]
    5576:	bd38      	pop	{r3, r4, r5, pc}
    5578:	20000288 	.word	0x20000288
    557c:	00000000 	.word	0x00000000

00005580 <memchr>:
    5580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5584:	2a10      	cmp	r2, #16
    5586:	db2b      	blt.n	55e0 <memchr+0x60>
    5588:	f010 0f07 	tst.w	r0, #7
    558c:	d008      	beq.n	55a0 <memchr+0x20>
    558e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5592:	3a01      	subs	r2, #1
    5594:	428b      	cmp	r3, r1
    5596:	d02d      	beq.n	55f4 <memchr+0x74>
    5598:	f010 0f07 	tst.w	r0, #7
    559c:	b342      	cbz	r2, 55f0 <memchr+0x70>
    559e:	d1f6      	bne.n	558e <memchr+0xe>
    55a0:	b4f0      	push	{r4, r5, r6, r7}
    55a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    55a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    55aa:	f022 0407 	bic.w	r4, r2, #7
    55ae:	f07f 0700 	mvns.w	r7, #0
    55b2:	2300      	movs	r3, #0
    55b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    55b8:	3c08      	subs	r4, #8
    55ba:	ea85 0501 	eor.w	r5, r5, r1
    55be:	ea86 0601 	eor.w	r6, r6, r1
    55c2:	fa85 f547 	uadd8	r5, r5, r7
    55c6:	faa3 f587 	sel	r5, r3, r7
    55ca:	fa86 f647 	uadd8	r6, r6, r7
    55ce:	faa5 f687 	sel	r6, r5, r7
    55d2:	b98e      	cbnz	r6, 55f8 <memchr+0x78>
    55d4:	d1ee      	bne.n	55b4 <memchr+0x34>
    55d6:	bcf0      	pop	{r4, r5, r6, r7}
    55d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    55dc:	f002 0207 	and.w	r2, r2, #7
    55e0:	b132      	cbz	r2, 55f0 <memchr+0x70>
    55e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    55e6:	3a01      	subs	r2, #1
    55e8:	ea83 0301 	eor.w	r3, r3, r1
    55ec:	b113      	cbz	r3, 55f4 <memchr+0x74>
    55ee:	d1f8      	bne.n	55e2 <memchr+0x62>
    55f0:	2000      	movs	r0, #0
    55f2:	4770      	bx	lr
    55f4:	3801      	subs	r0, #1
    55f6:	4770      	bx	lr
    55f8:	2d00      	cmp	r5, #0
    55fa:	bf06      	itte	eq
    55fc:	4635      	moveq	r5, r6
    55fe:	3803      	subeq	r0, #3
    5600:	3807      	subne	r0, #7
    5602:	f015 0f01 	tst.w	r5, #1
    5606:	d107      	bne.n	5618 <memchr+0x98>
    5608:	3001      	adds	r0, #1
    560a:	f415 7f80 	tst.w	r5, #256	; 0x100
    560e:	bf02      	ittt	eq
    5610:	3001      	addeq	r0, #1
    5612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5616:	3001      	addeq	r0, #1
    5618:	bcf0      	pop	{r4, r5, r6, r7}
    561a:	3801      	subs	r0, #1
    561c:	4770      	bx	lr
    561e:	bf00      	nop

00005620 <memcpy>:
    5620:	b510      	push	{r4, lr}
    5622:	1e43      	subs	r3, r0, #1
    5624:	440a      	add	r2, r1
    5626:	4291      	cmp	r1, r2
    5628:	d100      	bne.n	562c <memcpy+0xc>
    562a:	bd10      	pop	{r4, pc}
    562c:	f811 4b01 	ldrb.w	r4, [r1], #1
    5630:	f803 4f01 	strb.w	r4, [r3, #1]!
    5634:	e7f7      	b.n	5626 <memcpy+0x6>

00005636 <memmove>:
    5636:	4288      	cmp	r0, r1
    5638:	b510      	push	{r4, lr}
    563a:	eb01 0302 	add.w	r3, r1, r2
    563e:	d803      	bhi.n	5648 <memmove+0x12>
    5640:	1e42      	subs	r2, r0, #1
    5642:	4299      	cmp	r1, r3
    5644:	d10c      	bne.n	5660 <memmove+0x2a>
    5646:	bd10      	pop	{r4, pc}
    5648:	4298      	cmp	r0, r3
    564a:	d2f9      	bcs.n	5640 <memmove+0xa>
    564c:	1881      	adds	r1, r0, r2
    564e:	1ad2      	subs	r2, r2, r3
    5650:	42d3      	cmn	r3, r2
    5652:	d100      	bne.n	5656 <memmove+0x20>
    5654:	bd10      	pop	{r4, pc}
    5656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    565a:	f801 4d01 	strb.w	r4, [r1, #-1]!
    565e:	e7f7      	b.n	5650 <memmove+0x1a>
    5660:	f811 4b01 	ldrb.w	r4, [r1], #1
    5664:	f802 4f01 	strb.w	r4, [r2, #1]!
    5668:	e7eb      	b.n	5642 <memmove+0xc>

0000566a <__malloc_lock>:
    566a:	4770      	bx	lr

0000566c <__malloc_unlock>:
    566c:	4770      	bx	lr
	...

00005670 <_free_r>:
    5670:	b538      	push	{r3, r4, r5, lr}
    5672:	4605      	mov	r5, r0
    5674:	2900      	cmp	r1, #0
    5676:	d045      	beq.n	5704 <_free_r+0x94>
    5678:	f851 3c04 	ldr.w	r3, [r1, #-4]
    567c:	1f0c      	subs	r4, r1, #4
    567e:	2b00      	cmp	r3, #0
    5680:	bfb8      	it	lt
    5682:	18e4      	addlt	r4, r4, r3
    5684:	f7ff fff1 	bl	566a <__malloc_lock>
    5688:	4a1f      	ldr	r2, [pc, #124]	; (5708 <_free_r+0x98>)
    568a:	6813      	ldr	r3, [r2, #0]
    568c:	4610      	mov	r0, r2
    568e:	b933      	cbnz	r3, 569e <_free_r+0x2e>
    5690:	6063      	str	r3, [r4, #4]
    5692:	6014      	str	r4, [r2, #0]
    5694:	4628      	mov	r0, r5
    5696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    569a:	f7ff bfe7 	b.w	566c <__malloc_unlock>
    569e:	42a3      	cmp	r3, r4
    56a0:	d90c      	bls.n	56bc <_free_r+0x4c>
    56a2:	6821      	ldr	r1, [r4, #0]
    56a4:	1862      	adds	r2, r4, r1
    56a6:	4293      	cmp	r3, r2
    56a8:	bf04      	itt	eq
    56aa:	681a      	ldreq	r2, [r3, #0]
    56ac:	685b      	ldreq	r3, [r3, #4]
    56ae:	6063      	str	r3, [r4, #4]
    56b0:	bf04      	itt	eq
    56b2:	1852      	addeq	r2, r2, r1
    56b4:	6022      	streq	r2, [r4, #0]
    56b6:	6004      	str	r4, [r0, #0]
    56b8:	e7ec      	b.n	5694 <_free_r+0x24>
    56ba:	4613      	mov	r3, r2
    56bc:	685a      	ldr	r2, [r3, #4]
    56be:	b10a      	cbz	r2, 56c4 <_free_r+0x54>
    56c0:	42a2      	cmp	r2, r4
    56c2:	d9fa      	bls.n	56ba <_free_r+0x4a>
    56c4:	6819      	ldr	r1, [r3, #0]
    56c6:	1858      	adds	r0, r3, r1
    56c8:	42a0      	cmp	r0, r4
    56ca:	d10b      	bne.n	56e4 <_free_r+0x74>
    56cc:	6820      	ldr	r0, [r4, #0]
    56ce:	4401      	add	r1, r0
    56d0:	1858      	adds	r0, r3, r1
    56d2:	4282      	cmp	r2, r0
    56d4:	6019      	str	r1, [r3, #0]
    56d6:	d1dd      	bne.n	5694 <_free_r+0x24>
    56d8:	6810      	ldr	r0, [r2, #0]
    56da:	6852      	ldr	r2, [r2, #4]
    56dc:	605a      	str	r2, [r3, #4]
    56de:	4401      	add	r1, r0
    56e0:	6019      	str	r1, [r3, #0]
    56e2:	e7d7      	b.n	5694 <_free_r+0x24>
    56e4:	d902      	bls.n	56ec <_free_r+0x7c>
    56e6:	230c      	movs	r3, #12
    56e8:	602b      	str	r3, [r5, #0]
    56ea:	e7d3      	b.n	5694 <_free_r+0x24>
    56ec:	6820      	ldr	r0, [r4, #0]
    56ee:	1821      	adds	r1, r4, r0
    56f0:	428a      	cmp	r2, r1
    56f2:	bf04      	itt	eq
    56f4:	6811      	ldreq	r1, [r2, #0]
    56f6:	6852      	ldreq	r2, [r2, #4]
    56f8:	6062      	str	r2, [r4, #4]
    56fa:	bf04      	itt	eq
    56fc:	1809      	addeq	r1, r1, r0
    56fe:	6021      	streq	r1, [r4, #0]
    5700:	605c      	str	r4, [r3, #4]
    5702:	e7c7      	b.n	5694 <_free_r+0x24>
    5704:	bd38      	pop	{r3, r4, r5, pc}
    5706:	bf00      	nop
    5708:	200001ac 	.word	0x200001ac

0000570c <_realloc_r>:
    570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    570e:	4607      	mov	r7, r0
    5710:	4614      	mov	r4, r2
    5712:	460e      	mov	r6, r1
    5714:	b921      	cbnz	r1, 5720 <_realloc_r+0x14>
    5716:	4611      	mov	r1, r2
    5718:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    571c:	f7ff bbda 	b.w	4ed4 <_malloc_r>
    5720:	b922      	cbnz	r2, 572c <_realloc_r+0x20>
    5722:	f7ff ffa5 	bl	5670 <_free_r>
    5726:	4625      	mov	r5, r4
    5728:	4628      	mov	r0, r5
    572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    572c:	f000 f814 	bl	5758 <_malloc_usable_size_r>
    5730:	4284      	cmp	r4, r0
    5732:	d90f      	bls.n	5754 <_realloc_r+0x48>
    5734:	4621      	mov	r1, r4
    5736:	4638      	mov	r0, r7
    5738:	f7ff fbcc 	bl	4ed4 <_malloc_r>
    573c:	4605      	mov	r5, r0
    573e:	2800      	cmp	r0, #0
    5740:	d0f2      	beq.n	5728 <_realloc_r+0x1c>
    5742:	4631      	mov	r1, r6
    5744:	4622      	mov	r2, r4
    5746:	f7ff ff6b 	bl	5620 <memcpy>
    574a:	4631      	mov	r1, r6
    574c:	4638      	mov	r0, r7
    574e:	f7ff ff8f 	bl	5670 <_free_r>
    5752:	e7e9      	b.n	5728 <_realloc_r+0x1c>
    5754:	4635      	mov	r5, r6
    5756:	e7e7      	b.n	5728 <_realloc_r+0x1c>

00005758 <_malloc_usable_size_r>:
    5758:	f851 0c04 	ldr.w	r0, [r1, #-4]
    575c:	2800      	cmp	r0, #0
    575e:	f1a0 0004 	sub.w	r0, r0, #4
    5762:	bfbc      	itt	lt
    5764:	580b      	ldrlt	r3, [r1, r0]
    5766:	18c0      	addlt	r0, r0, r3
    5768:	4770      	bx	lr
    576a:	0000      	movs	r0, r0
    576c:	682f2e2e 	.word	0x682f2e2e
    5770:	702f6c70 	.word	0x702f6c70
    5774:	2f74726f 	.word	0x2f74726f
    5778:	5f6c7068 	.word	0x5f6c7068
    577c:	6f697067 	.word	0x6f697067
    5780:	7361625f 	.word	0x7361625f
    5784:	00682e65 	.word	0x00682e65
    5788:	682f2e2e 	.word	0x682f2e2e
    578c:	732f6c61 	.word	0x732f6c61
    5790:	682f6372 	.word	0x682f6372
    5794:	695f6c61 	.word	0x695f6c61
    5798:	00632e6f 	.word	0x00632e6f
    579c:	682f2e2e 	.word	0x682f2e2e
    57a0:	732f6c61 	.word	0x732f6c61
    57a4:	682f6372 	.word	0x682f6372
    57a8:	745f6c61 	.word	0x745f6c61
    57ac:	72656d69 	.word	0x72656d69
    57b0:	0000632e 	.word	0x0000632e
    57b4:	682f2e2e 	.word	0x682f2e2e
    57b8:	732f6c61 	.word	0x732f6c61
    57bc:	682f6372 	.word	0x682f6372
    57c0:	755f6c61 	.word	0x755f6c61
    57c4:	74726173 	.word	0x74726173
    57c8:	7973615f 	.word	0x7973615f
    57cc:	632e636e 	.word	0x632e636e
    57d0:	00000000 	.word	0x00000000
    57d4:	682f2e2e 	.word	0x682f2e2e
    57d8:	752f6c61 	.word	0x752f6c61
    57dc:	736c6974 	.word	0x736c6974
    57e0:	6372732f 	.word	0x6372732f
    57e4:	6974752f 	.word	0x6974752f
    57e8:	6c5f736c 	.word	0x6c5f736c
    57ec:	2e747369 	.word	0x2e747369
    57f0:	00000063 	.word	0x00000063
    57f4:	682f2e2e 	.word	0x682f2e2e
    57f8:	752f6c61 	.word	0x752f6c61
    57fc:	736c6974 	.word	0x736c6974
    5800:	6372732f 	.word	0x6372732f
    5804:	6974752f 	.word	0x6974752f
    5808:	725f736c 	.word	0x725f736c
    580c:	62676e69 	.word	0x62676e69
    5810:	65666675 	.word	0x65666675
    5814:	00632e72 	.word	0x00632e72

00005818 <_map>:
    5818:	00000000 00000020 682f2e2e 652f6c70     .... ...../hpl/e
    5828:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00005838 <user_mux_confs>:
	...
    5864:	00000001 00000000 00000000 00000000     ................
	...

0000587c <channel_confs>:
    587c:	00000212 00000000 00000000 00000000     ................
	...

000058bc <interrupt_cfg>:
	...
    593c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    594c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    595c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    596c:	43000400 43000800 43000c00              ...C...C...C

00005978 <sercomspi_regs>:
	...
    598c:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    599c:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    59ac:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    59bc:	43001800 736f705b 6f697469 203d206e     ...C[position = 
    59cc:	7c206425 65707320 3d206465 20642520     %d | speed = %d 
    59dc:	204d5052 7564207c 79637974 5f656c63     RPM | dutycycle_
    59ec:	65657073 203d2064 20646c25 6f70207c     speed = %ld | po
    59fc:	69746973 635f6e6f 72746e6f 3d206c6f     sition_control =
    5a0c:	646c2520 00000a5d                        %ld]...

00005a14 <__sf_fake_stderr>:
	...

00005a34 <__sf_fake_stdin>:
	...

00005a54 <__sf_fake_stdout>:
	...
    5a74:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5a84:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5a94:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5aa4:	00006665                                ef..

00005aa8 <_init>:
    5aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aaa:	bf00      	nop
    5aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5aae:	bc08      	pop	{r3}
    5ab0:	469e      	mov	lr, r3
    5ab2:	4770      	bx	lr

00005ab4 <__init_array_start>:
    5ab4:	00000289 	.word	0x00000289

00005ab8 <_fini>:
    5ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aba:	bf00      	nop
    5abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5abe:	bc08      	pop	{r3}
    5ac0:	469e      	mov	lr, r3
    5ac2:	4770      	bx	lr

00005ac4 <__fini_array_start>:
    5ac4:	00000265 	.word	0x00000265
