
my_lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036e4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  20000000  000036e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200b4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200b4  2**0
                  CONTENTS
  4 .bss          000001c0  200000b4  00003798  000200b4  2**2
                  ALLOC
  5 .stack        00010004  20000274  00003958  000200b4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00028fdb  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004073  00000000  00000000  00049116  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000dba5  00000000  00000000  0004d189  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d10  00000000  00000000  0005ad2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d48  00000000  00000000  0005ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036da5  00000000  00000000  0005c786  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018399  00000000  00000000  0009352b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123b55  00000000  00000000  000ab8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000025ec  00000000  00000000  001cf41c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 02 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     x.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 25 10 00 00 dd 02 00 00 dd 02 00 00     ....%...........
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	f9 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 81 14 00 00 95 14 00 00 a9 14 00 00     ................
     124:	bd 14 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 a5 1c 00 00 41 1a 00 00     ............A...
     1f4:	55 1a 00 00 dd 02 00 00 69 1a 00 00 dd 02 00 00     U.......i.......
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000b4 	.word	0x200000b4
     280:	00000000 	.word	0x00000000
     284:	000036e4 	.word	0x000036e4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000036e4 	.word	0x000036e4
     2c4:	200000b8 	.word	0x200000b8
     2c8:	000036e4 	.word	0x000036e4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	000005c5 	.word	0x000005c5

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	000036e4 	.word	0x000036e4
     340:	200000b4 	.word	0x200000b4
     344:	200000b4 	.word	0x200000b4
     348:	20000274 	.word	0x20000274
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00002a45 	.word	0x00002a45
     358:	00001df5 	.word	0x00001df5

0000035c <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     35c:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     35e:	4a08      	ldr	r2, [pc, #32]	; (380 <TIMER_1_init+0x24>)
     360:	6953      	ldr	r3, [r2, #20]
     362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     366:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     368:	2240      	movs	r2, #64	; 0x40
     36a:	4b06      	ldr	r3, [pc, #24]	; (384 <TIMER_1_init+0x28>)
     36c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_1, TC1, _tc_get_timer());
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <TIMER_1_init+0x2c>)
     372:	4798      	blx	r3
     374:	4602      	mov	r2, r0
     376:	4905      	ldr	r1, [pc, #20]	; (38c <TIMER_1_init+0x30>)
     378:	4805      	ldr	r0, [pc, #20]	; (390 <TIMER_1_init+0x34>)
     37a:	4b06      	ldr	r3, [pc, #24]	; (394 <TIMER_1_init+0x38>)
     37c:	4798      	blx	r3
     37e:	bd08      	pop	{r3, pc}
     380:	40000800 	.word	0x40000800
     384:	40001c00 	.word	0x40001c00
     388:	000019fd 	.word	0x000019fd
     38c:	40003c00 	.word	0x40003c00
     390:	200001b8 	.word	0x200001b8
     394:	00000931 	.word	0x00000931

00000398 <TIMER_2_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_2_init(void)
{
     398:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     39a:	4a08      	ldr	r2, [pc, #32]	; (3bc <TIMER_2_init+0x24>)
     39c:	6993      	ldr	r3, [r2, #24]
     39e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     3a2:	6193      	str	r3, [r2, #24]
     3a4:	2240      	movs	r2, #64	; 0x40
     3a6:	4b06      	ldr	r3, [pc, #24]	; (3c0 <TIMER_2_init+0x28>)
     3a8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_2, TC2, _tc_get_timer());
     3ac:	4b05      	ldr	r3, [pc, #20]	; (3c4 <TIMER_2_init+0x2c>)
     3ae:	4798      	blx	r3
     3b0:	4602      	mov	r2, r0
     3b2:	4905      	ldr	r1, [pc, #20]	; (3c8 <TIMER_2_init+0x30>)
     3b4:	4805      	ldr	r0, [pc, #20]	; (3cc <TIMER_2_init+0x34>)
     3b6:	4b06      	ldr	r3, [pc, #24]	; (3d0 <TIMER_2_init+0x38>)
     3b8:	4798      	blx	r3
     3ba:	bd08      	pop	{r3, pc}
     3bc:	40000800 	.word	0x40000800
     3c0:	40001c00 	.word	0x40001c00
     3c4:	000019fd 	.word	0x000019fd
     3c8:	4101a000 	.word	0x4101a000
     3cc:	20000180 	.word	0x20000180
     3d0:	00000931 	.word	0x00000931

000003d4 <EXTERNAL_IRQ_0_init>:
{
     3d4:	b508      	push	{r3, lr}
     3d6:	2240      	movs	r2, #64	; 0x40
     3d8:	4b15      	ldr	r3, [pc, #84]	; (430 <EXTERNAL_IRQ_0_init+0x5c>)
     3da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     3de:	4a15      	ldr	r2, [pc, #84]	; (434 <EXTERNAL_IRQ_0_init+0x60>)
     3e0:	6953      	ldr	r3, [r2, #20]
     3e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3e6:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e8:	4b13      	ldr	r3, [pc, #76]	; (438 <EXTERNAL_IRQ_0_init+0x64>)
     3ea:	2201      	movs	r2, #1
     3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3f4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     3f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3fc:	4a0f      	ldr	r2, [pc, #60]	; (43c <EXTERNAL_IRQ_0_init+0x68>)
     3fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     402:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
     406:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     40a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     40e:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     412:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     416:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     41e:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     422:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     426:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	ext_irq_init();
     42a:	4b05      	ldr	r3, [pc, #20]	; (440 <EXTERNAL_IRQ_0_init+0x6c>)
     42c:	4798      	blx	r3
     42e:	bd08      	pop	{r3, pc}
     430:	40001c00 	.word	0x40001c00
     434:	40000800 	.word	0x40000800
     438:	41008000 	.word	0x41008000
     43c:	c0020000 	.word	0xc0020000
     440:	000006dd 	.word	0x000006dd

00000444 <EVENT_SYSTEM_0_init>:
{
     444:	b508      	push	{r3, lr}
     446:	2240      	movs	r2, #64	; 0x40
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <EVENT_SYSTEM_0_init+0x1c>)
     44a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     44e:	4a05      	ldr	r2, [pc, #20]	; (464 <EVENT_SYSTEM_0_init+0x20>)
     450:	6993      	ldr	r3, [r2, #24]
     452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     456:	6193      	str	r3, [r2, #24]
	event_system_init();
     458:	4b03      	ldr	r3, [pc, #12]	; (468 <EVENT_SYSTEM_0_init+0x24>)
     45a:	4798      	blx	r3
     45c:	bd08      	pop	{r3, pc}
     45e:	bf00      	nop
     460:	40001c00 	.word	0x40001c00
     464:	40000800 	.word	0x40000800
     468:	0000068d 	.word	0x0000068d

0000046c <USART_0_CLOCK_init>:
     46c:	4b06      	ldr	r3, [pc, #24]	; (488 <USART_0_CLOCK_init+0x1c>)
     46e:	2240      	movs	r2, #64	; 0x40
     470:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     474:	2243      	movs	r2, #67	; 0x43
     476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     47a:	4a04      	ldr	r2, [pc, #16]	; (48c <USART_0_CLOCK_init+0x20>)
     47c:	6993      	ldr	r3, [r2, #24]
     47e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     482:	6193      	str	r3, [r2, #24]
     484:	4770      	bx	lr
     486:	bf00      	nop
     488:	40001c00 	.word	0x40001c00
     48c:	40000800 	.word	0x40000800

00000490 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	4b10      	ldr	r3, [pc, #64]	; (4d4 <USART_0_PORT_init+0x44>)
     492:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4aa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ae:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b2:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4be:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4ca:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ce:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     4d2:	4770      	bx	lr
     4d4:	41008000 	.word	0x41008000

000004d8 <USART_0_init>:
{
     4d8:	b510      	push	{r4, lr}
     4da:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     4dc:	4b06      	ldr	r3, [pc, #24]	; (4f8 <USART_0_init+0x20>)
     4de:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     4e0:	2300      	movs	r3, #0
     4e2:	9300      	str	r3, [sp, #0]
     4e4:	2310      	movs	r3, #16
     4e6:	4a05      	ldr	r2, [pc, #20]	; (4fc <USART_0_init+0x24>)
     4e8:	4905      	ldr	r1, [pc, #20]	; (500 <USART_0_init+0x28>)
     4ea:	4806      	ldr	r0, [pc, #24]	; (504 <USART_0_init+0x2c>)
     4ec:	4c06      	ldr	r4, [pc, #24]	; (508 <USART_0_init+0x30>)
     4ee:	47a0      	blx	r4
	USART_0_PORT_init();
     4f0:	4b06      	ldr	r3, [pc, #24]	; (50c <USART_0_init+0x34>)
     4f2:	4798      	blx	r3
}
     4f4:	b002      	add	sp, #8
     4f6:	bd10      	pop	{r4, pc}
     4f8:	0000046d 	.word	0x0000046d
     4fc:	200000d0 	.word	0x200000d0
     500:	41012000 	.word	0x41012000
     504:	200001d4 	.word	0x200001d4
     508:	00000bad 	.word	0x00000bad
     50c:	00000491 	.word	0x00000491

00000510 <TIMER_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     510:	4a04      	ldr	r2, [pc, #16]	; (524 <TIMER_0_CLOCK_init+0x14>)
     512:	6953      	ldr	r3, [r2, #20]
     514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     518:	6153      	str	r3, [r2, #20]
     51a:	2240      	movs	r2, #64	; 0x40
     51c:	4b02      	ldr	r3, [pc, #8]	; (528 <TIMER_0_CLOCK_init+0x18>)
     51e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800
     528:	40001c00 	.word	0x40001c00

0000052c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52c:	4b10      	ldr	r3, [pc, #64]	; (570 <PWM_0_PORT_init+0x44>)
     52e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     532:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     536:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     542:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     546:	f042 0204 	orr.w	r2, r2, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     562:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     56e:	4770      	bx	lr
     570:	41008000 	.word	0x41008000

00000574 <PWM_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     574:	4a04      	ldr	r2, [pc, #16]	; (588 <PWM_0_CLOCK_init+0x14>)
     576:	69d3      	ldr	r3, [r2, #28]
     578:	f043 0320 	orr.w	r3, r3, #32
     57c:	61d3      	str	r3, [r2, #28]
     57e:	2240      	movs	r2, #64	; 0x40
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <PWM_0_CLOCK_init+0x18>)
     582:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     586:	4770      	bx	lr
     588:	40000800 	.word	0x40000800
     58c:	40001c00 	.word	0x40001c00

00000590 <PWM_0_init>:
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     590:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     592:	4b06      	ldr	r3, [pc, #24]	; (5ac <PWM_0_init+0x1c>)
     594:	4798      	blx	r3
	PWM_0_PORT_init();
     596:	4b06      	ldr	r3, [pc, #24]	; (5b0 <PWM_0_init+0x20>)
     598:	4798      	blx	r3
	pwm_init(&PWM_0, TC4, _tc_get_pwm());
     59a:	4b06      	ldr	r3, [pc, #24]	; (5b4 <PWM_0_init+0x24>)
     59c:	4798      	blx	r3
     59e:	4602      	mov	r2, r0
     5a0:	4905      	ldr	r1, [pc, #20]	; (5b8 <PWM_0_init+0x28>)
     5a2:	4806      	ldr	r0, [pc, #24]	; (5bc <PWM_0_init+0x2c>)
     5a4:	4b06      	ldr	r3, [pc, #24]	; (5c0 <PWM_0_init+0x30>)
     5a6:	4798      	blx	r3
     5a8:	bd08      	pop	{r3, pc}
     5aa:	bf00      	nop
     5ac:	00000575 	.word	0x00000575
     5b0:	0000052d 	.word	0x0000052d
     5b4:	00001a01 	.word	0x00001a01
     5b8:	42001400 	.word	0x42001400
     5bc:	2000019c 	.word	0x2000019c
     5c0:	0000078d 	.word	0x0000078d

000005c4 <system_init>:
}

void system_init(void)
{
     5c4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5c6:	4b1e      	ldr	r3, [pc, #120]	; (640 <system_init+0x7c>)
     5c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ca:	4b1e      	ldr	r3, [pc, #120]	; (644 <system_init+0x80>)
     5cc:	2240      	movs	r2, #64	; 0x40
     5ce:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5d6:	629a      	str	r2, [r3, #40]	; 0x28
     5d8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     5dc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ea:	2202      	movs	r2, #2
     5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f0:	4915      	ldr	r1, [pc, #84]	; (648 <system_init+0x84>)
     5f2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     5f6:	4915      	ldr	r1, [pc, #84]	; (64c <system_init+0x88>)
     5f8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     600:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
     604:	f041 0104 	orr.w	r1, r1, #4
     608:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     60c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     618:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(HAL_SENSOR_B, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     61c:	4b0c      	ldr	r3, [pc, #48]	; (650 <system_init+0x8c>)
     61e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     620:	4b0c      	ldr	r3, [pc, #48]	; (654 <system_init+0x90>)
     622:	4798      	blx	r3

	USART_0_init();
     624:	4b0c      	ldr	r3, [pc, #48]	; (658 <system_init+0x94>)
     626:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     628:	4b0c      	ldr	r3, [pc, #48]	; (65c <system_init+0x98>)
     62a:	4798      	blx	r3

	TIMER_0_init();
     62c:	4b0c      	ldr	r3, [pc, #48]	; (660 <system_init+0x9c>)
     62e:	4798      	blx	r3

	TIMER_1_init();
     630:	4b0c      	ldr	r3, [pc, #48]	; (664 <system_init+0xa0>)
     632:	4798      	blx	r3
	TIMER_2_init();
     634:	4b0c      	ldr	r3, [pc, #48]	; (668 <system_init+0xa4>)
     636:	4798      	blx	r3
	PWM_0_init();
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <system_init+0xa8>)
     63a:	4798      	blx	r3
     63c:	bd08      	pop	{r3, pc}
     63e:	bf00      	nop
     640:	00000e71 	.word	0x00000e71
     644:	41008000 	.word	0x41008000
     648:	40020002 	.word	0x40020002
     64c:	c0020000 	.word	0xc0020000
     650:	000003d5 	.word	0x000003d5
     654:	00000445 	.word	0x00000445
     658:	000004d9 	.word	0x000004d9
     65c:	00000511 	.word	0x00000511
     660:	00001a7d 	.word	0x00001a7d
     664:	0000035d 	.word	0x0000035d
     668:	00000399 	.word	0x00000399
     66c:	00000591 	.word	0x00000591

00000670 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     670:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     674:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     676:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     678:	f3bf 8f5f 	dmb	sy
     67c:	4770      	bx	lr

0000067e <atomic_leave_critical>:
     67e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     682:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     684:	f383 8810 	msr	PRIMASK, r3
     688:	4770      	bx	lr
	...

0000068c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     68c:	b508      	push	{r3, lr}
	return _event_system_init();
     68e:	4b01      	ldr	r3, [pc, #4]	; (694 <event_system_init+0x8>)
     690:	4798      	blx	r3
}
     692:	bd08      	pop	{r3, pc}
     694:	00001031 	.word	0x00001031

00000698 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     698:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     69a:	2501      	movs	r5, #1
     69c:	2400      	movs	r4, #0

	while (upper >= lower) {
     69e:	e007      	b.n	6b0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     6a0:	4a0d      	ldr	r2, [pc, #52]	; (6d8 <process_ext_irq+0x40>)
     6a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     6a6:	b1b3      	cbz	r3, 6d6 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     6a8:	4798      	blx	r3
     6aa:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     6ac:	3901      	subs	r1, #1
     6ae:	b2cd      	uxtb	r5, r1
	while (upper >= lower) {
     6b0:	42ac      	cmp	r4, r5
     6b2:	d810      	bhi.n	6d6 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     6b4:	192b      	adds	r3, r5, r4
     6b6:	105b      	asrs	r3, r3, #1
		if (middle >= EXT_IRQ_AMOUNT) {
     6b8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
     6bc:	d10b      	bne.n	6d6 <process_ext_irq+0x3e>
     6be:	b2db      	uxtb	r3, r3
		if (ext_irqs[middle].pin == pin) {
     6c0:	4a05      	ldr	r2, [pc, #20]	; (6d8 <process_ext_irq+0x40>)
     6c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     6c6:	6852      	ldr	r2, [r2, #4]
     6c8:	4282      	cmp	r2, r0
     6ca:	d0e9      	beq.n	6a0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     6cc:	4282      	cmp	r2, r0
     6ce:	d2ed      	bcs.n	6ac <process_ext_irq+0x14>
			lower = middle + 1;
     6d0:	3101      	adds	r1, #1
     6d2:	b2cc      	uxtb	r4, r1
     6d4:	e7ec      	b.n	6b0 <process_ext_irq+0x18>
     6d6:	bd38      	pop	{r3, r4, r5, pc}
     6d8:	200000e0 	.word	0x200000e0

000006dc <ext_irq_init>:
{
     6dc:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     6de:	2300      	movs	r3, #0
     6e0:	b11b      	cbz	r3, 6ea <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
     6e2:	4808      	ldr	r0, [pc, #32]	; (704 <ext_irq_init+0x28>)
     6e4:	4b08      	ldr	r3, [pc, #32]	; (708 <ext_irq_init+0x2c>)
     6e6:	4798      	blx	r3
}
     6e8:	bd08      	pop	{r3, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     6ea:	4a08      	ldr	r2, [pc, #32]	; (70c <ext_irq_init+0x30>)
     6ec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     6f0:	f04f 30ff 	mov.w	r0, #4294967295
     6f4:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     6f6:	2100      	movs	r1, #0
     6f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     6fc:	3301      	adds	r3, #1
     6fe:	b29b      	uxth	r3, r3
     700:	e7ee      	b.n	6e0 <ext_irq_init+0x4>
     702:	bf00      	nop
     704:	00000699 	.word	0x00000699
     708:	00000f65 	.word	0x00000f65
     70c:	200000e0 	.word	0x200000e0

00000710 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     710:	b570      	push	{r4, r5, r6, lr}
     712:	460d      	mov	r5, r1
     714:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     716:	4604      	mov	r4, r0
     718:	b168      	cbz	r0, 736 <io_write+0x26>
     71a:	b151      	cbz	r1, 732 <io_write+0x22>
     71c:	2001      	movs	r0, #1
     71e:	2234      	movs	r2, #52	; 0x34
     720:	4906      	ldr	r1, [pc, #24]	; (73c <io_write+0x2c>)
     722:	4b07      	ldr	r3, [pc, #28]	; (740 <io_write+0x30>)
     724:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     726:	6823      	ldr	r3, [r4, #0]
     728:	4632      	mov	r2, r6
     72a:	4629      	mov	r1, r5
     72c:	4620      	mov	r0, r4
     72e:	4798      	blx	r3
}
     730:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     732:	2000      	movs	r0, #0
     734:	e7f3      	b.n	71e <io_write+0xe>
     736:	2000      	movs	r0, #0
     738:	e7f1      	b.n	71e <io_write+0xe>
     73a:	bf00      	nop
     73c:	0000336c 	.word	0x0000336c
     740:	00000ce1 	.word	0x00000ce1

00000744 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     744:	b570      	push	{r4, r5, r6, lr}
     746:	460d      	mov	r5, r1
     748:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     74a:	4604      	mov	r4, r0
     74c:	b168      	cbz	r0, 76a <io_read+0x26>
     74e:	b151      	cbz	r1, 766 <io_read+0x22>
     750:	2001      	movs	r0, #1
     752:	223d      	movs	r2, #61	; 0x3d
     754:	4906      	ldr	r1, [pc, #24]	; (770 <io_read+0x2c>)
     756:	4b07      	ldr	r3, [pc, #28]	; (774 <io_read+0x30>)
     758:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     75a:	6863      	ldr	r3, [r4, #4]
     75c:	4632      	mov	r2, r6
     75e:	4629      	mov	r1, r5
     760:	4620      	mov	r0, r4
     762:	4798      	blx	r3
}
     764:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     766:	2000      	movs	r0, #0
     768:	e7f3      	b.n	752 <io_read+0xe>
     76a:	2000      	movs	r0, #0
     76c:	e7f1      	b.n	752 <io_read+0xe>
     76e:	bf00      	nop
     770:	0000336c 	.word	0x0000336c
     774:	00000ce1 	.word	0x00000ce1

00000778 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     778:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     77a:	6943      	ldr	r3, [r0, #20]
     77c:	b103      	cbz	r3, 780 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     77e:	4798      	blx	r3
     780:	bd08      	pop	{r3, pc}

00000782 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     782:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     784:	6983      	ldr	r3, [r0, #24]
     786:	b103      	cbz	r3, 78a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     788:	4798      	blx	r3
     78a:	bd08      	pop	{r3, pc}

0000078c <pwm_init>:
{
     78c:	b538      	push	{r3, r4, r5, lr}
     78e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     790:	4604      	mov	r4, r0
     792:	b188      	cbz	r0, 7b8 <pwm_init+0x2c>
     794:	b171      	cbz	r1, 7b4 <pwm_init+0x28>
     796:	2001      	movs	r0, #1
     798:	2233      	movs	r2, #51	; 0x33
     79a:	4908      	ldr	r1, [pc, #32]	; (7bc <pwm_init+0x30>)
     79c:	4b08      	ldr	r3, [pc, #32]	; (7c0 <pwm_init+0x34>)
     79e:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     7a0:	4629      	mov	r1, r5
     7a2:	4620      	mov	r0, r4
     7a4:	4b07      	ldr	r3, [pc, #28]	; (7c4 <pwm_init+0x38>)
     7a6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     7a8:	4b07      	ldr	r3, [pc, #28]	; (7c8 <pwm_init+0x3c>)
     7aa:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     7ac:	4b07      	ldr	r3, [pc, #28]	; (7cc <pwm_init+0x40>)
     7ae:	6063      	str	r3, [r4, #4]
}
     7b0:	2000      	movs	r0, #0
     7b2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     7b4:	2000      	movs	r0, #0
     7b6:	e7ef      	b.n	798 <pwm_init+0xc>
     7b8:	2000      	movs	r0, #0
     7ba:	e7ed      	b.n	798 <pwm_init+0xc>
     7bc:	00003380 	.word	0x00003380
     7c0:	00000ce1 	.word	0x00000ce1
     7c4:	0000179d 	.word	0x0000179d
     7c8:	00000779 	.word	0x00000779
     7cc:	00000783 	.word	0x00000783

000007d0 <pwm_enable>:
{
     7d0:	b510      	push	{r4, lr}
	ASSERT(descr);
     7d2:	4604      	mov	r4, r0
     7d4:	224a      	movs	r2, #74	; 0x4a
     7d6:	4909      	ldr	r1, [pc, #36]	; (7fc <pwm_enable+0x2c>)
     7d8:	3000      	adds	r0, #0
     7da:	bf18      	it	ne
     7dc:	2001      	movne	r0, #1
     7de:	4b08      	ldr	r3, [pc, #32]	; (800 <pwm_enable+0x30>)
     7e0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     7e2:	4620      	mov	r0, r4
     7e4:	4b07      	ldr	r3, [pc, #28]	; (804 <pwm_enable+0x34>)
     7e6:	4798      	blx	r3
     7e8:	b920      	cbnz	r0, 7f4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
     7ea:	4620      	mov	r0, r4
     7ec:	4b06      	ldr	r3, [pc, #24]	; (808 <pwm_enable+0x38>)
     7ee:	4798      	blx	r3
	return ERR_NONE;
     7f0:	2000      	movs	r0, #0
     7f2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     7f4:	f06f 0010 	mvn.w	r0, #16
}
     7f8:	bd10      	pop	{r4, pc}
     7fa:	bf00      	nop
     7fc:	00003380 	.word	0x00003380
     800:	00000ce1 	.word	0x00000ce1
     804:	000019eb 	.word	0x000019eb
     808:	00001931 	.word	0x00001931

0000080c <pwm_disable>:
{
     80c:	b510      	push	{r4, lr}
	ASSERT(descr);
     80e:	4604      	mov	r4, r0
     810:	2258      	movs	r2, #88	; 0x58
     812:	4909      	ldr	r1, [pc, #36]	; (838 <pwm_disable+0x2c>)
     814:	3000      	adds	r0, #0
     816:	bf18      	it	ne
     818:	2001      	movne	r0, #1
     81a:	4b08      	ldr	r3, [pc, #32]	; (83c <pwm_disable+0x30>)
     81c:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     81e:	4620      	mov	r0, r4
     820:	4b07      	ldr	r3, [pc, #28]	; (840 <pwm_disable+0x34>)
     822:	4798      	blx	r3
     824:	b120      	cbz	r0, 830 <pwm_disable+0x24>
	_pwm_disable(&descr->device);
     826:	4620      	mov	r0, r4
     828:	4b06      	ldr	r3, [pc, #24]	; (844 <pwm_disable+0x38>)
     82a:	4798      	blx	r3
	return ERR_NONE;
     82c:	2000      	movs	r0, #0
     82e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     830:	f06f 0010 	mvn.w	r0, #16
}
     834:	bd10      	pop	{r4, pc}
     836:	bf00      	nop
     838:	00003380 	.word	0x00003380
     83c:	00000ce1 	.word	0x00000ce1
     840:	000019eb 	.word	0x000019eb
     844:	00001945 	.word	0x00001945

00000848 <pwm_set_parameters>:
{
     848:	b570      	push	{r4, r5, r6, lr}
     84a:	460d      	mov	r5, r1
     84c:	4616      	mov	r6, r2
	ASSERT(descr);
     84e:	4604      	mov	r4, r0
     850:	227c      	movs	r2, #124	; 0x7c
     852:	4906      	ldr	r1, [pc, #24]	; (86c <pwm_set_parameters+0x24>)
     854:	3000      	adds	r0, #0
     856:	bf18      	it	ne
     858:	2001      	movne	r0, #1
     85a:	4b05      	ldr	r3, [pc, #20]	; (870 <pwm_set_parameters+0x28>)
     85c:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     85e:	4632      	mov	r2, r6
     860:	4629      	mov	r1, r5
     862:	4620      	mov	r0, r4
     864:	4b03      	ldr	r3, [pc, #12]	; (874 <pwm_set_parameters+0x2c>)
     866:	4798      	blx	r3
}
     868:	2000      	movs	r0, #0
     86a:	bd70      	pop	{r4, r5, r6, pc}
     86c:	00003380 	.word	0x00003380
     870:	00000ce1 	.word	0x00000ce1
     874:	00001959 	.word	0x00001959

00000878 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     87a:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     87c:	b117      	cbz	r7, 884 <timer_add_timer_task+0xc>
     87e:	463c      	mov	r4, r7
     880:	2600      	movs	r6, #0
     882:	e00b      	b.n	89c <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     884:	4b0e      	ldr	r3, [pc, #56]	; (8c0 <timer_add_timer_task+0x48>)
     886:	4798      	blx	r3
		return;
     888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     88a:	68a5      	ldr	r5, [r4, #8]
     88c:	442b      	add	r3, r5
     88e:	1a9b      	subs	r3, r3, r2
     890:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
     892:	688d      	ldr	r5, [r1, #8]
     894:	42ab      	cmp	r3, r5
     896:	d209      	bcs.n	8ac <timer_add_timer_task+0x34>
			break;
		prev = it;
     898:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     89a:	6824      	ldr	r4, [r4, #0]
     89c:	b134      	cbz	r4, 8ac <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
     89e:	6863      	ldr	r3, [r4, #4]
     8a0:	4293      	cmp	r3, r2
     8a2:	d8f2      	bhi.n	88a <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
     8a4:	68a5      	ldr	r5, [r4, #8]
     8a6:	1a9b      	subs	r3, r3, r2
     8a8:	442b      	add	r3, r5
     8aa:	e7f2      	b.n	892 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
     8ac:	42bc      	cmp	r4, r7
     8ae:	d003      	beq.n	8b8 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     8b0:	4630      	mov	r0, r6
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <timer_add_timer_task+0x4c>)
     8b4:	4798      	blx	r3
     8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     8b8:	4b01      	ldr	r3, [pc, #4]	; (8c0 <timer_add_timer_task+0x48>)
     8ba:	4798      	blx	r3
     8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8be:	bf00      	nop
     8c0:	00000cfd 	.word	0x00000cfd
     8c4:	00000d29 	.word	0x00000d29

000008c8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ca:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     8cc:	6906      	ldr	r6, [r0, #16]
     8ce:	3601      	adds	r6, #1
     8d0:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     8d2:	7e03      	ldrb	r3, [r0, #24]
     8d4:	f013 0f01 	tst.w	r3, #1
     8d8:	d105      	bne.n	8e6 <timer_process_counted+0x1e>
     8da:	7e03      	ldrb	r3, [r0, #24]
     8dc:	f013 0f02 	tst.w	r3, #2
     8e0:	d101      	bne.n	8e6 <timer_process_counted+0x1e>
     8e2:	4605      	mov	r5, r0
     8e4:	e009      	b.n	8fa <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     8e6:	7e03      	ldrb	r3, [r0, #24]
     8e8:	f043 0302 	orr.w	r3, r3, #2
     8ec:	7603      	strb	r3, [r0, #24]
		return;
     8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8f0:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     8f2:	68e3      	ldr	r3, [r4, #12]
     8f4:	4620      	mov	r0, r4
     8f6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     8f8:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     8fa:	b19c      	cbz	r4, 924 <timer_process_counted+0x5c>
     8fc:	6863      	ldr	r3, [r4, #4]
     8fe:	1af3      	subs	r3, r6, r3
     900:	68a2      	ldr	r2, [r4, #8]
     902:	4293      	cmp	r3, r2
     904:	d30e      	bcc.n	924 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
     906:	f105 0714 	add.w	r7, r5, #20
     90a:	4638      	mov	r0, r7
     90c:	4b06      	ldr	r3, [pc, #24]	; (928 <timer_process_counted+0x60>)
     90e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     910:	7c23      	ldrb	r3, [r4, #16]
     912:	2b01      	cmp	r3, #1
     914:	d1ec      	bne.n	8f0 <timer_process_counted+0x28>
			tmp->time_label = time;
     916:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     918:	4632      	mov	r2, r6
     91a:	4621      	mov	r1, r4
     91c:	4638      	mov	r0, r7
     91e:	4b03      	ldr	r3, [pc, #12]	; (92c <timer_process_counted+0x64>)
     920:	4798      	blx	r3
     922:	e7e5      	b.n	8f0 <timer_process_counted+0x28>
     924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     926:	bf00      	nop
     928:	00000d31 	.word	0x00000d31
     92c:	00000879 	.word	0x00000879

00000930 <timer_init>:
{
     930:	b538      	push	{r3, r4, r5, lr}
     932:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     934:	4604      	mov	r4, r0
     936:	b180      	cbz	r0, 95a <timer_init+0x2a>
     938:	b169      	cbz	r1, 956 <timer_init+0x26>
     93a:	2001      	movs	r0, #1
     93c:	223b      	movs	r2, #59	; 0x3b
     93e:	4908      	ldr	r1, [pc, #32]	; (960 <timer_init+0x30>)
     940:	4b08      	ldr	r3, [pc, #32]	; (964 <timer_init+0x34>)
     942:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     944:	4629      	mov	r1, r5
     946:	4620      	mov	r0, r4
     948:	4b07      	ldr	r3, [pc, #28]	; (968 <timer_init+0x38>)
     94a:	4798      	blx	r3
	descr->time                           = 0;
     94c:	2000      	movs	r0, #0
     94e:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     950:	4b06      	ldr	r3, [pc, #24]	; (96c <timer_init+0x3c>)
     952:	6023      	str	r3, [r4, #0]
}
     954:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     956:	2000      	movs	r0, #0
     958:	e7f0      	b.n	93c <timer_init+0xc>
     95a:	2000      	movs	r0, #0
     95c:	e7ee      	b.n	93c <timer_init+0xc>
     95e:	bf00      	nop
     960:	00003398 	.word	0x00003398
     964:	00000ce1 	.word	0x00000ce1
     968:	000015c9 	.word	0x000015c9
     96c:	000008c9 	.word	0x000008c9

00000970 <timer_start>:
{
     970:	b510      	push	{r4, lr}
	ASSERT(descr);
     972:	4604      	mov	r4, r0
     974:	2253      	movs	r2, #83	; 0x53
     976:	4909      	ldr	r1, [pc, #36]	; (99c <timer_start+0x2c>)
     978:	3000      	adds	r0, #0
     97a:	bf18      	it	ne
     97c:	2001      	movne	r0, #1
     97e:	4b08      	ldr	r3, [pc, #32]	; (9a0 <timer_start+0x30>)
     980:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     982:	4620      	mov	r0, r4
     984:	4b07      	ldr	r3, [pc, #28]	; (9a4 <timer_start+0x34>)
     986:	4798      	blx	r3
     988:	b920      	cbnz	r0, 994 <timer_start+0x24>
	_timer_start(&descr->device);
     98a:	4620      	mov	r0, r4
     98c:	4b06      	ldr	r3, [pc, #24]	; (9a8 <timer_start+0x38>)
     98e:	4798      	blx	r3
	return ERR_NONE;
     990:	2000      	movs	r0, #0
     992:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     994:	f06f 0010 	mvn.w	r0, #16
}
     998:	bd10      	pop	{r4, pc}
     99a:	bf00      	nop
     99c:	00003398 	.word	0x00003398
     9a0:	00000ce1 	.word	0x00000ce1
     9a4:	000019d9 	.word	0x000019d9
     9a8:	0000191d 	.word	0x0000191d

000009ac <timer_add_task>:
{
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	b082      	sub	sp, #8
     9b0:	460d      	mov	r5, r1
	ASSERT(descr && task);
     9b2:	4604      	mov	r4, r0
     9b4:	b320      	cbz	r0, a00 <timer_add_task+0x54>
     9b6:	b309      	cbz	r1, 9fc <timer_add_task+0x50>
     9b8:	2001      	movs	r0, #1
     9ba:	227a      	movs	r2, #122	; 0x7a
     9bc:	491f      	ldr	r1, [pc, #124]	; (a3c <timer_add_task+0x90>)
     9be:	4b20      	ldr	r3, [pc, #128]	; (a40 <timer_add_task+0x94>)
     9c0:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     9c2:	7e23      	ldrb	r3, [r4, #24]
     9c4:	f043 0301 	orr.w	r3, r3, #1
     9c8:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     9ca:	f104 0614 	add.w	r6, r4, #20
     9ce:	4629      	mov	r1, r5
     9d0:	4630      	mov	r0, r6
     9d2:	4b1c      	ldr	r3, [pc, #112]	; (a44 <timer_add_task+0x98>)
     9d4:	4798      	blx	r3
     9d6:	b9a8      	cbnz	r0, a04 <timer_add_task+0x58>
	task->time_label = descr->time;
     9d8:	6923      	ldr	r3, [r4, #16]
     9da:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     9dc:	6922      	ldr	r2, [r4, #16]
     9de:	4629      	mov	r1, r5
     9e0:	4630      	mov	r0, r6
     9e2:	4b19      	ldr	r3, [pc, #100]	; (a48 <timer_add_task+0x9c>)
     9e4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     9e6:	7e23      	ldrb	r3, [r4, #24]
     9e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     9ec:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     9ee:	7e23      	ldrb	r3, [r4, #24]
     9f0:	f013 0f02 	tst.w	r3, #2
     9f4:	d112      	bne.n	a1c <timer_add_task+0x70>
	return ERR_NONE;
     9f6:	2000      	movs	r0, #0
}
     9f8:	b002      	add	sp, #8
     9fa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     9fc:	2000      	movs	r0, #0
     9fe:	e7dc      	b.n	9ba <timer_add_task+0xe>
     a00:	2000      	movs	r0, #0
     a02:	e7da      	b.n	9ba <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a04:	7e23      	ldrb	r3, [r4, #24]
     a06:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     a0a:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     a0c:	227f      	movs	r2, #127	; 0x7f
     a0e:	490b      	ldr	r1, [pc, #44]	; (a3c <timer_add_task+0x90>)
     a10:	2000      	movs	r0, #0
     a12:	4b0b      	ldr	r3, [pc, #44]	; (a40 <timer_add_task+0x94>)
     a14:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     a16:	f06f 0011 	mvn.w	r0, #17
     a1a:	e7ed      	b.n	9f8 <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
     a1c:	a801      	add	r0, sp, #4
     a1e:	4b0b      	ldr	r3, [pc, #44]	; (a4c <timer_add_task+0xa0>)
     a20:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     a22:	7e23      	ldrb	r3, [r4, #24]
     a24:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     a28:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     a2a:	4620      	mov	r0, r4
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <timer_add_task+0xa4>)
     a2e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     a30:	a801      	add	r0, sp, #4
     a32:	4b08      	ldr	r3, [pc, #32]	; (a54 <timer_add_task+0xa8>)
     a34:	4798      	blx	r3
	return ERR_NONE;
     a36:	2000      	movs	r0, #0
     a38:	e7de      	b.n	9f8 <timer_add_task+0x4c>
     a3a:	bf00      	nop
     a3c:	00003398 	.word	0x00003398
     a40:	00000ce1 	.word	0x00000ce1
     a44:	00000ce7 	.word	0x00000ce7
     a48:	00000879 	.word	0x00000879
     a4c:	00000671 	.word	0x00000671
     a50:	00001a05 	.word	0x00001a05
     a54:	0000067f 	.word	0x0000067f

00000a58 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     a58:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     a5a:	2300      	movs	r3, #0
     a5c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     a5e:	69c3      	ldr	r3, [r0, #28]
     a60:	b11b      	cbz	r3, a6a <usart_transmission_complete+0x12>
     a62:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     a66:	4610      	mov	r0, r2
     a68:	4798      	blx	r3
     a6a:	bd08      	pop	{r3, pc}

00000a6c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     a6c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     a6e:	2300      	movs	r3, #0
     a70:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     a72:	6a43      	ldr	r3, [r0, #36]	; 0x24
     a74:	b11b      	cbz	r3, a7e <usart_error+0x12>
     a76:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     a7a:	4610      	mov	r0, r2
     a7c:	4798      	blx	r3
     a7e:	bd08      	pop	{r3, pc}

00000a80 <usart_fill_rx_buffer>:
{
     a80:	b538      	push	{r3, r4, r5, lr}
     a82:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a84:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     a88:	302c      	adds	r0, #44	; 0x2c
     a8a:	4b03      	ldr	r3, [pc, #12]	; (a98 <usart_fill_rx_buffer+0x18>)
     a8c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     a8e:	6a23      	ldr	r3, [r4, #32]
     a90:	b10b      	cbz	r3, a96 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     a92:	4628      	mov	r0, r5
     a94:	4798      	blx	r3
     a96:	bd38      	pop	{r3, r4, r5, pc}
     a98:	00000dcd 	.word	0x00000dcd

00000a9c <usart_async_write>:
{
     a9c:	b570      	push	{r4, r5, r6, lr}
     a9e:	460e      	mov	r6, r1
     aa0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     aa2:	4604      	mov	r4, r0
     aa4:	b1d8      	cbz	r0, ade <usart_async_write+0x42>
     aa6:	b1e1      	cbz	r1, ae2 <usart_async_write+0x46>
     aa8:	b9ea      	cbnz	r2, ae6 <usart_async_write+0x4a>
     aaa:	2000      	movs	r0, #0
     aac:	f240 123b 	movw	r2, #315	; 0x13b
     ab0:	490f      	ldr	r1, [pc, #60]	; (af0 <usart_async_write+0x54>)
     ab2:	4b10      	ldr	r3, [pc, #64]	; (af4 <usart_async_write+0x58>)
     ab4:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     ab6:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     aba:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     abe:	429a      	cmp	r2, r3
     ac0:	d113      	bne.n	aea <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
     ac2:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     ac4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     ac8:	2300      	movs	r3, #0
     aca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     ace:	2301      	movs	r3, #1
     ad0:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ad2:	f104 0008 	add.w	r0, r4, #8
     ad6:	4b08      	ldr	r3, [pc, #32]	; (af8 <usart_async_write+0x5c>)
     ad8:	4798      	blx	r3
	return (int32_t)length;
     ada:	4628      	mov	r0, r5
     adc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     ade:	2000      	movs	r0, #0
     ae0:	e7e4      	b.n	aac <usart_async_write+0x10>
     ae2:	2000      	movs	r0, #0
     ae4:	e7e2      	b.n	aac <usart_async_write+0x10>
     ae6:	2001      	movs	r0, #1
     ae8:	e7e0      	b.n	aac <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
     aea:	f06f 001b 	mvn.w	r0, #27
}
     aee:	bd70      	pop	{r4, r5, r6, pc}
     af0:	000033b0 	.word	0x000033b0
     af4:	00000ce1 	.word	0x00000ce1
     af8:	000013ff 	.word	0x000013ff

00000afc <usart_process_byte_sent>:
{
     afc:	b510      	push	{r4, lr}
     afe:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     b00:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     b02:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     b06:	4293      	cmp	r3, r2
     b08:	d009      	beq.n	b1e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     b0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
     b0c:	1c59      	adds	r1, r3, #1
     b0e:	8781      	strh	r1, [r0, #60]	; 0x3c
     b10:	5cd1      	ldrb	r1, [r2, r3]
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <usart_process_byte_sent+0x28>)
     b14:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b16:	4620      	mov	r0, r4
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <usart_process_byte_sent+0x2c>)
     b1a:	4798      	blx	r3
     b1c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     b1e:	4b03      	ldr	r3, [pc, #12]	; (b2c <usart_process_byte_sent+0x30>)
     b20:	4798      	blx	r3
     b22:	bd10      	pop	{r4, pc}
     b24:	000013f9 	.word	0x000013f9
     b28:	000013ff 	.word	0x000013ff
     b2c:	00001407 	.word	0x00001407

00000b30 <usart_async_read>:
{
     b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b34:	b082      	sub	sp, #8
     b36:	4688      	mov	r8, r1
     b38:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
     b3a:	4605      	mov	r5, r0
     b3c:	b1a0      	cbz	r0, b68 <usart_async_read+0x38>
     b3e:	b1a9      	cbz	r1, b6c <usart_async_read+0x3c>
     b40:	b9b2      	cbnz	r2, b70 <usart_async_read+0x40>
     b42:	2000      	movs	r0, #0
     b44:	f44f 72ac 	mov.w	r2, #344	; 0x158
     b48:	4912      	ldr	r1, [pc, #72]	; (b94 <usart_async_read+0x64>)
     b4a:	4b13      	ldr	r3, [pc, #76]	; (b98 <usart_async_read+0x68>)
     b4c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b4e:	a801      	add	r0, sp, #4
     b50:	4b12      	ldr	r3, [pc, #72]	; (b9c <usart_async_read+0x6c>)
     b52:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b54:	3534      	adds	r5, #52	; 0x34
     b56:	4628      	mov	r0, r5
     b58:	4b11      	ldr	r3, [pc, #68]	; (ba0 <usart_async_read+0x70>)
     b5a:	4798      	blx	r3
     b5c:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
     b5e:	a801      	add	r0, sp, #4
     b60:	4b10      	ldr	r3, [pc, #64]	; (ba4 <usart_async_read+0x74>)
     b62:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b64:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     b66:	e00b      	b.n	b80 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
     b68:	2000      	movs	r0, #0
     b6a:	e7eb      	b.n	b44 <usart_async_read+0x14>
     b6c:	2000      	movs	r0, #0
     b6e:	e7e9      	b.n	b44 <usart_async_read+0x14>
     b70:	2001      	movs	r0, #1
     b72:	e7e7      	b.n	b44 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     b74:	3401      	adds	r4, #1
     b76:	b2a4      	uxth	r4, r4
     b78:	4441      	add	r1, r8
     b7a:	4628      	mov	r0, r5
     b7c:	4b0a      	ldr	r3, [pc, #40]	; (ba8 <usart_async_read+0x78>)
     b7e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b80:	4621      	mov	r1, r4
     b82:	42a7      	cmp	r7, r4
     b84:	d901      	bls.n	b8a <usart_async_read+0x5a>
     b86:	42b4      	cmp	r4, r6
     b88:	d3f4      	bcc.n	b74 <usart_async_read+0x44>
}
     b8a:	4620      	mov	r0, r4
     b8c:	b002      	add	sp, #8
     b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b92:	bf00      	nop
     b94:	000033b0 	.word	0x000033b0
     b98:	00000ce1 	.word	0x00000ce1
     b9c:	00000671 	.word	0x00000671
     ba0:	00000e0d 	.word	0x00000e0d
     ba4:	0000067f 	.word	0x0000067f
     ba8:	00000d85 	.word	0x00000d85

00000bac <usart_async_init>:
{
     bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bae:	460d      	mov	r5, r1
     bb0:	4616      	mov	r6, r2
     bb2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     bb4:	4604      	mov	r4, r0
     bb6:	b318      	cbz	r0, c00 <usart_async_init+0x54>
     bb8:	b321      	cbz	r1, c04 <usart_async_init+0x58>
     bba:	b32a      	cbz	r2, c08 <usart_async_init+0x5c>
     bbc:	bb33      	cbnz	r3, c0c <usart_async_init+0x60>
     bbe:	2000      	movs	r0, #0
     bc0:	223a      	movs	r2, #58	; 0x3a
     bc2:	4915      	ldr	r1, [pc, #84]	; (c18 <usart_async_init+0x6c>)
     bc4:	4b15      	ldr	r3, [pc, #84]	; (c1c <usart_async_init+0x70>)
     bc6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bc8:	463a      	mov	r2, r7
     bca:	4631      	mov	r1, r6
     bcc:	f104 0034 	add.w	r0, r4, #52	; 0x34
     bd0:	4b13      	ldr	r3, [pc, #76]	; (c20 <usart_async_init+0x74>)
     bd2:	4798      	blx	r3
     bd4:	b9e0      	cbnz	r0, c10 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
     bd6:	4629      	mov	r1, r5
     bd8:	f104 0008 	add.w	r0, r4, #8
     bdc:	4b11      	ldr	r3, [pc, #68]	; (c24 <usart_async_init+0x78>)
     bde:	4798      	blx	r3
	if (init_status) {
     be0:	4603      	mov	r3, r0
     be2:	b958      	cbnz	r0, bfc <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
     be4:	4a10      	ldr	r2, [pc, #64]	; (c28 <usart_async_init+0x7c>)
     be6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
     be8:	4a10      	ldr	r2, [pc, #64]	; (c2c <usart_async_init+0x80>)
     bea:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     bec:	4a10      	ldr	r2, [pc, #64]	; (c30 <usart_async_init+0x84>)
     bee:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     bf0:	4a10      	ldr	r2, [pc, #64]	; (c34 <usart_async_init+0x88>)
     bf2:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     bf4:	4a10      	ldr	r2, [pc, #64]	; (c38 <usart_async_init+0x8c>)
     bf6:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     bf8:	4a10      	ldr	r2, [pc, #64]	; (c3c <usart_async_init+0x90>)
     bfa:	6162      	str	r2, [r4, #20]
}
     bfc:	4618      	mov	r0, r3
     bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c00:	2000      	movs	r0, #0
     c02:	e7dd      	b.n	bc0 <usart_async_init+0x14>
     c04:	2000      	movs	r0, #0
     c06:	e7db      	b.n	bc0 <usart_async_init+0x14>
     c08:	2000      	movs	r0, #0
     c0a:	e7d9      	b.n	bc0 <usart_async_init+0x14>
     c0c:	2001      	movs	r0, #1
     c0e:	e7d7      	b.n	bc0 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
     c10:	f06f 030c 	mvn.w	r3, #12
     c14:	e7f2      	b.n	bfc <usart_async_init+0x50>
     c16:	bf00      	nop
     c18:	000033b0 	.word	0x000033b0
     c1c:	00000ce1 	.word	0x00000ce1
     c20:	00000d41 	.word	0x00000d41
     c24:	00001361 	.word	0x00001361
     c28:	00000b31 	.word	0x00000b31
     c2c:	00000a9d 	.word	0x00000a9d
     c30:	00000afd 	.word	0x00000afd
     c34:	00000a81 	.word	0x00000a81
     c38:	00000a59 	.word	0x00000a59
     c3c:	00000a6d 	.word	0x00000a6d

00000c40 <usart_async_enable>:
{
     c40:	b510      	push	{r4, lr}
	ASSERT(descr);
     c42:	4604      	mov	r4, r0
     c44:	2261      	movs	r2, #97	; 0x61
     c46:	4906      	ldr	r1, [pc, #24]	; (c60 <usart_async_enable+0x20>)
     c48:	3000      	adds	r0, #0
     c4a:	bf18      	it	ne
     c4c:	2001      	movne	r0, #1
     c4e:	4b05      	ldr	r3, [pc, #20]	; (c64 <usart_async_enable+0x24>)
     c50:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     c52:	f104 0008 	add.w	r0, r4, #8
     c56:	4b04      	ldr	r3, [pc, #16]	; (c68 <usart_async_enable+0x28>)
     c58:	4798      	blx	r3
}
     c5a:	2000      	movs	r0, #0
     c5c:	bd10      	pop	{r4, pc}
     c5e:	bf00      	nop
     c60:	000033b0 	.word	0x000033b0
     c64:	00000ce1 	.word	0x00000ce1
     c68:	000013e5 	.word	0x000013e5

00000c6c <usart_async_register_callback>:
{
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	460c      	mov	r4, r1
     c70:	4616      	mov	r6, r2
	ASSERT(descr);
     c72:	4605      	mov	r5, r0
     c74:	2283      	movs	r2, #131	; 0x83
     c76:	4917      	ldr	r1, [pc, #92]	; (cd4 <usart_async_register_callback+0x68>)
     c78:	3000      	adds	r0, #0
     c7a:	bf18      	it	ne
     c7c:	2001      	movne	r0, #1
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <usart_async_register_callback+0x6c>)
     c80:	4798      	blx	r3
	switch (type) {
     c82:	2c01      	cmp	r4, #1
     c84:	d010      	beq.n	ca8 <usart_async_register_callback+0x3c>
     c86:	b124      	cbz	r4, c92 <usart_async_register_callback+0x26>
     c88:	2c02      	cmp	r4, #2
     c8a:	d018      	beq.n	cbe <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
     c8c:	f06f 000c 	mvn.w	r0, #12
}
     c90:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
     c92:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     c94:	1c32      	adds	r2, r6, #0
     c96:	bf18      	it	ne
     c98:	2201      	movne	r2, #1
     c9a:	2101      	movs	r1, #1
     c9c:	f105 0008 	add.w	r0, r5, #8
     ca0:	4b0e      	ldr	r3, [pc, #56]	; (cdc <usart_async_register_callback+0x70>)
     ca2:	4798      	blx	r3
	return ERR_NONE;
     ca4:	2000      	movs	r0, #0
		break;
     ca6:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     ca8:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     caa:	1c32      	adds	r2, r6, #0
     cac:	bf18      	it	ne
     cae:	2201      	movne	r2, #1
     cb0:	2102      	movs	r1, #2
     cb2:	f105 0008 	add.w	r0, r5, #8
     cb6:	4b09      	ldr	r3, [pc, #36]	; (cdc <usart_async_register_callback+0x70>)
     cb8:	4798      	blx	r3
	return ERR_NONE;
     cba:	2000      	movs	r0, #0
		break;
     cbc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
     cbe:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     cc0:	1c32      	adds	r2, r6, #0
     cc2:	bf18      	it	ne
     cc4:	2201      	movne	r2, #1
     cc6:	2103      	movs	r1, #3
     cc8:	f105 0008 	add.w	r0, r5, #8
     ccc:	4b03      	ldr	r3, [pc, #12]	; (cdc <usart_async_register_callback+0x70>)
     cce:	4798      	blx	r3
	return ERR_NONE;
     cd0:	2000      	movs	r0, #0
		break;
     cd2:	bd70      	pop	{r4, r5, r6, pc}
     cd4:	000033b0 	.word	0x000033b0
     cd8:	00000ce1 	.word	0x00000ce1
     cdc:	00001411 	.word	0x00001411

00000ce0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ce0:	b900      	cbnz	r0, ce4 <assert+0x4>
		__asm("BKPT #0");
     ce2:	be00      	bkpt	0x0000
     ce4:	4770      	bx	lr

00000ce6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ce6:	6803      	ldr	r3, [r0, #0]
     ce8:	b11b      	cbz	r3, cf2 <is_list_element+0xc>
		if (it == element) {
     cea:	428b      	cmp	r3, r1
     cec:	d003      	beq.n	cf6 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
     cee:	681b      	ldr	r3, [r3, #0]
     cf0:	e7fa      	b.n	ce8 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     cf2:	2000      	movs	r0, #0
     cf4:	4770      	bx	lr
			return true;
     cf6:	2001      	movs	r0, #1
}
     cf8:	4770      	bx	lr
	...

00000cfc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     cfc:	b538      	push	{r3, r4, r5, lr}
     cfe:	4604      	mov	r4, r0
     d00:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     d02:	4b06      	ldr	r3, [pc, #24]	; (d1c <list_insert_as_head+0x20>)
     d04:	4798      	blx	r3
     d06:	f080 0001 	eor.w	r0, r0, #1
     d0a:	2239      	movs	r2, #57	; 0x39
     d0c:	4904      	ldr	r1, [pc, #16]	; (d20 <list_insert_as_head+0x24>)
     d0e:	b2c0      	uxtb	r0, r0
     d10:	4b04      	ldr	r3, [pc, #16]	; (d24 <list_insert_as_head+0x28>)
     d12:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     d14:	6823      	ldr	r3, [r4, #0]
     d16:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     d18:	6025      	str	r5, [r4, #0]
     d1a:	bd38      	pop	{r3, r4, r5, pc}
     d1c:	00000ce7 	.word	0x00000ce7
     d20:	000033d0 	.word	0x000033d0
     d24:	00000ce1 	.word	0x00000ce1

00000d28 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     d28:	6803      	ldr	r3, [r0, #0]
     d2a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     d2c:	6001      	str	r1, [r0, #0]
     d2e:	4770      	bx	lr

00000d30 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     d30:	6803      	ldr	r3, [r0, #0]
     d32:	b11b      	cbz	r3, d3c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d34:	681a      	ldr	r2, [r3, #0]
     d36:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     d38:	4618      	mov	r0, r3
     d3a:	4770      	bx	lr
	}

	return NULL;
     d3c:	2000      	movs	r0, #0
}
     d3e:	4770      	bx	lr

00000d40 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     d40:	b570      	push	{r4, r5, r6, lr}
     d42:	460e      	mov	r6, r1
     d44:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     d46:	4604      	mov	r4, r0
     d48:	b178      	cbz	r0, d6a <ringbuffer_init+0x2a>
     d4a:	b181      	cbz	r1, d6e <ringbuffer_init+0x2e>
     d4c:	b98a      	cbnz	r2, d72 <ringbuffer_init+0x32>
     d4e:	2000      	movs	r0, #0
     d50:	2228      	movs	r2, #40	; 0x28
     d52:	490a      	ldr	r1, [pc, #40]	; (d7c <ringbuffer_init+0x3c>)
     d54:	4b0a      	ldr	r3, [pc, #40]	; (d80 <ringbuffer_init+0x40>)
     d56:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     d58:	1e6b      	subs	r3, r5, #1
     d5a:	421d      	tst	r5, r3
     d5c:	d10b      	bne.n	d76 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     d5e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     d60:	2000      	movs	r0, #0
     d62:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     d64:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     d66:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     d68:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     d6a:	2000      	movs	r0, #0
     d6c:	e7f0      	b.n	d50 <ringbuffer_init+0x10>
     d6e:	2000      	movs	r0, #0
     d70:	e7ee      	b.n	d50 <ringbuffer_init+0x10>
     d72:	2001      	movs	r0, #1
     d74:	e7ec      	b.n	d50 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     d76:	f06f 000c 	mvn.w	r0, #12
}
     d7a:	bd70      	pop	{r4, r5, r6, pc}
     d7c:	000033f0 	.word	0x000033f0
     d80:	00000ce1 	.word	0x00000ce1

00000d84 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     d84:	b538      	push	{r3, r4, r5, lr}
     d86:	460d      	mov	r5, r1
	ASSERT(rb && data);
     d88:	4604      	mov	r4, r0
     d8a:	b1a8      	cbz	r0, db8 <ringbuffer_get+0x34>
     d8c:	b191      	cbz	r1, db4 <ringbuffer_get+0x30>
     d8e:	2001      	movs	r0, #1
     d90:	2240      	movs	r2, #64	; 0x40
     d92:	490c      	ldr	r1, [pc, #48]	; (dc4 <ringbuffer_get+0x40>)
     d94:	4b0c      	ldr	r3, [pc, #48]	; (dc8 <ringbuffer_get+0x44>)
     d96:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     d98:	68e2      	ldr	r2, [r4, #12]
     d9a:	68a3      	ldr	r3, [r4, #8]
     d9c:	429a      	cmp	r2, r3
     d9e:	d00d      	beq.n	dbc <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
     da0:	6822      	ldr	r2, [r4, #0]
     da2:	6861      	ldr	r1, [r4, #4]
     da4:	400b      	ands	r3, r1
     da6:	5cd3      	ldrb	r3, [r2, r3]
     da8:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     daa:	68a3      	ldr	r3, [r4, #8]
     dac:	3301      	adds	r3, #1
     dae:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     db0:	2000      	movs	r0, #0
     db2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
     db4:	2000      	movs	r0, #0
     db6:	e7eb      	b.n	d90 <ringbuffer_get+0xc>
     db8:	2000      	movs	r0, #0
     dba:	e7e9      	b.n	d90 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
     dbc:	f06f 0009 	mvn.w	r0, #9
}
     dc0:	bd38      	pop	{r3, r4, r5, pc}
     dc2:	bf00      	nop
     dc4:	000033f0 	.word	0x000033f0
     dc8:	00000ce1 	.word	0x00000ce1

00000dcc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     dcc:	b538      	push	{r3, r4, r5, lr}
     dce:	460d      	mov	r5, r1
	ASSERT(rb);
     dd0:	4604      	mov	r4, r0
     dd2:	2251      	movs	r2, #81	; 0x51
     dd4:	490b      	ldr	r1, [pc, #44]	; (e04 <ringbuffer_put+0x38>)
     dd6:	3000      	adds	r0, #0
     dd8:	bf18      	it	ne
     dda:	2001      	movne	r0, #1
     ddc:	4b0a      	ldr	r3, [pc, #40]	; (e08 <ringbuffer_put+0x3c>)
     dde:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     de0:	6822      	ldr	r2, [r4, #0]
     de2:	68e3      	ldr	r3, [r4, #12]
     de4:	6861      	ldr	r1, [r4, #4]
     de6:	400b      	ands	r3, r1
     de8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     dea:	68e3      	ldr	r3, [r4, #12]
     dec:	68a2      	ldr	r2, [r4, #8]
     dee:	1a9a      	subs	r2, r3, r2
     df0:	6861      	ldr	r1, [r4, #4]
     df2:	428a      	cmp	r2, r1
     df4:	d901      	bls.n	dfa <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     df6:	1a59      	subs	r1, r3, r1
     df8:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     dfa:	3301      	adds	r3, #1
     dfc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     dfe:	2000      	movs	r0, #0
     e00:	bd38      	pop	{r3, r4, r5, pc}
     e02:	bf00      	nop
     e04:	000033f0 	.word	0x000033f0
     e08:	00000ce1 	.word	0x00000ce1

00000e0c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     e0c:	b510      	push	{r4, lr}
	ASSERT(rb);
     e0e:	4604      	mov	r4, r0
     e10:	2267      	movs	r2, #103	; 0x67
     e12:	4905      	ldr	r1, [pc, #20]	; (e28 <ringbuffer_num+0x1c>)
     e14:	3000      	adds	r0, #0
     e16:	bf18      	it	ne
     e18:	2001      	movne	r0, #1
     e1a:	4b04      	ldr	r3, [pc, #16]	; (e2c <ringbuffer_num+0x20>)
     e1c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     e1e:	68e0      	ldr	r0, [r4, #12]
     e20:	68a3      	ldr	r3, [r4, #8]
}
     e22:	1ac0      	subs	r0, r0, r3
     e24:	bd10      	pop	{r4, pc}
     e26:	bf00      	nop
     e28:	000033f0 	.word	0x000033f0
     e2c:	00000ce1 	.word	0x00000ce1

00000e30 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     e30:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     e32:	4a06      	ldr	r2, [pc, #24]	; (e4c <_sbrk+0x1c>)
     e34:	6812      	ldr	r2, [r2, #0]
     e36:	b122      	cbz	r2, e42 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     e38:	4a04      	ldr	r2, [pc, #16]	; (e4c <_sbrk+0x1c>)
     e3a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     e3c:	4403      	add	r3, r0
     e3e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     e40:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     e42:	4903      	ldr	r1, [pc, #12]	; (e50 <_sbrk+0x20>)
     e44:	4a01      	ldr	r2, [pc, #4]	; (e4c <_sbrk+0x1c>)
     e46:	6011      	str	r1, [r2, #0]
     e48:	e7f6      	b.n	e38 <_sbrk+0x8>
     e4a:	bf00      	nop
     e4c:	200000e8 	.word	0x200000e8
     e50:	20010278 	.word	0x20010278

00000e54 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e54:	0943      	lsrs	r3, r0, #5
     e56:	f000 001f 	and.w	r0, r0, #31
     e5a:	2201      	movs	r2, #1
     e5c:	fa02 f000 	lsl.w	r0, r2, r0
     e60:	3340      	adds	r3, #64	; 0x40
     e62:	4a02      	ldr	r2, [pc, #8]	; (e6c <_irq_set+0x18>)
     e64:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     e68:	4770      	bx	lr
     e6a:	bf00      	nop
     e6c:	e000e100 	.word	0xe000e100

00000e70 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e70:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     e72:	4a08      	ldr	r2, [pc, #32]	; (e94 <_init_chip+0x24>)
     e74:	8813      	ldrh	r3, [r2, #0]
     e76:	b29b      	uxth	r3, r3
     e78:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e7a:	4b07      	ldr	r3, [pc, #28]	; (e98 <_init_chip+0x28>)
     e7c:	4798      	blx	r3
	_oscctrl_init_sources();
     e7e:	4b07      	ldr	r3, [pc, #28]	; (e9c <_init_chip+0x2c>)
     e80:	4798      	blx	r3
	_mclk_init();
     e82:	4b07      	ldr	r3, [pc, #28]	; (ea0 <_init_chip+0x30>)
     e84:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e86:	4b07      	ldr	r3, [pc, #28]	; (ea4 <_init_chip+0x34>)
     e88:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e8a:	f640 70ff 	movw	r0, #4095	; 0xfff
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <_init_chip+0x38>)
     e90:	4798      	blx	r3
     e92:	bd08      	pop	{r3, pc}
     e94:	41004000 	.word	0x41004000
     e98:	000010c5 	.word	0x000010c5
     e9c:	000010d9 	.word	0x000010d9
     ea0:	000010b9 	.word	0x000010b9
     ea4:	000010f5 	.word	0x000010f5
     ea8:	00001095 	.word	0x00001095

00000eac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
     eac:	b530      	push	{r4, r5, lr}
     eae:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
     eb0:	4b27      	ldr	r3, [pc, #156]	; (f50 <_ext_irq_handler+0xa4>)
     eb2:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     eb4:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     eb6:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
     eb8:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
     eba:	4b26      	ldr	r3, [pc, #152]	; (f54 <_ext_irq_handler+0xa8>)
     ebc:	6818      	ldr	r0, [r3, #0]
     ebe:	22e8      	movs	r2, #232	; 0xe8
     ec0:	4925      	ldr	r1, [pc, #148]	; (f58 <_ext_irq_handler+0xac>)
     ec2:	3000      	adds	r0, #0
     ec4:	bf18      	it	ne
     ec6:	2001      	movne	r0, #1
     ec8:	4b24      	ldr	r3, [pc, #144]	; (f5c <_ext_irq_handler+0xb0>)
     eca:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     ecc:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
     ed0:	e030      	b.n	f34 <_ext_irq_handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     ed2:	3b01      	subs	r3, #1
     ed4:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
     ed6:	4281      	cmp	r1, r0
     ed8:	d80c      	bhi.n	ef4 <_ext_irq_handler+0x48>
				middle = (upper + lower) >> 1;
     eda:	1843      	adds	r3, r0, r1
     edc:	f3c3 0347 	ubfx	r3, r3, #1, #8
				if (_map[middle].extint == pos) {
     ee0:	4a1f      	ldr	r2, [pc, #124]	; (f60 <_ext_irq_handler+0xb4>)
     ee2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
     ee6:	42a2      	cmp	r2, r4
     ee8:	d003      	beq.n	ef2 <_ext_irq_handler+0x46>
				if (_map[middle].extint < pos) {
     eea:	daf2      	bge.n	ed2 <_ext_irq_handler+0x26>
					lower = middle + 1;
     eec:	3301      	adds	r3, #1
     eee:	b2d9      	uxtb	r1, r3
     ef0:	e7f1      	b.n	ed6 <_ext_irq_handler+0x2a>
					pin = _map[middle].pin;
     ef2:	2520      	movs	r5, #32
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     ef4:	f1b5 3fff 	cmp.w	r5, #4294967295
     ef8:	d003      	beq.n	f02 <_ext_irq_handler+0x56>
				callback(pin);
     efa:	4b16      	ldr	r3, [pc, #88]	; (f54 <_ext_irq_handler+0xa8>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	4628      	mov	r0, r5
     f00:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     f02:	2301      	movs	r3, #1
     f04:	40a3      	lsls	r3, r4
     f06:	9c01      	ldr	r4, [sp, #4]
     f08:	ea24 0403 	bic.w	r4, r4, r3
     f0c:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
     f0e:	9b01      	ldr	r3, [sp, #4]
     f10:	fa93 f4a3 	rbit	r4, r3
     f14:	fab4 f484 	clz	r4, r4
     f18:	b90b      	cbnz	r3, f1e <_ext_irq_handler+0x72>
     f1a:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
     f1e:	f1b4 3fff 	cmp.w	r4, #4294967295
     f22:	d002      	beq.n	f2a <_ext_irq_handler+0x7e>
     f24:	2001      	movs	r0, #1
     f26:	2100      	movs	r1, #0
     f28:	e7d5      	b.n	ed6 <_ext_irq_handler+0x2a>
	return ((Eic *)hw)->INTFLAG.reg;
     f2a:	4b09      	ldr	r3, [pc, #36]	; (f50 <_ext_irq_handler+0xa4>)
     f2c:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
     f2e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     f30:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     f32:	615a      	str	r2, [r3, #20]
	while (flags) {
     f34:	9b01      	ldr	r3, [sp, #4]
     f36:	b14b      	cbz	r3, f4c <_ext_irq_handler+0xa0>
		pos = ffs(flags) - 1;
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	fa93 f4a3 	rbit	r4, r3
     f3e:	fab4 f484 	clz	r4, r4
     f42:	2b00      	cmp	r3, #0
     f44:	d1eb      	bne.n	f1e <_ext_irq_handler+0x72>
     f46:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
     f4a:	e7e8      	b.n	f1e <_ext_irq_handler+0x72>
	}
}
     f4c:	b003      	add	sp, #12
     f4e:	bd30      	pop	{r4, r5, pc}
     f50:	40002800 	.word	0x40002800
     f54:	200000ec 	.word	0x200000ec
     f58:	0000341c 	.word	0x0000341c
     f5c:	00000ce1 	.word	0x00000ce1
     f60:	00003414 	.word	0x00003414

00000f64 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     f64:	4b2c      	ldr	r3, [pc, #176]	; (1018 <_ext_irq_init+0xb4>)
     f66:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     f68:	f013 0f01 	tst.w	r3, #1
     f6c:	d120      	bne.n	fb0 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     f6e:	4b2a      	ldr	r3, [pc, #168]	; (1018 <_ext_irq_init+0xb4>)
     f70:	685b      	ldr	r3, [r3, #4]
     f72:	f013 0f03 	tst.w	r3, #3
     f76:	d1fa      	bne.n	f6e <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     f78:	4b27      	ldr	r3, [pc, #156]	; (1018 <_ext_irq_init+0xb4>)
     f7a:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     f7c:	f013 0f02 	tst.w	r3, #2
     f80:	d00e      	beq.n	fa0 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     f82:	4a25      	ldr	r2, [pc, #148]	; (1018 <_ext_irq_init+0xb4>)
     f84:	7813      	ldrb	r3, [r2, #0]
     f86:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     f8a:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     f8c:	4b22      	ldr	r3, [pc, #136]	; (1018 <_ext_irq_init+0xb4>)
     f8e:	685b      	ldr	r3, [r3, #4]
     f90:	f013 0f03 	tst.w	r3, #3
     f94:	d1fa      	bne.n	f8c <_ext_irq_init+0x28>
     f96:	4b20      	ldr	r3, [pc, #128]	; (1018 <_ext_irq_init+0xb4>)
     f98:	685b      	ldr	r3, [r3, #4]
     f9a:	f013 0f02 	tst.w	r3, #2
     f9e:	d1fa      	bne.n	f96 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     fa0:	2201      	movs	r2, #1
     fa2:	4b1d      	ldr	r3, [pc, #116]	; (1018 <_ext_irq_init+0xb4>)
     fa4:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fa6:	4b1c      	ldr	r3, [pc, #112]	; (1018 <_ext_irq_init+0xb4>)
     fa8:	685b      	ldr	r3, [r3, #4]
     faa:	f013 0f03 	tst.w	r3, #3
     fae:	d1fa      	bne.n	fa6 <_ext_irq_init+0x42>
     fb0:	4b19      	ldr	r3, [pc, #100]	; (1018 <_ext_irq_init+0xb4>)
     fb2:	685b      	ldr	r3, [r3, #4]
     fb4:	f013 0f01 	tst.w	r3, #1
     fb8:	d1fa      	bne.n	fb0 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
     fba:	4a17      	ldr	r2, [pc, #92]	; (1018 <_ext_irq_init+0xb4>)
     fbc:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     fbe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
     fc2:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fc4:	4b14      	ldr	r3, [pc, #80]	; (1018 <_ext_irq_init+0xb4>)
     fc6:	685b      	ldr	r3, [r3, #4]
     fc8:	f013 0f03 	tst.w	r3, #3
     fcc:	d1fa      	bne.n	fc4 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <_ext_irq_init+0xb4>)
     fd0:	2200      	movs	r2, #0
     fd2:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     fd4:	2101      	movs	r1, #1
     fd6:	6099      	str	r1, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     fd8:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     fda:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     fdc:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     fde:	210c      	movs	r1, #12
     fe0:	61d9      	str	r1, [r3, #28]
     fe2:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     fe4:	781a      	ldrb	r2, [r3, #0]
     fe6:	f042 0202 	orr.w	r2, r2, #2
     fea:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fec:	4b0a      	ldr	r3, [pc, #40]	; (1018 <_ext_irq_init+0xb4>)
     fee:	685b      	ldr	r3, [r3, #4]
     ff0:	f013 0f03 	tst.w	r3, #3
     ff4:	d1fa      	bne.n	fec <_ext_irq_init+0x88>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ff6:	4b09      	ldr	r3, [pc, #36]	; (101c <_ext_irq_init+0xb8>)
     ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1004:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1008:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    100c:	601a      	str	r2, [r3, #0]
	callback = cb;
    100e:	4b04      	ldr	r3, [pc, #16]	; (1020 <_ext_irq_init+0xbc>)
    1010:	6018      	str	r0, [r3, #0]
}
    1012:	2000      	movs	r0, #0
    1014:	4770      	bx	lr
    1016:	bf00      	nop
    1018:	40002800 	.word	0x40002800
    101c:	e000e100 	.word	0xe000e100
    1020:	200000ec 	.word	0x200000ec

00001024 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    1024:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1026:	4b01      	ldr	r3, [pc, #4]	; (102c <EIC_0_Handler+0x8>)
    1028:	4798      	blx	r3
    102a:	bd08      	pop	{r3, pc}
    102c:	00000ead 	.word	0x00000ead

00001030 <_event_system_init>:
 */
int32_t _event_system_init(void)
{
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1030:	2300      	movs	r3, #0
    1032:	e008      	b.n	1046 <_event_system_init+0x16>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1034:	4a15      	ldr	r2, [pc, #84]	; (108c <_event_system_init+0x5c>)
    1036:	5cd0      	ldrb	r0, [r2, r3]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1038:	f103 0148 	add.w	r1, r3, #72	; 0x48
    103c:	4a14      	ldr	r2, [pc, #80]	; (1090 <_event_system_init+0x60>)
    103e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1042:	3301      	adds	r3, #1
    1044:	b2db      	uxtb	r3, r3
    1046:	2b42      	cmp	r3, #66	; 0x42
    1048:	d9f4      	bls.n	1034 <_event_system_init+0x4>
    104a:	2300      	movs	r3, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    104c:	2b1f      	cmp	r3, #31
    104e:	d81b      	bhi.n	1088 <_event_system_init+0x58>
{
    1050:	b410      	push	{r4}
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1052:	4a0e      	ldr	r2, [pc, #56]	; (108c <_event_system_init+0x5c>)
    1054:	eb02 0143 	add.w	r1, r2, r3, lsl #1
    1058:	f8b1 4044 	ldrh.w	r4, [r1, #68]	; 0x44

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    105c:	490c      	ldr	r1, [pc, #48]	; (1090 <_event_system_init+0x60>)
    105e:	1d18      	adds	r0, r3, #4
    1060:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1064:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1068:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    106c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    1070:	714a      	strb	r2, [r1, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1072:	43d2      	mvns	r2, r2
    1074:	b2d2      	uxtb	r2, r2
    1076:	710a      	strb	r2, [r1, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1078:	3301      	adds	r3, #1
    107a:	b2db      	uxtb	r3, r3
    107c:	2b1f      	cmp	r3, #31
    107e:	d9e8      	bls.n	1052 <_event_system_init+0x22>
	}

	return ERR_NONE;
}
    1080:	2000      	movs	r0, #0
    1082:	f85d 4b04 	ldr.w	r4, [sp], #4
    1086:	4770      	bx	lr
    1088:	2000      	movs	r0, #0
    108a:	4770      	bx	lr
    108c:	00003434 	.word	0x00003434
    1090:	4100e000 	.word	0x4100e000

00001094 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1094:	f010 0f01 	tst.w	r0, #1
    1098:	d008      	beq.n	10ac <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    109a:	4a05      	ldr	r2, [pc, #20]	; (10b0 <_gclk_init_generators_by_fref+0x1c>)
    109c:	4b05      	ldr	r3, [pc, #20]	; (10b4 <_gclk_init_generators_by_fref+0x20>)
    109e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10a0:	4b04      	ldr	r3, [pc, #16]	; (10b4 <_gclk_init_generators_by_fref+0x20>)
    10a2:	685a      	ldr	r2, [r3, #4]
    10a4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    10a8:	421a      	tst	r2, r3
    10aa:	d1f9      	bne.n	10a0 <_gclk_init_generators_by_fref+0xc>
    10ac:	4770      	bx	lr
    10ae:	bf00      	nop
    10b0:	00010101 	.word	0x00010101
    10b4:	40001c00 	.word	0x40001c00

000010b8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10b8:	2201      	movs	r2, #1
    10ba:	4b01      	ldr	r3, [pc, #4]	; (10c0 <_mclk_init+0x8>)
    10bc:	715a      	strb	r2, [r3, #5]
    10be:	4770      	bx	lr
    10c0:	40000800 	.word	0x40000800

000010c4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10c4:	4b03      	ldr	r3, [pc, #12]	; (10d4 <_osc32kctrl_init_sources+0x10>)
    10c6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10c8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    10cc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    10ce:	2201      	movs	r2, #1
    10d0:	741a      	strb	r2, [r3, #16]
    10d2:	4770      	bx	lr
    10d4:	40001400 	.word	0x40001400

000010d8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    10d8:	4a04      	ldr	r2, [pc, #16]	; (10ec <_oscctrl_init_sources+0x14>)
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <_oscctrl_init_sources+0x18>)
    10dc:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    10de:	4b04      	ldr	r3, [pc, #16]	; (10f0 <_oscctrl_init_sources+0x18>)
    10e0:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    10e2:	f013 0f02 	tst.w	r3, #2
    10e6:	d0fa      	beq.n	10de <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    10e8:	4770      	bx	lr
    10ea:	bf00      	nop
    10ec:	03002606 	.word	0x03002606
    10f0:	40001000 	.word	0x40001000

000010f4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    10f4:	4770      	bx	lr
	...

000010f8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    10f8:	b500      	push	{lr}
    10fa:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    10fc:	4b0d      	ldr	r3, [pc, #52]	; (1134 <RAMECC_Handler+0x3c>)
    10fe:	789b      	ldrb	r3, [r3, #2]
    1100:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1102:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1104:	9b01      	ldr	r3, [sp, #4]
    1106:	f013 0f02 	tst.w	r3, #2
    110a:	d006      	beq.n	111a <RAMECC_Handler+0x22>
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <RAMECC_Handler+0x40>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	b11b      	cbz	r3, 111a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1112:	4a08      	ldr	r2, [pc, #32]	; (1134 <RAMECC_Handler+0x3c>)
    1114:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1116:	4798      	blx	r3
    1118:	e009      	b.n	112e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    111a:	9b01      	ldr	r3, [sp, #4]
    111c:	f013 0f01 	tst.w	r3, #1
    1120:	d005      	beq.n	112e <RAMECC_Handler+0x36>
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <RAMECC_Handler+0x40>)
    1124:	685b      	ldr	r3, [r3, #4]
    1126:	b113      	cbz	r3, 112e <RAMECC_Handler+0x36>
    1128:	4a02      	ldr	r2, [pc, #8]	; (1134 <RAMECC_Handler+0x3c>)
    112a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    112c:	4798      	blx	r3
	} else {
		return;
	}
}
    112e:	b003      	add	sp, #12
    1130:	f85d fb04 	ldr.w	pc, [sp], #4
    1134:	41020000 	.word	0x41020000
    1138:	20000224 	.word	0x20000224

0000113c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    113c:	b470      	push	{r4, r5, r6}
    113e:	b089      	sub	sp, #36	; 0x24
    1140:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1142:	466c      	mov	r4, sp
    1144:	4d0c      	ldr	r5, [pc, #48]	; (1178 <_sercom_get_hardware_index+0x3c>)
    1146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    114a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    114e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1152:	2000      	movs	r0, #0
    1154:	2807      	cmp	r0, #7
    1156:	d80a      	bhi.n	116e <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1158:	ab08      	add	r3, sp, #32
    115a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    115e:	f853 3c20 	ldr.w	r3, [r3, #-32]
    1162:	42b3      	cmp	r3, r6
    1164:	d001      	beq.n	116a <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1166:	3001      	adds	r0, #1
    1168:	e7f4      	b.n	1154 <_sercom_get_hardware_index+0x18>
			return i;
    116a:	b2c0      	uxtb	r0, r0
    116c:	e000      	b.n	1170 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    116e:	2000      	movs	r0, #0
}
    1170:	b009      	add	sp, #36	; 0x24
    1172:	bc70      	pop	{r4, r5, r6}
    1174:	4770      	bx	lr
    1176:	bf00      	nop
    1178:	00003538 	.word	0x00003538

0000117c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    117c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    117e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1180:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1182:	f013 0f01 	tst.w	r3, #1
    1186:	d003      	beq.n	1190 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1188:	7da3      	ldrb	r3, [r4, #22]
    118a:	f013 0f01 	tst.w	r3, #1
    118e:	d112      	bne.n	11b6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1190:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1192:	f013 0f02 	tst.w	r3, #2
    1196:	d003      	beq.n	11a0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1198:	7da3      	ldrb	r3, [r4, #22]
    119a:	f013 0f02 	tst.w	r3, #2
    119e:	d10f      	bne.n	11c0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    11a0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    11a2:	f013 0f04 	tst.w	r3, #4
    11a6:	d015      	beq.n	11d4 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    11a8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    11aa:	f003 0337 	and.w	r3, r3, #55	; 0x37
    11ae:	b163      	cbz	r3, 11ca <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    11b0:	23ff      	movs	r3, #255	; 0xff
    11b2:	8363      	strh	r3, [r4, #26]
    11b4:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    11b6:	2301      	movs	r3, #1
    11b8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    11ba:	6803      	ldr	r3, [r0, #0]
    11bc:	4798      	blx	r3
    11be:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    11c0:	2302      	movs	r3, #2
    11c2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    11c4:	6883      	ldr	r3, [r0, #8]
    11c6:	4798      	blx	r3
    11c8:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    11ca:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    11cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    11ce:	b2c9      	uxtb	r1, r1
    11d0:	4798      	blx	r3
    11d2:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    11d4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    11d6:	09db      	lsrs	r3, r3, #7
    11d8:	d100      	bne.n	11dc <_sercom_usart_interrupt_handler+0x60>
    11da:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    11dc:	2380      	movs	r3, #128	; 0x80
    11de:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    11e0:	68c3      	ldr	r3, [r0, #12]
    11e2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    11e4:	8b63      	ldrh	r3, [r4, #26]
    11e6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    11e8:	8363      	strh	r3, [r4, #26]
    11ea:	e7f6      	b.n	11da <_sercom_usart_interrupt_handler+0x5e>

000011ec <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM2) {
    11ec:	4b03      	ldr	r3, [pc, #12]	; (11fc <_sercom_init_irq_param+0x10>)
    11ee:	4298      	cmp	r0, r3
    11f0:	d000      	beq.n	11f4 <_sercom_init_irq_param+0x8>
    11f2:	4770      	bx	lr
		_sercom2_dev = (struct _usart_async_device *)dev;
    11f4:	4b02      	ldr	r3, [pc, #8]	; (1200 <_sercom_init_irq_param+0x14>)
    11f6:	6019      	str	r1, [r3, #0]
	}
}
    11f8:	e7fb      	b.n	11f2 <_sercom_init_irq_param+0x6>
    11fa:	bf00      	nop
    11fc:	41012000 	.word	0x41012000
    1200:	200000f0 	.word	0x200000f0

00001204 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1204:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1206:	4b04      	ldr	r3, [pc, #16]	; (1218 <_sercom_get_irq_num+0x14>)
    1208:	4798      	blx	r3
    120a:	0080      	lsls	r0, r0, #2
    120c:	b2c0      	uxtb	r0, r0
    120e:	302e      	adds	r0, #46	; 0x2e
}
    1210:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1214:	bd08      	pop	{r3, pc}
    1216:	bf00      	nop
    1218:	0000113d 	.word	0x0000113d

0000121c <_get_sercom_index>:
{
    121c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    121e:	4b0c      	ldr	r3, [pc, #48]	; (1250 <_get_sercom_index+0x34>)
    1220:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1222:	2300      	movs	r3, #0
    1224:	b143      	cbz	r3, 1238 <_get_sercom_index+0x1c>
	ASSERT(false);
    1226:	f240 226b 	movw	r2, #619	; 0x26b
    122a:	490a      	ldr	r1, [pc, #40]	; (1254 <_get_sercom_index+0x38>)
    122c:	2000      	movs	r0, #0
    122e:	4b0a      	ldr	r3, [pc, #40]	; (1258 <_get_sercom_index+0x3c>)
    1230:	4798      	blx	r3
	return 0;
    1232:	2300      	movs	r3, #0
}
    1234:	4618      	mov	r0, r3
    1236:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    1238:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    123c:	00d1      	lsls	r1, r2, #3
    123e:	4a07      	ldr	r2, [pc, #28]	; (125c <_get_sercom_index+0x40>)
    1240:	440a      	add	r2, r1
    1242:	f892 2020 	ldrb.w	r2, [r2, #32]
    1246:	4290      	cmp	r0, r2
    1248:	d0f4      	beq.n	1234 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    124a:	3301      	adds	r3, #1
    124c:	b2db      	uxtb	r3, r3
    124e:	e7e9      	b.n	1224 <_get_sercom_index+0x8>
    1250:	0000113d 	.word	0x0000113d
    1254:	000035ac 	.word	0x000035ac
    1258:	00000ce1 	.word	0x00000ce1
    125c:	00003538 	.word	0x00003538

00001260 <_usart_init>:
{
    1260:	b538      	push	{r3, r4, r5, lr}
    1262:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1264:	4b3c      	ldr	r3, [pc, #240]	; (1358 <_usart_init+0xf8>)
    1266:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1268:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    126a:	f013 0f01 	tst.w	r3, #1
    126e:	d122      	bne.n	12b6 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1270:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1274:	00da      	lsls	r2, r3, #3
    1276:	4b39      	ldr	r3, [pc, #228]	; (135c <_usart_init+0xfc>)
    1278:	4413      	add	r3, r2
    127a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    127c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1280:	69e3      	ldr	r3, [r4, #28]
    1282:	f013 0f03 	tst.w	r3, #3
    1286:	d1fb      	bne.n	1280 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1288:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    128a:	f013 0f02 	tst.w	r3, #2
    128e:	d00b      	beq.n	12a8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1290:	6823      	ldr	r3, [r4, #0]
    1292:	f023 0302 	bic.w	r3, r3, #2
    1296:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1298:	69e3      	ldr	r3, [r4, #28]
    129a:	f013 0f03 	tst.w	r3, #3
    129e:	d1fb      	bne.n	1298 <_usart_init+0x38>
    12a0:	69e3      	ldr	r3, [r4, #28]
    12a2:	f013 0f02 	tst.w	r3, #2
    12a6:	d1fb      	bne.n	12a0 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    12a8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12ac:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12ae:	69e3      	ldr	r3, [r4, #28]
    12b0:	f013 0f03 	tst.w	r3, #3
    12b4:	d1fb      	bne.n	12ae <_usart_init+0x4e>
    12b6:	69e3      	ldr	r3, [r4, #28]
    12b8:	f013 0f01 	tst.w	r3, #1
    12bc:	d1fb      	bne.n	12b6 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    12be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12c2:	00da      	lsls	r2, r3, #3
    12c4:	4b25      	ldr	r3, [pc, #148]	; (135c <_usart_init+0xfc>)
    12c6:	4413      	add	r3, r2
    12c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12ca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12cc:	69e3      	ldr	r3, [r4, #28]
    12ce:	f013 0f03 	tst.w	r3, #3
    12d2:	d1fb      	bne.n	12cc <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    12d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12d8:	00da      	lsls	r2, r3, #3
    12da:	4b20      	ldr	r3, [pc, #128]	; (135c <_usart_init+0xfc>)
    12dc:	4413      	add	r3, r2
    12de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    12e0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12e2:	69e3      	ldr	r3, [r4, #28]
    12e4:	f013 0f1f 	tst.w	r3, #31
    12e8:	d1fb      	bne.n	12e2 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    12ea:	0042      	lsls	r2, r0, #1
    12ec:	4402      	add	r2, r0
    12ee:	00d1      	lsls	r1, r2, #3
    12f0:	4b1a      	ldr	r3, [pc, #104]	; (135c <_usart_init+0xfc>)
    12f2:	440b      	add	r3, r1
    12f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    12f6:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    12f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    12fe:	d10a      	bne.n	1316 <_usart_init+0xb6>
    1300:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    1304:	d107      	bne.n	1316 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1306:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    130a:	00da      	lsls	r2, r3, #3
    130c:	4b13      	ldr	r3, [pc, #76]	; (135c <_usart_init+0xfc>)
    130e:	4413      	add	r3, r2
    1310:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    1312:	81a3      	strh	r3, [r4, #12]
    1314:	e00f      	b.n	1336 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1316:	0042      	lsls	r2, r0, #1
    1318:	4402      	add	r2, r0
    131a:	00d1      	lsls	r1, r2, #3
    131c:	4b0f      	ldr	r3, [pc, #60]	; (135c <_usart_init+0xfc>)
    131e:	440b      	add	r3, r1
    1320:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    1322:	89a2      	ldrh	r2, [r4, #12]
    1324:	f361 020c 	bfi	r2, r1, #0, #13
    1328:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    132a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    132e:	89a3      	ldrh	r3, [r4, #12]
    1330:	f362 334f 	bfi	r3, r2, #13, #3
    1334:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1336:	4a09      	ldr	r2, [pc, #36]	; (135c <_usart_init+0xfc>)
    1338:	0043      	lsls	r3, r0, #1
    133a:	181d      	adds	r5, r3, r0
    133c:	00e9      	lsls	r1, r5, #3
    133e:	460d      	mov	r5, r1
    1340:	4411      	add	r1, r2
    1342:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    1346:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1348:	442a      	add	r2, r5
    134a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    134e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    1352:	2000      	movs	r0, #0
    1354:	bd38      	pop	{r3, r4, r5, pc}
    1356:	bf00      	nop
    1358:	0000121d 	.word	0x0000121d
    135c:	00003538 	.word	0x00003538

00001360 <_usart_async_init>:
{
    1360:	b570      	push	{r4, r5, r6, lr}
    1362:	460c      	mov	r4, r1
	ASSERT(device);
    1364:	4606      	mov	r6, r0
    1366:	22cb      	movs	r2, #203	; 0xcb
    1368:	4918      	ldr	r1, [pc, #96]	; (13cc <_usart_async_init+0x6c>)
    136a:	3000      	adds	r0, #0
    136c:	bf18      	it	ne
    136e:	2001      	movne	r0, #1
    1370:	4b17      	ldr	r3, [pc, #92]	; (13d0 <_usart_async_init+0x70>)
    1372:	4798      	blx	r3
	init_status = _usart_init(hw);
    1374:	4620      	mov	r0, r4
    1376:	4b17      	ldr	r3, [pc, #92]	; (13d4 <_usart_async_init+0x74>)
    1378:	4798      	blx	r3
	if (init_status) {
    137a:	4605      	mov	r5, r0
    137c:	b108      	cbz	r0, 1382 <_usart_async_init+0x22>
}
    137e:	4628      	mov	r0, r5
    1380:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1382:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1384:	4631      	mov	r1, r6
    1386:	4620      	mov	r0, r4
    1388:	4b13      	ldr	r3, [pc, #76]	; (13d8 <_usart_async_init+0x78>)
    138a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    138c:	4620      	mov	r0, r4
    138e:	4b13      	ldr	r3, [pc, #76]	; (13dc <_usart_async_init+0x7c>)
    1390:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    1392:	2400      	movs	r4, #0
    1394:	e016      	b.n	13c4 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1396:	0941      	lsrs	r1, r0, #5
    1398:	f000 021f 	and.w	r2, r0, #31
    139c:	2301      	movs	r3, #1
    139e:	4093      	lsls	r3, r2
    13a0:	4a0f      	ldr	r2, [pc, #60]	; (13e0 <_usart_async_init+0x80>)
    13a2:	f101 0620 	add.w	r6, r1, #32
    13a6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    13aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13ae:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13b2:	f101 0660 	add.w	r6, r1, #96	; 0x60
    13b6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    13be:	3001      	adds	r0, #1
    13c0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    13c2:	3401      	adds	r4, #1
    13c4:	2c03      	cmp	r4, #3
    13c6:	d9e6      	bls.n	1396 <_usart_async_init+0x36>
    13c8:	e7d9      	b.n	137e <_usart_async_init+0x1e>
    13ca:	bf00      	nop
    13cc:	000035ac 	.word	0x000035ac
    13d0:	00000ce1 	.word	0x00000ce1
    13d4:	00001261 	.word	0x00001261
    13d8:	000011ed 	.word	0x000011ed
    13dc:	00001205 	.word	0x00001205
    13e0:	e000e100 	.word	0xe000e100

000013e4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    13e4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13e6:	6813      	ldr	r3, [r2, #0]
    13e8:	f043 0302 	orr.w	r3, r3, #2
    13ec:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ee:	69d3      	ldr	r3, [r2, #28]
    13f0:	f013 0f03 	tst.w	r3, #3
    13f4:	d1fb      	bne.n	13ee <_usart_async_enable+0xa>
}
    13f6:	4770      	bx	lr

000013f8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    13f8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    13fa:	6299      	str	r1, [r3, #40]	; 0x28
    13fc:	4770      	bx	lr

000013fe <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    13fe:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1400:	2201      	movs	r2, #1
    1402:	759a      	strb	r2, [r3, #22]
    1404:	4770      	bx	lr

00001406 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1406:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1408:	2202      	movs	r2, #2
    140a:	759a      	strb	r2, [r3, #22]
    140c:	4770      	bx	lr
	...

00001410 <_usart_async_set_irq_state>:
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	460c      	mov	r4, r1
    1414:	4615      	mov	r5, r2
	ASSERT(device);
    1416:	4606      	mov	r6, r0
    1418:	f240 222b 	movw	r2, #555	; 0x22b
    141c:	4916      	ldr	r1, [pc, #88]	; (1478 <_usart_async_set_irq_state+0x68>)
    141e:	3000      	adds	r0, #0
    1420:	bf18      	it	ne
    1422:	2001      	movne	r0, #1
    1424:	4b15      	ldr	r3, [pc, #84]	; (147c <_usart_async_set_irq_state+0x6c>)
    1426:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1428:	b134      	cbz	r4, 1438 <_usart_async_set_irq_state+0x28>
    142a:	2c02      	cmp	r4, #2
    142c:	d004      	beq.n	1438 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_RX_DONE == type) {
    142e:	2c01      	cmp	r4, #1
    1430:	d011      	beq.n	1456 <_usart_async_set_irq_state+0x46>
	} else if (USART_ASYNC_ERROR == type) {
    1432:	2c03      	cmp	r4, #3
    1434:	d017      	beq.n	1466 <_usart_async_set_irq_state+0x56>
    1436:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1438:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
    143a:	b935      	cbnz	r5, 144a <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    143c:	2201      	movs	r2, #1
    143e:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1440:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
    1442:	b92d      	cbnz	r5, 1450 <_usart_async_set_irq_state+0x40>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1444:	2202      	movs	r2, #2
    1446:	751a      	strb	r2, [r3, #20]
    1448:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    144a:	2201      	movs	r2, #1
    144c:	759a      	strb	r2, [r3, #22]
    144e:	e7f7      	b.n	1440 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1450:	2202      	movs	r2, #2
    1452:	759a      	strb	r2, [r3, #22]
    1454:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1456:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
    1458:	b915      	cbnz	r5, 1460 <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    145a:	2204      	movs	r2, #4
    145c:	751a      	strb	r2, [r3, #20]
    145e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1460:	2204      	movs	r2, #4
    1462:	759a      	strb	r2, [r3, #22]
    1464:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1466:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
    1468:	b115      	cbz	r5, 1470 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    146a:	2280      	movs	r2, #128	; 0x80
    146c:	759a      	strb	r2, [r3, #22]
}
    146e:	e7e2      	b.n	1436 <_usart_async_set_irq_state+0x26>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1470:	2280      	movs	r2, #128	; 0x80
    1472:	751a      	strb	r2, [r3, #20]
    1474:	bd70      	pop	{r4, r5, r6, pc}
    1476:	bf00      	nop
    1478:	000035ac 	.word	0x000035ac
    147c:	00000ce1 	.word	0x00000ce1

00001480 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    1480:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1482:	4b02      	ldr	r3, [pc, #8]	; (148c <SERCOM2_0_Handler+0xc>)
    1484:	6818      	ldr	r0, [r3, #0]
    1486:	4b02      	ldr	r3, [pc, #8]	; (1490 <SERCOM2_0_Handler+0x10>)
    1488:	4798      	blx	r3
    148a:	bd08      	pop	{r3, pc}
    148c:	200000f0 	.word	0x200000f0
    1490:	0000117d 	.word	0x0000117d

00001494 <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    1494:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1496:	4b02      	ldr	r3, [pc, #8]	; (14a0 <SERCOM2_1_Handler+0xc>)
    1498:	6818      	ldr	r0, [r3, #0]
    149a:	4b02      	ldr	r3, [pc, #8]	; (14a4 <SERCOM2_1_Handler+0x10>)
    149c:	4798      	blx	r3
    149e:	bd08      	pop	{r3, pc}
    14a0:	200000f0 	.word	0x200000f0
    14a4:	0000117d 	.word	0x0000117d

000014a8 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    14a8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    14aa:	4b02      	ldr	r3, [pc, #8]	; (14b4 <SERCOM2_2_Handler+0xc>)
    14ac:	6818      	ldr	r0, [r3, #0]
    14ae:	4b02      	ldr	r3, [pc, #8]	; (14b8 <SERCOM2_2_Handler+0x10>)
    14b0:	4798      	blx	r3
    14b2:	bd08      	pop	{r3, pc}
    14b4:	200000f0 	.word	0x200000f0
    14b8:	0000117d 	.word	0x0000117d

000014bc <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    14bc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    14be:	4b02      	ldr	r3, [pc, #8]	; (14c8 <SERCOM2_3_Handler+0xc>)
    14c0:	6818      	ldr	r0, [r3, #0]
    14c2:	4b02      	ldr	r3, [pc, #8]	; (14cc <SERCOM2_3_Handler+0x10>)
    14c4:	4798      	blx	r3
    14c6:	bd08      	pop	{r3, pc}
    14c8:	200000f0 	.word	0x200000f0
    14cc:	0000117d 	.word	0x0000117d

000014d0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    14d0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    14d2:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    14d4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    14d6:	f012 0f01 	tst.w	r2, #1
    14da:	d100      	bne.n	14de <tc_interrupt_handler+0xe>
    14dc:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    14de:	2201      	movs	r2, #1
    14e0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    14e2:	6803      	ldr	r3, [r0, #0]
    14e4:	4798      	blx	r3
	}
}
    14e6:	e7f9      	b.n	14dc <tc_interrupt_handler+0xc>

000014e8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	4605      	mov	r5, r0
	void *const hw = device->hw;
    14ec:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    14ee:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    14f0:	f013 0f01 	tst.w	r3, #1
    14f4:	d004      	beq.n	1500 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    14f6:	2301      	movs	r3, #1
    14f8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    14fa:	6803      	ldr	r3, [r0, #0]
    14fc:	b103      	cbz	r3, 1500 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    14fe:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1500:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1502:	f013 0f02 	tst.w	r3, #2
    1506:	d005      	beq.n	1514 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1508:	2302      	movs	r3, #2
    150a:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    150c:	686b      	ldr	r3, [r5, #4]
    150e:	b10b      	cbz	r3, 1514 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1510:	4628      	mov	r0, r5
    1512:	4798      	blx	r3
    1514:	bd38      	pop	{r3, r4, r5, pc}
	...

00001518 <_tc_init_irq_param>:
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    1518:	4b09      	ldr	r3, [pc, #36]	; (1540 <_tc_init_irq_param+0x28>)
    151a:	4298      	cmp	r0, r3
    151c:	d006      	beq.n	152c <_tc_init_irq_param+0x14>
		_tc1_dev = (struct _timer_device *)dev;
	}
	if (hw == TC2) {
    151e:	4b09      	ldr	r3, [pc, #36]	; (1544 <_tc_init_irq_param+0x2c>)
    1520:	4298      	cmp	r0, r3
    1522:	d006      	beq.n	1532 <_tc_init_irq_param+0x1a>
		_tc2_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    1524:	4b08      	ldr	r3, [pc, #32]	; (1548 <_tc_init_irq_param+0x30>)
    1526:	4298      	cmp	r0, r3
    1528:	d006      	beq.n	1538 <_tc_init_irq_param+0x20>
    152a:	4770      	bx	lr
		_tc1_dev = (struct _timer_device *)dev;
    152c:	4b07      	ldr	r3, [pc, #28]	; (154c <_tc_init_irq_param+0x34>)
    152e:	6019      	str	r1, [r3, #0]
    1530:	e7f5      	b.n	151e <_tc_init_irq_param+0x6>
		_tc2_dev = (struct _timer_device *)dev;
    1532:	4b06      	ldr	r3, [pc, #24]	; (154c <_tc_init_irq_param+0x34>)
    1534:	6059      	str	r1, [r3, #4]
    1536:	e7f5      	b.n	1524 <_tc_init_irq_param+0xc>
		_tc4_dev = (struct _pwm_device *)dev;
    1538:	4b04      	ldr	r3, [pc, #16]	; (154c <_tc_init_irq_param+0x34>)
    153a:	6099      	str	r1, [r3, #8]
	}
}
    153c:	e7f5      	b.n	152a <_tc_init_irq_param+0x12>
    153e:	bf00      	nop
    1540:	40003c00 	.word	0x40003c00
    1544:	4101a000 	.word	0x4101a000
    1548:	42001400 	.word	0x42001400
    154c:	200000f4 	.word	0x200000f4

00001550 <get_tc_index>:
{
    1550:	b570      	push	{r4, r5, r6, lr}
    1552:	b088      	sub	sp, #32
    1554:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1556:	466c      	mov	r4, sp
    1558:	4d17      	ldr	r5, [pc, #92]	; (15b8 <get_tc_index+0x68>)
    155a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    155c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    155e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1566:	2300      	movs	r3, #0
    1568:	2b07      	cmp	r3, #7
    156a:	d80a      	bhi.n	1582 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    156c:	aa08      	add	r2, sp, #32
    156e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1572:	f852 2c20 	ldr.w	r2, [r2, #-32]
    1576:	42b2      	cmp	r2, r6
    1578:	d001      	beq.n	157e <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    157a:	3301      	adds	r3, #1
    157c:	e7f4      	b.n	1568 <get_tc_index+0x18>
			return i;
    157e:	b2db      	uxtb	r3, r3
    1580:	e000      	b.n	1584 <get_tc_index+0x34>
		}
	}
	return 0;
    1582:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1584:	2000      	movs	r0, #0
    1586:	2802      	cmp	r0, #2
    1588:	d80b      	bhi.n	15a2 <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    158a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    158e:	008a      	lsls	r2, r1, #2
    1590:	490a      	ldr	r1, [pc, #40]	; (15bc <get_tc_index+0x6c>)
    1592:	5c8a      	ldrb	r2, [r1, r2]
    1594:	429a      	cmp	r2, r3
    1596:	d002      	beq.n	159e <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1598:	3001      	adds	r0, #1
    159a:	b2c0      	uxtb	r0, r0
    159c:	e7f3      	b.n	1586 <get_tc_index+0x36>
			return i;
    159e:	b240      	sxtb	r0, r0
    15a0:	e007      	b.n	15b2 <get_tc_index+0x62>
	ASSERT(false);
    15a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    15a6:	4906      	ldr	r1, [pc, #24]	; (15c0 <get_tc_index+0x70>)
    15a8:	2000      	movs	r0, #0
    15aa:	4b06      	ldr	r3, [pc, #24]	; (15c4 <get_tc_index+0x74>)
    15ac:	4798      	blx	r3
	return -1;
    15ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    15b2:	b008      	add	sp, #32
    15b4:	bd70      	pop	{r4, r5, r6, pc}
    15b6:	bf00      	nop
    15b8:	000035c8 	.word	0x000035c8
    15bc:	20000000 	.word	0x20000000
    15c0:	000035e8 	.word	0x000035e8
    15c4:	00000ce1 	.word	0x00000ce1

000015c8 <_timer_init>:
{
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	4606      	mov	r6, r0
    15cc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    15ce:	4608      	mov	r0, r1
    15d0:	4b6c      	ldr	r3, [pc, #432]	; (1784 <_timer_init+0x1bc>)
    15d2:	4798      	blx	r3
    15d4:	4605      	mov	r5, r0
	device->hw = hw;
    15d6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    15d8:	2293      	movs	r2, #147	; 0x93
    15da:	496b      	ldr	r1, [pc, #428]	; (1788 <_timer_init+0x1c0>)
    15dc:	2001      	movs	r0, #1
    15de:	4b6b      	ldr	r3, [pc, #428]	; (178c <_timer_init+0x1c4>)
    15e0:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    15e2:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    15e4:	f013 0f01 	tst.w	r3, #1
    15e8:	d119      	bne.n	161e <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    15ea:	6923      	ldr	r3, [r4, #16]
    15ec:	f013 0f03 	tst.w	r3, #3
    15f0:	d1fb      	bne.n	15ea <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    15f2:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    15f4:	f013 0f02 	tst.w	r3, #2
    15f8:	d00b      	beq.n	1612 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    15fa:	6823      	ldr	r3, [r4, #0]
    15fc:	f023 0302 	bic.w	r3, r3, #2
    1600:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1602:	6923      	ldr	r3, [r4, #16]
    1604:	f013 0f03 	tst.w	r3, #3
    1608:	d1fb      	bne.n	1602 <_timer_init+0x3a>
    160a:	6923      	ldr	r3, [r4, #16]
    160c:	f013 0f02 	tst.w	r3, #2
    1610:	d1fb      	bne.n	160a <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1612:	2301      	movs	r3, #1
    1614:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1616:	6923      	ldr	r3, [r4, #16]
    1618:	f013 0f03 	tst.w	r3, #3
    161c:	d1fb      	bne.n	1616 <_timer_init+0x4e>
    161e:	6923      	ldr	r3, [r4, #16]
    1620:	f013 0f01 	tst.w	r3, #1
    1624:	d1fb      	bne.n	161e <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1626:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    162a:	009a      	lsls	r2, r3, #2
    162c:	4b58      	ldr	r3, [pc, #352]	; (1790 <_timer_init+0x1c8>)
    162e:	4413      	add	r3, r2
    1630:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1632:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1634:	6923      	ldr	r3, [r4, #16]
    1636:	f013 0f03 	tst.w	r3, #3
    163a:	d1fb      	bne.n	1634 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    163c:	00aa      	lsls	r2, r5, #2
    163e:	442a      	add	r2, r5
    1640:	0091      	lsls	r1, r2, #2
    1642:	4b53      	ldr	r3, [pc, #332]	; (1790 <_timer_init+0x1c8>)
    1644:	440b      	add	r3, r1
    1646:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1648:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    164a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    164c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    164e:	2201      	movs	r2, #1
    1650:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1652:	685b      	ldr	r3, [r3, #4]
    1654:	f003 030c 	and.w	r3, r3, #12
    1658:	2b08      	cmp	r3, #8
    165a:	d05b      	beq.n	1714 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    165c:	2b00      	cmp	r3, #0
    165e:	d16d      	bne.n	173c <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1660:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1664:	009a      	lsls	r2, r3, #2
    1666:	4b4a      	ldr	r3, [pc, #296]	; (1790 <_timer_init+0x1c8>)
    1668:	4413      	add	r3, r2
    166a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    166c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    166e:	6923      	ldr	r3, [r4, #16]
    1670:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1674:	d1fb      	bne.n	166e <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1676:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    167a:	009a      	lsls	r2, r3, #2
    167c:	4b44      	ldr	r3, [pc, #272]	; (1790 <_timer_init+0x1c8>)
    167e:	4413      	add	r3, r2
    1680:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1682:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1684:	6923      	ldr	r3, [r4, #16]
    1686:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    168a:	d1fb      	bne.n	1684 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    168c:	2301      	movs	r3, #1
    168e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    1690:	4631      	mov	r1, r6
    1692:	4620      	mov	r0, r4
    1694:	4b3f      	ldr	r3, [pc, #252]	; (1794 <_timer_init+0x1cc>)
    1696:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1698:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    169c:	009a      	lsls	r2, r3, #2
    169e:	4b3c      	ldr	r3, [pc, #240]	; (1790 <_timer_init+0x1c8>)
    16a0:	4413      	add	r3, r2
    16a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    16a6:	2b00      	cmp	r3, #0
    16a8:	db0d      	blt.n	16c6 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16aa:	095a      	lsrs	r2, r3, #5
    16ac:	f003 031f 	and.w	r3, r3, #31
    16b0:	2101      	movs	r1, #1
    16b2:	fa01 f303 	lsl.w	r3, r1, r3
    16b6:	3220      	adds	r2, #32
    16b8:	4937      	ldr	r1, [pc, #220]	; (1798 <_timer_init+0x1d0>)
    16ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    16be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16c2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    16c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    16ca:	009a      	lsls	r2, r3, #2
    16cc:	4b30      	ldr	r3, [pc, #192]	; (1790 <_timer_init+0x1c8>)
    16ce:	4413      	add	r3, r2
    16d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    16d4:	2b00      	cmp	r3, #0
    16d6:	db09      	blt.n	16ec <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16d8:	095a      	lsrs	r2, r3, #5
    16da:	f003 031f 	and.w	r3, r3, #31
    16de:	2101      	movs	r1, #1
    16e0:	fa01 f303 	lsl.w	r3, r1, r3
    16e4:	3260      	adds	r2, #96	; 0x60
    16e6:	492c      	ldr	r1, [pc, #176]	; (1798 <_timer_init+0x1d0>)
    16e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    16ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    16f0:	00aa      	lsls	r2, r5, #2
    16f2:	4b27      	ldr	r3, [pc, #156]	; (1790 <_timer_init+0x1c8>)
    16f4:	4413      	add	r3, r2
    16f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    16fa:	2b00      	cmp	r3, #0
    16fc:	db08      	blt.n	1710 <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16fe:	0959      	lsrs	r1, r3, #5
    1700:	f003 031f 	and.w	r3, r3, #31
    1704:	2201      	movs	r2, #1
    1706:	fa02 f303 	lsl.w	r3, r2, r3
    170a:	4a23      	ldr	r2, [pc, #140]	; (1798 <_timer_init+0x1d0>)
    170c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1710:	2000      	movs	r0, #0
    1712:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1714:	4b1e      	ldr	r3, [pc, #120]	; (1790 <_timer_init+0x1c8>)
    1716:	440b      	add	r3, r1
    1718:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    171a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    171c:	6923      	ldr	r3, [r4, #16]
    171e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1722:	d1fb      	bne.n	171c <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1724:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1728:	009a      	lsls	r2, r3, #2
    172a:	4b19      	ldr	r3, [pc, #100]	; (1790 <_timer_init+0x1c8>)
    172c:	4413      	add	r3, r2
    172e:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1730:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1732:	6923      	ldr	r3, [r4, #16]
    1734:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1738:	d1fb      	bne.n	1732 <_timer_init+0x16a>
    173a:	e7a7      	b.n	168c <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    173c:	2b04      	cmp	r3, #4
    173e:	d1a5      	bne.n	168c <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1740:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1744:	009a      	lsls	r2, r3, #2
    1746:	4b12      	ldr	r3, [pc, #72]	; (1790 <_timer_init+0x1c8>)
    1748:	4413      	add	r3, r2
    174a:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    174c:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    174e:	6923      	ldr	r3, [r4, #16]
    1750:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1754:	d1fb      	bne.n	174e <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    1756:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    175a:	009a      	lsls	r2, r3, #2
    175c:	4b0c      	ldr	r3, [pc, #48]	; (1790 <_timer_init+0x1c8>)
    175e:	4413      	add	r3, r2
    1760:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1762:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1764:	6923      	ldr	r3, [r4, #16]
    1766:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    176a:	d1fb      	bne.n	1764 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    176c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1770:	009a      	lsls	r2, r3, #2
    1772:	4b07      	ldr	r3, [pc, #28]	; (1790 <_timer_init+0x1c8>)
    1774:	4413      	add	r3, r2
    1776:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1778:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    177a:	6923      	ldr	r3, [r4, #16]
    177c:	f013 0f20 	tst.w	r3, #32
    1780:	d1fb      	bne.n	177a <_timer_init+0x1b2>
    1782:	e783      	b.n	168c <_timer_init+0xc4>
    1784:	00001551 	.word	0x00001551
    1788:	000035e8 	.word	0x000035e8
    178c:	00000ce1 	.word	0x00000ce1
    1790:	20000000 	.word	0x20000000
    1794:	00001519 	.word	0x00001519
    1798:	e000e100 	.word	0xe000e100

0000179c <_pwm_init>:
{
    179c:	b570      	push	{r4, r5, r6, lr}
    179e:	4606      	mov	r6, r0
    17a0:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    17a2:	4608      	mov	r0, r1
    17a4:	4b59      	ldr	r3, [pc, #356]	; (190c <_pwm_init+0x170>)
    17a6:	4798      	blx	r3
    17a8:	4605      	mov	r5, r0
	device->hw = hw;
    17aa:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    17ac:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    17ae:	f013 0f01 	tst.w	r3, #1
    17b2:	d119      	bne.n	17e8 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    17b4:	6923      	ldr	r3, [r4, #16]
    17b6:	f013 0f03 	tst.w	r3, #3
    17ba:	d1fb      	bne.n	17b4 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    17bc:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    17be:	f013 0f02 	tst.w	r3, #2
    17c2:	d00b      	beq.n	17dc <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    17c4:	6823      	ldr	r3, [r4, #0]
    17c6:	f023 0302 	bic.w	r3, r3, #2
    17ca:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    17cc:	6923      	ldr	r3, [r4, #16]
    17ce:	f013 0f03 	tst.w	r3, #3
    17d2:	d1fb      	bne.n	17cc <_pwm_init+0x30>
    17d4:	6923      	ldr	r3, [r4, #16]
    17d6:	f013 0f02 	tst.w	r3, #2
    17da:	d1fb      	bne.n	17d4 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    17dc:	2301      	movs	r3, #1
    17de:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    17e0:	6923      	ldr	r3, [r4, #16]
    17e2:	f013 0f03 	tst.w	r3, #3
    17e6:	d1fb      	bne.n	17e0 <_pwm_init+0x44>
    17e8:	6923      	ldr	r3, [r4, #16]
    17ea:	f013 0f01 	tst.w	r3, #1
    17ee:	d1fb      	bne.n	17e8 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    17f0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    17f4:	009a      	lsls	r2, r3, #2
    17f6:	4b46      	ldr	r3, [pc, #280]	; (1910 <_pwm_init+0x174>)
    17f8:	4413      	add	r3, r2
    17fa:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    17fc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    17fe:	6923      	ldr	r3, [r4, #16]
    1800:	f013 0f03 	tst.w	r3, #3
    1804:	d1fb      	bne.n	17fe <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1806:	00aa      	lsls	r2, r5, #2
    1808:	442a      	add	r2, r5
    180a:	0091      	lsls	r1, r2, #2
    180c:	4b40      	ldr	r3, [pc, #256]	; (1910 <_pwm_init+0x174>)
    180e:	440b      	add	r3, r1
    1810:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1812:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1814:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1816:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1818:	2203      	movs	r2, #3
    181a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    181c:	685b      	ldr	r3, [r3, #4]
    181e:	f003 030c 	and.w	r3, r3, #12
    1822:	2b08      	cmp	r3, #8
    1824:	d059      	beq.n	18da <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1826:	2b00      	cmp	r3, #0
    1828:	d16b      	bne.n	1902 <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    182a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    182e:	009a      	lsls	r2, r3, #2
    1830:	4b37      	ldr	r3, [pc, #220]	; (1910 <_pwm_init+0x174>)
    1832:	4413      	add	r3, r2
    1834:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1836:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1838:	6923      	ldr	r3, [r4, #16]
    183a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    183e:	d1fb      	bne.n	1838 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1840:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1844:	009a      	lsls	r2, r3, #2
    1846:	4b32      	ldr	r3, [pc, #200]	; (1910 <_pwm_init+0x174>)
    1848:	4413      	add	r3, r2
    184a:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    184c:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    184e:	6923      	ldr	r3, [r4, #16]
    1850:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1854:	d1fb      	bne.n	184e <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    1856:	4631      	mov	r1, r6
    1858:	4620      	mov	r0, r4
    185a:	4b2e      	ldr	r3, [pc, #184]	; (1914 <_pwm_init+0x178>)
    185c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    185e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1862:	009a      	lsls	r2, r3, #2
    1864:	4b2a      	ldr	r3, [pc, #168]	; (1910 <_pwm_init+0x174>)
    1866:	4413      	add	r3, r2
    1868:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    186c:	2b00      	cmp	r3, #0
    186e:	db0d      	blt.n	188c <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1870:	095a      	lsrs	r2, r3, #5
    1872:	f003 031f 	and.w	r3, r3, #31
    1876:	2101      	movs	r1, #1
    1878:	fa01 f303 	lsl.w	r3, r1, r3
    187c:	3220      	adds	r2, #32
    187e:	4926      	ldr	r1, [pc, #152]	; (1918 <_pwm_init+0x17c>)
    1880:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1888:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    188c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1890:	009a      	lsls	r2, r3, #2
    1892:	4b1f      	ldr	r3, [pc, #124]	; (1910 <_pwm_init+0x174>)
    1894:	4413      	add	r3, r2
    1896:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    189a:	2b00      	cmp	r3, #0
    189c:	db09      	blt.n	18b2 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    189e:	095a      	lsrs	r2, r3, #5
    18a0:	f003 031f 	and.w	r3, r3, #31
    18a4:	2101      	movs	r1, #1
    18a6:	fa01 f303 	lsl.w	r3, r1, r3
    18aa:	3260      	adds	r2, #96	; 0x60
    18ac:	491a      	ldr	r1, [pc, #104]	; (1918 <_pwm_init+0x17c>)
    18ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    18b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    18b6:	00aa      	lsls	r2, r5, #2
    18b8:	4b15      	ldr	r3, [pc, #84]	; (1910 <_pwm_init+0x174>)
    18ba:	4413      	add	r3, r2
    18bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    18c0:	2b00      	cmp	r3, #0
    18c2:	db21      	blt.n	1908 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18c4:	0959      	lsrs	r1, r3, #5
    18c6:	f003 031f 	and.w	r3, r3, #31
    18ca:	2201      	movs	r2, #1
    18cc:	fa02 f303 	lsl.w	r3, r2, r3
    18d0:	4a11      	ldr	r2, [pc, #68]	; (1918 <_pwm_init+0x17c>)
    18d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    18d6:	2000      	movs	r0, #0
    18d8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    18da:	4b0d      	ldr	r3, [pc, #52]	; (1910 <_pwm_init+0x174>)
    18dc:	440b      	add	r3, r1
    18de:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    18e0:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18e2:	6923      	ldr	r3, [r4, #16]
    18e4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    18e8:	d1fb      	bne.n	18e2 <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    18ea:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    18ee:	009a      	lsls	r2, r3, #2
    18f0:	4b07      	ldr	r3, [pc, #28]	; (1910 <_pwm_init+0x174>)
    18f2:	4413      	add	r3, r2
    18f4:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    18f6:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18f8:	6923      	ldr	r3, [r4, #16]
    18fa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    18fe:	d1fb      	bne.n	18f8 <_pwm_init+0x15c>
    1900:	e7a9      	b.n	1856 <_pwm_init+0xba>
		return -1;
    1902:	f04f 30ff 	mov.w	r0, #4294967295
    1906:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    1908:	2000      	movs	r0, #0
}
    190a:	bd70      	pop	{r4, r5, r6, pc}
    190c:	00001551 	.word	0x00001551
    1910:	20000000 	.word	0x20000000
    1914:	00001519 	.word	0x00001519
    1918:	e000e100 	.word	0xe000e100

0000191c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    191c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    191e:	6813      	ldr	r3, [r2, #0]
    1920:	f043 0302 	orr.w	r3, r3, #2
    1924:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1926:	6913      	ldr	r3, [r2, #16]
    1928:	f013 0f03 	tst.w	r3, #3
    192c:	d1fb      	bne.n	1926 <_timer_start+0xa>
}
    192e:	4770      	bx	lr

00001930 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1930:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1932:	6813      	ldr	r3, [r2, #0]
    1934:	f043 0302 	orr.w	r3, r3, #2
    1938:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    193a:	6913      	ldr	r3, [r2, #16]
    193c:	f013 0f03 	tst.w	r3, #3
    1940:	d1fb      	bne.n	193a <_pwm_enable+0xa>
}
    1942:	4770      	bx	lr

00001944 <_pwm_disable>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1944:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1946:	6813      	ldr	r3, [r2, #0]
    1948:	f023 0302 	bic.w	r3, r3, #2
    194c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    194e:	6913      	ldr	r3, [r2, #16]
    1950:	f013 0f03 	tst.w	r3, #3
    1954:	d1fb      	bne.n	194e <_pwm_disable+0xa>
}
    1956:	4770      	bx	lr

00001958 <_pwm_set_param>:
{
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	460e      	mov	r6, r1
    195c:	4615      	mov	r5, r2
	void *const hw = device->hw;
    195e:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1960:	4620      	mov	r0, r4
    1962:	4b1b      	ldr	r3, [pc, #108]	; (19d0 <_pwm_set_param+0x78>)
    1964:	4798      	blx	r3
	_tcs[i].cc0 = period;
    1966:	0082      	lsls	r2, r0, #2
    1968:	4402      	add	r2, r0
    196a:	0091      	lsls	r1, r2, #2
    196c:	4b19      	ldr	r3, [pc, #100]	; (19d4 <_pwm_set_param+0x7c>)
    196e:	440b      	add	r3, r1
    1970:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    1972:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1974:	685b      	ldr	r3, [r3, #4]
    1976:	f003 030c 	and.w	r3, r3, #12
    197a:	2b08      	cmp	r3, #8
    197c:	d016      	beq.n	19ac <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    197e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1982:	009a      	lsls	r2, r3, #2
    1984:	4b13      	ldr	r3, [pc, #76]	; (19d4 <_pwm_set_param+0x7c>)
    1986:	4413      	add	r3, r2
    1988:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    198a:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    198c:	6923      	ldr	r3, [r4, #16]
    198e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1992:	d1fb      	bne.n	198c <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    1994:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1998:	0082      	lsls	r2, r0, #2
    199a:	4b0e      	ldr	r3, [pc, #56]	; (19d4 <_pwm_set_param+0x7c>)
    199c:	4413      	add	r3, r2
    199e:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    19a0:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19a2:	6923      	ldr	r3, [r4, #16]
    19a4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    19a8:	d1fb      	bne.n	19a2 <_pwm_set_param+0x4a>
    19aa:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    19ac:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19ae:	6923      	ldr	r3, [r4, #16]
    19b0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    19b4:	d1fb      	bne.n	19ae <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    19b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    19ba:	0082      	lsls	r2, r0, #2
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <_pwm_set_param+0x7c>)
    19be:	4413      	add	r3, r2
    19c0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    19c2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19c4:	6923      	ldr	r3, [r4, #16]
    19c6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    19ca:	d1fb      	bne.n	19c4 <_pwm_set_param+0x6c>
    19cc:	bd70      	pop	{r4, r5, r6, pc}
    19ce:	bf00      	nop
    19d0:	00001551 	.word	0x00001551
    19d4:	20000000 	.word	0x20000000

000019d8 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    19d8:	68c2      	ldr	r2, [r0, #12]
    19da:	6913      	ldr	r3, [r2, #16]
    19dc:	f013 0f03 	tst.w	r3, #3
    19e0:	d1fb      	bne.n	19da <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    19e2:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    19e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    19e8:	4770      	bx	lr

000019ea <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    19ea:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19ec:	6913      	ldr	r3, [r2, #16]
    19ee:	f013 0f03 	tst.w	r3, #3
    19f2:	d1fb      	bne.n	19ec <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    19f4:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    19f6:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    19fa:	4770      	bx	lr

000019fc <_tc_get_timer>:
}
    19fc:	2000      	movs	r0, #0
    19fe:	4770      	bx	lr

00001a00 <_tc_get_pwm>:
}
    1a00:	2000      	movs	r0, #0
    1a02:	4770      	bx	lr

00001a04 <_timer_set_irq>:
{
    1a04:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    1a06:	68c0      	ldr	r0, [r0, #12]
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <_timer_set_irq+0x28>)
    1a0a:	4798      	blx	r3
    1a0c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1a0e:	f240 12a1 	movw	r2, #417	; 0x1a1
    1a12:	4907      	ldr	r1, [pc, #28]	; (1a30 <_timer_set_irq+0x2c>)
    1a14:	2001      	movs	r0, #1
    1a16:	4b07      	ldr	r3, [pc, #28]	; (1a34 <_timer_set_irq+0x30>)
    1a18:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    1a1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1a1e:	00a2      	lsls	r2, r4, #2
    1a20:	4b05      	ldr	r3, [pc, #20]	; (1a38 <_timer_set_irq+0x34>)
    1a22:	4413      	add	r3, r2
    1a24:	7898      	ldrb	r0, [r3, #2]
    1a26:	4b05      	ldr	r3, [pc, #20]	; (1a3c <_timer_set_irq+0x38>)
    1a28:	4798      	blx	r3
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	00001551 	.word	0x00001551
    1a30:	000035e8 	.word	0x000035e8
    1a34:	00000ce1 	.word	0x00000ce1
    1a38:	20000000 	.word	0x20000000
    1a3c:	00000e55 	.word	0x00000e55

00001a40 <TC1_Handler>:
{
    1a40:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <TC1_Handler+0xc>)
    1a44:	6818      	ldr	r0, [r3, #0]
    1a46:	4b02      	ldr	r3, [pc, #8]	; (1a50 <TC1_Handler+0x10>)
    1a48:	4798      	blx	r3
    1a4a:	bd08      	pop	{r3, pc}
    1a4c:	200000f4 	.word	0x200000f4
    1a50:	000014d1 	.word	0x000014d1

00001a54 <TC2_Handler>:
{
    1a54:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    1a56:	4b02      	ldr	r3, [pc, #8]	; (1a60 <TC2_Handler+0xc>)
    1a58:	6858      	ldr	r0, [r3, #4]
    1a5a:	4b02      	ldr	r3, [pc, #8]	; (1a64 <TC2_Handler+0x10>)
    1a5c:	4798      	blx	r3
    1a5e:	bd08      	pop	{r3, pc}
    1a60:	200000f4 	.word	0x200000f4
    1a64:	000014d1 	.word	0x000014d1

00001a68 <TC4_Handler>:
{
    1a68:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc4_dev);
    1a6a:	4b02      	ldr	r3, [pc, #8]	; (1a74 <TC4_Handler+0xc>)
    1a6c:	6898      	ldr	r0, [r3, #8]
    1a6e:	4b02      	ldr	r3, [pc, #8]	; (1a78 <TC4_Handler+0x10>)
    1a70:	4798      	blx	r3
    1a72:	bd08      	pop	{r3, pc}
    1a74:	200000f4 	.word	0x200000f4
    1a78:	000014e9 	.word	0x000014e9

00001a7c <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1a7c:	4b24      	ldr	r3, [pc, #144]	; (1b10 <TIMER_0_init+0x94>)
    1a7e:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC0, TC_SYNCBUSY_SWRST)) {
    1a80:	f013 0f01 	tst.w	r3, #1
    1a84:	d120      	bne.n	1ac8 <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a86:	4b22      	ldr	r3, [pc, #136]	; (1b10 <TIMER_0_init+0x94>)
    1a88:	691b      	ldr	r3, [r3, #16]
    1a8a:	f013 0f03 	tst.w	r3, #3
    1a8e:	d1fa      	bne.n	1a86 <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a90:	4b1f      	ldr	r3, [pc, #124]	; (1b10 <TIMER_0_init+0x94>)
    1a92:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC0, TC_CTRLA_ENABLE)) {
    1a94:	f013 0f02 	tst.w	r3, #2
    1a98:	d00e      	beq.n	1ab8 <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1a9a:	4a1d      	ldr	r2, [pc, #116]	; (1b10 <TIMER_0_init+0x94>)
    1a9c:	6813      	ldr	r3, [r2, #0]
    1a9e:	f023 0302 	bic.w	r3, r3, #2
    1aa2:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1aa4:	4b1a      	ldr	r3, [pc, #104]	; (1b10 <TIMER_0_init+0x94>)
    1aa6:	691b      	ldr	r3, [r3, #16]
    1aa8:	f013 0f03 	tst.w	r3, #3
    1aac:	d1fa      	bne.n	1aa4 <TIMER_0_init+0x28>
    1aae:	4b18      	ldr	r3, [pc, #96]	; (1b10 <TIMER_0_init+0x94>)
    1ab0:	691b      	ldr	r3, [r3, #16]
    1ab2:	f013 0f02 	tst.w	r3, #2
    1ab6:	d1fa      	bne.n	1aae <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1ab8:	2201      	movs	r2, #1
    1aba:	4b15      	ldr	r3, [pc, #84]	; (1b10 <TIMER_0_init+0x94>)
    1abc:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1abe:	4b14      	ldr	r3, [pc, #80]	; (1b10 <TIMER_0_init+0x94>)
    1ac0:	691b      	ldr	r3, [r3, #16]
    1ac2:	f013 0f03 	tst.w	r3, #3
    1ac6:	d1fa      	bne.n	1abe <TIMER_0_init+0x42>
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <TIMER_0_init+0x94>)
    1aca:	691b      	ldr	r3, [r3, #16]
    1acc:	f013 0f01 	tst.w	r3, #1
    1ad0:	d1fa      	bne.n	1ac8 <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1ad2:	4a10      	ldr	r2, [pc, #64]	; (1b14 <TIMER_0_init+0x98>)
    1ad4:	4b0e      	ldr	r3, [pc, #56]	; (1b10 <TIMER_0_init+0x94>)
    1ad6:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ad8:	4b0d      	ldr	r3, [pc, #52]	; (1b10 <TIMER_0_init+0x94>)
    1ada:	691b      	ldr	r3, [r3, #16]
    1adc:	f013 0f03 	tst.w	r3, #3
    1ae0:	d1fa      	bne.n	1ad8 <TIMER_0_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1ae2:	4b0b      	ldr	r3, [pc, #44]	; (1b10 <TIMER_0_init+0x94>)
    1ae4:	2200      	movs	r2, #0
    1ae6:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1ae8:	22ff      	movs	r2, #255	; 0xff
    1aea:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1aec:	2225      	movs	r2, #37	; 0x25
    1aee:	80da      	strh	r2, [r3, #6]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1af0:	2210      	movs	r2, #16
    1af2:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1af4:	22ef      	movs	r2, #239	; 0xef
    1af6:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1af8:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1afa:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1afe:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b00:	4b03      	ldr	r3, [pc, #12]	; (1b10 <TIMER_0_init+0x94>)
    1b02:	691b      	ldr	r3, [r3, #16]
    1b04:	f013 0f03 	tst.w	r3, #3
    1b08:	d1fa      	bne.n	1b00 <TIMER_0_init+0x84>
	                           | 0 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC0, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1b0a:	2000      	movs	r0, #0
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop
    1b10:	40003800 	.word	0x40003800
    1b14:	00030300 	.word	0x00030300

00001b18 <uart_rx_cb>:
}

static void uart_rx_cb(const struct usart_async_descriptor *const io_descr)
{
	/* Receive completed */
	data_arrived = 1;
    1b18:	2201      	movs	r2, #1
    1b1a:	4b01      	ldr	r3, [pc, #4]	; (1b20 <uart_rx_cb+0x8>)
    1b1c:	601a      	str	r2, [r3, #0]
    1b1e:	4770      	bx	lr
    1b20:	20000100 	.word	0x20000100

00001b24 <TIMER_1_task1_cb>:

/**
 *	capture the number of pulses in the past 10ms
 */
static void TIMER_1_task1_cb(const struct timer_task *const timer_task)
{
    1b24:	b538      	push	{r3, r4, r5, lr}
	rpm = (pulses * 100 /*Hz*/ * 60.0 /*Min*/ / (1440));
    1b26:	4c0a      	ldr	r4, [pc, #40]	; (1b50 <TIMER_1_task1_cb+0x2c>)
    1b28:	6863      	ldr	r3, [r4, #4]
    1b2a:	2064      	movs	r0, #100	; 0x64
    1b2c:	fb00 f003 	mul.w	r0, r0, r3
    1b30:	4b08      	ldr	r3, [pc, #32]	; (1b54 <TIMER_1_task1_cb+0x30>)
    1b32:	4798      	blx	r3
    1b34:	2200      	movs	r2, #0
    1b36:	4b08      	ldr	r3, [pc, #32]	; (1b58 <TIMER_1_task1_cb+0x34>)
    1b38:	4d08      	ldr	r5, [pc, #32]	; (1b5c <TIMER_1_task1_cb+0x38>)
    1b3a:	47a8      	blx	r5
    1b3c:	2200      	movs	r2, #0
    1b3e:	4b08      	ldr	r3, [pc, #32]	; (1b60 <TIMER_1_task1_cb+0x3c>)
    1b40:	4d08      	ldr	r5, [pc, #32]	; (1b64 <TIMER_1_task1_cb+0x40>)
    1b42:	47a8      	blx	r5
    1b44:	4b08      	ldr	r3, [pc, #32]	; (1b68 <TIMER_1_task1_cb+0x44>)
    1b46:	4798      	blx	r3
    1b48:	60a0      	str	r0, [r4, #8]
	pulses = 0;
    1b4a:	2300      	movs	r3, #0
    1b4c:	6063      	str	r3, [r4, #4]
    1b4e:	bd38      	pop	{r3, r4, r5, pc}
    1b50:	20000100 	.word	0x20000100
    1b54:	00002455 	.word	0x00002455
    1b58:	404e0000 	.word	0x404e0000
    1b5c:	00002541 	.word	0x00002541
    1b60:	40968000 	.word	0x40968000
    1b64:	00002795 	.word	0x00002795
    1b68:	00002965 	.word	0x00002965

00001b6c <TIMER_1_task2_cb>:
}

// send the RPM value every 100ms
static void TIMER_1_task2_cb(const struct timer_task *const timer_task)
{
    1b6c:	b530      	push	{r4, r5, lr}
    1b6e:	b083      	sub	sp, #12
	size_t payload_length = sprintf(payload, "position = %d | speed = %lu RPM | direction = %d\n",steps, rpm, direction);
    1b70:	4a09      	ldr	r2, [pc, #36]	; (1b98 <TIMER_1_task2_cb+0x2c>)
    1b72:	6893      	ldr	r3, [r2, #8]
    1b74:	68d2      	ldr	r2, [r2, #12]
    1b76:	4c09      	ldr	r4, [pc, #36]	; (1b9c <TIMER_1_task2_cb+0x30>)
    1b78:	4909      	ldr	r1, [pc, #36]	; (1ba0 <TIMER_1_task2_cb+0x34>)
    1b7a:	f991 1000 	ldrsb.w	r1, [r1]
    1b7e:	9100      	str	r1, [sp, #0]
    1b80:	4908      	ldr	r1, [pc, #32]	; (1ba4 <TIMER_1_task2_cb+0x38>)
    1b82:	4620      	mov	r0, r4
    1b84:	4d08      	ldr	r5, [pc, #32]	; (1ba8 <TIMER_1_task2_cb+0x3c>)
    1b86:	47a8      	blx	r5
	io_write(&USART_0.io, payload, payload_length);
    1b88:	b282      	uxth	r2, r0
    1b8a:	4621      	mov	r1, r4
    1b8c:	4807      	ldr	r0, [pc, #28]	; (1bac <TIMER_1_task2_cb+0x40>)
    1b8e:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <TIMER_1_task2_cb+0x44>)
    1b90:	4798      	blx	r3
}
    1b92:	b003      	add	sp, #12
    1b94:	bd30      	pop	{r4, r5, pc}
    1b96:	bf00      	nop
    1b98:	20000100 	.word	0x20000100
    1b9c:	2000023c 	.word	0x2000023c
    1ba0:	2000003c 	.word	0x2000003c
    1ba4:	000035fc 	.word	0x000035fc
    1ba8:	00002a8d 	.word	0x00002a8d
    1bac:	200001d4 	.word	0x200001d4
    1bb0:	00000711 	.word	0x00000711
    1bb4:	00000000 	.word	0x00000000

00001bb8 <TIMER_2_task1_cb>:
	timer_start(&TIMER_1);
}

static void TIMER_2_task1_cb(const struct timer_task *const timer_task)
{
	if (input_ready == true)
    1bb8:	4b2b      	ldr	r3, [pc, #172]	; (1c68 <TIMER_2_task1_cb+0xb0>)
    1bba:	7c1b      	ldrb	r3, [r3, #16]
    1bbc:	b903      	cbnz	r3, 1bc0 <TIMER_2_task1_cb+0x8>
    1bbe:	4770      	bx	lr
{
    1bc0:	b510      	push	{r4, lr}
	{
		pwm_disable(&PWM_0);
    1bc2:	482a      	ldr	r0, [pc, #168]	; (1c6c <TIMER_2_task1_cb+0xb4>)
    1bc4:	4b2a      	ldr	r3, [pc, #168]	; (1c70 <TIMER_2_task1_cb+0xb8>)
    1bc6:	4798      	blx	r3
		//if (level >= 0)
		//{
			//gpio_set_pin_level(MOTOR_INPUT_2, false);
			controlled_level = pi_position_control(steps, level);
    1bc8:	4c27      	ldr	r4, [pc, #156]	; (1c68 <TIMER_2_task1_cb+0xb0>)
    1bca:	6961      	ldr	r1, [r4, #20]
    1bcc:	68e0      	ldr	r0, [r4, #12]
    1bce:	4b29      	ldr	r3, [pc, #164]	; (1c74 <TIMER_2_task1_cb+0xbc>)
    1bd0:	4798      	blx	r3
    1bd2:	4601      	mov	r1, r0
    1bd4:	7620      	strb	r0, [r4, #24]
			controlled_level = pi_speed_control(rpm * direction, controlled_level);
    1bd6:	4b28      	ldr	r3, [pc, #160]	; (1c78 <TIMER_2_task1_cb+0xc0>)
    1bd8:	f993 3000 	ldrsb.w	r3, [r3]
    1bdc:	68a0      	ldr	r0, [r4, #8]
    1bde:	fb00 f003 	mul.w	r0, r0, r3
    1be2:	4b26      	ldr	r3, [pc, #152]	; (1c7c <TIMER_2_task1_cb+0xc4>)
    1be4:	4798      	blx	r3
    1be6:	b240      	sxtb	r0, r0
    1be8:	7620      	strb	r0, [r4, #24]
			//controlled_level = pi_position_control(steps, level);
			//controlled_level = pi_speed_control(rpm * direction, controlled_level);
			//pwm_set_parameters(&PWM_0, 10000, 10000 + (10000 * (controlled_level / 100.0)));			
		//}
		
		if (controlled_level >= 0)
    1bea:	2800      	cmp	r0, #0
    1bec:	db19      	blt.n	1c22 <TIMER_2_task1_cb+0x6a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bee:	2240      	movs	r2, #64	; 0x40
    1bf0:	4b23      	ldr	r3, [pc, #140]	; (1c80 <TIMER_2_task1_cb+0xc8>)
    1bf2:	615a      	str	r2, [r3, #20]
		{
			gpio_set_pin_level(MOTOR_INPUT_2, false);
			pwm_set_parameters(&PWM_0, 10000, 10000 * (controlled_level / 100.0));
    1bf4:	4b23      	ldr	r3, [pc, #140]	; (1c84 <TIMER_2_task1_cb+0xcc>)
    1bf6:	4798      	blx	r3
    1bf8:	2200      	movs	r2, #0
    1bfa:	4b23      	ldr	r3, [pc, #140]	; (1c88 <TIMER_2_task1_cb+0xd0>)
    1bfc:	4c23      	ldr	r4, [pc, #140]	; (1c8c <TIMER_2_task1_cb+0xd4>)
    1bfe:	47a0      	blx	r4
    1c00:	a317      	add	r3, pc, #92	; (adr r3, 1c60 <TIMER_2_task1_cb+0xa8>)
    1c02:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c06:	4c22      	ldr	r4, [pc, #136]	; (1c90 <TIMER_2_task1_cb+0xd8>)
    1c08:	47a0      	blx	r4
    1c0a:	4b22      	ldr	r3, [pc, #136]	; (1c94 <TIMER_2_task1_cb+0xdc>)
    1c0c:	4798      	blx	r3
    1c0e:	4602      	mov	r2, r0
    1c10:	f242 7110 	movw	r1, #10000	; 0x2710
    1c14:	4815      	ldr	r0, [pc, #84]	; (1c6c <TIMER_2_task1_cb+0xb4>)
    1c16:	4b20      	ldr	r3, [pc, #128]	; (1c98 <TIMER_2_task1_cb+0xe0>)
    1c18:	4798      	blx	r3
			gpio_set_pin_level(MOTOR_INPUT_2, true);
			pwm_set_parameters(&PWM_0, 10000, 10000 + (10000 * (controlled_level / 100.0)));	
		}
		
		
		pwm_enable(&PWM_0);
    1c1a:	4814      	ldr	r0, [pc, #80]	; (1c6c <TIMER_2_task1_cb+0xb4>)
    1c1c:	4b1f      	ldr	r3, [pc, #124]	; (1c9c <TIMER_2_task1_cb+0xe4>)
    1c1e:	4798      	blx	r3
    1c20:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c22:	2240      	movs	r2, #64	; 0x40
    1c24:	4b16      	ldr	r3, [pc, #88]	; (1c80 <TIMER_2_task1_cb+0xc8>)
    1c26:	619a      	str	r2, [r3, #24]
			pwm_set_parameters(&PWM_0, 10000, 10000 + (10000 * (controlled_level / 100.0)));	
    1c28:	4b16      	ldr	r3, [pc, #88]	; (1c84 <TIMER_2_task1_cb+0xcc>)
    1c2a:	4798      	blx	r3
    1c2c:	2200      	movs	r2, #0
    1c2e:	4b16      	ldr	r3, [pc, #88]	; (1c88 <TIMER_2_task1_cb+0xd0>)
    1c30:	4c16      	ldr	r4, [pc, #88]	; (1c8c <TIMER_2_task1_cb+0xd4>)
    1c32:	47a0      	blx	r4
    1c34:	a30a      	add	r3, pc, #40	; (adr r3, 1c60 <TIMER_2_task1_cb+0xa8>)
    1c36:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c3a:	4c15      	ldr	r4, [pc, #84]	; (1c90 <TIMER_2_task1_cb+0xd8>)
    1c3c:	47a0      	blx	r4
    1c3e:	a308      	add	r3, pc, #32	; (adr r3, 1c60 <TIMER_2_task1_cb+0xa8>)
    1c40:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c44:	4c16      	ldr	r4, [pc, #88]	; (1ca0 <TIMER_2_task1_cb+0xe8>)
    1c46:	47a0      	blx	r4
    1c48:	4b12      	ldr	r3, [pc, #72]	; (1c94 <TIMER_2_task1_cb+0xdc>)
    1c4a:	4798      	blx	r3
    1c4c:	4602      	mov	r2, r0
    1c4e:	f242 7110 	movw	r1, #10000	; 0x2710
    1c52:	4806      	ldr	r0, [pc, #24]	; (1c6c <TIMER_2_task1_cb+0xb4>)
    1c54:	4b10      	ldr	r3, [pc, #64]	; (1c98 <TIMER_2_task1_cb+0xe0>)
    1c56:	4798      	blx	r3
    1c58:	e7df      	b.n	1c1a <TIMER_2_task1_cb+0x62>
    1c5a:	bf00      	nop
    1c5c:	f3af 8000 	nop.w
    1c60:	00000000 	.word	0x00000000
    1c64:	40c38800 	.word	0x40c38800
    1c68:	20000100 	.word	0x20000100
    1c6c:	2000019c 	.word	0x2000019c
    1c70:	0000080d 	.word	0x0000080d
    1c74:	000020ed 	.word	0x000020ed
    1c78:	2000003c 	.word	0x2000003c
    1c7c:	00001ff1 	.word	0x00001ff1
    1c80:	41008000 	.word	0x41008000
    1c84:	00002475 	.word	0x00002475
    1c88:	40590000 	.word	0x40590000
    1c8c:	00002795 	.word	0x00002795
    1c90:	00002541 	.word	0x00002541
    1c94:	00002965 	.word	0x00002965
    1c98:	00000849 	.word	0x00000849
    1c9c:	000007d1 	.word	0x000007d1
    1ca0:	000021dd 	.word	0x000021dd

00001ca4 <TC0_Handler>:
void TC0_Handler(){
    1ca4:	b510      	push	{r4, lr}
    1ca6:	b082      	sub	sp, #8
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_MC0) >> TC_INTFLAG_MC0_Pos;
}

static inline void hri_tc_clear_INTFLAG_MC0_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    1ca8:	2210      	movs	r2, #16
    1caa:	4b29      	ldr	r3, [pc, #164]	; (1d50 <TC0_Handler+0xac>)
    1cac:	729a      	strb	r2, [r3, #10]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1cae:	4b28      	ldr	r3, [pc, #160]	; (1d50 <TC0_Handler+0xac>)
    1cb0:	691b      	ldr	r3, [r3, #16]
    1cb2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1cb6:	d1fa      	bne.n	1cae <TC0_Handler+0xa>
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1cb8:	4b25      	ldr	r3, [pc, #148]	; (1d50 <TC0_Handler+0xac>)
    1cba:	8b9a      	ldrh	r2, [r3, #28]
    1cbc:	b292      	uxth	r2, r2
	periodCC0 = (uint32_t)hri_tccount16_read_CC_reg(TC0, 0); 
    1cbe:	4b25      	ldr	r3, [pc, #148]	; (1d54 <TC0_Handler+0xb0>)
    1cc0:	61da      	str	r2, [r3, #28]
	pulses++;
    1cc2:	685a      	ldr	r2, [r3, #4]
    1cc4:	3201      	adds	r2, #1
    1cc6:	605a      	str	r2, [r3, #4]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1cc8:	a801      	add	r0, sp, #4
    1cca:	4b23      	ldr	r3, [pc, #140]	; (1d58 <TC0_Handler+0xb4>)
    1ccc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1cce:	4b23      	ldr	r3, [pc, #140]	; (1d5c <TC0_Handler+0xb8>)
    1cd0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1cd4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1cd8:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    1cdc:	4054      	eors	r4, r2
    1cde:	400c      	ands	r4, r1
    1ce0:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1ce2:	a801      	add	r0, sp, #4
    1ce4:	4b1e      	ldr	r3, [pc, #120]	; (1d60 <TC0_Handler+0xbc>)
    1ce6:	4798      	blx	r3
	if ((hal_sensor_b == false) && (direction == -1))
    1ce8:	f014 0402 	ands.w	r4, r4, #2
    1cec:	d105      	bne.n	1cfa <TC0_Handler+0x56>
    1cee:	4b1d      	ldr	r3, [pc, #116]	; (1d64 <TC0_Handler+0xc0>)
    1cf0:	f993 3000 	ldrsb.w	r3, [r3]
    1cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
    1cf8:	d01c      	beq.n	1d34 <TC0_Handler+0x90>
	else if ((hal_sensor_b == true) && (direction == 1))
    1cfa:	b124      	cbz	r4, 1d06 <TC0_Handler+0x62>
    1cfc:	4b19      	ldr	r3, [pc, #100]	; (1d64 <TC0_Handler+0xc0>)
    1cfe:	f993 3000 	ldrsb.w	r3, [r3]
    1d02:	2b01      	cmp	r3, #1
    1d04:	d01a      	beq.n	1d3c <TC0_Handler+0x98>
	if (direction == 1)
    1d06:	4b17      	ldr	r3, [pc, #92]	; (1d64 <TC0_Handler+0xc0>)
    1d08:	f993 3000 	ldrsb.w	r3, [r3]
    1d0c:	2b01      	cmp	r3, #1
    1d0e:	d019      	beq.n	1d44 <TC0_Handler+0xa0>
		steps--;
    1d10:	4a10      	ldr	r2, [pc, #64]	; (1d54 <TC0_Handler+0xb0>)
    1d12:	68d3      	ldr	r3, [r2, #12]
    1d14:	3b01      	subs	r3, #1
    1d16:	60d3      	str	r3, [r2, #12]
	if ((steps > 30000) || (steps < -30000))
    1d18:	4b0e      	ldr	r3, [pc, #56]	; (1d54 <TC0_Handler+0xb0>)
    1d1a:	68db      	ldr	r3, [r3, #12]
    1d1c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    1d20:	3330      	adds	r3, #48	; 0x30
    1d22:	f64e 2260 	movw	r2, #60000	; 0xea60
    1d26:	4293      	cmp	r3, r2
    1d28:	d902      	bls.n	1d30 <TC0_Handler+0x8c>
		steps = 0;
    1d2a:	2200      	movs	r2, #0
    1d2c:	4b09      	ldr	r3, [pc, #36]	; (1d54 <TC0_Handler+0xb0>)
    1d2e:	60da      	str	r2, [r3, #12]
}
    1d30:	b002      	add	sp, #8
    1d32:	bd10      	pop	{r4, pc}
		direction = 1; // Reverse
    1d34:	2201      	movs	r2, #1
    1d36:	4b0b      	ldr	r3, [pc, #44]	; (1d64 <TC0_Handler+0xc0>)
    1d38:	701a      	strb	r2, [r3, #0]
    1d3a:	e7e4      	b.n	1d06 <TC0_Handler+0x62>
		direction = -1;
    1d3c:	22ff      	movs	r2, #255	; 0xff
    1d3e:	4b09      	ldr	r3, [pc, #36]	; (1d64 <TC0_Handler+0xc0>)
    1d40:	701a      	strb	r2, [r3, #0]
    1d42:	e7e0      	b.n	1d06 <TC0_Handler+0x62>
		steps++;
    1d44:	4a03      	ldr	r2, [pc, #12]	; (1d54 <TC0_Handler+0xb0>)
    1d46:	68d3      	ldr	r3, [r2, #12]
    1d48:	3301      	adds	r3, #1
    1d4a:	60d3      	str	r3, [r2, #12]
    1d4c:	e7e4      	b.n	1d18 <TC0_Handler+0x74>
    1d4e:	bf00      	nop
    1d50:	40003800 	.word	0x40003800
    1d54:	20000100 	.word	0x20000100
    1d58:	00000671 	.word	0x00000671
    1d5c:	41008000 	.word	0x41008000
    1d60:	0000067f 	.word	0x0000067f
    1d64:	2000003c 	.word	0x2000003c

00001d68 <TIMER_1_config>:
{
    1d68:	b570      	push	{r4, r5, r6, lr}
	TIMER_1_task1.interval = 10;
    1d6a:	4c0e      	ldr	r4, [pc, #56]	; (1da4 <TIMER_1_config+0x3c>)
    1d6c:	230a      	movs	r3, #10
    1d6e:	62a3      	str	r3, [r4, #40]	; 0x28
	TIMER_1_task1.cb       = TIMER_1_task1_cb;
    1d70:	4b0d      	ldr	r3, [pc, #52]	; (1da8 <TIMER_1_config+0x40>)
    1d72:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIMER_1_task1.mode     = TIMER_TASK_REPEAT;
    1d74:	2301      	movs	r3, #1
    1d76:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	TIMER_1_task2.interval = 100;
    1d7a:	2264      	movs	r2, #100	; 0x64
    1d7c:	63e2      	str	r2, [r4, #60]	; 0x3c
	TIMER_1_task2.cb       = TIMER_1_task2_cb;
    1d7e:	4a0b      	ldr	r2, [pc, #44]	; (1dac <TIMER_1_config+0x44>)
    1d80:	6422      	str	r2, [r4, #64]	; 0x40
	TIMER_1_task2.mode     = TIMER_TASK_REPEAT;
    1d82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	timer_add_task(&TIMER_1, &TIMER_1_task1);
    1d86:	4d0a      	ldr	r5, [pc, #40]	; (1db0 <TIMER_1_config+0x48>)
    1d88:	f104 0120 	add.w	r1, r4, #32
    1d8c:	4628      	mov	r0, r5
    1d8e:	4e09      	ldr	r6, [pc, #36]	; (1db4 <TIMER_1_config+0x4c>)
    1d90:	47b0      	blx	r6
	timer_add_task(&TIMER_1, &TIMER_1_task2);
    1d92:	f104 0134 	add.w	r1, r4, #52	; 0x34
    1d96:	4628      	mov	r0, r5
    1d98:	47b0      	blx	r6
	timer_start(&TIMER_1);
    1d9a:	4628      	mov	r0, r5
    1d9c:	4b06      	ldr	r3, [pc, #24]	; (1db8 <TIMER_1_config+0x50>)
    1d9e:	4798      	blx	r3
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    1da2:	bf00      	nop
    1da4:	20000100 	.word	0x20000100
    1da8:	00001b25 	.word	0x00001b25
    1dac:	00001b6d 	.word	0x00001b6d
    1db0:	200001b8 	.word	0x200001b8
    1db4:	000009ad 	.word	0x000009ad
    1db8:	00000971 	.word	0x00000971

00001dbc <TIMER_2_config>:
static void TIMER_2_task2_cb(const struct timer_task *const timer_task)
{
}

void TIMER_2_config(void)
{
    1dbc:	b510      	push	{r4, lr}
	TIMER_2_task1.interval = 100; // change me to 1
    1dbe:	4908      	ldr	r1, [pc, #32]	; (1de0 <TIMER_2_config+0x24>)
    1dc0:	2364      	movs	r3, #100	; 0x64
    1dc2:	650b      	str	r3, [r1, #80]	; 0x50
	TIMER_2_task1.cb       = TIMER_2_task1_cb;
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <TIMER_2_config+0x28>)
    1dc6:	654b      	str	r3, [r1, #84]	; 0x54
	TIMER_2_task1.mode     = TIMER_TASK_REPEAT;
    1dc8:	2301      	movs	r3, #1
    1dca:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
	//TIMER_2_task2.interval = 200;
	//TIMER_2_task2.cb       = TIMER_2_task2_cb;
	//TIMER_2_task2.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&TIMER_2, &TIMER_2_task1);
    1dce:	4c06      	ldr	r4, [pc, #24]	; (1de8 <TIMER_2_config+0x2c>)
    1dd0:	3148      	adds	r1, #72	; 0x48
    1dd2:	4620      	mov	r0, r4
    1dd4:	4b05      	ldr	r3, [pc, #20]	; (1dec <TIMER_2_config+0x30>)
    1dd6:	4798      	blx	r3
	//timer_add_task(&TIMER_2, &TIMER_2_task2);
	timer_start(&TIMER_2);
    1dd8:	4620      	mov	r0, r4
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <TIMER_2_config+0x34>)
    1ddc:	4798      	blx	r3
    1dde:	bd10      	pop	{r4, pc}
    1de0:	20000100 	.word	0x20000100
    1de4:	00001bb9 	.word	0x00001bb9
    1de8:	20000180 	.word	0x20000180
    1dec:	000009ad 	.word	0x000009ad
    1df0:	00000971 	.word	0x00000971

00001df4 <main>:
}

int main(void)
{
    1df4:	b500      	push	{lr}
    1df6:	b083      	sub	sp, #12
	uint8_t recv_char;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1df8:	4b6d      	ldr	r3, [pc, #436]	; (1fb0 <main+0x1bc>)
    1dfa:	4798      	blx	r3
		
	pwm_set_parameters(&PWM_0, 10000, 0);
    1dfc:	4c6d      	ldr	r4, [pc, #436]	; (1fb4 <main+0x1c0>)
    1dfe:	2200      	movs	r2, #0
    1e00:	f242 7110 	movw	r1, #10000	; 0x2710
    1e04:	4620      	mov	r0, r4
    1e06:	4b6c      	ldr	r3, [pc, #432]	; (1fb8 <main+0x1c4>)
    1e08:	4798      	blx	r3
	pwm_enable(&PWM_0);
    1e0a:	4620      	mov	r0, r4
    1e0c:	4b6b      	ldr	r3, [pc, #428]	; (1fbc <main+0x1c8>)
    1e0e:	4798      	blx	r3
	
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, uart_rx_cb);
    1e10:	4c6b      	ldr	r4, [pc, #428]	; (1fc0 <main+0x1cc>)
    1e12:	4a6c      	ldr	r2, [pc, #432]	; (1fc4 <main+0x1d0>)
    1e14:	2100      	movs	r1, #0
    1e16:	4620      	mov	r0, r4
    1e18:	4b6b      	ldr	r3, [pc, #428]	; (1fc8 <main+0x1d4>)
    1e1a:	4798      	blx	r3
	usart_async_enable(&USART_0);
    1e1c:	4620      	mov	r0, r4
    1e1e:	4b6b      	ldr	r3, [pc, #428]	; (1fcc <main+0x1d8>)
    1e20:	4798      	blx	r3
	
	TIMER_1_config();
    1e22:	4b6b      	ldr	r3, [pc, #428]	; (1fd0 <main+0x1dc>)
    1e24:	4798      	blx	r3
	TIMER_2_config();
    1e26:	4b6b      	ldr	r3, [pc, #428]	; (1fd4 <main+0x1e0>)
    1e28:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e2a:	4b6b      	ldr	r3, [pc, #428]	; (1fd8 <main+0x1e4>)
    1e2c:	2260      	movs	r2, #96	; 0x60
    1e2e:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1e36:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    1e38:	b662      	cpsie	i
    1e3a:	e056      	b.n	1eea <main+0xf6>
		}

		while (io_read(&USART_0.io, &recv_char, 1) == 1) {
			if (recv_char == '\n')
			{
				uart_ready = true;
    1e3c:	4b67      	ldr	r3, [pc, #412]	; (1fdc <main+0x1e8>)
    1e3e:	2201      	movs	r2, #1
    1e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				input_ready = false;
    1e44:	2200      	movs	r2, #0
    1e46:	741a      	strb	r2, [r3, #16]
				input_char_count--;
    1e48:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
    1e4c:	3a01      	subs	r2, #1
    1e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			user_input[input_char_count++] = recv_char;
			while (io_write(&USART_0.io, &recv_char, 1) != 1) {
			}
		}
		data_arrived = 0;
    1e52:	4b62      	ldr	r3, [pc, #392]	; (1fdc <main+0x1e8>)
    1e54:	2200      	movs	r2, #0
    1e56:	601a      	str	r2, [r3, #0]
		if (uart_ready)
    1e58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d044      	beq.n	1eea <main+0xf6>
		{
			level = 0;
    1e60:	4b5e      	ldr	r3, [pc, #376]	; (1fdc <main+0x1e8>)
			
			if (input_char_count == 2)
    1e62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    1e66:	2b02      	cmp	r3, #2
    1e68:	d024      	beq.n	1eb4 <main+0xc0>
			{
				level = user_input[1] - '0';
			} 
			else if (input_char_count == 3)
    1e6a:	2b03      	cmp	r3, #3
    1e6c:	d05e      	beq.n	1f2c <main+0x138>
			{
				level = ((user_input[1] - '0') * 10) + (user_input[2] - '0');
			}
			else if (input_char_count == 4)
    1e6e:	2b04      	cmp	r3, #4
    1e70:	d068      	beq.n	1f44 <main+0x150>
			{
				level = ((user_input[1] - '0') * 100) +  ((user_input[2] - '0') * 10) + (user_input[3] - '0');
			}
			else if (input_char_count == 5)
    1e72:	2b05      	cmp	r3, #5
    1e74:	d077      	beq.n	1f66 <main+0x172>
			{
				level = ((user_input[1] - '0') * 1000) + ((user_input[2] - '0') * 100) +  ((user_input[3] - '0') * 10) + (user_input[4] - '0');
			}
			else
			{
				level = ((user_input[1] - '0') * 10000) + ((user_input[2] - '0') * 1000) + ((user_input[3] - '0') * 100) +  ((user_input[4] - '0') * 10) + (user_input[5] - '0');
    1e76:	495a      	ldr	r1, [pc, #360]	; (1fe0 <main+0x1ec>)
    1e78:	784b      	ldrb	r3, [r1, #1]
    1e7a:	3b30      	subs	r3, #48	; 0x30
    1e7c:	788a      	ldrb	r2, [r1, #2]
    1e7e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    1e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e86:	fb02 f200 	mul.w	r2, r2, r0
    1e8a:	f242 7010 	movw	r0, #10000	; 0x2710
    1e8e:	fb00 2203 	mla	r2, r0, r3, r2
    1e92:	78cb      	ldrb	r3, [r1, #3]
    1e94:	3b30      	subs	r3, #48	; 0x30
    1e96:	2064      	movs	r0, #100	; 0x64
    1e98:	fb00 2303 	mla	r3, r0, r3, r2
    1e9c:	790a      	ldrb	r2, [r1, #4]
    1e9e:	3a30      	subs	r2, #48	; 0x30
    1ea0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1ea4:	0050      	lsls	r0, r2, #1
    1ea6:	4403      	add	r3, r0
    1ea8:	794a      	ldrb	r2, [r1, #5]
    1eaa:	3a30      	subs	r2, #48	; 0x30
    1eac:	4413      	add	r3, r2
    1eae:	4a4b      	ldr	r2, [pc, #300]	; (1fdc <main+0x1e8>)
    1eb0:	6153      	str	r3, [r2, #20]
    1eb2:	e004      	b.n	1ebe <main+0xca>
				level = user_input[1] - '0';
    1eb4:	4b4a      	ldr	r3, [pc, #296]	; (1fe0 <main+0x1ec>)
    1eb6:	785b      	ldrb	r3, [r3, #1]
    1eb8:	3b30      	subs	r3, #48	; 0x30
    1eba:	4a48      	ldr	r2, [pc, #288]	; (1fdc <main+0x1e8>)
    1ebc:	6153      	str	r3, [r2, #20]
			}
			
			if(user_input[0] == '+')
    1ebe:	4b48      	ldr	r3, [pc, #288]	; (1fe0 <main+0x1ec>)
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	2b2b      	cmp	r3, #43	; 0x2b
    1ec4:	d001      	beq.n	1eca <main+0xd6>
			{
				level = level;
			}
			else if (user_input[0] == '-')
    1ec6:	2b2d      	cmp	r3, #45	; 0x2d
    1ec8:	d066      	beq.n	1f98 <main+0x1a4>
			{
				level = -level;
			}
			
			if (level > 30000)
    1eca:	4b44      	ldr	r3, [pc, #272]	; (1fdc <main+0x1e8>)
    1ecc:	695b      	ldr	r3, [r3, #20]
    1ece:	f247 5230 	movw	r2, #30000	; 0x7530
    1ed2:	4293      	cmp	r3, r2
    1ed4:	dd65      	ble.n	1fa2 <main+0x1ae>
			{
				level = 30000;
    1ed6:	4b41      	ldr	r3, [pc, #260]	; (1fdc <main+0x1e8>)
    1ed8:	615a      	str	r2, [r3, #20]
			else if (level < -30000)
			{
				level = -30000;
			}
	
			input_ready = true;
    1eda:	4b40      	ldr	r3, [pc, #256]	; (1fdc <main+0x1e8>)
    1edc:	2201      	movs	r2, #1
    1ede:	741a      	strb	r2, [r3, #16]
			uart_ready = false;
    1ee0:	2200      	movs	r2, #0
    1ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			input_char_count = 0;
    1ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		if (data_arrived == 0) {
    1eea:	4b3c      	ldr	r3, [pc, #240]	; (1fdc <main+0x1e8>)
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d0fb      	beq.n	1eea <main+0xf6>
		while (io_read(&USART_0.io, &recv_char, 1) == 1) {
    1ef2:	2201      	movs	r2, #1
    1ef4:	f10d 0107 	add.w	r1, sp, #7
    1ef8:	4831      	ldr	r0, [pc, #196]	; (1fc0 <main+0x1cc>)
    1efa:	4b3a      	ldr	r3, [pc, #232]	; (1fe4 <main+0x1f0>)
    1efc:	4798      	blx	r3
    1efe:	2801      	cmp	r0, #1
    1f00:	d1a7      	bne.n	1e52 <main+0x5e>
			if (recv_char == '\n')
    1f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f06:	2b0a      	cmp	r3, #10
    1f08:	d098      	beq.n	1e3c <main+0x48>
			user_input[input_char_count++] = recv_char;
    1f0a:	4934      	ldr	r1, [pc, #208]	; (1fdc <main+0x1e8>)
    1f0c:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
    1f10:	1c50      	adds	r0, r2, #1
    1f12:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    1f16:	4932      	ldr	r1, [pc, #200]	; (1fe0 <main+0x1ec>)
    1f18:	548b      	strb	r3, [r1, r2]
			while (io_write(&USART_0.io, &recv_char, 1) != 1) {
    1f1a:	2201      	movs	r2, #1
    1f1c:	f10d 0107 	add.w	r1, sp, #7
    1f20:	4827      	ldr	r0, [pc, #156]	; (1fc0 <main+0x1cc>)
    1f22:	4b31      	ldr	r3, [pc, #196]	; (1fe8 <main+0x1f4>)
    1f24:	4798      	blx	r3
    1f26:	2801      	cmp	r0, #1
    1f28:	d1f7      	bne.n	1f1a <main+0x126>
    1f2a:	e7e2      	b.n	1ef2 <main+0xfe>
				level = ((user_input[1] - '0') * 10) + (user_input[2] - '0');
    1f2c:	492c      	ldr	r1, [pc, #176]	; (1fe0 <main+0x1ec>)
    1f2e:	784b      	ldrb	r3, [r1, #1]
    1f30:	3b30      	subs	r3, #48	; 0x30
    1f32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1f36:	005a      	lsls	r2, r3, #1
    1f38:	788b      	ldrb	r3, [r1, #2]
    1f3a:	3b30      	subs	r3, #48	; 0x30
    1f3c:	441a      	add	r2, r3
    1f3e:	4b27      	ldr	r3, [pc, #156]	; (1fdc <main+0x1e8>)
    1f40:	615a      	str	r2, [r3, #20]
    1f42:	e7bc      	b.n	1ebe <main+0xca>
				level = ((user_input[1] - '0') * 100) +  ((user_input[2] - '0') * 10) + (user_input[3] - '0');
    1f44:	4926      	ldr	r1, [pc, #152]	; (1fe0 <main+0x1ec>)
    1f46:	784b      	ldrb	r3, [r1, #1]
    1f48:	3b30      	subs	r3, #48	; 0x30
    1f4a:	788a      	ldrb	r2, [r1, #2]
    1f4c:	3a30      	subs	r2, #48	; 0x30
    1f4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1f52:	0050      	lsls	r0, r2, #1
    1f54:	2264      	movs	r2, #100	; 0x64
    1f56:	fb02 0303 	mla	r3, r2, r3, r0
    1f5a:	78ca      	ldrb	r2, [r1, #3]
    1f5c:	3a30      	subs	r2, #48	; 0x30
    1f5e:	4413      	add	r3, r2
    1f60:	4a1e      	ldr	r2, [pc, #120]	; (1fdc <main+0x1e8>)
    1f62:	6153      	str	r3, [r2, #20]
    1f64:	e7ab      	b.n	1ebe <main+0xca>
				level = ((user_input[1] - '0') * 1000) + ((user_input[2] - '0') * 100) +  ((user_input[3] - '0') * 10) + (user_input[4] - '0');
    1f66:	491e      	ldr	r1, [pc, #120]	; (1fe0 <main+0x1ec>)
    1f68:	784b      	ldrb	r3, [r1, #1]
    1f6a:	3b30      	subs	r3, #48	; 0x30
    1f6c:	788a      	ldrb	r2, [r1, #2]
    1f6e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    1f72:	2264      	movs	r2, #100	; 0x64
    1f74:	fb02 f200 	mul.w	r2, r2, r0
    1f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1f7c:	fb00 2303 	mla	r3, r0, r3, r2
    1f80:	78ca      	ldrb	r2, [r1, #3]
    1f82:	3a30      	subs	r2, #48	; 0x30
    1f84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1f88:	0050      	lsls	r0, r2, #1
    1f8a:	4403      	add	r3, r0
    1f8c:	790a      	ldrb	r2, [r1, #4]
    1f8e:	3a30      	subs	r2, #48	; 0x30
    1f90:	4413      	add	r3, r2
    1f92:	4a12      	ldr	r2, [pc, #72]	; (1fdc <main+0x1e8>)
    1f94:	6153      	str	r3, [r2, #20]
    1f96:	e792      	b.n	1ebe <main+0xca>
				level = -level;
    1f98:	4a10      	ldr	r2, [pc, #64]	; (1fdc <main+0x1e8>)
    1f9a:	6953      	ldr	r3, [r2, #20]
    1f9c:	425b      	negs	r3, r3
    1f9e:	6153      	str	r3, [r2, #20]
    1fa0:	e793      	b.n	1eca <main+0xd6>
			else if (level < -30000)
    1fa2:	4a12      	ldr	r2, [pc, #72]	; (1fec <main+0x1f8>)
    1fa4:	4293      	cmp	r3, r2
    1fa6:	da98      	bge.n	1eda <main+0xe6>
				level = -30000;
    1fa8:	4b0c      	ldr	r3, [pc, #48]	; (1fdc <main+0x1e8>)
    1faa:	615a      	str	r2, [r3, #20]
    1fac:	e795      	b.n	1eda <main+0xe6>
    1fae:	bf00      	nop
    1fb0:	000002d1 	.word	0x000002d1
    1fb4:	2000019c 	.word	0x2000019c
    1fb8:	00000849 	.word	0x00000849
    1fbc:	000007d1 	.word	0x000007d1
    1fc0:	200001d4 	.word	0x200001d4
    1fc4:	00001b19 	.word	0x00001b19
    1fc8:	00000c6d 	.word	0x00000c6d
    1fcc:	00000c41 	.word	0x00000c41
    1fd0:	00001d69 	.word	0x00001d69
    1fd4:	00001dbd 	.word	0x00001dbd
    1fd8:	e000e100 	.word	0xe000e100
    1fdc:	20000100 	.word	0x20000100
    1fe0:	20000234 	.word	0x20000234
    1fe4:	00000745 	.word	0x00000745
    1fe8:	00000711 	.word	0x00000711
    1fec:	ffff8ad0 	.word	0xffff8ad0

00001ff0 <pi_speed_control>:
 // need to check these values during testing
 #define RPM_2_TICKS 1
 #define POS_2_TICKS 1

int32_t pi_speed_control(int32_t current_speed, int32_t target_speed)
{
    1ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ff2:	b085      	sub	sp, #20
    1ff4:	4605      	mov	r5, r0
	volatile float current_error;
	
	volatile float P_term = 0.0;
    1ff6:	2300      	movs	r3, #0
    1ff8:	9302      	str	r3, [sp, #8]
	volatile float I_term = 0.0;
    1ffa:	9301      	str	r3, [sp, #4]
	float i_max = 100.0;
	float i_min = -100.0;
	
	current_error = 1.0 * target_speed - current_speed;
    1ffc:	4c34      	ldr	r4, [pc, #208]	; (20d0 <pi_speed_control+0xe0>)
    1ffe:	4608      	mov	r0, r1
    2000:	47a0      	blx	r4
    2002:	4606      	mov	r6, r0
    2004:	460f      	mov	r7, r1
    2006:	4628      	mov	r0, r5
    2008:	47a0      	blx	r4
    200a:	4602      	mov	r2, r0
    200c:	460b      	mov	r3, r1
    200e:	4630      	mov	r0, r6
    2010:	4639      	mov	r1, r7
    2012:	4c30      	ldr	r4, [pc, #192]	; (20d4 <pi_speed_control+0xe4>)
    2014:	47a0      	blx	r4
    2016:	4b30      	ldr	r3, [pc, #192]	; (20d8 <pi_speed_control+0xe8>)
    2018:	4798      	blx	r3
    201a:	9003      	str	r0, [sp, #12]
	P_error = current_error;
    201c:	ed9d 7a03 	vldr	s14, [sp, #12]
    2020:	4b2e      	ldr	r3, [pc, #184]	; (20dc <pi_speed_control+0xec>)
    2022:	ed83 7a00 	vstr	s14, [r3]
	I_error = I_error + current_error;
    2026:	eddd 7a03 	vldr	s15, [sp, #12]
    202a:	edd3 6a01 	vldr	s13, [r3, #4]
    202e:	ee77 7aa6 	vadd.f32	s15, s15, s13
    2032:	edc3 7a01 	vstr	s15, [r3, #4]
	
	// Integral error control (a.k.a integral anti windup). In order to make sure the I_term doesn't increase to infinity
	if (I_error > i_max)
    2036:	eddf 6a2a 	vldr	s13, [pc, #168]	; 20e0 <pi_speed_control+0xf0>
    203a:	eef4 7ae6 	vcmpe.f32	s15, s13
    203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2042:	dd2f      	ble.n	20a4 <pi_speed_control+0xb4>
	{
		I_error = i_max;
    2044:	edc3 6a01 	vstr	s13, [r3, #4]
	else if (I_error < i_min)
	{
		I_error = i_min;
	}
	
	P_term = Kp_speed*P_error;
    2048:	4a26      	ldr	r2, [pc, #152]	; (20e4 <pi_speed_control+0xf4>)
    204a:	edd2 7a00 	vldr	s15, [r2]
    204e:	ee27 7a27 	vmul.f32	s14, s14, s15
    2052:	ed8d 7a02 	vstr	s14, [sp, #8]
	I_term = Ki_speed*I_error;
    2056:	4b21      	ldr	r3, [pc, #132]	; (20dc <pi_speed_control+0xec>)
    2058:	edd2 7a01 	vldr	s15, [r2, #4]
    205c:	ed93 7a01 	vldr	s14, [r3, #4]
    2060:	ee67 7a87 	vmul.f32	s15, s15, s14
    2064:	edcd 7a01 	vstr	s15, [sp, #4]
	
	// Currently 10000 ticks configured as time period for the PWM functionality
	// We need to multiple the P and I terms with RPM_2_TICKS as output is not in percentage but ticks
	
	dutycycle_speed = (P_term + I_term)*RPM_2_TICKS + dutycycle_speed;
    2068:	eddd 7a02 	vldr	s15, [sp, #8]
    206c:	ed9d 7a01 	vldr	s14, [sp, #4]
    2070:	ee77 7a87 	vadd.f32	s15, s15, s14
    2074:	ed93 7a02 	vldr	s14, [r3, #8]
    2078:	ee77 7a87 	vadd.f32	s15, s15, s14
    207c:	edc3 7a02 	vstr	s15, [r3, #8]
	
	if (dutycycle_speed > 100)
    2080:	ed9f 7a17 	vldr	s14, [pc, #92]	; 20e0 <pi_speed_control+0xf0>
    2084:	eef4 7ac7 	vcmpe.f32	s15, s14
    2088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    208c:	dc15      	bgt.n	20ba <pi_speed_control+0xca>
	{
		dutycycle_speed = 100;
	}
	else if (dutycycle_speed < -100)
    208e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 20e8 <pi_speed_control+0xf8>
    2092:	eef4 7ac7 	vcmpe.f32	s15, s14
    2096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    209a:	d510      	bpl.n	20be <pi_speed_control+0xce>
	{
		dutycycle_speed = -100;
    209c:	4b0f      	ldr	r3, [pc, #60]	; (20dc <pi_speed_control+0xec>)
    209e:	ed83 7a02 	vstr	s14, [r3, #8]
    20a2:	e00c      	b.n	20be <pi_speed_control+0xce>
	else if (I_error < i_min)
    20a4:	eddf 6a10 	vldr	s13, [pc, #64]	; 20e8 <pi_speed_control+0xf8>
    20a8:	eef4 7ae6 	vcmpe.f32	s15, s13
    20ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    20b0:	d5ca      	bpl.n	2048 <pi_speed_control+0x58>
		I_error = i_min;
    20b2:	4b0a      	ldr	r3, [pc, #40]	; (20dc <pi_speed_control+0xec>)
    20b4:	edc3 6a01 	vstr	s13, [r3, #4]
    20b8:	e7c6      	b.n	2048 <pi_speed_control+0x58>
		dutycycle_speed = 100;
    20ba:	ed83 7a02 	vstr	s14, [r3, #8]
	//size_t debug_length = sprintf(debug, "current_error = %ld | P_term = %ld | I_term = %ld | dutycycle_speed = %ld | current speed = %ld | target speed = %ld\n",(int32_t)current_error, (int32_t)P_term, (int32_t)I_term, (int32_t)dutycycle_speed, (int32_t)current_speed, (int32_t)target_speed);
	
	//io_write(&USART_0.io, debug, debug_length);
	//delay_ms(20);
	
	return dutycycle_speed;	
    20be:	4b07      	ldr	r3, [pc, #28]	; (20dc <pi_speed_control+0xec>)
    20c0:	edd3 7a02 	vldr	s15, [r3, #8]
}
    20c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    20c8:	ee17 0a90 	vmov	r0, s15
    20cc:	b005      	add	sp, #20
    20ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d0:	00002475 	.word	0x00002475
    20d4:	000021d9 	.word	0x000021d9
    20d8:	000029a5 	.word	0x000029a5
    20dc:	20000160 	.word	0x20000160
    20e0:	42c80000 	.word	0x42c80000
    20e4:	20000040 	.word	0x20000040
    20e8:	c2c80000 	.word	0xc2c80000

000020ec <pi_position_control>:

int8_t pi_position_control(int32_t current_position, int32_t target_position)
{
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	b083      	sub	sp, #12
    20f0:	4605      	mov	r5, r0
	float P_term = 0.0;
	float I_term = 0.0;
	float i_max = 100.0;
	float i_min = -100.0;
	
	current_error = 1.0 * target_position - current_position;
    20f2:	4c30      	ldr	r4, [pc, #192]	; (21b4 <pi_position_control+0xc8>)
    20f4:	4608      	mov	r0, r1
    20f6:	47a0      	blx	r4
    20f8:	4606      	mov	r6, r0
    20fa:	460f      	mov	r7, r1
    20fc:	4628      	mov	r0, r5
    20fe:	47a0      	blx	r4
    2100:	4602      	mov	r2, r0
    2102:	460b      	mov	r3, r1
    2104:	4630      	mov	r0, r6
    2106:	4639      	mov	r1, r7
    2108:	4c2b      	ldr	r4, [pc, #172]	; (21b8 <pi_position_control+0xcc>)
    210a:	47a0      	blx	r4
    210c:	4b2b      	ldr	r3, [pc, #172]	; (21bc <pi_position_control+0xd0>)
    210e:	4798      	blx	r3
    2110:	ee07 0a90 	vmov	s15, r0
	P_error_pos = current_error;
    2114:	4b2a      	ldr	r3, [pc, #168]	; (21c0 <pi_position_control+0xd4>)
    2116:	60d8      	str	r0, [r3, #12]
	I_error_pos = I_error_pos + current_error;
    2118:	ed93 7a04 	vldr	s14, [r3, #16]
    211c:	ee37 7a87 	vadd.f32	s14, s15, s14
    2120:	ed83 7a04 	vstr	s14, [r3, #16]
	
	// Integral error control (a.k.a integral anti windup). In order to make sure the I_term doesn't increase to infinity
	if (I_error_pos > i_max)
    2124:	eddf 6a27 	vldr	s13, [pc, #156]	; 21c4 <pi_position_control+0xd8>
    2128:	eeb4 7ae6 	vcmpe.f32	s14, s13
    212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2130:	dd27      	ble.n	2182 <pi_position_control+0x96>
	{
		I_error_pos = i_max;
    2132:	edc3 6a04 	vstr	s13, [r3, #16]
	else if (I_error_pos < i_min)
	{
		I_error_pos = i_min;
	}
	
	P_term = Kp_pos*P_error_pos;
    2136:	4b24      	ldr	r3, [pc, #144]	; (21c8 <pi_position_control+0xdc>)
    2138:	ed93 7a02 	vldr	s14, [r3, #8]
    213c:	ee67 7a87 	vmul.f32	s15, s15, s14
	I_term = Ki_pos*I_error_pos;
    2140:	ed93 7a03 	vldr	s14, [r3, #12]
    2144:	4b1e      	ldr	r3, [pc, #120]	; (21c0 <pi_position_control+0xd4>)
    2146:	edd3 6a04 	vldr	s13, [r3, #16]
    214a:	ee27 7a26 	vmul.f32	s14, s14, s13
	
	// Currently 10000 ticks configured as time period for the PWM functionality
	// We need to multiple the P and I terms with POS_2_TICKS as output is not in percentage but ticks
	
	dutycycle_pos = (P_term + I_term)*POS_2_TICKS + dutycycle_pos;
    214e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2152:	ed93 7a05 	vldr	s14, [r3, #20]
    2156:	ee77 7a87 	vadd.f32	s15, s15, s14
    215a:	edc3 7a05 	vstr	s15, [r3, #20]
		
	// make sure the duty cycle lies within the period ticks (which is configured as 10000 here)
	if (dutycycle_pos > 100)
    215e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 21c4 <pi_position_control+0xd8>
    2162:	eef4 7ac7 	vcmpe.f32	s15, s14
    2166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    216a:	dc15      	bgt.n	2198 <pi_position_control+0xac>
	{
		dutycycle_pos = 100;
	}
	else if (dutycycle_pos < -100)
    216c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 21cc <pi_position_control+0xe0>
    2170:	eef4 7ac7 	vcmpe.f32	s15, s14
    2174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2178:	d510      	bpl.n	219c <pi_position_control+0xb0>
	{
		dutycycle_pos = -100;
    217a:	4b11      	ldr	r3, [pc, #68]	; (21c0 <pi_position_control+0xd4>)
    217c:	ed83 7a05 	vstr	s14, [r3, #20]
    2180:	e00c      	b.n	219c <pi_position_control+0xb0>
	else if (I_error_pos < i_min)
    2182:	eddf 6a12 	vldr	s13, [pc, #72]	; 21cc <pi_position_control+0xe0>
    2186:	eeb4 7ae6 	vcmpe.f32	s14, s13
    218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    218e:	d5d2      	bpl.n	2136 <pi_position_control+0x4a>
		I_error_pos = i_min;
    2190:	4b0b      	ldr	r3, [pc, #44]	; (21c0 <pi_position_control+0xd4>)
    2192:	edc3 6a04 	vstr	s13, [r3, #16]
    2196:	e7ce      	b.n	2136 <pi_position_control+0x4a>
		dutycycle_pos = 100;
    2198:	ed83 7a05 	vstr	s14, [r3, #20]
	
    //size_t debug_length = sprintf(debug, "current_error = %ld | P_term = %ld | I_term = %ld | dutycycle_speed = %ld | current position = %ld | target position = %ld\n",(int32_t)current_error, (int32_t)P_term, (int32_t)I_term, (int32_t)dutycycle_pos, (int32_t)current_position, (int32_t)target_position);
	//
	//io_write(&USART_0.io, debug, debug_length);
	
	return dutycycle_pos;	
    219c:	4b08      	ldr	r3, [pc, #32]	; (21c0 <pi_position_control+0xd4>)
    219e:	edd3 7a05 	vldr	s15, [r3, #20]
    21a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    21a6:	edcd 7a01 	vstr	s15, [sp, #4]
    21aa:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    21ae:	b003      	add	sp, #12
    21b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b2:	bf00      	nop
    21b4:	00002475 	.word	0x00002475
    21b8:	000021d9 	.word	0x000021d9
    21bc:	000029a5 	.word	0x000029a5
    21c0:	20000160 	.word	0x20000160
    21c4:	42c80000 	.word	0x42c80000
    21c8:	20000040 	.word	0x20000040
    21cc:	c2c80000 	.word	0xc2c80000

000021d0 <__aeabi_drsub>:
    21d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    21d4:	e002      	b.n	21dc <__adddf3>
    21d6:	bf00      	nop

000021d8 <__aeabi_dsub>:
    21d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000021dc <__adddf3>:
    21dc:	b530      	push	{r4, r5, lr}
    21de:	ea4f 0441 	mov.w	r4, r1, lsl #1
    21e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    21e6:	ea94 0f05 	teq	r4, r5
    21ea:	bf08      	it	eq
    21ec:	ea90 0f02 	teqeq	r0, r2
    21f0:	bf1f      	itttt	ne
    21f2:	ea54 0c00 	orrsne.w	ip, r4, r0
    21f6:	ea55 0c02 	orrsne.w	ip, r5, r2
    21fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    21fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    2202:	f000 80e2 	beq.w	23ca <__adddf3+0x1ee>
    2206:	ea4f 5454 	mov.w	r4, r4, lsr #21
    220a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    220e:	bfb8      	it	lt
    2210:	426d      	neglt	r5, r5
    2212:	dd0c      	ble.n	222e <__adddf3+0x52>
    2214:	442c      	add	r4, r5
    2216:	ea80 0202 	eor.w	r2, r0, r2
    221a:	ea81 0303 	eor.w	r3, r1, r3
    221e:	ea82 0000 	eor.w	r0, r2, r0
    2222:	ea83 0101 	eor.w	r1, r3, r1
    2226:	ea80 0202 	eor.w	r2, r0, r2
    222a:	ea81 0303 	eor.w	r3, r1, r3
    222e:	2d36      	cmp	r5, #54	; 0x36
    2230:	bf88      	it	hi
    2232:	bd30      	pophi	{r4, r5, pc}
    2234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    2238:	ea4f 3101 	mov.w	r1, r1, lsl #12
    223c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    2240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    2244:	d002      	beq.n	224c <__adddf3+0x70>
    2246:	4240      	negs	r0, r0
    2248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    224c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    2250:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    2258:	d002      	beq.n	2260 <__adddf3+0x84>
    225a:	4252      	negs	r2, r2
    225c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2260:	ea94 0f05 	teq	r4, r5
    2264:	f000 80a7 	beq.w	23b6 <__adddf3+0x1da>
    2268:	f1a4 0401 	sub.w	r4, r4, #1
    226c:	f1d5 0e20 	rsbs	lr, r5, #32
    2270:	db0d      	blt.n	228e <__adddf3+0xb2>
    2272:	fa02 fc0e 	lsl.w	ip, r2, lr
    2276:	fa22 f205 	lsr.w	r2, r2, r5
    227a:	1880      	adds	r0, r0, r2
    227c:	f141 0100 	adc.w	r1, r1, #0
    2280:	fa03 f20e 	lsl.w	r2, r3, lr
    2284:	1880      	adds	r0, r0, r2
    2286:	fa43 f305 	asr.w	r3, r3, r5
    228a:	4159      	adcs	r1, r3
    228c:	e00e      	b.n	22ac <__adddf3+0xd0>
    228e:	f1a5 0520 	sub.w	r5, r5, #32
    2292:	f10e 0e20 	add.w	lr, lr, #32
    2296:	2a01      	cmp	r2, #1
    2298:	fa03 fc0e 	lsl.w	ip, r3, lr
    229c:	bf28      	it	cs
    229e:	f04c 0c02 	orrcs.w	ip, ip, #2
    22a2:	fa43 f305 	asr.w	r3, r3, r5
    22a6:	18c0      	adds	r0, r0, r3
    22a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    22ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    22b0:	d507      	bpl.n	22c2 <__adddf3+0xe6>
    22b2:	f04f 0e00 	mov.w	lr, #0
    22b6:	f1dc 0c00 	rsbs	ip, ip, #0
    22ba:	eb7e 0000 	sbcs.w	r0, lr, r0
    22be:	eb6e 0101 	sbc.w	r1, lr, r1
    22c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    22c6:	d31b      	bcc.n	2300 <__adddf3+0x124>
    22c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    22cc:	d30c      	bcc.n	22e8 <__adddf3+0x10c>
    22ce:	0849      	lsrs	r1, r1, #1
    22d0:	ea5f 0030 	movs.w	r0, r0, rrx
    22d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    22d8:	f104 0401 	add.w	r4, r4, #1
    22dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    22e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    22e4:	f080 809a 	bcs.w	241c <__adddf3+0x240>
    22e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    22ec:	bf08      	it	eq
    22ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    22f2:	f150 0000 	adcs.w	r0, r0, #0
    22f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    22fa:	ea41 0105 	orr.w	r1, r1, r5
    22fe:	bd30      	pop	{r4, r5, pc}
    2300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    2304:	4140      	adcs	r0, r0
    2306:	eb41 0101 	adc.w	r1, r1, r1
    230a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    230e:	f1a4 0401 	sub.w	r4, r4, #1
    2312:	d1e9      	bne.n	22e8 <__adddf3+0x10c>
    2314:	f091 0f00 	teq	r1, #0
    2318:	bf04      	itt	eq
    231a:	4601      	moveq	r1, r0
    231c:	2000      	moveq	r0, #0
    231e:	fab1 f381 	clz	r3, r1
    2322:	bf08      	it	eq
    2324:	3320      	addeq	r3, #32
    2326:	f1a3 030b 	sub.w	r3, r3, #11
    232a:	f1b3 0220 	subs.w	r2, r3, #32
    232e:	da0c      	bge.n	234a <__adddf3+0x16e>
    2330:	320c      	adds	r2, #12
    2332:	dd08      	ble.n	2346 <__adddf3+0x16a>
    2334:	f102 0c14 	add.w	ip, r2, #20
    2338:	f1c2 020c 	rsb	r2, r2, #12
    233c:	fa01 f00c 	lsl.w	r0, r1, ip
    2340:	fa21 f102 	lsr.w	r1, r1, r2
    2344:	e00c      	b.n	2360 <__adddf3+0x184>
    2346:	f102 0214 	add.w	r2, r2, #20
    234a:	bfd8      	it	le
    234c:	f1c2 0c20 	rsble	ip, r2, #32
    2350:	fa01 f102 	lsl.w	r1, r1, r2
    2354:	fa20 fc0c 	lsr.w	ip, r0, ip
    2358:	bfdc      	itt	le
    235a:	ea41 010c 	orrle.w	r1, r1, ip
    235e:	4090      	lslle	r0, r2
    2360:	1ae4      	subs	r4, r4, r3
    2362:	bfa2      	ittt	ge
    2364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    2368:	4329      	orrge	r1, r5
    236a:	bd30      	popge	{r4, r5, pc}
    236c:	ea6f 0404 	mvn.w	r4, r4
    2370:	3c1f      	subs	r4, #31
    2372:	da1c      	bge.n	23ae <__adddf3+0x1d2>
    2374:	340c      	adds	r4, #12
    2376:	dc0e      	bgt.n	2396 <__adddf3+0x1ba>
    2378:	f104 0414 	add.w	r4, r4, #20
    237c:	f1c4 0220 	rsb	r2, r4, #32
    2380:	fa20 f004 	lsr.w	r0, r0, r4
    2384:	fa01 f302 	lsl.w	r3, r1, r2
    2388:	ea40 0003 	orr.w	r0, r0, r3
    238c:	fa21 f304 	lsr.w	r3, r1, r4
    2390:	ea45 0103 	orr.w	r1, r5, r3
    2394:	bd30      	pop	{r4, r5, pc}
    2396:	f1c4 040c 	rsb	r4, r4, #12
    239a:	f1c4 0220 	rsb	r2, r4, #32
    239e:	fa20 f002 	lsr.w	r0, r0, r2
    23a2:	fa01 f304 	lsl.w	r3, r1, r4
    23a6:	ea40 0003 	orr.w	r0, r0, r3
    23aa:	4629      	mov	r1, r5
    23ac:	bd30      	pop	{r4, r5, pc}
    23ae:	fa21 f004 	lsr.w	r0, r1, r4
    23b2:	4629      	mov	r1, r5
    23b4:	bd30      	pop	{r4, r5, pc}
    23b6:	f094 0f00 	teq	r4, #0
    23ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    23be:	bf06      	itte	eq
    23c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    23c4:	3401      	addeq	r4, #1
    23c6:	3d01      	subne	r5, #1
    23c8:	e74e      	b.n	2268 <__adddf3+0x8c>
    23ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    23ce:	bf18      	it	ne
    23d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    23d4:	d029      	beq.n	242a <__adddf3+0x24e>
    23d6:	ea94 0f05 	teq	r4, r5
    23da:	bf08      	it	eq
    23dc:	ea90 0f02 	teqeq	r0, r2
    23e0:	d005      	beq.n	23ee <__adddf3+0x212>
    23e2:	ea54 0c00 	orrs.w	ip, r4, r0
    23e6:	bf04      	itt	eq
    23e8:	4619      	moveq	r1, r3
    23ea:	4610      	moveq	r0, r2
    23ec:	bd30      	pop	{r4, r5, pc}
    23ee:	ea91 0f03 	teq	r1, r3
    23f2:	bf1e      	ittt	ne
    23f4:	2100      	movne	r1, #0
    23f6:	2000      	movne	r0, #0
    23f8:	bd30      	popne	{r4, r5, pc}
    23fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    23fe:	d105      	bne.n	240c <__adddf3+0x230>
    2400:	0040      	lsls	r0, r0, #1
    2402:	4149      	adcs	r1, r1
    2404:	bf28      	it	cs
    2406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    240a:	bd30      	pop	{r4, r5, pc}
    240c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    2410:	bf3c      	itt	cc
    2412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    2416:	bd30      	popcc	{r4, r5, pc}
    2418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    241c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    2420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    2424:	f04f 0000 	mov.w	r0, #0
    2428:	bd30      	pop	{r4, r5, pc}
    242a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    242e:	bf1a      	itte	ne
    2430:	4619      	movne	r1, r3
    2432:	4610      	movne	r0, r2
    2434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    2438:	bf1c      	itt	ne
    243a:	460b      	movne	r3, r1
    243c:	4602      	movne	r2, r0
    243e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    2442:	bf06      	itte	eq
    2444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    2448:	ea91 0f03 	teqeq	r1, r3
    244c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    2450:	bd30      	pop	{r4, r5, pc}
    2452:	bf00      	nop

00002454 <__aeabi_ui2d>:
    2454:	f090 0f00 	teq	r0, #0
    2458:	bf04      	itt	eq
    245a:	2100      	moveq	r1, #0
    245c:	4770      	bxeq	lr
    245e:	b530      	push	{r4, r5, lr}
    2460:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2464:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2468:	f04f 0500 	mov.w	r5, #0
    246c:	f04f 0100 	mov.w	r1, #0
    2470:	e750      	b.n	2314 <__adddf3+0x138>
    2472:	bf00      	nop

00002474 <__aeabi_i2d>:
    2474:	f090 0f00 	teq	r0, #0
    2478:	bf04      	itt	eq
    247a:	2100      	moveq	r1, #0
    247c:	4770      	bxeq	lr
    247e:	b530      	push	{r4, r5, lr}
    2480:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2484:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    248c:	bf48      	it	mi
    248e:	4240      	negmi	r0, r0
    2490:	f04f 0100 	mov.w	r1, #0
    2494:	e73e      	b.n	2314 <__adddf3+0x138>
    2496:	bf00      	nop

00002498 <__aeabi_f2d>:
    2498:	0042      	lsls	r2, r0, #1
    249a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    249e:	ea4f 0131 	mov.w	r1, r1, rrx
    24a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    24a6:	bf1f      	itttt	ne
    24a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    24ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    24b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    24b4:	4770      	bxne	lr
    24b6:	f092 0f00 	teq	r2, #0
    24ba:	bf14      	ite	ne
    24bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    24c0:	4770      	bxeq	lr
    24c2:	b530      	push	{r4, r5, lr}
    24c4:	f44f 7460 	mov.w	r4, #896	; 0x380
    24c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    24cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    24d0:	e720      	b.n	2314 <__adddf3+0x138>
    24d2:	bf00      	nop

000024d4 <__aeabi_ul2d>:
    24d4:	ea50 0201 	orrs.w	r2, r0, r1
    24d8:	bf08      	it	eq
    24da:	4770      	bxeq	lr
    24dc:	b530      	push	{r4, r5, lr}
    24de:	f04f 0500 	mov.w	r5, #0
    24e2:	e00a      	b.n	24fa <__aeabi_l2d+0x16>

000024e4 <__aeabi_l2d>:
    24e4:	ea50 0201 	orrs.w	r2, r0, r1
    24e8:	bf08      	it	eq
    24ea:	4770      	bxeq	lr
    24ec:	b530      	push	{r4, r5, lr}
    24ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    24f2:	d502      	bpl.n	24fa <__aeabi_l2d+0x16>
    24f4:	4240      	negs	r0, r0
    24f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    24fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    24fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    2506:	f43f aedc 	beq.w	22c2 <__adddf3+0xe6>
    250a:	f04f 0203 	mov.w	r2, #3
    250e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    2512:	bf18      	it	ne
    2514:	3203      	addne	r2, #3
    2516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    251a:	bf18      	it	ne
    251c:	3203      	addne	r2, #3
    251e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    2522:	f1c2 0320 	rsb	r3, r2, #32
    2526:	fa00 fc03 	lsl.w	ip, r0, r3
    252a:	fa20 f002 	lsr.w	r0, r0, r2
    252e:	fa01 fe03 	lsl.w	lr, r1, r3
    2532:	ea40 000e 	orr.w	r0, r0, lr
    2536:	fa21 f102 	lsr.w	r1, r1, r2
    253a:	4414      	add	r4, r2
    253c:	e6c1      	b.n	22c2 <__adddf3+0xe6>
    253e:	bf00      	nop

00002540 <__aeabi_dmul>:
    2540:	b570      	push	{r4, r5, r6, lr}
    2542:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    254a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    254e:	bf1d      	ittte	ne
    2550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    2554:	ea94 0f0c 	teqne	r4, ip
    2558:	ea95 0f0c 	teqne	r5, ip
    255c:	f000 f8de 	bleq	271c <__aeabi_dmul+0x1dc>
    2560:	442c      	add	r4, r5
    2562:	ea81 0603 	eor.w	r6, r1, r3
    2566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    256a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    256e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    2572:	bf18      	it	ne
    2574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    2578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    257c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2580:	d038      	beq.n	25f4 <__aeabi_dmul+0xb4>
    2582:	fba0 ce02 	umull	ip, lr, r0, r2
    2586:	f04f 0500 	mov.w	r5, #0
    258a:	fbe1 e502 	umlal	lr, r5, r1, r2
    258e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    2592:	fbe0 e503 	umlal	lr, r5, r0, r3
    2596:	f04f 0600 	mov.w	r6, #0
    259a:	fbe1 5603 	umlal	r5, r6, r1, r3
    259e:	f09c 0f00 	teq	ip, #0
    25a2:	bf18      	it	ne
    25a4:	f04e 0e01 	orrne.w	lr, lr, #1
    25a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    25ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    25b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    25b4:	d204      	bcs.n	25c0 <__aeabi_dmul+0x80>
    25b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    25ba:	416d      	adcs	r5, r5
    25bc:	eb46 0606 	adc.w	r6, r6, r6
    25c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    25c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    25c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    25cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    25d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    25d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    25d8:	bf88      	it	hi
    25da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    25de:	d81e      	bhi.n	261e <__aeabi_dmul+0xde>
    25e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    25e4:	bf08      	it	eq
    25e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    25ea:	f150 0000 	adcs.w	r0, r0, #0
    25ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    25f2:	bd70      	pop	{r4, r5, r6, pc}
    25f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    25f8:	ea46 0101 	orr.w	r1, r6, r1
    25fc:	ea40 0002 	orr.w	r0, r0, r2
    2600:	ea81 0103 	eor.w	r1, r1, r3
    2604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    2608:	bfc2      	ittt	gt
    260a:	ebd4 050c 	rsbsgt	r5, r4, ip
    260e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    2612:	bd70      	popgt	{r4, r5, r6, pc}
    2614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2618:	f04f 0e00 	mov.w	lr, #0
    261c:	3c01      	subs	r4, #1
    261e:	f300 80ab 	bgt.w	2778 <__aeabi_dmul+0x238>
    2622:	f114 0f36 	cmn.w	r4, #54	; 0x36
    2626:	bfde      	ittt	le
    2628:	2000      	movle	r0, #0
    262a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    262e:	bd70      	pople	{r4, r5, r6, pc}
    2630:	f1c4 0400 	rsb	r4, r4, #0
    2634:	3c20      	subs	r4, #32
    2636:	da35      	bge.n	26a4 <__aeabi_dmul+0x164>
    2638:	340c      	adds	r4, #12
    263a:	dc1b      	bgt.n	2674 <__aeabi_dmul+0x134>
    263c:	f104 0414 	add.w	r4, r4, #20
    2640:	f1c4 0520 	rsb	r5, r4, #32
    2644:	fa00 f305 	lsl.w	r3, r0, r5
    2648:	fa20 f004 	lsr.w	r0, r0, r4
    264c:	fa01 f205 	lsl.w	r2, r1, r5
    2650:	ea40 0002 	orr.w	r0, r0, r2
    2654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    2658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    265c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    2660:	fa21 f604 	lsr.w	r6, r1, r4
    2664:	eb42 0106 	adc.w	r1, r2, r6
    2668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    266c:	bf08      	it	eq
    266e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    2672:	bd70      	pop	{r4, r5, r6, pc}
    2674:	f1c4 040c 	rsb	r4, r4, #12
    2678:	f1c4 0520 	rsb	r5, r4, #32
    267c:	fa00 f304 	lsl.w	r3, r0, r4
    2680:	fa20 f005 	lsr.w	r0, r0, r5
    2684:	fa01 f204 	lsl.w	r2, r1, r4
    2688:	ea40 0002 	orr.w	r0, r0, r2
    268c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    2694:	f141 0100 	adc.w	r1, r1, #0
    2698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    269c:	bf08      	it	eq
    269e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    26a2:	bd70      	pop	{r4, r5, r6, pc}
    26a4:	f1c4 0520 	rsb	r5, r4, #32
    26a8:	fa00 f205 	lsl.w	r2, r0, r5
    26ac:	ea4e 0e02 	orr.w	lr, lr, r2
    26b0:	fa20 f304 	lsr.w	r3, r0, r4
    26b4:	fa01 f205 	lsl.w	r2, r1, r5
    26b8:	ea43 0302 	orr.w	r3, r3, r2
    26bc:	fa21 f004 	lsr.w	r0, r1, r4
    26c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    26c4:	fa21 f204 	lsr.w	r2, r1, r4
    26c8:	ea20 0002 	bic.w	r0, r0, r2
    26cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    26d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    26d4:	bf08      	it	eq
    26d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    26da:	bd70      	pop	{r4, r5, r6, pc}
    26dc:	f094 0f00 	teq	r4, #0
    26e0:	d10f      	bne.n	2702 <__aeabi_dmul+0x1c2>
    26e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    26e6:	0040      	lsls	r0, r0, #1
    26e8:	eb41 0101 	adc.w	r1, r1, r1
    26ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    26f0:	bf08      	it	eq
    26f2:	3c01      	subeq	r4, #1
    26f4:	d0f7      	beq.n	26e6 <__aeabi_dmul+0x1a6>
    26f6:	ea41 0106 	orr.w	r1, r1, r6
    26fa:	f095 0f00 	teq	r5, #0
    26fe:	bf18      	it	ne
    2700:	4770      	bxne	lr
    2702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    2706:	0052      	lsls	r2, r2, #1
    2708:	eb43 0303 	adc.w	r3, r3, r3
    270c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    2710:	bf08      	it	eq
    2712:	3d01      	subeq	r5, #1
    2714:	d0f7      	beq.n	2706 <__aeabi_dmul+0x1c6>
    2716:	ea43 0306 	orr.w	r3, r3, r6
    271a:	4770      	bx	lr
    271c:	ea94 0f0c 	teq	r4, ip
    2720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    2724:	bf18      	it	ne
    2726:	ea95 0f0c 	teqne	r5, ip
    272a:	d00c      	beq.n	2746 <__aeabi_dmul+0x206>
    272c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2730:	bf18      	it	ne
    2732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2736:	d1d1      	bne.n	26dc <__aeabi_dmul+0x19c>
    2738:	ea81 0103 	eor.w	r1, r1, r3
    273c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2740:	f04f 0000 	mov.w	r0, #0
    2744:	bd70      	pop	{r4, r5, r6, pc}
    2746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    274a:	bf06      	itte	eq
    274c:	4610      	moveq	r0, r2
    274e:	4619      	moveq	r1, r3
    2750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2754:	d019      	beq.n	278a <__aeabi_dmul+0x24a>
    2756:	ea94 0f0c 	teq	r4, ip
    275a:	d102      	bne.n	2762 <__aeabi_dmul+0x222>
    275c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    2760:	d113      	bne.n	278a <__aeabi_dmul+0x24a>
    2762:	ea95 0f0c 	teq	r5, ip
    2766:	d105      	bne.n	2774 <__aeabi_dmul+0x234>
    2768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    276c:	bf1c      	itt	ne
    276e:	4610      	movne	r0, r2
    2770:	4619      	movne	r1, r3
    2772:	d10a      	bne.n	278a <__aeabi_dmul+0x24a>
    2774:	ea81 0103 	eor.w	r1, r1, r3
    2778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    277c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    2784:	f04f 0000 	mov.w	r0, #0
    2788:	bd70      	pop	{r4, r5, r6, pc}
    278a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    278e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    2792:	bd70      	pop	{r4, r5, r6, pc}

00002794 <__aeabi_ddiv>:
    2794:	b570      	push	{r4, r5, r6, lr}
    2796:	f04f 0cff 	mov.w	ip, #255	; 0xff
    279a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    279e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    27a2:	bf1d      	ittte	ne
    27a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    27a8:	ea94 0f0c 	teqne	r4, ip
    27ac:	ea95 0f0c 	teqne	r5, ip
    27b0:	f000 f8a7 	bleq	2902 <__aeabi_ddiv+0x16e>
    27b4:	eba4 0405 	sub.w	r4, r4, r5
    27b8:	ea81 0e03 	eor.w	lr, r1, r3
    27bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    27c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    27c4:	f000 8088 	beq.w	28d8 <__aeabi_ddiv+0x144>
    27c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    27cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    27d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    27d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    27d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    27dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    27e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    27e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    27e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    27ec:	429d      	cmp	r5, r3
    27ee:	bf08      	it	eq
    27f0:	4296      	cmpeq	r6, r2
    27f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    27f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    27fa:	d202      	bcs.n	2802 <__aeabi_ddiv+0x6e>
    27fc:	085b      	lsrs	r3, r3, #1
    27fe:	ea4f 0232 	mov.w	r2, r2, rrx
    2802:	1ab6      	subs	r6, r6, r2
    2804:	eb65 0503 	sbc.w	r5, r5, r3
    2808:	085b      	lsrs	r3, r3, #1
    280a:	ea4f 0232 	mov.w	r2, r2, rrx
    280e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    2812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    2816:	ebb6 0e02 	subs.w	lr, r6, r2
    281a:	eb75 0e03 	sbcs.w	lr, r5, r3
    281e:	bf22      	ittt	cs
    2820:	1ab6      	subcs	r6, r6, r2
    2822:	4675      	movcs	r5, lr
    2824:	ea40 000c 	orrcs.w	r0, r0, ip
    2828:	085b      	lsrs	r3, r3, #1
    282a:	ea4f 0232 	mov.w	r2, r2, rrx
    282e:	ebb6 0e02 	subs.w	lr, r6, r2
    2832:	eb75 0e03 	sbcs.w	lr, r5, r3
    2836:	bf22      	ittt	cs
    2838:	1ab6      	subcs	r6, r6, r2
    283a:	4675      	movcs	r5, lr
    283c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    2840:	085b      	lsrs	r3, r3, #1
    2842:	ea4f 0232 	mov.w	r2, r2, rrx
    2846:	ebb6 0e02 	subs.w	lr, r6, r2
    284a:	eb75 0e03 	sbcs.w	lr, r5, r3
    284e:	bf22      	ittt	cs
    2850:	1ab6      	subcs	r6, r6, r2
    2852:	4675      	movcs	r5, lr
    2854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2858:	085b      	lsrs	r3, r3, #1
    285a:	ea4f 0232 	mov.w	r2, r2, rrx
    285e:	ebb6 0e02 	subs.w	lr, r6, r2
    2862:	eb75 0e03 	sbcs.w	lr, r5, r3
    2866:	bf22      	ittt	cs
    2868:	1ab6      	subcs	r6, r6, r2
    286a:	4675      	movcs	r5, lr
    286c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2870:	ea55 0e06 	orrs.w	lr, r5, r6
    2874:	d018      	beq.n	28a8 <__aeabi_ddiv+0x114>
    2876:	ea4f 1505 	mov.w	r5, r5, lsl #4
    287a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    287e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    2882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    288a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    288e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    2892:	d1c0      	bne.n	2816 <__aeabi_ddiv+0x82>
    2894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2898:	d10b      	bne.n	28b2 <__aeabi_ddiv+0x11e>
    289a:	ea41 0100 	orr.w	r1, r1, r0
    289e:	f04f 0000 	mov.w	r0, #0
    28a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    28a6:	e7b6      	b.n	2816 <__aeabi_ddiv+0x82>
    28a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    28ac:	bf04      	itt	eq
    28ae:	4301      	orreq	r1, r0
    28b0:	2000      	moveq	r0, #0
    28b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    28b6:	bf88      	it	hi
    28b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    28bc:	f63f aeaf 	bhi.w	261e <__aeabi_dmul+0xde>
    28c0:	ebb5 0c03 	subs.w	ip, r5, r3
    28c4:	bf04      	itt	eq
    28c6:	ebb6 0c02 	subseq.w	ip, r6, r2
    28ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    28ce:	f150 0000 	adcs.w	r0, r0, #0
    28d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    28d6:	bd70      	pop	{r4, r5, r6, pc}
    28d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    28dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    28e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    28e4:	bfc2      	ittt	gt
    28e6:	ebd4 050c 	rsbsgt	r5, r4, ip
    28ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    28ee:	bd70      	popgt	{r4, r5, r6, pc}
    28f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    28f4:	f04f 0e00 	mov.w	lr, #0
    28f8:	3c01      	subs	r4, #1
    28fa:	e690      	b.n	261e <__aeabi_dmul+0xde>
    28fc:	ea45 0e06 	orr.w	lr, r5, r6
    2900:	e68d      	b.n	261e <__aeabi_dmul+0xde>
    2902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    2906:	ea94 0f0c 	teq	r4, ip
    290a:	bf08      	it	eq
    290c:	ea95 0f0c 	teqeq	r5, ip
    2910:	f43f af3b 	beq.w	278a <__aeabi_dmul+0x24a>
    2914:	ea94 0f0c 	teq	r4, ip
    2918:	d10a      	bne.n	2930 <__aeabi_ddiv+0x19c>
    291a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    291e:	f47f af34 	bne.w	278a <__aeabi_dmul+0x24a>
    2922:	ea95 0f0c 	teq	r5, ip
    2926:	f47f af25 	bne.w	2774 <__aeabi_dmul+0x234>
    292a:	4610      	mov	r0, r2
    292c:	4619      	mov	r1, r3
    292e:	e72c      	b.n	278a <__aeabi_dmul+0x24a>
    2930:	ea95 0f0c 	teq	r5, ip
    2934:	d106      	bne.n	2944 <__aeabi_ddiv+0x1b0>
    2936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    293a:	f43f aefd 	beq.w	2738 <__aeabi_dmul+0x1f8>
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	e722      	b.n	278a <__aeabi_dmul+0x24a>
    2944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2948:	bf18      	it	ne
    294a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    294e:	f47f aec5 	bne.w	26dc <__aeabi_dmul+0x19c>
    2952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    2956:	f47f af0d 	bne.w	2774 <__aeabi_dmul+0x234>
    295a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    295e:	f47f aeeb 	bne.w	2738 <__aeabi_dmul+0x1f8>
    2962:	e712      	b.n	278a <__aeabi_dmul+0x24a>

00002964 <__aeabi_d2uiz>:
    2964:	004a      	lsls	r2, r1, #1
    2966:	d211      	bcs.n	298c <__aeabi_d2uiz+0x28>
    2968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    296c:	d211      	bcs.n	2992 <__aeabi_d2uiz+0x2e>
    296e:	d50d      	bpl.n	298c <__aeabi_d2uiz+0x28>
    2970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    2974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    2978:	d40e      	bmi.n	2998 <__aeabi_d2uiz+0x34>
    297a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    297e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    2986:	fa23 f002 	lsr.w	r0, r3, r2
    298a:	4770      	bx	lr
    298c:	f04f 0000 	mov.w	r0, #0
    2990:	4770      	bx	lr
    2992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    2996:	d102      	bne.n	299e <__aeabi_d2uiz+0x3a>
    2998:	f04f 30ff 	mov.w	r0, #4294967295
    299c:	4770      	bx	lr
    299e:	f04f 0000 	mov.w	r0, #0
    29a2:	4770      	bx	lr

000029a4 <__aeabi_d2f>:
    29a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    29a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    29ac:	bf24      	itt	cs
    29ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    29b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    29b6:	d90d      	bls.n	29d4 <__aeabi_d2f+0x30>
    29b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    29bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    29c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    29c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    29c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    29cc:	bf08      	it	eq
    29ce:	f020 0001 	biceq.w	r0, r0, #1
    29d2:	4770      	bx	lr
    29d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    29d8:	d121      	bne.n	2a1e <__aeabi_d2f+0x7a>
    29da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    29de:	bfbc      	itt	lt
    29e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    29e4:	4770      	bxlt	lr
    29e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    29ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
    29ee:	f1c2 0218 	rsb	r2, r2, #24
    29f2:	f1c2 0c20 	rsb	ip, r2, #32
    29f6:	fa10 f30c 	lsls.w	r3, r0, ip
    29fa:	fa20 f002 	lsr.w	r0, r0, r2
    29fe:	bf18      	it	ne
    2a00:	f040 0001 	orrne.w	r0, r0, #1
    2a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    2a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    2a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
    2a10:	ea40 000c 	orr.w	r0, r0, ip
    2a14:	fa23 f302 	lsr.w	r3, r3, r2
    2a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2a1c:	e7cc      	b.n	29b8 <__aeabi_d2f+0x14>
    2a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    2a22:	d107      	bne.n	2a34 <__aeabi_d2f+0x90>
    2a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    2a28:	bf1e      	ittt	ne
    2a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    2a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    2a32:	4770      	bxne	lr
    2a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    2a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop

00002a44 <__libc_init_array>:
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	4e0d      	ldr	r6, [pc, #52]	; (2a7c <__libc_init_array+0x38>)
    2a48:	4c0d      	ldr	r4, [pc, #52]	; (2a80 <__libc_init_array+0x3c>)
    2a4a:	1ba4      	subs	r4, r4, r6
    2a4c:	10a4      	asrs	r4, r4, #2
    2a4e:	2500      	movs	r5, #0
    2a50:	42a5      	cmp	r5, r4
    2a52:	d109      	bne.n	2a68 <__libc_init_array+0x24>
    2a54:	4e0b      	ldr	r6, [pc, #44]	; (2a84 <__libc_init_array+0x40>)
    2a56:	4c0c      	ldr	r4, [pc, #48]	; (2a88 <__libc_init_array+0x44>)
    2a58:	f000 fe34 	bl	36c4 <_init>
    2a5c:	1ba4      	subs	r4, r4, r6
    2a5e:	10a4      	asrs	r4, r4, #2
    2a60:	2500      	movs	r5, #0
    2a62:	42a5      	cmp	r5, r4
    2a64:	d105      	bne.n	2a72 <__libc_init_array+0x2e>
    2a66:	bd70      	pop	{r4, r5, r6, pc}
    2a68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2a6c:	4798      	blx	r3
    2a6e:	3501      	adds	r5, #1
    2a70:	e7ee      	b.n	2a50 <__libc_init_array+0xc>
    2a72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2a76:	4798      	blx	r3
    2a78:	3501      	adds	r5, #1
    2a7a:	e7f2      	b.n	2a62 <__libc_init_array+0x1e>
    2a7c:	000036d0 	.word	0x000036d0
    2a80:	000036d0 	.word	0x000036d0
    2a84:	000036d0 	.word	0x000036d0
    2a88:	000036d4 	.word	0x000036d4

00002a8c <siprintf>:
    2a8c:	b40e      	push	{r1, r2, r3}
    2a8e:	b500      	push	{lr}
    2a90:	b09c      	sub	sp, #112	; 0x70
    2a92:	f44f 7102 	mov.w	r1, #520	; 0x208
    2a96:	ab1d      	add	r3, sp, #116	; 0x74
    2a98:	f8ad 1014 	strh.w	r1, [sp, #20]
    2a9c:	9002      	str	r0, [sp, #8]
    2a9e:	9006      	str	r0, [sp, #24]
    2aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2aa4:	480a      	ldr	r0, [pc, #40]	; (2ad0 <siprintf+0x44>)
    2aa6:	9104      	str	r1, [sp, #16]
    2aa8:	9107      	str	r1, [sp, #28]
    2aaa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2aae:	f853 2b04 	ldr.w	r2, [r3], #4
    2ab2:	f8ad 1016 	strh.w	r1, [sp, #22]
    2ab6:	6800      	ldr	r0, [r0, #0]
    2ab8:	9301      	str	r3, [sp, #4]
    2aba:	a902      	add	r1, sp, #8
    2abc:	f000 f8c4 	bl	2c48 <_svfiprintf_r>
    2ac0:	9b02      	ldr	r3, [sp, #8]
    2ac2:	2200      	movs	r2, #0
    2ac4:	701a      	strb	r2, [r3, #0]
    2ac6:	b01c      	add	sp, #112	; 0x70
    2ac8:	f85d eb04 	ldr.w	lr, [sp], #4
    2acc:	b003      	add	sp, #12
    2ace:	4770      	bx	lr
    2ad0:	20000050 	.word	0x20000050

00002ad4 <_malloc_r>:
    2ad4:	b570      	push	{r4, r5, r6, lr}
    2ad6:	1ccd      	adds	r5, r1, #3
    2ad8:	f025 0503 	bic.w	r5, r5, #3
    2adc:	3508      	adds	r5, #8
    2ade:	2d0c      	cmp	r5, #12
    2ae0:	bf38      	it	cc
    2ae2:	250c      	movcc	r5, #12
    2ae4:	2d00      	cmp	r5, #0
    2ae6:	4606      	mov	r6, r0
    2ae8:	db01      	blt.n	2aee <_malloc_r+0x1a>
    2aea:	42a9      	cmp	r1, r5
    2aec:	d903      	bls.n	2af6 <_malloc_r+0x22>
    2aee:	230c      	movs	r3, #12
    2af0:	6033      	str	r3, [r6, #0]
    2af2:	2000      	movs	r0, #0
    2af4:	bd70      	pop	{r4, r5, r6, pc}
    2af6:	f000 fbb8 	bl	326a <__malloc_lock>
    2afa:	4a23      	ldr	r2, [pc, #140]	; (2b88 <_malloc_r+0xb4>)
    2afc:	6814      	ldr	r4, [r2, #0]
    2afe:	4621      	mov	r1, r4
    2b00:	b991      	cbnz	r1, 2b28 <_malloc_r+0x54>
    2b02:	4c22      	ldr	r4, [pc, #136]	; (2b8c <_malloc_r+0xb8>)
    2b04:	6823      	ldr	r3, [r4, #0]
    2b06:	b91b      	cbnz	r3, 2b10 <_malloc_r+0x3c>
    2b08:	4630      	mov	r0, r6
    2b0a:	f000 fb27 	bl	315c <_sbrk_r>
    2b0e:	6020      	str	r0, [r4, #0]
    2b10:	4629      	mov	r1, r5
    2b12:	4630      	mov	r0, r6
    2b14:	f000 fb22 	bl	315c <_sbrk_r>
    2b18:	1c43      	adds	r3, r0, #1
    2b1a:	d126      	bne.n	2b6a <_malloc_r+0x96>
    2b1c:	230c      	movs	r3, #12
    2b1e:	6033      	str	r3, [r6, #0]
    2b20:	4630      	mov	r0, r6
    2b22:	f000 fba3 	bl	326c <__malloc_unlock>
    2b26:	e7e4      	b.n	2af2 <_malloc_r+0x1e>
    2b28:	680b      	ldr	r3, [r1, #0]
    2b2a:	1b5b      	subs	r3, r3, r5
    2b2c:	d41a      	bmi.n	2b64 <_malloc_r+0x90>
    2b2e:	2b0b      	cmp	r3, #11
    2b30:	d90f      	bls.n	2b52 <_malloc_r+0x7e>
    2b32:	600b      	str	r3, [r1, #0]
    2b34:	50cd      	str	r5, [r1, r3]
    2b36:	18cc      	adds	r4, r1, r3
    2b38:	4630      	mov	r0, r6
    2b3a:	f000 fb97 	bl	326c <__malloc_unlock>
    2b3e:	f104 000b 	add.w	r0, r4, #11
    2b42:	1d23      	adds	r3, r4, #4
    2b44:	f020 0007 	bic.w	r0, r0, #7
    2b48:	1ac3      	subs	r3, r0, r3
    2b4a:	d01b      	beq.n	2b84 <_malloc_r+0xb0>
    2b4c:	425a      	negs	r2, r3
    2b4e:	50e2      	str	r2, [r4, r3]
    2b50:	bd70      	pop	{r4, r5, r6, pc}
    2b52:	428c      	cmp	r4, r1
    2b54:	bf0d      	iteet	eq
    2b56:	6863      	ldreq	r3, [r4, #4]
    2b58:	684b      	ldrne	r3, [r1, #4]
    2b5a:	6063      	strne	r3, [r4, #4]
    2b5c:	6013      	streq	r3, [r2, #0]
    2b5e:	bf18      	it	ne
    2b60:	460c      	movne	r4, r1
    2b62:	e7e9      	b.n	2b38 <_malloc_r+0x64>
    2b64:	460c      	mov	r4, r1
    2b66:	6849      	ldr	r1, [r1, #4]
    2b68:	e7ca      	b.n	2b00 <_malloc_r+0x2c>
    2b6a:	1cc4      	adds	r4, r0, #3
    2b6c:	f024 0403 	bic.w	r4, r4, #3
    2b70:	42a0      	cmp	r0, r4
    2b72:	d005      	beq.n	2b80 <_malloc_r+0xac>
    2b74:	1a21      	subs	r1, r4, r0
    2b76:	4630      	mov	r0, r6
    2b78:	f000 faf0 	bl	315c <_sbrk_r>
    2b7c:	3001      	adds	r0, #1
    2b7e:	d0cd      	beq.n	2b1c <_malloc_r+0x48>
    2b80:	6025      	str	r5, [r4, #0]
    2b82:	e7d9      	b.n	2b38 <_malloc_r+0x64>
    2b84:	bd70      	pop	{r4, r5, r6, pc}
    2b86:	bf00      	nop
    2b88:	20000178 	.word	0x20000178
    2b8c:	2000017c 	.word	0x2000017c

00002b90 <__ssputs_r>:
    2b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b94:	688e      	ldr	r6, [r1, #8]
    2b96:	429e      	cmp	r6, r3
    2b98:	4682      	mov	sl, r0
    2b9a:	460c      	mov	r4, r1
    2b9c:	4691      	mov	r9, r2
    2b9e:	4698      	mov	r8, r3
    2ba0:	d835      	bhi.n	2c0e <__ssputs_r+0x7e>
    2ba2:	898a      	ldrh	r2, [r1, #12]
    2ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    2ba8:	d031      	beq.n	2c0e <__ssputs_r+0x7e>
    2baa:	6825      	ldr	r5, [r4, #0]
    2bac:	6909      	ldr	r1, [r1, #16]
    2bae:	1a6f      	subs	r7, r5, r1
    2bb0:	6965      	ldr	r5, [r4, #20]
    2bb2:	2302      	movs	r3, #2
    2bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2bb8:	fb95 f5f3 	sdiv	r5, r5, r3
    2bbc:	f108 0301 	add.w	r3, r8, #1
    2bc0:	443b      	add	r3, r7
    2bc2:	429d      	cmp	r5, r3
    2bc4:	bf38      	it	cc
    2bc6:	461d      	movcc	r5, r3
    2bc8:	0553      	lsls	r3, r2, #21
    2bca:	d531      	bpl.n	2c30 <__ssputs_r+0xa0>
    2bcc:	4629      	mov	r1, r5
    2bce:	f7ff ff81 	bl	2ad4 <_malloc_r>
    2bd2:	4606      	mov	r6, r0
    2bd4:	b950      	cbnz	r0, 2bec <__ssputs_r+0x5c>
    2bd6:	230c      	movs	r3, #12
    2bd8:	f8ca 3000 	str.w	r3, [sl]
    2bdc:	89a3      	ldrh	r3, [r4, #12]
    2bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2be2:	81a3      	strh	r3, [r4, #12]
    2be4:	f04f 30ff 	mov.w	r0, #4294967295
    2be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bec:	463a      	mov	r2, r7
    2bee:	6921      	ldr	r1, [r4, #16]
    2bf0:	f000 fb16 	bl	3220 <memcpy>
    2bf4:	89a3      	ldrh	r3, [r4, #12]
    2bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    2bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2bfe:	81a3      	strh	r3, [r4, #12]
    2c00:	6126      	str	r6, [r4, #16]
    2c02:	6165      	str	r5, [r4, #20]
    2c04:	443e      	add	r6, r7
    2c06:	1bed      	subs	r5, r5, r7
    2c08:	6026      	str	r6, [r4, #0]
    2c0a:	60a5      	str	r5, [r4, #8]
    2c0c:	4646      	mov	r6, r8
    2c0e:	4546      	cmp	r6, r8
    2c10:	bf28      	it	cs
    2c12:	4646      	movcs	r6, r8
    2c14:	4632      	mov	r2, r6
    2c16:	4649      	mov	r1, r9
    2c18:	6820      	ldr	r0, [r4, #0]
    2c1a:	f000 fb0c 	bl	3236 <memmove>
    2c1e:	68a3      	ldr	r3, [r4, #8]
    2c20:	1b9b      	subs	r3, r3, r6
    2c22:	60a3      	str	r3, [r4, #8]
    2c24:	6823      	ldr	r3, [r4, #0]
    2c26:	441e      	add	r6, r3
    2c28:	6026      	str	r6, [r4, #0]
    2c2a:	2000      	movs	r0, #0
    2c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c30:	462a      	mov	r2, r5
    2c32:	f000 fb6b 	bl	330c <_realloc_r>
    2c36:	4606      	mov	r6, r0
    2c38:	2800      	cmp	r0, #0
    2c3a:	d1e1      	bne.n	2c00 <__ssputs_r+0x70>
    2c3c:	6921      	ldr	r1, [r4, #16]
    2c3e:	4650      	mov	r0, sl
    2c40:	f000 fb16 	bl	3270 <_free_r>
    2c44:	e7c7      	b.n	2bd6 <__ssputs_r+0x46>
	...

00002c48 <_svfiprintf_r>:
    2c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c4c:	b09d      	sub	sp, #116	; 0x74
    2c4e:	4680      	mov	r8, r0
    2c50:	9303      	str	r3, [sp, #12]
    2c52:	898b      	ldrh	r3, [r1, #12]
    2c54:	061c      	lsls	r4, r3, #24
    2c56:	460d      	mov	r5, r1
    2c58:	4616      	mov	r6, r2
    2c5a:	d50f      	bpl.n	2c7c <_svfiprintf_r+0x34>
    2c5c:	690b      	ldr	r3, [r1, #16]
    2c5e:	b96b      	cbnz	r3, 2c7c <_svfiprintf_r+0x34>
    2c60:	2140      	movs	r1, #64	; 0x40
    2c62:	f7ff ff37 	bl	2ad4 <_malloc_r>
    2c66:	6028      	str	r0, [r5, #0]
    2c68:	6128      	str	r0, [r5, #16]
    2c6a:	b928      	cbnz	r0, 2c78 <_svfiprintf_r+0x30>
    2c6c:	230c      	movs	r3, #12
    2c6e:	f8c8 3000 	str.w	r3, [r8]
    2c72:	f04f 30ff 	mov.w	r0, #4294967295
    2c76:	e0c5      	b.n	2e04 <_svfiprintf_r+0x1bc>
    2c78:	2340      	movs	r3, #64	; 0x40
    2c7a:	616b      	str	r3, [r5, #20]
    2c7c:	2300      	movs	r3, #0
    2c7e:	9309      	str	r3, [sp, #36]	; 0x24
    2c80:	2320      	movs	r3, #32
    2c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2c86:	2330      	movs	r3, #48	; 0x30
    2c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2c8c:	f04f 0b01 	mov.w	fp, #1
    2c90:	4637      	mov	r7, r6
    2c92:	463c      	mov	r4, r7
    2c94:	f814 3b01 	ldrb.w	r3, [r4], #1
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d13c      	bne.n	2d16 <_svfiprintf_r+0xce>
    2c9c:	ebb7 0a06 	subs.w	sl, r7, r6
    2ca0:	d00b      	beq.n	2cba <_svfiprintf_r+0x72>
    2ca2:	4653      	mov	r3, sl
    2ca4:	4632      	mov	r2, r6
    2ca6:	4629      	mov	r1, r5
    2ca8:	4640      	mov	r0, r8
    2caa:	f7ff ff71 	bl	2b90 <__ssputs_r>
    2cae:	3001      	adds	r0, #1
    2cb0:	f000 80a3 	beq.w	2dfa <_svfiprintf_r+0x1b2>
    2cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2cb6:	4453      	add	r3, sl
    2cb8:	9309      	str	r3, [sp, #36]	; 0x24
    2cba:	783b      	ldrb	r3, [r7, #0]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	f000 809c 	beq.w	2dfa <_svfiprintf_r+0x1b2>
    2cc2:	2300      	movs	r3, #0
    2cc4:	f04f 32ff 	mov.w	r2, #4294967295
    2cc8:	9304      	str	r3, [sp, #16]
    2cca:	9307      	str	r3, [sp, #28]
    2ccc:	9205      	str	r2, [sp, #20]
    2cce:	9306      	str	r3, [sp, #24]
    2cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2cd4:	931a      	str	r3, [sp, #104]	; 0x68
    2cd6:	2205      	movs	r2, #5
    2cd8:	7821      	ldrb	r1, [r4, #0]
    2cda:	4850      	ldr	r0, [pc, #320]	; (2e1c <_svfiprintf_r+0x1d4>)
    2cdc:	f000 fa50 	bl	3180 <memchr>
    2ce0:	1c67      	adds	r7, r4, #1
    2ce2:	9b04      	ldr	r3, [sp, #16]
    2ce4:	b9d8      	cbnz	r0, 2d1e <_svfiprintf_r+0xd6>
    2ce6:	06d9      	lsls	r1, r3, #27
    2ce8:	bf44      	itt	mi
    2cea:	2220      	movmi	r2, #32
    2cec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2cf0:	071a      	lsls	r2, r3, #28
    2cf2:	bf44      	itt	mi
    2cf4:	222b      	movmi	r2, #43	; 0x2b
    2cf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2cfa:	7822      	ldrb	r2, [r4, #0]
    2cfc:	2a2a      	cmp	r2, #42	; 0x2a
    2cfe:	d016      	beq.n	2d2e <_svfiprintf_r+0xe6>
    2d00:	9a07      	ldr	r2, [sp, #28]
    2d02:	2100      	movs	r1, #0
    2d04:	200a      	movs	r0, #10
    2d06:	4627      	mov	r7, r4
    2d08:	3401      	adds	r4, #1
    2d0a:	783b      	ldrb	r3, [r7, #0]
    2d0c:	3b30      	subs	r3, #48	; 0x30
    2d0e:	2b09      	cmp	r3, #9
    2d10:	d951      	bls.n	2db6 <_svfiprintf_r+0x16e>
    2d12:	b1c9      	cbz	r1, 2d48 <_svfiprintf_r+0x100>
    2d14:	e011      	b.n	2d3a <_svfiprintf_r+0xf2>
    2d16:	2b25      	cmp	r3, #37	; 0x25
    2d18:	d0c0      	beq.n	2c9c <_svfiprintf_r+0x54>
    2d1a:	4627      	mov	r7, r4
    2d1c:	e7b9      	b.n	2c92 <_svfiprintf_r+0x4a>
    2d1e:	4a3f      	ldr	r2, [pc, #252]	; (2e1c <_svfiprintf_r+0x1d4>)
    2d20:	1a80      	subs	r0, r0, r2
    2d22:	fa0b f000 	lsl.w	r0, fp, r0
    2d26:	4318      	orrs	r0, r3
    2d28:	9004      	str	r0, [sp, #16]
    2d2a:	463c      	mov	r4, r7
    2d2c:	e7d3      	b.n	2cd6 <_svfiprintf_r+0x8e>
    2d2e:	9a03      	ldr	r2, [sp, #12]
    2d30:	1d11      	adds	r1, r2, #4
    2d32:	6812      	ldr	r2, [r2, #0]
    2d34:	9103      	str	r1, [sp, #12]
    2d36:	2a00      	cmp	r2, #0
    2d38:	db01      	blt.n	2d3e <_svfiprintf_r+0xf6>
    2d3a:	9207      	str	r2, [sp, #28]
    2d3c:	e004      	b.n	2d48 <_svfiprintf_r+0x100>
    2d3e:	4252      	negs	r2, r2
    2d40:	f043 0302 	orr.w	r3, r3, #2
    2d44:	9207      	str	r2, [sp, #28]
    2d46:	9304      	str	r3, [sp, #16]
    2d48:	783b      	ldrb	r3, [r7, #0]
    2d4a:	2b2e      	cmp	r3, #46	; 0x2e
    2d4c:	d10e      	bne.n	2d6c <_svfiprintf_r+0x124>
    2d4e:	787b      	ldrb	r3, [r7, #1]
    2d50:	2b2a      	cmp	r3, #42	; 0x2a
    2d52:	f107 0101 	add.w	r1, r7, #1
    2d56:	d132      	bne.n	2dbe <_svfiprintf_r+0x176>
    2d58:	9b03      	ldr	r3, [sp, #12]
    2d5a:	1d1a      	adds	r2, r3, #4
    2d5c:	681b      	ldr	r3, [r3, #0]
    2d5e:	9203      	str	r2, [sp, #12]
    2d60:	2b00      	cmp	r3, #0
    2d62:	bfb8      	it	lt
    2d64:	f04f 33ff 	movlt.w	r3, #4294967295
    2d68:	3702      	adds	r7, #2
    2d6a:	9305      	str	r3, [sp, #20]
    2d6c:	4c2c      	ldr	r4, [pc, #176]	; (2e20 <_svfiprintf_r+0x1d8>)
    2d6e:	7839      	ldrb	r1, [r7, #0]
    2d70:	2203      	movs	r2, #3
    2d72:	4620      	mov	r0, r4
    2d74:	f000 fa04 	bl	3180 <memchr>
    2d78:	b138      	cbz	r0, 2d8a <_svfiprintf_r+0x142>
    2d7a:	2340      	movs	r3, #64	; 0x40
    2d7c:	1b00      	subs	r0, r0, r4
    2d7e:	fa03 f000 	lsl.w	r0, r3, r0
    2d82:	9b04      	ldr	r3, [sp, #16]
    2d84:	4303      	orrs	r3, r0
    2d86:	9304      	str	r3, [sp, #16]
    2d88:	3701      	adds	r7, #1
    2d8a:	7839      	ldrb	r1, [r7, #0]
    2d8c:	4825      	ldr	r0, [pc, #148]	; (2e24 <_svfiprintf_r+0x1dc>)
    2d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2d92:	2206      	movs	r2, #6
    2d94:	1c7e      	adds	r6, r7, #1
    2d96:	f000 f9f3 	bl	3180 <memchr>
    2d9a:	2800      	cmp	r0, #0
    2d9c:	d035      	beq.n	2e0a <_svfiprintf_r+0x1c2>
    2d9e:	4b22      	ldr	r3, [pc, #136]	; (2e28 <_svfiprintf_r+0x1e0>)
    2da0:	b9fb      	cbnz	r3, 2de2 <_svfiprintf_r+0x19a>
    2da2:	9b03      	ldr	r3, [sp, #12]
    2da4:	3307      	adds	r3, #7
    2da6:	f023 0307 	bic.w	r3, r3, #7
    2daa:	3308      	adds	r3, #8
    2dac:	9303      	str	r3, [sp, #12]
    2dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2db0:	444b      	add	r3, r9
    2db2:	9309      	str	r3, [sp, #36]	; 0x24
    2db4:	e76c      	b.n	2c90 <_svfiprintf_r+0x48>
    2db6:	fb00 3202 	mla	r2, r0, r2, r3
    2dba:	2101      	movs	r1, #1
    2dbc:	e7a3      	b.n	2d06 <_svfiprintf_r+0xbe>
    2dbe:	2300      	movs	r3, #0
    2dc0:	9305      	str	r3, [sp, #20]
    2dc2:	4618      	mov	r0, r3
    2dc4:	240a      	movs	r4, #10
    2dc6:	460f      	mov	r7, r1
    2dc8:	3101      	adds	r1, #1
    2dca:	783a      	ldrb	r2, [r7, #0]
    2dcc:	3a30      	subs	r2, #48	; 0x30
    2dce:	2a09      	cmp	r2, #9
    2dd0:	d903      	bls.n	2dda <_svfiprintf_r+0x192>
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d0ca      	beq.n	2d6c <_svfiprintf_r+0x124>
    2dd6:	9005      	str	r0, [sp, #20]
    2dd8:	e7c8      	b.n	2d6c <_svfiprintf_r+0x124>
    2dda:	fb04 2000 	mla	r0, r4, r0, r2
    2dde:	2301      	movs	r3, #1
    2de0:	e7f1      	b.n	2dc6 <_svfiprintf_r+0x17e>
    2de2:	ab03      	add	r3, sp, #12
    2de4:	9300      	str	r3, [sp, #0]
    2de6:	462a      	mov	r2, r5
    2de8:	4b10      	ldr	r3, [pc, #64]	; (2e2c <_svfiprintf_r+0x1e4>)
    2dea:	a904      	add	r1, sp, #16
    2dec:	4640      	mov	r0, r8
    2dee:	f3af 8000 	nop.w
    2df2:	f1b0 3fff 	cmp.w	r0, #4294967295
    2df6:	4681      	mov	r9, r0
    2df8:	d1d9      	bne.n	2dae <_svfiprintf_r+0x166>
    2dfa:	89ab      	ldrh	r3, [r5, #12]
    2dfc:	065b      	lsls	r3, r3, #25
    2dfe:	f53f af38 	bmi.w	2c72 <_svfiprintf_r+0x2a>
    2e02:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e04:	b01d      	add	sp, #116	; 0x74
    2e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e0a:	ab03      	add	r3, sp, #12
    2e0c:	9300      	str	r3, [sp, #0]
    2e0e:	462a      	mov	r2, r5
    2e10:	4b06      	ldr	r3, [pc, #24]	; (2e2c <_svfiprintf_r+0x1e4>)
    2e12:	a904      	add	r1, sp, #16
    2e14:	4640      	mov	r0, r8
    2e16:	f000 f881 	bl	2f1c <_printf_i>
    2e1a:	e7ea      	b.n	2df2 <_svfiprintf_r+0x1aa>
    2e1c:	00003690 	.word	0x00003690
    2e20:	00003696 	.word	0x00003696
    2e24:	0000369a 	.word	0x0000369a
    2e28:	00000000 	.word	0x00000000
    2e2c:	00002b91 	.word	0x00002b91

00002e30 <_printf_common>:
    2e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e34:	4691      	mov	r9, r2
    2e36:	461f      	mov	r7, r3
    2e38:	688a      	ldr	r2, [r1, #8]
    2e3a:	690b      	ldr	r3, [r1, #16]
    2e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2e40:	4293      	cmp	r3, r2
    2e42:	bfb8      	it	lt
    2e44:	4613      	movlt	r3, r2
    2e46:	f8c9 3000 	str.w	r3, [r9]
    2e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2e4e:	4606      	mov	r6, r0
    2e50:	460c      	mov	r4, r1
    2e52:	b112      	cbz	r2, 2e5a <_printf_common+0x2a>
    2e54:	3301      	adds	r3, #1
    2e56:	f8c9 3000 	str.w	r3, [r9]
    2e5a:	6823      	ldr	r3, [r4, #0]
    2e5c:	0699      	lsls	r1, r3, #26
    2e5e:	bf42      	ittt	mi
    2e60:	f8d9 3000 	ldrmi.w	r3, [r9]
    2e64:	3302      	addmi	r3, #2
    2e66:	f8c9 3000 	strmi.w	r3, [r9]
    2e6a:	6825      	ldr	r5, [r4, #0]
    2e6c:	f015 0506 	ands.w	r5, r5, #6
    2e70:	d107      	bne.n	2e82 <_printf_common+0x52>
    2e72:	f104 0a19 	add.w	sl, r4, #25
    2e76:	68e3      	ldr	r3, [r4, #12]
    2e78:	f8d9 2000 	ldr.w	r2, [r9]
    2e7c:	1a9b      	subs	r3, r3, r2
    2e7e:	429d      	cmp	r5, r3
    2e80:	db29      	blt.n	2ed6 <_printf_common+0xa6>
    2e82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2e86:	6822      	ldr	r2, [r4, #0]
    2e88:	3300      	adds	r3, #0
    2e8a:	bf18      	it	ne
    2e8c:	2301      	movne	r3, #1
    2e8e:	0692      	lsls	r2, r2, #26
    2e90:	d42e      	bmi.n	2ef0 <_printf_common+0xc0>
    2e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2e96:	4639      	mov	r1, r7
    2e98:	4630      	mov	r0, r6
    2e9a:	47c0      	blx	r8
    2e9c:	3001      	adds	r0, #1
    2e9e:	d021      	beq.n	2ee4 <_printf_common+0xb4>
    2ea0:	6823      	ldr	r3, [r4, #0]
    2ea2:	68e5      	ldr	r5, [r4, #12]
    2ea4:	f8d9 2000 	ldr.w	r2, [r9]
    2ea8:	f003 0306 	and.w	r3, r3, #6
    2eac:	2b04      	cmp	r3, #4
    2eae:	bf08      	it	eq
    2eb0:	1aad      	subeq	r5, r5, r2
    2eb2:	68a3      	ldr	r3, [r4, #8]
    2eb4:	6922      	ldr	r2, [r4, #16]
    2eb6:	bf0c      	ite	eq
    2eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2ebc:	2500      	movne	r5, #0
    2ebe:	4293      	cmp	r3, r2
    2ec0:	bfc4      	itt	gt
    2ec2:	1a9b      	subgt	r3, r3, r2
    2ec4:	18ed      	addgt	r5, r5, r3
    2ec6:	f04f 0900 	mov.w	r9, #0
    2eca:	341a      	adds	r4, #26
    2ecc:	454d      	cmp	r5, r9
    2ece:	d11b      	bne.n	2f08 <_printf_common+0xd8>
    2ed0:	2000      	movs	r0, #0
    2ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ed6:	2301      	movs	r3, #1
    2ed8:	4652      	mov	r2, sl
    2eda:	4639      	mov	r1, r7
    2edc:	4630      	mov	r0, r6
    2ede:	47c0      	blx	r8
    2ee0:	3001      	adds	r0, #1
    2ee2:	d103      	bne.n	2eec <_printf_common+0xbc>
    2ee4:	f04f 30ff 	mov.w	r0, #4294967295
    2ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2eec:	3501      	adds	r5, #1
    2eee:	e7c2      	b.n	2e76 <_printf_common+0x46>
    2ef0:	18e1      	adds	r1, r4, r3
    2ef2:	1c5a      	adds	r2, r3, #1
    2ef4:	2030      	movs	r0, #48	; 0x30
    2ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2efa:	4422      	add	r2, r4
    2efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2f04:	3302      	adds	r3, #2
    2f06:	e7c4      	b.n	2e92 <_printf_common+0x62>
    2f08:	2301      	movs	r3, #1
    2f0a:	4622      	mov	r2, r4
    2f0c:	4639      	mov	r1, r7
    2f0e:	4630      	mov	r0, r6
    2f10:	47c0      	blx	r8
    2f12:	3001      	adds	r0, #1
    2f14:	d0e6      	beq.n	2ee4 <_printf_common+0xb4>
    2f16:	f109 0901 	add.w	r9, r9, #1
    2f1a:	e7d7      	b.n	2ecc <_printf_common+0x9c>

00002f1c <_printf_i>:
    2f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2f20:	4617      	mov	r7, r2
    2f22:	7e0a      	ldrb	r2, [r1, #24]
    2f24:	b085      	sub	sp, #20
    2f26:	2a6e      	cmp	r2, #110	; 0x6e
    2f28:	4698      	mov	r8, r3
    2f2a:	4606      	mov	r6, r0
    2f2c:	460c      	mov	r4, r1
    2f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2f34:	f000 80bc 	beq.w	30b0 <_printf_i+0x194>
    2f38:	d81a      	bhi.n	2f70 <_printf_i+0x54>
    2f3a:	2a63      	cmp	r2, #99	; 0x63
    2f3c:	d02e      	beq.n	2f9c <_printf_i+0x80>
    2f3e:	d80a      	bhi.n	2f56 <_printf_i+0x3a>
    2f40:	2a00      	cmp	r2, #0
    2f42:	f000 80c8 	beq.w	30d6 <_printf_i+0x1ba>
    2f46:	2a58      	cmp	r2, #88	; 0x58
    2f48:	f000 808a 	beq.w	3060 <_printf_i+0x144>
    2f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2f50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    2f54:	e02a      	b.n	2fac <_printf_i+0x90>
    2f56:	2a64      	cmp	r2, #100	; 0x64
    2f58:	d001      	beq.n	2f5e <_printf_i+0x42>
    2f5a:	2a69      	cmp	r2, #105	; 0x69
    2f5c:	d1f6      	bne.n	2f4c <_printf_i+0x30>
    2f5e:	6821      	ldr	r1, [r4, #0]
    2f60:	681a      	ldr	r2, [r3, #0]
    2f62:	f011 0f80 	tst.w	r1, #128	; 0x80
    2f66:	d023      	beq.n	2fb0 <_printf_i+0x94>
    2f68:	1d11      	adds	r1, r2, #4
    2f6a:	6019      	str	r1, [r3, #0]
    2f6c:	6813      	ldr	r3, [r2, #0]
    2f6e:	e027      	b.n	2fc0 <_printf_i+0xa4>
    2f70:	2a73      	cmp	r2, #115	; 0x73
    2f72:	f000 80b4 	beq.w	30de <_printf_i+0x1c2>
    2f76:	d808      	bhi.n	2f8a <_printf_i+0x6e>
    2f78:	2a6f      	cmp	r2, #111	; 0x6f
    2f7a:	d02a      	beq.n	2fd2 <_printf_i+0xb6>
    2f7c:	2a70      	cmp	r2, #112	; 0x70
    2f7e:	d1e5      	bne.n	2f4c <_printf_i+0x30>
    2f80:	680a      	ldr	r2, [r1, #0]
    2f82:	f042 0220 	orr.w	r2, r2, #32
    2f86:	600a      	str	r2, [r1, #0]
    2f88:	e003      	b.n	2f92 <_printf_i+0x76>
    2f8a:	2a75      	cmp	r2, #117	; 0x75
    2f8c:	d021      	beq.n	2fd2 <_printf_i+0xb6>
    2f8e:	2a78      	cmp	r2, #120	; 0x78
    2f90:	d1dc      	bne.n	2f4c <_printf_i+0x30>
    2f92:	2278      	movs	r2, #120	; 0x78
    2f94:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    2f98:	496e      	ldr	r1, [pc, #440]	; (3154 <_printf_i+0x238>)
    2f9a:	e064      	b.n	3066 <_printf_i+0x14a>
    2f9c:	681a      	ldr	r2, [r3, #0]
    2f9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    2fa2:	1d11      	adds	r1, r2, #4
    2fa4:	6019      	str	r1, [r3, #0]
    2fa6:	6813      	ldr	r3, [r2, #0]
    2fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2fac:	2301      	movs	r3, #1
    2fae:	e0a3      	b.n	30f8 <_printf_i+0x1dc>
    2fb0:	f011 0f40 	tst.w	r1, #64	; 0x40
    2fb4:	f102 0104 	add.w	r1, r2, #4
    2fb8:	6019      	str	r1, [r3, #0]
    2fba:	d0d7      	beq.n	2f6c <_printf_i+0x50>
    2fbc:	f9b2 3000 	ldrsh.w	r3, [r2]
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	da03      	bge.n	2fcc <_printf_i+0xb0>
    2fc4:	222d      	movs	r2, #45	; 0x2d
    2fc6:	425b      	negs	r3, r3
    2fc8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2fcc:	4962      	ldr	r1, [pc, #392]	; (3158 <_printf_i+0x23c>)
    2fce:	220a      	movs	r2, #10
    2fd0:	e017      	b.n	3002 <_printf_i+0xe6>
    2fd2:	6820      	ldr	r0, [r4, #0]
    2fd4:	6819      	ldr	r1, [r3, #0]
    2fd6:	f010 0f80 	tst.w	r0, #128	; 0x80
    2fda:	d003      	beq.n	2fe4 <_printf_i+0xc8>
    2fdc:	1d08      	adds	r0, r1, #4
    2fde:	6018      	str	r0, [r3, #0]
    2fe0:	680b      	ldr	r3, [r1, #0]
    2fe2:	e006      	b.n	2ff2 <_printf_i+0xd6>
    2fe4:	f010 0f40 	tst.w	r0, #64	; 0x40
    2fe8:	f101 0004 	add.w	r0, r1, #4
    2fec:	6018      	str	r0, [r3, #0]
    2fee:	d0f7      	beq.n	2fe0 <_printf_i+0xc4>
    2ff0:	880b      	ldrh	r3, [r1, #0]
    2ff2:	4959      	ldr	r1, [pc, #356]	; (3158 <_printf_i+0x23c>)
    2ff4:	2a6f      	cmp	r2, #111	; 0x6f
    2ff6:	bf14      	ite	ne
    2ff8:	220a      	movne	r2, #10
    2ffa:	2208      	moveq	r2, #8
    2ffc:	2000      	movs	r0, #0
    2ffe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3002:	6865      	ldr	r5, [r4, #4]
    3004:	60a5      	str	r5, [r4, #8]
    3006:	2d00      	cmp	r5, #0
    3008:	f2c0 809c 	blt.w	3144 <_printf_i+0x228>
    300c:	6820      	ldr	r0, [r4, #0]
    300e:	f020 0004 	bic.w	r0, r0, #4
    3012:	6020      	str	r0, [r4, #0]
    3014:	2b00      	cmp	r3, #0
    3016:	d13f      	bne.n	3098 <_printf_i+0x17c>
    3018:	2d00      	cmp	r5, #0
    301a:	f040 8095 	bne.w	3148 <_printf_i+0x22c>
    301e:	4675      	mov	r5, lr
    3020:	2a08      	cmp	r2, #8
    3022:	d10b      	bne.n	303c <_printf_i+0x120>
    3024:	6823      	ldr	r3, [r4, #0]
    3026:	07da      	lsls	r2, r3, #31
    3028:	d508      	bpl.n	303c <_printf_i+0x120>
    302a:	6923      	ldr	r3, [r4, #16]
    302c:	6862      	ldr	r2, [r4, #4]
    302e:	429a      	cmp	r2, r3
    3030:	bfde      	ittt	le
    3032:	2330      	movle	r3, #48	; 0x30
    3034:	f805 3c01 	strble.w	r3, [r5, #-1]
    3038:	f105 35ff 	addle.w	r5, r5, #4294967295
    303c:	ebae 0305 	sub.w	r3, lr, r5
    3040:	6123      	str	r3, [r4, #16]
    3042:	f8cd 8000 	str.w	r8, [sp]
    3046:	463b      	mov	r3, r7
    3048:	aa03      	add	r2, sp, #12
    304a:	4621      	mov	r1, r4
    304c:	4630      	mov	r0, r6
    304e:	f7ff feef 	bl	2e30 <_printf_common>
    3052:	3001      	adds	r0, #1
    3054:	d155      	bne.n	3102 <_printf_i+0x1e6>
    3056:	f04f 30ff 	mov.w	r0, #4294967295
    305a:	b005      	add	sp, #20
    305c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3060:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    3064:	493c      	ldr	r1, [pc, #240]	; (3158 <_printf_i+0x23c>)
    3066:	6822      	ldr	r2, [r4, #0]
    3068:	6818      	ldr	r0, [r3, #0]
    306a:	f012 0f80 	tst.w	r2, #128	; 0x80
    306e:	f100 0504 	add.w	r5, r0, #4
    3072:	601d      	str	r5, [r3, #0]
    3074:	d001      	beq.n	307a <_printf_i+0x15e>
    3076:	6803      	ldr	r3, [r0, #0]
    3078:	e002      	b.n	3080 <_printf_i+0x164>
    307a:	0655      	lsls	r5, r2, #25
    307c:	d5fb      	bpl.n	3076 <_printf_i+0x15a>
    307e:	8803      	ldrh	r3, [r0, #0]
    3080:	07d0      	lsls	r0, r2, #31
    3082:	bf44      	itt	mi
    3084:	f042 0220 	orrmi.w	r2, r2, #32
    3088:	6022      	strmi	r2, [r4, #0]
    308a:	b91b      	cbnz	r3, 3094 <_printf_i+0x178>
    308c:	6822      	ldr	r2, [r4, #0]
    308e:	f022 0220 	bic.w	r2, r2, #32
    3092:	6022      	str	r2, [r4, #0]
    3094:	2210      	movs	r2, #16
    3096:	e7b1      	b.n	2ffc <_printf_i+0xe0>
    3098:	4675      	mov	r5, lr
    309a:	fbb3 f0f2 	udiv	r0, r3, r2
    309e:	fb02 3310 	mls	r3, r2, r0, r3
    30a2:	5ccb      	ldrb	r3, [r1, r3]
    30a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    30a8:	4603      	mov	r3, r0
    30aa:	2800      	cmp	r0, #0
    30ac:	d1f5      	bne.n	309a <_printf_i+0x17e>
    30ae:	e7b7      	b.n	3020 <_printf_i+0x104>
    30b0:	6808      	ldr	r0, [r1, #0]
    30b2:	681a      	ldr	r2, [r3, #0]
    30b4:	6949      	ldr	r1, [r1, #20]
    30b6:	f010 0f80 	tst.w	r0, #128	; 0x80
    30ba:	d004      	beq.n	30c6 <_printf_i+0x1aa>
    30bc:	1d10      	adds	r0, r2, #4
    30be:	6018      	str	r0, [r3, #0]
    30c0:	6813      	ldr	r3, [r2, #0]
    30c2:	6019      	str	r1, [r3, #0]
    30c4:	e007      	b.n	30d6 <_printf_i+0x1ba>
    30c6:	f010 0f40 	tst.w	r0, #64	; 0x40
    30ca:	f102 0004 	add.w	r0, r2, #4
    30ce:	6018      	str	r0, [r3, #0]
    30d0:	6813      	ldr	r3, [r2, #0]
    30d2:	d0f6      	beq.n	30c2 <_printf_i+0x1a6>
    30d4:	8019      	strh	r1, [r3, #0]
    30d6:	2300      	movs	r3, #0
    30d8:	6123      	str	r3, [r4, #16]
    30da:	4675      	mov	r5, lr
    30dc:	e7b1      	b.n	3042 <_printf_i+0x126>
    30de:	681a      	ldr	r2, [r3, #0]
    30e0:	1d11      	adds	r1, r2, #4
    30e2:	6019      	str	r1, [r3, #0]
    30e4:	6815      	ldr	r5, [r2, #0]
    30e6:	6862      	ldr	r2, [r4, #4]
    30e8:	2100      	movs	r1, #0
    30ea:	4628      	mov	r0, r5
    30ec:	f000 f848 	bl	3180 <memchr>
    30f0:	b108      	cbz	r0, 30f6 <_printf_i+0x1da>
    30f2:	1b40      	subs	r0, r0, r5
    30f4:	6060      	str	r0, [r4, #4]
    30f6:	6863      	ldr	r3, [r4, #4]
    30f8:	6123      	str	r3, [r4, #16]
    30fa:	2300      	movs	r3, #0
    30fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3100:	e79f      	b.n	3042 <_printf_i+0x126>
    3102:	6923      	ldr	r3, [r4, #16]
    3104:	462a      	mov	r2, r5
    3106:	4639      	mov	r1, r7
    3108:	4630      	mov	r0, r6
    310a:	47c0      	blx	r8
    310c:	3001      	adds	r0, #1
    310e:	d0a2      	beq.n	3056 <_printf_i+0x13a>
    3110:	6823      	ldr	r3, [r4, #0]
    3112:	079b      	lsls	r3, r3, #30
    3114:	d507      	bpl.n	3126 <_printf_i+0x20a>
    3116:	2500      	movs	r5, #0
    3118:	f104 0919 	add.w	r9, r4, #25
    311c:	68e3      	ldr	r3, [r4, #12]
    311e:	9a03      	ldr	r2, [sp, #12]
    3120:	1a9b      	subs	r3, r3, r2
    3122:	429d      	cmp	r5, r3
    3124:	db05      	blt.n	3132 <_printf_i+0x216>
    3126:	68e0      	ldr	r0, [r4, #12]
    3128:	9b03      	ldr	r3, [sp, #12]
    312a:	4298      	cmp	r0, r3
    312c:	bfb8      	it	lt
    312e:	4618      	movlt	r0, r3
    3130:	e793      	b.n	305a <_printf_i+0x13e>
    3132:	2301      	movs	r3, #1
    3134:	464a      	mov	r2, r9
    3136:	4639      	mov	r1, r7
    3138:	4630      	mov	r0, r6
    313a:	47c0      	blx	r8
    313c:	3001      	adds	r0, #1
    313e:	d08a      	beq.n	3056 <_printf_i+0x13a>
    3140:	3501      	adds	r5, #1
    3142:	e7eb      	b.n	311c <_printf_i+0x200>
    3144:	2b00      	cmp	r3, #0
    3146:	d1a7      	bne.n	3098 <_printf_i+0x17c>
    3148:	780b      	ldrb	r3, [r1, #0]
    314a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    314e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3152:	e765      	b.n	3020 <_printf_i+0x104>
    3154:	000036b2 	.word	0x000036b2
    3158:	000036a1 	.word	0x000036a1

0000315c <_sbrk_r>:
    315c:	b538      	push	{r3, r4, r5, lr}
    315e:	4c06      	ldr	r4, [pc, #24]	; (3178 <_sbrk_r+0x1c>)
    3160:	2300      	movs	r3, #0
    3162:	4605      	mov	r5, r0
    3164:	4608      	mov	r0, r1
    3166:	6023      	str	r3, [r4, #0]
    3168:	f7fd fe62 	bl	e30 <_sbrk>
    316c:	1c43      	adds	r3, r0, #1
    316e:	d102      	bne.n	3176 <_sbrk_r+0x1a>
    3170:	6823      	ldr	r3, [r4, #0]
    3172:	b103      	cbz	r3, 3176 <_sbrk_r+0x1a>
    3174:	602b      	str	r3, [r5, #0]
    3176:	bd38      	pop	{r3, r4, r5, pc}
    3178:	20000270 	.word	0x20000270
    317c:	00000000 	.word	0x00000000

00003180 <memchr>:
    3180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3184:	2a10      	cmp	r2, #16
    3186:	db2b      	blt.n	31e0 <memchr+0x60>
    3188:	f010 0f07 	tst.w	r0, #7
    318c:	d008      	beq.n	31a0 <memchr+0x20>
    318e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3192:	3a01      	subs	r2, #1
    3194:	428b      	cmp	r3, r1
    3196:	d02d      	beq.n	31f4 <memchr+0x74>
    3198:	f010 0f07 	tst.w	r0, #7
    319c:	b342      	cbz	r2, 31f0 <memchr+0x70>
    319e:	d1f6      	bne.n	318e <memchr+0xe>
    31a0:	b4f0      	push	{r4, r5, r6, r7}
    31a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    31a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    31aa:	f022 0407 	bic.w	r4, r2, #7
    31ae:	f07f 0700 	mvns.w	r7, #0
    31b2:	2300      	movs	r3, #0
    31b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    31b8:	3c08      	subs	r4, #8
    31ba:	ea85 0501 	eor.w	r5, r5, r1
    31be:	ea86 0601 	eor.w	r6, r6, r1
    31c2:	fa85 f547 	uadd8	r5, r5, r7
    31c6:	faa3 f587 	sel	r5, r3, r7
    31ca:	fa86 f647 	uadd8	r6, r6, r7
    31ce:	faa5 f687 	sel	r6, r5, r7
    31d2:	b98e      	cbnz	r6, 31f8 <memchr+0x78>
    31d4:	d1ee      	bne.n	31b4 <memchr+0x34>
    31d6:	bcf0      	pop	{r4, r5, r6, r7}
    31d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    31dc:	f002 0207 	and.w	r2, r2, #7
    31e0:	b132      	cbz	r2, 31f0 <memchr+0x70>
    31e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    31e6:	3a01      	subs	r2, #1
    31e8:	ea83 0301 	eor.w	r3, r3, r1
    31ec:	b113      	cbz	r3, 31f4 <memchr+0x74>
    31ee:	d1f8      	bne.n	31e2 <memchr+0x62>
    31f0:	2000      	movs	r0, #0
    31f2:	4770      	bx	lr
    31f4:	3801      	subs	r0, #1
    31f6:	4770      	bx	lr
    31f8:	2d00      	cmp	r5, #0
    31fa:	bf06      	itte	eq
    31fc:	4635      	moveq	r5, r6
    31fe:	3803      	subeq	r0, #3
    3200:	3807      	subne	r0, #7
    3202:	f015 0f01 	tst.w	r5, #1
    3206:	d107      	bne.n	3218 <memchr+0x98>
    3208:	3001      	adds	r0, #1
    320a:	f415 7f80 	tst.w	r5, #256	; 0x100
    320e:	bf02      	ittt	eq
    3210:	3001      	addeq	r0, #1
    3212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3216:	3001      	addeq	r0, #1
    3218:	bcf0      	pop	{r4, r5, r6, r7}
    321a:	3801      	subs	r0, #1
    321c:	4770      	bx	lr
    321e:	bf00      	nop

00003220 <memcpy>:
    3220:	b510      	push	{r4, lr}
    3222:	1e43      	subs	r3, r0, #1
    3224:	440a      	add	r2, r1
    3226:	4291      	cmp	r1, r2
    3228:	d100      	bne.n	322c <memcpy+0xc>
    322a:	bd10      	pop	{r4, pc}
    322c:	f811 4b01 	ldrb.w	r4, [r1], #1
    3230:	f803 4f01 	strb.w	r4, [r3, #1]!
    3234:	e7f7      	b.n	3226 <memcpy+0x6>

00003236 <memmove>:
    3236:	4288      	cmp	r0, r1
    3238:	b510      	push	{r4, lr}
    323a:	eb01 0302 	add.w	r3, r1, r2
    323e:	d803      	bhi.n	3248 <memmove+0x12>
    3240:	1e42      	subs	r2, r0, #1
    3242:	4299      	cmp	r1, r3
    3244:	d10c      	bne.n	3260 <memmove+0x2a>
    3246:	bd10      	pop	{r4, pc}
    3248:	4298      	cmp	r0, r3
    324a:	d2f9      	bcs.n	3240 <memmove+0xa>
    324c:	1881      	adds	r1, r0, r2
    324e:	1ad2      	subs	r2, r2, r3
    3250:	42d3      	cmn	r3, r2
    3252:	d100      	bne.n	3256 <memmove+0x20>
    3254:	bd10      	pop	{r4, pc}
    3256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    325a:	f801 4d01 	strb.w	r4, [r1, #-1]!
    325e:	e7f7      	b.n	3250 <memmove+0x1a>
    3260:	f811 4b01 	ldrb.w	r4, [r1], #1
    3264:	f802 4f01 	strb.w	r4, [r2, #1]!
    3268:	e7eb      	b.n	3242 <memmove+0xc>

0000326a <__malloc_lock>:
    326a:	4770      	bx	lr

0000326c <__malloc_unlock>:
    326c:	4770      	bx	lr
	...

00003270 <_free_r>:
    3270:	b538      	push	{r3, r4, r5, lr}
    3272:	4605      	mov	r5, r0
    3274:	2900      	cmp	r1, #0
    3276:	d045      	beq.n	3304 <_free_r+0x94>
    3278:	f851 3c04 	ldr.w	r3, [r1, #-4]
    327c:	1f0c      	subs	r4, r1, #4
    327e:	2b00      	cmp	r3, #0
    3280:	bfb8      	it	lt
    3282:	18e4      	addlt	r4, r4, r3
    3284:	f7ff fff1 	bl	326a <__malloc_lock>
    3288:	4a1f      	ldr	r2, [pc, #124]	; (3308 <_free_r+0x98>)
    328a:	6813      	ldr	r3, [r2, #0]
    328c:	4610      	mov	r0, r2
    328e:	b933      	cbnz	r3, 329e <_free_r+0x2e>
    3290:	6063      	str	r3, [r4, #4]
    3292:	6014      	str	r4, [r2, #0]
    3294:	4628      	mov	r0, r5
    3296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    329a:	f7ff bfe7 	b.w	326c <__malloc_unlock>
    329e:	42a3      	cmp	r3, r4
    32a0:	d90c      	bls.n	32bc <_free_r+0x4c>
    32a2:	6821      	ldr	r1, [r4, #0]
    32a4:	1862      	adds	r2, r4, r1
    32a6:	4293      	cmp	r3, r2
    32a8:	bf04      	itt	eq
    32aa:	681a      	ldreq	r2, [r3, #0]
    32ac:	685b      	ldreq	r3, [r3, #4]
    32ae:	6063      	str	r3, [r4, #4]
    32b0:	bf04      	itt	eq
    32b2:	1852      	addeq	r2, r2, r1
    32b4:	6022      	streq	r2, [r4, #0]
    32b6:	6004      	str	r4, [r0, #0]
    32b8:	e7ec      	b.n	3294 <_free_r+0x24>
    32ba:	4613      	mov	r3, r2
    32bc:	685a      	ldr	r2, [r3, #4]
    32be:	b10a      	cbz	r2, 32c4 <_free_r+0x54>
    32c0:	42a2      	cmp	r2, r4
    32c2:	d9fa      	bls.n	32ba <_free_r+0x4a>
    32c4:	6819      	ldr	r1, [r3, #0]
    32c6:	1858      	adds	r0, r3, r1
    32c8:	42a0      	cmp	r0, r4
    32ca:	d10b      	bne.n	32e4 <_free_r+0x74>
    32cc:	6820      	ldr	r0, [r4, #0]
    32ce:	4401      	add	r1, r0
    32d0:	1858      	adds	r0, r3, r1
    32d2:	4282      	cmp	r2, r0
    32d4:	6019      	str	r1, [r3, #0]
    32d6:	d1dd      	bne.n	3294 <_free_r+0x24>
    32d8:	6810      	ldr	r0, [r2, #0]
    32da:	6852      	ldr	r2, [r2, #4]
    32dc:	605a      	str	r2, [r3, #4]
    32de:	4401      	add	r1, r0
    32e0:	6019      	str	r1, [r3, #0]
    32e2:	e7d7      	b.n	3294 <_free_r+0x24>
    32e4:	d902      	bls.n	32ec <_free_r+0x7c>
    32e6:	230c      	movs	r3, #12
    32e8:	602b      	str	r3, [r5, #0]
    32ea:	e7d3      	b.n	3294 <_free_r+0x24>
    32ec:	6820      	ldr	r0, [r4, #0]
    32ee:	1821      	adds	r1, r4, r0
    32f0:	428a      	cmp	r2, r1
    32f2:	bf04      	itt	eq
    32f4:	6811      	ldreq	r1, [r2, #0]
    32f6:	6852      	ldreq	r2, [r2, #4]
    32f8:	6062      	str	r2, [r4, #4]
    32fa:	bf04      	itt	eq
    32fc:	1809      	addeq	r1, r1, r0
    32fe:	6021      	streq	r1, [r4, #0]
    3300:	605c      	str	r4, [r3, #4]
    3302:	e7c7      	b.n	3294 <_free_r+0x24>
    3304:	bd38      	pop	{r3, r4, r5, pc}
    3306:	bf00      	nop
    3308:	20000178 	.word	0x20000178

0000330c <_realloc_r>:
    330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    330e:	4607      	mov	r7, r0
    3310:	4614      	mov	r4, r2
    3312:	460e      	mov	r6, r1
    3314:	b921      	cbnz	r1, 3320 <_realloc_r+0x14>
    3316:	4611      	mov	r1, r2
    3318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    331c:	f7ff bbda 	b.w	2ad4 <_malloc_r>
    3320:	b922      	cbnz	r2, 332c <_realloc_r+0x20>
    3322:	f7ff ffa5 	bl	3270 <_free_r>
    3326:	4625      	mov	r5, r4
    3328:	4628      	mov	r0, r5
    332a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    332c:	f000 f814 	bl	3358 <_malloc_usable_size_r>
    3330:	4284      	cmp	r4, r0
    3332:	d90f      	bls.n	3354 <_realloc_r+0x48>
    3334:	4621      	mov	r1, r4
    3336:	4638      	mov	r0, r7
    3338:	f7ff fbcc 	bl	2ad4 <_malloc_r>
    333c:	4605      	mov	r5, r0
    333e:	2800      	cmp	r0, #0
    3340:	d0f2      	beq.n	3328 <_realloc_r+0x1c>
    3342:	4631      	mov	r1, r6
    3344:	4622      	mov	r2, r4
    3346:	f7ff ff6b 	bl	3220 <memcpy>
    334a:	4631      	mov	r1, r6
    334c:	4638      	mov	r0, r7
    334e:	f7ff ff8f 	bl	3270 <_free_r>
    3352:	e7e9      	b.n	3328 <_realloc_r+0x1c>
    3354:	4635      	mov	r5, r6
    3356:	e7e7      	b.n	3328 <_realloc_r+0x1c>

00003358 <_malloc_usable_size_r>:
    3358:	f851 0c04 	ldr.w	r0, [r1, #-4]
    335c:	2800      	cmp	r0, #0
    335e:	f1a0 0004 	sub.w	r0, r0, #4
    3362:	bfbc      	itt	lt
    3364:	580b      	ldrlt	r3, [r1, r0]
    3366:	18c0      	addlt	r0, r0, r3
    3368:	4770      	bx	lr
    336a:	0000      	movs	r0, r0
    336c:	682f2e2e 	.word	0x682f2e2e
    3370:	732f6c61 	.word	0x732f6c61
    3374:	682f6372 	.word	0x682f6372
    3378:	695f6c61 	.word	0x695f6c61
    337c:	00632e6f 	.word	0x00632e6f
    3380:	682f2e2e 	.word	0x682f2e2e
    3384:	732f6c61 	.word	0x732f6c61
    3388:	682f6372 	.word	0x682f6372
    338c:	705f6c61 	.word	0x705f6c61
    3390:	632e6d77 	.word	0x632e6d77
    3394:	00000000 	.word	0x00000000
    3398:	682f2e2e 	.word	0x682f2e2e
    339c:	732f6c61 	.word	0x732f6c61
    33a0:	682f6372 	.word	0x682f6372
    33a4:	745f6c61 	.word	0x745f6c61
    33a8:	72656d69 	.word	0x72656d69
    33ac:	0000632e 	.word	0x0000632e
    33b0:	682f2e2e 	.word	0x682f2e2e
    33b4:	732f6c61 	.word	0x732f6c61
    33b8:	682f6372 	.word	0x682f6372
    33bc:	755f6c61 	.word	0x755f6c61
    33c0:	74726173 	.word	0x74726173
    33c4:	7973615f 	.word	0x7973615f
    33c8:	632e636e 	.word	0x632e636e
    33cc:	00000000 	.word	0x00000000
    33d0:	682f2e2e 	.word	0x682f2e2e
    33d4:	752f6c61 	.word	0x752f6c61
    33d8:	736c6974 	.word	0x736c6974
    33dc:	6372732f 	.word	0x6372732f
    33e0:	6974752f 	.word	0x6974752f
    33e4:	6c5f736c 	.word	0x6c5f736c
    33e8:	2e747369 	.word	0x2e747369
    33ec:	00000063 	.word	0x00000063
    33f0:	682f2e2e 	.word	0x682f2e2e
    33f4:	752f6c61 	.word	0x752f6c61
    33f8:	736c6974 	.word	0x736c6974
    33fc:	6372732f 	.word	0x6372732f
    3400:	6974752f 	.word	0x6974752f
    3404:	725f736c 	.word	0x725f736c
    3408:	62676e69 	.word	0x62676e69
    340c:	65666675 	.word	0x65666675
    3410:	00632e72 	.word	0x00632e72

00003414 <_map>:
    3414:	00000000 00000020 682f2e2e 652f6c70     .... ...../hpl/e
    3424:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00003434 <user_mux_confs>:
	...
    3460:	00000001 00000000 00000000 00000000     ................
	...

00003478 <channel_confs>:
    3478:	00000212 00000000 00000000 00000000     ................
	...

000034b8 <interrupt_cfg>:
	...
    3538:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    3548:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00003558 <_usarts>:
    3558:	00000002 40100004 00030000 00700002     .......@......p.
    3568:	0000fcb9 00000000                       ........

00003570 <_i2cms>:
	...

00003588 <_i2css>:
	...

00003598 <sercomspi_regs>:
	...
    35ac:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    35bc:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    35cc:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    35dc:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    35ec:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    35fc:	69736f70 6e6f6974 25203d20 207c2064     position = %d | 
    360c:	65657073 203d2064 20756c25 204d5052     speed = %lu RPM 
    361c:	6964207c 74636572 206e6f69 6425203d     | direction = %d
    362c:	0000000a                                ....

00003630 <__sf_fake_stderr>:
	...

00003650 <__sf_fake_stdin>:
	...

00003670 <__sf_fake_stdout>:
	...
    3690:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    36a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    36b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    36c0:	00006665                                ef..

000036c4 <_init>:
    36c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36c6:	bf00      	nop
    36c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    36ca:	bc08      	pop	{r3}
    36cc:	469e      	mov	lr, r3
    36ce:	4770      	bx	lr

000036d0 <__init_array_start>:
    36d0:	00000289 	.word	0x00000289

000036d4 <_fini>:
    36d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36d6:	bf00      	nop
    36d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    36da:	bc08      	pop	{r3}
    36dc:	469e      	mov	lr, r3
    36de:	4770      	bx	lr

000036e0 <__fini_array_start>:
    36e0:	00000265 	.word	0x00000265
