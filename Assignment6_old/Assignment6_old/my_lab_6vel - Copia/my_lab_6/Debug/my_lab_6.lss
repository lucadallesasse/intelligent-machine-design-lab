
my_lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f18  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000cc  20000000  00005f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200cc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200cc  2**0
                  CONTENTS
  4 .bss          000002bc  200000cc  00005fe4  000200cc  2**2
                  ALLOC
  5 .stack        00010000  20000388  000062a0  000200cc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002357e  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000037cb  00000000  00000000  000436d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c0d1  00000000  00000000  00046e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001590  00000000  00000000  00052f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013e8  00000000  00000000  000544fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036dac  00000000  00000000  000558e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018b0c  00000000  00000000  0008c691  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123bca  00000000  00000000  000a519d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ec8  00000000  00000000  001c8d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 03 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 b9 20 00 00 7d 03 00 00 7d 03 00 00     }.... ..}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	31 24 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     1$..}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 3d 2f 00 00 59 2f 00 00 75 2f 00 00     }...=/..Y/..u/..
     124:	91 2f 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     ./..}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 5d 41 00 00 d5 3a 00 00     }...}...]A...:..
     1f4:	f1 3a 00 00 7d 03 00 00 0d 3b 00 00 7d 03 00 00     .:..}....;..}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000cc 	.word	0x200000cc
     280:	00000000 	.word	0x00000000
     284:	00005f18 	.word	0x00005f18

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005f18 	.word	0x00005f18
     2c4:	200000d0 	.word	0x200000d0
     2c8:	00005f18 	.word	0x00005f18
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000c91 	.word	0x00000c91

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	00005f18 	.word	0x00005f18
     35c:	20000000 	.word	0x20000000
     360:	200000cc 	.word	0x200000cc
     364:	200000cc 	.word	0x200000cc
     368:	20000388 	.word	0x20000388
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	00005229 	.word	0x00005229
     378:	00004541 	.word	0x00004541

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	695b      	ldr	r3, [r3, #20]
     3d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	695b      	ldr	r3, [r3, #20]
     3f4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     410:	687b      	ldr	r3, [r7, #4]
     412:	699b      	ldr	r3, [r3, #24]
     414:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     418:	687b      	ldr	r3, [r7, #4]
     41a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     428:	b480      	push	{r7}
     42a:	b083      	sub	sp, #12
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     430:	687b      	ldr	r3, [r7, #4]
     432:	699b      	ldr	r3, [r3, #24]
     434:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     438:	687b      	ldr	r3, [r7, #4]
     43a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43c:	bf00      	nop
     43e:	370c      	adds	r7, #12
     440:	46bd      	mov	sp, r7
     442:	f85d 7b04 	ldr.w	r7, [sp], #4
     446:	4770      	bx	lr

00000448 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     448:	b480      	push	{r7}
     44a:	b083      	sub	sp, #12
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     450:	687b      	ldr	r3, [r7, #4]
     452:	699b      	ldr	r3, [r3, #24]
     454:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     458:	687b      	ldr	r3, [r7, #4]
     45a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45c:	bf00      	nop
     45e:	370c      	adds	r7, #12
     460:	46bd      	mov	sp, r7
     462:	f85d 7b04 	ldr.w	r7, [sp], #4
     466:	4770      	bx	lr

00000468 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     468:	b480      	push	{r7}
     46a:	b083      	sub	sp, #12
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     470:	687b      	ldr	r3, [r7, #4]
     472:	69db      	ldr	r3, [r3, #28]
     474:	f043 0220 	orr.w	r2, r3, #32
     478:	687b      	ldr	r3, [r7, #4]
     47a:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47c:	bf00      	nop
     47e:	370c      	adds	r7, #12
     480:	46bd      	mov	sp, r7
     482:	f85d 7b04 	ldr.w	r7, [sp], #4
     486:	4770      	bx	lr

00000488 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     488:	b480      	push	{r7}
     48a:	b085      	sub	sp, #20
     48c:	af00      	add	r7, sp, #0
     48e:	60f8      	str	r0, [r7, #12]
     490:	460b      	mov	r3, r1
     492:	607a      	str	r2, [r7, #4]
     494:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     496:	7afb      	ldrb	r3, [r7, #11]
     498:	68fa      	ldr	r2, [r7, #12]
     49a:	01db      	lsls	r3, r3, #7
     49c:	4413      	add	r3, r2
     49e:	3308      	adds	r3, #8
     4a0:	687a      	ldr	r2, [r7, #4]
     4a2:	601a      	str	r2, [r3, #0]
}
     4a4:	bf00      	nop
     4a6:	3714      	adds	r7, #20
     4a8:	46bd      	mov	sp, r7
     4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ae:	4770      	bx	lr

000004b0 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     4b0:	b480      	push	{r7}
     4b2:	b085      	sub	sp, #20
     4b4:	af00      	add	r7, sp, #0
     4b6:	60f8      	str	r0, [r7, #12]
     4b8:	460b      	mov	r3, r1
     4ba:	607a      	str	r2, [r7, #4]
     4bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4be:	7afb      	ldrb	r3, [r7, #11]
     4c0:	68fa      	ldr	r2, [r7, #12]
     4c2:	01db      	lsls	r3, r3, #7
     4c4:	4413      	add	r3, r2
     4c6:	3304      	adds	r3, #4
     4c8:	687a      	ldr	r2, [r7, #4]
     4ca:	601a      	str	r2, [r3, #0]
}
     4cc:	bf00      	nop
     4ce:	3714      	adds	r7, #20
     4d0:	46bd      	mov	sp, r7
     4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4d6:	4770      	bx	lr

000004d8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4d8:	b480      	push	{r7}
     4da:	b085      	sub	sp, #20
     4dc:	af00      	add	r7, sp, #0
     4de:	60f8      	str	r0, [r7, #12]
     4e0:	460b      	mov	r3, r1
     4e2:	607a      	str	r2, [r7, #4]
     4e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e6:	7afb      	ldrb	r3, [r7, #11]
     4e8:	68fa      	ldr	r2, [r7, #12]
     4ea:	01db      	lsls	r3, r3, #7
     4ec:	4413      	add	r3, r2
     4ee:	3318      	adds	r3, #24
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	601a      	str	r2, [r3, #0]
}
     4f4:	bf00      	nop
     4f6:	3714      	adds	r7, #20
     4f8:	46bd      	mov	sp, r7
     4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
     4fe:	4770      	bx	lr

00000500 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     500:	b480      	push	{r7}
     502:	b085      	sub	sp, #20
     504:	af00      	add	r7, sp, #0
     506:	60f8      	str	r0, [r7, #12]
     508:	460b      	mov	r3, r1
     50a:	607a      	str	r2, [r7, #4]
     50c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	7afb      	ldrb	r3, [r7, #11]
     510:	68fa      	ldr	r2, [r7, #12]
     512:	01db      	lsls	r3, r3, #7
     514:	4413      	add	r3, r2
     516:	3314      	adds	r3, #20
     518:	687a      	ldr	r2, [r7, #4]
     51a:	601a      	str	r2, [r3, #0]
}
     51c:	bf00      	nop
     51e:	3714      	adds	r7, #20
     520:	46bd      	mov	sp, r7
     522:	f85d 7b04 	ldr.w	r7, [sp], #4
     526:	4770      	bx	lr

00000528 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     528:	b480      	push	{r7}
     52a:	b085      	sub	sp, #20
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
     530:	4608      	mov	r0, r1
     532:	4611      	mov	r1, r2
     534:	461a      	mov	r2, r3
     536:	4603      	mov	r3, r0
     538:	70fb      	strb	r3, [r7, #3]
     53a:	460b      	mov	r3, r1
     53c:	70bb      	strb	r3, [r7, #2]
     53e:	4613      	mov	r3, r2
     540:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     542:	78fa      	ldrb	r2, [r7, #3]
     544:	78bb      	ldrb	r3, [r7, #2]
     546:	6879      	ldr	r1, [r7, #4]
     548:	01d2      	lsls	r2, r2, #7
     54a:	440a      	add	r2, r1
     54c:	4413      	add	r3, r2
     54e:	3330      	adds	r3, #48	; 0x30
     550:	781b      	ldrb	r3, [r3, #0]
     552:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     554:	7bfb      	ldrb	r3, [r7, #15]
     556:	f023 030f 	bic.w	r3, r3, #15
     55a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     55c:	787b      	ldrb	r3, [r7, #1]
     55e:	f003 030f 	and.w	r3, r3, #15
     562:	b2da      	uxtb	r2, r3
     564:	7bfb      	ldrb	r3, [r7, #15]
     566:	4313      	orrs	r3, r2
     568:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	78fa      	ldrb	r2, [r7, #3]
     56c:	78bb      	ldrb	r3, [r7, #2]
     56e:	6879      	ldr	r1, [r7, #4]
     570:	01d2      	lsls	r2, r2, #7
     572:	440a      	add	r2, r1
     574:	4413      	add	r3, r2
     576:	3330      	adds	r3, #48	; 0x30
     578:	7bfa      	ldrb	r2, [r7, #15]
     57a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     57c:	bf00      	nop
     57e:	3714      	adds	r7, #20
     580:	46bd      	mov	sp, r7
     582:	f85d 7b04 	ldr.w	r7, [sp], #4
     586:	4770      	bx	lr

00000588 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     588:	b480      	push	{r7}
     58a:	b085      	sub	sp, #20
     58c:	af00      	add	r7, sp, #0
     58e:	6078      	str	r0, [r7, #4]
     590:	4608      	mov	r0, r1
     592:	4611      	mov	r1, r2
     594:	461a      	mov	r2, r3
     596:	4603      	mov	r3, r0
     598:	70fb      	strb	r3, [r7, #3]
     59a:	460b      	mov	r3, r1
     59c:	70bb      	strb	r3, [r7, #2]
     59e:	4613      	mov	r3, r2
     5a0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a2:	78fa      	ldrb	r2, [r7, #3]
     5a4:	78bb      	ldrb	r3, [r7, #2]
     5a6:	6879      	ldr	r1, [r7, #4]
     5a8:	01d2      	lsls	r2, r2, #7
     5aa:	440a      	add	r2, r1
     5ac:	4413      	add	r3, r2
     5ae:	3330      	adds	r3, #48	; 0x30
     5b0:	781b      	ldrb	r3, [r3, #0]
     5b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5b4:	7bfb      	ldrb	r3, [r7, #15]
     5b6:	f003 030f 	and.w	r3, r3, #15
     5ba:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     5bc:	787b      	ldrb	r3, [r7, #1]
     5be:	011b      	lsls	r3, r3, #4
     5c0:	b2da      	uxtb	r2, r3
     5c2:	7bfb      	ldrb	r3, [r7, #15]
     5c4:	4313      	orrs	r3, r2
     5c6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c8:	78fa      	ldrb	r2, [r7, #3]
     5ca:	78bb      	ldrb	r3, [r7, #2]
     5cc:	6879      	ldr	r1, [r7, #4]
     5ce:	01d2      	lsls	r2, r2, #7
     5d0:	440a      	add	r2, r1
     5d2:	4413      	add	r3, r2
     5d4:	3330      	adds	r3, #48	; 0x30
     5d6:	7bfa      	ldrb	r2, [r7, #15]
     5d8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5da:	bf00      	nop
     5dc:	3714      	adds	r7, #20
     5de:	46bd      	mov	sp, r7
     5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e4:	4770      	bx	lr

000005e6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     5e6:	b480      	push	{r7}
     5e8:	b085      	sub	sp, #20
     5ea:	af00      	add	r7, sp, #0
     5ec:	6078      	str	r0, [r7, #4]
     5ee:	4608      	mov	r0, r1
     5f0:	4611      	mov	r1, r2
     5f2:	461a      	mov	r2, r3
     5f4:	4603      	mov	r3, r0
     5f6:	70fb      	strb	r3, [r7, #3]
     5f8:	460b      	mov	r3, r1
     5fa:	70bb      	strb	r3, [r7, #2]
     5fc:	4613      	mov	r3, r2
     5fe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     600:	78fa      	ldrb	r2, [r7, #3]
     602:	78bb      	ldrb	r3, [r7, #2]
     604:	6879      	ldr	r1, [r7, #4]
     606:	01d2      	lsls	r2, r2, #7
     608:	440a      	add	r2, r1
     60a:	4413      	add	r3, r2
     60c:	3340      	adds	r3, #64	; 0x40
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	7bfb      	ldrb	r3, [r7, #15]
     614:	f023 0301 	bic.w	r3, r3, #1
     618:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	787a      	ldrb	r2, [r7, #1]
     61c:	7bfb      	ldrb	r3, [r7, #15]
     61e:	4313      	orrs	r3, r2
     620:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	78fa      	ldrb	r2, [r7, #3]
     624:	78bb      	ldrb	r3, [r7, #2]
     626:	6879      	ldr	r1, [r7, #4]
     628:	01d2      	lsls	r2, r2, #7
     62a:	440a      	add	r2, r1
     62c:	4413      	add	r3, r2
     62e:	3340      	adds	r3, #64	; 0x40
     630:	7bfa      	ldrb	r2, [r7, #15]
     632:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     634:	bf00      	nop
     636:	3714      	adds	r7, #20
     638:	46bd      	mov	sp, r7
     63a:	f85d 7b04 	ldr.w	r7, [sp], #4
     63e:	4770      	bx	lr

00000640 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     640:	b490      	push	{r4, r7}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
     648:	460b      	mov	r3, r1
     64a:	70fb      	strb	r3, [r7, #3]
     64c:	4613      	mov	r3, r2
     64e:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     650:	78fa      	ldrb	r2, [r7, #3]
     652:	78bb      	ldrb	r3, [r7, #2]
     654:	78f8      	ldrb	r0, [r7, #3]
     656:	78b9      	ldrb	r1, [r7, #2]
     658:	687c      	ldr	r4, [r7, #4]
     65a:	01c0      	lsls	r0, r0, #7
     65c:	4420      	add	r0, r4
     65e:	4401      	add	r1, r0
     660:	3140      	adds	r1, #64	; 0x40
     662:	7809      	ldrb	r1, [r1, #0]
     664:	b2c9      	uxtb	r1, r1
     666:	f041 0104 	orr.w	r1, r1, #4
     66a:	b2c8      	uxtb	r0, r1
     66c:	6879      	ldr	r1, [r7, #4]
     66e:	01d2      	lsls	r2, r2, #7
     670:	440a      	add	r2, r1
     672:	4413      	add	r3, r2
     674:	3340      	adds	r3, #64	; 0x40
     676:	4602      	mov	r2, r0
     678:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     67a:	bf00      	nop
     67c:	3708      	adds	r7, #8
     67e:	46bd      	mov	sp, r7
     680:	bc90      	pop	{r4, r7}
     682:	4770      	bx	lr

00000684 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     684:	b490      	push	{r4, r7}
     686:	b082      	sub	sp, #8
     688:	af00      	add	r7, sp, #0
     68a:	6078      	str	r0, [r7, #4]
     68c:	460b      	mov	r3, r1
     68e:	70fb      	strb	r3, [r7, #3]
     690:	4613      	mov	r3, r2
     692:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     694:	78fa      	ldrb	r2, [r7, #3]
     696:	78bb      	ldrb	r3, [r7, #2]
     698:	78f8      	ldrb	r0, [r7, #3]
     69a:	78b9      	ldrb	r1, [r7, #2]
     69c:	687c      	ldr	r4, [r7, #4]
     69e:	01c0      	lsls	r0, r0, #7
     6a0:	4420      	add	r0, r4
     6a2:	4401      	add	r1, r0
     6a4:	3140      	adds	r1, #64	; 0x40
     6a6:	7809      	ldrb	r1, [r1, #0]
     6a8:	b2c9      	uxtb	r1, r1
     6aa:	f021 0104 	bic.w	r1, r1, #4
     6ae:	b2c8      	uxtb	r0, r1
     6b0:	6879      	ldr	r1, [r7, #4]
     6b2:	01d2      	lsls	r2, r2, #7
     6b4:	440a      	add	r2, r1
     6b6:	4413      	add	r3, r2
     6b8:	3340      	adds	r3, #64	; 0x40
     6ba:	4602      	mov	r2, r0
     6bc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6be:	bf00      	nop
     6c0:	3708      	adds	r7, #8
     6c2:	46bd      	mov	sp, r7
     6c4:	bc90      	pop	{r4, r7}
     6c6:	4770      	bx	lr

000006c8 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     6c8:	b480      	push	{r7}
     6ca:	b085      	sub	sp, #20
     6cc:	af00      	add	r7, sp, #0
     6ce:	60f8      	str	r0, [r7, #12]
     6d0:	460b      	mov	r3, r1
     6d2:	607a      	str	r2, [r7, #4]
     6d4:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d6:	7afb      	ldrb	r3, [r7, #11]
     6d8:	68fa      	ldr	r2, [r7, #12]
     6da:	01db      	lsls	r3, r3, #7
     6dc:	4413      	add	r3, r2
     6de:	3328      	adds	r3, #40	; 0x28
     6e0:	687a      	ldr	r2, [r7, #4]
     6e2:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6e4:	bf00      	nop
     6e6:	3714      	adds	r7, #20
     6e8:	46bd      	mov	sp, r7
     6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ee:	4770      	bx	lr

000006f0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	4603      	mov	r3, r0
     6f8:	6039      	str	r1, [r7, #0]
     6fa:	71fb      	strb	r3, [r7, #7]
     6fc:	4613      	mov	r3, r2
     6fe:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     700:	79bb      	ldrb	r3, [r7, #6]
     702:	2b01      	cmp	r3, #1
     704:	d01c      	beq.n	740 <_gpio_set_direction+0x50>
     706:	2b02      	cmp	r3, #2
     708:	d037      	beq.n	77a <_gpio_set_direction+0x8a>
     70a:	2b00      	cmp	r3, #0
     70c:	d14e      	bne.n	7ac <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     70e:	79fb      	ldrb	r3, [r7, #7]
     710:	683a      	ldr	r2, [r7, #0]
     712:	4619      	mov	r1, r3
     714:	482a      	ldr	r0, [pc, #168]	; (7c0 <_gpio_set_direction+0xd0>)
     716:	4b2b      	ldr	r3, [pc, #172]	; (7c4 <_gpio_set_direction+0xd4>)
     718:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     71a:	683b      	ldr	r3, [r7, #0]
     71c:	b29b      	uxth	r3, r3
     71e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     722:	79fb      	ldrb	r3, [r7, #7]
     724:	4619      	mov	r1, r3
     726:	4826      	ldr	r0, [pc, #152]	; (7c0 <_gpio_set_direction+0xd0>)
     728:	4b27      	ldr	r3, [pc, #156]	; (7c8 <_gpio_set_direction+0xd8>)
     72a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     72c:	683b      	ldr	r3, [r7, #0]
     72e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     730:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     734:	79fb      	ldrb	r3, [r7, #7]
     736:	4619      	mov	r1, r3
     738:	4821      	ldr	r0, [pc, #132]	; (7c0 <_gpio_set_direction+0xd0>)
     73a:	4b23      	ldr	r3, [pc, #140]	; (7c8 <_gpio_set_direction+0xd8>)
     73c:	4798      	blx	r3
		break;
     73e:	e03a      	b.n	7b6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     740:	79fb      	ldrb	r3, [r7, #7]
     742:	683a      	ldr	r2, [r7, #0]
     744:	4619      	mov	r1, r3
     746:	481e      	ldr	r0, [pc, #120]	; (7c0 <_gpio_set_direction+0xd0>)
     748:	4b1e      	ldr	r3, [pc, #120]	; (7c4 <_gpio_set_direction+0xd4>)
     74a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     74c:	683b      	ldr	r3, [r7, #0]
     74e:	b29b      	uxth	r3, r3
     750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     758:	79f9      	ldrb	r1, [r7, #7]
     75a:	461a      	mov	r2, r3
     75c:	4818      	ldr	r0, [pc, #96]	; (7c0 <_gpio_set_direction+0xd0>)
     75e:	4b1a      	ldr	r3, [pc, #104]	; (7c8 <_gpio_set_direction+0xd8>)
     760:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     762:	683b      	ldr	r3, [r7, #0]
     764:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     766:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     76a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     76e:	79f9      	ldrb	r1, [r7, #7]
     770:	461a      	mov	r2, r3
     772:	4813      	ldr	r0, [pc, #76]	; (7c0 <_gpio_set_direction+0xd0>)
     774:	4b14      	ldr	r3, [pc, #80]	; (7c8 <_gpio_set_direction+0xd8>)
     776:	4798      	blx	r3
		break;
     778:	e01d      	b.n	7b6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     77a:	79fb      	ldrb	r3, [r7, #7]
     77c:	683a      	ldr	r2, [r7, #0]
     77e:	4619      	mov	r1, r3
     780:	480f      	ldr	r0, [pc, #60]	; (7c0 <_gpio_set_direction+0xd0>)
     782:	4b12      	ldr	r3, [pc, #72]	; (7cc <_gpio_set_direction+0xdc>)
     784:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     786:	683b      	ldr	r3, [r7, #0]
     788:	b29b      	uxth	r3, r3
     78a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     78e:	79fb      	ldrb	r3, [r7, #7]
     790:	4619      	mov	r1, r3
     792:	480b      	ldr	r0, [pc, #44]	; (7c0 <_gpio_set_direction+0xd0>)
     794:	4b0c      	ldr	r3, [pc, #48]	; (7c8 <_gpio_set_direction+0xd8>)
     796:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     798:	683b      	ldr	r3, [r7, #0]
     79a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     79c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     7a0:	79fb      	ldrb	r3, [r7, #7]
     7a2:	4619      	mov	r1, r3
     7a4:	4806      	ldr	r0, [pc, #24]	; (7c0 <_gpio_set_direction+0xd0>)
     7a6:	4b08      	ldr	r3, [pc, #32]	; (7c8 <_gpio_set_direction+0xd8>)
     7a8:	4798      	blx	r3
		break;
     7aa:	e004      	b.n	7b6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     7ac:	2246      	movs	r2, #70	; 0x46
     7ae:	4908      	ldr	r1, [pc, #32]	; (7d0 <_gpio_set_direction+0xe0>)
     7b0:	2000      	movs	r0, #0
     7b2:	4b08      	ldr	r3, [pc, #32]	; (7d4 <_gpio_set_direction+0xe4>)
     7b4:	4798      	blx	r3
	}
}
     7b6:	bf00      	nop
     7b8:	3708      	adds	r7, #8
     7ba:	46bd      	mov	sp, r7
     7bc:	bd80      	pop	{r7, pc}
     7be:	bf00      	nop
     7c0:	41008000 	.word	0x41008000
     7c4:	000004b1 	.word	0x000004b1
     7c8:	000006c9 	.word	0x000006c9
     7cc:	00000489 	.word	0x00000489
     7d0:	00005b4c 	.word	0x00005b4c
     7d4:	000017fd 	.word	0x000017fd

000007d8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b082      	sub	sp, #8
     7dc:	af00      	add	r7, sp, #0
     7de:	4603      	mov	r3, r0
     7e0:	6039      	str	r1, [r7, #0]
     7e2:	71fb      	strb	r3, [r7, #7]
     7e4:	4613      	mov	r3, r2
     7e6:	71bb      	strb	r3, [r7, #6]
	if (level) {
     7e8:	79bb      	ldrb	r3, [r7, #6]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d006      	beq.n	7fc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     7ee:	79fb      	ldrb	r3, [r7, #7]
     7f0:	683a      	ldr	r2, [r7, #0]
     7f2:	4619      	mov	r1, r3
     7f4:	4806      	ldr	r0, [pc, #24]	; (810 <_gpio_set_level+0x38>)
     7f6:	4b07      	ldr	r3, [pc, #28]	; (814 <_gpio_set_level+0x3c>)
     7f8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     7fa:	e005      	b.n	808 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     7fc:	79fb      	ldrb	r3, [r7, #7]
     7fe:	683a      	ldr	r2, [r7, #0]
     800:	4619      	mov	r1, r3
     802:	4803      	ldr	r0, [pc, #12]	; (810 <_gpio_set_level+0x38>)
     804:	4b04      	ldr	r3, [pc, #16]	; (818 <_gpio_set_level+0x40>)
     806:	4798      	blx	r3
}
     808:	bf00      	nop
     80a:	3708      	adds	r7, #8
     80c:	46bd      	mov	sp, r7
     80e:	bd80      	pop	{r7, pc}
     810:	41008000 	.word	0x41008000
     814:	000004d9 	.word	0x000004d9
     818:	00000501 	.word	0x00000501

0000081c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	4603      	mov	r3, r0
     824:	71fb      	strb	r3, [r7, #7]
     826:	460b      	mov	r3, r1
     828:	71bb      	strb	r3, [r7, #6]
     82a:	4613      	mov	r3, r2
     82c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     82e:	797b      	ldrb	r3, [r7, #5]
     830:	2b01      	cmp	r3, #1
     832:	d00a      	beq.n	84a <_gpio_set_pin_pull_mode+0x2e>
     834:	2b02      	cmp	r3, #2
     836:	d01f      	beq.n	878 <_gpio_set_pin_pull_mode+0x5c>
     838:	2b00      	cmp	r3, #0
     83a:	d134      	bne.n	8a6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     83c:	79ba      	ldrb	r2, [r7, #6]
     83e:	79fb      	ldrb	r3, [r7, #7]
     840:	4619      	mov	r1, r3
     842:	481e      	ldr	r0, [pc, #120]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     844:	4b1e      	ldr	r3, [pc, #120]	; (8c0 <_gpio_set_pin_pull_mode+0xa4>)
     846:	4798      	blx	r3
		break;
     848:	e033      	b.n	8b2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     84a:	79bb      	ldrb	r3, [r7, #6]
     84c:	2201      	movs	r2, #1
     84e:	409a      	lsls	r2, r3
     850:	79fb      	ldrb	r3, [r7, #7]
     852:	4619      	mov	r1, r3
     854:	4819      	ldr	r0, [pc, #100]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     856:	4b1b      	ldr	r3, [pc, #108]	; (8c4 <_gpio_set_pin_pull_mode+0xa8>)
     858:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     85a:	79ba      	ldrb	r2, [r7, #6]
     85c:	79fb      	ldrb	r3, [r7, #7]
     85e:	4619      	mov	r1, r3
     860:	4816      	ldr	r0, [pc, #88]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     862:	4b19      	ldr	r3, [pc, #100]	; (8c8 <_gpio_set_pin_pull_mode+0xac>)
     864:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     866:	79bb      	ldrb	r3, [r7, #6]
     868:	2201      	movs	r2, #1
     86a:	409a      	lsls	r2, r3
     86c:	79fb      	ldrb	r3, [r7, #7]
     86e:	4619      	mov	r1, r3
     870:	4812      	ldr	r0, [pc, #72]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     872:	4b16      	ldr	r3, [pc, #88]	; (8cc <_gpio_set_pin_pull_mode+0xb0>)
     874:	4798      	blx	r3
		break;
     876:	e01c      	b.n	8b2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     878:	79bb      	ldrb	r3, [r7, #6]
     87a:	2201      	movs	r2, #1
     87c:	409a      	lsls	r2, r3
     87e:	79fb      	ldrb	r3, [r7, #7]
     880:	4619      	mov	r1, r3
     882:	480e      	ldr	r0, [pc, #56]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     884:	4b0f      	ldr	r3, [pc, #60]	; (8c4 <_gpio_set_pin_pull_mode+0xa8>)
     886:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     888:	79ba      	ldrb	r2, [r7, #6]
     88a:	79fb      	ldrb	r3, [r7, #7]
     88c:	4619      	mov	r1, r3
     88e:	480b      	ldr	r0, [pc, #44]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     890:	4b0d      	ldr	r3, [pc, #52]	; (8c8 <_gpio_set_pin_pull_mode+0xac>)
     892:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     894:	79bb      	ldrb	r3, [r7, #6]
     896:	2201      	movs	r2, #1
     898:	409a      	lsls	r2, r3
     89a:	79fb      	ldrb	r3, [r7, #7]
     89c:	4619      	mov	r1, r3
     89e:	4807      	ldr	r0, [pc, #28]	; (8bc <_gpio_set_pin_pull_mode+0xa0>)
     8a0:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <_gpio_set_pin_pull_mode+0xb4>)
     8a2:	4798      	blx	r3
		break;
     8a4:	e005      	b.n	8b2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     8a6:	2289      	movs	r2, #137	; 0x89
     8a8:	490a      	ldr	r1, [pc, #40]	; (8d4 <_gpio_set_pin_pull_mode+0xb8>)
     8aa:	2000      	movs	r0, #0
     8ac:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <_gpio_set_pin_pull_mode+0xbc>)
     8ae:	4798      	blx	r3
		break;
     8b0:	bf00      	nop
	}
}
     8b2:	bf00      	nop
     8b4:	3708      	adds	r7, #8
     8b6:	46bd      	mov	sp, r7
     8b8:	bd80      	pop	{r7, pc}
     8ba:	bf00      	nop
     8bc:	41008000 	.word	0x41008000
     8c0:	00000685 	.word	0x00000685
     8c4:	000004b1 	.word	0x000004b1
     8c8:	00000641 	.word	0x00000641
     8cc:	000004d9 	.word	0x000004d9
     8d0:	00000501 	.word	0x00000501
     8d4:	00005b4c 	.word	0x00005b4c
     8d8:	000017fd 	.word	0x000017fd

000008dc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     8dc:	b590      	push	{r4, r7, lr}
     8de:	b085      	sub	sp, #20
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
     8e4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	095b      	lsrs	r3, r3, #5
     8ea:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	b2db      	uxtb	r3, r3
     8f0:	f003 031f 	and.w	r3, r3, #31
     8f4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     8f6:	683b      	ldr	r3, [r7, #0]
     8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
     8fc:	d106      	bne.n	90c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     8fe:	7bba      	ldrb	r2, [r7, #14]
     900:	7bf9      	ldrb	r1, [r7, #15]
     902:	2300      	movs	r3, #0
     904:	4812      	ldr	r0, [pc, #72]	; (950 <_gpio_set_pin_function+0x74>)
     906:	4c13      	ldr	r4, [pc, #76]	; (954 <_gpio_set_pin_function+0x78>)
     908:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     90a:	e01d      	b.n	948 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     90c:	7bba      	ldrb	r2, [r7, #14]
     90e:	7bf9      	ldrb	r1, [r7, #15]
     910:	2301      	movs	r3, #1
     912:	480f      	ldr	r0, [pc, #60]	; (950 <_gpio_set_pin_function+0x74>)
     914:	4c0f      	ldr	r4, [pc, #60]	; (954 <_gpio_set_pin_function+0x78>)
     916:	47a0      	blx	r4
		if (pin & 1) {
     918:	7bbb      	ldrb	r3, [r7, #14]
     91a:	f003 0301 	and.w	r3, r3, #1
     91e:	2b00      	cmp	r3, #0
     920:	d009      	beq.n	936 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     922:	7bbb      	ldrb	r3, [r7, #14]
     924:	085b      	lsrs	r3, r3, #1
     926:	b2da      	uxtb	r2, r3
     928:	683b      	ldr	r3, [r7, #0]
     92a:	b2db      	uxtb	r3, r3
     92c:	7bf9      	ldrb	r1, [r7, #15]
     92e:	4808      	ldr	r0, [pc, #32]	; (950 <_gpio_set_pin_function+0x74>)
     930:	4c09      	ldr	r4, [pc, #36]	; (958 <_gpio_set_pin_function+0x7c>)
     932:	47a0      	blx	r4
}
     934:	e008      	b.n	948 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     936:	7bbb      	ldrb	r3, [r7, #14]
     938:	085b      	lsrs	r3, r3, #1
     93a:	b2da      	uxtb	r2, r3
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	b2db      	uxtb	r3, r3
     940:	7bf9      	ldrb	r1, [r7, #15]
     942:	4803      	ldr	r0, [pc, #12]	; (950 <_gpio_set_pin_function+0x74>)
     944:	4c05      	ldr	r4, [pc, #20]	; (95c <_gpio_set_pin_function+0x80>)
     946:	47a0      	blx	r4
}
     948:	bf00      	nop
     94a:	3714      	adds	r7, #20
     94c:	46bd      	mov	sp, r7
     94e:	bd90      	pop	{r4, r7, pc}
     950:	41008000 	.word	0x41008000
     954:	000005e7 	.word	0x000005e7
     958:	00000589 	.word	0x00000589
     95c:	00000529 	.word	0x00000529

00000960 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	4603      	mov	r3, r0
     968:	460a      	mov	r2, r1
     96a:	71fb      	strb	r3, [r7, #7]
     96c:	4613      	mov	r3, r2
     96e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     970:	79fb      	ldrb	r3, [r7, #7]
     972:	095b      	lsrs	r3, r3, #5
     974:	b2d8      	uxtb	r0, r3
     976:	79fb      	ldrb	r3, [r7, #7]
     978:	f003 031f 	and.w	r3, r3, #31
     97c:	b2db      	uxtb	r3, r3
     97e:	79ba      	ldrb	r2, [r7, #6]
     980:	4619      	mov	r1, r3
     982:	4b03      	ldr	r3, [pc, #12]	; (990 <gpio_set_pin_pull_mode+0x30>)
     984:	4798      	blx	r3
}
     986:	bf00      	nop
     988:	3708      	adds	r7, #8
     98a:	46bd      	mov	sp, r7
     98c:	bd80      	pop	{r7, pc}
     98e:	bf00      	nop
     990:	0000081d 	.word	0x0000081d

00000994 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     994:	b580      	push	{r7, lr}
     996:	b082      	sub	sp, #8
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
     99c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     99e:	6839      	ldr	r1, [r7, #0]
     9a0:	6878      	ldr	r0, [r7, #4]
     9a2:	4b03      	ldr	r3, [pc, #12]	; (9b0 <gpio_set_pin_function+0x1c>)
     9a4:	4798      	blx	r3
}
     9a6:	bf00      	nop
     9a8:	3708      	adds	r7, #8
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop
     9b0:	000008dd 	.word	0x000008dd

000009b4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	b082      	sub	sp, #8
     9b8:	af00      	add	r7, sp, #0
     9ba:	4603      	mov	r3, r0
     9bc:	460a      	mov	r2, r1
     9be:	71fb      	strb	r3, [r7, #7]
     9c0:	4613      	mov	r3, r2
     9c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     9c4:	79fb      	ldrb	r3, [r7, #7]
     9c6:	095b      	lsrs	r3, r3, #5
     9c8:	b2d8      	uxtb	r0, r3
     9ca:	79fb      	ldrb	r3, [r7, #7]
     9cc:	f003 031f 	and.w	r3, r3, #31
     9d0:	2201      	movs	r2, #1
     9d2:	fa02 f303 	lsl.w	r3, r2, r3
     9d6:	79ba      	ldrb	r2, [r7, #6]
     9d8:	4619      	mov	r1, r3
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <gpio_set_pin_direction+0x34>)
     9dc:	4798      	blx	r3
}
     9de:	bf00      	nop
     9e0:	3708      	adds	r7, #8
     9e2:	46bd      	mov	sp, r7
     9e4:	bd80      	pop	{r7, pc}
     9e6:	bf00      	nop
     9e8:	000006f1 	.word	0x000006f1

000009ec <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	4603      	mov	r3, r0
     9f4:	460a      	mov	r2, r1
     9f6:	71fb      	strb	r3, [r7, #7]
     9f8:	4613      	mov	r3, r2
     9fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     9fc:	79fb      	ldrb	r3, [r7, #7]
     9fe:	095b      	lsrs	r3, r3, #5
     a00:	b2d8      	uxtb	r0, r3
     a02:	79fb      	ldrb	r3, [r7, #7]
     a04:	f003 031f 	and.w	r3, r3, #31
     a08:	2201      	movs	r2, #1
     a0a:	fa02 f303 	lsl.w	r3, r2, r3
     a0e:	79ba      	ldrb	r2, [r7, #6]
     a10:	4619      	mov	r1, r3
     a12:	4b03      	ldr	r3, [pc, #12]	; (a20 <gpio_set_pin_level+0x34>)
     a14:	4798      	blx	r3
}
     a16:	bf00      	nop
     a18:	3708      	adds	r7, #8
     a1a:	46bd      	mov	sp, r7
     a1c:	bd80      	pop	{r7, pc}
     a1e:	bf00      	nop
     a20:	000007d9 	.word	0x000007d9

00000a24 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     a24:	b580      	push	{r7, lr}
     a26:	af00      	add	r7, sp, #0
	_init_chip();
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <init_mcu+0xc>)
     a2a:	4798      	blx	r3
}
     a2c:	bf00      	nop
     a2e:	bd80      	pop	{r7, pc}
     a30:	00001b6d 	.word	0x00001b6d

00000a34 <EXTERNAL_IRQ_0_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct pwm_descriptor PWM_0;

void EXTERNAL_IRQ_0_init(void)
{
     a34:	b580      	push	{r7, lr}
     a36:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a38:	2240      	movs	r2, #64	; 0x40
     a3a:	2104      	movs	r1, #4
     a3c:	480b      	ldr	r0, [pc, #44]	; (a6c <EXTERNAL_IRQ_0_init+0x38>)
     a3e:	4b0c      	ldr	r3, [pc, #48]	; (a70 <EXTERNAL_IRQ_0_init+0x3c>)
     a40:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     a42:	480c      	ldr	r0, [pc, #48]	; (a74 <EXTERNAL_IRQ_0_init+0x40>)
     a44:	4b0c      	ldr	r3, [pc, #48]	; (a78 <EXTERNAL_IRQ_0_init+0x44>)
     a46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB00, GPIO_DIRECTION_IN);
     a48:	2101      	movs	r1, #1
     a4a:	2020      	movs	r0, #32
     a4c:	4b0b      	ldr	r3, [pc, #44]	; (a7c <EXTERNAL_IRQ_0_init+0x48>)
     a4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB00,
     a50:	2100      	movs	r1, #0
     a52:	2020      	movs	r0, #32
     a54:	4b0a      	ldr	r3, [pc, #40]	; (a80 <EXTERNAL_IRQ_0_init+0x4c>)
     a56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB00, PINMUX_PB00A_EIC_EXTINT0);
     a58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     a5c:	2020      	movs	r0, #32
     a5e:	4b09      	ldr	r3, [pc, #36]	; (a84 <EXTERNAL_IRQ_0_init+0x50>)
     a60:	4798      	blx	r3

	ext_irq_init();
     a62:	4b09      	ldr	r3, [pc, #36]	; (a88 <EXTERNAL_IRQ_0_init+0x54>)
     a64:	4798      	blx	r3
}
     a66:	bf00      	nop
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	40001c00 	.word	0x40001c00
     a70:	00000383 	.word	0x00000383
     a74:	40000800 	.word	0x40000800
     a78:	000003a9 	.word	0x000003a9
     a7c:	000009b5 	.word	0x000009b5
     a80:	00000961 	.word	0x00000961
     a84:	00000995 	.word	0x00000995
     a88:	00000da1 	.word	0x00000da1

00000a8c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     a8c:	b580      	push	{r7, lr}
     a8e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a90:	2240      	movs	r2, #64	; 0x40
     a92:	210b      	movs	r1, #11
     a94:	4804      	ldr	r0, [pc, #16]	; (aa8 <EVENT_SYSTEM_0_init+0x1c>)
     a96:	4b05      	ldr	r3, [pc, #20]	; (aac <EVENT_SYSTEM_0_init+0x20>)
     a98:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     a9a:	4805      	ldr	r0, [pc, #20]	; (ab0 <EVENT_SYSTEM_0_init+0x24>)
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <EVENT_SYSTEM_0_init+0x28>)
     a9e:	4798      	blx	r3

	event_system_init();
     aa0:	4b05      	ldr	r3, [pc, #20]	; (ab8 <EVENT_SYSTEM_0_init+0x2c>)
     aa2:	4798      	blx	r3
}
     aa4:	bf00      	nop
     aa6:	bd80      	pop	{r7, pc}
     aa8:	40001c00 	.word	0x40001c00
     aac:	00000383 	.word	0x00000383
     ab0:	40000800 	.word	0x40000800
     ab4:	00000409 	.word	0x00000409
     ab8:	00000d8d 	.word	0x00000d8d

00000abc <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     abc:	b580      	push	{r7, lr}
     abe:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ac0:	2240      	movs	r2, #64	; 0x40
     ac2:	2117      	movs	r1, #23
     ac4:	4806      	ldr	r0, [pc, #24]	; (ae0 <USART_0_CLOCK_init+0x24>)
     ac6:	4b07      	ldr	r3, [pc, #28]	; (ae4 <USART_0_CLOCK_init+0x28>)
     ac8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aca:	2243      	movs	r2, #67	; 0x43
     acc:	2103      	movs	r1, #3
     ace:	4804      	ldr	r0, [pc, #16]	; (ae0 <USART_0_CLOCK_init+0x24>)
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <USART_0_CLOCK_init+0x28>)
     ad2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     ad4:	4804      	ldr	r0, [pc, #16]	; (ae8 <USART_0_CLOCK_init+0x2c>)
     ad6:	4b05      	ldr	r3, [pc, #20]	; (aec <USART_0_CLOCK_init+0x30>)
     ad8:	4798      	blx	r3
}
     ada:	bf00      	nop
     adc:	bd80      	pop	{r7, pc}
     ade:	bf00      	nop
     ae0:	40001c00 	.word	0x40001c00
     ae4:	00000383 	.word	0x00000383
     ae8:	40000800 	.word	0x40000800
     aec:	00000429 	.word	0x00000429

00000af0 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     af0:	b580      	push	{r7, lr}
     af2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     af4:	4904      	ldr	r1, [pc, #16]	; (b08 <USART_0_PORT_init+0x18>)
     af6:	2039      	movs	r0, #57	; 0x39
     af8:	4b04      	ldr	r3, [pc, #16]	; (b0c <USART_0_PORT_init+0x1c>)
     afa:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     afc:	4904      	ldr	r1, [pc, #16]	; (b10 <USART_0_PORT_init+0x20>)
     afe:	2038      	movs	r0, #56	; 0x38
     b00:	4b02      	ldr	r3, [pc, #8]	; (b0c <USART_0_PORT_init+0x1c>)
     b02:	4798      	blx	r3
}
     b04:	bf00      	nop
     b06:	bd80      	pop	{r7, pc}
     b08:	00390003 	.word	0x00390003
     b0c:	00000995 	.word	0x00000995
     b10:	00380003 	.word	0x00380003

00000b14 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     b14:	b590      	push	{r4, r7, lr}
     b16:	b083      	sub	sp, #12
     b18:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     b1a:	4b08      	ldr	r3, [pc, #32]	; (b3c <USART_0_init+0x28>)
     b1c:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM2, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     b1e:	2300      	movs	r3, #0
     b20:	9300      	str	r3, [sp, #0]
     b22:	2310      	movs	r3, #16
     b24:	4a06      	ldr	r2, [pc, #24]	; (b40 <USART_0_init+0x2c>)
     b26:	4907      	ldr	r1, [pc, #28]	; (b44 <USART_0_init+0x30>)
     b28:	4807      	ldr	r0, [pc, #28]	; (b48 <USART_0_init+0x34>)
     b2a:	4c08      	ldr	r4, [pc, #32]	; (b4c <USART_0_init+0x38>)
     b2c:	47a0      	blx	r4
	USART_0_PORT_init();
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <USART_0_init+0x3c>)
     b30:	4798      	blx	r3
}
     b32:	bf00      	nop
     b34:	3704      	adds	r7, #4
     b36:	46bd      	mov	sp, r7
     b38:	bd90      	pop	{r4, r7, pc}
     b3a:	bf00      	nop
     b3c:	00000abd 	.word	0x00000abd
     b40:	200000e8 	.word	0x200000e8
     b44:	41012000 	.word	0x41012000
     b48:	20000220 	.word	0x20000220
     b4c:	00001405 	.word	0x00001405
     b50:	00000af1 	.word	0x00000af1

00000b54 <TIMER_0_CLOCK_init>:

void TIMER_0_CLOCK_init(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     b58:	4804      	ldr	r0, [pc, #16]	; (b6c <TIMER_0_CLOCK_init+0x18>)
     b5a:	4b05      	ldr	r3, [pc, #20]	; (b70 <TIMER_0_CLOCK_init+0x1c>)
     b5c:	4798      	blx	r3

	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b5e:	2240      	movs	r2, #64	; 0x40
     b60:	2109      	movs	r1, #9
     b62:	4804      	ldr	r0, [pc, #16]	; (b74 <TIMER_0_CLOCK_init+0x20>)
     b64:	4b04      	ldr	r3, [pc, #16]	; (b78 <TIMER_0_CLOCK_init+0x24>)
     b66:	4798      	blx	r3
}
     b68:	bf00      	nop
     b6a:	bd80      	pop	{r7, pc}
     b6c:	40000800 	.word	0x40000800
     b70:	000003c9 	.word	0x000003c9
     b74:	40001c00 	.word	0x40001c00
     b78:	00000383 	.word	0x00000383

00000b7c <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
     b80:	4808      	ldr	r0, [pc, #32]	; (ba4 <TIMER_1_init+0x28>)
     b82:	4b09      	ldr	r3, [pc, #36]	; (ba8 <TIMER_1_init+0x2c>)
     b84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b86:	2240      	movs	r2, #64	; 0x40
     b88:	2109      	movs	r1, #9
     b8a:	4808      	ldr	r0, [pc, #32]	; (bac <TIMER_1_init+0x30>)
     b8c:	4b08      	ldr	r3, [pc, #32]	; (bb0 <TIMER_1_init+0x34>)
     b8e:	4798      	blx	r3

	timer_init(&TIMER_1, TC1, _tc_get_timer());
     b90:	4b08      	ldr	r3, [pc, #32]	; (bb4 <TIMER_1_init+0x38>)
     b92:	4798      	blx	r3
     b94:	4603      	mov	r3, r0
     b96:	461a      	mov	r2, r3
     b98:	4907      	ldr	r1, [pc, #28]	; (bb8 <TIMER_1_init+0x3c>)
     b9a:	4808      	ldr	r0, [pc, #32]	; (bbc <TIMER_1_init+0x40>)
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <TIMER_1_init+0x44>)
     b9e:	4798      	blx	r3
}
     ba0:	bf00      	nop
     ba2:	bd80      	pop	{r7, pc}
     ba4:	40000800 	.word	0x40000800
     ba8:	000003e9 	.word	0x000003e9
     bac:	40001c00 	.word	0x40001c00
     bb0:	00000383 	.word	0x00000383
     bb4:	000039b1 	.word	0x000039b1
     bb8:	40003c00 	.word	0x40003c00
     bbc:	20000204 	.word	0x20000204
     bc0:	000010ed 	.word	0x000010ed

00000bc4 <TIMER_2_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_2_init(void)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
     bc8:	4808      	ldr	r0, [pc, #32]	; (bec <TIMER_2_init+0x28>)
     bca:	4b09      	ldr	r3, [pc, #36]	; (bf0 <TIMER_2_init+0x2c>)
     bcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	211a      	movs	r1, #26
     bd2:	4808      	ldr	r0, [pc, #32]	; (bf4 <TIMER_2_init+0x30>)
     bd4:	4b08      	ldr	r3, [pc, #32]	; (bf8 <TIMER_2_init+0x34>)
     bd6:	4798      	blx	r3

	timer_init(&TIMER_2, TC2, _tc_get_timer());
     bd8:	4b08      	ldr	r3, [pc, #32]	; (bfc <TIMER_2_init+0x38>)
     bda:	4798      	blx	r3
     bdc:	4603      	mov	r3, r0
     bde:	461a      	mov	r2, r3
     be0:	4907      	ldr	r1, [pc, #28]	; (c00 <TIMER_2_init+0x3c>)
     be2:	4808      	ldr	r0, [pc, #32]	; (c04 <TIMER_2_init+0x40>)
     be4:	4b08      	ldr	r3, [pc, #32]	; (c08 <TIMER_2_init+0x44>)
     be6:	4798      	blx	r3
}
     be8:	bf00      	nop
     bea:	bd80      	pop	{r7, pc}
     bec:	40000800 	.word	0x40000800
     bf0:	00000449 	.word	0x00000449
     bf4:	40001c00 	.word	0x40001c00
     bf8:	00000383 	.word	0x00000383
     bfc:	000039b1 	.word	0x000039b1
     c00:	4101a000 	.word	0x4101a000
     c04:	200001cc 	.word	0x200001cc
     c08:	000010ed 	.word	0x000010ed

00000c0c <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22E_TC4_WO0);
     c10:	4904      	ldr	r1, [pc, #16]	; (c24 <PWM_0_PORT_init+0x18>)
     c12:	2016      	movs	r0, #22
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <PWM_0_PORT_init+0x1c>)
     c16:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23E_TC4_WO1);
     c18:	4904      	ldr	r1, [pc, #16]	; (c2c <PWM_0_PORT_init+0x20>)
     c1a:	2017      	movs	r0, #23
     c1c:	4b02      	ldr	r3, [pc, #8]	; (c28 <PWM_0_PORT_init+0x1c>)
     c1e:	4798      	blx	r3
}
     c20:	bf00      	nop
     c22:	bd80      	pop	{r7, pc}
     c24:	00160004 	.word	0x00160004
     c28:	00000995 	.word	0x00000995
     c2c:	00170004 	.word	0x00170004

00000c30 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     c30:	b580      	push	{r7, lr}
     c32:	af00      	add	r7, sp, #0

	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
     c34:	4804      	ldr	r0, [pc, #16]	; (c48 <PWM_0_CLOCK_init+0x18>)
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <PWM_0_CLOCK_init+0x1c>)
     c38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c3a:	2240      	movs	r2, #64	; 0x40
     c3c:	211e      	movs	r1, #30
     c3e:	4804      	ldr	r0, [pc, #16]	; (c50 <PWM_0_CLOCK_init+0x20>)
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <PWM_0_CLOCK_init+0x24>)
     c42:	4798      	blx	r3
}
     c44:	bf00      	nop
     c46:	bd80      	pop	{r7, pc}
     c48:	40000800 	.word	0x40000800
     c4c:	00000469 	.word	0x00000469
     c50:	40001c00 	.word	0x40001c00
     c54:	00000383 	.word	0x00000383

00000c58 <PWM_0_init>:

void PWM_0_init(void)
{
     c58:	b580      	push	{r7, lr}
     c5a:	af00      	add	r7, sp, #0
	PWM_0_CLOCK_init();
     c5c:	4b06      	ldr	r3, [pc, #24]	; (c78 <PWM_0_init+0x20>)
     c5e:	4798      	blx	r3
	PWM_0_PORT_init();
     c60:	4b06      	ldr	r3, [pc, #24]	; (c7c <PWM_0_init+0x24>)
     c62:	4798      	blx	r3
	pwm_init(&PWM_0, TC4, _tc_get_pwm());
     c64:	4b06      	ldr	r3, [pc, #24]	; (c80 <PWM_0_init+0x28>)
     c66:	4798      	blx	r3
     c68:	4603      	mov	r3, r0
     c6a:	461a      	mov	r2, r3
     c6c:	4905      	ldr	r1, [pc, #20]	; (c84 <PWM_0_init+0x2c>)
     c6e:	4806      	ldr	r0, [pc, #24]	; (c88 <PWM_0_init+0x30>)
     c70:	4b06      	ldr	r3, [pc, #24]	; (c8c <PWM_0_init+0x34>)
     c72:	4798      	blx	r3
}
     c74:	bf00      	nop
     c76:	bd80      	pop	{r7, pc}
     c78:	00000c31 	.word	0x00000c31
     c7c:	00000c0d 	.word	0x00000c0d
     c80:	000039c1 	.word	0x000039c1
     c84:	42001400 	.word	0x42001400
     c88:	200001e8 	.word	0x200001e8
     c8c:	00000f11 	.word	0x00000f11

00000c90 <system_init>:

void system_init(void)
{
     c90:	b580      	push	{r7, lr}
     c92:	af00      	add	r7, sp, #0
	init_mcu();
     c94:	4b1d      	ldr	r3, [pc, #116]	; (d0c <system_init+0x7c>)
     c96:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(MOTOR_INPUT_2,
     c98:	2100      	movs	r1, #0
     c9a:	2006      	movs	r0, #6
     c9c:	4b1c      	ldr	r3, [pc, #112]	; (d10 <system_init+0x80>)
     c9e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_INPUT_2, GPIO_DIRECTION_OUT);
     ca0:	2102      	movs	r1, #2
     ca2:	2006      	movs	r0, #6
     ca4:	4b1b      	ldr	r3, [pc, #108]	; (d14 <system_init+0x84>)
     ca6:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_INPUT_2, GPIO_PIN_FUNCTION_OFF);
     ca8:	f04f 31ff 	mov.w	r1, #4294967295
     cac:	2006      	movs	r0, #6
     cae:	4b1a      	ldr	r3, [pc, #104]	; (d18 <system_init+0x88>)
     cb0:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(MOTOR_INPUT_1,
     cb2:	2100      	movs	r1, #0
     cb4:	2007      	movs	r0, #7
     cb6:	4b16      	ldr	r3, [pc, #88]	; (d10 <system_init+0x80>)
     cb8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MOTOR_INPUT_1, GPIO_DIRECTION_OUT);
     cba:	2102      	movs	r1, #2
     cbc:	2007      	movs	r0, #7
     cbe:	4b15      	ldr	r3, [pc, #84]	; (d14 <system_init+0x84>)
     cc0:	4798      	blx	r3

	gpio_set_pin_function(MOTOR_INPUT_1, GPIO_PIN_FUNCTION_OFF);
     cc2:	f04f 31ff 	mov.w	r1, #4294967295
     cc6:	2007      	movs	r0, #7
     cc8:	4b13      	ldr	r3, [pc, #76]	; (d18 <system_init+0x88>)
     cca:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(HAL_SENSOR_B, GPIO_DIRECTION_IN);
     ccc:	2101      	movs	r1, #1
     cce:	2021      	movs	r0, #33	; 0x21
     cd0:	4b10      	ldr	r3, [pc, #64]	; (d14 <system_init+0x84>)
     cd2:	4798      	blx	r3

	gpio_set_pin_pull_mode(HAL_SENSOR_B,
     cd4:	2102      	movs	r1, #2
     cd6:	2021      	movs	r0, #33	; 0x21
     cd8:	4b10      	ldr	r3, [pc, #64]	; (d1c <system_init+0x8c>)
     cda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(HAL_SENSOR_B, GPIO_PIN_FUNCTION_OFF);
     cdc:	f04f 31ff 	mov.w	r1, #4294967295
     ce0:	2021      	movs	r0, #33	; 0x21
     ce2:	4b0d      	ldr	r3, [pc, #52]	; (d18 <system_init+0x88>)
     ce4:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     ce6:	4b0e      	ldr	r3, [pc, #56]	; (d20 <system_init+0x90>)
     ce8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     cea:	4b0e      	ldr	r3, [pc, #56]	; (d24 <system_init+0x94>)
     cec:	4798      	blx	r3

	USART_0_init();
     cee:	4b0e      	ldr	r3, [pc, #56]	; (d28 <system_init+0x98>)
     cf0:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     cf2:	4b0e      	ldr	r3, [pc, #56]	; (d2c <system_init+0x9c>)
     cf4:	4798      	blx	r3

	TIMER_0_init();
     cf6:	4b0e      	ldr	r3, [pc, #56]	; (d30 <system_init+0xa0>)
     cf8:	4798      	blx	r3

	TIMER_1_init();
     cfa:	4b0e      	ldr	r3, [pc, #56]	; (d34 <system_init+0xa4>)
     cfc:	4798      	blx	r3
	TIMER_2_init();
     cfe:	4b0e      	ldr	r3, [pc, #56]	; (d38 <system_init+0xa8>)
     d00:	4798      	blx	r3
	PWM_0_init();
     d02:	4b0e      	ldr	r3, [pc, #56]	; (d3c <system_init+0xac>)
     d04:	4798      	blx	r3
}
     d06:	bf00      	nop
     d08:	bd80      	pop	{r7, pc}
     d0a:	bf00      	nop
     d0c:	00000a25 	.word	0x00000a25
     d10:	000009ed 	.word	0x000009ed
     d14:	000009b5 	.word	0x000009b5
     d18:	00000995 	.word	0x00000995
     d1c:	00000961 	.word	0x00000961
     d20:	00000a35 	.word	0x00000a35
     d24:	00000a8d 	.word	0x00000a8d
     d28:	00000b15 	.word	0x00000b15
     d2c:	00000b55 	.word	0x00000b55
     d30:	00003dd5 	.word	0x00003dd5
     d34:	00000b7d 	.word	0x00000b7d
     d38:	00000bc5 	.word	0x00000bc5
     d3c:	00000c59 	.word	0x00000c59

00000d40 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     d40:	b480      	push	{r7}
     d42:	b085      	sub	sp, #20
     d44:	af00      	add	r7, sp, #0
     d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d48:	f3ef 8310 	mrs	r3, PRIMASK
     d4c:	60fb      	str	r3, [r7, #12]
  return(result);
     d4e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d54:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d56:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d5a:	bf00      	nop
     d5c:	3714      	adds	r7, #20
     d5e:	46bd      	mov	sp, r7
     d60:	f85d 7b04 	ldr.w	r7, [sp], #4
     d64:	4770      	bx	lr

00000d66 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     d66:	b480      	push	{r7}
     d68:	b085      	sub	sp, #20
     d6a:	af00      	add	r7, sp, #0
     d6c:	6078      	str	r0, [r7, #4]
     d6e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	681b      	ldr	r3, [r3, #0]
     d76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	f383 8810 	msr	PRIMASK, r3
}
     d7e:	bf00      	nop
     d80:	3714      	adds	r7, #20
     d82:	46bd      	mov	sp, r7
     d84:	f85d 7b04 	ldr.w	r7, [sp], #4
     d88:	4770      	bx	lr
	...

00000d8c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	af00      	add	r7, sp, #0
	return _event_system_init();
     d90:	4b02      	ldr	r3, [pc, #8]	; (d9c <event_system_init+0x10>)
     d92:	4798      	blx	r3
     d94:	4603      	mov	r3, r0
}
     d96:	4618      	mov	r0, r3
     d98:	bd80      	pop	{r7, pc}
     d9a:	bf00      	nop
     d9c:	00002155 	.word	0x00002155

00000da0 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	b082      	sub	sp, #8
     da4:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     da6:	2300      	movs	r3, #0
     da8:	80fb      	strh	r3, [r7, #6]
     daa:	e00e      	b.n	dca <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     dac:	88fb      	ldrh	r3, [r7, #6]
     dae:	4a0c      	ldr	r2, [pc, #48]	; (de0 <ext_irq_init+0x40>)
     db0:	00db      	lsls	r3, r3, #3
     db2:	4413      	add	r3, r2
     db4:	f04f 32ff 	mov.w	r2, #4294967295
     db8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     dba:	88fb      	ldrh	r3, [r7, #6]
     dbc:	4a08      	ldr	r2, [pc, #32]	; (de0 <ext_irq_init+0x40>)
     dbe:	2100      	movs	r1, #0
     dc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     dc4:	88fb      	ldrh	r3, [r7, #6]
     dc6:	3301      	adds	r3, #1
     dc8:	80fb      	strh	r3, [r7, #6]
     dca:	88fb      	ldrh	r3, [r7, #6]
     dcc:	2b00      	cmp	r3, #0
     dce:	d0ed      	beq.n	dac <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
     dd0:	4804      	ldr	r0, [pc, #16]	; (de4 <ext_irq_init+0x44>)
     dd2:	4b05      	ldr	r3, [pc, #20]	; (de8 <ext_irq_init+0x48>)
     dd4:	4798      	blx	r3
     dd6:	4603      	mov	r3, r0
}
     dd8:	4618      	mov	r0, r3
     dda:	3708      	adds	r7, #8
     ddc:	46bd      	mov	sp, r7
     dde:	bd80      	pop	{r7, pc}
     de0:	200000f8 	.word	0x200000f8
     de4:	00000ded 	.word	0x00000ded
     de8:	00001e99 	.word	0x00001e99

00000dec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     dec:	b580      	push	{r7, lr}
     dee:	b084      	sub	sp, #16
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     df4:	2300      	movs	r3, #0
     df6:	73fb      	strb	r3, [r7, #15]
     df8:	2301      	movs	r3, #1
     dfa:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
     dfc:	e02a      	b.n	e54 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
     dfe:	7bba      	ldrb	r2, [r7, #14]
     e00:	7bfb      	ldrb	r3, [r7, #15]
     e02:	4413      	add	r3, r2
     e04:	105b      	asrs	r3, r3, #1
     e06:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
     e08:	7b7b      	ldrb	r3, [r7, #13]
     e0a:	2b00      	cmp	r3, #0
     e0c:	d127      	bne.n	e5e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     e0e:	7b7b      	ldrb	r3, [r7, #13]
     e10:	4a16      	ldr	r2, [pc, #88]	; (e6c <process_ext_irq+0x80>)
     e12:	00db      	lsls	r3, r3, #3
     e14:	4413      	add	r3, r2
     e16:	685a      	ldr	r2, [r3, #4]
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	429a      	cmp	r2, r3
     e1c:	d10b      	bne.n	e36 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
     e1e:	7b7b      	ldrb	r3, [r7, #13]
     e20:	4a12      	ldr	r2, [pc, #72]	; (e6c <process_ext_irq+0x80>)
     e22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e26:	2b00      	cmp	r3, #0
     e28:	d01b      	beq.n	e62 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
     e2a:	7b7b      	ldrb	r3, [r7, #13]
     e2c:	4a0f      	ldr	r2, [pc, #60]	; (e6c <process_ext_irq+0x80>)
     e2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e32:	4798      	blx	r3
			}
			return;
     e34:	e015      	b.n	e62 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
     e36:	7b7b      	ldrb	r3, [r7, #13]
     e38:	4a0c      	ldr	r2, [pc, #48]	; (e6c <process_ext_irq+0x80>)
     e3a:	00db      	lsls	r3, r3, #3
     e3c:	4413      	add	r3, r2
     e3e:	685a      	ldr	r2, [r3, #4]
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	429a      	cmp	r2, r3
     e44:	d203      	bcs.n	e4e <process_ext_irq+0x62>
			lower = middle + 1;
     e46:	7b7b      	ldrb	r3, [r7, #13]
     e48:	3301      	adds	r3, #1
     e4a:	73fb      	strb	r3, [r7, #15]
     e4c:	e002      	b.n	e54 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
     e4e:	7b7b      	ldrb	r3, [r7, #13]
     e50:	3b01      	subs	r3, #1
     e52:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
     e54:	7bba      	ldrb	r2, [r7, #14]
     e56:	7bfb      	ldrb	r3, [r7, #15]
     e58:	429a      	cmp	r2, r3
     e5a:	d2d0      	bcs.n	dfe <process_ext_irq+0x12>
     e5c:	e002      	b.n	e64 <process_ext_irq+0x78>
			return;
     e5e:	bf00      	nop
     e60:	e000      	b.n	e64 <process_ext_irq+0x78>
			return;
     e62:	bf00      	nop
		}
	}
}
     e64:	3710      	adds	r7, #16
     e66:	46bd      	mov	sp, r7
     e68:	bd80      	pop	{r7, pc}
     e6a:	bf00      	nop
     e6c:	200000f8 	.word	0x200000f8

00000e70 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e70:	b580      	push	{r7, lr}
     e72:	b084      	sub	sp, #16
     e74:	af00      	add	r7, sp, #0
     e76:	60f8      	str	r0, [r7, #12]
     e78:	60b9      	str	r1, [r7, #8]
     e7a:	4613      	mov	r3, r2
     e7c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     e7e:	68fb      	ldr	r3, [r7, #12]
     e80:	2b00      	cmp	r3, #0
     e82:	d004      	beq.n	e8e <io_write+0x1e>
     e84:	68bb      	ldr	r3, [r7, #8]
     e86:	2b00      	cmp	r3, #0
     e88:	d001      	beq.n	e8e <io_write+0x1e>
     e8a:	2301      	movs	r3, #1
     e8c:	e000      	b.n	e90 <io_write+0x20>
     e8e:	2300      	movs	r3, #0
     e90:	f003 0301 	and.w	r3, r3, #1
     e94:	b2db      	uxtb	r3, r3
     e96:	2234      	movs	r2, #52	; 0x34
     e98:	4907      	ldr	r1, [pc, #28]	; (eb8 <io_write+0x48>)
     e9a:	4618      	mov	r0, r3
     e9c:	4b07      	ldr	r3, [pc, #28]	; (ebc <io_write+0x4c>)
     e9e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	88fa      	ldrh	r2, [r7, #6]
     ea6:	68b9      	ldr	r1, [r7, #8]
     ea8:	68f8      	ldr	r0, [r7, #12]
     eaa:	4798      	blx	r3
     eac:	4603      	mov	r3, r0
}
     eae:	4618      	mov	r0, r3
     eb0:	3710      	adds	r7, #16
     eb2:	46bd      	mov	sp, r7
     eb4:	bd80      	pop	{r7, pc}
     eb6:	bf00      	nop
     eb8:	00005b68 	.word	0x00005b68
     ebc:	000017fd 	.word	0x000017fd

00000ec0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b084      	sub	sp, #16
     ec4:	af00      	add	r7, sp, #0
     ec6:	60f8      	str	r0, [r7, #12]
     ec8:	60b9      	str	r1, [r7, #8]
     eca:	4613      	mov	r3, r2
     ecc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     ece:	68fb      	ldr	r3, [r7, #12]
     ed0:	2b00      	cmp	r3, #0
     ed2:	d004      	beq.n	ede <io_read+0x1e>
     ed4:	68bb      	ldr	r3, [r7, #8]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d001      	beq.n	ede <io_read+0x1e>
     eda:	2301      	movs	r3, #1
     edc:	e000      	b.n	ee0 <io_read+0x20>
     ede:	2300      	movs	r3, #0
     ee0:	f003 0301 	and.w	r3, r3, #1
     ee4:	b2db      	uxtb	r3, r3
     ee6:	223d      	movs	r2, #61	; 0x3d
     ee8:	4907      	ldr	r1, [pc, #28]	; (f08 <io_read+0x48>)
     eea:	4618      	mov	r0, r3
     eec:	4b07      	ldr	r3, [pc, #28]	; (f0c <io_read+0x4c>)
     eee:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	685b      	ldr	r3, [r3, #4]
     ef4:	88fa      	ldrh	r2, [r7, #6]
     ef6:	68b9      	ldr	r1, [r7, #8]
     ef8:	68f8      	ldr	r0, [r7, #12]
     efa:	4798      	blx	r3
     efc:	4603      	mov	r3, r0
}
     efe:	4618      	mov	r0, r3
     f00:	3710      	adds	r7, #16
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop
     f08:	00005b68 	.word	0x00005b68
     f0c:	000017fd 	.word	0x000017fd

00000f10 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
     f10:	b580      	push	{r7, lr}
     f12:	b084      	sub	sp, #16
     f14:	af00      	add	r7, sp, #0
     f16:	60f8      	str	r0, [r7, #12]
     f18:	60b9      	str	r1, [r7, #8]
     f1a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	2b00      	cmp	r3, #0
     f20:	d004      	beq.n	f2c <pwm_init+0x1c>
     f22:	68bb      	ldr	r3, [r7, #8]
     f24:	2b00      	cmp	r3, #0
     f26:	d001      	beq.n	f2c <pwm_init+0x1c>
     f28:	2301      	movs	r3, #1
     f2a:	e000      	b.n	f2e <pwm_init+0x1e>
     f2c:	2300      	movs	r3, #0
     f2e:	f003 0301 	and.w	r3, r3, #1
     f32:	b2db      	uxtb	r3, r3
     f34:	2233      	movs	r2, #51	; 0x33
     f36:	490a      	ldr	r1, [pc, #40]	; (f60 <pwm_init+0x50>)
     f38:	4618      	mov	r0, r3
     f3a:	4b0a      	ldr	r3, [pc, #40]	; (f64 <pwm_init+0x54>)
     f3c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     f3e:	68fb      	ldr	r3, [r7, #12]
     f40:	68b9      	ldr	r1, [r7, #8]
     f42:	4618      	mov	r0, r3
     f44:	4b08      	ldr	r3, [pc, #32]	; (f68 <pwm_init+0x58>)
     f46:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     f48:	68fb      	ldr	r3, [r7, #12]
     f4a:	4a08      	ldr	r2, [pc, #32]	; (f6c <pwm_init+0x5c>)
     f4c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	4a07      	ldr	r2, [pc, #28]	; (f70 <pwm_init+0x60>)
     f52:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
     f54:	2300      	movs	r3, #0
}
     f56:	4618      	mov	r0, r3
     f58:	3710      	adds	r7, #16
     f5a:	46bd      	mov	sp, r7
     f5c:	bd80      	pop	{r7, pc}
     f5e:	bf00      	nop
     f60:	00005b7c 	.word	0x00005b7c
     f64:	000017fd 	.word	0x000017fd
     f68:	000035f9 	.word	0x000035f9
     f6c:	00001069 	.word	0x00001069
     f70:	0000108d 	.word	0x0000108d

00000f74 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
     f74:	b580      	push	{r7, lr}
     f76:	b082      	sub	sp, #8
     f78:	af00      	add	r7, sp, #0
     f7a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	2b00      	cmp	r3, #0
     f80:	bf14      	ite	ne
     f82:	2301      	movne	r3, #1
     f84:	2300      	moveq	r3, #0
     f86:	b2db      	uxtb	r3, r3
     f88:	224a      	movs	r2, #74	; 0x4a
     f8a:	490b      	ldr	r1, [pc, #44]	; (fb8 <pwm_enable+0x44>)
     f8c:	4618      	mov	r0, r3
     f8e:	4b0b      	ldr	r3, [pc, #44]	; (fbc <pwm_enable+0x48>)
     f90:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	4618      	mov	r0, r3
     f96:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <pwm_enable+0x4c>)
     f98:	4798      	blx	r3
     f9a:	4603      	mov	r3, r0
     f9c:	2b00      	cmp	r3, #0
     f9e:	d002      	beq.n	fa6 <pwm_enable+0x32>
		return ERR_DENIED;
     fa0:	f06f 0310 	mvn.w	r3, #16
     fa4:	e004      	b.n	fb0 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	4618      	mov	r0, r3
     faa:	4b06      	ldr	r3, [pc, #24]	; (fc4 <pwm_enable+0x50>)
     fac:	4798      	blx	r3

	return ERR_NONE;
     fae:	2300      	movs	r3, #0
}
     fb0:	4618      	mov	r0, r3
     fb2:	3708      	adds	r7, #8
     fb4:	46bd      	mov	sp, r7
     fb6:	bd80      	pop	{r7, pc}
     fb8:	00005b7c 	.word	0x00005b7c
     fbc:	000017fd 	.word	0x000017fd
     fc0:	00003991 	.word	0x00003991
     fc4:	00003835 	.word	0x00003835

00000fc8 <pwm_disable>:

/**
 * \brief Stop pwm
 */
int32_t pwm_disable(struct pwm_descriptor *const descr)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     fd0:	687b      	ldr	r3, [r7, #4]
     fd2:	2b00      	cmp	r3, #0
     fd4:	bf14      	ite	ne
     fd6:	2301      	movne	r3, #1
     fd8:	2300      	moveq	r3, #0
     fda:	b2db      	uxtb	r3, r3
     fdc:	2258      	movs	r2, #88	; 0x58
     fde:	490d      	ldr	r1, [pc, #52]	; (1014 <pwm_disable+0x4c>)
     fe0:	4618      	mov	r0, r3
     fe2:	4b0d      	ldr	r3, [pc, #52]	; (1018 <pwm_disable+0x50>)
     fe4:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	4618      	mov	r0, r3
     fea:	4b0c      	ldr	r3, [pc, #48]	; (101c <pwm_disable+0x54>)
     fec:	4798      	blx	r3
     fee:	4603      	mov	r3, r0
     ff0:	f083 0301 	eor.w	r3, r3, #1
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2b00      	cmp	r3, #0
     ff8:	d002      	beq.n	1000 <pwm_disable+0x38>
		return ERR_DENIED;
     ffa:	f06f 0310 	mvn.w	r3, #16
     ffe:	e004      	b.n	100a <pwm_disable+0x42>
	}
	_pwm_disable(&descr->device);
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	4618      	mov	r0, r3
    1004:	4b06      	ldr	r3, [pc, #24]	; (1020 <pwm_disable+0x58>)
    1006:	4798      	blx	r3

	return ERR_NONE;
    1008:	2300      	movs	r3, #0
}
    100a:	4618      	mov	r0, r3
    100c:	3708      	adds	r7, #8
    100e:	46bd      	mov	sp, r7
    1010:	bd80      	pop	{r7, pc}
    1012:	bf00      	nop
    1014:	00005b7c 	.word	0x00005b7c
    1018:	000017fd 	.word	0x000017fd
    101c:	00003991 	.word	0x00003991
    1020:	00003855 	.word	0x00003855

00001024 <pwm_set_parameters>:

/**
 * \brief Change PWM parameter
 */
int32_t pwm_set_parameters(struct pwm_descriptor *const descr, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    1024:	b580      	push	{r7, lr}
    1026:	b084      	sub	sp, #16
    1028:	af00      	add	r7, sp, #0
    102a:	60f8      	str	r0, [r7, #12]
    102c:	60b9      	str	r1, [r7, #8]
    102e:	607a      	str	r2, [r7, #4]
	ASSERT(descr);
    1030:	68fb      	ldr	r3, [r7, #12]
    1032:	2b00      	cmp	r3, #0
    1034:	bf14      	ite	ne
    1036:	2301      	movne	r3, #1
    1038:	2300      	moveq	r3, #0
    103a:	b2db      	uxtb	r3, r3
    103c:	227c      	movs	r2, #124	; 0x7c
    103e:	4907      	ldr	r1, [pc, #28]	; (105c <pwm_set_parameters+0x38>)
    1040:	4618      	mov	r0, r3
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <pwm_set_parameters+0x3c>)
    1044:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    1046:	68fb      	ldr	r3, [r7, #12]
    1048:	687a      	ldr	r2, [r7, #4]
    104a:	68b9      	ldr	r1, [r7, #8]
    104c:	4618      	mov	r0, r3
    104e:	4b05      	ldr	r3, [pc, #20]	; (1064 <pwm_set_parameters+0x40>)
    1050:	4798      	blx	r3
	return ERR_NONE;
    1052:	2300      	movs	r3, #0
}
    1054:	4618      	mov	r0, r3
    1056:	3710      	adds	r7, #16
    1058:	46bd      	mov	sp, r7
    105a:	bd80      	pop	{r7, pc}
    105c:	00005b7c 	.word	0x00005b7c
    1060:	000017fd 	.word	0x000017fd
    1064:	00003875 	.word	0x00003875

00001068 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1068:	b580      	push	{r7, lr}
    106a:	b084      	sub	sp, #16
    106c:	af00      	add	r7, sp, #0
    106e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1074:	68fb      	ldr	r3, [r7, #12]
    1076:	695b      	ldr	r3, [r3, #20]
    1078:	2b00      	cmp	r3, #0
    107a:	d003      	beq.n	1084 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    107c:	68fb      	ldr	r3, [r7, #12]
    107e:	695b      	ldr	r3, [r3, #20]
    1080:	68f8      	ldr	r0, [r7, #12]
    1082:	4798      	blx	r3
	}
}
    1084:	bf00      	nop
    1086:	3710      	adds	r7, #16
    1088:	46bd      	mov	sp, r7
    108a:	bd80      	pop	{r7, pc}

0000108c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    108c:	b580      	push	{r7, lr}
    108e:	b084      	sub	sp, #16
    1090:	af00      	add	r7, sp, #0
    1092:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	699b      	ldr	r3, [r3, #24]
    109c:	2b00      	cmp	r3, #0
    109e:	d003      	beq.n	10a8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	699b      	ldr	r3, [r3, #24]
    10a4:	68f8      	ldr	r0, [r7, #12]
    10a6:	4798      	blx	r3
	}
}
    10a8:	bf00      	nop
    10aa:	3710      	adds	r7, #16
    10ac:	46bd      	mov	sp, r7
    10ae:	bd80      	pop	{r7, pc}

000010b0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    10b0:	b480      	push	{r7}
    10b2:	b083      	sub	sp, #12
    10b4:	af00      	add	r7, sp, #0
    10b6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	681b      	ldr	r3, [r3, #0]
}
    10bc:	4618      	mov	r0, r3
    10be:	370c      	adds	r7, #12
    10c0:	46bd      	mov	sp, r7
    10c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c6:	4770      	bx	lr

000010c8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    10c8:	b480      	push	{r7}
    10ca:	b083      	sub	sp, #12
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d002      	beq.n	10dc <list_get_next_element+0x14>
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	e000      	b.n	10de <list_get_next_element+0x16>
    10dc:	2300      	movs	r3, #0
}
    10de:	4618      	mov	r0, r3
    10e0:	370c      	adds	r7, #12
    10e2:	46bd      	mov	sp, r7
    10e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10e8:	4770      	bx	lr
	...

000010ec <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b084      	sub	sp, #16
    10f0:	af00      	add	r7, sp, #0
    10f2:	60f8      	str	r0, [r7, #12]
    10f4:	60b9      	str	r1, [r7, #8]
    10f6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    10f8:	68fb      	ldr	r3, [r7, #12]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d004      	beq.n	1108 <timer_init+0x1c>
    10fe:	68bb      	ldr	r3, [r7, #8]
    1100:	2b00      	cmp	r3, #0
    1102:	d001      	beq.n	1108 <timer_init+0x1c>
    1104:	2301      	movs	r3, #1
    1106:	e000      	b.n	110a <timer_init+0x1e>
    1108:	2300      	movs	r3, #0
    110a:	f003 0301 	and.w	r3, r3, #1
    110e:	b2db      	uxtb	r3, r3
    1110:	223b      	movs	r2, #59	; 0x3b
    1112:	490a      	ldr	r1, [pc, #40]	; (113c <timer_init+0x50>)
    1114:	4618      	mov	r0, r3
    1116:	4b0a      	ldr	r3, [pc, #40]	; (1140 <timer_init+0x54>)
    1118:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    111a:	68fb      	ldr	r3, [r7, #12]
    111c:	68b9      	ldr	r1, [r7, #8]
    111e:	4618      	mov	r0, r3
    1120:	4b08      	ldr	r3, [pc, #32]	; (1144 <timer_init+0x58>)
    1122:	4798      	blx	r3
	descr->time                           = 0;
    1124:	68fb      	ldr	r3, [r7, #12]
    1126:	2200      	movs	r2, #0
    1128:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	4a06      	ldr	r2, [pc, #24]	; (1148 <timer_init+0x5c>)
    112e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1130:	2300      	movs	r3, #0
}
    1132:	4618      	mov	r0, r3
    1134:	3710      	adds	r7, #16
    1136:	46bd      	mov	sp, r7
    1138:	bd80      	pop	{r7, pc}
    113a:	bf00      	nop
    113c:	00005b94 	.word	0x00005b94
    1140:	000017fd 	.word	0x000017fd
    1144:	00003349 	.word	0x00003349
    1148:	00001349 	.word	0x00001349

0000114c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    114c:	b580      	push	{r7, lr}
    114e:	b082      	sub	sp, #8
    1150:	af00      	add	r7, sp, #0
    1152:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1154:	687b      	ldr	r3, [r7, #4]
    1156:	2b00      	cmp	r3, #0
    1158:	bf14      	ite	ne
    115a:	2301      	movne	r3, #1
    115c:	2300      	moveq	r3, #0
    115e:	b2db      	uxtb	r3, r3
    1160:	2253      	movs	r2, #83	; 0x53
    1162:	490b      	ldr	r1, [pc, #44]	; (1190 <timer_start+0x44>)
    1164:	4618      	mov	r0, r3
    1166:	4b0b      	ldr	r3, [pc, #44]	; (1194 <timer_start+0x48>)
    1168:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	4618      	mov	r0, r3
    116e:	4b0a      	ldr	r3, [pc, #40]	; (1198 <timer_start+0x4c>)
    1170:	4798      	blx	r3
    1172:	4603      	mov	r3, r0
    1174:	2b00      	cmp	r3, #0
    1176:	d002      	beq.n	117e <timer_start+0x32>
		return ERR_DENIED;
    1178:	f06f 0310 	mvn.w	r3, #16
    117c:	e004      	b.n	1188 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	4618      	mov	r0, r3
    1182:	4b06      	ldr	r3, [pc, #24]	; (119c <timer_start+0x50>)
    1184:	4798      	blx	r3

	return ERR_NONE;
    1186:	2300      	movs	r3, #0
}
    1188:	4618      	mov	r0, r3
    118a:	3708      	adds	r7, #8
    118c:	46bd      	mov	sp, r7
    118e:	bd80      	pop	{r7, pc}
    1190:	00005b94 	.word	0x00005b94
    1194:	000017fd 	.word	0x000017fd
    1198:	00003971 	.word	0x00003971
    119c:	00003815 	.word	0x00003815

000011a0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	b084      	sub	sp, #16
    11a4:	af00      	add	r7, sp, #0
    11a6:	6078      	str	r0, [r7, #4]
    11a8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d004      	beq.n	11ba <timer_add_task+0x1a>
    11b0:	683b      	ldr	r3, [r7, #0]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d001      	beq.n	11ba <timer_add_task+0x1a>
    11b6:	2301      	movs	r3, #1
    11b8:	e000      	b.n	11bc <timer_add_task+0x1c>
    11ba:	2300      	movs	r3, #0
    11bc:	f003 0301 	and.w	r3, r3, #1
    11c0:	b2db      	uxtb	r3, r3
    11c2:	227a      	movs	r2, #122	; 0x7a
    11c4:	492d      	ldr	r1, [pc, #180]	; (127c <timer_add_task+0xdc>)
    11c6:	4618      	mov	r0, r3
    11c8:	4b2d      	ldr	r3, [pc, #180]	; (1280 <timer_add_task+0xe0>)
    11ca:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	7e1b      	ldrb	r3, [r3, #24]
    11d0:	b2db      	uxtb	r3, r3
    11d2:	f043 0301 	orr.w	r3, r3, #1
    11d6:	b2da      	uxtb	r2, r3
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	3314      	adds	r3, #20
    11e0:	6839      	ldr	r1, [r7, #0]
    11e2:	4618      	mov	r0, r3
    11e4:	4b27      	ldr	r3, [pc, #156]	; (1284 <timer_add_task+0xe4>)
    11e6:	4798      	blx	r3
    11e8:	4603      	mov	r3, r0
    11ea:	2b00      	cmp	r3, #0
    11ec:	d00f      	beq.n	120e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    11ee:	687b      	ldr	r3, [r7, #4]
    11f0:	7e1b      	ldrb	r3, [r3, #24]
    11f2:	b2db      	uxtb	r3, r3
    11f4:	f023 0301 	bic.w	r3, r3, #1
    11f8:	b2da      	uxtb	r2, r3
    11fa:	687b      	ldr	r3, [r7, #4]
    11fc:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    11fe:	227f      	movs	r2, #127	; 0x7f
    1200:	491e      	ldr	r1, [pc, #120]	; (127c <timer_add_task+0xdc>)
    1202:	2000      	movs	r0, #0
    1204:	4b1e      	ldr	r3, [pc, #120]	; (1280 <timer_add_task+0xe0>)
    1206:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1208:	f06f 0311 	mvn.w	r3, #17
    120c:	e032      	b.n	1274 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	691a      	ldr	r2, [r3, #16]
    1212:	683b      	ldr	r3, [r7, #0]
    1214:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	f103 0014 	add.w	r0, r3, #20
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	691b      	ldr	r3, [r3, #16]
    1220:	461a      	mov	r2, r3
    1222:	6839      	ldr	r1, [r7, #0]
    1224:	4b18      	ldr	r3, [pc, #96]	; (1288 <timer_add_task+0xe8>)
    1226:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	7e1b      	ldrb	r3, [r3, #24]
    122c:	b2db      	uxtb	r3, r3
    122e:	f023 0301 	bic.w	r3, r3, #1
    1232:	b2da      	uxtb	r2, r3
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	7e1b      	ldrb	r3, [r3, #24]
    123c:	b2db      	uxtb	r3, r3
    123e:	f003 0302 	and.w	r3, r3, #2
    1242:	2b00      	cmp	r3, #0
    1244:	d015      	beq.n	1272 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    1246:	f107 030c 	add.w	r3, r7, #12
    124a:	4618      	mov	r0, r3
    124c:	4b0f      	ldr	r3, [pc, #60]	; (128c <timer_add_task+0xec>)
    124e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	7e1b      	ldrb	r3, [r3, #24]
    1254:	b2db      	uxtb	r3, r3
    1256:	f023 0302 	bic.w	r3, r3, #2
    125a:	b2da      	uxtb	r2, r3
    125c:	687b      	ldr	r3, [r7, #4]
    125e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	4618      	mov	r0, r3
    1264:	4b0a      	ldr	r3, [pc, #40]	; (1290 <timer_add_task+0xf0>)
    1266:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1268:	f107 030c 	add.w	r3, r7, #12
    126c:	4618      	mov	r0, r3
    126e:	4b09      	ldr	r3, [pc, #36]	; (1294 <timer_add_task+0xf4>)
    1270:	4798      	blx	r3
	}

	return ERR_NONE;
    1272:	2300      	movs	r3, #0
}
    1274:	4618      	mov	r0, r3
    1276:	3710      	adds	r7, #16
    1278:	46bd      	mov	sp, r7
    127a:	bd80      	pop	{r7, pc}
    127c:	00005b94 	.word	0x00005b94
    1280:	000017fd 	.word	0x000017fd
    1284:	00001825 	.word	0x00001825
    1288:	00001299 	.word	0x00001299
    128c:	00000d41 	.word	0x00000d41
    1290:	000039d1 	.word	0x000039d1
    1294:	00000d67 	.word	0x00000d67

00001298 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1298:	b580      	push	{r7, lr}
    129a:	b088      	sub	sp, #32
    129c:	af00      	add	r7, sp, #0
    129e:	60f8      	str	r0, [r7, #12]
    12a0:	60b9      	str	r1, [r7, #8]
    12a2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    12a4:	2300      	movs	r3, #0
    12a6:	61bb      	str	r3, [r7, #24]
    12a8:	68f8      	ldr	r0, [r7, #12]
    12aa:	4b23      	ldr	r3, [pc, #140]	; (1338 <timer_add_timer_task+0xa0>)
    12ac:	4798      	blx	r3
    12ae:	6138      	str	r0, [r7, #16]

	if (!head) {
    12b0:	693b      	ldr	r3, [r7, #16]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d104      	bne.n	12c0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    12b6:	68b9      	ldr	r1, [r7, #8]
    12b8:	68f8      	ldr	r0, [r7, #12]
    12ba:	4b20      	ldr	r3, [pc, #128]	; (133c <timer_add_timer_task+0xa4>)
    12bc:	4798      	blx	r3
		return;
    12be:	e037      	b.n	1330 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    12c0:	693b      	ldr	r3, [r7, #16]
    12c2:	61fb      	str	r3, [r7, #28]
    12c4:	e022      	b.n	130c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    12c6:	69fb      	ldr	r3, [r7, #28]
    12c8:	685a      	ldr	r2, [r3, #4]
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	429a      	cmp	r2, r3
    12ce:	d808      	bhi.n	12e2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    12d0:	69fb      	ldr	r3, [r7, #28]
    12d2:	689a      	ldr	r2, [r3, #8]
    12d4:	69fb      	ldr	r3, [r7, #28]
    12d6:	6859      	ldr	r1, [r3, #4]
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	1acb      	subs	r3, r1, r3
    12dc:	4413      	add	r3, r2
    12de:	617b      	str	r3, [r7, #20]
    12e0:	e009      	b.n	12f6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12e2:	69fb      	ldr	r3, [r7, #28]
    12e4:	689a      	ldr	r2, [r3, #8]
    12e6:	69fb      	ldr	r3, [r7, #28]
    12e8:	685b      	ldr	r3, [r3, #4]
    12ea:	441a      	add	r2, r3
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	425b      	negs	r3, r3
    12f0:	4413      	add	r3, r2
    12f2:	3301      	adds	r3, #1
    12f4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    12f6:	68bb      	ldr	r3, [r7, #8]
    12f8:	689a      	ldr	r2, [r3, #8]
    12fa:	697b      	ldr	r3, [r7, #20]
    12fc:	429a      	cmp	r2, r3
    12fe:	d909      	bls.n	1314 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    1300:	69fb      	ldr	r3, [r7, #28]
    1302:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1304:	69f8      	ldr	r0, [r7, #28]
    1306:	4b0e      	ldr	r3, [pc, #56]	; (1340 <timer_add_timer_task+0xa8>)
    1308:	4798      	blx	r3
    130a:	61f8      	str	r0, [r7, #28]
    130c:	69fb      	ldr	r3, [r7, #28]
    130e:	2b00      	cmp	r3, #0
    1310:	d1d9      	bne.n	12c6 <timer_add_timer_task+0x2e>
    1312:	e000      	b.n	1316 <timer_add_timer_task+0x7e>
			break;
    1314:	bf00      	nop
	}

	if (it == head) {
    1316:	69fa      	ldr	r2, [r7, #28]
    1318:	693b      	ldr	r3, [r7, #16]
    131a:	429a      	cmp	r2, r3
    131c:	d104      	bne.n	1328 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    131e:	68b9      	ldr	r1, [r7, #8]
    1320:	68f8      	ldr	r0, [r7, #12]
    1322:	4b06      	ldr	r3, [pc, #24]	; (133c <timer_add_timer_task+0xa4>)
    1324:	4798      	blx	r3
    1326:	e003      	b.n	1330 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    1328:	68b9      	ldr	r1, [r7, #8]
    132a:	69b8      	ldr	r0, [r7, #24]
    132c:	4b05      	ldr	r3, [pc, #20]	; (1344 <timer_add_timer_task+0xac>)
    132e:	4798      	blx	r3
	}
}
    1330:	3720      	adds	r7, #32
    1332:	46bd      	mov	sp, r7
    1334:	bd80      	pop	{r7, pc}
    1336:	bf00      	nop
    1338:	000010b1 	.word	0x000010b1
    133c:	0000185d 	.word	0x0000185d
    1340:	000010c9 	.word	0x000010c9
    1344:	000018b5 	.word	0x000018b5

00001348 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1348:	b580      	push	{r7, lr}
    134a:	b086      	sub	sp, #24
    134c:	af00      	add	r7, sp, #0
    134e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1350:	687b      	ldr	r3, [r7, #4]
    1352:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1354:	693b      	ldr	r3, [r7, #16]
    1356:	3314      	adds	r3, #20
    1358:	4618      	mov	r0, r3
    135a:	4b27      	ldr	r3, [pc, #156]	; (13f8 <timer_process_counted+0xb0>)
    135c:	4798      	blx	r3
    135e:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1360:	693b      	ldr	r3, [r7, #16]
    1362:	691b      	ldr	r3, [r3, #16]
    1364:	1c5a      	adds	r2, r3, #1
    1366:	693b      	ldr	r3, [r7, #16]
    1368:	611a      	str	r2, [r3, #16]
    136a:	693b      	ldr	r3, [r7, #16]
    136c:	691b      	ldr	r3, [r3, #16]
    136e:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1370:	693b      	ldr	r3, [r7, #16]
    1372:	7e1b      	ldrb	r3, [r3, #24]
    1374:	b2db      	uxtb	r3, r3
    1376:	f003 0301 	and.w	r3, r3, #1
    137a:	2b00      	cmp	r3, #0
    137c:	d106      	bne.n	138c <timer_process_counted+0x44>
    137e:	693b      	ldr	r3, [r7, #16]
    1380:	7e1b      	ldrb	r3, [r3, #24]
    1382:	b2db      	uxtb	r3, r3
    1384:	f003 0302 	and.w	r3, r3, #2
    1388:	2b00      	cmp	r3, #0
    138a:	d027      	beq.n	13dc <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    138c:	693b      	ldr	r3, [r7, #16]
    138e:	7e1b      	ldrb	r3, [r3, #24]
    1390:	b2db      	uxtb	r3, r3
    1392:	f043 0302 	orr.w	r3, r3, #2
    1396:	b2da      	uxtb	r2, r3
    1398:	693b      	ldr	r3, [r7, #16]
    139a:	761a      	strb	r2, [r3, #24]
		return;
    139c:	e029      	b.n	13f2 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    139e:	697b      	ldr	r3, [r7, #20]
    13a0:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    13a2:	693b      	ldr	r3, [r7, #16]
    13a4:	3314      	adds	r3, #20
    13a6:	4618      	mov	r0, r3
    13a8:	4b14      	ldr	r3, [pc, #80]	; (13fc <timer_process_counted+0xb4>)
    13aa:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    13ac:	68bb      	ldr	r3, [r7, #8]
    13ae:	7c1b      	ldrb	r3, [r3, #16]
    13b0:	2b01      	cmp	r3, #1
    13b2:	d109      	bne.n	13c8 <timer_process_counted+0x80>
			tmp->time_label = time;
    13b4:	68bb      	ldr	r3, [r7, #8]
    13b6:	68fa      	ldr	r2, [r7, #12]
    13b8:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    13ba:	693b      	ldr	r3, [r7, #16]
    13bc:	3314      	adds	r3, #20
    13be:	68fa      	ldr	r2, [r7, #12]
    13c0:	68b9      	ldr	r1, [r7, #8]
    13c2:	4618      	mov	r0, r3
    13c4:	4b0e      	ldr	r3, [pc, #56]	; (1400 <timer_process_counted+0xb8>)
    13c6:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    13c8:	693b      	ldr	r3, [r7, #16]
    13ca:	3314      	adds	r3, #20
    13cc:	4618      	mov	r0, r3
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <timer_process_counted+0xb0>)
    13d0:	4798      	blx	r3
    13d2:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    13d4:	68bb      	ldr	r3, [r7, #8]
    13d6:	68db      	ldr	r3, [r3, #12]
    13d8:	68b8      	ldr	r0, [r7, #8]
    13da:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    13dc:	697b      	ldr	r3, [r7, #20]
    13de:	2b00      	cmp	r3, #0
    13e0:	d007      	beq.n	13f2 <timer_process_counted+0xaa>
    13e2:	697b      	ldr	r3, [r7, #20]
    13e4:	685b      	ldr	r3, [r3, #4]
    13e6:	68fa      	ldr	r2, [r7, #12]
    13e8:	1ad2      	subs	r2, r2, r3
    13ea:	697b      	ldr	r3, [r7, #20]
    13ec:	689b      	ldr	r3, [r3, #8]
    13ee:	429a      	cmp	r2, r3
    13f0:	d2d5      	bcs.n	139e <timer_process_counted+0x56>
	}
}
    13f2:	3718      	adds	r7, #24
    13f4:	46bd      	mov	sp, r7
    13f6:	bd80      	pop	{r7, pc}
    13f8:	000010b1 	.word	0x000010b1
    13fc:	000018d9 	.word	0x000018d9
    1400:	00001299 	.word	0x00001299

00001404 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    1404:	b580      	push	{r7, lr}
    1406:	b086      	sub	sp, #24
    1408:	af00      	add	r7, sp, #0
    140a:	60f8      	str	r0, [r7, #12]
    140c:	60b9      	str	r1, [r7, #8]
    140e:	607a      	str	r2, [r7, #4]
    1410:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	2b00      	cmp	r3, #0
    1416:	d00a      	beq.n	142e <usart_async_init+0x2a>
    1418:	68bb      	ldr	r3, [r7, #8]
    141a:	2b00      	cmp	r3, #0
    141c:	d007      	beq.n	142e <usart_async_init+0x2a>
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	2b00      	cmp	r3, #0
    1422:	d004      	beq.n	142e <usart_async_init+0x2a>
    1424:	887b      	ldrh	r3, [r7, #2]
    1426:	2b00      	cmp	r3, #0
    1428:	d001      	beq.n	142e <usart_async_init+0x2a>
    142a:	2301      	movs	r3, #1
    142c:	e000      	b.n	1430 <usart_async_init+0x2c>
    142e:	2300      	movs	r3, #0
    1430:	f003 0301 	and.w	r3, r3, #1
    1434:	b2db      	uxtb	r3, r3
    1436:	223a      	movs	r2, #58	; 0x3a
    1438:	4919      	ldr	r1, [pc, #100]	; (14a0 <usart_async_init+0x9c>)
    143a:	4618      	mov	r0, r3
    143c:	4b19      	ldr	r3, [pc, #100]	; (14a4 <usart_async_init+0xa0>)
    143e:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1440:	68fb      	ldr	r3, [r7, #12]
    1442:	3334      	adds	r3, #52	; 0x34
    1444:	887a      	ldrh	r2, [r7, #2]
    1446:	6879      	ldr	r1, [r7, #4]
    1448:	4618      	mov	r0, r3
    144a:	4b17      	ldr	r3, [pc, #92]	; (14a8 <usart_async_init+0xa4>)
    144c:	4798      	blx	r3
    144e:	4603      	mov	r3, r0
    1450:	2b00      	cmp	r3, #0
    1452:	d002      	beq.n	145a <usart_async_init+0x56>
		return ERR_INVALID_ARG;
    1454:	f06f 030c 	mvn.w	r3, #12
    1458:	e01e      	b.n	1498 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	3308      	adds	r3, #8
    145e:	68b9      	ldr	r1, [r7, #8]
    1460:	4618      	mov	r0, r3
    1462:	4b12      	ldr	r3, [pc, #72]	; (14ac <usart_async_init+0xa8>)
    1464:	4798      	blx	r3
    1466:	6178      	str	r0, [r7, #20]
	if (init_status) {
    1468:	697b      	ldr	r3, [r7, #20]
    146a:	2b00      	cmp	r3, #0
    146c:	d001      	beq.n	1472 <usart_async_init+0x6e>
		return init_status;
    146e:	697b      	ldr	r3, [r7, #20]
    1470:	e012      	b.n	1498 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	4a0e      	ldr	r2, [pc, #56]	; (14b0 <usart_async_init+0xac>)
    1476:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	4a0e      	ldr	r2, [pc, #56]	; (14b4 <usart_async_init+0xb0>)
    147c:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    147e:	68fb      	ldr	r3, [r7, #12]
    1480:	4a0d      	ldr	r2, [pc, #52]	; (14b8 <usart_async_init+0xb4>)
    1482:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	4a0d      	ldr	r2, [pc, #52]	; (14bc <usart_async_init+0xb8>)
    1488:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	4a0c      	ldr	r2, [pc, #48]	; (14c0 <usart_async_init+0xbc>)
    148e:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	4a0c      	ldr	r2, [pc, #48]	; (14c4 <usart_async_init+0xc0>)
    1494:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1496:	2300      	movs	r3, #0
}
    1498:	4618      	mov	r0, r3
    149a:	3718      	adds	r7, #24
    149c:	46bd      	mov	sp, r7
    149e:	bd80      	pop	{r7, pc}
    14a0:	00005bac 	.word	0x00005bac
    14a4:	000017fd 	.word	0x000017fd
    14a8:	0000190d 	.word	0x0000190d
    14ac:	0000299d 	.word	0x0000299d
    14b0:	0000164d 	.word	0x0000164d
    14b4:	000015bd 	.word	0x000015bd
    14b8:	000016fd 	.word	0x000016fd
    14bc:	00001795 	.word	0x00001795
    14c0:	00001769 	.word	0x00001769
    14c4:	000017d1 	.word	0x000017d1

000014c8 <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b082      	sub	sp, #8
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	2b00      	cmp	r3, #0
    14d4:	bf14      	ite	ne
    14d6:	2301      	movne	r3, #1
    14d8:	2300      	moveq	r3, #0
    14da:	b2db      	uxtb	r3, r3
    14dc:	2261      	movs	r2, #97	; 0x61
    14de:	4907      	ldr	r1, [pc, #28]	; (14fc <usart_async_enable+0x34>)
    14e0:	4618      	mov	r0, r3
    14e2:	4b07      	ldr	r3, [pc, #28]	; (1500 <usart_async_enable+0x38>)
    14e4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	3308      	adds	r3, #8
    14ea:	4618      	mov	r0, r3
    14ec:	4b05      	ldr	r3, [pc, #20]	; (1504 <usart_async_enable+0x3c>)
    14ee:	4798      	blx	r3

	return ERR_NONE;
    14f0:	2300      	movs	r3, #0
}
    14f2:	4618      	mov	r0, r3
    14f4:	3708      	adds	r7, #8
    14f6:	46bd      	mov	sp, r7
    14f8:	bd80      	pop	{r7, pc}
    14fa:	bf00      	nop
    14fc:	00005bac 	.word	0x00005bac
    1500:	000017fd 	.word	0x000017fd
    1504:	00002a49 	.word	0x00002a49

00001508 <usart_async_register_callback>:
/**
 * \brief Register usart callback
 */
int32_t usart_async_register_callback(struct usart_async_descriptor *const descr,
                                      const enum usart_async_callback_type type, usart_cb_t cb)
{
    1508:	b580      	push	{r7, lr}
    150a:	b084      	sub	sp, #16
    150c:	af00      	add	r7, sp, #0
    150e:	60f8      	str	r0, [r7, #12]
    1510:	460b      	mov	r3, r1
    1512:	607a      	str	r2, [r7, #4]
    1514:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1516:	68fb      	ldr	r3, [r7, #12]
    1518:	2b00      	cmp	r3, #0
    151a:	bf14      	ite	ne
    151c:	2301      	movne	r3, #1
    151e:	2300      	moveq	r3, #0
    1520:	b2db      	uxtb	r3, r3
    1522:	2283      	movs	r2, #131	; 0x83
    1524:	4922      	ldr	r1, [pc, #136]	; (15b0 <usart_async_register_callback+0xa8>)
    1526:	4618      	mov	r0, r3
    1528:	4b22      	ldr	r3, [pc, #136]	; (15b4 <usart_async_register_callback+0xac>)
    152a:	4798      	blx	r3

	switch (type) {
    152c:	7afb      	ldrb	r3, [r7, #11]
    152e:	2b01      	cmp	r3, #1
    1530:	d014      	beq.n	155c <usart_async_register_callback+0x54>
    1532:	2b02      	cmp	r3, #2
    1534:	d023      	beq.n	157e <usart_async_register_callback+0x76>
    1536:	2b00      	cmp	r3, #0
    1538:	d132      	bne.n	15a0 <usart_async_register_callback+0x98>
	case USART_ASYNC_RXC_CB:
		descr->usart_cb.rx_done = cb;
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	687a      	ldr	r2, [r7, #4]
    153e:	629a      	str	r2, [r3, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1540:	68fb      	ldr	r3, [r7, #12]
    1542:	f103 0008 	add.w	r0, r3, #8
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	2b00      	cmp	r3, #0
    154a:	bf14      	ite	ne
    154c:	2301      	movne	r3, #1
    154e:	2300      	moveq	r3, #0
    1550:	b2db      	uxtb	r3, r3
    1552:	461a      	mov	r2, r3
    1554:	2101      	movs	r1, #1
    1556:	4b18      	ldr	r3, [pc, #96]	; (15b8 <usart_async_register_callback+0xb0>)
    1558:	4798      	blx	r3
		break;
    155a:	e024      	b.n	15a6 <usart_async_register_callback+0x9e>
	case USART_ASYNC_TXC_CB:
		descr->usart_cb.tx_done = cb;
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	687a      	ldr	r2, [r7, #4]
    1560:	625a      	str	r2, [r3, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	f103 0008 	add.w	r0, r3, #8
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	2b00      	cmp	r3, #0
    156c:	bf14      	ite	ne
    156e:	2301      	movne	r3, #1
    1570:	2300      	moveq	r3, #0
    1572:	b2db      	uxtb	r3, r3
    1574:	461a      	mov	r2, r3
    1576:	2102      	movs	r1, #2
    1578:	4b0f      	ldr	r3, [pc, #60]	; (15b8 <usart_async_register_callback+0xb0>)
    157a:	4798      	blx	r3
		break;
    157c:	e013      	b.n	15a6 <usart_async_register_callback+0x9e>
	case USART_ASYNC_ERROR_CB:
		descr->usart_cb.error = cb;
    157e:	68fb      	ldr	r3, [r7, #12]
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	62da      	str	r2, [r3, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1584:	68fb      	ldr	r3, [r7, #12]
    1586:	f103 0008 	add.w	r0, r3, #8
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	2b00      	cmp	r3, #0
    158e:	bf14      	ite	ne
    1590:	2301      	movne	r3, #1
    1592:	2300      	moveq	r3, #0
    1594:	b2db      	uxtb	r3, r3
    1596:	461a      	mov	r2, r3
    1598:	2103      	movs	r1, #3
    159a:	4b07      	ldr	r3, [pc, #28]	; (15b8 <usart_async_register_callback+0xb0>)
    159c:	4798      	blx	r3
		break;
    159e:	e002      	b.n	15a6 <usart_async_register_callback+0x9e>
	default:
		return ERR_INVALID_ARG;
    15a0:	f06f 030c 	mvn.w	r3, #12
    15a4:	e000      	b.n	15a8 <usart_async_register_callback+0xa0>
	}

	return ERR_NONE;
    15a6:	2300      	movs	r3, #0
}
    15a8:	4618      	mov	r0, r3
    15aa:	3710      	adds	r7, #16
    15ac:	46bd      	mov	sp, r7
    15ae:	bd80      	pop	{r7, pc}
    15b0:	00005bac 	.word	0x00005bac
    15b4:	000017fd 	.word	0x000017fd
    15b8:	00002b2d 	.word	0x00002b2d

000015bc <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    15bc:	b580      	push	{r7, lr}
    15be:	b086      	sub	sp, #24
    15c0:	af00      	add	r7, sp, #0
    15c2:	60f8      	str	r0, [r7, #12]
    15c4:	60b9      	str	r1, [r7, #8]
    15c6:	4613      	mov	r3, r2
    15c8:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    15ce:	697b      	ldr	r3, [r7, #20]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d007      	beq.n	15e4 <usart_async_write+0x28>
    15d4:	68bb      	ldr	r3, [r7, #8]
    15d6:	2b00      	cmp	r3, #0
    15d8:	d004      	beq.n	15e4 <usart_async_write+0x28>
    15da:	88fb      	ldrh	r3, [r7, #6]
    15dc:	2b00      	cmp	r3, #0
    15de:	d001      	beq.n	15e4 <usart_async_write+0x28>
    15e0:	2301      	movs	r3, #1
    15e2:	e000      	b.n	15e6 <usart_async_write+0x2a>
    15e4:	2300      	movs	r3, #0
    15e6:	f003 0301 	and.w	r3, r3, #1
    15ea:	b2db      	uxtb	r3, r3
    15ec:	f240 123b 	movw	r2, #315	; 0x13b
    15f0:	4913      	ldr	r1, [pc, #76]	; (1640 <usart_async_write+0x84>)
    15f2:	4618      	mov	r0, r3
    15f4:	4b13      	ldr	r3, [pc, #76]	; (1644 <usart_async_write+0x88>)
    15f6:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    15f8:	697b      	ldr	r3, [r7, #20]
    15fa:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    15fe:	697b      	ldr	r3, [r7, #20]
    1600:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1604:	429a      	cmp	r2, r3
    1606:	d002      	beq.n	160e <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
    1608:	f06f 031b 	mvn.w	r3, #27
    160c:	e013      	b.n	1636 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    160e:	697b      	ldr	r3, [r7, #20]
    1610:	68ba      	ldr	r2, [r7, #8]
    1612:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1614:	697b      	ldr	r3, [r7, #20]
    1616:	88fa      	ldrh	r2, [r7, #6]
    1618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
    161c:	697b      	ldr	r3, [r7, #20]
    161e:	2200      	movs	r2, #0
    1620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1624:	697b      	ldr	r3, [r7, #20]
    1626:	2201      	movs	r2, #1
    1628:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    162a:	697b      	ldr	r3, [r7, #20]
    162c:	3308      	adds	r3, #8
    162e:	4618      	mov	r0, r3
    1630:	4b05      	ldr	r3, [pc, #20]	; (1648 <usart_async_write+0x8c>)
    1632:	4798      	blx	r3

	return (int32_t)length;
    1634:	88fb      	ldrh	r3, [r7, #6]
}
    1636:	4618      	mov	r0, r3
    1638:	3718      	adds	r7, #24
    163a:	46bd      	mov	sp, r7
    163c:	bd80      	pop	{r7, pc}
    163e:	bf00      	nop
    1640:	00005bac 	.word	0x00005bac
    1644:	000017fd 	.word	0x000017fd
    1648:	00002a91 	.word	0x00002a91

0000164c <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    164c:	b580      	push	{r7, lr}
    164e:	b088      	sub	sp, #32
    1650:	af00      	add	r7, sp, #0
    1652:	60f8      	str	r0, [r7, #12]
    1654:	60b9      	str	r1, [r7, #8]
    1656:	4613      	mov	r3, r2
    1658:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
    165a:	2300      	movs	r3, #0
    165c:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    1662:	69bb      	ldr	r3, [r7, #24]
    1664:	2b00      	cmp	r3, #0
    1666:	d007      	beq.n	1678 <usart_async_read+0x2c>
    1668:	68bb      	ldr	r3, [r7, #8]
    166a:	2b00      	cmp	r3, #0
    166c:	d004      	beq.n	1678 <usart_async_read+0x2c>
    166e:	88fb      	ldrh	r3, [r7, #6]
    1670:	2b00      	cmp	r3, #0
    1672:	d001      	beq.n	1678 <usart_async_read+0x2c>
    1674:	2301      	movs	r3, #1
    1676:	e000      	b.n	167a <usart_async_read+0x2e>
    1678:	2300      	movs	r3, #0
    167a:	f003 0301 	and.w	r3, r3, #1
    167e:	b2db      	uxtb	r3, r3
    1680:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1684:	4917      	ldr	r1, [pc, #92]	; (16e4 <usart_async_read+0x98>)
    1686:	4618      	mov	r0, r3
    1688:	4b17      	ldr	r3, [pc, #92]	; (16e8 <usart_async_read+0x9c>)
    168a:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    168c:	f107 0310 	add.w	r3, r7, #16
    1690:	4618      	mov	r0, r3
    1692:	4b16      	ldr	r3, [pc, #88]	; (16ec <usart_async_read+0xa0>)
    1694:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1696:	69bb      	ldr	r3, [r7, #24]
    1698:	3334      	adds	r3, #52	; 0x34
    169a:	4618      	mov	r0, r3
    169c:	4b14      	ldr	r3, [pc, #80]	; (16f0 <usart_async_read+0xa4>)
    169e:	4798      	blx	r3
    16a0:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    16a2:	f107 0310 	add.w	r3, r7, #16
    16a6:	4618      	mov	r0, r3
    16a8:	4b12      	ldr	r3, [pc, #72]	; (16f4 <usart_async_read+0xa8>)
    16aa:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    16ac:	e00c      	b.n	16c8 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    16ae:	69bb      	ldr	r3, [r7, #24]
    16b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
    16b4:	8bfb      	ldrh	r3, [r7, #30]
    16b6:	1c59      	adds	r1, r3, #1
    16b8:	83f9      	strh	r1, [r7, #30]
    16ba:	4619      	mov	r1, r3
    16bc:	68bb      	ldr	r3, [r7, #8]
    16be:	440b      	add	r3, r1
    16c0:	4619      	mov	r1, r3
    16c2:	4610      	mov	r0, r2
    16c4:	4b0c      	ldr	r3, [pc, #48]	; (16f8 <usart_async_read+0xac>)
    16c6:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    16c8:	8bfa      	ldrh	r2, [r7, #30]
    16ca:	697b      	ldr	r3, [r7, #20]
    16cc:	429a      	cmp	r2, r3
    16ce:	d203      	bcs.n	16d8 <usart_async_read+0x8c>
    16d0:	8bfa      	ldrh	r2, [r7, #30]
    16d2:	88fb      	ldrh	r3, [r7, #6]
    16d4:	429a      	cmp	r2, r3
    16d6:	d3ea      	bcc.n	16ae <usart_async_read+0x62>
	}

	return (int32_t)was_read;
    16d8:	8bfb      	ldrh	r3, [r7, #30]
}
    16da:	4618      	mov	r0, r3
    16dc:	3720      	adds	r7, #32
    16de:	46bd      	mov	sp, r7
    16e0:	bd80      	pop	{r7, pc}
    16e2:	bf00      	nop
    16e4:	00005bac 	.word	0x00005bac
    16e8:	000017fd 	.word	0x000017fd
    16ec:	00000d41 	.word	0x00000d41
    16f0:	00001a65 	.word	0x00001a65
    16f4:	00000d67 	.word	0x00000d67
    16f8:	00001981 	.word	0x00001981

000016fc <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    16fc:	b590      	push	{r4, r7, lr}
    16fe:	b085      	sub	sp, #20
    1700:	af00      	add	r7, sp, #0
    1702:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	3b08      	subs	r3, #8
    1708:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    170a:	68fb      	ldr	r3, [r7, #12]
    170c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1716:	429a      	cmp	r2, r3
    1718:	d017      	beq.n	174a <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	f103 0008 	add.w	r0, r3, #8
    1720:	68fb      	ldr	r3, [r7, #12]
    1722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    172a:	1c59      	adds	r1, r3, #1
    172c:	b28c      	uxth	r4, r1
    172e:	68f9      	ldr	r1, [r7, #12]
    1730:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
    1734:	4413      	add	r3, r2
    1736:	781b      	ldrb	r3, [r3, #0]
    1738:	4619      	mov	r1, r3
    173a:	4b08      	ldr	r3, [pc, #32]	; (175c <usart_process_byte_sent+0x60>)
    173c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	3308      	adds	r3, #8
    1742:	4618      	mov	r0, r3
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <usart_process_byte_sent+0x64>)
    1746:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1748:	e004      	b.n	1754 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
    174a:	68fb      	ldr	r3, [r7, #12]
    174c:	3308      	adds	r3, #8
    174e:	4618      	mov	r0, r3
    1750:	4b04      	ldr	r3, [pc, #16]	; (1764 <usart_process_byte_sent+0x68>)
    1752:	4798      	blx	r3
}
    1754:	bf00      	nop
    1756:	3714      	adds	r7, #20
    1758:	46bd      	mov	sp, r7
    175a:	bd90      	pop	{r4, r7, pc}
    175c:	00002a69 	.word	0x00002a69
    1760:	00002a91 	.word	0x00002a91
    1764:	00002ab1 	.word	0x00002ab1

00001768 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1768:	b580      	push	{r7, lr}
    176a:	b084      	sub	sp, #16
    176c:	af00      	add	r7, sp, #0
    176e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	3b08      	subs	r3, #8
    1774:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	2200      	movs	r2, #0
    177a:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1780:	2b00      	cmp	r3, #0
    1782:	d003      	beq.n	178c <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
    1784:	68fb      	ldr	r3, [r7, #12]
    1786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1788:	68f8      	ldr	r0, [r7, #12]
    178a:	4798      	blx	r3
	}
}
    178c:	bf00      	nop
    178e:	3710      	adds	r7, #16
    1790:	46bd      	mov	sp, r7
    1792:	bd80      	pop	{r7, pc}

00001794 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    1794:	b580      	push	{r7, lr}
    1796:	b084      	sub	sp, #16
    1798:	af00      	add	r7, sp, #0
    179a:	6078      	str	r0, [r7, #4]
    179c:	460b      	mov	r3, r1
    179e:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	3b08      	subs	r3, #8
    17a4:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    17a6:	68fb      	ldr	r3, [r7, #12]
    17a8:	3334      	adds	r3, #52	; 0x34
    17aa:	78fa      	ldrb	r2, [r7, #3]
    17ac:	4611      	mov	r1, r2
    17ae:	4618      	mov	r0, r3
    17b0:	4b06      	ldr	r3, [pc, #24]	; (17cc <usart_fill_rx_buffer+0x38>)
    17b2:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17b8:	2b00      	cmp	r3, #0
    17ba:	d003      	beq.n	17c4 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17c0:	68f8      	ldr	r0, [r7, #12]
    17c2:	4798      	blx	r3
	}
}
    17c4:	bf00      	nop
    17c6:	3710      	adds	r7, #16
    17c8:	46bd      	mov	sp, r7
    17ca:	bd80      	pop	{r7, pc}
    17cc:	000019f1 	.word	0x000019f1

000017d0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b084      	sub	sp, #16
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	3b08      	subs	r3, #8
    17dc:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    17de:	68fb      	ldr	r3, [r7, #12]
    17e0:	2200      	movs	r2, #0
    17e2:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    17e4:	68fb      	ldr	r3, [r7, #12]
    17e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17e8:	2b00      	cmp	r3, #0
    17ea:	d003      	beq.n	17f4 <usart_error+0x24>
		descr->usart_cb.error(descr);
    17ec:	68fb      	ldr	r3, [r7, #12]
    17ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17f0:	68f8      	ldr	r0, [r7, #12]
    17f2:	4798      	blx	r3
	}
}
    17f4:	bf00      	nop
    17f6:	3710      	adds	r7, #16
    17f8:	46bd      	mov	sp, r7
    17fa:	bd80      	pop	{r7, pc}

000017fc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    17fc:	b480      	push	{r7}
    17fe:	b085      	sub	sp, #20
    1800:	af00      	add	r7, sp, #0
    1802:	4603      	mov	r3, r0
    1804:	60b9      	str	r1, [r7, #8]
    1806:	607a      	str	r2, [r7, #4]
    1808:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    180a:	7bfb      	ldrb	r3, [r7, #15]
    180c:	f083 0301 	eor.w	r3, r3, #1
    1810:	b2db      	uxtb	r3, r3
    1812:	2b00      	cmp	r3, #0
    1814:	d000      	beq.n	1818 <assert+0x1c>
		__asm("BKPT #0");
    1816:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1818:	bf00      	nop
    181a:	3714      	adds	r7, #20
    181c:	46bd      	mov	sp, r7
    181e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1822:	4770      	bx	lr

00001824 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1824:	b480      	push	{r7}
    1826:	b085      	sub	sp, #20
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
    182c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	681b      	ldr	r3, [r3, #0]
    1832:	60fb      	str	r3, [r7, #12]
    1834:	e008      	b.n	1848 <is_list_element+0x24>
		if (it == element) {
    1836:	68fa      	ldr	r2, [r7, #12]
    1838:	683b      	ldr	r3, [r7, #0]
    183a:	429a      	cmp	r2, r3
    183c:	d101      	bne.n	1842 <is_list_element+0x1e>
			return true;
    183e:	2301      	movs	r3, #1
    1840:	e006      	b.n	1850 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1842:	68fb      	ldr	r3, [r7, #12]
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	60fb      	str	r3, [r7, #12]
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	2b00      	cmp	r3, #0
    184c:	d1f3      	bne.n	1836 <is_list_element+0x12>
		}
	}

	return false;
    184e:	2300      	movs	r3, #0
}
    1850:	4618      	mov	r0, r3
    1852:	3714      	adds	r7, #20
    1854:	46bd      	mov	sp, r7
    1856:	f85d 7b04 	ldr.w	r7, [sp], #4
    185a:	4770      	bx	lr

0000185c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1866:	6839      	ldr	r1, [r7, #0]
    1868:	6878      	ldr	r0, [r7, #4]
    186a:	4b0f      	ldr	r3, [pc, #60]	; (18a8 <list_insert_as_head+0x4c>)
    186c:	4798      	blx	r3
    186e:	4603      	mov	r3, r0
    1870:	2b00      	cmp	r3, #0
    1872:	bf14      	ite	ne
    1874:	2301      	movne	r3, #1
    1876:	2300      	moveq	r3, #0
    1878:	b2db      	uxtb	r3, r3
    187a:	f083 0301 	eor.w	r3, r3, #1
    187e:	b2db      	uxtb	r3, r3
    1880:	f003 0301 	and.w	r3, r3, #1
    1884:	b2db      	uxtb	r3, r3
    1886:	2239      	movs	r2, #57	; 0x39
    1888:	4908      	ldr	r1, [pc, #32]	; (18ac <list_insert_as_head+0x50>)
    188a:	4618      	mov	r0, r3
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <list_insert_as_head+0x54>)
    188e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1890:	687b      	ldr	r3, [r7, #4]
    1892:	681a      	ldr	r2, [r3, #0]
    1894:	683b      	ldr	r3, [r7, #0]
    1896:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	683a      	ldr	r2, [r7, #0]
    189c:	601a      	str	r2, [r3, #0]
}
    189e:	bf00      	nop
    18a0:	3708      	adds	r7, #8
    18a2:	46bd      	mov	sp, r7
    18a4:	bd80      	pop	{r7, pc}
    18a6:	bf00      	nop
    18a8:	00001825 	.word	0x00001825
    18ac:	00005bcc 	.word	0x00005bcc
    18b0:	000017fd 	.word	0x000017fd

000018b4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    18b4:	b480      	push	{r7}
    18b6:	b083      	sub	sp, #12
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
    18bc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	681a      	ldr	r2, [r3, #0]
    18c2:	683b      	ldr	r3, [r7, #0]
    18c4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	683a      	ldr	r2, [r7, #0]
    18ca:	601a      	str	r2, [r3, #0]
}
    18cc:	bf00      	nop
    18ce:	370c      	adds	r7, #12
    18d0:	46bd      	mov	sp, r7
    18d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d6:	4770      	bx	lr

000018d8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    18d8:	b480      	push	{r7}
    18da:	b085      	sub	sp, #20
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
	if (list->head) {
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	681b      	ldr	r3, [r3, #0]
    18e4:	2b00      	cmp	r3, #0
    18e6:	d009      	beq.n	18fc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	681a      	ldr	r2, [r3, #0]
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	e000      	b.n	18fe <list_remove_head+0x26>
	}

	return NULL;
    18fc:	2300      	movs	r3, #0
}
    18fe:	4618      	mov	r0, r3
    1900:	3714      	adds	r7, #20
    1902:	46bd      	mov	sp, r7
    1904:	f85d 7b04 	ldr.w	r7, [sp], #4
    1908:	4770      	bx	lr
	...

0000190c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    190c:	b580      	push	{r7, lr}
    190e:	b084      	sub	sp, #16
    1910:	af00      	add	r7, sp, #0
    1912:	60f8      	str	r0, [r7, #12]
    1914:	60b9      	str	r1, [r7, #8]
    1916:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    1918:	68fb      	ldr	r3, [r7, #12]
    191a:	2b00      	cmp	r3, #0
    191c:	d007      	beq.n	192e <ringbuffer_init+0x22>
    191e:	68bb      	ldr	r3, [r7, #8]
    1920:	2b00      	cmp	r3, #0
    1922:	d004      	beq.n	192e <ringbuffer_init+0x22>
    1924:	687b      	ldr	r3, [r7, #4]
    1926:	2b00      	cmp	r3, #0
    1928:	d001      	beq.n	192e <ringbuffer_init+0x22>
    192a:	2301      	movs	r3, #1
    192c:	e000      	b.n	1930 <ringbuffer_init+0x24>
    192e:	2300      	movs	r3, #0
    1930:	f003 0301 	and.w	r3, r3, #1
    1934:	b2db      	uxtb	r3, r3
    1936:	2228      	movs	r2, #40	; 0x28
    1938:	490f      	ldr	r1, [pc, #60]	; (1978 <ringbuffer_init+0x6c>)
    193a:	4618      	mov	r0, r3
    193c:	4b0f      	ldr	r3, [pc, #60]	; (197c <ringbuffer_init+0x70>)
    193e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	1e5a      	subs	r2, r3, #1
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	4013      	ands	r3, r2
    1948:	2b00      	cmp	r3, #0
    194a:	d002      	beq.n	1952 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    194c:	f06f 030c 	mvn.w	r3, #12
    1950:	e00e      	b.n	1970 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	1e5a      	subs	r2, r3, #1
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	2200      	movs	r2, #0
    195e:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    1960:	68fb      	ldr	r3, [r7, #12]
    1962:	689a      	ldr	r2, [r3, #8]
    1964:	68fb      	ldr	r3, [r7, #12]
    1966:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	68ba      	ldr	r2, [r7, #8]
    196c:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    196e:	2300      	movs	r3, #0
}
    1970:	4618      	mov	r0, r3
    1972:	3710      	adds	r7, #16
    1974:	46bd      	mov	sp, r7
    1976:	bd80      	pop	{r7, pc}
    1978:	00005bec 	.word	0x00005bec
    197c:	000017fd 	.word	0x000017fd

00001980 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1980:	b580      	push	{r7, lr}
    1982:	b082      	sub	sp, #8
    1984:	af00      	add	r7, sp, #0
    1986:	6078      	str	r0, [r7, #4]
    1988:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	2b00      	cmp	r3, #0
    198e:	d004      	beq.n	199a <ringbuffer_get+0x1a>
    1990:	683b      	ldr	r3, [r7, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d001      	beq.n	199a <ringbuffer_get+0x1a>
    1996:	2301      	movs	r3, #1
    1998:	e000      	b.n	199c <ringbuffer_get+0x1c>
    199a:	2300      	movs	r3, #0
    199c:	f003 0301 	and.w	r3, r3, #1
    19a0:	b2db      	uxtb	r3, r3
    19a2:	2240      	movs	r2, #64	; 0x40
    19a4:	4910      	ldr	r1, [pc, #64]	; (19e8 <ringbuffer_get+0x68>)
    19a6:	4618      	mov	r0, r3
    19a8:	4b10      	ldr	r3, [pc, #64]	; (19ec <ringbuffer_get+0x6c>)
    19aa:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	68da      	ldr	r2, [r3, #12]
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	689b      	ldr	r3, [r3, #8]
    19b4:	429a      	cmp	r2, r3
    19b6:	d011      	beq.n	19dc <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	681a      	ldr	r2, [r3, #0]
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	6899      	ldr	r1, [r3, #8]
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	685b      	ldr	r3, [r3, #4]
    19c4:	400b      	ands	r3, r1
    19c6:	4413      	add	r3, r2
    19c8:	781a      	ldrb	r2, [r3, #0]
    19ca:	683b      	ldr	r3, [r7, #0]
    19cc:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	689b      	ldr	r3, [r3, #8]
    19d2:	1c5a      	adds	r2, r3, #1
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    19d8:	2300      	movs	r3, #0
    19da:	e001      	b.n	19e0 <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
    19dc:	f06f 0309 	mvn.w	r3, #9
}
    19e0:	4618      	mov	r0, r3
    19e2:	3708      	adds	r7, #8
    19e4:	46bd      	mov	sp, r7
    19e6:	bd80      	pop	{r7, pc}
    19e8:	00005bec 	.word	0x00005bec
    19ec:	000017fd 	.word	0x000017fd

000019f0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b082      	sub	sp, #8
    19f4:	af00      	add	r7, sp, #0
    19f6:	6078      	str	r0, [r7, #4]
    19f8:	460b      	mov	r3, r1
    19fa:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	2b00      	cmp	r3, #0
    1a00:	bf14      	ite	ne
    1a02:	2301      	movne	r3, #1
    1a04:	2300      	moveq	r3, #0
    1a06:	b2db      	uxtb	r3, r3
    1a08:	2251      	movs	r2, #81	; 0x51
    1a0a:	4914      	ldr	r1, [pc, #80]	; (1a5c <ringbuffer_put+0x6c>)
    1a0c:	4618      	mov	r0, r3
    1a0e:	4b14      	ldr	r3, [pc, #80]	; (1a60 <ringbuffer_put+0x70>)
    1a10:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	681a      	ldr	r2, [r3, #0]
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	68d9      	ldr	r1, [r3, #12]
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	685b      	ldr	r3, [r3, #4]
    1a1e:	400b      	ands	r3, r1
    1a20:	4413      	add	r3, r2
    1a22:	78fa      	ldrb	r2, [r7, #3]
    1a24:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1a26:	687b      	ldr	r3, [r7, #4]
    1a28:	68da      	ldr	r2, [r3, #12]
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	689b      	ldr	r3, [r3, #8]
    1a2e:	1ad2      	subs	r2, r2, r3
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	685b      	ldr	r3, [r3, #4]
    1a34:	429a      	cmp	r2, r3
    1a36:	d906      	bls.n	1a46 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	68da      	ldr	r2, [r3, #12]
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	685b      	ldr	r3, [r3, #4]
    1a40:	1ad2      	subs	r2, r2, r3
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	68db      	ldr	r3, [r3, #12]
    1a4a:	1c5a      	adds	r2, r3, #1
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1a50:	2300      	movs	r3, #0
}
    1a52:	4618      	mov	r0, r3
    1a54:	3708      	adds	r7, #8
    1a56:	46bd      	mov	sp, r7
    1a58:	bd80      	pop	{r7, pc}
    1a5a:	bf00      	nop
    1a5c:	00005bec 	.word	0x00005bec
    1a60:	000017fd 	.word	0x000017fd

00001a64 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b082      	sub	sp, #8
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	bf14      	ite	ne
    1a72:	2301      	movne	r3, #1
    1a74:	2300      	moveq	r3, #0
    1a76:	b2db      	uxtb	r3, r3
    1a78:	2267      	movs	r2, #103	; 0x67
    1a7a:	4906      	ldr	r1, [pc, #24]	; (1a94 <ringbuffer_num+0x30>)
    1a7c:	4618      	mov	r0, r3
    1a7e:	4b06      	ldr	r3, [pc, #24]	; (1a98 <ringbuffer_num+0x34>)
    1a80:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	68da      	ldr	r2, [r3, #12]
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	689b      	ldr	r3, [r3, #8]
    1a8a:	1ad3      	subs	r3, r2, r3
}
    1a8c:	4618      	mov	r0, r3
    1a8e:	3708      	adds	r7, #8
    1a90:	46bd      	mov	sp, r7
    1a92:	bd80      	pop	{r7, pc}
    1a94:	00005bec 	.word	0x00005bec
    1a98:	000017fd 	.word	0x000017fd

00001a9c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1a9c:	b480      	push	{r7}
    1a9e:	b085      	sub	sp, #20
    1aa0:	af00      	add	r7, sp, #0
    1aa2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1aa4:	4b0b      	ldr	r3, [pc, #44]	; (1ad4 <_sbrk+0x38>)
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d102      	bne.n	1ab2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    1aac:	4b09      	ldr	r3, [pc, #36]	; (1ad4 <_sbrk+0x38>)
    1aae:	4a0a      	ldr	r2, [pc, #40]	; (1ad8 <_sbrk+0x3c>)
    1ab0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1ab2:	4b08      	ldr	r3, [pc, #32]	; (1ad4 <_sbrk+0x38>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	60fb      	str	r3, [r7, #12]

	heap += incr;
    1ab8:	4b06      	ldr	r3, [pc, #24]	; (1ad4 <_sbrk+0x38>)
    1aba:	681a      	ldr	r2, [r3, #0]
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	4413      	add	r3, r2
    1ac0:	4a04      	ldr	r2, [pc, #16]	; (1ad4 <_sbrk+0x38>)
    1ac2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
    1ac4:	68fb      	ldr	r3, [r7, #12]
}
    1ac6:	4618      	mov	r0, r3
    1ac8:	3714      	adds	r7, #20
    1aca:	46bd      	mov	sp, r7
    1acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad0:	4770      	bx	lr
    1ad2:	bf00      	nop
    1ad4:	20000100 	.word	0x20000100
    1ad8:	20010388 	.word	0x20010388

00001adc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
    1adc:	b480      	push	{r7}
    1ade:	b083      	sub	sp, #12
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	4603      	mov	r3, r0
    1ae4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1aea:	2b00      	cmp	r3, #0
    1aec:	db0c      	blt.n	1b08 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aee:	4909      	ldr	r1, [pc, #36]	; (1b14 <__NVIC_SetPendingIRQ+0x38>)
    1af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1af4:	095b      	lsrs	r3, r3, #5
    1af6:	88fa      	ldrh	r2, [r7, #6]
    1af8:	f002 021f 	and.w	r2, r2, #31
    1afc:	2001      	movs	r0, #1
    1afe:	fa00 f202 	lsl.w	r2, r0, r2
    1b02:	3340      	adds	r3, #64	; 0x40
    1b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1b08:	bf00      	nop
    1b0a:	370c      	adds	r7, #12
    1b0c:	46bd      	mov	sp, r7
    1b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b12:	4770      	bx	lr
    1b14:	e000e100 	.word	0xe000e100

00001b18 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	4603      	mov	r3, r0
    1b20:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    1b22:	79fb      	ldrb	r3, [r7, #7]
    1b24:	b21b      	sxth	r3, r3
    1b26:	4618      	mov	r0, r3
    1b28:	4b02      	ldr	r3, [pc, #8]	; (1b34 <_irq_set+0x1c>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bf00      	nop
    1b2e:	3708      	adds	r7, #8
    1b30:	46bd      	mov	sp, r7
    1b32:	bd80      	pop	{r7, pc}
    1b34:	00001add 	.word	0x00001add

00001b38 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1b38:	b480      	push	{r7}
    1b3a:	b083      	sub	sp, #12
    1b3c:	af00      	add	r7, sp, #0
    1b3e:	6078      	str	r0, [r7, #4]
    1b40:	460b      	mov	r3, r1
    1b42:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1b44:	687b      	ldr	r3, [r7, #4]
    1b46:	881b      	ldrh	r3, [r3, #0]
    1b48:	b29a      	uxth	r2, r3
    1b4a:	887b      	ldrh	r3, [r7, #2]
    1b4c:	021b      	lsls	r3, r3, #8
    1b4e:	b29b      	uxth	r3, r3
    1b50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1b54:	b29b      	uxth	r3, r3
    1b56:	4313      	orrs	r3, r2
    1b58:	b29a      	uxth	r2, r3
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1b5e:	bf00      	nop
    1b60:	370c      	adds	r7, #12
    1b62:	46bd      	mov	sp, r7
    1b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b68:	4770      	bx	lr
	...

00001b6c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1b70:	2100      	movs	r1, #0
    1b72:	4808      	ldr	r0, [pc, #32]	; (1b94 <_init_chip+0x28>)
    1b74:	4b08      	ldr	r3, [pc, #32]	; (1b98 <_init_chip+0x2c>)
    1b76:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1b78:	4b08      	ldr	r3, [pc, #32]	; (1b9c <_init_chip+0x30>)
    1b7a:	4798      	blx	r3
	_oscctrl_init_sources();
    1b7c:	4b08      	ldr	r3, [pc, #32]	; (1ba0 <_init_chip+0x34>)
    1b7e:	4798      	blx	r3
	_mclk_init();
    1b80:	4b08      	ldr	r3, [pc, #32]	; (1ba4 <_init_chip+0x38>)
    1b82:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1b84:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <_init_chip+0x3c>)
    1b86:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1b88:	f640 70ff 	movw	r0, #4095	; 0xfff
    1b8c:	4b07      	ldr	r3, [pc, #28]	; (1bac <_init_chip+0x40>)
    1b8e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    1b90:	bf00      	nop
    1b92:	bd80      	pop	{r7, pc}
    1b94:	41004000 	.word	0x41004000
    1b98:	00001b39 	.word	0x00001b39
    1b9c:	00002309 	.word	0x00002309
    1ba0:	000023a1 	.word	0x000023a1
    1ba4:	00002285 	.word	0x00002285
    1ba8:	000023e1 	.word	0x000023e1
    1bac:	00002235 	.word	0x00002235

00001bb0 <__NVIC_EnableIRQ>:
{
    1bb0:	b480      	push	{r7}
    1bb2:	b083      	sub	sp, #12
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	4603      	mov	r3, r0
    1bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	db0b      	blt.n	1bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bc2:	4909      	ldr	r1, [pc, #36]	; (1be8 <__NVIC_EnableIRQ+0x38>)
    1bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1bc8:	095b      	lsrs	r3, r3, #5
    1bca:	88fa      	ldrh	r2, [r7, #6]
    1bcc:	f002 021f 	and.w	r2, r2, #31
    1bd0:	2001      	movs	r0, #1
    1bd2:	fa00 f202 	lsl.w	r2, r0, r2
    1bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1bda:	bf00      	nop
    1bdc:	370c      	adds	r7, #12
    1bde:	46bd      	mov	sp, r7
    1be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1be4:	4770      	bx	lr
    1be6:	bf00      	nop
    1be8:	e000e100 	.word	0xe000e100

00001bec <__NVIC_DisableIRQ>:
{
    1bec:	b480      	push	{r7}
    1bee:	b083      	sub	sp, #12
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	4603      	mov	r3, r0
    1bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	db10      	blt.n	1c20 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bfe:	490b      	ldr	r1, [pc, #44]	; (1c2c <__NVIC_DisableIRQ+0x40>)
    1c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c04:	095b      	lsrs	r3, r3, #5
    1c06:	88fa      	ldrh	r2, [r7, #6]
    1c08:	f002 021f 	and.w	r2, r2, #31
    1c0c:	2001      	movs	r0, #1
    1c0e:	fa00 f202 	lsl.w	r2, r0, r2
    1c12:	3320      	adds	r3, #32
    1c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c1c:	f3bf 8f6f 	isb	sy
}
    1c20:	bf00      	nop
    1c22:	370c      	adds	r7, #12
    1c24:	46bd      	mov	sp, r7
    1c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c2a:	4770      	bx	lr
    1c2c:	e000e100 	.word	0xe000e100

00001c30 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1c30:	b480      	push	{r7}
    1c32:	b083      	sub	sp, #12
    1c34:	af00      	add	r7, sp, #0
    1c36:	4603      	mov	r3, r0
    1c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	db0c      	blt.n	1c5c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c42:	4909      	ldr	r1, [pc, #36]	; (1c68 <__NVIC_ClearPendingIRQ+0x38>)
    1c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c48:	095b      	lsrs	r3, r3, #5
    1c4a:	88fa      	ldrh	r2, [r7, #6]
    1c4c:	f002 021f 	and.w	r2, r2, #31
    1c50:	2001      	movs	r0, #1
    1c52:	fa00 f202 	lsl.w	r2, r0, r2
    1c56:	3360      	adds	r3, #96	; 0x60
    1c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1c5c:	bf00      	nop
    1c5e:	370c      	adds	r7, #12
    1c60:	46bd      	mov	sp, r7
    1c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c66:	4770      	bx	lr
    1c68:	e000e100 	.word	0xe000e100

00001c6c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    1c6c:	b480      	push	{r7}
    1c6e:	b083      	sub	sp, #12
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
    1c74:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1c76:	bf00      	nop
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	685a      	ldr	r2, [r3, #4]
    1c7c:	683b      	ldr	r3, [r7, #0]
    1c7e:	4013      	ands	r3, r2
    1c80:	2b00      	cmp	r3, #0
    1c82:	d1f9      	bne.n	1c78 <hri_eic_wait_for_sync+0xc>
	};
}
    1c84:	bf00      	nop
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	685a      	ldr	r2, [r3, #4]
    1c9e:	683b      	ldr	r3, [r7, #0]
    1ca0:	4013      	ands	r3, r2
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	bf14      	ite	ne
    1ca6:	2301      	movne	r3, #1
    1ca8:	2300      	moveq	r3, #0
    1caa:	b2db      	uxtb	r3, r3
}
    1cac:	4618      	mov	r0, r3
    1cae:	370c      	adds	r7, #12
    1cb0:	46bd      	mov	sp, r7
    1cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb6:	4770      	bx	lr

00001cb8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    1cb8:	b480      	push	{r7}
    1cba:	b083      	sub	sp, #12
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	695b      	ldr	r3, [r3, #20]
}
    1cc4:	4618      	mov	r0, r3
    1cc6:	370c      	adds	r7, #12
    1cc8:	46bd      	mov	sp, r7
    1cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cce:	4770      	bx	lr

00001cd0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	683a      	ldr	r2, [r7, #0]
    1cde:	615a      	str	r2, [r3, #20]
}
    1ce0:	bf00      	nop
    1ce2:	370c      	adds	r7, #12
    1ce4:	46bd      	mov	sp, r7
    1ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cea:	4770      	bx	lr

00001cec <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	b082      	sub	sp, #8
    1cf0:	af00      	add	r7, sp, #0
    1cf2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	f043 0302 	orr.w	r3, r3, #2
    1cfe:	b2da      	uxtb	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    1d04:	2103      	movs	r1, #3
    1d06:	6878      	ldr	r0, [r7, #4]
    1d08:	4b02      	ldr	r3, [pc, #8]	; (1d14 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    1d0a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1d0c:	bf00      	nop
    1d0e:	3708      	adds	r7, #8
    1d10:	46bd      	mov	sp, r7
    1d12:	bd80      	pop	{r7, pc}
    1d14:	00001c6d 	.word	0x00001c6d

00001d18 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b082      	sub	sp, #8
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	781b      	ldrb	r3, [r3, #0]
    1d24:	b2db      	uxtb	r3, r3
    1d26:	f023 0302 	bic.w	r3, r3, #2
    1d2a:	b2da      	uxtb	r2, r3
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    1d30:	2103      	movs	r1, #3
    1d32:	6878      	ldr	r0, [r7, #4]
    1d34:	4b02      	ldr	r3, [pc, #8]	; (1d40 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    1d36:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1d38:	bf00      	nop
    1d3a:	3708      	adds	r7, #8
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	00001c6d 	.word	0x00001c6d

00001d44 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
    1d4c:	460b      	mov	r3, r1
    1d4e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    1d56:	7bfb      	ldrb	r3, [r7, #15]
    1d58:	f023 0310 	bic.w	r3, r3, #16
    1d5c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    1d5e:	78fb      	ldrb	r3, [r7, #3]
    1d60:	011b      	lsls	r3, r3, #4
    1d62:	b25a      	sxtb	r2, r3
    1d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1d68:	4313      	orrs	r3, r2
    1d6a:	b25b      	sxtb	r3, r3
    1d6c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	7bfa      	ldrb	r2, [r7, #15]
    1d72:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    1d74:	2103      	movs	r1, #3
    1d76:	6878      	ldr	r0, [r7, #4]
    1d78:	4b02      	ldr	r3, [pc, #8]	; (1d84 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    1d7a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1d7c:	bf00      	nop
    1d7e:	3710      	adds	r7, #16
    1d80:	46bd      	mov	sp, r7
    1d82:	bd80      	pop	{r7, pc}
    1d84:	00001c6d 	.word	0x00001c6d

00001d88 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    1d88:	b580      	push	{r7, lr}
    1d8a:	b084      	sub	sp, #16
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	6078      	str	r0, [r7, #4]
    1d90:	460b      	mov	r3, r1
    1d92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    1d94:	2103      	movs	r1, #3
    1d96:	6878      	ldr	r0, [r7, #4]
    1d98:	4b06      	ldr	r3, [pc, #24]	; (1db4 <hri_eic_get_CTRLA_reg+0x2c>)
    1d9a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	781b      	ldrb	r3, [r3, #0]
    1da0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    1da2:	7bfa      	ldrb	r2, [r7, #15]
    1da4:	78fb      	ldrb	r3, [r7, #3]
    1da6:	4013      	ands	r3, r2
    1da8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    1daa:	7bfb      	ldrb	r3, [r7, #15]
}
    1dac:	4618      	mov	r0, r3
    1dae:	3710      	adds	r7, #16
    1db0:	46bd      	mov	sp, r7
    1db2:	bd80      	pop	{r7, pc}
    1db4:	00001c6d 	.word	0x00001c6d

00001db8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    1db8:	b580      	push	{r7, lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	6078      	str	r0, [r7, #4]
    1dc0:	460b      	mov	r3, r1
    1dc2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	78fa      	ldrb	r2, [r7, #3]
    1dc8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    1dca:	2103      	movs	r1, #3
    1dcc:	6878      	ldr	r0, [r7, #4]
    1dce:	4b03      	ldr	r3, [pc, #12]	; (1ddc <hri_eic_write_CTRLA_reg+0x24>)
    1dd0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    1dd2:	bf00      	nop
    1dd4:	3708      	adds	r7, #8
    1dd6:	46bd      	mov	sp, r7
    1dd8:	bd80      	pop	{r7, pc}
    1dda:	bf00      	nop
    1ddc:	00001c6d 	.word	0x00001c6d

00001de0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    1de0:	b480      	push	{r7}
    1de2:	b083      	sub	sp, #12
    1de4:	af00      	add	r7, sp, #0
    1de6:	6078      	str	r0, [r7, #4]
    1de8:	460b      	mov	r3, r1
    1dea:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	78fa      	ldrb	r2, [r7, #3]
    1df0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1df2:	bf00      	nop
    1df4:	370c      	adds	r7, #12
    1df6:	46bd      	mov	sp, r7
    1df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dfc:	4770      	bx	lr

00001dfe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    1dfe:	b480      	push	{r7}
    1e00:	b083      	sub	sp, #12
    1e02:	af00      	add	r7, sp, #0
    1e04:	6078      	str	r0, [r7, #4]
    1e06:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	683a      	ldr	r2, [r7, #0]
    1e0c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e0e:	bf00      	nop
    1e10:	370c      	adds	r7, #12
    1e12:	46bd      	mov	sp, r7
    1e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e18:	4770      	bx	lr

00001e1a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    1e1a:	b480      	push	{r7}
    1e1c:	b083      	sub	sp, #12
    1e1e:	af00      	add	r7, sp, #0
    1e20:	6078      	str	r0, [r7, #4]
    1e22:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	683a      	ldr	r2, [r7, #0]
    1e28:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e2a:	bf00      	nop
    1e2c:	370c      	adds	r7, #12
    1e2e:	46bd      	mov	sp, r7
    1e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e34:	4770      	bx	lr

00001e36 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    1e36:	b480      	push	{r7}
    1e38:	b085      	sub	sp, #20
    1e3a:	af00      	add	r7, sp, #0
    1e3c:	60f8      	str	r0, [r7, #12]
    1e3e:	460b      	mov	r3, r1
    1e40:	607a      	str	r2, [r7, #4]
    1e42:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1e44:	7afb      	ldrb	r3, [r7, #11]
    1e46:	68fa      	ldr	r2, [r7, #12]
    1e48:	3306      	adds	r3, #6
    1e4a:	009b      	lsls	r3, r3, #2
    1e4c:	4413      	add	r3, r2
    1e4e:	687a      	ldr	r2, [r7, #4]
    1e50:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e52:	bf00      	nop
    1e54:	3714      	adds	r7, #20
    1e56:	46bd      	mov	sp, r7
    1e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e5c:	4770      	bx	lr

00001e5e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    1e5e:	b480      	push	{r7}
    1e60:	b083      	sub	sp, #12
    1e62:	af00      	add	r7, sp, #0
    1e64:	6078      	str	r0, [r7, #4]
    1e66:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	683a      	ldr	r2, [r7, #0]
    1e6c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e6e:	bf00      	nop
    1e70:	370c      	adds	r7, #12
    1e72:	46bd      	mov	sp, r7
    1e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e78:	4770      	bx	lr

00001e7a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    1e7a:	b480      	push	{r7}
    1e7c:	b083      	sub	sp, #12
    1e7e:	af00      	add	r7, sp, #0
    1e80:	6078      	str	r0, [r7, #4]
    1e82:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	683a      	ldr	r2, [r7, #0]
    1e88:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    1e8a:	bf00      	nop
    1e8c:	370c      	adds	r7, #12
    1e8e:	46bd      	mov	sp, r7
    1e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e94:	4770      	bx	lr
	...

00001e98 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b082      	sub	sp, #8
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1ea0:	2101      	movs	r1, #1
    1ea2:	482a      	ldr	r0, [pc, #168]	; (1f4c <_ext_irq_init+0xb4>)
    1ea4:	4b2a      	ldr	r3, [pc, #168]	; (1f50 <_ext_irq_init+0xb8>)
    1ea6:	4798      	blx	r3
    1ea8:	4603      	mov	r3, r0
    1eaa:	f083 0301 	eor.w	r3, r3, #1
    1eae:	b2db      	uxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d011      	beq.n	1ed8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1eb4:	2102      	movs	r1, #2
    1eb6:	4825      	ldr	r0, [pc, #148]	; (1f4c <_ext_irq_init+0xb4>)
    1eb8:	4b26      	ldr	r3, [pc, #152]	; (1f54 <_ext_irq_init+0xbc>)
    1eba:	4798      	blx	r3
    1ebc:	4603      	mov	r3, r0
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d006      	beq.n	1ed0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    1ec2:	4822      	ldr	r0, [pc, #136]	; (1f4c <_ext_irq_init+0xb4>)
    1ec4:	4b24      	ldr	r3, [pc, #144]	; (1f58 <_ext_irq_init+0xc0>)
    1ec6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    1ec8:	2102      	movs	r1, #2
    1eca:	4820      	ldr	r0, [pc, #128]	; (1f4c <_ext_irq_init+0xb4>)
    1ecc:	4b23      	ldr	r3, [pc, #140]	; (1f5c <_ext_irq_init+0xc4>)
    1ece:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    1ed0:	2101      	movs	r1, #1
    1ed2:	481e      	ldr	r0, [pc, #120]	; (1f4c <_ext_irq_init+0xb4>)
    1ed4:	4b22      	ldr	r3, [pc, #136]	; (1f60 <_ext_irq_init+0xc8>)
    1ed6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    1ed8:	2101      	movs	r1, #1
    1eda:	481c      	ldr	r0, [pc, #112]	; (1f4c <_ext_irq_init+0xb4>)
    1edc:	4b1f      	ldr	r3, [pc, #124]	; (1f5c <_ext_irq_init+0xc4>)
    1ede:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    1ee0:	2100      	movs	r1, #0
    1ee2:	481a      	ldr	r0, [pc, #104]	; (1f4c <_ext_irq_init+0xb4>)
    1ee4:	4b1f      	ldr	r3, [pc, #124]	; (1f64 <_ext_irq_init+0xcc>)
    1ee6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    1ee8:	2100      	movs	r1, #0
    1eea:	4818      	ldr	r0, [pc, #96]	; (1f4c <_ext_irq_init+0xb4>)
    1eec:	4b1e      	ldr	r3, [pc, #120]	; (1f68 <_ext_irq_init+0xd0>)
    1eee:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    1ef0:	2101      	movs	r1, #1
    1ef2:	4816      	ldr	r0, [pc, #88]	; (1f4c <_ext_irq_init+0xb4>)
    1ef4:	4b1d      	ldr	r3, [pc, #116]	; (1f6c <_ext_irq_init+0xd4>)
    1ef6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    1ef8:	2100      	movs	r1, #0
    1efa:	4814      	ldr	r0, [pc, #80]	; (1f4c <_ext_irq_init+0xb4>)
    1efc:	4b1c      	ldr	r3, [pc, #112]	; (1f70 <_ext_irq_init+0xd8>)
    1efe:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    1f00:	2100      	movs	r1, #0
    1f02:	4812      	ldr	r0, [pc, #72]	; (1f4c <_ext_irq_init+0xb4>)
    1f04:	4b1b      	ldr	r3, [pc, #108]	; (1f74 <_ext_irq_init+0xdc>)
    1f06:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    1f08:	2100      	movs	r1, #0
    1f0a:	4810      	ldr	r0, [pc, #64]	; (1f4c <_ext_irq_init+0xb4>)
    1f0c:	4b1a      	ldr	r3, [pc, #104]	; (1f78 <_ext_irq_init+0xe0>)
    1f0e:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    1f10:	220c      	movs	r2, #12
    1f12:	2100      	movs	r1, #0
    1f14:	480d      	ldr	r0, [pc, #52]	; (1f4c <_ext_irq_init+0xb4>)
    1f16:	4b19      	ldr	r3, [pc, #100]	; (1f7c <_ext_irq_init+0xe4>)
    1f18:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    1f1a:	2200      	movs	r2, #0
    1f1c:	2101      	movs	r1, #1
    1f1e:	480b      	ldr	r0, [pc, #44]	; (1f4c <_ext_irq_init+0xb4>)
    1f20:	4b16      	ldr	r3, [pc, #88]	; (1f7c <_ext_irq_init+0xe4>)
    1f22:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    1f24:	4809      	ldr	r0, [pc, #36]	; (1f4c <_ext_irq_init+0xb4>)
    1f26:	4b16      	ldr	r3, [pc, #88]	; (1f80 <_ext_irq_init+0xe8>)
    1f28:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    1f2a:	200c      	movs	r0, #12
    1f2c:	4b15      	ldr	r3, [pc, #84]	; (1f84 <_ext_irq_init+0xec>)
    1f2e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    1f30:	200c      	movs	r0, #12
    1f32:	4b15      	ldr	r3, [pc, #84]	; (1f88 <_ext_irq_init+0xf0>)
    1f34:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    1f36:	200c      	movs	r0, #12
    1f38:	4b14      	ldr	r3, [pc, #80]	; (1f8c <_ext_irq_init+0xf4>)
    1f3a:	4798      	blx	r3

	callback = cb;
    1f3c:	4a14      	ldr	r2, [pc, #80]	; (1f90 <_ext_irq_init+0xf8>)
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    1f42:	2300      	movs	r3, #0
}
    1f44:	4618      	mov	r0, r3
    1f46:	3708      	adds	r7, #8
    1f48:	46bd      	mov	sp, r7
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	40002800 	.word	0x40002800
    1f50:	00001c91 	.word	0x00001c91
    1f54:	00001d89 	.word	0x00001d89
    1f58:	00001d19 	.word	0x00001d19
    1f5c:	00001c6d 	.word	0x00001c6d
    1f60:	00001db9 	.word	0x00001db9
    1f64:	00001d45 	.word	0x00001d45
    1f68:	00001de1 	.word	0x00001de1
    1f6c:	00001dff 	.word	0x00001dff
    1f70:	00001e1b 	.word	0x00001e1b
    1f74:	00001e5f 	.word	0x00001e5f
    1f78:	00001e7b 	.word	0x00001e7b
    1f7c:	00001e37 	.word	0x00001e37
    1f80:	00001ced 	.word	0x00001ced
    1f84:	00001bed 	.word	0x00001bed
    1f88:	00001c31 	.word	0x00001c31
    1f8c:	00001bb1 	.word	0x00001bb1
    1f90:	20000104 	.word	0x20000104

00001f94 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	b084      	sub	sp, #16
    1f98:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1f9a:	483f      	ldr	r0, [pc, #252]	; (2098 <_ext_irq_handler+0x104>)
    1f9c:	4b3f      	ldr	r3, [pc, #252]	; (209c <_ext_irq_handler+0x108>)
    1f9e:	4798      	blx	r3
    1fa0:	4603      	mov	r3, r0
    1fa2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    1fa4:	f04f 33ff 	mov.w	r3, #4294967295
    1fa8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1faa:	683b      	ldr	r3, [r7, #0]
    1fac:	4619      	mov	r1, r3
    1fae:	483a      	ldr	r0, [pc, #232]	; (2098 <_ext_irq_handler+0x104>)
    1fb0:	4b3b      	ldr	r3, [pc, #236]	; (20a0 <_ext_irq_handler+0x10c>)
    1fb2:	4798      	blx	r3

	ASSERT(callback);
    1fb4:	4b3b      	ldr	r3, [pc, #236]	; (20a4 <_ext_irq_handler+0x110>)
    1fb6:	681b      	ldr	r3, [r3, #0]
    1fb8:	2b00      	cmp	r3, #0
    1fba:	bf14      	ite	ne
    1fbc:	2301      	movne	r3, #1
    1fbe:	2300      	moveq	r3, #0
    1fc0:	b2db      	uxtb	r3, r3
    1fc2:	22e8      	movs	r2, #232	; 0xe8
    1fc4:	4938      	ldr	r1, [pc, #224]	; (20a8 <_ext_irq_handler+0x114>)
    1fc6:	4618      	mov	r0, r3
    1fc8:	4b38      	ldr	r3, [pc, #224]	; (20ac <_ext_irq_handler+0x118>)
    1fca:	4798      	blx	r3

	while (flags) {
    1fcc:	e05c      	b.n	2088 <_ext_irq_handler+0xf4>
		pos = ffs(flags) - 1;
    1fce:	683b      	ldr	r3, [r7, #0]
    1fd0:	4618      	mov	r0, r3
    1fd2:	4b37      	ldr	r3, [pc, #220]	; (20b0 <_ext_irq_handler+0x11c>)
    1fd4:	4798      	blx	r3
    1fd6:	4603      	mov	r3, r0
    1fd8:	b2db      	uxtb	r3, r3
    1fda:	3b01      	subs	r3, #1
    1fdc:	b2db      	uxtb	r3, r3
    1fde:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    1fe0:	e043      	b.n	206a <_ext_irq_handler+0xd6>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1fe2:	2300      	movs	r3, #0
    1fe4:	71fb      	strb	r3, [r7, #7]
    1fe6:	2301      	movs	r3, #1
    1fe8:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    1fea:	e020      	b.n	202e <_ext_irq_handler+0x9a>
				middle = (upper + lower) >> 1;
    1fec:	79ba      	ldrb	r2, [r7, #6]
    1fee:	79fb      	ldrb	r3, [r7, #7]
    1ff0:	4413      	add	r3, r2
    1ff2:	105b      	asrs	r3, r3, #1
    1ff4:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    1ff6:	797b      	ldrb	r3, [r7, #5]
    1ff8:	4a2e      	ldr	r2, [pc, #184]	; (20b4 <_ext_irq_handler+0x120>)
    1ffa:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    1ffe:	461a      	mov	r2, r3
    2000:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2004:	429a      	cmp	r2, r3
    2006:	d102      	bne.n	200e <_ext_irq_handler+0x7a>
					pin = _map[middle].pin;
    2008:	2320      	movs	r3, #32
    200a:	60bb      	str	r3, [r7, #8]
					break;
    200c:	e013      	b.n	2036 <_ext_irq_handler+0xa2>
				}
				if (_map[middle].extint < pos) {
    200e:	797b      	ldrb	r3, [r7, #5]
    2010:	4a28      	ldr	r2, [pc, #160]	; (20b4 <_ext_irq_handler+0x120>)
    2012:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    2016:	461a      	mov	r2, r3
    2018:	f997 300f 	ldrsb.w	r3, [r7, #15]
    201c:	429a      	cmp	r2, r3
    201e:	da03      	bge.n	2028 <_ext_irq_handler+0x94>
					lower = middle + 1;
    2020:	797b      	ldrb	r3, [r7, #5]
    2022:	3301      	adds	r3, #1
    2024:	71fb      	strb	r3, [r7, #7]
    2026:	e002      	b.n	202e <_ext_irq_handler+0x9a>
				} else {
					upper = middle - 1;
    2028:	797b      	ldrb	r3, [r7, #5]
    202a:	3b01      	subs	r3, #1
    202c:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    202e:	79ba      	ldrb	r2, [r7, #6]
    2030:	79fb      	ldrb	r3, [r7, #7]
    2032:	429a      	cmp	r2, r3
    2034:	d2da      	bcs.n	1fec <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2036:	68bb      	ldr	r3, [r7, #8]
    2038:	f1b3 3fff 	cmp.w	r3, #4294967295
    203c:	d003      	beq.n	2046 <_ext_irq_handler+0xb2>
				callback(pin);
    203e:	4b19      	ldr	r3, [pc, #100]	; (20a4 <_ext_irq_handler+0x110>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	68b8      	ldr	r0, [r7, #8]
    2044:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2046:	f997 300f 	ldrsb.w	r3, [r7, #15]
    204a:	2201      	movs	r2, #1
    204c:	fa02 f303 	lsl.w	r3, r2, r3
    2050:	43da      	mvns	r2, r3
    2052:	683b      	ldr	r3, [r7, #0]
    2054:	4013      	ands	r3, r2
    2056:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    2058:	683b      	ldr	r3, [r7, #0]
    205a:	4618      	mov	r0, r3
    205c:	4b14      	ldr	r3, [pc, #80]	; (20b0 <_ext_irq_handler+0x11c>)
    205e:	4798      	blx	r3
    2060:	4603      	mov	r3, r0
    2062:	b2db      	uxtb	r3, r3
    2064:	3b01      	subs	r3, #1
    2066:	b2db      	uxtb	r3, r3
    2068:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    206e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2072:	d1b6      	bne.n	1fe2 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    2074:	4808      	ldr	r0, [pc, #32]	; (2098 <_ext_irq_handler+0x104>)
    2076:	4b09      	ldr	r3, [pc, #36]	; (209c <_ext_irq_handler+0x108>)
    2078:	4798      	blx	r3
    207a:	4603      	mov	r3, r0
    207c:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    207e:	683b      	ldr	r3, [r7, #0]
    2080:	4619      	mov	r1, r3
    2082:	4805      	ldr	r0, [pc, #20]	; (2098 <_ext_irq_handler+0x104>)
    2084:	4b06      	ldr	r3, [pc, #24]	; (20a0 <_ext_irq_handler+0x10c>)
    2086:	4798      	blx	r3
	while (flags) {
    2088:	683b      	ldr	r3, [r7, #0]
    208a:	2b00      	cmp	r3, #0
    208c:	d19f      	bne.n	1fce <_ext_irq_handler+0x3a>
	}
}
    208e:	bf00      	nop
    2090:	3710      	adds	r7, #16
    2092:	46bd      	mov	sp, r7
    2094:	bd80      	pop	{r7, pc}
    2096:	bf00      	nop
    2098:	40002800 	.word	0x40002800
    209c:	00001cb9 	.word	0x00001cb9
    20a0:	00001cd1 	.word	0x00001cd1
    20a4:	20000104 	.word	0x20000104
    20a8:	00005c18 	.word	0x00005c18
    20ac:	000017fd 	.word	0x000017fd
    20b0:	00005211 	.word	0x00005211
    20b4:	00005c10 	.word	0x00005c10

000020b8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    20bc:	4b01      	ldr	r3, [pc, #4]	; (20c4 <EIC_0_Handler+0xc>)
    20be:	4798      	blx	r3
}
    20c0:	bf00      	nop
    20c2:	bd80      	pop	{r7, pc}
    20c4:	00001f95 	.word	0x00001f95

000020c8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    20c8:	b480      	push	{r7}
    20ca:	b085      	sub	sp, #20
    20cc:	af00      	add	r7, sp, #0
    20ce:	60f8      	str	r0, [r7, #12]
    20d0:	460b      	mov	r3, r1
    20d2:	607a      	str	r2, [r7, #4]
    20d4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    20d6:	7afa      	ldrb	r2, [r7, #11]
    20d8:	68fb      	ldr	r3, [r7, #12]
    20da:	3248      	adds	r2, #72	; 0x48
    20dc:	6879      	ldr	r1, [r7, #4]
    20de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    20e2:	bf00      	nop
    20e4:	3714      	adds	r7, #20
    20e6:	46bd      	mov	sp, r7
    20e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ec:	4770      	bx	lr

000020ee <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    20ee:	b480      	push	{r7}
    20f0:	b083      	sub	sp, #12
    20f2:	af00      	add	r7, sp, #0
    20f4:	6078      	str	r0, [r7, #4]
    20f6:	460b      	mov	r3, r1
    20f8:	70fb      	strb	r3, [r7, #3]
    20fa:	4613      	mov	r3, r2
    20fc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    20fe:	78fb      	ldrb	r3, [r7, #3]
    2100:	687a      	ldr	r2, [r7, #4]
    2102:	3304      	adds	r3, #4
    2104:	00db      	lsls	r3, r3, #3
    2106:	4413      	add	r3, r2
    2108:	78ba      	ldrb	r2, [r7, #2]
    210a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    210c:	78fb      	ldrb	r3, [r7, #3]
    210e:	78ba      	ldrb	r2, [r7, #2]
    2110:	43d2      	mvns	r2, r2
    2112:	b2d1      	uxtb	r1, r2
    2114:	687a      	ldr	r2, [r7, #4]
    2116:	3304      	adds	r3, #4
    2118:	00db      	lsls	r3, r3, #3
    211a:	4413      	add	r3, r2
    211c:	460a      	mov	r2, r1
    211e:	711a      	strb	r2, [r3, #4]
}
    2120:	bf00      	nop
    2122:	370c      	adds	r7, #12
    2124:	46bd      	mov	sp, r7
    2126:	f85d 7b04 	ldr.w	r7, [sp], #4
    212a:	4770      	bx	lr

0000212c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    212c:	b480      	push	{r7}
    212e:	b085      	sub	sp, #20
    2130:	af00      	add	r7, sp, #0
    2132:	60f8      	str	r0, [r7, #12]
    2134:	460b      	mov	r3, r1
    2136:	607a      	str	r2, [r7, #4]
    2138:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    213a:	7afa      	ldrb	r2, [r7, #11]
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	3204      	adds	r2, #4
    2140:	6879      	ldr	r1, [r7, #4]
    2142:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    2146:	bf00      	nop
    2148:	3714      	adds	r7, #20
    214a:	46bd      	mov	sp, r7
    214c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2150:	4770      	bx	lr
	...

00002154 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2154:	b580      	push	{r7, lr}
    2156:	b082      	sub	sp, #8
    2158:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    215a:	2300      	movs	r3, #0
    215c:	71fb      	strb	r3, [r7, #7]
    215e:	e00b      	b.n	2178 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2160:	79fb      	ldrb	r3, [r7, #7]
    2162:	4a18      	ldr	r2, [pc, #96]	; (21c4 <_event_system_init+0x70>)
    2164:	5cd3      	ldrb	r3, [r2, r3]
    2166:	461a      	mov	r2, r3
    2168:	79fb      	ldrb	r3, [r7, #7]
    216a:	4619      	mov	r1, r3
    216c:	4816      	ldr	r0, [pc, #88]	; (21c8 <_event_system_init+0x74>)
    216e:	4b17      	ldr	r3, [pc, #92]	; (21cc <_event_system_init+0x78>)
    2170:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    2172:	79fb      	ldrb	r3, [r7, #7]
    2174:	3301      	adds	r3, #1
    2176:	71fb      	strb	r3, [r7, #7]
    2178:	79fb      	ldrb	r3, [r7, #7]
    217a:	2b42      	cmp	r3, #66	; 0x42
    217c:	d9f0      	bls.n	2160 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    217e:	2300      	movs	r3, #0
    2180:	71fb      	strb	r3, [r7, #7]
    2182:	e016      	b.n	21b2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2184:	79fb      	ldrb	r3, [r7, #7]
    2186:	4a12      	ldr	r2, [pc, #72]	; (21d0 <_event_system_init+0x7c>)
    2188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    218c:	461a      	mov	r2, r3
    218e:	79fb      	ldrb	r3, [r7, #7]
    2190:	4619      	mov	r1, r3
    2192:	480d      	ldr	r0, [pc, #52]	; (21c8 <_event_system_init+0x74>)
    2194:	4b0f      	ldr	r3, [pc, #60]	; (21d4 <_event_system_init+0x80>)
    2196:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2198:	79fb      	ldrb	r3, [r7, #7]
    219a:	4a0f      	ldr	r2, [pc, #60]	; (21d8 <_event_system_init+0x84>)
    219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21a0:	b2da      	uxtb	r2, r3
    21a2:	79fb      	ldrb	r3, [r7, #7]
    21a4:	4619      	mov	r1, r3
    21a6:	4808      	ldr	r0, [pc, #32]	; (21c8 <_event_system_init+0x74>)
    21a8:	4b0c      	ldr	r3, [pc, #48]	; (21dc <_event_system_init+0x88>)
    21aa:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    21ac:	79fb      	ldrb	r3, [r7, #7]
    21ae:	3301      	adds	r3, #1
    21b0:	71fb      	strb	r3, [r7, #7]
    21b2:	79fb      	ldrb	r3, [r7, #7]
    21b4:	2b1f      	cmp	r3, #31
    21b6:	d9e5      	bls.n	2184 <_event_system_init+0x30>
	}

	return ERR_NONE;
    21b8:	2300      	movs	r3, #0
}
    21ba:	4618      	mov	r0, r3
    21bc:	3708      	adds	r7, #8
    21be:	46bd      	mov	sp, r7
    21c0:	bd80      	pop	{r7, pc}
    21c2:	bf00      	nop
    21c4:	00005c30 	.word	0x00005c30
    21c8:	4100e000 	.word	0x4100e000
    21cc:	000020c9 	.word	0x000020c9
    21d0:	00005c74 	.word	0x00005c74
    21d4:	0000212d 	.word	0x0000212d
    21d8:	00005cb4 	.word	0x00005cb4
    21dc:	000020ef 	.word	0x000020ef

000021e0 <hri_gclk_wait_for_sync>:
{
    21e0:	b480      	push	{r7}
    21e2:	b083      	sub	sp, #12
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
    21e8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21ea:	bf00      	nop
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	685a      	ldr	r2, [r3, #4]
    21f0:	683b      	ldr	r3, [r7, #0]
    21f2:	4013      	ands	r3, r2
    21f4:	2b00      	cmp	r3, #0
    21f6:	d1f9      	bne.n	21ec <hri_gclk_wait_for_sync+0xc>
}
    21f8:	bf00      	nop
    21fa:	370c      	adds	r7, #12
    21fc:	46bd      	mov	sp, r7
    21fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2202:	4770      	bx	lr

00002204 <hri_gclk_write_GENCTRL_reg>:
{
    2204:	b580      	push	{r7, lr}
    2206:	b084      	sub	sp, #16
    2208:	af00      	add	r7, sp, #0
    220a:	60f8      	str	r0, [r7, #12]
    220c:	460b      	mov	r3, r1
    220e:	607a      	str	r2, [r7, #4]
    2210:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2212:	7afa      	ldrb	r2, [r7, #11]
    2214:	68fb      	ldr	r3, [r7, #12]
    2216:	3208      	adds	r2, #8
    2218:	6879      	ldr	r1, [r7, #4]
    221a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    221e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    2222:	68f8      	ldr	r0, [r7, #12]
    2224:	4b02      	ldr	r3, [pc, #8]	; (2230 <hri_gclk_write_GENCTRL_reg+0x2c>)
    2226:	4798      	blx	r3
}
    2228:	bf00      	nop
    222a:	3710      	adds	r7, #16
    222c:	46bd      	mov	sp, r7
    222e:	bd80      	pop	{r7, pc}
    2230:	000021e1 	.word	0x000021e1

00002234 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2234:	b580      	push	{r7, lr}
    2236:	b082      	sub	sp, #8
    2238:	af00      	add	r7, sp, #0
    223a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	f003 0301 	and.w	r3, r3, #1
    2242:	2b00      	cmp	r3, #0
    2244:	d004      	beq.n	2250 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    2246:	4a04      	ldr	r2, [pc, #16]	; (2258 <_gclk_init_generators_by_fref+0x24>)
    2248:	2100      	movs	r1, #0
    224a:	4804      	ldr	r0, [pc, #16]	; (225c <_gclk_init_generators_by_fref+0x28>)
    224c:	4b04      	ldr	r3, [pc, #16]	; (2260 <_gclk_init_generators_by_fref+0x2c>)
    224e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    2250:	bf00      	nop
    2252:	3708      	adds	r7, #8
    2254:	46bd      	mov	sp, r7
    2256:	bd80      	pop	{r7, pc}
    2258:	00010101 	.word	0x00010101
    225c:	40001c00 	.word	0x40001c00
    2260:	00002205 	.word	0x00002205

00002264 <hri_mclk_write_CPUDIV_reg>:
{
    2264:	b480      	push	{r7}
    2266:	b083      	sub	sp, #12
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	460b      	mov	r3, r1
    226e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	78fa      	ldrb	r2, [r7, #3]
    2274:	715a      	strb	r2, [r3, #5]
}
    2276:	bf00      	nop
    2278:	370c      	adds	r7, #12
    227a:	46bd      	mov	sp, r7
    227c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2280:	4770      	bx	lr
	...

00002284 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    2284:	b580      	push	{r7, lr}
    2286:	b082      	sub	sp, #8
    2288:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    228a:	4b05      	ldr	r3, [pc, #20]	; (22a0 <_mclk_init+0x1c>)
    228c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    228e:	2101      	movs	r1, #1
    2290:	6878      	ldr	r0, [r7, #4]
    2292:	4b04      	ldr	r3, [pc, #16]	; (22a4 <_mclk_init+0x20>)
    2294:	4798      	blx	r3
}
    2296:	bf00      	nop
    2298:	3708      	adds	r7, #8
    229a:	46bd      	mov	sp, r7
    229c:	bd80      	pop	{r7, pc}
    229e:	bf00      	nop
    22a0:	40000800 	.word	0x40000800
    22a4:	00002265 	.word	0x00002265

000022a8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    22a8:	b480      	push	{r7}
    22aa:	b083      	sub	sp, #12
    22ac:	af00      	add	r7, sp, #0
    22ae:	6078      	str	r0, [r7, #4]
    22b0:	460b      	mov	r3, r1
    22b2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	78fa      	ldrb	r2, [r7, #3]
    22b8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    22ba:	bf00      	nop
    22bc:	370c      	adds	r7, #12
    22be:	46bd      	mov	sp, r7
    22c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    22c4:	4770      	bx	lr

000022c6 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    22c6:	b480      	push	{r7}
    22c8:	b085      	sub	sp, #20
    22ca:	af00      	add	r7, sp, #0
    22cc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	69db      	ldr	r3, [r3, #28]
    22d2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    22d4:	68fb      	ldr	r3, [r7, #12]
    22d6:	0a1b      	lsrs	r3, r3, #8
    22d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    22dc:	60fb      	str	r3, [r7, #12]
	return tmp;
    22de:	68fb      	ldr	r3, [r7, #12]
}
    22e0:	4618      	mov	r0, r3
    22e2:	3714      	adds	r7, #20
    22e4:	46bd      	mov	sp, r7
    22e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    22ea:	4770      	bx	lr

000022ec <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    22ec:	b480      	push	{r7}
    22ee:	b083      	sub	sp, #12
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
    22f4:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	683a      	ldr	r2, [r7, #0]
    22fa:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    22fc:	bf00      	nop
    22fe:	370c      	adds	r7, #12
    2300:	46bd      	mov	sp, r7
    2302:	f85d 7b04 	ldr.w	r7, [sp], #4
    2306:	4770      	bx	lr

00002308 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    2308:	b580      	push	{r7, lr}
    230a:	b082      	sub	sp, #8
    230c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    230e:	4b0c      	ldr	r3, [pc, #48]	; (2340 <_osc32kctrl_init_sources+0x38>)
    2310:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    2312:	2300      	movs	r3, #0
    2314:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    2316:	6878      	ldr	r0, [r7, #4]
    2318:	4b0a      	ldr	r3, [pc, #40]	; (2344 <_osc32kctrl_init_sources+0x3c>)
    231a:	4798      	blx	r3
    231c:	4603      	mov	r3, r0
    231e:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2320:	887b      	ldrh	r3, [r7, #2]
    2322:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    2324:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2328:	4619      	mov	r1, r3
    232a:	6878      	ldr	r0, [r7, #4]
    232c:	4b06      	ldr	r3, [pc, #24]	; (2348 <_osc32kctrl_init_sources+0x40>)
    232e:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    2330:	2101      	movs	r1, #1
    2332:	6878      	ldr	r0, [r7, #4]
    2334:	4b05      	ldr	r3, [pc, #20]	; (234c <_osc32kctrl_init_sources+0x44>)
    2336:	4798      	blx	r3
	(void)calib;
}
    2338:	bf00      	nop
    233a:	3708      	adds	r7, #8
    233c:	46bd      	mov	sp, r7
    233e:	bd80      	pop	{r7, pc}
    2340:	40001400 	.word	0x40001400
    2344:	000022c7 	.word	0x000022c7
    2348:	000022ed 	.word	0x000022ed
    234c:	000022a9 	.word	0x000022a9

00002350 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    2350:	b480      	push	{r7}
    2352:	b083      	sub	sp, #12
    2354:	af00      	add	r7, sp, #0
    2356:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	691b      	ldr	r3, [r3, #16]
    235c:	085b      	lsrs	r3, r3, #1
    235e:	f003 0301 	and.w	r3, r3, #1
    2362:	2b00      	cmp	r3, #0
    2364:	bf14      	ite	ne
    2366:	2301      	movne	r3, #1
    2368:	2300      	moveq	r3, #0
    236a:	b2db      	uxtb	r3, r3
}
    236c:	4618      	mov	r0, r3
    236e:	370c      	adds	r7, #12
    2370:	46bd      	mov	sp, r7
    2372:	f85d 7b04 	ldr.w	r7, [sp], #4
    2376:	4770      	bx	lr

00002378 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    2378:	b480      	push	{r7}
    237a:	b085      	sub	sp, #20
    237c:	af00      	add	r7, sp, #0
    237e:	60f8      	str	r0, [r7, #12]
    2380:	460b      	mov	r3, r1
    2382:	607a      	str	r2, [r7, #4]
    2384:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2386:	7afb      	ldrb	r3, [r7, #11]
    2388:	68fa      	ldr	r2, [r7, #12]
    238a:	3304      	adds	r3, #4
    238c:	009b      	lsls	r3, r3, #2
    238e:	4413      	add	r3, r2
    2390:	687a      	ldr	r2, [r7, #4]
    2392:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2394:	bf00      	nop
    2396:	3714      	adds	r7, #20
    2398:	46bd      	mov	sp, r7
    239a:	f85d 7b04 	ldr.w	r7, [sp], #4
    239e:	4770      	bx	lr

000023a0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b082      	sub	sp, #8
    23a4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    23a6:	4b0a      	ldr	r3, [pc, #40]	; (23d0 <_oscctrl_init_sources+0x30>)
    23a8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    23aa:	4a0a      	ldr	r2, [pc, #40]	; (23d4 <_oscctrl_init_sources+0x34>)
    23ac:	2101      	movs	r1, #1
    23ae:	6878      	ldr	r0, [r7, #4]
    23b0:	4b09      	ldr	r3, [pc, #36]	; (23d8 <_oscctrl_init_sources+0x38>)
    23b2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    23b4:	bf00      	nop
    23b6:	6878      	ldr	r0, [r7, #4]
    23b8:	4b08      	ldr	r3, [pc, #32]	; (23dc <_oscctrl_init_sources+0x3c>)
    23ba:	4798      	blx	r3
    23bc:	4603      	mov	r3, r0
    23be:	f083 0301 	eor.w	r3, r3, #1
    23c2:	b2db      	uxtb	r3, r3
    23c4:	2b00      	cmp	r3, #0
    23c6:	d1f6      	bne.n	23b6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    23c8:	bf00      	nop
    23ca:	3708      	adds	r7, #8
    23cc:	46bd      	mov	sp, r7
    23ce:	bd80      	pop	{r7, pc}
    23d0:	40001000 	.word	0x40001000
    23d4:	03002606 	.word	0x03002606
    23d8:	00002379 	.word	0x00002379
    23dc:	00002351 	.word	0x00002351

000023e0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    23e0:	b480      	push	{r7}
    23e2:	b083      	sub	sp, #12
    23e4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    23e6:	4b04      	ldr	r3, [pc, #16]	; (23f8 <_oscctrl_init_referenced_generators+0x18>)
    23e8:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    23ea:	bf00      	nop
    23ec:	370c      	adds	r7, #12
    23ee:	46bd      	mov	sp, r7
    23f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop
    23f8:	40001000 	.word	0x40001000

000023fc <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    23fc:	b480      	push	{r7}
    23fe:	b083      	sub	sp, #12
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	789b      	ldrb	r3, [r3, #2]
    2408:	b2db      	uxtb	r3, r3
}
    240a:	4618      	mov	r0, r3
    240c:	370c      	adds	r7, #12
    240e:	46bd      	mov	sp, r7
    2410:	f85d 7b04 	ldr.w	r7, [sp], #4
    2414:	4770      	bx	lr

00002416 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    2416:	b480      	push	{r7}
    2418:	b083      	sub	sp, #12
    241a:	af00      	add	r7, sp, #0
    241c:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	685b      	ldr	r3, [r3, #4]
}
    2422:	4618      	mov	r0, r3
    2424:	370c      	adds	r7, #12
    2426:	46bd      	mov	sp, r7
    2428:	f85d 7b04 	ldr.w	r7, [sp], #4
    242c:	4770      	bx	lr
	...

00002430 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2430:	b590      	push	{r4, r7, lr}
    2432:	b083      	sub	sp, #12
    2434:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    2436:	4b17      	ldr	r3, [pc, #92]	; (2494 <RAMECC_Handler+0x64>)
    2438:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    243a:	4817      	ldr	r0, [pc, #92]	; (2498 <RAMECC_Handler+0x68>)
    243c:	4b17      	ldr	r3, [pc, #92]	; (249c <RAMECC_Handler+0x6c>)
    243e:	4798      	blx	r3
    2440:	4603      	mov	r3, r0
    2442:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2444:	683b      	ldr	r3, [r7, #0]
    2446:	f003 0302 	and.w	r3, r3, #2
    244a:	2b00      	cmp	r3, #0
    244c:	d00c      	beq.n	2468 <RAMECC_Handler+0x38>
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	681b      	ldr	r3, [r3, #0]
    2452:	2b00      	cmp	r3, #0
    2454:	d008      	beq.n	2468 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	681c      	ldr	r4, [r3, #0]
    245a:	480f      	ldr	r0, [pc, #60]	; (2498 <RAMECC_Handler+0x68>)
    245c:	4b10      	ldr	r3, [pc, #64]	; (24a0 <RAMECC_Handler+0x70>)
    245e:	4798      	blx	r3
    2460:	4603      	mov	r3, r0
    2462:	4618      	mov	r0, r3
    2464:	47a0      	blx	r4
    2466:	e012      	b.n	248e <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2468:	683b      	ldr	r3, [r7, #0]
    246a:	f003 0301 	and.w	r3, r3, #1
    246e:	2b00      	cmp	r3, #0
    2470:	d00c      	beq.n	248c <RAMECC_Handler+0x5c>
    2472:	687b      	ldr	r3, [r7, #4]
    2474:	685b      	ldr	r3, [r3, #4]
    2476:	2b00      	cmp	r3, #0
    2478:	d008      	beq.n	248c <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	685c      	ldr	r4, [r3, #4]
    247e:	4806      	ldr	r0, [pc, #24]	; (2498 <RAMECC_Handler+0x68>)
    2480:	4b07      	ldr	r3, [pc, #28]	; (24a0 <RAMECC_Handler+0x70>)
    2482:	4798      	blx	r3
    2484:	4603      	mov	r3, r0
    2486:	4618      	mov	r0, r3
    2488:	47a0      	blx	r4
    248a:	e000      	b.n	248e <RAMECC_Handler+0x5e>
	} else {
		return;
    248c:	bf00      	nop
	}
}
    248e:	370c      	adds	r7, #12
    2490:	46bd      	mov	sp, r7
    2492:	bd90      	pop	{r4, r7, pc}
    2494:	20000270 	.word	0x20000270
    2498:	41020000 	.word	0x41020000
    249c:	000023fd 	.word	0x000023fd
    24a0:	00002417 	.word	0x00002417

000024a4 <__NVIC_EnableIRQ>:
{
    24a4:	b480      	push	{r7}
    24a6:	b083      	sub	sp, #12
    24a8:	af00      	add	r7, sp, #0
    24aa:	4603      	mov	r3, r0
    24ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    24ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    24b2:	2b00      	cmp	r3, #0
    24b4:	db0b      	blt.n	24ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24b6:	4909      	ldr	r1, [pc, #36]	; (24dc <__NVIC_EnableIRQ+0x38>)
    24b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    24bc:	095b      	lsrs	r3, r3, #5
    24be:	88fa      	ldrh	r2, [r7, #6]
    24c0:	f002 021f 	and.w	r2, r2, #31
    24c4:	2001      	movs	r0, #1
    24c6:	fa00 f202 	lsl.w	r2, r0, r2
    24ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    24ce:	bf00      	nop
    24d0:	370c      	adds	r7, #12
    24d2:	46bd      	mov	sp, r7
    24d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24d8:	4770      	bx	lr
    24da:	bf00      	nop
    24dc:	e000e100 	.word	0xe000e100

000024e0 <__NVIC_DisableIRQ>:
{
    24e0:	b480      	push	{r7}
    24e2:	b083      	sub	sp, #12
    24e4:	af00      	add	r7, sp, #0
    24e6:	4603      	mov	r3, r0
    24e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    24ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    24ee:	2b00      	cmp	r3, #0
    24f0:	db10      	blt.n	2514 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24f2:	490b      	ldr	r1, [pc, #44]	; (2520 <__NVIC_DisableIRQ+0x40>)
    24f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    24f8:	095b      	lsrs	r3, r3, #5
    24fa:	88fa      	ldrh	r2, [r7, #6]
    24fc:	f002 021f 	and.w	r2, r2, #31
    2500:	2001      	movs	r0, #1
    2502:	fa00 f202 	lsl.w	r2, r0, r2
    2506:	3320      	adds	r3, #32
    2508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    250c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2510:	f3bf 8f6f 	isb	sy
}
    2514:	bf00      	nop
    2516:	370c      	adds	r7, #12
    2518:	46bd      	mov	sp, r7
    251a:	f85d 7b04 	ldr.w	r7, [sp], #4
    251e:	4770      	bx	lr
    2520:	e000e100 	.word	0xe000e100

00002524 <__NVIC_ClearPendingIRQ>:
{
    2524:	b480      	push	{r7}
    2526:	b083      	sub	sp, #12
    2528:	af00      	add	r7, sp, #0
    252a:	4603      	mov	r3, r0
    252c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    252e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2532:	2b00      	cmp	r3, #0
    2534:	db0c      	blt.n	2550 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2536:	4909      	ldr	r1, [pc, #36]	; (255c <__NVIC_ClearPendingIRQ+0x38>)
    2538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    253c:	095b      	lsrs	r3, r3, #5
    253e:	88fa      	ldrh	r2, [r7, #6]
    2540:	f002 021f 	and.w	r2, r2, #31
    2544:	2001      	movs	r0, #1
    2546:	fa00 f202 	lsl.w	r2, r0, r2
    254a:	3360      	adds	r3, #96	; 0x60
    254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2550:	bf00      	nop
    2552:	370c      	adds	r7, #12
    2554:	46bd      	mov	sp, r7
    2556:	f85d 7b04 	ldr.w	r7, [sp], #4
    255a:	4770      	bx	lr
    255c:	e000e100 	.word	0xe000e100

00002560 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2560:	b480      	push	{r7}
    2562:	b083      	sub	sp, #12
    2564:	af00      	add	r7, sp, #0
    2566:	6078      	str	r0, [r7, #4]
    2568:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    256a:	bf00      	nop
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	69da      	ldr	r2, [r3, #28]
    2570:	683b      	ldr	r3, [r7, #0]
    2572:	4013      	ands	r3, r2
    2574:	2b00      	cmp	r3, #0
    2576:	d1f9      	bne.n	256c <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2578:	bf00      	nop
    257a:	370c      	adds	r7, #12
    257c:	46bd      	mov	sp, r7
    257e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2582:	4770      	bx	lr

00002584 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2584:	b480      	push	{r7}
    2586:	b083      	sub	sp, #12
    2588:	af00      	add	r7, sp, #0
    258a:	6078      	str	r0, [r7, #4]
    258c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	69da      	ldr	r2, [r3, #28]
    2592:	683b      	ldr	r3, [r7, #0]
    2594:	4013      	ands	r3, r2
    2596:	2b00      	cmp	r3, #0
    2598:	bf14      	ite	ne
    259a:	2301      	movne	r3, #1
    259c:	2300      	moveq	r3, #0
    259e:	b2db      	uxtb	r3, r3
}
    25a0:	4618      	mov	r0, r3
    25a2:	370c      	adds	r7, #12
    25a4:	46bd      	mov	sp, r7
    25a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    25aa:	4770      	bx	lr

000025ac <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    25ac:	b480      	push	{r7}
    25ae:	b083      	sub	sp, #12
    25b0:	af00      	add	r7, sp, #0
    25b2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	7e1b      	ldrb	r3, [r3, #24]
    25b8:	b2db      	uxtb	r3, r3
    25ba:	f003 0301 	and.w	r3, r3, #1
    25be:	2b00      	cmp	r3, #0
    25c0:	bf14      	ite	ne
    25c2:	2301      	movne	r3, #1
    25c4:	2300      	moveq	r3, #0
    25c6:	b2db      	uxtb	r3, r3
}
    25c8:	4618      	mov	r0, r3
    25ca:	370c      	adds	r7, #12
    25cc:	46bd      	mov	sp, r7
    25ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    25d2:	4770      	bx	lr

000025d4 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    25d4:	b480      	push	{r7}
    25d6:	b083      	sub	sp, #12
    25d8:	af00      	add	r7, sp, #0
    25da:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	7e1b      	ldrb	r3, [r3, #24]
    25e0:	b2db      	uxtb	r3, r3
    25e2:	085b      	lsrs	r3, r3, #1
    25e4:	f003 0301 	and.w	r3, r3, #1
    25e8:	2b00      	cmp	r3, #0
    25ea:	bf14      	ite	ne
    25ec:	2301      	movne	r3, #1
    25ee:	2300      	moveq	r3, #0
    25f0:	b2db      	uxtb	r3, r3
}
    25f2:	4618      	mov	r0, r3
    25f4:	370c      	adds	r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25fc:	4770      	bx	lr

000025fe <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    25fe:	b480      	push	{r7}
    2600:	b083      	sub	sp, #12
    2602:	af00      	add	r7, sp, #0
    2604:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	7e1b      	ldrb	r3, [r3, #24]
    260a:	b2db      	uxtb	r3, r3
    260c:	089b      	lsrs	r3, r3, #2
    260e:	f003 0301 	and.w	r3, r3, #1
    2612:	2b00      	cmp	r3, #0
    2614:	bf14      	ite	ne
    2616:	2301      	movne	r3, #1
    2618:	2300      	moveq	r3, #0
    261a:	b2db      	uxtb	r3, r3
}
    261c:	4618      	mov	r0, r3
    261e:	370c      	adds	r7, #12
    2620:	46bd      	mov	sp, r7
    2622:	f85d 7b04 	ldr.w	r7, [sp], #4
    2626:	4770      	bx	lr

00002628 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    2628:	b480      	push	{r7}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	7e1b      	ldrb	r3, [r3, #24]
    2634:	b2db      	uxtb	r3, r3
    2636:	09db      	lsrs	r3, r3, #7
    2638:	f003 0301 	and.w	r3, r3, #1
    263c:	2b00      	cmp	r3, #0
    263e:	bf14      	ite	ne
    2640:	2301      	movne	r3, #1
    2642:	2300      	moveq	r3, #0
    2644:	b2db      	uxtb	r3, r3
}
    2646:	4618      	mov	r0, r3
    2648:	370c      	adds	r7, #12
    264a:	46bd      	mov	sp, r7
    264c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2650:	4770      	bx	lr

00002652 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    2652:	b480      	push	{r7}
    2654:	b083      	sub	sp, #12
    2656:	af00      	add	r7, sp, #0
    2658:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	2280      	movs	r2, #128	; 0x80
    265e:	761a      	strb	r2, [r3, #24]
}
    2660:	bf00      	nop
    2662:	370c      	adds	r7, #12
    2664:	46bd      	mov	sp, r7
    2666:	f85d 7b04 	ldr.w	r7, [sp], #4
    266a:	4770      	bx	lr

0000266c <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    266c:	b480      	push	{r7}
    266e:	b083      	sub	sp, #12
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	2201      	movs	r2, #1
    2678:	759a      	strb	r2, [r3, #22]
}
    267a:	bf00      	nop
    267c:	370c      	adds	r7, #12
    267e:	46bd      	mov	sp, r7
    2680:	f85d 7b04 	ldr.w	r7, [sp], #4
    2684:	4770      	bx	lr

00002686 <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    2686:	b480      	push	{r7}
    2688:	b083      	sub	sp, #12
    268a:	af00      	add	r7, sp, #0
    268c:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	7d9b      	ldrb	r3, [r3, #22]
    2692:	b2db      	uxtb	r3, r3
    2694:	f003 0301 	and.w	r3, r3, #1
    2698:	2b00      	cmp	r3, #0
    269a:	bf14      	ite	ne
    269c:	2301      	movne	r3, #1
    269e:	2300      	moveq	r3, #0
    26a0:	b2db      	uxtb	r3, r3
}
    26a2:	4618      	mov	r0, r3
    26a4:	370c      	adds	r7, #12
    26a6:	46bd      	mov	sp, r7
    26a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ac:	4770      	bx	lr

000026ae <hri_sercomusart_write_INTEN_DRE_bit>:

static inline void hri_sercomusart_write_INTEN_DRE_bit(const void *const hw, bool value)
{
    26ae:	b480      	push	{r7}
    26b0:	b083      	sub	sp, #12
    26b2:	af00      	add	r7, sp, #0
    26b4:	6078      	str	r0, [r7, #4]
    26b6:	460b      	mov	r3, r1
    26b8:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    26ba:	78fb      	ldrb	r3, [r7, #3]
    26bc:	f083 0301 	eor.w	r3, r3, #1
    26c0:	b2db      	uxtb	r3, r3
    26c2:	2b00      	cmp	r3, #0
    26c4:	d003      	beq.n	26ce <hri_sercomusart_write_INTEN_DRE_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	2201      	movs	r2, #1
    26ca:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}
    26cc:	e002      	b.n	26d4 <hri_sercomusart_write_INTEN_DRE_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    26ce:	687b      	ldr	r3, [r7, #4]
    26d0:	2201      	movs	r2, #1
    26d2:	759a      	strb	r2, [r3, #22]
}
    26d4:	bf00      	nop
    26d6:	370c      	adds	r7, #12
    26d8:	46bd      	mov	sp, r7
    26da:	f85d 7b04 	ldr.w	r7, [sp], #4
    26de:	4770      	bx	lr

000026e0 <hri_sercomusart_clear_INTEN_DRE_bit>:

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    26e0:	b480      	push	{r7}
    26e2:	b083      	sub	sp, #12
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	2201      	movs	r2, #1
    26ec:	751a      	strb	r2, [r3, #20]
}
    26ee:	bf00      	nop
    26f0:	370c      	adds	r7, #12
    26f2:	46bd      	mov	sp, r7
    26f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26f8:	4770      	bx	lr

000026fa <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    26fa:	b480      	push	{r7}
    26fc:	b083      	sub	sp, #12
    26fe:	af00      	add	r7, sp, #0
    2700:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	2202      	movs	r2, #2
    2706:	759a      	strb	r2, [r3, #22]
}
    2708:	bf00      	nop
    270a:	370c      	adds	r7, #12
    270c:	46bd      	mov	sp, r7
    270e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2712:	4770      	bx	lr

00002714 <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    2714:	b480      	push	{r7}
    2716:	b083      	sub	sp, #12
    2718:	af00      	add	r7, sp, #0
    271a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	7d9b      	ldrb	r3, [r3, #22]
    2720:	b2db      	uxtb	r3, r3
    2722:	085b      	lsrs	r3, r3, #1
    2724:	f003 0301 	and.w	r3, r3, #1
    2728:	2b00      	cmp	r3, #0
    272a:	bf14      	ite	ne
    272c:	2301      	movne	r3, #1
    272e:	2300      	moveq	r3, #0
    2730:	b2db      	uxtb	r3, r3
}
    2732:	4618      	mov	r0, r3
    2734:	370c      	adds	r7, #12
    2736:	46bd      	mov	sp, r7
    2738:	f85d 7b04 	ldr.w	r7, [sp], #4
    273c:	4770      	bx	lr

0000273e <hri_sercomusart_write_INTEN_TXC_bit>:

static inline void hri_sercomusart_write_INTEN_TXC_bit(const void *const hw, bool value)
{
    273e:	b480      	push	{r7}
    2740:	b083      	sub	sp, #12
    2742:	af00      	add	r7, sp, #0
    2744:	6078      	str	r0, [r7, #4]
    2746:	460b      	mov	r3, r1
    2748:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    274a:	78fb      	ldrb	r3, [r7, #3]
    274c:	f083 0301 	eor.w	r3, r3, #1
    2750:	b2db      	uxtb	r3, r3
    2752:	2b00      	cmp	r3, #0
    2754:	d003      	beq.n	275e <hri_sercomusart_write_INTEN_TXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	2202      	movs	r2, #2
    275a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}
    275c:	e002      	b.n	2764 <hri_sercomusart_write_INTEN_TXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	2202      	movs	r2, #2
    2762:	759a      	strb	r2, [r3, #22]
}
    2764:	bf00      	nop
    2766:	370c      	adds	r7, #12
    2768:	46bd      	mov	sp, r7
    276a:	f85d 7b04 	ldr.w	r7, [sp], #4
    276e:	4770      	bx	lr

00002770 <hri_sercomusart_clear_INTEN_TXC_bit>:

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    2770:	b480      	push	{r7}
    2772:	b083      	sub	sp, #12
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	2202      	movs	r2, #2
    277c:	751a      	strb	r2, [r3, #20]
}
    277e:	bf00      	nop
    2780:	370c      	adds	r7, #12
    2782:	46bd      	mov	sp, r7
    2784:	f85d 7b04 	ldr.w	r7, [sp], #4
    2788:	4770      	bx	lr

0000278a <hri_sercomusart_write_INTEN_RXC_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_RXC) >> SERCOM_USART_INTENSET_RXC_Pos;
}

static inline void hri_sercomusart_write_INTEN_RXC_bit(const void *const hw, bool value)
{
    278a:	b480      	push	{r7}
    278c:	b083      	sub	sp, #12
    278e:	af00      	add	r7, sp, #0
    2790:	6078      	str	r0, [r7, #4]
    2792:	460b      	mov	r3, r1
    2794:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    2796:	78fb      	ldrb	r3, [r7, #3]
    2798:	f083 0301 	eor.w	r3, r3, #1
    279c:	b2db      	uxtb	r3, r3
    279e:	2b00      	cmp	r3, #0
    27a0:	d003      	beq.n	27aa <hri_sercomusart_write_INTEN_RXC_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	2204      	movs	r2, #4
    27a6:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
	}
}
    27a8:	e002      	b.n	27b0 <hri_sercomusart_write_INTEN_RXC_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	2204      	movs	r2, #4
    27ae:	759a      	strb	r2, [r3, #22]
}
    27b0:	bf00      	nop
    27b2:	370c      	adds	r7, #12
    27b4:	46bd      	mov	sp, r7
    27b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ba:	4770      	bx	lr

000027bc <hri_sercomusart_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_ERROR) >> SERCOM_USART_INTENSET_ERROR_Pos;
}

static inline void hri_sercomusart_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    27bc:	b480      	push	{r7}
    27be:	b083      	sub	sp, #12
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
    27c4:	460b      	mov	r3, r1
    27c6:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    27c8:	78fb      	ldrb	r3, [r7, #3]
    27ca:	f083 0301 	eor.w	r3, r3, #1
    27ce:	b2db      	uxtb	r3, r3
    27d0:	2b00      	cmp	r3, #0
    27d2:	d003      	beq.n	27dc <hri_sercomusart_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	2280      	movs	r2, #128	; 0x80
    27d8:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
	}
}
    27da:	e002      	b.n	27e2 <hri_sercomusart_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	2280      	movs	r2, #128	; 0x80
    27e0:	759a      	strb	r2, [r3, #22]
}
    27e2:	bf00      	nop
    27e4:	370c      	adds	r7, #12
    27e6:	46bd      	mov	sp, r7
    27e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ec:	4770      	bx	lr
	...

000027f0 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b082      	sub	sp, #8
    27f4:	af00      	add	r7, sp, #0
    27f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	681b      	ldr	r3, [r3, #0]
    27fc:	f043 0202 	orr.w	r2, r3, #2
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2804:	2103      	movs	r1, #3
    2806:	6878      	ldr	r0, [r7, #4]
    2808:	4b02      	ldr	r3, [pc, #8]	; (2814 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    280a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    280c:	bf00      	nop
    280e:	3708      	adds	r7, #8
    2810:	46bd      	mov	sp, r7
    2812:	bd80      	pop	{r7, pc}
    2814:	00002561 	.word	0x00002561

00002818 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2818:	b580      	push	{r7, lr}
    281a:	b082      	sub	sp, #8
    281c:	af00      	add	r7, sp, #0
    281e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	f023 0202 	bic.w	r2, r3, #2
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    282c:	2103      	movs	r1, #3
    282e:	6878      	ldr	r0, [r7, #4]
    2830:	4b02      	ldr	r3, [pc, #8]	; (283c <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    2832:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2834:	bf00      	nop
    2836:	3708      	adds	r7, #8
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}
    283c:	00002561 	.word	0x00002561

00002840 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    2840:	b580      	push	{r7, lr}
    2842:	b084      	sub	sp, #16
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
    2848:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    284a:	2103      	movs	r1, #3
    284c:	6878      	ldr	r0, [r7, #4]
    284e:	4b07      	ldr	r3, [pc, #28]	; (286c <hri_sercomusart_get_CTRLA_reg+0x2c>)
    2850:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2858:	68fa      	ldr	r2, [r7, #12]
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	4013      	ands	r3, r2
    285e:	60fb      	str	r3, [r7, #12]
	return tmp;
    2860:	68fb      	ldr	r3, [r7, #12]
}
    2862:	4618      	mov	r0, r3
    2864:	3710      	adds	r7, #16
    2866:	46bd      	mov	sp, r7
    2868:	bd80      	pop	{r7, pc}
    286a:	bf00      	nop
    286c:	00002561 	.word	0x00002561

00002870 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    2870:	b580      	push	{r7, lr}
    2872:	b082      	sub	sp, #8
    2874:	af00      	add	r7, sp, #0
    2876:	6078      	str	r0, [r7, #4]
    2878:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	683a      	ldr	r2, [r7, #0]
    287e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2880:	2103      	movs	r1, #3
    2882:	6878      	ldr	r0, [r7, #4]
    2884:	4b02      	ldr	r3, [pc, #8]	; (2890 <hri_sercomusart_write_CTRLA_reg+0x20>)
    2886:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2888:	bf00      	nop
    288a:	3708      	adds	r7, #8
    288c:	46bd      	mov	sp, r7
    288e:	bd80      	pop	{r7, pc}
    2890:	00002561 	.word	0x00002561

00002894 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    2894:	b580      	push	{r7, lr}
    2896:	b082      	sub	sp, #8
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
    289c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	683a      	ldr	r2, [r7, #0]
    28a2:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    28a4:	211f      	movs	r1, #31
    28a6:	6878      	ldr	r0, [r7, #4]
    28a8:	4b02      	ldr	r3, [pc, #8]	; (28b4 <hri_sercomusart_write_CTRLB_reg+0x20>)
    28aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    28ac:	bf00      	nop
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}
    28b4:	00002561 	.word	0x00002561

000028b8 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    28b8:	b480      	push	{r7}
    28ba:	b083      	sub	sp, #12
    28bc:	af00      	add	r7, sp, #0
    28be:	6078      	str	r0, [r7, #4]
    28c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	683a      	ldr	r2, [r7, #0]
    28c6:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    28c8:	bf00      	nop
    28ca:	370c      	adds	r7, #12
    28cc:	46bd      	mov	sp, r7
    28ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    28d2:	4770      	bx	lr

000028d4 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    28d4:	b480      	push	{r7}
    28d6:	b083      	sub	sp, #12
    28d8:	af00      	add	r7, sp, #0
    28da:	6078      	str	r0, [r7, #4]
    28dc:	460b      	mov	r3, r1
    28de:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	887a      	ldrh	r2, [r7, #2]
    28e4:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    28e6:	bf00      	nop
    28e8:	370c      	adds	r7, #12
    28ea:	46bd      	mov	sp, r7
    28ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    28f0:	4770      	bx	lr

000028f2 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    28f2:	b480      	push	{r7}
    28f4:	b083      	sub	sp, #12
    28f6:	af00      	add	r7, sp, #0
    28f8:	6078      	str	r0, [r7, #4]
    28fa:	460b      	mov	r3, r1
    28fc:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	78fa      	ldrb	r2, [r7, #3]
    2902:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2904:	bf00      	nop
    2906:	370c      	adds	r7, #12
    2908:	46bd      	mov	sp, r7
    290a:	f85d 7b04 	ldr.w	r7, [sp], #4
    290e:	4770      	bx	lr

00002910 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    2910:	b480      	push	{r7}
    2912:	b083      	sub	sp, #12
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
    2918:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	683a      	ldr	r2, [r7, #0]
    291e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2920:	bf00      	nop
    2922:	370c      	adds	r7, #12
    2924:	46bd      	mov	sp, r7
    2926:	f85d 7b04 	ldr.w	r7, [sp], #4
    292a:	4770      	bx	lr

0000292c <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    292c:	b480      	push	{r7}
    292e:	b083      	sub	sp, #12
    2930:	af00      	add	r7, sp, #0
    2932:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    2938:	4618      	mov	r0, r3
    293a:	370c      	adds	r7, #12
    293c:	46bd      	mov	sp, r7
    293e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2942:	4770      	bx	lr

00002944 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    2944:	b480      	push	{r7}
    2946:	b083      	sub	sp, #12
    2948:	af00      	add	r7, sp, #0
    294a:	6078      	str	r0, [r7, #4]
    294c:	460b      	mov	r3, r1
    294e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	78fa      	ldrb	r2, [r7, #3]
    2954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2958:	bf00      	nop
    295a:	370c      	adds	r7, #12
    295c:	46bd      	mov	sp, r7
    295e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2962:	4770      	bx	lr

00002964 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    2964:	b480      	push	{r7}
    2966:	b083      	sub	sp, #12
    2968:	af00      	add	r7, sp, #0
    296a:	6078      	str	r0, [r7, #4]
    296c:	460b      	mov	r3, r1
    296e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	887a      	ldrh	r2, [r7, #2]
    2974:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2976:	bf00      	nop
    2978:	370c      	adds	r7, #12
    297a:	46bd      	mov	sp, r7
    297c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2980:	4770      	bx	lr

00002982 <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    2982:	b480      	push	{r7}
    2984:	b083      	sub	sp, #12
    2986:	af00      	add	r7, sp, #0
    2988:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	8b5b      	ldrh	r3, [r3, #26]
    298e:	b29b      	uxth	r3, r3
}
    2990:	4618      	mov	r0, r3
    2992:	370c      	adds	r7, #12
    2994:	46bd      	mov	sp, r7
    2996:	f85d 7b04 	ldr.w	r7, [sp], #4
    299a:	4770      	bx	lr

0000299c <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    299c:	b580      	push	{r7, lr}
    299e:	b086      	sub	sp, #24
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
    29a4:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	2b00      	cmp	r3, #0
    29aa:	bf14      	ite	ne
    29ac:	2301      	movne	r3, #1
    29ae:	2300      	moveq	r3, #0
    29b0:	b2db      	uxtb	r3, r3
    29b2:	22cb      	movs	r2, #203	; 0xcb
    29b4:	491c      	ldr	r1, [pc, #112]	; (2a28 <_usart_async_init+0x8c>)
    29b6:	4618      	mov	r0, r3
    29b8:	4b1c      	ldr	r3, [pc, #112]	; (2a2c <_usart_async_init+0x90>)
    29ba:	4798      	blx	r3

	init_status = _usart_init(hw);
    29bc:	6838      	ldr	r0, [r7, #0]
    29be:	4b1c      	ldr	r3, [pc, #112]	; (2a30 <_usart_async_init+0x94>)
    29c0:	4798      	blx	r3
    29c2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    29c4:	68fb      	ldr	r3, [r7, #12]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d001      	beq.n	29ce <_usart_async_init+0x32>
		return init_status;
    29ca:	68fb      	ldr	r3, [r7, #12]
    29cc:	e027      	b.n	2a1e <_usart_async_init+0x82>
	}
	device->hw = hw;
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	683a      	ldr	r2, [r7, #0]
    29d2:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    29d4:	6879      	ldr	r1, [r7, #4]
    29d6:	6838      	ldr	r0, [r7, #0]
    29d8:	4b16      	ldr	r3, [pc, #88]	; (2a34 <_usart_async_init+0x98>)
    29da:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    29dc:	6838      	ldr	r0, [r7, #0]
    29de:	4b16      	ldr	r3, [pc, #88]	; (2a38 <_usart_async_init+0x9c>)
    29e0:	4798      	blx	r3
    29e2:	4603      	mov	r3, r0
    29e4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    29e6:	2300      	movs	r3, #0
    29e8:	613b      	str	r3, [r7, #16]
    29ea:	e014      	b.n	2a16 <_usart_async_init+0x7a>
		NVIC_DisableIRQ((IRQn_Type)irq);
    29ec:	7dfb      	ldrb	r3, [r7, #23]
    29ee:	b21b      	sxth	r3, r3
    29f0:	4618      	mov	r0, r3
    29f2:	4b12      	ldr	r3, [pc, #72]	; (2a3c <_usart_async_init+0xa0>)
    29f4:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    29f6:	7dfb      	ldrb	r3, [r7, #23]
    29f8:	b21b      	sxth	r3, r3
    29fa:	4618      	mov	r0, r3
    29fc:	4b10      	ldr	r3, [pc, #64]	; (2a40 <_usart_async_init+0xa4>)
    29fe:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    2a00:	7dfb      	ldrb	r3, [r7, #23]
    2a02:	b21b      	sxth	r3, r3
    2a04:	4618      	mov	r0, r3
    2a06:	4b0f      	ldr	r3, [pc, #60]	; (2a44 <_usart_async_init+0xa8>)
    2a08:	4798      	blx	r3
		irq++;
    2a0a:	7dfb      	ldrb	r3, [r7, #23]
    2a0c:	3301      	adds	r3, #1
    2a0e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    2a10:	693b      	ldr	r3, [r7, #16]
    2a12:	3301      	adds	r3, #1
    2a14:	613b      	str	r3, [r7, #16]
    2a16:	693b      	ldr	r3, [r7, #16]
    2a18:	2b03      	cmp	r3, #3
    2a1a:	d9e7      	bls.n	29ec <_usart_async_init+0x50>
	}
	return ERR_NONE;
    2a1c:	2300      	movs	r3, #0
}
    2a1e:	4618      	mov	r0, r3
    2a20:	3718      	adds	r7, #24
    2a22:	46bd      	mov	sp, r7
    2a24:	bd80      	pop	{r7, pc}
    2a26:	bf00      	nop
    2a28:	00005d34 	.word	0x00005d34
    2a2c:	000017fd 	.word	0x000017fd
    2a30:	00002d59 	.word	0x00002d59
    2a34:	00002d2d 	.word	0x00002d2d
    2a38:	00002f19 	.word	0x00002f19
    2a3c:	000024e1 	.word	0x000024e1
    2a40:	00002525 	.word	0x00002525
    2a44:	000024a5 	.word	0x000024a5

00002a48 <_usart_async_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b082      	sub	sp, #8
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	699b      	ldr	r3, [r3, #24]
    2a54:	4618      	mov	r0, r3
    2a56:	4b03      	ldr	r3, [pc, #12]	; (2a64 <_usart_async_enable+0x1c>)
    2a58:	4798      	blx	r3
}
    2a5a:	bf00      	nop
    2a5c:	3708      	adds	r7, #8
    2a5e:	46bd      	mov	sp, r7
    2a60:	bd80      	pop	{r7, pc}
    2a62:	bf00      	nop
    2a64:	000027f1 	.word	0x000027f1

00002a68 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    2a68:	b580      	push	{r7, lr}
    2a6a:	b082      	sub	sp, #8
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	6078      	str	r0, [r7, #4]
    2a70:	460b      	mov	r3, r1
    2a72:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	699b      	ldr	r3, [r3, #24]
    2a78:	78fa      	ldrb	r2, [r7, #3]
    2a7a:	4611      	mov	r1, r2
    2a7c:	4618      	mov	r0, r3
    2a7e:	4b03      	ldr	r3, [pc, #12]	; (2a8c <_usart_async_write_byte+0x24>)
    2a80:	4798      	blx	r3
}
    2a82:	bf00      	nop
    2a84:	3708      	adds	r7, #8
    2a86:	46bd      	mov	sp, r7
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	bf00      	nop
    2a8c:	00002911 	.word	0x00002911

00002a90 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    2a90:	b580      	push	{r7, lr}
    2a92:	b082      	sub	sp, #8
    2a94:	af00      	add	r7, sp, #0
    2a96:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	699b      	ldr	r3, [r3, #24]
    2a9c:	4618      	mov	r0, r3
    2a9e:	4b03      	ldr	r3, [pc, #12]	; (2aac <_usart_async_enable_byte_sent_irq+0x1c>)
    2aa0:	4798      	blx	r3
}
    2aa2:	bf00      	nop
    2aa4:	3708      	adds	r7, #8
    2aa6:	46bd      	mov	sp, r7
    2aa8:	bd80      	pop	{r7, pc}
    2aaa:	bf00      	nop
    2aac:	0000266d 	.word	0x0000266d

00002ab0 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b082      	sub	sp, #8
    2ab4:	af00      	add	r7, sp, #0
    2ab6:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	699b      	ldr	r3, [r3, #24]
    2abc:	4618      	mov	r0, r3
    2abe:	4b03      	ldr	r3, [pc, #12]	; (2acc <_usart_async_enable_tx_done_irq+0x1c>)
    2ac0:	4798      	blx	r3
}
    2ac2:	bf00      	nop
    2ac4:	3708      	adds	r7, #8
    2ac6:	46bd      	mov	sp, r7
    2ac8:	bd80      	pop	{r7, pc}
    2aca:	bf00      	nop
    2acc:	000026fb 	.word	0x000026fb

00002ad0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2ad0:	b4b0      	push	{r4, r5, r7}
    2ad2:	b08d      	sub	sp, #52	; 0x34
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2ad8:	4b13      	ldr	r3, [pc, #76]	; (2b28 <_sercom_get_hardware_index+0x58>)
    2ada:	f107 040c 	add.w	r4, r7, #12
    2ade:	461d      	mov	r5, r3
    2ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2aec:	2300      	movs	r3, #0
    2aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af0:	e010      	b.n	2b14 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2af4:	009b      	lsls	r3, r3, #2
    2af6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2afa:	4413      	add	r3, r2
    2afc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    2b00:	461a      	mov	r2, r3
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	429a      	cmp	r2, r3
    2b06:	d102      	bne.n	2b0e <_sercom_get_hardware_index+0x3e>
			return i;
    2b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0a:	b2db      	uxtb	r3, r3
    2b0c:	e006      	b.n	2b1c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b10:	3301      	adds	r3, #1
    2b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b16:	2b07      	cmp	r3, #7
    2b18:	d9eb      	bls.n	2af2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    2b1a:	2300      	movs	r3, #0
}
    2b1c:	4618      	mov	r0, r3
    2b1e:	3734      	adds	r7, #52	; 0x34
    2b20:	46bd      	mov	sp, r7
    2b22:	bcb0      	pop	{r4, r5, r7}
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	00005d50 	.word	0x00005d50

00002b2c <_usart_async_set_irq_state>:
/**
 * \brief Enable/disable USART interrupt
 */
void _usart_async_set_irq_state(struct _usart_async_device *const device, const enum _usart_async_callback_type type,
                                const bool state)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b082      	sub	sp, #8
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
    2b34:	460b      	mov	r3, r1
    2b36:	70fb      	strb	r3, [r7, #3]
    2b38:	4613      	mov	r3, r2
    2b3a:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	bf14      	ite	ne
    2b42:	2301      	movne	r3, #1
    2b44:	2300      	moveq	r3, #0
    2b46:	b2db      	uxtb	r3, r3
    2b48:	f240 222b 	movw	r2, #555	; 0x22b
    2b4c:	4918      	ldr	r1, [pc, #96]	; (2bb0 <_usart_async_set_irq_state+0x84>)
    2b4e:	4618      	mov	r0, r3
    2b50:	4b18      	ldr	r3, [pc, #96]	; (2bb4 <_usart_async_set_irq_state+0x88>)
    2b52:	4798      	blx	r3

	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2b54:	78fb      	ldrb	r3, [r7, #3]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d002      	beq.n	2b60 <_usart_async_set_irq_state+0x34>
    2b5a:	78fb      	ldrb	r3, [r7, #3]
    2b5c:	2b02      	cmp	r3, #2
    2b5e:	d10e      	bne.n	2b7e <_usart_async_set_irq_state+0x52>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	699b      	ldr	r3, [r3, #24]
    2b64:	78ba      	ldrb	r2, [r7, #2]
    2b66:	4611      	mov	r1, r2
    2b68:	4618      	mov	r0, r3
    2b6a:	4b13      	ldr	r3, [pc, #76]	; (2bb8 <_usart_async_set_irq_state+0x8c>)
    2b6c:	4798      	blx	r3
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	699b      	ldr	r3, [r3, #24]
    2b72:	78ba      	ldrb	r2, [r7, #2]
    2b74:	4611      	mov	r1, r2
    2b76:	4618      	mov	r0, r3
    2b78:	4b10      	ldr	r3, [pc, #64]	; (2bbc <_usart_async_set_irq_state+0x90>)
    2b7a:	4798      	blx	r3
	} else if (USART_ASYNC_RX_DONE == type) {
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
	} else if (USART_ASYNC_ERROR == type) {
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    2b7c:	e014      	b.n	2ba8 <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_RX_DONE == type) {
    2b7e:	78fb      	ldrb	r3, [r7, #3]
    2b80:	2b01      	cmp	r3, #1
    2b82:	d107      	bne.n	2b94 <_usart_async_set_irq_state+0x68>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	699b      	ldr	r3, [r3, #24]
    2b88:	78ba      	ldrb	r2, [r7, #2]
    2b8a:	4611      	mov	r1, r2
    2b8c:	4618      	mov	r0, r3
    2b8e:	4b0c      	ldr	r3, [pc, #48]	; (2bc0 <_usart_async_set_irq_state+0x94>)
    2b90:	4798      	blx	r3
}
    2b92:	e009      	b.n	2ba8 <_usart_async_set_irq_state+0x7c>
	} else if (USART_ASYNC_ERROR == type) {
    2b94:	78fb      	ldrb	r3, [r7, #3]
    2b96:	2b03      	cmp	r3, #3
    2b98:	d106      	bne.n	2ba8 <_usart_async_set_irq_state+0x7c>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	699b      	ldr	r3, [r3, #24]
    2b9e:	78ba      	ldrb	r2, [r7, #2]
    2ba0:	4611      	mov	r1, r2
    2ba2:	4618      	mov	r0, r3
    2ba4:	4b07      	ldr	r3, [pc, #28]	; (2bc4 <_usart_async_set_irq_state+0x98>)
    2ba6:	4798      	blx	r3
}
    2ba8:	bf00      	nop
    2baa:	3708      	adds	r7, #8
    2bac:	46bd      	mov	sp, r7
    2bae:	bd80      	pop	{r7, pc}
    2bb0:	00005d34 	.word	0x00005d34
    2bb4:	000017fd 	.word	0x000017fd
    2bb8:	000026af 	.word	0x000026af
    2bbc:	0000273f 	.word	0x0000273f
    2bc0:	0000278b 	.word	0x0000278b
    2bc4:	000027bd 	.word	0x000027bd

00002bc8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2bc8:	b590      	push	{r4, r7, lr}
    2bca:	b085      	sub	sp, #20
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	699b      	ldr	r3, [r3, #24]
    2bd4:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2bd6:	68f8      	ldr	r0, [r7, #12]
    2bd8:	4b2f      	ldr	r3, [pc, #188]	; (2c98 <_sercom_usart_interrupt_handler+0xd0>)
    2bda:	4798      	blx	r3
    2bdc:	4603      	mov	r3, r0
    2bde:	2b00      	cmp	r3, #0
    2be0:	d00d      	beq.n	2bfe <_sercom_usart_interrupt_handler+0x36>
    2be2:	68f8      	ldr	r0, [r7, #12]
    2be4:	4b2d      	ldr	r3, [pc, #180]	; (2c9c <_sercom_usart_interrupt_handler+0xd4>)
    2be6:	4798      	blx	r3
    2be8:	4603      	mov	r3, r0
    2bea:	2b00      	cmp	r3, #0
    2bec:	d007      	beq.n	2bfe <_sercom_usart_interrupt_handler+0x36>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    2bee:	68f8      	ldr	r0, [r7, #12]
    2bf0:	4b2b      	ldr	r3, [pc, #172]	; (2ca0 <_sercom_usart_interrupt_handler+0xd8>)
    2bf2:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	6878      	ldr	r0, [r7, #4]
    2bfa:	4798      	blx	r3
    2bfc:	e049      	b.n	2c92 <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2bfe:	68f8      	ldr	r0, [r7, #12]
    2c00:	4b28      	ldr	r3, [pc, #160]	; (2ca4 <_sercom_usart_interrupt_handler+0xdc>)
    2c02:	4798      	blx	r3
    2c04:	4603      	mov	r3, r0
    2c06:	2b00      	cmp	r3, #0
    2c08:	d00d      	beq.n	2c26 <_sercom_usart_interrupt_handler+0x5e>
    2c0a:	68f8      	ldr	r0, [r7, #12]
    2c0c:	4b26      	ldr	r3, [pc, #152]	; (2ca8 <_sercom_usart_interrupt_handler+0xe0>)
    2c0e:	4798      	blx	r3
    2c10:	4603      	mov	r3, r0
    2c12:	2b00      	cmp	r3, #0
    2c14:	d007      	beq.n	2c26 <_sercom_usart_interrupt_handler+0x5e>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    2c16:	68f8      	ldr	r0, [r7, #12]
    2c18:	4b24      	ldr	r3, [pc, #144]	; (2cac <_sercom_usart_interrupt_handler+0xe4>)
    2c1a:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	689b      	ldr	r3, [r3, #8]
    2c20:	6878      	ldr	r0, [r7, #4]
    2c22:	4798      	blx	r3
    2c24:	e035      	b.n	2c92 <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2c26:	68f8      	ldr	r0, [r7, #12]
    2c28:	4b21      	ldr	r3, [pc, #132]	; (2cb0 <_sercom_usart_interrupt_handler+0xe8>)
    2c2a:	4798      	blx	r3
    2c2c:	4603      	mov	r3, r0
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d017      	beq.n	2c62 <_sercom_usart_interrupt_handler+0x9a>
		if (hri_sercomusart_read_STATUS_reg(hw)
    2c32:	68f8      	ldr	r0, [r7, #12]
    2c34:	4b1f      	ldr	r3, [pc, #124]	; (2cb4 <_sercom_usart_interrupt_handler+0xec>)
    2c36:	4798      	blx	r3
    2c38:	4603      	mov	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    2c3a:	f003 0337 	and.w	r3, r3, #55	; 0x37
		if (hri_sercomusart_read_STATUS_reg(hw)
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d004      	beq.n	2c4c <_sercom_usart_interrupt_handler+0x84>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    2c42:	21ff      	movs	r1, #255	; 0xff
    2c44:	68f8      	ldr	r0, [r7, #12]
    2c46:	4b1c      	ldr	r3, [pc, #112]	; (2cb8 <_sercom_usart_interrupt_handler+0xf0>)
    2c48:	4798      	blx	r3
			return;
    2c4a:	e022      	b.n	2c92 <_sercom_usart_interrupt_handler+0xca>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	685c      	ldr	r4, [r3, #4]
    2c50:	68f8      	ldr	r0, [r7, #12]
    2c52:	4b1a      	ldr	r3, [pc, #104]	; (2cbc <_sercom_usart_interrupt_handler+0xf4>)
    2c54:	4798      	blx	r3
    2c56:	4603      	mov	r3, r0
    2c58:	b2db      	uxtb	r3, r3
    2c5a:	4619      	mov	r1, r3
    2c5c:	6878      	ldr	r0, [r7, #4]
    2c5e:	47a0      	blx	r4
    2c60:	e017      	b.n	2c92 <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2c62:	68f8      	ldr	r0, [r7, #12]
    2c64:	4b16      	ldr	r3, [pc, #88]	; (2cc0 <_sercom_usart_interrupt_handler+0xf8>)
    2c66:	4798      	blx	r3
    2c68:	4603      	mov	r3, r0
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d011      	beq.n	2c92 <_sercom_usart_interrupt_handler+0xca>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    2c6e:	68f8      	ldr	r0, [r7, #12]
    2c70:	4b14      	ldr	r3, [pc, #80]	; (2cc4 <_sercom_usart_interrupt_handler+0xfc>)
    2c72:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	68db      	ldr	r3, [r3, #12]
    2c78:	6878      	ldr	r0, [r7, #4]
    2c7a:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    2c7c:	68f8      	ldr	r0, [r7, #12]
    2c7e:	4b0d      	ldr	r3, [pc, #52]	; (2cb4 <_sercom_usart_interrupt_handler+0xec>)
    2c80:	4798      	blx	r3
    2c82:	4603      	mov	r3, r0
    2c84:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    2c86:	68bb      	ldr	r3, [r7, #8]
    2c88:	b29b      	uxth	r3, r3
    2c8a:	4619      	mov	r1, r3
    2c8c:	68f8      	ldr	r0, [r7, #12]
    2c8e:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <_sercom_usart_interrupt_handler+0xf0>)
    2c90:	4798      	blx	r3
	}
}
    2c92:	3714      	adds	r7, #20
    2c94:	46bd      	mov	sp, r7
    2c96:	bd90      	pop	{r4, r7, pc}
    2c98:	000025ad 	.word	0x000025ad
    2c9c:	00002687 	.word	0x00002687
    2ca0:	000026e1 	.word	0x000026e1
    2ca4:	000025d5 	.word	0x000025d5
    2ca8:	00002715 	.word	0x00002715
    2cac:	00002771 	.word	0x00002771
    2cb0:	000025ff 	.word	0x000025ff
    2cb4:	00002983 	.word	0x00002983
    2cb8:	00002965 	.word	0x00002965
    2cbc:	0000292d 	.word	0x0000292d
    2cc0:	00002629 	.word	0x00002629
    2cc4:	00002653 	.word	0x00002653

00002cc8 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b084      	sub	sp, #16
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2cd0:	6878      	ldr	r0, [r7, #4]
    2cd2:	4b12      	ldr	r3, [pc, #72]	; (2d1c <_get_sercom_index+0x54>)
    2cd4:	4798      	blx	r3
    2cd6:	4603      	mov	r3, r0
    2cd8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2cda:	2300      	movs	r3, #0
    2cdc:	73fb      	strb	r3, [r7, #15]
    2cde:	e00f      	b.n	2d00 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    2ce0:	7bfa      	ldrb	r2, [r7, #15]
    2ce2:	490f      	ldr	r1, [pc, #60]	; (2d20 <_get_sercom_index+0x58>)
    2ce4:	4613      	mov	r3, r2
    2ce6:	005b      	lsls	r3, r3, #1
    2ce8:	4413      	add	r3, r2
    2cea:	00db      	lsls	r3, r3, #3
    2cec:	440b      	add	r3, r1
    2cee:	781b      	ldrb	r3, [r3, #0]
    2cf0:	7bba      	ldrb	r2, [r7, #14]
    2cf2:	429a      	cmp	r2, r3
    2cf4:	d101      	bne.n	2cfa <_get_sercom_index+0x32>
			return i;
    2cf6:	7bfb      	ldrb	r3, [r7, #15]
    2cf8:	e00c      	b.n	2d14 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2cfa:	7bfb      	ldrb	r3, [r7, #15]
    2cfc:	3301      	adds	r3, #1
    2cfe:	73fb      	strb	r3, [r7, #15]
    2d00:	7bfb      	ldrb	r3, [r7, #15]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d0ec      	beq.n	2ce0 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    2d06:	f240 226b 	movw	r2, #619	; 0x26b
    2d0a:	4906      	ldr	r1, [pc, #24]	; (2d24 <_get_sercom_index+0x5c>)
    2d0c:	2000      	movs	r0, #0
    2d0e:	4b06      	ldr	r3, [pc, #24]	; (2d28 <_get_sercom_index+0x60>)
    2d10:	4798      	blx	r3
	return 0;
    2d12:	2300      	movs	r3, #0
}
    2d14:	4618      	mov	r0, r3
    2d16:	3710      	adds	r7, #16
    2d18:	46bd      	mov	sp, r7
    2d1a:	bd80      	pop	{r7, pc}
    2d1c:	00002ad1 	.word	0x00002ad1
    2d20:	20000000 	.word	0x20000000
    2d24:	00005d34 	.word	0x00005d34
    2d28:	000017fd 	.word	0x000017fd

00002d2c <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    2d2c:	b480      	push	{r7}
    2d2e:	b083      	sub	sp, #12
    2d30:	af00      	add	r7, sp, #0
    2d32:	6078      	str	r0, [r7, #4]
    2d34:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM2) {
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	4a05      	ldr	r2, [pc, #20]	; (2d50 <_sercom_init_irq_param+0x24>)
    2d3a:	4293      	cmp	r3, r2
    2d3c:	d102      	bne.n	2d44 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    2d3e:	4a05      	ldr	r2, [pc, #20]	; (2d54 <_sercom_init_irq_param+0x28>)
    2d40:	683b      	ldr	r3, [r7, #0]
    2d42:	6013      	str	r3, [r2, #0]
	}
}
    2d44:	bf00      	nop
    2d46:	370c      	adds	r7, #12
    2d48:	46bd      	mov	sp, r7
    2d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d4e:	4770      	bx	lr
    2d50:	41012000 	.word	0x41012000
    2d54:	20000108 	.word	0x20000108

00002d58 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	b084      	sub	sp, #16
    2d5c:	af00      	add	r7, sp, #0
    2d5e:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    2d60:	6878      	ldr	r0, [r7, #4]
    2d62:	4b61      	ldr	r3, [pc, #388]	; (2ee8 <_usart_init+0x190>)
    2d64:	4798      	blx	r3
    2d66:	4603      	mov	r3, r0
    2d68:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2d6a:	2101      	movs	r1, #1
    2d6c:	6878      	ldr	r0, [r7, #4]
    2d6e:	4b5f      	ldr	r3, [pc, #380]	; (2eec <_usart_init+0x194>)
    2d70:	4798      	blx	r3
    2d72:	4603      	mov	r3, r0
    2d74:	f083 0301 	eor.w	r3, r3, #1
    2d78:	b2db      	uxtb	r3, r3
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d020      	beq.n	2dc0 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2d7e:	7bfa      	ldrb	r2, [r7, #15]
    2d80:	495b      	ldr	r1, [pc, #364]	; (2ef0 <_usart_init+0x198>)
    2d82:	4613      	mov	r3, r2
    2d84:	005b      	lsls	r3, r3, #1
    2d86:	4413      	add	r3, r2
    2d88:	00db      	lsls	r3, r3, #3
    2d8a:	440b      	add	r3, r1
    2d8c:	3304      	adds	r3, #4
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	f003 031c 	and.w	r3, r3, #28
    2d94:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2d96:	2102      	movs	r1, #2
    2d98:	6878      	ldr	r0, [r7, #4]
    2d9a:	4b56      	ldr	r3, [pc, #344]	; (2ef4 <_usart_init+0x19c>)
    2d9c:	4798      	blx	r3
    2d9e:	4603      	mov	r3, r0
    2da0:	2b00      	cmp	r3, #0
    2da2:	d006      	beq.n	2db2 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2da4:	6878      	ldr	r0, [r7, #4]
    2da6:	4b54      	ldr	r3, [pc, #336]	; (2ef8 <_usart_init+0x1a0>)
    2da8:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2daa:	2102      	movs	r1, #2
    2dac:	6878      	ldr	r0, [r7, #4]
    2dae:	4b53      	ldr	r3, [pc, #332]	; (2efc <_usart_init+0x1a4>)
    2db0:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2db2:	68bb      	ldr	r3, [r7, #8]
    2db4:	f043 0301 	orr.w	r3, r3, #1
    2db8:	4619      	mov	r1, r3
    2dba:	6878      	ldr	r0, [r7, #4]
    2dbc:	4b50      	ldr	r3, [pc, #320]	; (2f00 <_usart_init+0x1a8>)
    2dbe:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2dc0:	2101      	movs	r1, #1
    2dc2:	6878      	ldr	r0, [r7, #4]
    2dc4:	4b4d      	ldr	r3, [pc, #308]	; (2efc <_usart_init+0x1a4>)
    2dc6:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2dc8:	7bfa      	ldrb	r2, [r7, #15]
    2dca:	4949      	ldr	r1, [pc, #292]	; (2ef0 <_usart_init+0x198>)
    2dcc:	4613      	mov	r3, r2
    2dce:	005b      	lsls	r3, r3, #1
    2dd0:	4413      	add	r3, r2
    2dd2:	00db      	lsls	r3, r3, #3
    2dd4:	440b      	add	r3, r1
    2dd6:	3304      	adds	r3, #4
    2dd8:	681b      	ldr	r3, [r3, #0]
    2dda:	4619      	mov	r1, r3
    2ddc:	6878      	ldr	r0, [r7, #4]
    2dde:	4b48      	ldr	r3, [pc, #288]	; (2f00 <_usart_init+0x1a8>)
    2de0:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2de2:	7bfa      	ldrb	r2, [r7, #15]
    2de4:	4942      	ldr	r1, [pc, #264]	; (2ef0 <_usart_init+0x198>)
    2de6:	4613      	mov	r3, r2
    2de8:	005b      	lsls	r3, r3, #1
    2dea:	4413      	add	r3, r2
    2dec:	00db      	lsls	r3, r3, #3
    2dee:	440b      	add	r3, r1
    2df0:	3308      	adds	r3, #8
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	4619      	mov	r1, r3
    2df6:	6878      	ldr	r0, [r7, #4]
    2df8:	4b42      	ldr	r3, [pc, #264]	; (2f04 <_usart_init+0x1ac>)
    2dfa:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2dfc:	7bfa      	ldrb	r2, [r7, #15]
    2dfe:	493c      	ldr	r1, [pc, #240]	; (2ef0 <_usart_init+0x198>)
    2e00:	4613      	mov	r3, r2
    2e02:	005b      	lsls	r3, r3, #1
    2e04:	4413      	add	r3, r2
    2e06:	00db      	lsls	r3, r3, #3
    2e08:	440b      	add	r3, r1
    2e0a:	330c      	adds	r3, #12
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	4619      	mov	r1, r3
    2e10:	6878      	ldr	r0, [r7, #4]
    2e12:	4b3d      	ldr	r3, [pc, #244]	; (2f08 <_usart_init+0x1b0>)
    2e14:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2e16:	7bfa      	ldrb	r2, [r7, #15]
    2e18:	4935      	ldr	r1, [pc, #212]	; (2ef0 <_usart_init+0x198>)
    2e1a:	4613      	mov	r3, r2
    2e1c:	005b      	lsls	r3, r3, #1
    2e1e:	4413      	add	r3, r2
    2e20:	00db      	lsls	r3, r3, #3
    2e22:	440b      	add	r3, r1
    2e24:	3304      	adds	r3, #4
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d10c      	bne.n	2e4a <_usart_init+0xf2>
    2e30:	7bfa      	ldrb	r2, [r7, #15]
    2e32:	492f      	ldr	r1, [pc, #188]	; (2ef0 <_usart_init+0x198>)
    2e34:	4613      	mov	r3, r2
    2e36:	005b      	lsls	r3, r3, #1
    2e38:	4413      	add	r3, r2
    2e3a:	00db      	lsls	r3, r3, #3
    2e3c:	440b      	add	r3, r1
    2e3e:	3304      	adds	r3, #4
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    2e46:	2b00      	cmp	r3, #0
    2e48:	d022      	beq.n	2e90 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2e4a:	7bfa      	ldrb	r2, [r7, #15]
    2e4c:	4928      	ldr	r1, [pc, #160]	; (2ef0 <_usart_init+0x198>)
    2e4e:	4613      	mov	r3, r2
    2e50:	005b      	lsls	r3, r3, #1
    2e52:	4413      	add	r3, r2
    2e54:	00db      	lsls	r3, r3, #3
    2e56:	440b      	add	r3, r1
    2e58:	3310      	adds	r3, #16
    2e5a:	881b      	ldrh	r3, [r3, #0]
    2e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    2e60:	b299      	uxth	r1, r3
    2e62:	687a      	ldr	r2, [r7, #4]
    2e64:	8993      	ldrh	r3, [r2, #12]
    2e66:	f361 030c 	bfi	r3, r1, #0, #13
    2e6a:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2e6c:	7bfa      	ldrb	r2, [r7, #15]
    2e6e:	4920      	ldr	r1, [pc, #128]	; (2ef0 <_usart_init+0x198>)
    2e70:	4613      	mov	r3, r2
    2e72:	005b      	lsls	r3, r3, #1
    2e74:	4413      	add	r3, r2
    2e76:	00db      	lsls	r3, r3, #3
    2e78:	440b      	add	r3, r1
    2e7a:	3312      	adds	r3, #18
    2e7c:	781b      	ldrb	r3, [r3, #0]
    2e7e:	f003 0307 	and.w	r3, r3, #7
    2e82:	b2d9      	uxtb	r1, r3
    2e84:	687a      	ldr	r2, [r7, #4]
    2e86:	8993      	ldrh	r3, [r2, #12]
    2e88:	f361 334f 	bfi	r3, r1, #13, #3
    2e8c:	8193      	strh	r3, [r2, #12]
    2e8e:	e00c      	b.n	2eaa <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2e90:	7bfa      	ldrb	r2, [r7, #15]
    2e92:	4917      	ldr	r1, [pc, #92]	; (2ef0 <_usart_init+0x198>)
    2e94:	4613      	mov	r3, r2
    2e96:	005b      	lsls	r3, r3, #1
    2e98:	4413      	add	r3, r2
    2e9a:	00db      	lsls	r3, r3, #3
    2e9c:	440b      	add	r3, r1
    2e9e:	3310      	adds	r3, #16
    2ea0:	881b      	ldrh	r3, [r3, #0]
    2ea2:	4619      	mov	r1, r3
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	4b19      	ldr	r3, [pc, #100]	; (2f0c <_usart_init+0x1b4>)
    2ea8:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2eaa:	7bfa      	ldrb	r2, [r7, #15]
    2eac:	4910      	ldr	r1, [pc, #64]	; (2ef0 <_usart_init+0x198>)
    2eae:	4613      	mov	r3, r2
    2eb0:	005b      	lsls	r3, r3, #1
    2eb2:	4413      	add	r3, r2
    2eb4:	00db      	lsls	r3, r3, #3
    2eb6:	440b      	add	r3, r1
    2eb8:	3313      	adds	r3, #19
    2eba:	781b      	ldrb	r3, [r3, #0]
    2ebc:	4619      	mov	r1, r3
    2ebe:	6878      	ldr	r0, [r7, #4]
    2ec0:	4b13      	ldr	r3, [pc, #76]	; (2f10 <_usart_init+0x1b8>)
    2ec2:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2ec4:	7bfa      	ldrb	r2, [r7, #15]
    2ec6:	490a      	ldr	r1, [pc, #40]	; (2ef0 <_usart_init+0x198>)
    2ec8:	4613      	mov	r3, r2
    2eca:	005b      	lsls	r3, r3, #1
    2ecc:	4413      	add	r3, r2
    2ece:	00db      	lsls	r3, r3, #3
    2ed0:	440b      	add	r3, r1
    2ed2:	3314      	adds	r3, #20
    2ed4:	781b      	ldrb	r3, [r3, #0]
    2ed6:	4619      	mov	r1, r3
    2ed8:	6878      	ldr	r0, [r7, #4]
    2eda:	4b0e      	ldr	r3, [pc, #56]	; (2f14 <_usart_init+0x1bc>)
    2edc:	4798      	blx	r3

	return ERR_NONE;
    2ede:	2300      	movs	r3, #0
}
    2ee0:	4618      	mov	r0, r3
    2ee2:	3710      	adds	r7, #16
    2ee4:	46bd      	mov	sp, r7
    2ee6:	bd80      	pop	{r7, pc}
    2ee8:	00002cc9 	.word	0x00002cc9
    2eec:	00002585 	.word	0x00002585
    2ef0:	20000000 	.word	0x20000000
    2ef4:	00002841 	.word	0x00002841
    2ef8:	00002819 	.word	0x00002819
    2efc:	00002561 	.word	0x00002561
    2f00:	00002871 	.word	0x00002871
    2f04:	00002895 	.word	0x00002895
    2f08:	000028b9 	.word	0x000028b9
    2f0c:	000028d5 	.word	0x000028d5
    2f10:	000028f3 	.word	0x000028f3
    2f14:	00002945 	.word	0x00002945

00002f18 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2f20:	6878      	ldr	r0, [r7, #4]
    2f22:	4b05      	ldr	r3, [pc, #20]	; (2f38 <_sercom_get_irq_num+0x20>)
    2f24:	4798      	blx	r3
    2f26:	4603      	mov	r3, r0
    2f28:	009b      	lsls	r3, r3, #2
    2f2a:	b2db      	uxtb	r3, r3
    2f2c:	332e      	adds	r3, #46	; 0x2e
    2f2e:	b2db      	uxtb	r3, r3
}
    2f30:	4618      	mov	r0, r3
    2f32:	3708      	adds	r7, #8
    2f34:	46bd      	mov	sp, r7
    2f36:	bd80      	pop	{r7, pc}
    2f38:	00002ad1 	.word	0x00002ad1

00002f3c <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2f40:	4b03      	ldr	r3, [pc, #12]	; (2f50 <SERCOM2_0_Handler+0x14>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	4618      	mov	r0, r3
    2f46:	4b03      	ldr	r3, [pc, #12]	; (2f54 <SERCOM2_0_Handler+0x18>)
    2f48:	4798      	blx	r3
}
    2f4a:	bf00      	nop
    2f4c:	bd80      	pop	{r7, pc}
    2f4e:	bf00      	nop
    2f50:	20000108 	.word	0x20000108
    2f54:	00002bc9 	.word	0x00002bc9

00002f58 <SERCOM2_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2f5c:	4b03      	ldr	r3, [pc, #12]	; (2f6c <SERCOM2_1_Handler+0x14>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	4618      	mov	r0, r3
    2f62:	4b03      	ldr	r3, [pc, #12]	; (2f70 <SERCOM2_1_Handler+0x18>)
    2f64:	4798      	blx	r3
}
    2f66:	bf00      	nop
    2f68:	bd80      	pop	{r7, pc}
    2f6a:	bf00      	nop
    2f6c:	20000108 	.word	0x20000108
    2f70:	00002bc9 	.word	0x00002bc9

00002f74 <SERCOM2_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    2f74:	b580      	push	{r7, lr}
    2f76:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2f78:	4b03      	ldr	r3, [pc, #12]	; (2f88 <SERCOM2_2_Handler+0x14>)
    2f7a:	681b      	ldr	r3, [r3, #0]
    2f7c:	4618      	mov	r0, r3
    2f7e:	4b03      	ldr	r3, [pc, #12]	; (2f8c <SERCOM2_2_Handler+0x18>)
    2f80:	4798      	blx	r3
}
    2f82:	bf00      	nop
    2f84:	bd80      	pop	{r7, pc}
    2f86:	bf00      	nop
    2f88:	20000108 	.word	0x20000108
    2f8c:	00002bc9 	.word	0x00002bc9

00002f90 <SERCOM2_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    2f90:	b580      	push	{r7, lr}
    2f92:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2f94:	4b03      	ldr	r3, [pc, #12]	; (2fa4 <SERCOM2_3_Handler+0x14>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	4618      	mov	r0, r3
    2f9a:	4b03      	ldr	r3, [pc, #12]	; (2fa8 <SERCOM2_3_Handler+0x18>)
    2f9c:	4798      	blx	r3
}
    2f9e:	bf00      	nop
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	bf00      	nop
    2fa4:	20000108 	.word	0x20000108
    2fa8:	00002bc9 	.word	0x00002bc9

00002fac <__NVIC_EnableIRQ>:
{
    2fac:	b480      	push	{r7}
    2fae:	b083      	sub	sp, #12
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	4603      	mov	r3, r0
    2fb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	db0b      	blt.n	2fd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fbe:	4909      	ldr	r1, [pc, #36]	; (2fe4 <__NVIC_EnableIRQ+0x38>)
    2fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fc4:	095b      	lsrs	r3, r3, #5
    2fc6:	88fa      	ldrh	r2, [r7, #6]
    2fc8:	f002 021f 	and.w	r2, r2, #31
    2fcc:	2001      	movs	r0, #1
    2fce:	fa00 f202 	lsl.w	r2, r0, r2
    2fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2fd6:	bf00      	nop
    2fd8:	370c      	adds	r7, #12
    2fda:	46bd      	mov	sp, r7
    2fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fe0:	4770      	bx	lr
    2fe2:	bf00      	nop
    2fe4:	e000e100 	.word	0xe000e100

00002fe8 <__NVIC_DisableIRQ>:
{
    2fe8:	b480      	push	{r7}
    2fea:	b083      	sub	sp, #12
    2fec:	af00      	add	r7, sp, #0
    2fee:	4603      	mov	r3, r0
    2ff0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	db10      	blt.n	301c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ffa:	490b      	ldr	r1, [pc, #44]	; (3028 <__NVIC_DisableIRQ+0x40>)
    2ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3000:	095b      	lsrs	r3, r3, #5
    3002:	88fa      	ldrh	r2, [r7, #6]
    3004:	f002 021f 	and.w	r2, r2, #31
    3008:	2001      	movs	r0, #1
    300a:	fa00 f202 	lsl.w	r2, r0, r2
    300e:	3320      	adds	r3, #32
    3010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3018:	f3bf 8f6f 	isb	sy
}
    301c:	bf00      	nop
    301e:	370c      	adds	r7, #12
    3020:	46bd      	mov	sp, r7
    3022:	f85d 7b04 	ldr.w	r7, [sp], #4
    3026:	4770      	bx	lr
    3028:	e000e100 	.word	0xe000e100

0000302c <__NVIC_ClearPendingIRQ>:
{
    302c:	b480      	push	{r7}
    302e:	b083      	sub	sp, #12
    3030:	af00      	add	r7, sp, #0
    3032:	4603      	mov	r3, r0
    3034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    303a:	2b00      	cmp	r3, #0
    303c:	db0c      	blt.n	3058 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    303e:	4909      	ldr	r1, [pc, #36]	; (3064 <__NVIC_ClearPendingIRQ+0x38>)
    3040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3044:	095b      	lsrs	r3, r3, #5
    3046:	88fa      	ldrh	r2, [r7, #6]
    3048:	f002 021f 	and.w	r2, r2, #31
    304c:	2001      	movs	r0, #1
    304e:	fa00 f202 	lsl.w	r2, r0, r2
    3052:	3360      	adds	r3, #96	; 0x60
    3054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3058:	bf00      	nop
    305a:	370c      	adds	r7, #12
    305c:	46bd      	mov	sp, r7
    305e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3062:	4770      	bx	lr
    3064:	e000e100 	.word	0xe000e100

00003068 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    3068:	b480      	push	{r7}
    306a:	b083      	sub	sp, #12
    306c:	af00      	add	r7, sp, #0
    306e:	6078      	str	r0, [r7, #4]
    3070:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3072:	bf00      	nop
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	691a      	ldr	r2, [r3, #16]
    3078:	683b      	ldr	r3, [r7, #0]
    307a:	4013      	ands	r3, r2
    307c:	2b00      	cmp	r3, #0
    307e:	d1f9      	bne.n	3074 <hri_tc_wait_for_sync+0xc>
	};
}
    3080:	bf00      	nop
    3082:	370c      	adds	r7, #12
    3084:	46bd      	mov	sp, r7
    3086:	f85d 7b04 	ldr.w	r7, [sp], #4
    308a:	4770      	bx	lr

0000308c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    308c:	b480      	push	{r7}
    308e:	b083      	sub	sp, #12
    3090:	af00      	add	r7, sp, #0
    3092:	6078      	str	r0, [r7, #4]
    3094:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3096:	687b      	ldr	r3, [r7, #4]
    3098:	691a      	ldr	r2, [r3, #16]
    309a:	683b      	ldr	r3, [r7, #0]
    309c:	4013      	ands	r3, r2
    309e:	2b00      	cmp	r3, #0
    30a0:	bf14      	ite	ne
    30a2:	2301      	movne	r3, #1
    30a4:	2300      	moveq	r3, #0
    30a6:	b2db      	uxtb	r3, r3
}
    30a8:	4618      	mov	r0, r3
    30aa:	370c      	adds	r7, #12
    30ac:	46bd      	mov	sp, r7
    30ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    30b2:	4770      	bx	lr

000030b4 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    30b4:	b480      	push	{r7}
    30b6:	b083      	sub	sp, #12
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	7a9b      	ldrb	r3, [r3, #10]
    30c0:	b2db      	uxtb	r3, r3
    30c2:	f003 0301 	and.w	r3, r3, #1
    30c6:	2b00      	cmp	r3, #0
    30c8:	bf14      	ite	ne
    30ca:	2301      	movne	r3, #1
    30cc:	2300      	moveq	r3, #0
    30ce:	b2db      	uxtb	r3, r3
}
    30d0:	4618      	mov	r0, r3
    30d2:	370c      	adds	r7, #12
    30d4:	46bd      	mov	sp, r7
    30d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    30da:	4770      	bx	lr

000030dc <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    30dc:	b480      	push	{r7}
    30de:	b083      	sub	sp, #12
    30e0:	af00      	add	r7, sp, #0
    30e2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	2201      	movs	r2, #1
    30e8:	729a      	strb	r2, [r3, #10]
}
    30ea:	bf00      	nop
    30ec:	370c      	adds	r7, #12
    30ee:	46bd      	mov	sp, r7
    30f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30f4:	4770      	bx	lr

000030f6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    30f6:	b480      	push	{r7}
    30f8:	b083      	sub	sp, #12
    30fa:	af00      	add	r7, sp, #0
    30fc:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	2202      	movs	r2, #2
    3102:	729a      	strb	r2, [r3, #10]
}
    3104:	bf00      	nop
    3106:	370c      	adds	r7, #12
    3108:	46bd      	mov	sp, r7
    310a:	f85d 7b04 	ldr.w	r7, [sp], #4
    310e:	4770      	bx	lr

00003110 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    3110:	b480      	push	{r7}
    3112:	b083      	sub	sp, #12
    3114:	af00      	add	r7, sp, #0
    3116:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	2201      	movs	r2, #1
    311c:	725a      	strb	r2, [r3, #9]
}
    311e:	bf00      	nop
    3120:	370c      	adds	r7, #12
    3122:	46bd      	mov	sp, r7
    3124:	f85d 7b04 	ldr.w	r7, [sp], #4
    3128:	4770      	bx	lr

0000312a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    312a:	b480      	push	{r7}
    312c:	b083      	sub	sp, #12
    312e:	af00      	add	r7, sp, #0
    3130:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	7a5b      	ldrb	r3, [r3, #9]
    3136:	b2db      	uxtb	r3, r3
    3138:	085b      	lsrs	r3, r3, #1
    313a:	f003 0301 	and.w	r3, r3, #1
    313e:	2b00      	cmp	r3, #0
    3140:	bf14      	ite	ne
    3142:	2301      	movne	r3, #1
    3144:	2300      	moveq	r3, #0
    3146:	b2db      	uxtb	r3, r3
}
    3148:	4618      	mov	r0, r3
    314a:	370c      	adds	r7, #12
    314c:	46bd      	mov	sp, r7
    314e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3152:	4770      	bx	lr

00003154 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3154:	b580      	push	{r7, lr}
    3156:	b082      	sub	sp, #8
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	681b      	ldr	r3, [r3, #0]
    3160:	f043 0202 	orr.w	r2, r3, #2
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3168:	2103      	movs	r1, #3
    316a:	6878      	ldr	r0, [r7, #4]
    316c:	4b02      	ldr	r3, [pc, #8]	; (3178 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    316e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3170:	bf00      	nop
    3172:	3708      	adds	r7, #8
    3174:	46bd      	mov	sp, r7
    3176:	bd80      	pop	{r7, pc}
    3178:	00003069 	.word	0x00003069

0000317c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    317c:	b580      	push	{r7, lr}
    317e:	b084      	sub	sp, #16
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3184:	2103      	movs	r1, #3
    3186:	6878      	ldr	r0, [r7, #4]
    3188:	4b09      	ldr	r3, [pc, #36]	; (31b0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    318a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	085b      	lsrs	r3, r3, #1
    3196:	f003 0301 	and.w	r3, r3, #1
    319a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    319c:	68fb      	ldr	r3, [r7, #12]
    319e:	2b00      	cmp	r3, #0
    31a0:	bf14      	ite	ne
    31a2:	2301      	movne	r3, #1
    31a4:	2300      	moveq	r3, #0
    31a6:	b2db      	uxtb	r3, r3
}
    31a8:	4618      	mov	r0, r3
    31aa:	3710      	adds	r7, #16
    31ac:	46bd      	mov	sp, r7
    31ae:	bd80      	pop	{r7, pc}
    31b0:	00003069 	.word	0x00003069

000031b4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b082      	sub	sp, #8
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	f023 0202 	bic.w	r2, r3, #2
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    31c8:	2103      	movs	r1, #3
    31ca:	6878      	ldr	r0, [r7, #4]
    31cc:	4b02      	ldr	r3, [pc, #8]	; (31d8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    31ce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    31d0:	bf00      	nop
    31d2:	3708      	adds	r7, #8
    31d4:	46bd      	mov	sp, r7
    31d6:	bd80      	pop	{r7, pc}
    31d8:	00003069 	.word	0x00003069

000031dc <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b084      	sub	sp, #16
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    31e6:	2103      	movs	r1, #3
    31e8:	6878      	ldr	r0, [r7, #4]
    31ea:	4b07      	ldr	r3, [pc, #28]	; (3208 <hri_tc_get_CTRLA_reg+0x2c>)
    31ec:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    31f4:	68fa      	ldr	r2, [r7, #12]
    31f6:	683b      	ldr	r3, [r7, #0]
    31f8:	4013      	ands	r3, r2
    31fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    31fc:	68fb      	ldr	r3, [r7, #12]
}
    31fe:	4618      	mov	r0, r3
    3200:	3710      	adds	r7, #16
    3202:	46bd      	mov	sp, r7
    3204:	bd80      	pop	{r7, pc}
    3206:	bf00      	nop
    3208:	00003069 	.word	0x00003069

0000320c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    320c:	b580      	push	{r7, lr}
    320e:	b082      	sub	sp, #8
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
    3214:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	683a      	ldr	r2, [r7, #0]
    321a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    321c:	2103      	movs	r1, #3
    321e:	6878      	ldr	r0, [r7, #4]
    3220:	4b02      	ldr	r3, [pc, #8]	; (322c <hri_tc_write_CTRLA_reg+0x20>)
    3222:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3224:	bf00      	nop
    3226:	3708      	adds	r7, #8
    3228:	46bd      	mov	sp, r7
    322a:	bd80      	pop	{r7, pc}
    322c:	00003069 	.word	0x00003069

00003230 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    3230:	b480      	push	{r7}
    3232:	b083      	sub	sp, #12
    3234:	af00      	add	r7, sp, #0
    3236:	6078      	str	r0, [r7, #4]
    3238:	460b      	mov	r3, r1
    323a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	887a      	ldrh	r2, [r7, #2]
    3240:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    3242:	bf00      	nop
    3244:	370c      	adds	r7, #12
    3246:	46bd      	mov	sp, r7
    3248:	f85d 7b04 	ldr.w	r7, [sp], #4
    324c:	4770      	bx	lr

0000324e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    324e:	b480      	push	{r7}
    3250:	b083      	sub	sp, #12
    3252:	af00      	add	r7, sp, #0
    3254:	6078      	str	r0, [r7, #4]
    3256:	460b      	mov	r3, r1
    3258:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	78fa      	ldrb	r2, [r7, #3]
    325e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    3260:	bf00      	nop
    3262:	370c      	adds	r7, #12
    3264:	46bd      	mov	sp, r7
    3266:	f85d 7b04 	ldr.w	r7, [sp], #4
    326a:	4770      	bx	lr

0000326c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    326c:	b480      	push	{r7}
    326e:	b083      	sub	sp, #12
    3270:	af00      	add	r7, sp, #0
    3272:	6078      	str	r0, [r7, #4]
    3274:	460b      	mov	r3, r1
    3276:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	78fa      	ldrb	r2, [r7, #3]
    327c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    327e:	bf00      	nop
    3280:	370c      	adds	r7, #12
    3282:	46bd      	mov	sp, r7
    3284:	f85d 7b04 	ldr.w	r7, [sp], #4
    3288:	4770      	bx	lr
	...

0000328c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    328c:	b580      	push	{r7, lr}
    328e:	b082      	sub	sp, #8
    3290:	af00      	add	r7, sp, #0
    3292:	6078      	str	r0, [r7, #4]
    3294:	460b      	mov	r3, r1
    3296:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	78fa      	ldrb	r2, [r7, #3]
    329c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    329e:	2120      	movs	r1, #32
    32a0:	6878      	ldr	r0, [r7, #4]
    32a2:	4b03      	ldr	r3, [pc, #12]	; (32b0 <hri_tccount8_write_PER_reg+0x24>)
    32a4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    32a6:	bf00      	nop
    32a8:	3708      	adds	r7, #8
    32aa:	46bd      	mov	sp, r7
    32ac:	bd80      	pop	{r7, pc}
    32ae:	bf00      	nop
    32b0:	00003069 	.word	0x00003069

000032b4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b082      	sub	sp, #8
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    32bc:	460b      	mov	r3, r1
    32be:	70fb      	strb	r3, [r7, #3]
    32c0:	4613      	mov	r3, r2
    32c2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    32c4:	78fb      	ldrb	r3, [r7, #3]
    32c6:	687a      	ldr	r2, [r7, #4]
    32c8:	4413      	add	r3, r2
    32ca:	78ba      	ldrb	r2, [r7, #2]
    32cc:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    32ce:	21c0      	movs	r1, #192	; 0xc0
    32d0:	6878      	ldr	r0, [r7, #4]
    32d2:	4b03      	ldr	r3, [pc, #12]	; (32e0 <hri_tccount8_write_CC_reg+0x2c>)
    32d4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    32d6:	bf00      	nop
    32d8:	3708      	adds	r7, #8
    32da:	46bd      	mov	sp, r7
    32dc:	bd80      	pop	{r7, pc}
    32de:	bf00      	nop
    32e0:	00003069 	.word	0x00003069

000032e4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    32e4:	b580      	push	{r7, lr}
    32e6:	b082      	sub	sp, #8
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
    32ec:	460b      	mov	r3, r1
    32ee:	70fb      	strb	r3, [r7, #3]
    32f0:	4613      	mov	r3, r2
    32f2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    32f4:	78fb      	ldrb	r3, [r7, #3]
    32f6:	687a      	ldr	r2, [r7, #4]
    32f8:	330c      	adds	r3, #12
    32fa:	005b      	lsls	r3, r3, #1
    32fc:	4413      	add	r3, r2
    32fe:	883a      	ldrh	r2, [r7, #0]
    3300:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    3302:	21c0      	movs	r1, #192	; 0xc0
    3304:	6878      	ldr	r0, [r7, #4]
    3306:	4b03      	ldr	r3, [pc, #12]	; (3314 <hri_tccount16_write_CC_reg+0x30>)
    3308:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    330a:	bf00      	nop
    330c:	3708      	adds	r7, #8
    330e:	46bd      	mov	sp, r7
    3310:	bd80      	pop	{r7, pc}
    3312:	bf00      	nop
    3314:	00003069 	.word	0x00003069

00003318 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    3318:	b580      	push	{r7, lr}
    331a:	b084      	sub	sp, #16
    331c:	af00      	add	r7, sp, #0
    331e:	60f8      	str	r0, [r7, #12]
    3320:	460b      	mov	r3, r1
    3322:	607a      	str	r2, [r7, #4]
    3324:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3326:	7afb      	ldrb	r3, [r7, #11]
    3328:	68fa      	ldr	r2, [r7, #12]
    332a:	3306      	adds	r3, #6
    332c:	009b      	lsls	r3, r3, #2
    332e:	4413      	add	r3, r2
    3330:	687a      	ldr	r2, [r7, #4]
    3332:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    3334:	21c0      	movs	r1, #192	; 0xc0
    3336:	68f8      	ldr	r0, [r7, #12]
    3338:	4b02      	ldr	r3, [pc, #8]	; (3344 <hri_tccount32_write_CC_reg+0x2c>)
    333a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    333c:	bf00      	nop
    333e:	3710      	adds	r7, #16
    3340:	46bd      	mov	sp, r7
    3342:	bd80      	pop	{r7, pc}
    3344:	00003069 	.word	0x00003069

00003348 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    3348:	b580      	push	{r7, lr}
    334a:	b084      	sub	sp, #16
    334c:	af00      	add	r7, sp, #0
    334e:	6078      	str	r0, [r7, #4]
    3350:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    3352:	6838      	ldr	r0, [r7, #0]
    3354:	4b93      	ldr	r3, [pc, #588]	; (35a4 <_timer_init+0x25c>)
    3356:	4798      	blx	r3
    3358:	4603      	mov	r3, r0
    335a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	683a      	ldr	r2, [r7, #0]
    3360:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3362:	2293      	movs	r2, #147	; 0x93
    3364:	4990      	ldr	r1, [pc, #576]	; (35a8 <_timer_init+0x260>)
    3366:	2001      	movs	r0, #1
    3368:	4b90      	ldr	r3, [pc, #576]	; (35ac <_timer_init+0x264>)
    336a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    336c:	2101      	movs	r1, #1
    336e:	6838      	ldr	r0, [r7, #0]
    3370:	4b8f      	ldr	r3, [pc, #572]	; (35b0 <_timer_init+0x268>)
    3372:	4798      	blx	r3
    3374:	4603      	mov	r3, r0
    3376:	f083 0301 	eor.w	r3, r3, #1
    337a:	b2db      	uxtb	r3, r3
    337c:	2b00      	cmp	r3, #0
    337e:	d011      	beq.n	33a4 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3380:	2102      	movs	r1, #2
    3382:	6838      	ldr	r0, [r7, #0]
    3384:	4b8b      	ldr	r3, [pc, #556]	; (35b4 <_timer_init+0x26c>)
    3386:	4798      	blx	r3
    3388:	4603      	mov	r3, r0
    338a:	2b00      	cmp	r3, #0
    338c:	d006      	beq.n	339c <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    338e:	6838      	ldr	r0, [r7, #0]
    3390:	4b89      	ldr	r3, [pc, #548]	; (35b8 <_timer_init+0x270>)
    3392:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    3394:	2102      	movs	r1, #2
    3396:	6838      	ldr	r0, [r7, #0]
    3398:	4b88      	ldr	r3, [pc, #544]	; (35bc <_timer_init+0x274>)
    339a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    339c:	2101      	movs	r1, #1
    339e:	6838      	ldr	r0, [r7, #0]
    33a0:	4b87      	ldr	r3, [pc, #540]	; (35c0 <_timer_init+0x278>)
    33a2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    33a4:	2101      	movs	r1, #1
    33a6:	6838      	ldr	r0, [r7, #0]
    33a8:	4b84      	ldr	r3, [pc, #528]	; (35bc <_timer_init+0x274>)
    33aa:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    33ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33b0:	4984      	ldr	r1, [pc, #528]	; (35c4 <_timer_init+0x27c>)
    33b2:	4613      	mov	r3, r2
    33b4:	009b      	lsls	r3, r3, #2
    33b6:	4413      	add	r3, r2
    33b8:	009b      	lsls	r3, r3, #2
    33ba:	440b      	add	r3, r1
    33bc:	3304      	adds	r3, #4
    33be:	681b      	ldr	r3, [r3, #0]
    33c0:	4619      	mov	r1, r3
    33c2:	6838      	ldr	r0, [r7, #0]
    33c4:	4b7e      	ldr	r3, [pc, #504]	; (35c0 <_timer_init+0x278>)
    33c6:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    33c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33cc:	497d      	ldr	r1, [pc, #500]	; (35c4 <_timer_init+0x27c>)
    33ce:	4613      	mov	r3, r2
    33d0:	009b      	lsls	r3, r3, #2
    33d2:	4413      	add	r3, r2
    33d4:	009b      	lsls	r3, r3, #2
    33d6:	440b      	add	r3, r1
    33d8:	330a      	adds	r3, #10
    33da:	781b      	ldrb	r3, [r3, #0]
    33dc:	4619      	mov	r1, r3
    33de:	6838      	ldr	r0, [r7, #0]
    33e0:	4b79      	ldr	r3, [pc, #484]	; (35c8 <_timer_init+0x280>)
    33e2:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    33e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    33e8:	4976      	ldr	r1, [pc, #472]	; (35c4 <_timer_init+0x27c>)
    33ea:	4613      	mov	r3, r2
    33ec:	009b      	lsls	r3, r3, #2
    33ee:	4413      	add	r3, r2
    33f0:	009b      	lsls	r3, r3, #2
    33f2:	440b      	add	r3, r1
    33f4:	3308      	adds	r3, #8
    33f6:	881b      	ldrh	r3, [r3, #0]
    33f8:	4619      	mov	r1, r3
    33fa:	6838      	ldr	r0, [r7, #0]
    33fc:	4b73      	ldr	r3, [pc, #460]	; (35cc <_timer_init+0x284>)
    33fe:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    3400:	2101      	movs	r1, #1
    3402:	6838      	ldr	r0, [r7, #0]
    3404:	4b72      	ldr	r3, [pc, #456]	; (35d0 <_timer_init+0x288>)
    3406:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3408:	f997 200f 	ldrsb.w	r2, [r7, #15]
    340c:	496d      	ldr	r1, [pc, #436]	; (35c4 <_timer_init+0x27c>)
    340e:	4613      	mov	r3, r2
    3410:	009b      	lsls	r3, r3, #2
    3412:	4413      	add	r3, r2
    3414:	009b      	lsls	r3, r3, #2
    3416:	440b      	add	r3, r1
    3418:	3304      	adds	r3, #4
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	f003 030c 	and.w	r3, r3, #12
    3420:	2b08      	cmp	r3, #8
    3422:	d11e      	bne.n	3462 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3424:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3428:	4966      	ldr	r1, [pc, #408]	; (35c4 <_timer_init+0x27c>)
    342a:	4613      	mov	r3, r2
    342c:	009b      	lsls	r3, r3, #2
    342e:	4413      	add	r3, r2
    3430:	009b      	lsls	r3, r3, #2
    3432:	440b      	add	r3, r1
    3434:	330c      	adds	r3, #12
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	461a      	mov	r2, r3
    343a:	2100      	movs	r1, #0
    343c:	6838      	ldr	r0, [r7, #0]
    343e:	4b65      	ldr	r3, [pc, #404]	; (35d4 <_timer_init+0x28c>)
    3440:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3442:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3446:	495f      	ldr	r1, [pc, #380]	; (35c4 <_timer_init+0x27c>)
    3448:	4613      	mov	r3, r2
    344a:	009b      	lsls	r3, r3, #2
    344c:	4413      	add	r3, r2
    344e:	009b      	lsls	r3, r3, #2
    3450:	440b      	add	r3, r1
    3452:	3310      	adds	r3, #16
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	461a      	mov	r2, r3
    3458:	2101      	movs	r1, #1
    345a:	6838      	ldr	r0, [r7, #0]
    345c:	4b5d      	ldr	r3, [pc, #372]	; (35d4 <_timer_init+0x28c>)
    345e:	4798      	blx	r3
    3460:	e06a      	b.n	3538 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3462:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3466:	4957      	ldr	r1, [pc, #348]	; (35c4 <_timer_init+0x27c>)
    3468:	4613      	mov	r3, r2
    346a:	009b      	lsls	r3, r3, #2
    346c:	4413      	add	r3, r2
    346e:	009b      	lsls	r3, r3, #2
    3470:	440b      	add	r3, r1
    3472:	3304      	adds	r3, #4
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	f003 030c 	and.w	r3, r3, #12
    347a:	2b00      	cmp	r3, #0
    347c:	d120      	bne.n	34c0 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    347e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3482:	4950      	ldr	r1, [pc, #320]	; (35c4 <_timer_init+0x27c>)
    3484:	4613      	mov	r3, r2
    3486:	009b      	lsls	r3, r3, #2
    3488:	4413      	add	r3, r2
    348a:	009b      	lsls	r3, r3, #2
    348c:	440b      	add	r3, r1
    348e:	330c      	adds	r3, #12
    3490:	681b      	ldr	r3, [r3, #0]
    3492:	b29b      	uxth	r3, r3
    3494:	461a      	mov	r2, r3
    3496:	2100      	movs	r1, #0
    3498:	6838      	ldr	r0, [r7, #0]
    349a:	4b4f      	ldr	r3, [pc, #316]	; (35d8 <_timer_init+0x290>)
    349c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    349e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34a2:	4948      	ldr	r1, [pc, #288]	; (35c4 <_timer_init+0x27c>)
    34a4:	4613      	mov	r3, r2
    34a6:	009b      	lsls	r3, r3, #2
    34a8:	4413      	add	r3, r2
    34aa:	009b      	lsls	r3, r3, #2
    34ac:	440b      	add	r3, r1
    34ae:	3310      	adds	r3, #16
    34b0:	681b      	ldr	r3, [r3, #0]
    34b2:	b29b      	uxth	r3, r3
    34b4:	461a      	mov	r2, r3
    34b6:	2101      	movs	r1, #1
    34b8:	6838      	ldr	r0, [r7, #0]
    34ba:	4b47      	ldr	r3, [pc, #284]	; (35d8 <_timer_init+0x290>)
    34bc:	4798      	blx	r3
    34be:	e03b      	b.n	3538 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    34c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34c4:	493f      	ldr	r1, [pc, #252]	; (35c4 <_timer_init+0x27c>)
    34c6:	4613      	mov	r3, r2
    34c8:	009b      	lsls	r3, r3, #2
    34ca:	4413      	add	r3, r2
    34cc:	009b      	lsls	r3, r3, #2
    34ce:	440b      	add	r3, r1
    34d0:	3304      	adds	r3, #4
    34d2:	681b      	ldr	r3, [r3, #0]
    34d4:	f003 030c 	and.w	r3, r3, #12
    34d8:	2b04      	cmp	r3, #4
    34da:	d12d      	bne.n	3538 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    34dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34e0:	4938      	ldr	r1, [pc, #224]	; (35c4 <_timer_init+0x27c>)
    34e2:	4613      	mov	r3, r2
    34e4:	009b      	lsls	r3, r3, #2
    34e6:	4413      	add	r3, r2
    34e8:	009b      	lsls	r3, r3, #2
    34ea:	440b      	add	r3, r1
    34ec:	330c      	adds	r3, #12
    34ee:	681b      	ldr	r3, [r3, #0]
    34f0:	b2db      	uxtb	r3, r3
    34f2:	461a      	mov	r2, r3
    34f4:	2100      	movs	r1, #0
    34f6:	6838      	ldr	r0, [r7, #0]
    34f8:	4b38      	ldr	r3, [pc, #224]	; (35dc <_timer_init+0x294>)
    34fa:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    34fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3500:	4930      	ldr	r1, [pc, #192]	; (35c4 <_timer_init+0x27c>)
    3502:	4613      	mov	r3, r2
    3504:	009b      	lsls	r3, r3, #2
    3506:	4413      	add	r3, r2
    3508:	009b      	lsls	r3, r3, #2
    350a:	440b      	add	r3, r1
    350c:	3310      	adds	r3, #16
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	b2db      	uxtb	r3, r3
    3512:	461a      	mov	r2, r3
    3514:	2101      	movs	r1, #1
    3516:	6838      	ldr	r0, [r7, #0]
    3518:	4b30      	ldr	r3, [pc, #192]	; (35dc <_timer_init+0x294>)
    351a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    351c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3520:	4928      	ldr	r1, [pc, #160]	; (35c4 <_timer_init+0x27c>)
    3522:	4613      	mov	r3, r2
    3524:	009b      	lsls	r3, r3, #2
    3526:	4413      	add	r3, r2
    3528:	009b      	lsls	r3, r3, #2
    352a:	440b      	add	r3, r1
    352c:	330b      	adds	r3, #11
    352e:	781b      	ldrb	r3, [r3, #0]
    3530:	4619      	mov	r1, r3
    3532:	6838      	ldr	r0, [r7, #0]
    3534:	4b2a      	ldr	r3, [pc, #168]	; (35e0 <_timer_init+0x298>)
    3536:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    3538:	6838      	ldr	r0, [r7, #0]
    353a:	4b2a      	ldr	r3, [pc, #168]	; (35e4 <_timer_init+0x29c>)
    353c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    353e:	6879      	ldr	r1, [r7, #4]
    3540:	6838      	ldr	r0, [r7, #0]
    3542:	4b29      	ldr	r3, [pc, #164]	; (35e8 <_timer_init+0x2a0>)
    3544:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3546:	f997 200f 	ldrsb.w	r2, [r7, #15]
    354a:	491e      	ldr	r1, [pc, #120]	; (35c4 <_timer_init+0x27c>)
    354c:	4613      	mov	r3, r2
    354e:	009b      	lsls	r3, r3, #2
    3550:	4413      	add	r3, r2
    3552:	009b      	lsls	r3, r3, #2
    3554:	440b      	add	r3, r1
    3556:	3302      	adds	r3, #2
    3558:	f9b3 3000 	ldrsh.w	r3, [r3]
    355c:	4618      	mov	r0, r3
    355e:	4b23      	ldr	r3, [pc, #140]	; (35ec <_timer_init+0x2a4>)
    3560:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3562:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3566:	4917      	ldr	r1, [pc, #92]	; (35c4 <_timer_init+0x27c>)
    3568:	4613      	mov	r3, r2
    356a:	009b      	lsls	r3, r3, #2
    356c:	4413      	add	r3, r2
    356e:	009b      	lsls	r3, r3, #2
    3570:	440b      	add	r3, r1
    3572:	3302      	adds	r3, #2
    3574:	f9b3 3000 	ldrsh.w	r3, [r3]
    3578:	4618      	mov	r0, r3
    357a:	4b1d      	ldr	r3, [pc, #116]	; (35f0 <_timer_init+0x2a8>)
    357c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    357e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3582:	4910      	ldr	r1, [pc, #64]	; (35c4 <_timer_init+0x27c>)
    3584:	4613      	mov	r3, r2
    3586:	009b      	lsls	r3, r3, #2
    3588:	4413      	add	r3, r2
    358a:	009b      	lsls	r3, r3, #2
    358c:	440b      	add	r3, r1
    358e:	3302      	adds	r3, #2
    3590:	f9b3 3000 	ldrsh.w	r3, [r3]
    3594:	4618      	mov	r0, r3
    3596:	4b17      	ldr	r3, [pc, #92]	; (35f4 <_timer_init+0x2ac>)
    3598:	4798      	blx	r3

	return ERR_NONE;
    359a:	2300      	movs	r3, #0
}
    359c:	4618      	mov	r0, r3
    359e:	3710      	adds	r7, #16
    35a0:	46bd      	mov	sp, r7
    35a2:	bd80      	pop	{r7, pc}
    35a4:	00003b29 	.word	0x00003b29
    35a8:	00005d84 	.word	0x00005d84
    35ac:	000017fd 	.word	0x000017fd
    35b0:	0000308d 	.word	0x0000308d
    35b4:	000031dd 	.word	0x000031dd
    35b8:	000031b5 	.word	0x000031b5
    35bc:	00003069 	.word	0x00003069
    35c0:	0000320d 	.word	0x0000320d
    35c4:	20000018 	.word	0x20000018
    35c8:	0000326d 	.word	0x0000326d
    35cc:	00003231 	.word	0x00003231
    35d0:	0000324f 	.word	0x0000324f
    35d4:	00003319 	.word	0x00003319
    35d8:	000032e5 	.word	0x000032e5
    35dc:	000032b5 	.word	0x000032b5
    35e0:	0000328d 	.word	0x0000328d
    35e4:	00003111 	.word	0x00003111
    35e8:	00003b91 	.word	0x00003b91
    35ec:	00002fe9 	.word	0x00002fe9
    35f0:	0000302d 	.word	0x0000302d
    35f4:	00002fad 	.word	0x00002fad

000035f8 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    35f8:	b580      	push	{r7, lr}
    35fa:	b084      	sub	sp, #16
    35fc:	af00      	add	r7, sp, #0
    35fe:	6078      	str	r0, [r7, #4]
    3600:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    3602:	6838      	ldr	r0, [r7, #0]
    3604:	4b73      	ldr	r3, [pc, #460]	; (37d4 <_pwm_init+0x1dc>)
    3606:	4798      	blx	r3
    3608:	4603      	mov	r3, r0
    360a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	683a      	ldr	r2, [r7, #0]
    3610:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3612:	2101      	movs	r1, #1
    3614:	6838      	ldr	r0, [r7, #0]
    3616:	4b70      	ldr	r3, [pc, #448]	; (37d8 <_pwm_init+0x1e0>)
    3618:	4798      	blx	r3
    361a:	4603      	mov	r3, r0
    361c:	f083 0301 	eor.w	r3, r3, #1
    3620:	b2db      	uxtb	r3, r3
    3622:	2b00      	cmp	r3, #0
    3624:	d011      	beq.n	364a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3626:	2102      	movs	r1, #2
    3628:	6838      	ldr	r0, [r7, #0]
    362a:	4b6c      	ldr	r3, [pc, #432]	; (37dc <_pwm_init+0x1e4>)
    362c:	4798      	blx	r3
    362e:	4603      	mov	r3, r0
    3630:	2b00      	cmp	r3, #0
    3632:	d006      	beq.n	3642 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    3634:	6838      	ldr	r0, [r7, #0]
    3636:	4b6a      	ldr	r3, [pc, #424]	; (37e0 <_pwm_init+0x1e8>)
    3638:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    363a:	2102      	movs	r1, #2
    363c:	6838      	ldr	r0, [r7, #0]
    363e:	4b69      	ldr	r3, [pc, #420]	; (37e4 <_pwm_init+0x1ec>)
    3640:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    3642:	2101      	movs	r1, #1
    3644:	6838      	ldr	r0, [r7, #0]
    3646:	4b68      	ldr	r3, [pc, #416]	; (37e8 <_pwm_init+0x1f0>)
    3648:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    364a:	2101      	movs	r1, #1
    364c:	6838      	ldr	r0, [r7, #0]
    364e:	4b65      	ldr	r3, [pc, #404]	; (37e4 <_pwm_init+0x1ec>)
    3650:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3652:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3656:	4965      	ldr	r1, [pc, #404]	; (37ec <_pwm_init+0x1f4>)
    3658:	4613      	mov	r3, r2
    365a:	009b      	lsls	r3, r3, #2
    365c:	4413      	add	r3, r2
    365e:	009b      	lsls	r3, r3, #2
    3660:	440b      	add	r3, r1
    3662:	3304      	adds	r3, #4
    3664:	681b      	ldr	r3, [r3, #0]
    3666:	4619      	mov	r1, r3
    3668:	6838      	ldr	r0, [r7, #0]
    366a:	4b5f      	ldr	r3, [pc, #380]	; (37e8 <_pwm_init+0x1f0>)
    366c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    366e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3672:	495e      	ldr	r1, [pc, #376]	; (37ec <_pwm_init+0x1f4>)
    3674:	4613      	mov	r3, r2
    3676:	009b      	lsls	r3, r3, #2
    3678:	4413      	add	r3, r2
    367a:	009b      	lsls	r3, r3, #2
    367c:	440b      	add	r3, r1
    367e:	330a      	adds	r3, #10
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	4619      	mov	r1, r3
    3684:	6838      	ldr	r0, [r7, #0]
    3686:	4b5a      	ldr	r3, [pc, #360]	; (37f0 <_pwm_init+0x1f8>)
    3688:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    368a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    368e:	4957      	ldr	r1, [pc, #348]	; (37ec <_pwm_init+0x1f4>)
    3690:	4613      	mov	r3, r2
    3692:	009b      	lsls	r3, r3, #2
    3694:	4413      	add	r3, r2
    3696:	009b      	lsls	r3, r3, #2
    3698:	440b      	add	r3, r1
    369a:	3308      	adds	r3, #8
    369c:	881b      	ldrh	r3, [r3, #0]
    369e:	4619      	mov	r1, r3
    36a0:	6838      	ldr	r0, [r7, #0]
    36a2:	4b54      	ldr	r3, [pc, #336]	; (37f4 <_pwm_init+0x1fc>)
    36a4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    36a6:	2103      	movs	r1, #3
    36a8:	6838      	ldr	r0, [r7, #0]
    36aa:	4b53      	ldr	r3, [pc, #332]	; (37f8 <_pwm_init+0x200>)
    36ac:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    36ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    36b2:	494e      	ldr	r1, [pc, #312]	; (37ec <_pwm_init+0x1f4>)
    36b4:	4613      	mov	r3, r2
    36b6:	009b      	lsls	r3, r3, #2
    36b8:	4413      	add	r3, r2
    36ba:	009b      	lsls	r3, r3, #2
    36bc:	440b      	add	r3, r1
    36be:	3304      	adds	r3, #4
    36c0:	681b      	ldr	r3, [r3, #0]
    36c2:	f003 030c 	and.w	r3, r3, #12
    36c6:	2b08      	cmp	r3, #8
    36c8:	d11e      	bne.n	3708 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    36ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    36ce:	4947      	ldr	r1, [pc, #284]	; (37ec <_pwm_init+0x1f4>)
    36d0:	4613      	mov	r3, r2
    36d2:	009b      	lsls	r3, r3, #2
    36d4:	4413      	add	r3, r2
    36d6:	009b      	lsls	r3, r3, #2
    36d8:	440b      	add	r3, r1
    36da:	330c      	adds	r3, #12
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	461a      	mov	r2, r3
    36e0:	2100      	movs	r1, #0
    36e2:	6838      	ldr	r0, [r7, #0]
    36e4:	4b45      	ldr	r3, [pc, #276]	; (37fc <_pwm_init+0x204>)
    36e6:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    36e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    36ec:	493f      	ldr	r1, [pc, #252]	; (37ec <_pwm_init+0x1f4>)
    36ee:	4613      	mov	r3, r2
    36f0:	009b      	lsls	r3, r3, #2
    36f2:	4413      	add	r3, r2
    36f4:	009b      	lsls	r3, r3, #2
    36f6:	440b      	add	r3, r1
    36f8:	3310      	adds	r3, #16
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	461a      	mov	r2, r3
    36fe:	2101      	movs	r1, #1
    3700:	6838      	ldr	r0, [r7, #0]
    3702:	4b3e      	ldr	r3, [pc, #248]	; (37fc <_pwm_init+0x204>)
    3704:	4798      	blx	r3
    3706:	e031      	b.n	376c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3708:	f997 200f 	ldrsb.w	r2, [r7, #15]
    370c:	4937      	ldr	r1, [pc, #220]	; (37ec <_pwm_init+0x1f4>)
    370e:	4613      	mov	r3, r2
    3710:	009b      	lsls	r3, r3, #2
    3712:	4413      	add	r3, r2
    3714:	009b      	lsls	r3, r3, #2
    3716:	440b      	add	r3, r1
    3718:	3304      	adds	r3, #4
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	f003 030c 	and.w	r3, r3, #12
    3720:	2b00      	cmp	r3, #0
    3722:	d120      	bne.n	3766 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3724:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3728:	4930      	ldr	r1, [pc, #192]	; (37ec <_pwm_init+0x1f4>)
    372a:	4613      	mov	r3, r2
    372c:	009b      	lsls	r3, r3, #2
    372e:	4413      	add	r3, r2
    3730:	009b      	lsls	r3, r3, #2
    3732:	440b      	add	r3, r1
    3734:	330c      	adds	r3, #12
    3736:	681b      	ldr	r3, [r3, #0]
    3738:	b29b      	uxth	r3, r3
    373a:	461a      	mov	r2, r3
    373c:	2100      	movs	r1, #0
    373e:	6838      	ldr	r0, [r7, #0]
    3740:	4b2f      	ldr	r3, [pc, #188]	; (3800 <_pwm_init+0x208>)
    3742:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3744:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3748:	4928      	ldr	r1, [pc, #160]	; (37ec <_pwm_init+0x1f4>)
    374a:	4613      	mov	r3, r2
    374c:	009b      	lsls	r3, r3, #2
    374e:	4413      	add	r3, r2
    3750:	009b      	lsls	r3, r3, #2
    3752:	440b      	add	r3, r1
    3754:	3310      	adds	r3, #16
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	b29b      	uxth	r3, r3
    375a:	461a      	mov	r2, r3
    375c:	2101      	movs	r1, #1
    375e:	6838      	ldr	r0, [r7, #0]
    3760:	4b27      	ldr	r3, [pc, #156]	; (3800 <_pwm_init+0x208>)
    3762:	4798      	blx	r3
    3764:	e002      	b.n	376c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    3766:	f04f 33ff 	mov.w	r3, #4294967295
    376a:	e02e      	b.n	37ca <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    376c:	6879      	ldr	r1, [r7, #4]
    376e:	6838      	ldr	r0, [r7, #0]
    3770:	4b24      	ldr	r3, [pc, #144]	; (3804 <_pwm_init+0x20c>)
    3772:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3774:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3778:	491c      	ldr	r1, [pc, #112]	; (37ec <_pwm_init+0x1f4>)
    377a:	4613      	mov	r3, r2
    377c:	009b      	lsls	r3, r3, #2
    377e:	4413      	add	r3, r2
    3780:	009b      	lsls	r3, r3, #2
    3782:	440b      	add	r3, r1
    3784:	3302      	adds	r3, #2
    3786:	f9b3 3000 	ldrsh.w	r3, [r3]
    378a:	4618      	mov	r0, r3
    378c:	4b1e      	ldr	r3, [pc, #120]	; (3808 <_pwm_init+0x210>)
    378e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3790:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3794:	4915      	ldr	r1, [pc, #84]	; (37ec <_pwm_init+0x1f4>)
    3796:	4613      	mov	r3, r2
    3798:	009b      	lsls	r3, r3, #2
    379a:	4413      	add	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	440b      	add	r3, r1
    37a0:	3302      	adds	r3, #2
    37a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    37a6:	4618      	mov	r0, r3
    37a8:	4b18      	ldr	r3, [pc, #96]	; (380c <_pwm_init+0x214>)
    37aa:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    37ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    37b0:	490e      	ldr	r1, [pc, #56]	; (37ec <_pwm_init+0x1f4>)
    37b2:	4613      	mov	r3, r2
    37b4:	009b      	lsls	r3, r3, #2
    37b6:	4413      	add	r3, r2
    37b8:	009b      	lsls	r3, r3, #2
    37ba:	440b      	add	r3, r1
    37bc:	3302      	adds	r3, #2
    37be:	f9b3 3000 	ldrsh.w	r3, [r3]
    37c2:	4618      	mov	r0, r3
    37c4:	4b12      	ldr	r3, [pc, #72]	; (3810 <_pwm_init+0x218>)
    37c6:	4798      	blx	r3

	return 0;
    37c8:	2300      	movs	r3, #0
}
    37ca:	4618      	mov	r0, r3
    37cc:	3710      	adds	r7, #16
    37ce:	46bd      	mov	sp, r7
    37d0:	bd80      	pop	{r7, pc}
    37d2:	bf00      	nop
    37d4:	00003b29 	.word	0x00003b29
    37d8:	0000308d 	.word	0x0000308d
    37dc:	000031dd 	.word	0x000031dd
    37e0:	000031b5 	.word	0x000031b5
    37e4:	00003069 	.word	0x00003069
    37e8:	0000320d 	.word	0x0000320d
    37ec:	20000018 	.word	0x20000018
    37f0:	0000326d 	.word	0x0000326d
    37f4:	00003231 	.word	0x00003231
    37f8:	0000324f 	.word	0x0000324f
    37fc:	00003319 	.word	0x00003319
    3800:	000032e5 	.word	0x000032e5
    3804:	00003b91 	.word	0x00003b91
    3808:	00002fe9 	.word	0x00002fe9
    380c:	0000302d 	.word	0x0000302d
    3810:	00002fad 	.word	0x00002fad

00003814 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    3814:	b580      	push	{r7, lr}
    3816:	b082      	sub	sp, #8
    3818:	af00      	add	r7, sp, #0
    381a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	68db      	ldr	r3, [r3, #12]
    3820:	4618      	mov	r0, r3
    3822:	4b03      	ldr	r3, [pc, #12]	; (3830 <_timer_start+0x1c>)
    3824:	4798      	blx	r3
}
    3826:	bf00      	nop
    3828:	3708      	adds	r7, #8
    382a:	46bd      	mov	sp, r7
    382c:	bd80      	pop	{r7, pc}
    382e:	bf00      	nop
    3830:	00003155 	.word	0x00003155

00003834 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    3834:	b580      	push	{r7, lr}
    3836:	b082      	sub	sp, #8
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	691b      	ldr	r3, [r3, #16]
    3840:	4618      	mov	r0, r3
    3842:	4b03      	ldr	r3, [pc, #12]	; (3850 <_pwm_enable+0x1c>)
    3844:	4798      	blx	r3
}
    3846:	bf00      	nop
    3848:	3708      	adds	r7, #8
    384a:	46bd      	mov	sp, r7
    384c:	bd80      	pop	{r7, pc}
    384e:	bf00      	nop
    3850:	00003155 	.word	0x00003155

00003854 <_pwm_disable>:
}
/**
 * \brief Stop PWM
 */
void _pwm_disable(struct _pwm_device *const device)
{
    3854:	b580      	push	{r7, lr}
    3856:	b082      	sub	sp, #8
    3858:	af00      	add	r7, sp, #0
    385a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    385c:	687b      	ldr	r3, [r7, #4]
    385e:	691b      	ldr	r3, [r3, #16]
    3860:	4618      	mov	r0, r3
    3862:	4b03      	ldr	r3, [pc, #12]	; (3870 <_pwm_disable+0x1c>)
    3864:	4798      	blx	r3
}
    3866:	bf00      	nop
    3868:	3708      	adds	r7, #8
    386a:	46bd      	mov	sp, r7
    386c:	bd80      	pop	{r7, pc}
    386e:	bf00      	nop
    3870:	000031b5 	.word	0x000031b5

00003874 <_pwm_set_param>:
}
/**
 * \brief Set PWM parameter
 */
void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    3874:	b580      	push	{r7, lr}
    3876:	b086      	sub	sp, #24
    3878:	af00      	add	r7, sp, #0
    387a:	60f8      	str	r0, [r7, #12]
    387c:	60b9      	str	r1, [r7, #8]
    387e:	607a      	str	r2, [r7, #4]
	void *const hw = device->hw;
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	691b      	ldr	r3, [r3, #16]
    3884:	617b      	str	r3, [r7, #20]
	int8_t      i  = get_tc_index(hw);
    3886:	6978      	ldr	r0, [r7, #20]
    3888:	4b35      	ldr	r3, [pc, #212]	; (3960 <_pwm_set_param+0xec>)
    388a:	4798      	blx	r3
    388c:	4603      	mov	r3, r0
    388e:	74fb      	strb	r3, [r7, #19]

	_tcs[i].cc0 = period;
    3890:	f997 2013 	ldrsb.w	r2, [r7, #19]
    3894:	4933      	ldr	r1, [pc, #204]	; (3964 <_pwm_set_param+0xf0>)
    3896:	4613      	mov	r3, r2
    3898:	009b      	lsls	r3, r3, #2
    389a:	4413      	add	r3, r2
    389c:	009b      	lsls	r3, r3, #2
    389e:	440b      	add	r3, r1
    38a0:	330c      	adds	r3, #12
    38a2:	68ba      	ldr	r2, [r7, #8]
    38a4:	601a      	str	r2, [r3, #0]
	_tcs[i].cc1 = duty_cycle;
    38a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
    38aa:	492e      	ldr	r1, [pc, #184]	; (3964 <_pwm_set_param+0xf0>)
    38ac:	4613      	mov	r3, r2
    38ae:	009b      	lsls	r3, r3, #2
    38b0:	4413      	add	r3, r2
    38b2:	009b      	lsls	r3, r3, #2
    38b4:	440b      	add	r3, r1
    38b6:	3310      	adds	r3, #16
    38b8:	687a      	ldr	r2, [r7, #4]
    38ba:	601a      	str	r2, [r3, #0]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    38bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
    38c0:	4928      	ldr	r1, [pc, #160]	; (3964 <_pwm_set_param+0xf0>)
    38c2:	4613      	mov	r3, r2
    38c4:	009b      	lsls	r3, r3, #2
    38c6:	4413      	add	r3, r2
    38c8:	009b      	lsls	r3, r3, #2
    38ca:	440b      	add	r3, r1
    38cc:	3304      	adds	r3, #4
    38ce:	681b      	ldr	r3, [r3, #0]
    38d0:	f003 030c 	and.w	r3, r3, #12
    38d4:	2b08      	cmp	r3, #8
    38d6:	d11e      	bne.n	3916 <_pwm_set_param+0xa2>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    38d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
    38dc:	4921      	ldr	r1, [pc, #132]	; (3964 <_pwm_set_param+0xf0>)
    38de:	4613      	mov	r3, r2
    38e0:	009b      	lsls	r3, r3, #2
    38e2:	4413      	add	r3, r2
    38e4:	009b      	lsls	r3, r3, #2
    38e6:	440b      	add	r3, r1
    38e8:	330c      	adds	r3, #12
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	461a      	mov	r2, r3
    38ee:	2100      	movs	r1, #0
    38f0:	6978      	ldr	r0, [r7, #20]
    38f2:	4b1d      	ldr	r3, [pc, #116]	; (3968 <_pwm_set_param+0xf4>)
    38f4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    38f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
    38fa:	491a      	ldr	r1, [pc, #104]	; (3964 <_pwm_set_param+0xf0>)
    38fc:	4613      	mov	r3, r2
    38fe:	009b      	lsls	r3, r3, #2
    3900:	4413      	add	r3, r2
    3902:	009b      	lsls	r3, r3, #2
    3904:	440b      	add	r3, r1
    3906:	3310      	adds	r3, #16
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	461a      	mov	r2, r3
    390c:	2101      	movs	r1, #1
    390e:	6978      	ldr	r0, [r7, #20]
    3910:	4b15      	ldr	r3, [pc, #84]	; (3968 <_pwm_set_param+0xf4>)
    3912:	4798      	blx	r3
	} else {
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
	}
}
    3914:	e01f      	b.n	3956 <_pwm_set_param+0xe2>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    3916:	f997 2013 	ldrsb.w	r2, [r7, #19]
    391a:	4912      	ldr	r1, [pc, #72]	; (3964 <_pwm_set_param+0xf0>)
    391c:	4613      	mov	r3, r2
    391e:	009b      	lsls	r3, r3, #2
    3920:	4413      	add	r3, r2
    3922:	009b      	lsls	r3, r3, #2
    3924:	440b      	add	r3, r1
    3926:	330c      	adds	r3, #12
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	b29b      	uxth	r3, r3
    392c:	461a      	mov	r2, r3
    392e:	2100      	movs	r1, #0
    3930:	6978      	ldr	r0, [r7, #20]
    3932:	4b0e      	ldr	r3, [pc, #56]	; (396c <_pwm_set_param+0xf8>)
    3934:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    3936:	f997 2013 	ldrsb.w	r2, [r7, #19]
    393a:	490a      	ldr	r1, [pc, #40]	; (3964 <_pwm_set_param+0xf0>)
    393c:	4613      	mov	r3, r2
    393e:	009b      	lsls	r3, r3, #2
    3940:	4413      	add	r3, r2
    3942:	009b      	lsls	r3, r3, #2
    3944:	440b      	add	r3, r1
    3946:	3310      	adds	r3, #16
    3948:	681b      	ldr	r3, [r3, #0]
    394a:	b29b      	uxth	r3, r3
    394c:	461a      	mov	r2, r3
    394e:	2101      	movs	r1, #1
    3950:	6978      	ldr	r0, [r7, #20]
    3952:	4b06      	ldr	r3, [pc, #24]	; (396c <_pwm_set_param+0xf8>)
    3954:	4798      	blx	r3
}
    3956:	bf00      	nop
    3958:	3718      	adds	r7, #24
    395a:	46bd      	mov	sp, r7
    395c:	bd80      	pop	{r7, pc}
    395e:	bf00      	nop
    3960:	00003b29 	.word	0x00003b29
    3964:	20000018 	.word	0x20000018
    3968:	00003319 	.word	0x00003319
    396c:	000032e5 	.word	0x000032e5

00003970 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    3970:	b580      	push	{r7, lr}
    3972:	b082      	sub	sp, #8
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	68db      	ldr	r3, [r3, #12]
    397c:	4618      	mov	r0, r3
    397e:	4b03      	ldr	r3, [pc, #12]	; (398c <_timer_is_started+0x1c>)
    3980:	4798      	blx	r3
    3982:	4603      	mov	r3, r0
}
    3984:	4618      	mov	r0, r3
    3986:	3708      	adds	r7, #8
    3988:	46bd      	mov	sp, r7
    398a:	bd80      	pop	{r7, pc}
    398c:	0000317d 	.word	0x0000317d

00003990 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    3990:	b580      	push	{r7, lr}
    3992:	b082      	sub	sp, #8
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	691b      	ldr	r3, [r3, #16]
    399c:	4618      	mov	r0, r3
    399e:	4b03      	ldr	r3, [pc, #12]	; (39ac <_pwm_is_enabled+0x1c>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
}
    39a4:	4618      	mov	r0, r3
    39a6:	3708      	adds	r7, #8
    39a8:	46bd      	mov	sp, r7
    39aa:	bd80      	pop	{r7, pc}
    39ac:	0000317d 	.word	0x0000317d

000039b0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    39b0:	b480      	push	{r7}
    39b2:	af00      	add	r7, sp, #0
	return NULL;
    39b4:	2300      	movs	r3, #0
}
    39b6:	4618      	mov	r0, r3
    39b8:	46bd      	mov	sp, r7
    39ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    39be:	4770      	bx	lr

000039c0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    39c0:	b480      	push	{r7}
    39c2:	af00      	add	r7, sp, #0
	return NULL;
    39c4:	2300      	movs	r3, #0
}
    39c6:	4618      	mov	r0, r3
    39c8:	46bd      	mov	sp, r7
    39ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ce:	4770      	bx	lr

000039d0 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    39d0:	b580      	push	{r7, lr}
    39d2:	b084      	sub	sp, #16
    39d4:	af00      	add	r7, sp, #0
    39d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	68db      	ldr	r3, [r3, #12]
    39dc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    39de:	68f8      	ldr	r0, [r7, #12]
    39e0:	4b0e      	ldr	r3, [pc, #56]	; (3a1c <_timer_set_irq+0x4c>)
    39e2:	4798      	blx	r3
    39e4:	4603      	mov	r3, r0
    39e6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    39e8:	f240 12a1 	movw	r2, #417	; 0x1a1
    39ec:	490c      	ldr	r1, [pc, #48]	; (3a20 <_timer_set_irq+0x50>)
    39ee:	2001      	movs	r0, #1
    39f0:	4b0c      	ldr	r3, [pc, #48]	; (3a24 <_timer_set_irq+0x54>)
    39f2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    39f4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    39f8:	490b      	ldr	r1, [pc, #44]	; (3a28 <_timer_set_irq+0x58>)
    39fa:	4613      	mov	r3, r2
    39fc:	009b      	lsls	r3, r3, #2
    39fe:	4413      	add	r3, r2
    3a00:	009b      	lsls	r3, r3, #2
    3a02:	440b      	add	r3, r1
    3a04:	3302      	adds	r3, #2
    3a06:	f9b3 3000 	ldrsh.w	r3, [r3]
    3a0a:	b2db      	uxtb	r3, r3
    3a0c:	4618      	mov	r0, r3
    3a0e:	4b07      	ldr	r3, [pc, #28]	; (3a2c <_timer_set_irq+0x5c>)
    3a10:	4798      	blx	r3
}
    3a12:	bf00      	nop
    3a14:	3710      	adds	r7, #16
    3a16:	46bd      	mov	sp, r7
    3a18:	bd80      	pop	{r7, pc}
    3a1a:	bf00      	nop
    3a1c:	00003b29 	.word	0x00003b29
    3a20:	00005d84 	.word	0x00005d84
    3a24:	000017fd 	.word	0x000017fd
    3a28:	20000018 	.word	0x20000018
    3a2c:	00001b19 	.word	0x00001b19

00003a30 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3a30:	b580      	push	{r7, lr}
    3a32:	b084      	sub	sp, #16
    3a34:	af00      	add	r7, sp, #0
    3a36:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	68db      	ldr	r3, [r3, #12]
    3a3c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3a3e:	68f8      	ldr	r0, [r7, #12]
    3a40:	4b07      	ldr	r3, [pc, #28]	; (3a60 <tc_interrupt_handler+0x30>)
    3a42:	4798      	blx	r3
    3a44:	4603      	mov	r3, r0
    3a46:	2b00      	cmp	r3, #0
    3a48:	d006      	beq.n	3a58 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    3a4a:	68f8      	ldr	r0, [r7, #12]
    3a4c:	4b05      	ldr	r3, [pc, #20]	; (3a64 <tc_interrupt_handler+0x34>)
    3a4e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	6878      	ldr	r0, [r7, #4]
    3a56:	4798      	blx	r3
	}
}
    3a58:	bf00      	nop
    3a5a:	3710      	adds	r7, #16
    3a5c:	46bd      	mov	sp, r7
    3a5e:	bd80      	pop	{r7, pc}
    3a60:	000030b5 	.word	0x000030b5
    3a64:	000030dd 	.word	0x000030dd

00003a68 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    3a68:	b580      	push	{r7, lr}
    3a6a:	b084      	sub	sp, #16
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	691b      	ldr	r3, [r3, #16]
    3a74:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3a76:	68f8      	ldr	r0, [r7, #12]
    3a78:	4b12      	ldr	r3, [pc, #72]	; (3ac4 <tc_pwm_interrupt_handler+0x5c>)
    3a7a:	4798      	blx	r3
    3a7c:	4603      	mov	r3, r0
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d00a      	beq.n	3a98 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    3a82:	68f8      	ldr	r0, [r7, #12]
    3a84:	4b10      	ldr	r3, [pc, #64]	; (3ac8 <tc_pwm_interrupt_handler+0x60>)
    3a86:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	2b00      	cmp	r3, #0
    3a8e:	d003      	beq.n	3a98 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	6878      	ldr	r0, [r7, #4]
    3a96:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    3a98:	68f8      	ldr	r0, [r7, #12]
    3a9a:	4b0c      	ldr	r3, [pc, #48]	; (3acc <tc_pwm_interrupt_handler+0x64>)
    3a9c:	4798      	blx	r3
    3a9e:	4603      	mov	r3, r0
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d00a      	beq.n	3aba <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    3aa4:	68f8      	ldr	r0, [r7, #12]
    3aa6:	4b0a      	ldr	r3, [pc, #40]	; (3ad0 <tc_pwm_interrupt_handler+0x68>)
    3aa8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	685b      	ldr	r3, [r3, #4]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d003      	beq.n	3aba <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	685b      	ldr	r3, [r3, #4]
    3ab6:	6878      	ldr	r0, [r7, #4]
    3ab8:	4798      	blx	r3
		}
	}
}
    3aba:	bf00      	nop
    3abc:	3710      	adds	r7, #16
    3abe:	46bd      	mov	sp, r7
    3ac0:	bd80      	pop	{r7, pc}
    3ac2:	bf00      	nop
    3ac4:	000030b5 	.word	0x000030b5
    3ac8:	000030dd 	.word	0x000030dd
    3acc:	0000312b 	.word	0x0000312b
    3ad0:	000030f7 	.word	0x000030f7

00003ad4 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    3ad8:	4b03      	ldr	r3, [pc, #12]	; (3ae8 <TC1_Handler+0x14>)
    3ada:	681b      	ldr	r3, [r3, #0]
    3adc:	4618      	mov	r0, r3
    3ade:	4b03      	ldr	r3, [pc, #12]	; (3aec <TC1_Handler+0x18>)
    3ae0:	4798      	blx	r3
}
    3ae2:	bf00      	nop
    3ae4:	bd80      	pop	{r7, pc}
    3ae6:	bf00      	nop
    3ae8:	20000138 	.word	0x20000138
    3aec:	00003a31 	.word	0x00003a31

00003af0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    3af0:	b580      	push	{r7, lr}
    3af2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    3af4:	4b03      	ldr	r3, [pc, #12]	; (3b04 <TC2_Handler+0x14>)
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	4618      	mov	r0, r3
    3afa:	4b03      	ldr	r3, [pc, #12]	; (3b08 <TC2_Handler+0x18>)
    3afc:	4798      	blx	r3
}
    3afe:	bf00      	nop
    3b00:	bd80      	pop	{r7, pc}
    3b02:	bf00      	nop
    3b04:	2000013c 	.word	0x2000013c
    3b08:	00003a31 	.word	0x00003a31

00003b0c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc4_dev);
    3b10:	4b03      	ldr	r3, [pc, #12]	; (3b20 <TC4_Handler+0x14>)
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	4618      	mov	r0, r3
    3b16:	4b03      	ldr	r3, [pc, #12]	; (3b24 <TC4_Handler+0x18>)
    3b18:	4798      	blx	r3
}
    3b1a:	bf00      	nop
    3b1c:	bd80      	pop	{r7, pc}
    3b1e:	bf00      	nop
    3b20:	20000140 	.word	0x20000140
    3b24:	00003a69 	.word	0x00003a69

00003b28 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	b084      	sub	sp, #16
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    3b30:	6878      	ldr	r0, [r7, #4]
    3b32:	4b13      	ldr	r3, [pc, #76]	; (3b80 <get_tc_index+0x58>)
    3b34:	4798      	blx	r3
    3b36:	4603      	mov	r3, r0
    3b38:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3b3a:	2300      	movs	r3, #0
    3b3c:	73fb      	strb	r3, [r7, #15]
    3b3e:	e010      	b.n	3b62 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    3b40:	7bfa      	ldrb	r2, [r7, #15]
    3b42:	4910      	ldr	r1, [pc, #64]	; (3b84 <get_tc_index+0x5c>)
    3b44:	4613      	mov	r3, r2
    3b46:	009b      	lsls	r3, r3, #2
    3b48:	4413      	add	r3, r2
    3b4a:	009b      	lsls	r3, r3, #2
    3b4c:	440b      	add	r3, r1
    3b4e:	781b      	ldrb	r3, [r3, #0]
    3b50:	7bba      	ldrb	r2, [r7, #14]
    3b52:	429a      	cmp	r2, r3
    3b54:	d102      	bne.n	3b5c <get_tc_index+0x34>
			return i;
    3b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b5a:	e00d      	b.n	3b78 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3b5c:	7bfb      	ldrb	r3, [r7, #15]
    3b5e:	3301      	adds	r3, #1
    3b60:	73fb      	strb	r3, [r7, #15]
    3b62:	7bfb      	ldrb	r3, [r7, #15]
    3b64:	2b02      	cmp	r3, #2
    3b66:	d9eb      	bls.n	3b40 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    3b68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    3b6c:	4906      	ldr	r1, [pc, #24]	; (3b88 <get_tc_index+0x60>)
    3b6e:	2000      	movs	r0, #0
    3b70:	4b06      	ldr	r3, [pc, #24]	; (3b8c <get_tc_index+0x64>)
    3b72:	4798      	blx	r3
	return -1;
    3b74:	f04f 33ff 	mov.w	r3, #4294967295
}
    3b78:	4618      	mov	r0, r3
    3b7a:	3710      	adds	r7, #16
    3b7c:	46bd      	mov	sp, r7
    3b7e:	bd80      	pop	{r7, pc}
    3b80:	00003c01 	.word	0x00003c01
    3b84:	20000018 	.word	0x20000018
    3b88:	00005d84 	.word	0x00005d84
    3b8c:	000017fd 	.word	0x000017fd

00003b90 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    3b90:	b480      	push	{r7}
    3b92:	b083      	sub	sp, #12
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
    3b98:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	4a10      	ldr	r2, [pc, #64]	; (3be0 <_tc_init_irq_param+0x50>)
    3b9e:	4293      	cmp	r3, r2
    3ba0:	d102      	bne.n	3ba8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _pwm_device *)dev;
    3ba2:	4a10      	ldr	r2, [pc, #64]	; (3be4 <_tc_init_irq_param+0x54>)
    3ba4:	683b      	ldr	r3, [r7, #0]
    3ba6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    3ba8:	687b      	ldr	r3, [r7, #4]
    3baa:	4a0f      	ldr	r2, [pc, #60]	; (3be8 <_tc_init_irq_param+0x58>)
    3bac:	4293      	cmp	r3, r2
    3bae:	d102      	bne.n	3bb6 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    3bb0:	4a0e      	ldr	r2, [pc, #56]	; (3bec <_tc_init_irq_param+0x5c>)
    3bb2:	683b      	ldr	r3, [r7, #0]
    3bb4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	4a0d      	ldr	r2, [pc, #52]	; (3bf0 <_tc_init_irq_param+0x60>)
    3bba:	4293      	cmp	r3, r2
    3bbc:	d102      	bne.n	3bc4 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    3bbe:	4a0d      	ldr	r2, [pc, #52]	; (3bf4 <_tc_init_irq_param+0x64>)
    3bc0:	683b      	ldr	r3, [r7, #0]
    3bc2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	4a0c      	ldr	r2, [pc, #48]	; (3bf8 <_tc_init_irq_param+0x68>)
    3bc8:	4293      	cmp	r3, r2
    3bca:	d102      	bne.n	3bd2 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _pwm_device *)dev;
    3bcc:	4a0b      	ldr	r2, [pc, #44]	; (3bfc <_tc_init_irq_param+0x6c>)
    3bce:	683b      	ldr	r3, [r7, #0]
    3bd0:	6013      	str	r3, [r2, #0]
	}
}
    3bd2:	bf00      	nop
    3bd4:	370c      	adds	r7, #12
    3bd6:	46bd      	mov	sp, r7
    3bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop
    3be0:	40003800 	.word	0x40003800
    3be4:	20000134 	.word	0x20000134
    3be8:	40003c00 	.word	0x40003c00
    3bec:	20000138 	.word	0x20000138
    3bf0:	4101a000 	.word	0x4101a000
    3bf4:	2000013c 	.word	0x2000013c
    3bf8:	42001400 	.word	0x42001400
    3bfc:	20000140 	.word	0x20000140

00003c00 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    3c00:	b4b0      	push	{r4, r5, r7}
    3c02:	b08d      	sub	sp, #52	; 0x34
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3c08:	4b13      	ldr	r3, [pc, #76]	; (3c58 <_get_hardware_offset+0x58>)
    3c0a:	f107 040c 	add.w	r4, r7, #12
    3c0e:	461d      	mov	r5, r3
    3c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3c14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3c1c:	2300      	movs	r3, #0
    3c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    3c20:	e010      	b.n	3c44 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c24:	009b      	lsls	r3, r3, #2
    3c26:	f107 0230 	add.w	r2, r7, #48	; 0x30
    3c2a:	4413      	add	r3, r2
    3c2c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    3c30:	461a      	mov	r2, r3
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	429a      	cmp	r2, r3
    3c36:	d102      	bne.n	3c3e <_get_hardware_offset+0x3e>
			return i;
    3c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	e006      	b.n	3c4c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c40:	3301      	adds	r3, #1
    3c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    3c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c46:	2b07      	cmp	r3, #7
    3c48:	d9eb      	bls.n	3c22 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    3c4a:	2300      	movs	r3, #0
}
    3c4c:	4618      	mov	r0, r3
    3c4e:	3734      	adds	r7, #52	; 0x34
    3c50:	46bd      	mov	sp, r7
    3c52:	bcb0      	pop	{r4, r5, r7}
    3c54:	4770      	bx	lr
    3c56:	bf00      	nop
    3c58:	00005d98 	.word	0x00005d98

00003c5c <hri_tc_wait_for_sync>:
{
    3c5c:	b480      	push	{r7}
    3c5e:	b083      	sub	sp, #12
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
    3c64:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c66:	bf00      	nop
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	691a      	ldr	r2, [r3, #16]
    3c6c:	683b      	ldr	r3, [r7, #0]
    3c6e:	4013      	ands	r3, r2
    3c70:	2b00      	cmp	r3, #0
    3c72:	d1f9      	bne.n	3c68 <hri_tc_wait_for_sync+0xc>
}
    3c74:	bf00      	nop
    3c76:	370c      	adds	r7, #12
    3c78:	46bd      	mov	sp, r7
    3c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7e:	4770      	bx	lr

00003c80 <hri_tc_is_syncing>:
{
    3c80:	b480      	push	{r7}
    3c82:	b083      	sub	sp, #12
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
    3c88:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	691a      	ldr	r2, [r3, #16]
    3c8e:	683b      	ldr	r3, [r7, #0]
    3c90:	4013      	ands	r3, r2
    3c92:	2b00      	cmp	r3, #0
    3c94:	bf14      	ite	ne
    3c96:	2301      	movne	r3, #1
    3c98:	2300      	moveq	r3, #0
    3c9a:	b2db      	uxtb	r3, r3
}
    3c9c:	4618      	mov	r0, r3
    3c9e:	370c      	adds	r7, #12
    3ca0:	46bd      	mov	sp, r7
    3ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca6:	4770      	bx	lr

00003ca8 <hri_tc_write_CTRLB_reg>:
{
    3ca8:	b480      	push	{r7}
    3caa:	b083      	sub	sp, #12
    3cac:	af00      	add	r7, sp, #0
    3cae:	6078      	str	r0, [r7, #4]
    3cb0:	460b      	mov	r3, r1
    3cb2:	70fb      	strb	r3, [r7, #3]
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	78fa      	ldrb	r2, [r7, #3]
    3cb8:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    3cba:	78fb      	ldrb	r3, [r7, #3]
    3cbc:	43db      	mvns	r3, r3
    3cbe:	b2da      	uxtb	r2, r3
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	711a      	strb	r2, [r3, #4]
}
    3cc4:	bf00      	nop
    3cc6:	370c      	adds	r7, #12
    3cc8:	46bd      	mov	sp, r7
    3cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cce:	4770      	bx	lr

00003cd0 <hri_tc_write_INTEN_reg>:
{
    3cd0:	b480      	push	{r7}
    3cd2:	b083      	sub	sp, #12
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	6078      	str	r0, [r7, #4]
    3cd8:	460b      	mov	r3, r1
    3cda:	70fb      	strb	r3, [r7, #3]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	78fa      	ldrb	r2, [r7, #3]
    3ce0:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    3ce2:	78fb      	ldrb	r3, [r7, #3]
    3ce4:	43db      	mvns	r3, r3
    3ce6:	b2da      	uxtb	r2, r3
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	721a      	strb	r2, [r3, #8]
}
    3cec:	bf00      	nop
    3cee:	370c      	adds	r7, #12
    3cf0:	46bd      	mov	sp, r7
    3cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf6:	4770      	bx	lr

00003cf8 <hri_tc_write_CTRLA_ENABLE_bit>:
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b084      	sub	sp, #16
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	460b      	mov	r3, r1
    3d02:	70fb      	strb	r3, [r7, #3]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	60fb      	str	r3, [r7, #12]
	tmp &= ~TC_CTRLA_ENABLE;
    3d0a:	68fb      	ldr	r3, [r7, #12]
    3d0c:	f023 0302 	bic.w	r3, r3, #2
    3d10:	60fb      	str	r3, [r7, #12]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    3d12:	78fb      	ldrb	r3, [r7, #3]
    3d14:	005b      	lsls	r3, r3, #1
    3d16:	461a      	mov	r2, r3
    3d18:	68fb      	ldr	r3, [r7, #12]
    3d1a:	4313      	orrs	r3, r2
    3d1c:	60fb      	str	r3, [r7, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	68fa      	ldr	r2, [r7, #12]
    3d22:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3d24:	2103      	movs	r1, #3
    3d26:	6878      	ldr	r0, [r7, #4]
    3d28:	4b02      	ldr	r3, [pc, #8]	; (3d34 <hri_tc_write_CTRLA_ENABLE_bit+0x3c>)
    3d2a:	4798      	blx	r3
}
    3d2c:	bf00      	nop
    3d2e:	3710      	adds	r7, #16
    3d30:	46bd      	mov	sp, r7
    3d32:	bd80      	pop	{r7, pc}
    3d34:	00003c5d 	.word	0x00003c5d

00003d38 <hri_tc_clear_CTRLA_ENABLE_bit>:
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3d40:	687b      	ldr	r3, [r7, #4]
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	f023 0202 	bic.w	r2, r3, #2
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3d4c:	2103      	movs	r1, #3
    3d4e:	6878      	ldr	r0, [r7, #4]
    3d50:	4b02      	ldr	r3, [pc, #8]	; (3d5c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    3d52:	4798      	blx	r3
}
    3d54:	bf00      	nop
    3d56:	3708      	adds	r7, #8
    3d58:	46bd      	mov	sp, r7
    3d5a:	bd80      	pop	{r7, pc}
    3d5c:	00003c5d 	.word	0x00003c5d

00003d60 <hri_tc_get_CTRLA_reg>:
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b084      	sub	sp, #16
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3d6a:	2103      	movs	r1, #3
    3d6c:	6878      	ldr	r0, [r7, #4]
    3d6e:	4b07      	ldr	r3, [pc, #28]	; (3d8c <hri_tc_get_CTRLA_reg+0x2c>)
    3d70:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	681b      	ldr	r3, [r3, #0]
    3d76:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3d78:	68fa      	ldr	r2, [r7, #12]
    3d7a:	683b      	ldr	r3, [r7, #0]
    3d7c:	4013      	ands	r3, r2
    3d7e:	60fb      	str	r3, [r7, #12]
	return tmp;
    3d80:	68fb      	ldr	r3, [r7, #12]
}
    3d82:	4618      	mov	r0, r3
    3d84:	3710      	adds	r7, #16
    3d86:	46bd      	mov	sp, r7
    3d88:	bd80      	pop	{r7, pc}
    3d8a:	bf00      	nop
    3d8c:	00003c5d 	.word	0x00003c5d

00003d90 <hri_tc_write_CTRLA_reg>:
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b082      	sub	sp, #8
    3d94:	af00      	add	r7, sp, #0
    3d96:	6078      	str	r0, [r7, #4]
    3d98:	6039      	str	r1, [r7, #0]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	683a      	ldr	r2, [r7, #0]
    3d9e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3da0:	2103      	movs	r1, #3
    3da2:	6878      	ldr	r0, [r7, #4]
    3da4:	4b02      	ldr	r3, [pc, #8]	; (3db0 <hri_tc_write_CTRLA_reg+0x20>)
    3da6:	4798      	blx	r3
}
    3da8:	bf00      	nop
    3daa:	3708      	adds	r7, #8
    3dac:	46bd      	mov	sp, r7
    3dae:	bd80      	pop	{r7, pc}
    3db0:	00003c5d 	.word	0x00003c5d

00003db4 <hri_tc_write_EVCTRL_reg>:
{
    3db4:	b480      	push	{r7}
    3db6:	b083      	sub	sp, #12
    3db8:	af00      	add	r7, sp, #0
    3dba:	6078      	str	r0, [r7, #4]
    3dbc:	460b      	mov	r3, r1
    3dbe:	807b      	strh	r3, [r7, #2]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	887a      	ldrh	r2, [r7, #2]
    3dc4:	80da      	strh	r2, [r3, #6]
}
    3dc6:	bf00      	nop
    3dc8:	370c      	adds	r7, #12
    3dca:	46bd      	mov	sp, r7
    3dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd0:	4770      	bx	lr
	...

00003dd4 <TIMER_0_init>:

/**
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	af00      	add	r7, sp, #0

	if (!hri_tc_is_syncing(TC0, TC_SYNCBUSY_SWRST)) {
    3dd8:	2101      	movs	r1, #1
    3dda:	481b      	ldr	r0, [pc, #108]	; (3e48 <TIMER_0_init+0x74>)
    3ddc:	4b1b      	ldr	r3, [pc, #108]	; (3e4c <TIMER_0_init+0x78>)
    3dde:	4798      	blx	r3
    3de0:	4603      	mov	r3, r0
    3de2:	f083 0301 	eor.w	r3, r3, #1
    3de6:	b2db      	uxtb	r3, r3
    3de8:	2b00      	cmp	r3, #0
    3dea:	d011      	beq.n	3e10 <TIMER_0_init+0x3c>
		if (hri_tc_get_CTRLA_reg(TC0, TC_CTRLA_ENABLE)) {
    3dec:	2102      	movs	r1, #2
    3dee:	4816      	ldr	r0, [pc, #88]	; (3e48 <TIMER_0_init+0x74>)
    3df0:	4b17      	ldr	r3, [pc, #92]	; (3e50 <TIMER_0_init+0x7c>)
    3df2:	4798      	blx	r3
    3df4:	4603      	mov	r3, r0
    3df6:	2b00      	cmp	r3, #0
    3df8:	d006      	beq.n	3e08 <TIMER_0_init+0x34>
			hri_tc_clear_CTRLA_ENABLE_bit(TC0);
    3dfa:	4813      	ldr	r0, [pc, #76]	; (3e48 <TIMER_0_init+0x74>)
    3dfc:	4b15      	ldr	r3, [pc, #84]	; (3e54 <TIMER_0_init+0x80>)
    3dfe:	4798      	blx	r3
			hri_tc_wait_for_sync(TC0, TC_SYNCBUSY_ENABLE);
    3e00:	2102      	movs	r1, #2
    3e02:	4811      	ldr	r0, [pc, #68]	; (3e48 <TIMER_0_init+0x74>)
    3e04:	4b14      	ldr	r3, [pc, #80]	; (3e58 <TIMER_0_init+0x84>)
    3e06:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(TC0, TC_CTRLA_SWRST);
    3e08:	2101      	movs	r1, #1
    3e0a:	480f      	ldr	r0, [pc, #60]	; (3e48 <TIMER_0_init+0x74>)
    3e0c:	4b13      	ldr	r3, [pc, #76]	; (3e5c <TIMER_0_init+0x88>)
    3e0e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(TC0, TC_SYNCBUSY_SWRST);
    3e10:	2101      	movs	r1, #1
    3e12:	480d      	ldr	r0, [pc, #52]	; (3e48 <TIMER_0_init+0x74>)
    3e14:	4b10      	ldr	r3, [pc, #64]	; (3e58 <TIMER_0_init+0x84>)
    3e16:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(TC0,
    3e18:	4911      	ldr	r1, [pc, #68]	; (3e60 <TIMER_0_init+0x8c>)
    3e1a:	480b      	ldr	r0, [pc, #44]	; (3e48 <TIMER_0_init+0x74>)
    3e1c:	4b0f      	ldr	r3, [pc, #60]	; (3e5c <TIMER_0_init+0x88>)
    3e1e:	4798      	blx	r3
	                           | 0 << TC_CTRLA_ONDEMAND_Pos  /* Clock On Demand: disabled */
	                           | 0 << TC_CTRLA_RUNSTDBY_Pos  /* Run in Standby: disabled */
	                           | 3 << TC_CTRLA_PRESCALER_Pos /* Setting: 3 */
	                           | 0x0 << TC_CTRLA_MODE_Pos);  /* Operating Mode: 0x0 */

	hri_tc_write_CTRLB_reg(TC0,
    3e20:	2100      	movs	r1, #0
    3e22:	4809      	ldr	r0, [pc, #36]	; (3e48 <TIMER_0_init+0x74>)
    3e24:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <TIMER_0_init+0x90>)
    3e26:	4798      	blx	r3

	// hri_tccount16_write_CC_reg(TC0, 1 ,0x0); /* Compare/Capture Value: 0x0 */

	// hri_tccount16_write_COUNT_reg(TC0,0x0); /* Counter Value: 0x0 */

	hri_tc_write_EVCTRL_reg(
    3e28:	2125      	movs	r1, #37	; 0x25
    3e2a:	4807      	ldr	r0, [pc, #28]	; (3e48 <TIMER_0_init+0x74>)
    3e2c:	4b0e      	ldr	r3, [pc, #56]	; (3e68 <TIMER_0_init+0x94>)
    3e2e:	4798      	blx	r3
	        | 0 << TC_EVCTRL_OVFEO_Pos /* Overflow/Underflow Event Output Enable: disabled */
	        | 1 << TC_EVCTRL_TCEI_Pos  /* TC Event Input: enabled */
	        | 0 << TC_EVCTRL_TCINV_Pos /* TC Inverted Event Input: disabled */
	        | 5);                      /* Event Action: 5 */

	hri_tc_write_INTEN_reg(TC0,
    3e30:	2110      	movs	r1, #16
    3e32:	4805      	ldr	r0, [pc, #20]	; (3e48 <TIMER_0_init+0x74>)
    3e34:	4b0d      	ldr	r3, [pc, #52]	; (3e6c <TIMER_0_init+0x98>)
    3e36:	4798      	blx	r3
	                       1 << TC_INTENSET_MC0_Pos         /* Match or Capture Channel 0 Interrupt Enable: enabled */
	                           | 0 << TC_INTENSET_MC1_Pos   /* Match or Capture Channel 1 Interrupt Enable: disabled */
	                           | 0 << TC_INTENSET_ERR_Pos   /* Error Interrupt Enable: disabled */
	                           | 0 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC0, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    3e38:	2101      	movs	r1, #1
    3e3a:	4803      	ldr	r0, [pc, #12]	; (3e48 <TIMER_0_init+0x74>)
    3e3c:	4b0c      	ldr	r3, [pc, #48]	; (3e70 <TIMER_0_init+0x9c>)
    3e3e:	4798      	blx	r3

	return 0;
    3e40:	2300      	movs	r3, #0
}
    3e42:	4618      	mov	r0, r3
    3e44:	bd80      	pop	{r7, pc}
    3e46:	bf00      	nop
    3e48:	40003800 	.word	0x40003800
    3e4c:	00003c81 	.word	0x00003c81
    3e50:	00003d61 	.word	0x00003d61
    3e54:	00003d39 	.word	0x00003d39
    3e58:	00003c5d 	.word	0x00003c5d
    3e5c:	00003d91 	.word	0x00003d91
    3e60:	00030300 	.word	0x00030300
    3e64:	00003ca9 	.word	0x00003ca9
    3e68:	00003db5 	.word	0x00003db5
    3e6c:	00003cd1 	.word	0x00003cd1
    3e70:	00003cf9 	.word	0x00003cf9

00003e74 <__NVIC_EnableIRQ>:
{
    3e74:	b480      	push	{r7}
    3e76:	b083      	sub	sp, #12
    3e78:	af00      	add	r7, sp, #0
    3e7a:	4603      	mov	r3, r0
    3e7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e82:	2b00      	cmp	r3, #0
    3e84:	db0b      	blt.n	3e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e86:	4909      	ldr	r1, [pc, #36]	; (3eac <__NVIC_EnableIRQ+0x38>)
    3e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e8c:	095b      	lsrs	r3, r3, #5
    3e8e:	88fa      	ldrh	r2, [r7, #6]
    3e90:	f002 021f 	and.w	r2, r2, #31
    3e94:	2001      	movs	r0, #1
    3e96:	fa00 f202 	lsl.w	r2, r0, r2
    3e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3e9e:	bf00      	nop
    3ea0:	370c      	adds	r7, #12
    3ea2:	46bd      	mov	sp, r7
    3ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ea8:	4770      	bx	lr
    3eaa:	bf00      	nop
    3eac:	e000e100 	.word	0xe000e100

00003eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3eb0:	b480      	push	{r7}
    3eb2:	b083      	sub	sp, #12
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	4603      	mov	r3, r0
    3eb8:	6039      	str	r1, [r7, #0]
    3eba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	db0a      	blt.n	3eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ec4:	490d      	ldr	r1, [pc, #52]	; (3efc <__NVIC_SetPriority+0x4c>)
    3ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3eca:	683a      	ldr	r2, [r7, #0]
    3ecc:	b2d2      	uxtb	r2, r2
    3ece:	0152      	lsls	r2, r2, #5
    3ed0:	b2d2      	uxtb	r2, r2
    3ed2:	440b      	add	r3, r1
    3ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    3ed8:	e00a      	b.n	3ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3eda:	4909      	ldr	r1, [pc, #36]	; (3f00 <__NVIC_SetPriority+0x50>)
    3edc:	88fb      	ldrh	r3, [r7, #6]
    3ede:	f003 030f 	and.w	r3, r3, #15
    3ee2:	3b04      	subs	r3, #4
    3ee4:	683a      	ldr	r2, [r7, #0]
    3ee6:	b2d2      	uxtb	r2, r2
    3ee8:	0152      	lsls	r2, r2, #5
    3eea:	b2d2      	uxtb	r2, r2
    3eec:	440b      	add	r3, r1
    3eee:	761a      	strb	r2, [r3, #24]
}
    3ef0:	bf00      	nop
    3ef2:	370c      	adds	r7, #12
    3ef4:	46bd      	mov	sp, r7
    3ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efa:	4770      	bx	lr
    3efc:	e000e100 	.word	0xe000e100
    3f00:	e000ed00 	.word	0xe000ed00

00003f04 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    3f04:	b480      	push	{r7}
    3f06:	b083      	sub	sp, #12
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
    3f0c:	460b      	mov	r3, r1
    3f0e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3f10:	78fb      	ldrb	r3, [r7, #3]
    3f12:	687a      	ldr	r2, [r7, #4]
    3f14:	01db      	lsls	r3, r3, #7
    3f16:	4413      	add	r3, r2
    3f18:	681b      	ldr	r3, [r3, #0]
}
    3f1a:	4618      	mov	r0, r3
    3f1c:	370c      	adds	r7, #12
    3f1e:	46bd      	mov	sp, r7
    3f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f24:	4770      	bx	lr

00003f26 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    3f26:	b480      	push	{r7}
    3f28:	b085      	sub	sp, #20
    3f2a:	af00      	add	r7, sp, #0
    3f2c:	60f8      	str	r0, [r7, #12]
    3f2e:	460b      	mov	r3, r1
    3f30:	607a      	str	r2, [r7, #4]
    3f32:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3f34:	7afb      	ldrb	r3, [r7, #11]
    3f36:	68fa      	ldr	r2, [r7, #12]
    3f38:	01db      	lsls	r3, r3, #7
    3f3a:	4413      	add	r3, r2
    3f3c:	3318      	adds	r3, #24
    3f3e:	687a      	ldr	r2, [r7, #4]
    3f40:	601a      	str	r2, [r3, #0]
}
    3f42:	bf00      	nop
    3f44:	3714      	adds	r7, #20
    3f46:	46bd      	mov	sp, r7
    3f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f4c:	4770      	bx	lr

00003f4e <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    3f4e:	b480      	push	{r7}
    3f50:	b083      	sub	sp, #12
    3f52:	af00      	add	r7, sp, #0
    3f54:	6078      	str	r0, [r7, #4]
    3f56:	460b      	mov	r3, r1
    3f58:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3f5a:	78fb      	ldrb	r3, [r7, #3]
    3f5c:	687a      	ldr	r2, [r7, #4]
    3f5e:	01db      	lsls	r3, r3, #7
    3f60:	4413      	add	r3, r2
    3f62:	3310      	adds	r3, #16
    3f64:	681b      	ldr	r3, [r3, #0]
}
    3f66:	4618      	mov	r0, r3
    3f68:	370c      	adds	r7, #12
    3f6a:	46bd      	mov	sp, r7
    3f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f70:	4770      	bx	lr

00003f72 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    3f72:	b480      	push	{r7}
    3f74:	b085      	sub	sp, #20
    3f76:	af00      	add	r7, sp, #0
    3f78:	60f8      	str	r0, [r7, #12]
    3f7a:	460b      	mov	r3, r1
    3f7c:	607a      	str	r2, [r7, #4]
    3f7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3f80:	7afb      	ldrb	r3, [r7, #11]
    3f82:	68fa      	ldr	r2, [r7, #12]
    3f84:	01db      	lsls	r3, r3, #7
    3f86:	4413      	add	r3, r2
    3f88:	3314      	adds	r3, #20
    3f8a:	687a      	ldr	r2, [r7, #4]
    3f8c:	601a      	str	r2, [r3, #0]
}
    3f8e:	bf00      	nop
    3f90:	3714      	adds	r7, #20
    3f92:	46bd      	mov	sp, r7
    3f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f98:	4770      	bx	lr

00003f9a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    3f9a:	b480      	push	{r7}
    3f9c:	b083      	sub	sp, #12
    3f9e:	af00      	add	r7, sp, #0
    3fa0:	6078      	str	r0, [r7, #4]
    3fa2:	460b      	mov	r3, r1
    3fa4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3fa6:	78fb      	ldrb	r3, [r7, #3]
    3fa8:	687a      	ldr	r2, [r7, #4]
    3faa:	01db      	lsls	r3, r3, #7
    3fac:	4413      	add	r3, r2
    3fae:	3320      	adds	r3, #32
    3fb0:	681b      	ldr	r3, [r3, #0]
}
    3fb2:	4618      	mov	r0, r3
    3fb4:	370c      	adds	r7, #12
    3fb6:	46bd      	mov	sp, r7
    3fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fbc:	4770      	bx	lr

00003fbe <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    3fbe:	b480      	push	{r7}
    3fc0:	b083      	sub	sp, #12
    3fc2:	af00      	add	r7, sp, #0
    3fc4:	6078      	str	r0, [r7, #4]
    3fc6:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fc8:	bf00      	nop
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	691a      	ldr	r2, [r3, #16]
    3fce:	683b      	ldr	r3, [r7, #0]
    3fd0:	4013      	ands	r3, r2
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d1f9      	bne.n	3fca <hri_tc_wait_for_sync+0xc>
	};
}
    3fd6:	bf00      	nop
    3fd8:	370c      	adds	r7, #12
    3fda:	46bd      	mov	sp, r7
    3fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe0:	4770      	bx	lr

00003fe2 <hri_tc_clear_INTFLAG_MC0_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_MC0) >> TC_INTFLAG_MC0_Pos;
}

static inline void hri_tc_clear_INTFLAG_MC0_bit(const void *const hw)
{
    3fe2:	b480      	push	{r7}
    3fe4:	b083      	sub	sp, #12
    3fe6:	af00      	add	r7, sp, #0
    3fe8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	2210      	movs	r2, #16
    3fee:	729a      	strb	r2, [r3, #10]
}
    3ff0:	bf00      	nop
    3ff2:	370c      	adds	r7, #12
    3ff4:	46bd      	mov	sp, r7
    3ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffa:	4770      	bx	lr

00003ffc <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b082      	sub	sp, #8
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    4004:	460b      	mov	r3, r1
    4006:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4008:	21c0      	movs	r1, #192	; 0xc0
    400a:	6878      	ldr	r0, [r7, #4]
    400c:	4b06      	ldr	r3, [pc, #24]	; (4028 <hri_tccount16_read_CC_reg+0x2c>)
    400e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    4010:	78fb      	ldrb	r3, [r7, #3]
    4012:	687a      	ldr	r2, [r7, #4]
    4014:	330c      	adds	r3, #12
    4016:	005b      	lsls	r3, r3, #1
    4018:	4413      	add	r3, r2
    401a:	889b      	ldrh	r3, [r3, #4]
    401c:	b29b      	uxth	r3, r3
}
    401e:	4618      	mov	r0, r3
    4020:	3708      	adds	r7, #8
    4022:	46bd      	mov	sp, r7
    4024:	bd80      	pop	{r7, pc}
    4026:	bf00      	nop
    4028:	00003fbf 	.word	0x00003fbf

0000402c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	4603      	mov	r3, r0
    4034:	6039      	str	r1, [r7, #0]
    4036:	71fb      	strb	r3, [r7, #7]
    4038:	4613      	mov	r3, r2
    403a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    403c:	79bb      	ldrb	r3, [r7, #6]
    403e:	2b00      	cmp	r3, #0
    4040:	d006      	beq.n	4050 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    4042:	79fb      	ldrb	r3, [r7, #7]
    4044:	683a      	ldr	r2, [r7, #0]
    4046:	4619      	mov	r1, r3
    4048:	4806      	ldr	r0, [pc, #24]	; (4064 <_gpio_set_level+0x38>)
    404a:	4b07      	ldr	r3, [pc, #28]	; (4068 <_gpio_set_level+0x3c>)
    404c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    404e:	e005      	b.n	405c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4050:	79fb      	ldrb	r3, [r7, #7]
    4052:	683a      	ldr	r2, [r7, #0]
    4054:	4619      	mov	r1, r3
    4056:	4803      	ldr	r0, [pc, #12]	; (4064 <_gpio_set_level+0x38>)
    4058:	4b04      	ldr	r3, [pc, #16]	; (406c <_gpio_set_level+0x40>)
    405a:	4798      	blx	r3
}
    405c:	bf00      	nop
    405e:	3708      	adds	r7, #8
    4060:	46bd      	mov	sp, r7
    4062:	bd80      	pop	{r7, pc}
    4064:	41008000 	.word	0x41008000
    4068:	00003f27 	.word	0x00003f27
    406c:	00003f73 	.word	0x00003f73

00004070 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    4070:	b580      	push	{r7, lr}
    4072:	b086      	sub	sp, #24
    4074:	af00      	add	r7, sp, #0
    4076:	4603      	mov	r3, r0
    4078:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    407a:	f107 030c 	add.w	r3, r7, #12
    407e:	4618      	mov	r0, r3
    4080:	4b13      	ldr	r3, [pc, #76]	; (40d0 <_gpio_get_level+0x60>)
    4082:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    4084:	79fb      	ldrb	r3, [r7, #7]
    4086:	4619      	mov	r1, r3
    4088:	4812      	ldr	r0, [pc, #72]	; (40d4 <_gpio_get_level+0x64>)
    408a:	4b13      	ldr	r3, [pc, #76]	; (40d8 <_gpio_get_level+0x68>)
    408c:	4798      	blx	r3
    408e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    4090:	79fb      	ldrb	r3, [r7, #7]
    4092:	4619      	mov	r1, r3
    4094:	480f      	ldr	r0, [pc, #60]	; (40d4 <_gpio_get_level+0x64>)
    4096:	4b11      	ldr	r3, [pc, #68]	; (40dc <_gpio_get_level+0x6c>)
    4098:	4798      	blx	r3
    409a:	4602      	mov	r2, r0
    409c:	697b      	ldr	r3, [r7, #20]
    409e:	43db      	mvns	r3, r3
    40a0:	4013      	ands	r3, r2
    40a2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    40a4:	79fb      	ldrb	r3, [r7, #7]
    40a6:	4619      	mov	r1, r3
    40a8:	480a      	ldr	r0, [pc, #40]	; (40d4 <_gpio_get_level+0x64>)
    40aa:	4b0d      	ldr	r3, [pc, #52]	; (40e0 <_gpio_get_level+0x70>)
    40ac:	4798      	blx	r3
    40ae:	4602      	mov	r2, r0
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	4013      	ands	r3, r2
    40b4:	693a      	ldr	r2, [r7, #16]
    40b6:	4313      	orrs	r3, r2
    40b8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    40ba:	f107 030c 	add.w	r3, r7, #12
    40be:	4618      	mov	r0, r3
    40c0:	4b08      	ldr	r3, [pc, #32]	; (40e4 <_gpio_get_level+0x74>)
    40c2:	4798      	blx	r3

	return tmp;
    40c4:	693b      	ldr	r3, [r7, #16]
}
    40c6:	4618      	mov	r0, r3
    40c8:	3718      	adds	r7, #24
    40ca:	46bd      	mov	sp, r7
    40cc:	bd80      	pop	{r7, pc}
    40ce:	bf00      	nop
    40d0:	00000d41 	.word	0x00000d41
    40d4:	41008000 	.word	0x41008000
    40d8:	00003f05 	.word	0x00003f05
    40dc:	00003f9b 	.word	0x00003f9b
    40e0:	00003f4f 	.word	0x00003f4f
    40e4:	00000d67 	.word	0x00000d67

000040e8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    40e8:	b580      	push	{r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
    40ee:	4603      	mov	r3, r0
    40f0:	460a      	mov	r2, r1
    40f2:	71fb      	strb	r3, [r7, #7]
    40f4:	4613      	mov	r3, r2
    40f6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    40f8:	79fb      	ldrb	r3, [r7, #7]
    40fa:	095b      	lsrs	r3, r3, #5
    40fc:	b2d8      	uxtb	r0, r3
    40fe:	79fb      	ldrb	r3, [r7, #7]
    4100:	f003 031f 	and.w	r3, r3, #31
    4104:	2201      	movs	r2, #1
    4106:	fa02 f303 	lsl.w	r3, r2, r3
    410a:	79ba      	ldrb	r2, [r7, #6]
    410c:	4619      	mov	r1, r3
    410e:	4b03      	ldr	r3, [pc, #12]	; (411c <gpio_set_pin_level+0x34>)
    4110:	4798      	blx	r3
}
    4112:	bf00      	nop
    4114:	3708      	adds	r7, #8
    4116:	46bd      	mov	sp, r7
    4118:	bd80      	pop	{r7, pc}
    411a:	bf00      	nop
    411c:	0000402d 	.word	0x0000402d

00004120 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    4120:	b580      	push	{r7, lr}
    4122:	b082      	sub	sp, #8
    4124:	af00      	add	r7, sp, #0
    4126:	4603      	mov	r3, r0
    4128:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    412a:	79fb      	ldrb	r3, [r7, #7]
    412c:	095b      	lsrs	r3, r3, #5
    412e:	b2db      	uxtb	r3, r3
    4130:	4618      	mov	r0, r3
    4132:	4b09      	ldr	r3, [pc, #36]	; (4158 <gpio_get_pin_level+0x38>)
    4134:	4798      	blx	r3
    4136:	4601      	mov	r1, r0
    4138:	79fb      	ldrb	r3, [r7, #7]
    413a:	f003 031f 	and.w	r3, r3, #31
    413e:	2201      	movs	r2, #1
    4140:	fa02 f303 	lsl.w	r3, r2, r3
    4144:	400b      	ands	r3, r1
    4146:	2b00      	cmp	r3, #0
    4148:	bf14      	ite	ne
    414a:	2301      	movne	r3, #1
    414c:	2300      	moveq	r3, #0
    414e:	b2db      	uxtb	r3, r3
}
    4150:	4618      	mov	r0, r3
    4152:	3708      	adds	r7, #8
    4154:	46bd      	mov	sp, r7
    4156:	bd80      	pop	{r7, pc}
    4158:	00004071 	.word	0x00004071

0000415c <TC0_Handler>:
// this will store user input
int32_t level = 0;
int8_t controlled_level = 0;

// Will be fired at each rising edge of HAL sensor A
void TC0_Handler(){
    415c:	b580      	push	{r7, lr}
    415e:	b082      	sub	sp, #8
    4160:	af00      	add	r7, sp, #0
	hri_tc_clear_INTFLAG_MC0_bit(TC0);
    4162:	4829      	ldr	r0, [pc, #164]	; (4208 <TC0_Handler+0xac>)
    4164:	4b29      	ldr	r3, [pc, #164]	; (420c <TC0_Handler+0xb0>)
    4166:	4798      	blx	r3
	
	// periodCC0 * 60 / (1440 * 1.5MHz)
	periodCC0 = (uint32_t)hri_tccount16_read_CC_reg(TC0, 0); 
    4168:	2100      	movs	r1, #0
    416a:	4827      	ldr	r0, [pc, #156]	; (4208 <TC0_Handler+0xac>)
    416c:	4b28      	ldr	r3, [pc, #160]	; (4210 <TC0_Handler+0xb4>)
    416e:	4798      	blx	r3
    4170:	4603      	mov	r3, r0
    4172:	461a      	mov	r2, r3
    4174:	4b27      	ldr	r3, [pc, #156]	; (4214 <TC0_Handler+0xb8>)
    4176:	601a      	str	r2, [r3, #0]
	pulses++;
    4178:	4b27      	ldr	r3, [pc, #156]	; (4218 <TC0_Handler+0xbc>)
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	3301      	adds	r3, #1
    417e:	4a26      	ldr	r2, [pc, #152]	; (4218 <TC0_Handler+0xbc>)
    4180:	6013      	str	r3, [r2, #0]
	
	//////////////////////////////////////////////////////////////////////////
	// Getting the direction and the number of steps in each direction
	
	// read HAL_SENSOR_B 
	bool hal_sensor_b = gpio_get_pin_level(HAL_SENSOR_B);
    4182:	2021      	movs	r0, #33	; 0x21
    4184:	4b25      	ldr	r3, [pc, #148]	; (421c <TC0_Handler+0xc0>)
    4186:	4798      	blx	r3
    4188:	4603      	mov	r3, r0
    418a:	71fb      	strb	r3, [r7, #7]
	
	if ((hal_sensor_b == false) && (direction == -1))
    418c:	79fb      	ldrb	r3, [r7, #7]
    418e:	f083 0301 	eor.w	r3, r3, #1
    4192:	b2db      	uxtb	r3, r3
    4194:	2b00      	cmp	r3, #0
    4196:	d009      	beq.n	41ac <TC0_Handler+0x50>
    4198:	4b21      	ldr	r3, [pc, #132]	; (4220 <TC0_Handler+0xc4>)
    419a:	f993 3000 	ldrsb.w	r3, [r3]
    419e:	f1b3 3fff 	cmp.w	r3, #4294967295
    41a2:	d103      	bne.n	41ac <TC0_Handler+0x50>
	{
		direction = 1; // Reverse
    41a4:	4b1e      	ldr	r3, [pc, #120]	; (4220 <TC0_Handler+0xc4>)
    41a6:	2201      	movs	r2, #1
    41a8:	701a      	strb	r2, [r3, #0]
    41aa:	e00a      	b.n	41c2 <TC0_Handler+0x66>
	}
	else if ((hal_sensor_b == true) && (direction == 1))
    41ac:	79fb      	ldrb	r3, [r7, #7]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d007      	beq.n	41c2 <TC0_Handler+0x66>
    41b2:	4b1b      	ldr	r3, [pc, #108]	; (4220 <TC0_Handler+0xc4>)
    41b4:	f993 3000 	ldrsb.w	r3, [r3]
    41b8:	2b01      	cmp	r3, #1
    41ba:	d102      	bne.n	41c2 <TC0_Handler+0x66>
	{
		direction = -1;
    41bc:	4b18      	ldr	r3, [pc, #96]	; (4220 <TC0_Handler+0xc4>)
    41be:	22ff      	movs	r2, #255	; 0xff
    41c0:	701a      	strb	r2, [r3, #0]
	}
	
	if (direction == 1)
    41c2:	4b17      	ldr	r3, [pc, #92]	; (4220 <TC0_Handler+0xc4>)
    41c4:	f993 3000 	ldrsb.w	r3, [r3]
    41c8:	2b01      	cmp	r3, #1
    41ca:	d105      	bne.n	41d8 <TC0_Handler+0x7c>
	{
		steps++;
    41cc:	4b15      	ldr	r3, [pc, #84]	; (4224 <TC0_Handler+0xc8>)
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	3301      	adds	r3, #1
    41d2:	4a14      	ldr	r2, [pc, #80]	; (4224 <TC0_Handler+0xc8>)
    41d4:	6013      	str	r3, [r2, #0]
    41d6:	e004      	b.n	41e2 <TC0_Handler+0x86>
	}
	else
	{
		steps--;
    41d8:	4b12      	ldr	r3, [pc, #72]	; (4224 <TC0_Handler+0xc8>)
    41da:	681b      	ldr	r3, [r3, #0]
    41dc:	3b01      	subs	r3, #1
    41de:	4a11      	ldr	r2, [pc, #68]	; (4224 <TC0_Handler+0xc8>)
    41e0:	6013      	str	r3, [r2, #0]
	}
	
	if ((steps > 30000) || (steps < -30000))
    41e2:	4b10      	ldr	r3, [pc, #64]	; (4224 <TC0_Handler+0xc8>)
    41e4:	681b      	ldr	r3, [r3, #0]
    41e6:	f247 5230 	movw	r2, #30000	; 0x7530
    41ea:	4293      	cmp	r3, r2
    41ec:	dc04      	bgt.n	41f8 <TC0_Handler+0x9c>
    41ee:	4b0d      	ldr	r3, [pc, #52]	; (4224 <TC0_Handler+0xc8>)
    41f0:	681b      	ldr	r3, [r3, #0]
    41f2:	4a0d      	ldr	r2, [pc, #52]	; (4228 <TC0_Handler+0xcc>)
    41f4:	4293      	cmp	r3, r2
    41f6:	da02      	bge.n	41fe <TC0_Handler+0xa2>
	{
		steps = 0;
    41f8:	4b0a      	ldr	r3, [pc, #40]	; (4224 <TC0_Handler+0xc8>)
    41fa:	2200      	movs	r2, #0
    41fc:	601a      	str	r2, [r3, #0]
	}
	
	
}
    41fe:	bf00      	nop
    4200:	3708      	adds	r7, #8
    4202:	46bd      	mov	sp, r7
    4204:	bd80      	pop	{r7, pc}
    4206:	bf00      	nop
    4208:	40003800 	.word	0x40003800
    420c:	00003fe3 	.word	0x00003fe3
    4210:	00003ffd 	.word	0x00003ffd
    4214:	2000014c 	.word	0x2000014c
    4218:	20000150 	.word	0x20000150
    421c:	00004121 	.word	0x00004121
    4220:	20000054 	.word	0x20000054
    4224:	20000158 	.word	0x20000158
    4228:	ffff8ad0 	.word	0xffff8ad0

0000422c <uart_rx_cb>:

static void uart_rx_cb(const struct usart_async_descriptor *const io_descr)
{
    422c:	b480      	push	{r7}
    422e:	b083      	sub	sp, #12
    4230:	af00      	add	r7, sp, #0
    4232:	6078      	str	r0, [r7, #4]
	/* Receive completed */
	data_arrived = 1;
    4234:	4b04      	ldr	r3, [pc, #16]	; (4248 <uart_rx_cb+0x1c>)
    4236:	2201      	movs	r2, #1
    4238:	601a      	str	r2, [r3, #0]
}
    423a:	bf00      	nop
    423c:	370c      	adds	r7, #12
    423e:	46bd      	mov	sp, r7
    4240:	f85d 7b04 	ldr.w	r7, [sp], #4
    4244:	4770      	bx	lr
    4246:	bf00      	nop
    4248:	20000144 	.word	0x20000144

0000424c <TIMER_1_task1_cb>:

/**
 *	capture the number of pulses in the past 10ms
 */
static void TIMER_1_task1_cb(const struct timer_task *const timer_task)
{
    424c:	b590      	push	{r4, r7, lr}
    424e:	b083      	sub	sp, #12
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	rpm = (pulses * 100 /*Hz*/ * 60.0 /*Min*/ / (1440));
    4254:	4b13      	ldr	r3, [pc, #76]	; (42a4 <TIMER_1_task1_cb+0x58>)
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	2264      	movs	r2, #100	; 0x64
    425a:	fb02 f203 	mul.w	r2, r2, r3
    425e:	4b12      	ldr	r3, [pc, #72]	; (42a8 <TIMER_1_task1_cb+0x5c>)
    4260:	4610      	mov	r0, r2
    4262:	4798      	blx	r3
    4264:	4c11      	ldr	r4, [pc, #68]	; (42ac <TIMER_1_task1_cb+0x60>)
    4266:	f04f 0200 	mov.w	r2, #0
    426a:	4b11      	ldr	r3, [pc, #68]	; (42b0 <TIMER_1_task1_cb+0x64>)
    426c:	47a0      	blx	r4
    426e:	4603      	mov	r3, r0
    4270:	460c      	mov	r4, r1
    4272:	4618      	mov	r0, r3
    4274:	4621      	mov	r1, r4
    4276:	4c0f      	ldr	r4, [pc, #60]	; (42b4 <TIMER_1_task1_cb+0x68>)
    4278:	f04f 0200 	mov.w	r2, #0
    427c:	4b0e      	ldr	r3, [pc, #56]	; (42b8 <TIMER_1_task1_cb+0x6c>)
    427e:	47a0      	blx	r4
    4280:	4603      	mov	r3, r0
    4282:	460c      	mov	r4, r1
    4284:	4619      	mov	r1, r3
    4286:	4622      	mov	r2, r4
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <TIMER_1_task1_cb+0x70>)
    428a:	4608      	mov	r0, r1
    428c:	4611      	mov	r1, r2
    428e:	4798      	blx	r3
    4290:	4602      	mov	r2, r0
    4292:	4b0b      	ldr	r3, [pc, #44]	; (42c0 <TIMER_1_task1_cb+0x74>)
    4294:	601a      	str	r2, [r3, #0]
	pulses = 0;
    4296:	4b03      	ldr	r3, [pc, #12]	; (42a4 <TIMER_1_task1_cb+0x58>)
    4298:	2200      	movs	r2, #0
    429a:	601a      	str	r2, [r3, #0]
}
    429c:	bf00      	nop
    429e:	370c      	adds	r7, #12
    42a0:	46bd      	mov	sp, r7
    42a2:	bd90      	pop	{r4, r7, pc}
    42a4:	20000150 	.word	0x20000150
    42a8:	00004cc1 	.word	0x00004cc1
    42ac:	00004dad 	.word	0x00004dad
    42b0:	404e0000 	.word	0x404e0000
    42b4:	00005001 	.word	0x00005001
    42b8:	40968000 	.word	0x40968000
    42bc:	000051d1 	.word	0x000051d1
    42c0:	20000154 	.word	0x20000154

000042c4 <TIMER_1_task2_cb>:

// send the RPM value every 100ms
static void TIMER_1_task2_cb(const struct timer_task *const timer_task)
{
    42c4:	b590      	push	{r4, r7, lr}
    42c6:	b087      	sub	sp, #28
    42c8:	af02      	add	r7, sp, #8
    42ca:	6078      	str	r0, [r7, #4]
	size_t payload_length = sprintf(payload, "position = %d | speed = %lu RPM | direction = %d\n",steps, rpm, direction);
    42cc:	4b0c      	ldr	r3, [pc, #48]	; (4300 <TIMER_1_task2_cb+0x3c>)
    42ce:	681a      	ldr	r2, [r3, #0]
    42d0:	4b0c      	ldr	r3, [pc, #48]	; (4304 <TIMER_1_task2_cb+0x40>)
    42d2:	6819      	ldr	r1, [r3, #0]
    42d4:	4b0c      	ldr	r3, [pc, #48]	; (4308 <TIMER_1_task2_cb+0x44>)
    42d6:	f993 3000 	ldrsb.w	r3, [r3]
    42da:	9300      	str	r3, [sp, #0]
    42dc:	460b      	mov	r3, r1
    42de:	490b      	ldr	r1, [pc, #44]	; (430c <TIMER_1_task2_cb+0x48>)
    42e0:	480b      	ldr	r0, [pc, #44]	; (4310 <TIMER_1_task2_cb+0x4c>)
    42e2:	4c0c      	ldr	r4, [pc, #48]	; (4314 <TIMER_1_task2_cb+0x50>)
    42e4:	47a0      	blx	r4
    42e6:	4603      	mov	r3, r0
    42e8:	60fb      	str	r3, [r7, #12]
	io_write(&USART_0.io, payload, payload_length);
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	b29b      	uxth	r3, r3
    42ee:	461a      	mov	r2, r3
    42f0:	4907      	ldr	r1, [pc, #28]	; (4310 <TIMER_1_task2_cb+0x4c>)
    42f2:	4809      	ldr	r0, [pc, #36]	; (4318 <TIMER_1_task2_cb+0x54>)
    42f4:	4b09      	ldr	r3, [pc, #36]	; (431c <TIMER_1_task2_cb+0x58>)
    42f6:	4798      	blx	r3
}
    42f8:	bf00      	nop
    42fa:	3714      	adds	r7, #20
    42fc:	46bd      	mov	sp, r7
    42fe:	bd90      	pop	{r4, r7, pc}
    4300:	20000158 	.word	0x20000158
    4304:	20000154 	.word	0x20000154
    4308:	20000054 	.word	0x20000054
    430c:	00005db8 	.word	0x00005db8
    4310:	20000288 	.word	0x20000288
    4314:	00005271 	.word	0x00005271
    4318:	20000220 	.word	0x20000220
    431c:	00000e71 	.word	0x00000e71

00004320 <TIMER_1_config>:

void TIMER_1_config(void)
{
    4320:	b580      	push	{r7, lr}
    4322:	af00      	add	r7, sp, #0
	TIMER_1_task1.interval = 10;
    4324:	4b0f      	ldr	r3, [pc, #60]	; (4364 <TIMER_1_config+0x44>)
    4326:	220a      	movs	r2, #10
    4328:	609a      	str	r2, [r3, #8]
	TIMER_1_task1.cb       = TIMER_1_task1_cb;
    432a:	4b0e      	ldr	r3, [pc, #56]	; (4364 <TIMER_1_config+0x44>)
    432c:	4a0e      	ldr	r2, [pc, #56]	; (4368 <TIMER_1_config+0x48>)
    432e:	60da      	str	r2, [r3, #12]
	TIMER_1_task1.mode     = TIMER_TASK_REPEAT;
    4330:	4b0c      	ldr	r3, [pc, #48]	; (4364 <TIMER_1_config+0x44>)
    4332:	2201      	movs	r2, #1
    4334:	741a      	strb	r2, [r3, #16]
	TIMER_1_task2.interval = 100;
    4336:	4b0d      	ldr	r3, [pc, #52]	; (436c <TIMER_1_config+0x4c>)
    4338:	2264      	movs	r2, #100	; 0x64
    433a:	609a      	str	r2, [r3, #8]
	TIMER_1_task2.cb       = TIMER_1_task2_cb;
    433c:	4b0b      	ldr	r3, [pc, #44]	; (436c <TIMER_1_config+0x4c>)
    433e:	4a0c      	ldr	r2, [pc, #48]	; (4370 <TIMER_1_config+0x50>)
    4340:	60da      	str	r2, [r3, #12]
	TIMER_1_task2.mode     = TIMER_TASK_REPEAT;
    4342:	4b0a      	ldr	r3, [pc, #40]	; (436c <TIMER_1_config+0x4c>)
    4344:	2201      	movs	r2, #1
    4346:	741a      	strb	r2, [r3, #16]

	timer_add_task(&TIMER_1, &TIMER_1_task1);
    4348:	4906      	ldr	r1, [pc, #24]	; (4364 <TIMER_1_config+0x44>)
    434a:	480a      	ldr	r0, [pc, #40]	; (4374 <TIMER_1_config+0x54>)
    434c:	4b0a      	ldr	r3, [pc, #40]	; (4378 <TIMER_1_config+0x58>)
    434e:	4798      	blx	r3
	timer_add_task(&TIMER_1, &TIMER_1_task2);
    4350:	4906      	ldr	r1, [pc, #24]	; (436c <TIMER_1_config+0x4c>)
    4352:	4808      	ldr	r0, [pc, #32]	; (4374 <TIMER_1_config+0x54>)
    4354:	4b08      	ldr	r3, [pc, #32]	; (4378 <TIMER_1_config+0x58>)
    4356:	4798      	blx	r3
	timer_start(&TIMER_1);
    4358:	4806      	ldr	r0, [pc, #24]	; (4374 <TIMER_1_config+0x54>)
    435a:	4b08      	ldr	r3, [pc, #32]	; (437c <TIMER_1_config+0x5c>)
    435c:	4798      	blx	r3
}
    435e:	bf00      	nop
    4360:	bd80      	pop	{r7, pc}
    4362:	bf00      	nop
    4364:	20000164 	.word	0x20000164
    4368:	0000424d 	.word	0x0000424d
    436c:	20000178 	.word	0x20000178
    4370:	000042c5 	.word	0x000042c5
    4374:	20000204 	.word	0x20000204
    4378:	000011a1 	.word	0x000011a1
    437c:	0000114d 	.word	0x0000114d

00004380 <TIMER_2_task1_cb>:

static void TIMER_2_task1_cb(const struct timer_task *const timer_task)
{
    4380:	b590      	push	{r4, r7, lr}
    4382:	b083      	sub	sp, #12
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
	if (input_ready == true)
    4388:	4b4b      	ldr	r3, [pc, #300]	; (44b8 <TIMER_2_task1_cb+0x138>)
    438a:	781b      	ldrb	r3, [r3, #0]
    438c:	2b00      	cmp	r3, #0
    438e:	f000 808b 	beq.w	44a8 <TIMER_2_task1_cb+0x128>
	{
		pwm_disable(&PWM_0);
    4392:	484a      	ldr	r0, [pc, #296]	; (44bc <TIMER_2_task1_cb+0x13c>)
    4394:	4b4a      	ldr	r3, [pc, #296]	; (44c0 <TIMER_2_task1_cb+0x140>)
    4396:	4798      	blx	r3
		//if (level >= 0)
		//{
			//gpio_set_pin_level(MOTOR_INPUT_2, false);
			controlled_level = pi_position_control(steps, level);
    4398:	4b4a      	ldr	r3, [pc, #296]	; (44c4 <TIMER_2_task1_cb+0x144>)
    439a:	681a      	ldr	r2, [r3, #0]
    439c:	4b4a      	ldr	r3, [pc, #296]	; (44c8 <TIMER_2_task1_cb+0x148>)
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	4619      	mov	r1, r3
    43a2:	4610      	mov	r0, r2
    43a4:	4b49      	ldr	r3, [pc, #292]	; (44cc <TIMER_2_task1_cb+0x14c>)
    43a6:	4798      	blx	r3
    43a8:	4603      	mov	r3, r0
    43aa:	461a      	mov	r2, r3
    43ac:	4b48      	ldr	r3, [pc, #288]	; (44d0 <TIMER_2_task1_cb+0x150>)
    43ae:	701a      	strb	r2, [r3, #0]
			controlled_level = pi_speed_control(rpm * direction, controlled_level);
    43b0:	4b48      	ldr	r3, [pc, #288]	; (44d4 <TIMER_2_task1_cb+0x154>)
    43b2:	f993 3000 	ldrsb.w	r3, [r3]
    43b6:	461a      	mov	r2, r3
    43b8:	4b47      	ldr	r3, [pc, #284]	; (44d8 <TIMER_2_task1_cb+0x158>)
    43ba:	681b      	ldr	r3, [r3, #0]
    43bc:	fb03 f302 	mul.w	r3, r3, r2
    43c0:	461a      	mov	r2, r3
    43c2:	4b43      	ldr	r3, [pc, #268]	; (44d0 <TIMER_2_task1_cb+0x150>)
    43c4:	f993 3000 	ldrsb.w	r3, [r3]
    43c8:	4619      	mov	r1, r3
    43ca:	4610      	mov	r0, r2
    43cc:	4b43      	ldr	r3, [pc, #268]	; (44dc <TIMER_2_task1_cb+0x15c>)
    43ce:	4798      	blx	r3
    43d0:	4603      	mov	r3, r0
    43d2:	b25a      	sxtb	r2, r3
    43d4:	4b3e      	ldr	r3, [pc, #248]	; (44d0 <TIMER_2_task1_cb+0x150>)
    43d6:	701a      	strb	r2, [r3, #0]
			//controlled_level = pi_position_control(steps, level);
			//controlled_level = pi_speed_control(rpm * direction, controlled_level);
			//pwm_set_parameters(&PWM_0, 10000, 10000 + (10000 * (controlled_level / 100.0)));			
		//}
		
		if (controlled_level >= 0)
    43d8:	4b3d      	ldr	r3, [pc, #244]	; (44d0 <TIMER_2_task1_cb+0x150>)
    43da:	f993 3000 	ldrsb.w	r3, [r3]
    43de:	2b00      	cmp	r3, #0
    43e0:	db2b      	blt.n	443a <TIMER_2_task1_cb+0xba>
		{
			gpio_set_pin_level(MOTOR_INPUT_2, false);
    43e2:	2100      	movs	r1, #0
    43e4:	2006      	movs	r0, #6
    43e6:	4b3e      	ldr	r3, [pc, #248]	; (44e0 <TIMER_2_task1_cb+0x160>)
    43e8:	4798      	blx	r3
			gpio_set_pin_level(MOTOR_INPUT_1, true);
    43ea:	2101      	movs	r1, #1
    43ec:	2007      	movs	r0, #7
    43ee:	4b3c      	ldr	r3, [pc, #240]	; (44e0 <TIMER_2_task1_cb+0x160>)
    43f0:	4798      	blx	r3
			pwm_set_parameters(&PWM_0, 10000, 10000 * (controlled_level / 100.0));
    43f2:	4b37      	ldr	r3, [pc, #220]	; (44d0 <TIMER_2_task1_cb+0x150>)
    43f4:	f993 2000 	ldrsb.w	r2, [r3]
    43f8:	4b3a      	ldr	r3, [pc, #232]	; (44e4 <TIMER_2_task1_cb+0x164>)
    43fa:	4610      	mov	r0, r2
    43fc:	4798      	blx	r3
    43fe:	4c3a      	ldr	r4, [pc, #232]	; (44e8 <TIMER_2_task1_cb+0x168>)
    4400:	f04f 0200 	mov.w	r2, #0
    4404:	4b39      	ldr	r3, [pc, #228]	; (44ec <TIMER_2_task1_cb+0x16c>)
    4406:	47a0      	blx	r4
    4408:	4603      	mov	r3, r0
    440a:	460c      	mov	r4, r1
    440c:	4618      	mov	r0, r3
    440e:	4621      	mov	r1, r4
    4410:	4c37      	ldr	r4, [pc, #220]	; (44f0 <TIMER_2_task1_cb+0x170>)
    4412:	a327      	add	r3, pc, #156	; (adr r3, 44b0 <TIMER_2_task1_cb+0x130>)
    4414:	e9d3 2300 	ldrd	r2, r3, [r3]
    4418:	47a0      	blx	r4
    441a:	4603      	mov	r3, r0
    441c:	460c      	mov	r4, r1
    441e:	4619      	mov	r1, r3
    4420:	4622      	mov	r2, r4
    4422:	4b34      	ldr	r3, [pc, #208]	; (44f4 <TIMER_2_task1_cb+0x174>)
    4424:	4608      	mov	r0, r1
    4426:	4611      	mov	r1, r2
    4428:	4798      	blx	r3
    442a:	4603      	mov	r3, r0
    442c:	461a      	mov	r2, r3
    442e:	f242 7110 	movw	r1, #10000	; 0x2710
    4432:	4822      	ldr	r0, [pc, #136]	; (44bc <TIMER_2_task1_cb+0x13c>)
    4434:	4b30      	ldr	r3, [pc, #192]	; (44f8 <TIMER_2_task1_cb+0x178>)
    4436:	4798      	blx	r3
    4438:	e033      	b.n	44a2 <TIMER_2_task1_cb+0x122>
		}
		else
		{
			gpio_set_pin_level(MOTOR_INPUT_2, true);
    443a:	2101      	movs	r1, #1
    443c:	2006      	movs	r0, #6
    443e:	4b28      	ldr	r3, [pc, #160]	; (44e0 <TIMER_2_task1_cb+0x160>)
    4440:	4798      	blx	r3
			gpio_set_pin_level(MOTOR_INPUT_1, false);
    4442:	2100      	movs	r1, #0
    4444:	2007      	movs	r0, #7
    4446:	4b26      	ldr	r3, [pc, #152]	; (44e0 <TIMER_2_task1_cb+0x160>)
    4448:	4798      	blx	r3
			pwm_set_parameters(&PWM_0, 10000, 10000 + (10000 * (controlled_level / 100.0)));	
    444a:	4b21      	ldr	r3, [pc, #132]	; (44d0 <TIMER_2_task1_cb+0x150>)
    444c:	f993 2000 	ldrsb.w	r2, [r3]
    4450:	4b24      	ldr	r3, [pc, #144]	; (44e4 <TIMER_2_task1_cb+0x164>)
    4452:	4610      	mov	r0, r2
    4454:	4798      	blx	r3
    4456:	4c24      	ldr	r4, [pc, #144]	; (44e8 <TIMER_2_task1_cb+0x168>)
    4458:	f04f 0200 	mov.w	r2, #0
    445c:	4b23      	ldr	r3, [pc, #140]	; (44ec <TIMER_2_task1_cb+0x16c>)
    445e:	47a0      	blx	r4
    4460:	4603      	mov	r3, r0
    4462:	460c      	mov	r4, r1
    4464:	4618      	mov	r0, r3
    4466:	4621      	mov	r1, r4
    4468:	4c21      	ldr	r4, [pc, #132]	; (44f0 <TIMER_2_task1_cb+0x170>)
    446a:	a311      	add	r3, pc, #68	; (adr r3, 44b0 <TIMER_2_task1_cb+0x130>)
    446c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4470:	47a0      	blx	r4
    4472:	4603      	mov	r3, r0
    4474:	460c      	mov	r4, r1
    4476:	4618      	mov	r0, r3
    4478:	4621      	mov	r1, r4
    447a:	4c20      	ldr	r4, [pc, #128]	; (44fc <TIMER_2_task1_cb+0x17c>)
    447c:	a30c      	add	r3, pc, #48	; (adr r3, 44b0 <TIMER_2_task1_cb+0x130>)
    447e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4482:	47a0      	blx	r4
    4484:	4603      	mov	r3, r0
    4486:	460c      	mov	r4, r1
    4488:	4619      	mov	r1, r3
    448a:	4622      	mov	r2, r4
    448c:	4b19      	ldr	r3, [pc, #100]	; (44f4 <TIMER_2_task1_cb+0x174>)
    448e:	4608      	mov	r0, r1
    4490:	4611      	mov	r1, r2
    4492:	4798      	blx	r3
    4494:	4603      	mov	r3, r0
    4496:	461a      	mov	r2, r3
    4498:	f242 7110 	movw	r1, #10000	; 0x2710
    449c:	4807      	ldr	r0, [pc, #28]	; (44bc <TIMER_2_task1_cb+0x13c>)
    449e:	4b16      	ldr	r3, [pc, #88]	; (44f8 <TIMER_2_task1_cb+0x178>)
    44a0:	4798      	blx	r3
		}
		
		pwm_enable(&PWM_0);
    44a2:	4806      	ldr	r0, [pc, #24]	; (44bc <TIMER_2_task1_cb+0x13c>)
    44a4:	4b16      	ldr	r3, [pc, #88]	; (4500 <TIMER_2_task1_cb+0x180>)
    44a6:	4798      	blx	r3
	}
}
    44a8:	bf00      	nop
    44aa:	370c      	adds	r7, #12
    44ac:	46bd      	mov	sp, r7
    44ae:	bd90      	pop	{r4, r7, pc}
    44b0:	00000000 	.word	0x00000000
    44b4:	40c38800 	.word	0x40c38800
    44b8:	2000014a 	.word	0x2000014a
    44bc:	200001e8 	.word	0x200001e8
    44c0:	00000fc9 	.word	0x00000fc9
    44c4:	20000158 	.word	0x20000158
    44c8:	2000015c 	.word	0x2000015c
    44cc:	000048c9 	.word	0x000048c9
    44d0:	20000160 	.word	0x20000160
    44d4:	20000054 	.word	0x20000054
    44d8:	20000154 	.word	0x20000154
    44dc:	000047b5 	.word	0x000047b5
    44e0:	000040e9 	.word	0x000040e9
    44e4:	00004ce1 	.word	0x00004ce1
    44e8:	00005001 	.word	0x00005001
    44ec:	40590000 	.word	0x40590000
    44f0:	00004dad 	.word	0x00004dad
    44f4:	000051d1 	.word	0x000051d1
    44f8:	00001025 	.word	0x00001025
    44fc:	00004a49 	.word	0x00004a49
    4500:	00000f75 	.word	0x00000f75

00004504 <TIMER_2_config>:
static void TIMER_2_task2_cb(const struct timer_task *const timer_task)
{
}

void TIMER_2_config(void)
{
    4504:	b580      	push	{r7, lr}
    4506:	af00      	add	r7, sp, #0
	TIMER_2_task1.interval = 2;
    4508:	4b08      	ldr	r3, [pc, #32]	; (452c <TIMER_2_config+0x28>)
    450a:	2202      	movs	r2, #2
    450c:	609a      	str	r2, [r3, #8]
	TIMER_2_task1.cb       = TIMER_2_task1_cb;
    450e:	4b07      	ldr	r3, [pc, #28]	; (452c <TIMER_2_config+0x28>)
    4510:	4a07      	ldr	r2, [pc, #28]	; (4530 <TIMER_2_config+0x2c>)
    4512:	60da      	str	r2, [r3, #12]
	TIMER_2_task1.mode     = TIMER_TASK_REPEAT;
    4514:	4b05      	ldr	r3, [pc, #20]	; (452c <TIMER_2_config+0x28>)
    4516:	2201      	movs	r2, #1
    4518:	741a      	strb	r2, [r3, #16]
	//TIMER_2_task2.interval = 200;
	//TIMER_2_task2.cb       = TIMER_2_task2_cb;
	//TIMER_2_task2.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&TIMER_2, &TIMER_2_task1);
    451a:	4904      	ldr	r1, [pc, #16]	; (452c <TIMER_2_config+0x28>)
    451c:	4805      	ldr	r0, [pc, #20]	; (4534 <TIMER_2_config+0x30>)
    451e:	4b06      	ldr	r3, [pc, #24]	; (4538 <TIMER_2_config+0x34>)
    4520:	4798      	blx	r3
	//timer_add_task(&TIMER_2, &TIMER_2_task2);
	timer_start(&TIMER_2);
    4522:	4804      	ldr	r0, [pc, #16]	; (4534 <TIMER_2_config+0x30>)
    4524:	4b05      	ldr	r3, [pc, #20]	; (453c <TIMER_2_config+0x38>)
    4526:	4798      	blx	r3
}
    4528:	bf00      	nop
    452a:	bd80      	pop	{r7, pc}
    452c:	2000018c 	.word	0x2000018c
    4530:	00004381 	.word	0x00004381
    4534:	200001cc 	.word	0x200001cc
    4538:	000011a1 	.word	0x000011a1
    453c:	0000114d 	.word	0x0000114d

00004540 <main>:

int main(void)
{
    4540:	b580      	push	{r7, lr}
    4542:	b082      	sub	sp, #8
    4544:	af00      	add	r7, sp, #0
	uint8_t recv_char;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    4546:	4b86      	ldr	r3, [pc, #536]	; (4760 <main+0x220>)
    4548:	4798      	blx	r3
		
	pwm_set_parameters(&PWM_0, 10000, 0);
    454a:	2200      	movs	r2, #0
    454c:	f242 7110 	movw	r1, #10000	; 0x2710
    4550:	4884      	ldr	r0, [pc, #528]	; (4764 <main+0x224>)
    4552:	4b85      	ldr	r3, [pc, #532]	; (4768 <main+0x228>)
    4554:	4798      	blx	r3
	pwm_enable(&PWM_0);
    4556:	4883      	ldr	r0, [pc, #524]	; (4764 <main+0x224>)
    4558:	4b84      	ldr	r3, [pc, #528]	; (476c <main+0x22c>)
    455a:	4798      	blx	r3
	
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, uart_rx_cb);
    455c:	4a84      	ldr	r2, [pc, #528]	; (4770 <main+0x230>)
    455e:	2100      	movs	r1, #0
    4560:	4884      	ldr	r0, [pc, #528]	; (4774 <main+0x234>)
    4562:	4b85      	ldr	r3, [pc, #532]	; (4778 <main+0x238>)
    4564:	4798      	blx	r3
	usart_async_enable(&USART_0);
    4566:	4883      	ldr	r0, [pc, #524]	; (4774 <main+0x234>)
    4568:	4b84      	ldr	r3, [pc, #528]	; (477c <main+0x23c>)
    456a:	4798      	blx	r3
	
	TIMER_1_config();
    456c:	4b84      	ldr	r3, [pc, #528]	; (4780 <main+0x240>)
    456e:	4798      	blx	r3
	TIMER_2_config();
    4570:	4b84      	ldr	r3, [pc, #528]	; (4784 <main+0x244>)
    4572:	4798      	blx	r3
	
	
	NVIC_SetPriority(TC0_IRQn, 3);
    4574:	2103      	movs	r1, #3
    4576:	206b      	movs	r0, #107	; 0x6b
    4578:	4b83      	ldr	r3, [pc, #524]	; (4788 <main+0x248>)
    457a:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
    457c:	206b      	movs	r0, #107	; 0x6b
    457e:	4b83      	ldr	r3, [pc, #524]	; (478c <main+0x24c>)
    4580:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
    4582:	b662      	cpsie	i
	__enable_irq();
	while (1) {	
		if (data_arrived == 0) {
    4584:	4b82      	ldr	r3, [pc, #520]	; (4790 <main+0x250>)
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	2b00      	cmp	r3, #0
    458a:	f000 80e6 	beq.w	475a <main+0x21a>
			continue;
		}

		while (io_read(&USART_0.io, &recv_char, 1) == 1) {
    458e:	e023      	b.n	45d8 <main+0x98>
			if (recv_char == '\n')
    4590:	79fb      	ldrb	r3, [r7, #7]
    4592:	2b0a      	cmp	r3, #10
    4594:	d10c      	bne.n	45b0 <main+0x70>
			{
				uart_ready = true;
    4596:	4b7f      	ldr	r3, [pc, #508]	; (4794 <main+0x254>)
    4598:	2201      	movs	r2, #1
    459a:	701a      	strb	r2, [r3, #0]
				input_ready = false;
    459c:	4b7e      	ldr	r3, [pc, #504]	; (4798 <main+0x258>)
    459e:	2200      	movs	r2, #0
    45a0:	701a      	strb	r2, [r3, #0]
				input_char_count--;
    45a2:	4b7e      	ldr	r3, [pc, #504]	; (479c <main+0x25c>)
    45a4:	781b      	ldrb	r3, [r3, #0]
    45a6:	3b01      	subs	r3, #1
    45a8:	b2da      	uxtb	r2, r3
    45aa:	4b7c      	ldr	r3, [pc, #496]	; (479c <main+0x25c>)
    45ac:	701a      	strb	r2, [r3, #0]
				break;
    45ae:	e01c      	b.n	45ea <main+0xaa>
			}
			user_input[input_char_count++] = recv_char;
    45b0:	4b7a      	ldr	r3, [pc, #488]	; (479c <main+0x25c>)
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	1c5a      	adds	r2, r3, #1
    45b6:	b2d1      	uxtb	r1, r2
    45b8:	4a78      	ldr	r2, [pc, #480]	; (479c <main+0x25c>)
    45ba:	7011      	strb	r1, [r2, #0]
    45bc:	461a      	mov	r2, r3
    45be:	79f9      	ldrb	r1, [r7, #7]
    45c0:	4b77      	ldr	r3, [pc, #476]	; (47a0 <main+0x260>)
    45c2:	5499      	strb	r1, [r3, r2]
			while (io_write(&USART_0.io, &recv_char, 1) != 1) {
    45c4:	bf00      	nop
    45c6:	1dfb      	adds	r3, r7, #7
    45c8:	2201      	movs	r2, #1
    45ca:	4619      	mov	r1, r3
    45cc:	4869      	ldr	r0, [pc, #420]	; (4774 <main+0x234>)
    45ce:	4b75      	ldr	r3, [pc, #468]	; (47a4 <main+0x264>)
    45d0:	4798      	blx	r3
    45d2:	4603      	mov	r3, r0
    45d4:	2b01      	cmp	r3, #1
    45d6:	d1f6      	bne.n	45c6 <main+0x86>
		while (io_read(&USART_0.io, &recv_char, 1) == 1) {
    45d8:	1dfb      	adds	r3, r7, #7
    45da:	2201      	movs	r2, #1
    45dc:	4619      	mov	r1, r3
    45de:	4865      	ldr	r0, [pc, #404]	; (4774 <main+0x234>)
    45e0:	4b71      	ldr	r3, [pc, #452]	; (47a8 <main+0x268>)
    45e2:	4798      	blx	r3
    45e4:	4603      	mov	r3, r0
    45e6:	2b01      	cmp	r3, #1
    45e8:	d0d2      	beq.n	4590 <main+0x50>
			}
		}
		data_arrived = 0;
    45ea:	4b69      	ldr	r3, [pc, #420]	; (4790 <main+0x250>)
    45ec:	2200      	movs	r2, #0
    45ee:	601a      	str	r2, [r3, #0]
		if (uart_ready)
    45f0:	4b68      	ldr	r3, [pc, #416]	; (4794 <main+0x254>)
    45f2:	781b      	ldrb	r3, [r3, #0]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d0c5      	beq.n	4584 <main+0x44>
		{
			level = 0;
    45f8:	4b6c      	ldr	r3, [pc, #432]	; (47ac <main+0x26c>)
    45fa:	2200      	movs	r2, #0
    45fc:	601a      	str	r2, [r3, #0]
			
			if (input_char_count == 2)
    45fe:	4b67      	ldr	r3, [pc, #412]	; (479c <main+0x25c>)
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	2b02      	cmp	r3, #2
    4604:	d105      	bne.n	4612 <main+0xd2>
			{
				level = user_input[1] - '0';
    4606:	4b66      	ldr	r3, [pc, #408]	; (47a0 <main+0x260>)
    4608:	785b      	ldrb	r3, [r3, #1]
    460a:	3b30      	subs	r3, #48	; 0x30
    460c:	4a67      	ldr	r2, [pc, #412]	; (47ac <main+0x26c>)
    460e:	6013      	str	r3, [r2, #0]
    4610:	e074      	b.n	46fc <main+0x1bc>
			} 
			else if (input_char_count == 3)
    4612:	4b62      	ldr	r3, [pc, #392]	; (479c <main+0x25c>)
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	2b03      	cmp	r3, #3
    4618:	d10f      	bne.n	463a <main+0xfa>
			{
				level = ((user_input[1] - '0') * 10) + (user_input[2] - '0');
    461a:	4b61      	ldr	r3, [pc, #388]	; (47a0 <main+0x260>)
    461c:	785b      	ldrb	r3, [r3, #1]
    461e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4622:	4613      	mov	r3, r2
    4624:	009b      	lsls	r3, r3, #2
    4626:	4413      	add	r3, r2
    4628:	005b      	lsls	r3, r3, #1
    462a:	461a      	mov	r2, r3
    462c:	4b5c      	ldr	r3, [pc, #368]	; (47a0 <main+0x260>)
    462e:	789b      	ldrb	r3, [r3, #2]
    4630:	3b30      	subs	r3, #48	; 0x30
    4632:	4413      	add	r3, r2
    4634:	4a5d      	ldr	r2, [pc, #372]	; (47ac <main+0x26c>)
    4636:	6013      	str	r3, [r2, #0]
    4638:	e060      	b.n	46fc <main+0x1bc>
			}
			else if (input_char_count == 4)
    463a:	4b58      	ldr	r3, [pc, #352]	; (479c <main+0x25c>)
    463c:	781b      	ldrb	r3, [r3, #0]
    463e:	2b04      	cmp	r3, #4
    4640:	d115      	bne.n	466e <main+0x12e>
			{
				level = ((user_input[1] - '0') * 100) +  ((user_input[2] - '0') * 10) + (user_input[3] - '0');
    4642:	4b57      	ldr	r3, [pc, #348]	; (47a0 <main+0x260>)
    4644:	785b      	ldrb	r3, [r3, #1]
    4646:	3b30      	subs	r3, #48	; 0x30
    4648:	2264      	movs	r2, #100	; 0x64
    464a:	fb02 f103 	mul.w	r1, r2, r3
    464e:	4b54      	ldr	r3, [pc, #336]	; (47a0 <main+0x260>)
    4650:	789b      	ldrb	r3, [r3, #2]
    4652:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4656:	4613      	mov	r3, r2
    4658:	009b      	lsls	r3, r3, #2
    465a:	4413      	add	r3, r2
    465c:	005b      	lsls	r3, r3, #1
    465e:	18ca      	adds	r2, r1, r3
    4660:	4b4f      	ldr	r3, [pc, #316]	; (47a0 <main+0x260>)
    4662:	78db      	ldrb	r3, [r3, #3]
    4664:	3b30      	subs	r3, #48	; 0x30
    4666:	4413      	add	r3, r2
    4668:	4a50      	ldr	r2, [pc, #320]	; (47ac <main+0x26c>)
    466a:	6013      	str	r3, [r2, #0]
    466c:	e046      	b.n	46fc <main+0x1bc>
			}
			else if (input_char_count == 5)
    466e:	4b4b      	ldr	r3, [pc, #300]	; (479c <main+0x25c>)
    4670:	781b      	ldrb	r3, [r3, #0]
    4672:	2b05      	cmp	r3, #5
    4674:	d11d      	bne.n	46b2 <main+0x172>
			{
				level = ((user_input[1] - '0') * 1000) + ((user_input[2] - '0') * 100) +  ((user_input[3] - '0') * 10) + (user_input[4] - '0');
    4676:	4b4a      	ldr	r3, [pc, #296]	; (47a0 <main+0x260>)
    4678:	785b      	ldrb	r3, [r3, #1]
    467a:	3b30      	subs	r3, #48	; 0x30
    467c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4680:	fb02 f203 	mul.w	r2, r2, r3
    4684:	4b46      	ldr	r3, [pc, #280]	; (47a0 <main+0x260>)
    4686:	789b      	ldrb	r3, [r3, #2]
    4688:	3b30      	subs	r3, #48	; 0x30
    468a:	2164      	movs	r1, #100	; 0x64
    468c:	fb01 f303 	mul.w	r3, r1, r3
    4690:	18d1      	adds	r1, r2, r3
    4692:	4b43      	ldr	r3, [pc, #268]	; (47a0 <main+0x260>)
    4694:	78db      	ldrb	r3, [r3, #3]
    4696:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    469a:	4613      	mov	r3, r2
    469c:	009b      	lsls	r3, r3, #2
    469e:	4413      	add	r3, r2
    46a0:	005b      	lsls	r3, r3, #1
    46a2:	18ca      	adds	r2, r1, r3
    46a4:	4b3e      	ldr	r3, [pc, #248]	; (47a0 <main+0x260>)
    46a6:	791b      	ldrb	r3, [r3, #4]
    46a8:	3b30      	subs	r3, #48	; 0x30
    46aa:	4413      	add	r3, r2
    46ac:	4a3f      	ldr	r2, [pc, #252]	; (47ac <main+0x26c>)
    46ae:	6013      	str	r3, [r2, #0]
    46b0:	e024      	b.n	46fc <main+0x1bc>
			}
			else
			{
				level = ((user_input[1] - '0') * 10000) + ((user_input[2] - '0') * 1000) + ((user_input[3] - '0') * 100) +  ((user_input[4] - '0') * 10) + (user_input[5] - '0');
    46b2:	4b3b      	ldr	r3, [pc, #236]	; (47a0 <main+0x260>)
    46b4:	785b      	ldrb	r3, [r3, #1]
    46b6:	3b30      	subs	r3, #48	; 0x30
    46b8:	f242 7210 	movw	r2, #10000	; 0x2710
    46bc:	fb02 f203 	mul.w	r2, r2, r3
    46c0:	4b37      	ldr	r3, [pc, #220]	; (47a0 <main+0x260>)
    46c2:	789b      	ldrb	r3, [r3, #2]
    46c4:	3b30      	subs	r3, #48	; 0x30
    46c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    46ca:	fb01 f303 	mul.w	r3, r1, r3
    46ce:	441a      	add	r2, r3
    46d0:	4b33      	ldr	r3, [pc, #204]	; (47a0 <main+0x260>)
    46d2:	78db      	ldrb	r3, [r3, #3]
    46d4:	3b30      	subs	r3, #48	; 0x30
    46d6:	2164      	movs	r1, #100	; 0x64
    46d8:	fb01 f303 	mul.w	r3, r1, r3
    46dc:	18d1      	adds	r1, r2, r3
    46de:	4b30      	ldr	r3, [pc, #192]	; (47a0 <main+0x260>)
    46e0:	791b      	ldrb	r3, [r3, #4]
    46e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    46e6:	4613      	mov	r3, r2
    46e8:	009b      	lsls	r3, r3, #2
    46ea:	4413      	add	r3, r2
    46ec:	005b      	lsls	r3, r3, #1
    46ee:	18ca      	adds	r2, r1, r3
    46f0:	4b2b      	ldr	r3, [pc, #172]	; (47a0 <main+0x260>)
    46f2:	795b      	ldrb	r3, [r3, #5]
    46f4:	3b30      	subs	r3, #48	; 0x30
    46f6:	4413      	add	r3, r2
    46f8:	4a2c      	ldr	r2, [pc, #176]	; (47ac <main+0x26c>)
    46fa:	6013      	str	r3, [r2, #0]
			}
			
			if(user_input[0] == '+')
    46fc:	4b28      	ldr	r3, [pc, #160]	; (47a0 <main+0x260>)
    46fe:	781b      	ldrb	r3, [r3, #0]
    4700:	2b2b      	cmp	r3, #43	; 0x2b
    4702:	d104      	bne.n	470e <main+0x1ce>
			{
				level = level;
    4704:	4b29      	ldr	r3, [pc, #164]	; (47ac <main+0x26c>)
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	4a28      	ldr	r2, [pc, #160]	; (47ac <main+0x26c>)
    470a:	6013      	str	r3, [r2, #0]
    470c:	e008      	b.n	4720 <main+0x1e0>
			}
			else if (user_input[0] == '-')
    470e:	4b24      	ldr	r3, [pc, #144]	; (47a0 <main+0x260>)
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	2b2d      	cmp	r3, #45	; 0x2d
    4714:	d104      	bne.n	4720 <main+0x1e0>
			{
				level = -level;
    4716:	4b25      	ldr	r3, [pc, #148]	; (47ac <main+0x26c>)
    4718:	681b      	ldr	r3, [r3, #0]
    471a:	425b      	negs	r3, r3
    471c:	4a23      	ldr	r2, [pc, #140]	; (47ac <main+0x26c>)
    471e:	6013      	str	r3, [r2, #0]
			}
			
			if (level > 3000)
    4720:	4b22      	ldr	r3, [pc, #136]	; (47ac <main+0x26c>)
    4722:	681b      	ldr	r3, [r3, #0]
    4724:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4728:	4293      	cmp	r3, r2
    472a:	dd04      	ble.n	4736 <main+0x1f6>
			{
				level = 3000;
    472c:	4b1f      	ldr	r3, [pc, #124]	; (47ac <main+0x26c>)
    472e:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4732:	601a      	str	r2, [r3, #0]
    4734:	e007      	b.n	4746 <main+0x206>
			}
			else if (level < -3000)
    4736:	4b1d      	ldr	r3, [pc, #116]	; (47ac <main+0x26c>)
    4738:	681b      	ldr	r3, [r3, #0]
    473a:	4a1d      	ldr	r2, [pc, #116]	; (47b0 <main+0x270>)
    473c:	4293      	cmp	r3, r2
    473e:	da02      	bge.n	4746 <main+0x206>
			{
				level = -3000;
    4740:	4b1a      	ldr	r3, [pc, #104]	; (47ac <main+0x26c>)
    4742:	4a1b      	ldr	r2, [pc, #108]	; (47b0 <main+0x270>)
    4744:	601a      	str	r2, [r3, #0]
			}
	
			input_ready = true;
    4746:	4b14      	ldr	r3, [pc, #80]	; (4798 <main+0x258>)
    4748:	2201      	movs	r2, #1
    474a:	701a      	strb	r2, [r3, #0]
			uart_ready = false;
    474c:	4b11      	ldr	r3, [pc, #68]	; (4794 <main+0x254>)
    474e:	2200      	movs	r2, #0
    4750:	701a      	strb	r2, [r3, #0]
			input_char_count = 0;
    4752:	4b12      	ldr	r3, [pc, #72]	; (479c <main+0x25c>)
    4754:	2200      	movs	r2, #0
    4756:	701a      	strb	r2, [r3, #0]
    4758:	e714      	b.n	4584 <main+0x44>
			continue;
    475a:	bf00      	nop
		if (data_arrived == 0) {
    475c:	e712      	b.n	4584 <main+0x44>
    475e:	bf00      	nop
    4760:	000002d1 	.word	0x000002d1
    4764:	200001e8 	.word	0x200001e8
    4768:	00001025 	.word	0x00001025
    476c:	00000f75 	.word	0x00000f75
    4770:	0000422d 	.word	0x0000422d
    4774:	20000220 	.word	0x20000220
    4778:	00001509 	.word	0x00001509
    477c:	000014c9 	.word	0x000014c9
    4780:	00004321 	.word	0x00004321
    4784:	00004505 	.word	0x00004505
    4788:	00003eb1 	.word	0x00003eb1
    478c:	00003e75 	.word	0x00003e75
    4790:	20000144 	.word	0x20000144
    4794:	20000149 	.word	0x20000149
    4798:	2000014a 	.word	0x2000014a
    479c:	20000148 	.word	0x20000148
    47a0:	20000280 	.word	0x20000280
    47a4:	00000e71 	.word	0x00000e71
    47a8:	00000ec1 	.word	0x00000ec1
    47ac:	2000015c 	.word	0x2000015c
    47b0:	fffff448 	.word	0xfffff448

000047b4 <pi_speed_control>:
 // need to check these values during testing
 #define RPM_2_TICKS 1
 #define POS_2_TICKS 1

int32_t pi_speed_control(int32_t current_speed, int32_t target_speed)
{
    47b4:	b590      	push	{r4, r7, lr}
    47b6:	b08f      	sub	sp, #60	; 0x3c
    47b8:	af04      	add	r7, sp, #16
    47ba:	6078      	str	r0, [r7, #4]
    47bc:	6039      	str	r1, [r7, #0]
	volatile float current_error;
	uint8_t level_tmp = 0;
    47be:	2300      	movs	r3, #0
    47c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	volatile float P_term = 0.0;
    47c4:	f04f 0300 	mov.w	r3, #0
    47c8:	613b      	str	r3, [r7, #16]
	volatile float I_term = 0.0;
    47ca:	f04f 0300 	mov.w	r3, #0
    47ce:	60fb      	str	r3, [r7, #12]
	float i_max = 100.0;
    47d0:	4b34      	ldr	r3, [pc, #208]	; (48a4 <pi_speed_control+0xf0>)
    47d2:	623b      	str	r3, [r7, #32]
	float i_min = -100.0;
    47d4:	4b34      	ldr	r3, [pc, #208]	; (48a8 <pi_speed_control+0xf4>)
    47d6:	61fb      	str	r3, [r7, #28]
	
	current_error = abs(target_speed - current_speed);
    47d8:	683a      	ldr	r2, [r7, #0]
    47da:	687b      	ldr	r3, [r7, #4]
    47dc:	1ad3      	subs	r3, r2, r3
    47de:	2b00      	cmp	r3, #0
    47e0:	bfb8      	it	lt
    47e2:	425b      	neglt	r3, r3
    47e4:	ee07 3a90 	vmov	s15, r3
    47e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    47ec:	edc7 7a05 	vstr	s15, [r7, #20]
	P_error = current_error;
    47f0:	697b      	ldr	r3, [r7, #20]
    47f2:	4a2e      	ldr	r2, [pc, #184]	; (48ac <pi_speed_control+0xf8>)
    47f4:	6013      	str	r3, [r2, #0]
// 	else if (I_error < i_min)
// 	{
// 		I_error = i_min;
// 	}
	
	P_term = Kp_speed*P_error;
    47f6:	4b2e      	ldr	r3, [pc, #184]	; (48b0 <pi_speed_control+0xfc>)
    47f8:	ed93 7a00 	vldr	s14, [r3]
    47fc:	4b2b      	ldr	r3, [pc, #172]	; (48ac <pi_speed_control+0xf8>)
    47fe:	edd3 7a00 	vldr	s15, [r3]
    4802:	ee67 7a27 	vmul.f32	s15, s14, s15
    4806:	edc7 7a04 	vstr	s15, [r7, #16]
	//I_term = Ki_speed*I_error;
	
	// Currently 10000 ticks configured as time period for the PWM functionality
	// We need to multiple the P and I terms with RPM_2_TICKS as output is not in percentage but ticks
	dutycycle_speed = (P_term)*RPM_2_TICKS;
    480a:	693b      	ldr	r3, [r7, #16]
    480c:	4a29      	ldr	r2, [pc, #164]	; (48b4 <pi_speed_control+0x100>)
    480e:	6013      	str	r3, [r2, #0]
	
	if (dutycycle_speed > 100)
    4810:	4b28      	ldr	r3, [pc, #160]	; (48b4 <pi_speed_control+0x100>)
    4812:	edd3 7a00 	vldr	s15, [r3]
    4816:	ed9f 7a28 	vldr	s14, [pc, #160]	; 48b8 <pi_speed_control+0x104>
    481a:	eef4 7ac7 	vcmpe.f32	s15, s14
    481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4822:	dd03      	ble.n	482c <pi_speed_control+0x78>
	{
		dutycycle_speed = 100;
    4824:	4b23      	ldr	r3, [pc, #140]	; (48b4 <pi_speed_control+0x100>)
    4826:	4a1f      	ldr	r2, [pc, #124]	; (48a4 <pi_speed_control+0xf0>)
    4828:	601a      	str	r2, [r3, #0]
    482a:	e00b      	b.n	4844 <pi_speed_control+0x90>
	}
	else if (dutycycle_speed < 0)
    482c:	4b21      	ldr	r3, [pc, #132]	; (48b4 <pi_speed_control+0x100>)
    482e:	edd3 7a00 	vldr	s15, [r3]
    4832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    483a:	d503      	bpl.n	4844 <pi_speed_control+0x90>
	{
		dutycycle_speed = 0;
    483c:	4b1d      	ldr	r3, [pc, #116]	; (48b4 <pi_speed_control+0x100>)
    483e:	f04f 0200 	mov.w	r2, #0
    4842:	601a      	str	r2, [r3, #0]
	}
	size_t debug_length = sprintf(debug, "current_error = %ld | P_term = %ld | I_term = %ld | dutycycle_speed = %ld | current speed = %ld | target speed = %ld\n",(int32_t)current_error, (int32_t)P_term, (int32_t)I_term, (int32_t)dutycycle_speed, (int32_t)current_speed, (int32_t)target_speed);
    4844:	edd7 7a05 	vldr	s15, [r7, #20]
    4848:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    484c:	edd7 7a04 	vldr	s15, [r7, #16]
    4850:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    4854:	edd7 7a03 	vldr	s15, [r7, #12]
    4858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    485c:	ee17 2a90 	vmov	r2, s15
    4860:	4b14      	ldr	r3, [pc, #80]	; (48b4 <pi_speed_control+0x100>)
    4862:	edd3 7a00 	vldr	s15, [r3]
    4866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    486a:	ee17 1a90 	vmov	r1, s15
    486e:	683b      	ldr	r3, [r7, #0]
    4870:	9303      	str	r3, [sp, #12]
    4872:	687b      	ldr	r3, [r7, #4]
    4874:	9302      	str	r3, [sp, #8]
    4876:	9101      	str	r1, [sp, #4]
    4878:	9200      	str	r2, [sp, #0]
    487a:	ee16 3a90 	vmov	r3, s13
    487e:	ee17 2a10 	vmov	r2, s14
    4882:	490e      	ldr	r1, [pc, #56]	; (48bc <pi_speed_control+0x108>)
    4884:	480e      	ldr	r0, [pc, #56]	; (48c0 <pi_speed_control+0x10c>)
    4886:	4c0f      	ldr	r4, [pc, #60]	; (48c4 <pi_speed_control+0x110>)
    4888:	47a0      	blx	r4
    488a:	4603      	mov	r3, r0
    488c:	61bb      	str	r3, [r7, #24]
	
	//io_write(&USART_0.io, debug, debug_length);
	
	return dutycycle_speed;
    488e:	4b09      	ldr	r3, [pc, #36]	; (48b4 <pi_speed_control+0x100>)
    4890:	edd3 7a00 	vldr	s15, [r3]
    4894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4898:	ee17 3a90 	vmov	r3, s15
}
    489c:	4618      	mov	r0, r3
    489e:	372c      	adds	r7, #44	; 0x2c
    48a0:	46bd      	mov	sp, r7
    48a2:	bd90      	pop	{r4, r7, pc}
    48a4:	42c80000 	.word	0x42c80000
    48a8:	c2c80000 	.word	0xc2c80000
    48ac:	200001b8 	.word	0x200001b8
    48b0:	20000058 	.word	0x20000058
    48b4:	200001bc 	.word	0x200001bc
    48b8:	42c80000 	.word	0x42c80000
    48bc:	00005dec 	.word	0x00005dec
    48c0:	200002bc 	.word	0x200002bc
    48c4:	00005271 	.word	0x00005271

000048c8 <pi_position_control>:

uint8_t pi_position_control(uint32_t current_position, uint32_t target_position)
{
    48c8:	b590      	push	{r4, r7, lr}
    48ca:	b089      	sub	sp, #36	; 0x24
    48cc:	af00      	add	r7, sp, #0
    48ce:	6078      	str	r0, [r7, #4]
    48d0:	6039      	str	r1, [r7, #0]
	float current_error;
	uint8_t level_tmp = 0;
    48d2:	2300      	movs	r3, #0
    48d4:	77fb      	strb	r3, [r7, #31]
	
	float P_term = 0.0;
    48d6:	f04f 0300 	mov.w	r3, #0
    48da:	61bb      	str	r3, [r7, #24]
	float I_term = 0.0;
    48dc:	f04f 0300 	mov.w	r3, #0
    48e0:	617b      	str	r3, [r7, #20]
	float i_max = 100.0;
    48e2:	4b48      	ldr	r3, [pc, #288]	; (4a04 <pi_position_control+0x13c>)
    48e4:	613b      	str	r3, [r7, #16]
	float i_min = -100.0;
    48e6:	4b48      	ldr	r3, [pc, #288]	; (4a08 <pi_position_control+0x140>)
    48e8:	60fb      	str	r3, [r7, #12]
	
	current_error = (float)target_position - (float)current_position;
    48ea:	683b      	ldr	r3, [r7, #0]
    48ec:	ee07 3a90 	vmov	s15, r3
    48f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	ee07 3a90 	vmov	s15, r3
    48fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    48fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    4902:	edc7 7a02 	vstr	s15, [r7, #8]
	P_error = current_error;
    4906:	4a41      	ldr	r2, [pc, #260]	; (4a0c <pi_position_control+0x144>)
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	6013      	str	r3, [r2, #0]
	I_error = I_error + current_error;
    490c:	4b40      	ldr	r3, [pc, #256]	; (4a10 <pi_position_control+0x148>)
    490e:	ed93 7a00 	vldr	s14, [r3]
    4912:	edd7 7a02 	vldr	s15, [r7, #8]
    4916:	ee77 7a27 	vadd.f32	s15, s14, s15
    491a:	4b3d      	ldr	r3, [pc, #244]	; (4a10 <pi_position_control+0x148>)
    491c:	edc3 7a00 	vstr	s15, [r3]
	
	// Integral error control (a.k.a integral anti windup). In order to make sure the I_term doesn't increase to infinity
	if (I_error > i_max)
    4920:	4b3b      	ldr	r3, [pc, #236]	; (4a10 <pi_position_control+0x148>)
    4922:	ed93 7a00 	vldr	s14, [r3]
    4926:	edd7 7a04 	vldr	s15, [r7, #16]
    492a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4932:	dd03      	ble.n	493c <pi_position_control+0x74>
	{
		I_error = i_max;
    4934:	4a36      	ldr	r2, [pc, #216]	; (4a10 <pi_position_control+0x148>)
    4936:	693b      	ldr	r3, [r7, #16]
    4938:	6013      	str	r3, [r2, #0]
    493a:	e00c      	b.n	4956 <pi_position_control+0x8e>
	}
	else if (I_error < i_min)
    493c:	4b34      	ldr	r3, [pc, #208]	; (4a10 <pi_position_control+0x148>)
    493e:	ed93 7a00 	vldr	s14, [r3]
    4942:	edd7 7a03 	vldr	s15, [r7, #12]
    4946:	eeb4 7ae7 	vcmpe.f32	s14, s15
    494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    494e:	d502      	bpl.n	4956 <pi_position_control+0x8e>
	{
		I_error = i_min;
    4950:	4a2f      	ldr	r2, [pc, #188]	; (4a10 <pi_position_control+0x148>)
    4952:	68fb      	ldr	r3, [r7, #12]
    4954:	6013      	str	r3, [r2, #0]
	}
	
	P_term = Kp_pos*P_error;
    4956:	4b2f      	ldr	r3, [pc, #188]	; (4a14 <pi_position_control+0x14c>)
    4958:	ed93 7a00 	vldr	s14, [r3]
    495c:	4b2b      	ldr	r3, [pc, #172]	; (4a0c <pi_position_control+0x144>)
    495e:	edd3 7a00 	vldr	s15, [r3]
    4962:	ee67 7a27 	vmul.f32	s15, s14, s15
    4966:	edc7 7a06 	vstr	s15, [r7, #24]
	I_term = Ki_pos*I_error;
    496a:	4b2b      	ldr	r3, [pc, #172]	; (4a18 <pi_position_control+0x150>)
    496c:	ed93 7a00 	vldr	s14, [r3]
    4970:	4b27      	ldr	r3, [pc, #156]	; (4a10 <pi_position_control+0x148>)
    4972:	edd3 7a00 	vldr	s15, [r3]
    4976:	ee67 7a27 	vmul.f32	s15, s14, s15
    497a:	edc7 7a05 	vstr	s15, [r7, #20]
	
	// Currently 10000 ticks configured as time period for the PWM functionality
	// We need to multiple the P and I terms with POS_2_TICKS as output is not in percentage but ticks
	
	dutycycle_pos = (P_term + I_term)*POS_2_TICKS + dutycycle_pos;
    497e:	ed97 7a06 	vldr	s14, [r7, #24]
    4982:	edd7 7a05 	vldr	s15, [r7, #20]
    4986:	ee37 7a27 	vadd.f32	s14, s14, s15
    498a:	4b24      	ldr	r3, [pc, #144]	; (4a1c <pi_position_control+0x154>)
    498c:	edd3 7a00 	vldr	s15, [r3]
    4990:	ee77 7a27 	vadd.f32	s15, s14, s15
    4994:	4b21      	ldr	r3, [pc, #132]	; (4a1c <pi_position_control+0x154>)
    4996:	edc3 7a00 	vstr	s15, [r3]
	
	// make sure the duty cycle lies within the period ticks (which is configured as 10000 here)
	if (dutycycle_pos > 10000)
    499a:	4b20      	ldr	r3, [pc, #128]	; (4a1c <pi_position_control+0x154>)
    499c:	edd3 7a00 	vldr	s15, [r3]
    49a0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4a20 <pi_position_control+0x158>
    49a4:	eef4 7ac7 	vcmpe.f32	s15, s14
    49a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    49ac:	dd03      	ble.n	49b6 <pi_position_control+0xee>
	{
		dutycycle_pos = 10000;
    49ae:	4b1b      	ldr	r3, [pc, #108]	; (4a1c <pi_position_control+0x154>)
    49b0:	4a1c      	ldr	r2, [pc, #112]	; (4a24 <pi_position_control+0x15c>)
    49b2:	601a      	str	r2, [r3, #0]
    49b4:	e00c      	b.n	49d0 <pi_position_control+0x108>
	}
	else if (dutycycle_pos < 3)
    49b6:	4b19      	ldr	r3, [pc, #100]	; (4a1c <pi_position_control+0x154>)
    49b8:	edd3 7a00 	vldr	s15, [r3]
    49bc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    49c0:	eef4 7ac7 	vcmpe.f32	s15, s14
    49c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    49c8:	d502      	bpl.n	49d0 <pi_position_control+0x108>
	{
		dutycycle_pos = 3;
    49ca:	4b14      	ldr	r3, [pc, #80]	; (4a1c <pi_position_control+0x154>)
    49cc:	4a16      	ldr	r2, [pc, #88]	; (4a28 <pi_position_control+0x160>)
    49ce:	601a      	str	r2, [r3, #0]
	}
	
	level_tmp = (uint8_t)(dutycycle_pos/100.0);
    49d0:	4b12      	ldr	r3, [pc, #72]	; (4a1c <pi_position_control+0x154>)
    49d2:	681a      	ldr	r2, [r3, #0]
    49d4:	4b15      	ldr	r3, [pc, #84]	; (4a2c <pi_position_control+0x164>)
    49d6:	4610      	mov	r0, r2
    49d8:	4798      	blx	r3
    49da:	4c15      	ldr	r4, [pc, #84]	; (4a30 <pi_position_control+0x168>)
    49dc:	f04f 0200 	mov.w	r2, #0
    49e0:	4b14      	ldr	r3, [pc, #80]	; (4a34 <pi_position_control+0x16c>)
    49e2:	47a0      	blx	r4
    49e4:	4603      	mov	r3, r0
    49e6:	460c      	mov	r4, r1
    49e8:	4619      	mov	r1, r3
    49ea:	4622      	mov	r2, r4
    49ec:	4b12      	ldr	r3, [pc, #72]	; (4a38 <pi_position_control+0x170>)
    49ee:	4608      	mov	r0, r1
    49f0:	4611      	mov	r1, r2
    49f2:	4798      	blx	r3
    49f4:	4603      	mov	r3, r0
    49f6:	77fb      	strb	r3, [r7, #31]
	
	return level_tmp;
    49f8:	7ffb      	ldrb	r3, [r7, #31]
	
    49fa:	4618      	mov	r0, r3
    49fc:	3724      	adds	r7, #36	; 0x24
    49fe:	46bd      	mov	sp, r7
    4a00:	bd90      	pop	{r4, r7, pc}
    4a02:	bf00      	nop
    4a04:	42c80000 	.word	0x42c80000
    4a08:	c2c80000 	.word	0xc2c80000
    4a0c:	200001b8 	.word	0x200001b8
    4a10:	200001b4 	.word	0x200001b4
    4a14:	20000060 	.word	0x20000060
    4a18:	20000064 	.word	0x20000064
    4a1c:	200001c0 	.word	0x200001c0
    4a20:	461c4000 	.word	0x461c4000
    4a24:	461c4000 	.word	0x461c4000
    4a28:	40400000 	.word	0x40400000
    4a2c:	00004d05 	.word	0x00004d05
    4a30:	00005001 	.word	0x00005001
    4a34:	40590000 	.word	0x40590000
    4a38:	000051d1 	.word	0x000051d1

00004a3c <__aeabi_drsub>:
    4a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4a40:	e002      	b.n	4a48 <__adddf3>
    4a42:	bf00      	nop

00004a44 <__aeabi_dsub>:
    4a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004a48 <__adddf3>:
    4a48:	b530      	push	{r4, r5, lr}
    4a4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4a4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4a52:	ea94 0f05 	teq	r4, r5
    4a56:	bf08      	it	eq
    4a58:	ea90 0f02 	teqeq	r0, r2
    4a5c:	bf1f      	itttt	ne
    4a5e:	ea54 0c00 	orrsne.w	ip, r4, r0
    4a62:	ea55 0c02 	orrsne.w	ip, r5, r2
    4a66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4a6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4a6e:	f000 80e2 	beq.w	4c36 <__adddf3+0x1ee>
    4a72:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4a76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4a7a:	bfb8      	it	lt
    4a7c:	426d      	neglt	r5, r5
    4a7e:	dd0c      	ble.n	4a9a <__adddf3+0x52>
    4a80:	442c      	add	r4, r5
    4a82:	ea80 0202 	eor.w	r2, r0, r2
    4a86:	ea81 0303 	eor.w	r3, r1, r3
    4a8a:	ea82 0000 	eor.w	r0, r2, r0
    4a8e:	ea83 0101 	eor.w	r1, r3, r1
    4a92:	ea80 0202 	eor.w	r2, r0, r2
    4a96:	ea81 0303 	eor.w	r3, r1, r3
    4a9a:	2d36      	cmp	r5, #54	; 0x36
    4a9c:	bf88      	it	hi
    4a9e:	bd30      	pophi	{r4, r5, pc}
    4aa0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4aa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4aa8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4aac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4ab0:	d002      	beq.n	4ab8 <__adddf3+0x70>
    4ab2:	4240      	negs	r0, r0
    4ab4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4ab8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4abc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4ac0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4ac4:	d002      	beq.n	4acc <__adddf3+0x84>
    4ac6:	4252      	negs	r2, r2
    4ac8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4acc:	ea94 0f05 	teq	r4, r5
    4ad0:	f000 80a7 	beq.w	4c22 <__adddf3+0x1da>
    4ad4:	f1a4 0401 	sub.w	r4, r4, #1
    4ad8:	f1d5 0e20 	rsbs	lr, r5, #32
    4adc:	db0d      	blt.n	4afa <__adddf3+0xb2>
    4ade:	fa02 fc0e 	lsl.w	ip, r2, lr
    4ae2:	fa22 f205 	lsr.w	r2, r2, r5
    4ae6:	1880      	adds	r0, r0, r2
    4ae8:	f141 0100 	adc.w	r1, r1, #0
    4aec:	fa03 f20e 	lsl.w	r2, r3, lr
    4af0:	1880      	adds	r0, r0, r2
    4af2:	fa43 f305 	asr.w	r3, r3, r5
    4af6:	4159      	adcs	r1, r3
    4af8:	e00e      	b.n	4b18 <__adddf3+0xd0>
    4afa:	f1a5 0520 	sub.w	r5, r5, #32
    4afe:	f10e 0e20 	add.w	lr, lr, #32
    4b02:	2a01      	cmp	r2, #1
    4b04:	fa03 fc0e 	lsl.w	ip, r3, lr
    4b08:	bf28      	it	cs
    4b0a:	f04c 0c02 	orrcs.w	ip, ip, #2
    4b0e:	fa43 f305 	asr.w	r3, r3, r5
    4b12:	18c0      	adds	r0, r0, r3
    4b14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4b1c:	d507      	bpl.n	4b2e <__adddf3+0xe6>
    4b1e:	f04f 0e00 	mov.w	lr, #0
    4b22:	f1dc 0c00 	rsbs	ip, ip, #0
    4b26:	eb7e 0000 	sbcs.w	r0, lr, r0
    4b2a:	eb6e 0101 	sbc.w	r1, lr, r1
    4b2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4b32:	d31b      	bcc.n	4b6c <__adddf3+0x124>
    4b34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4b38:	d30c      	bcc.n	4b54 <__adddf3+0x10c>
    4b3a:	0849      	lsrs	r1, r1, #1
    4b3c:	ea5f 0030 	movs.w	r0, r0, rrx
    4b40:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4b44:	f104 0401 	add.w	r4, r4, #1
    4b48:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4b4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4b50:	f080 809a 	bcs.w	4c88 <__adddf3+0x240>
    4b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4b58:	bf08      	it	eq
    4b5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4b5e:	f150 0000 	adcs.w	r0, r0, #0
    4b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4b66:	ea41 0105 	orr.w	r1, r1, r5
    4b6a:	bd30      	pop	{r4, r5, pc}
    4b6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4b70:	4140      	adcs	r0, r0
    4b72:	eb41 0101 	adc.w	r1, r1, r1
    4b76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4b7a:	f1a4 0401 	sub.w	r4, r4, #1
    4b7e:	d1e9      	bne.n	4b54 <__adddf3+0x10c>
    4b80:	f091 0f00 	teq	r1, #0
    4b84:	bf04      	itt	eq
    4b86:	4601      	moveq	r1, r0
    4b88:	2000      	moveq	r0, #0
    4b8a:	fab1 f381 	clz	r3, r1
    4b8e:	bf08      	it	eq
    4b90:	3320      	addeq	r3, #32
    4b92:	f1a3 030b 	sub.w	r3, r3, #11
    4b96:	f1b3 0220 	subs.w	r2, r3, #32
    4b9a:	da0c      	bge.n	4bb6 <__adddf3+0x16e>
    4b9c:	320c      	adds	r2, #12
    4b9e:	dd08      	ble.n	4bb2 <__adddf3+0x16a>
    4ba0:	f102 0c14 	add.w	ip, r2, #20
    4ba4:	f1c2 020c 	rsb	r2, r2, #12
    4ba8:	fa01 f00c 	lsl.w	r0, r1, ip
    4bac:	fa21 f102 	lsr.w	r1, r1, r2
    4bb0:	e00c      	b.n	4bcc <__adddf3+0x184>
    4bb2:	f102 0214 	add.w	r2, r2, #20
    4bb6:	bfd8      	it	le
    4bb8:	f1c2 0c20 	rsble	ip, r2, #32
    4bbc:	fa01 f102 	lsl.w	r1, r1, r2
    4bc0:	fa20 fc0c 	lsr.w	ip, r0, ip
    4bc4:	bfdc      	itt	le
    4bc6:	ea41 010c 	orrle.w	r1, r1, ip
    4bca:	4090      	lslle	r0, r2
    4bcc:	1ae4      	subs	r4, r4, r3
    4bce:	bfa2      	ittt	ge
    4bd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4bd4:	4329      	orrge	r1, r5
    4bd6:	bd30      	popge	{r4, r5, pc}
    4bd8:	ea6f 0404 	mvn.w	r4, r4
    4bdc:	3c1f      	subs	r4, #31
    4bde:	da1c      	bge.n	4c1a <__adddf3+0x1d2>
    4be0:	340c      	adds	r4, #12
    4be2:	dc0e      	bgt.n	4c02 <__adddf3+0x1ba>
    4be4:	f104 0414 	add.w	r4, r4, #20
    4be8:	f1c4 0220 	rsb	r2, r4, #32
    4bec:	fa20 f004 	lsr.w	r0, r0, r4
    4bf0:	fa01 f302 	lsl.w	r3, r1, r2
    4bf4:	ea40 0003 	orr.w	r0, r0, r3
    4bf8:	fa21 f304 	lsr.w	r3, r1, r4
    4bfc:	ea45 0103 	orr.w	r1, r5, r3
    4c00:	bd30      	pop	{r4, r5, pc}
    4c02:	f1c4 040c 	rsb	r4, r4, #12
    4c06:	f1c4 0220 	rsb	r2, r4, #32
    4c0a:	fa20 f002 	lsr.w	r0, r0, r2
    4c0e:	fa01 f304 	lsl.w	r3, r1, r4
    4c12:	ea40 0003 	orr.w	r0, r0, r3
    4c16:	4629      	mov	r1, r5
    4c18:	bd30      	pop	{r4, r5, pc}
    4c1a:	fa21 f004 	lsr.w	r0, r1, r4
    4c1e:	4629      	mov	r1, r5
    4c20:	bd30      	pop	{r4, r5, pc}
    4c22:	f094 0f00 	teq	r4, #0
    4c26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4c2a:	bf06      	itte	eq
    4c2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4c30:	3401      	addeq	r4, #1
    4c32:	3d01      	subne	r5, #1
    4c34:	e74e      	b.n	4ad4 <__adddf3+0x8c>
    4c36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4c3a:	bf18      	it	ne
    4c3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4c40:	d029      	beq.n	4c96 <__adddf3+0x24e>
    4c42:	ea94 0f05 	teq	r4, r5
    4c46:	bf08      	it	eq
    4c48:	ea90 0f02 	teqeq	r0, r2
    4c4c:	d005      	beq.n	4c5a <__adddf3+0x212>
    4c4e:	ea54 0c00 	orrs.w	ip, r4, r0
    4c52:	bf04      	itt	eq
    4c54:	4619      	moveq	r1, r3
    4c56:	4610      	moveq	r0, r2
    4c58:	bd30      	pop	{r4, r5, pc}
    4c5a:	ea91 0f03 	teq	r1, r3
    4c5e:	bf1e      	ittt	ne
    4c60:	2100      	movne	r1, #0
    4c62:	2000      	movne	r0, #0
    4c64:	bd30      	popne	{r4, r5, pc}
    4c66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4c6a:	d105      	bne.n	4c78 <__adddf3+0x230>
    4c6c:	0040      	lsls	r0, r0, #1
    4c6e:	4149      	adcs	r1, r1
    4c70:	bf28      	it	cs
    4c72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4c76:	bd30      	pop	{r4, r5, pc}
    4c78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4c7c:	bf3c      	itt	cc
    4c7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4c82:	bd30      	popcc	{r4, r5, pc}
    4c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4c88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4c8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4c90:	f04f 0000 	mov.w	r0, #0
    4c94:	bd30      	pop	{r4, r5, pc}
    4c96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4c9a:	bf1a      	itte	ne
    4c9c:	4619      	movne	r1, r3
    4c9e:	4610      	movne	r0, r2
    4ca0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4ca4:	bf1c      	itt	ne
    4ca6:	460b      	movne	r3, r1
    4ca8:	4602      	movne	r2, r0
    4caa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4cae:	bf06      	itte	eq
    4cb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4cb4:	ea91 0f03 	teqeq	r1, r3
    4cb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4cbc:	bd30      	pop	{r4, r5, pc}
    4cbe:	bf00      	nop

00004cc0 <__aeabi_ui2d>:
    4cc0:	f090 0f00 	teq	r0, #0
    4cc4:	bf04      	itt	eq
    4cc6:	2100      	moveq	r1, #0
    4cc8:	4770      	bxeq	lr
    4cca:	b530      	push	{r4, r5, lr}
    4ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4cd4:	f04f 0500 	mov.w	r5, #0
    4cd8:	f04f 0100 	mov.w	r1, #0
    4cdc:	e750      	b.n	4b80 <__adddf3+0x138>
    4cde:	bf00      	nop

00004ce0 <__aeabi_i2d>:
    4ce0:	f090 0f00 	teq	r0, #0
    4ce4:	bf04      	itt	eq
    4ce6:	2100      	moveq	r1, #0
    4ce8:	4770      	bxeq	lr
    4cea:	b530      	push	{r4, r5, lr}
    4cec:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4cf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4cf4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4cf8:	bf48      	it	mi
    4cfa:	4240      	negmi	r0, r0
    4cfc:	f04f 0100 	mov.w	r1, #0
    4d00:	e73e      	b.n	4b80 <__adddf3+0x138>
    4d02:	bf00      	nop

00004d04 <__aeabi_f2d>:
    4d04:	0042      	lsls	r2, r0, #1
    4d06:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4d0a:	ea4f 0131 	mov.w	r1, r1, rrx
    4d0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4d12:	bf1f      	itttt	ne
    4d14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4d18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4d20:	4770      	bxne	lr
    4d22:	f092 0f00 	teq	r2, #0
    4d26:	bf14      	ite	ne
    4d28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d2c:	4770      	bxeq	lr
    4d2e:	b530      	push	{r4, r5, lr}
    4d30:	f44f 7460 	mov.w	r4, #896	; 0x380
    4d34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4d3c:	e720      	b.n	4b80 <__adddf3+0x138>
    4d3e:	bf00      	nop

00004d40 <__aeabi_ul2d>:
    4d40:	ea50 0201 	orrs.w	r2, r0, r1
    4d44:	bf08      	it	eq
    4d46:	4770      	bxeq	lr
    4d48:	b530      	push	{r4, r5, lr}
    4d4a:	f04f 0500 	mov.w	r5, #0
    4d4e:	e00a      	b.n	4d66 <__aeabi_l2d+0x16>

00004d50 <__aeabi_l2d>:
    4d50:	ea50 0201 	orrs.w	r2, r0, r1
    4d54:	bf08      	it	eq
    4d56:	4770      	bxeq	lr
    4d58:	b530      	push	{r4, r5, lr}
    4d5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4d5e:	d502      	bpl.n	4d66 <__aeabi_l2d+0x16>
    4d60:	4240      	negs	r0, r0
    4d62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4d66:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4d6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4d6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4d72:	f43f aedc 	beq.w	4b2e <__adddf3+0xe6>
    4d76:	f04f 0203 	mov.w	r2, #3
    4d7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4d7e:	bf18      	it	ne
    4d80:	3203      	addne	r2, #3
    4d82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4d86:	bf18      	it	ne
    4d88:	3203      	addne	r2, #3
    4d8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4d8e:	f1c2 0320 	rsb	r3, r2, #32
    4d92:	fa00 fc03 	lsl.w	ip, r0, r3
    4d96:	fa20 f002 	lsr.w	r0, r0, r2
    4d9a:	fa01 fe03 	lsl.w	lr, r1, r3
    4d9e:	ea40 000e 	orr.w	r0, r0, lr
    4da2:	fa21 f102 	lsr.w	r1, r1, r2
    4da6:	4414      	add	r4, r2
    4da8:	e6c1      	b.n	4b2e <__adddf3+0xe6>
    4daa:	bf00      	nop

00004dac <__aeabi_dmul>:
    4dac:	b570      	push	{r4, r5, r6, lr}
    4dae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4db2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4db6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4dba:	bf1d      	ittte	ne
    4dbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4dc0:	ea94 0f0c 	teqne	r4, ip
    4dc4:	ea95 0f0c 	teqne	r5, ip
    4dc8:	f000 f8de 	bleq	4f88 <__aeabi_dmul+0x1dc>
    4dcc:	442c      	add	r4, r5
    4dce:	ea81 0603 	eor.w	r6, r1, r3
    4dd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    4dd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    4dda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4dde:	bf18      	it	ne
    4de0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4dec:	d038      	beq.n	4e60 <__aeabi_dmul+0xb4>
    4dee:	fba0 ce02 	umull	ip, lr, r0, r2
    4df2:	f04f 0500 	mov.w	r5, #0
    4df6:	fbe1 e502 	umlal	lr, r5, r1, r2
    4dfa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4dfe:	fbe0 e503 	umlal	lr, r5, r0, r3
    4e02:	f04f 0600 	mov.w	r6, #0
    4e06:	fbe1 5603 	umlal	r5, r6, r1, r3
    4e0a:	f09c 0f00 	teq	ip, #0
    4e0e:	bf18      	it	ne
    4e10:	f04e 0e01 	orrne.w	lr, lr, #1
    4e14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4e18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4e1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4e20:	d204      	bcs.n	4e2c <__aeabi_dmul+0x80>
    4e22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4e26:	416d      	adcs	r5, r5
    4e28:	eb46 0606 	adc.w	r6, r6, r6
    4e2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4e30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4e34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4e38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4e3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4e40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4e44:	bf88      	it	hi
    4e46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4e4a:	d81e      	bhi.n	4e8a <__aeabi_dmul+0xde>
    4e4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4e50:	bf08      	it	eq
    4e52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4e56:	f150 0000 	adcs.w	r0, r0, #0
    4e5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4e5e:	bd70      	pop	{r4, r5, r6, pc}
    4e60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4e64:	ea46 0101 	orr.w	r1, r6, r1
    4e68:	ea40 0002 	orr.w	r0, r0, r2
    4e6c:	ea81 0103 	eor.w	r1, r1, r3
    4e70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4e74:	bfc2      	ittt	gt
    4e76:	ebd4 050c 	rsbsgt	r5, r4, ip
    4e7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4e7e:	bd70      	popgt	{r4, r5, r6, pc}
    4e80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4e84:	f04f 0e00 	mov.w	lr, #0
    4e88:	3c01      	subs	r4, #1
    4e8a:	f300 80ab 	bgt.w	4fe4 <__aeabi_dmul+0x238>
    4e8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4e92:	bfde      	ittt	le
    4e94:	2000      	movle	r0, #0
    4e96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4e9a:	bd70      	pople	{r4, r5, r6, pc}
    4e9c:	f1c4 0400 	rsb	r4, r4, #0
    4ea0:	3c20      	subs	r4, #32
    4ea2:	da35      	bge.n	4f10 <__aeabi_dmul+0x164>
    4ea4:	340c      	adds	r4, #12
    4ea6:	dc1b      	bgt.n	4ee0 <__aeabi_dmul+0x134>
    4ea8:	f104 0414 	add.w	r4, r4, #20
    4eac:	f1c4 0520 	rsb	r5, r4, #32
    4eb0:	fa00 f305 	lsl.w	r3, r0, r5
    4eb4:	fa20 f004 	lsr.w	r0, r0, r4
    4eb8:	fa01 f205 	lsl.w	r2, r1, r5
    4ebc:	ea40 0002 	orr.w	r0, r0, r2
    4ec0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4ec4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4ec8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ecc:	fa21 f604 	lsr.w	r6, r1, r4
    4ed0:	eb42 0106 	adc.w	r1, r2, r6
    4ed4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4ed8:	bf08      	it	eq
    4eda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4ede:	bd70      	pop	{r4, r5, r6, pc}
    4ee0:	f1c4 040c 	rsb	r4, r4, #12
    4ee4:	f1c4 0520 	rsb	r5, r4, #32
    4ee8:	fa00 f304 	lsl.w	r3, r0, r4
    4eec:	fa20 f005 	lsr.w	r0, r0, r5
    4ef0:	fa01 f204 	lsl.w	r2, r1, r4
    4ef4:	ea40 0002 	orr.w	r0, r0, r2
    4ef8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4efc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4f00:	f141 0100 	adc.w	r1, r1, #0
    4f04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f08:	bf08      	it	eq
    4f0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f0e:	bd70      	pop	{r4, r5, r6, pc}
    4f10:	f1c4 0520 	rsb	r5, r4, #32
    4f14:	fa00 f205 	lsl.w	r2, r0, r5
    4f18:	ea4e 0e02 	orr.w	lr, lr, r2
    4f1c:	fa20 f304 	lsr.w	r3, r0, r4
    4f20:	fa01 f205 	lsl.w	r2, r1, r5
    4f24:	ea43 0302 	orr.w	r3, r3, r2
    4f28:	fa21 f004 	lsr.w	r0, r1, r4
    4f2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4f30:	fa21 f204 	lsr.w	r2, r1, r4
    4f34:	ea20 0002 	bic.w	r0, r0, r2
    4f38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4f3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f40:	bf08      	it	eq
    4f42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f46:	bd70      	pop	{r4, r5, r6, pc}
    4f48:	f094 0f00 	teq	r4, #0
    4f4c:	d10f      	bne.n	4f6e <__aeabi_dmul+0x1c2>
    4f4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4f52:	0040      	lsls	r0, r0, #1
    4f54:	eb41 0101 	adc.w	r1, r1, r1
    4f58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4f5c:	bf08      	it	eq
    4f5e:	3c01      	subeq	r4, #1
    4f60:	d0f7      	beq.n	4f52 <__aeabi_dmul+0x1a6>
    4f62:	ea41 0106 	orr.w	r1, r1, r6
    4f66:	f095 0f00 	teq	r5, #0
    4f6a:	bf18      	it	ne
    4f6c:	4770      	bxne	lr
    4f6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4f72:	0052      	lsls	r2, r2, #1
    4f74:	eb43 0303 	adc.w	r3, r3, r3
    4f78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4f7c:	bf08      	it	eq
    4f7e:	3d01      	subeq	r5, #1
    4f80:	d0f7      	beq.n	4f72 <__aeabi_dmul+0x1c6>
    4f82:	ea43 0306 	orr.w	r3, r3, r6
    4f86:	4770      	bx	lr
    4f88:	ea94 0f0c 	teq	r4, ip
    4f8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4f90:	bf18      	it	ne
    4f92:	ea95 0f0c 	teqne	r5, ip
    4f96:	d00c      	beq.n	4fb2 <__aeabi_dmul+0x206>
    4f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4f9c:	bf18      	it	ne
    4f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4fa2:	d1d1      	bne.n	4f48 <__aeabi_dmul+0x19c>
    4fa4:	ea81 0103 	eor.w	r1, r1, r3
    4fa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4fac:	f04f 0000 	mov.w	r0, #0
    4fb0:	bd70      	pop	{r4, r5, r6, pc}
    4fb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4fb6:	bf06      	itte	eq
    4fb8:	4610      	moveq	r0, r2
    4fba:	4619      	moveq	r1, r3
    4fbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4fc0:	d019      	beq.n	4ff6 <__aeabi_dmul+0x24a>
    4fc2:	ea94 0f0c 	teq	r4, ip
    4fc6:	d102      	bne.n	4fce <__aeabi_dmul+0x222>
    4fc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4fcc:	d113      	bne.n	4ff6 <__aeabi_dmul+0x24a>
    4fce:	ea95 0f0c 	teq	r5, ip
    4fd2:	d105      	bne.n	4fe0 <__aeabi_dmul+0x234>
    4fd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4fd8:	bf1c      	itt	ne
    4fda:	4610      	movne	r0, r2
    4fdc:	4619      	movne	r1, r3
    4fde:	d10a      	bne.n	4ff6 <__aeabi_dmul+0x24a>
    4fe0:	ea81 0103 	eor.w	r1, r1, r3
    4fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4fe8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4fec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4ff0:	f04f 0000 	mov.w	r0, #0
    4ff4:	bd70      	pop	{r4, r5, r6, pc}
    4ff6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4ffa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4ffe:	bd70      	pop	{r4, r5, r6, pc}

00005000 <__aeabi_ddiv>:
    5000:	b570      	push	{r4, r5, r6, lr}
    5002:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5006:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    500a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    500e:	bf1d      	ittte	ne
    5010:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5014:	ea94 0f0c 	teqne	r4, ip
    5018:	ea95 0f0c 	teqne	r5, ip
    501c:	f000 f8a7 	bleq	516e <__aeabi_ddiv+0x16e>
    5020:	eba4 0405 	sub.w	r4, r4, r5
    5024:	ea81 0e03 	eor.w	lr, r1, r3
    5028:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    502c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5030:	f000 8088 	beq.w	5144 <__aeabi_ddiv+0x144>
    5034:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5038:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    503c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    5040:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    5044:	ea4f 2202 	mov.w	r2, r2, lsl #8
    5048:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    504c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    5050:	ea4f 2600 	mov.w	r6, r0, lsl #8
    5054:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    5058:	429d      	cmp	r5, r3
    505a:	bf08      	it	eq
    505c:	4296      	cmpeq	r6, r2
    505e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    5062:	f504 7440 	add.w	r4, r4, #768	; 0x300
    5066:	d202      	bcs.n	506e <__aeabi_ddiv+0x6e>
    5068:	085b      	lsrs	r3, r3, #1
    506a:	ea4f 0232 	mov.w	r2, r2, rrx
    506e:	1ab6      	subs	r6, r6, r2
    5070:	eb65 0503 	sbc.w	r5, r5, r3
    5074:	085b      	lsrs	r3, r3, #1
    5076:	ea4f 0232 	mov.w	r2, r2, rrx
    507a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    507e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    5082:	ebb6 0e02 	subs.w	lr, r6, r2
    5086:	eb75 0e03 	sbcs.w	lr, r5, r3
    508a:	bf22      	ittt	cs
    508c:	1ab6      	subcs	r6, r6, r2
    508e:	4675      	movcs	r5, lr
    5090:	ea40 000c 	orrcs.w	r0, r0, ip
    5094:	085b      	lsrs	r3, r3, #1
    5096:	ea4f 0232 	mov.w	r2, r2, rrx
    509a:	ebb6 0e02 	subs.w	lr, r6, r2
    509e:	eb75 0e03 	sbcs.w	lr, r5, r3
    50a2:	bf22      	ittt	cs
    50a4:	1ab6      	subcs	r6, r6, r2
    50a6:	4675      	movcs	r5, lr
    50a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    50ac:	085b      	lsrs	r3, r3, #1
    50ae:	ea4f 0232 	mov.w	r2, r2, rrx
    50b2:	ebb6 0e02 	subs.w	lr, r6, r2
    50b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    50ba:	bf22      	ittt	cs
    50bc:	1ab6      	subcs	r6, r6, r2
    50be:	4675      	movcs	r5, lr
    50c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    50c4:	085b      	lsrs	r3, r3, #1
    50c6:	ea4f 0232 	mov.w	r2, r2, rrx
    50ca:	ebb6 0e02 	subs.w	lr, r6, r2
    50ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    50d2:	bf22      	ittt	cs
    50d4:	1ab6      	subcs	r6, r6, r2
    50d6:	4675      	movcs	r5, lr
    50d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    50dc:	ea55 0e06 	orrs.w	lr, r5, r6
    50e0:	d018      	beq.n	5114 <__aeabi_ddiv+0x114>
    50e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    50e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    50ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
    50ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    50f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    50f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    50fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    50fe:	d1c0      	bne.n	5082 <__aeabi_ddiv+0x82>
    5100:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5104:	d10b      	bne.n	511e <__aeabi_ddiv+0x11e>
    5106:	ea41 0100 	orr.w	r1, r1, r0
    510a:	f04f 0000 	mov.w	r0, #0
    510e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    5112:	e7b6      	b.n	5082 <__aeabi_ddiv+0x82>
    5114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5118:	bf04      	itt	eq
    511a:	4301      	orreq	r1, r0
    511c:	2000      	moveq	r0, #0
    511e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5122:	bf88      	it	hi
    5124:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5128:	f63f aeaf 	bhi.w	4e8a <__aeabi_dmul+0xde>
    512c:	ebb5 0c03 	subs.w	ip, r5, r3
    5130:	bf04      	itt	eq
    5132:	ebb6 0c02 	subseq.w	ip, r6, r2
    5136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    513a:	f150 0000 	adcs.w	r0, r0, #0
    513e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5142:	bd70      	pop	{r4, r5, r6, pc}
    5144:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    5148:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    514c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    5150:	bfc2      	ittt	gt
    5152:	ebd4 050c 	rsbsgt	r5, r4, ip
    5156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    515a:	bd70      	popgt	{r4, r5, r6, pc}
    515c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5160:	f04f 0e00 	mov.w	lr, #0
    5164:	3c01      	subs	r4, #1
    5166:	e690      	b.n	4e8a <__aeabi_dmul+0xde>
    5168:	ea45 0e06 	orr.w	lr, r5, r6
    516c:	e68d      	b.n	4e8a <__aeabi_dmul+0xde>
    516e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    5172:	ea94 0f0c 	teq	r4, ip
    5176:	bf08      	it	eq
    5178:	ea95 0f0c 	teqeq	r5, ip
    517c:	f43f af3b 	beq.w	4ff6 <__aeabi_dmul+0x24a>
    5180:	ea94 0f0c 	teq	r4, ip
    5184:	d10a      	bne.n	519c <__aeabi_ddiv+0x19c>
    5186:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    518a:	f47f af34 	bne.w	4ff6 <__aeabi_dmul+0x24a>
    518e:	ea95 0f0c 	teq	r5, ip
    5192:	f47f af25 	bne.w	4fe0 <__aeabi_dmul+0x234>
    5196:	4610      	mov	r0, r2
    5198:	4619      	mov	r1, r3
    519a:	e72c      	b.n	4ff6 <__aeabi_dmul+0x24a>
    519c:	ea95 0f0c 	teq	r5, ip
    51a0:	d106      	bne.n	51b0 <__aeabi_ddiv+0x1b0>
    51a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    51a6:	f43f aefd 	beq.w	4fa4 <__aeabi_dmul+0x1f8>
    51aa:	4610      	mov	r0, r2
    51ac:	4619      	mov	r1, r3
    51ae:	e722      	b.n	4ff6 <__aeabi_dmul+0x24a>
    51b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    51b4:	bf18      	it	ne
    51b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    51ba:	f47f aec5 	bne.w	4f48 <__aeabi_dmul+0x19c>
    51be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    51c2:	f47f af0d 	bne.w	4fe0 <__aeabi_dmul+0x234>
    51c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    51ca:	f47f aeeb 	bne.w	4fa4 <__aeabi_dmul+0x1f8>
    51ce:	e712      	b.n	4ff6 <__aeabi_dmul+0x24a>

000051d0 <__aeabi_d2uiz>:
    51d0:	004a      	lsls	r2, r1, #1
    51d2:	d211      	bcs.n	51f8 <__aeabi_d2uiz+0x28>
    51d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    51d8:	d211      	bcs.n	51fe <__aeabi_d2uiz+0x2e>
    51da:	d50d      	bpl.n	51f8 <__aeabi_d2uiz+0x28>
    51dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    51e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    51e4:	d40e      	bmi.n	5204 <__aeabi_d2uiz+0x34>
    51e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    51ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    51ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    51f2:	fa23 f002 	lsr.w	r0, r3, r2
    51f6:	4770      	bx	lr
    51f8:	f04f 0000 	mov.w	r0, #0
    51fc:	4770      	bx	lr
    51fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    5202:	d102      	bne.n	520a <__aeabi_d2uiz+0x3a>
    5204:	f04f 30ff 	mov.w	r0, #4294967295
    5208:	4770      	bx	lr
    520a:	f04f 0000 	mov.w	r0, #0
    520e:	4770      	bx	lr

00005210 <ffs>:
    5210:	b140      	cbz	r0, 5224 <ffs+0x14>
    5212:	2200      	movs	r2, #0
    5214:	fa40 f102 	asr.w	r1, r0, r2
    5218:	1c53      	adds	r3, r2, #1
    521a:	07c9      	lsls	r1, r1, #31
    521c:	461a      	mov	r2, r3
    521e:	d5f9      	bpl.n	5214 <ffs+0x4>
    5220:	4618      	mov	r0, r3
    5222:	4770      	bx	lr
    5224:	4603      	mov	r3, r0
    5226:	e7fb      	b.n	5220 <ffs+0x10>

00005228 <__libc_init_array>:
    5228:	b570      	push	{r4, r5, r6, lr}
    522a:	4e0d      	ldr	r6, [pc, #52]	; (5260 <__libc_init_array+0x38>)
    522c:	4c0d      	ldr	r4, [pc, #52]	; (5264 <__libc_init_array+0x3c>)
    522e:	1ba4      	subs	r4, r4, r6
    5230:	10a4      	asrs	r4, r4, #2
    5232:	2500      	movs	r5, #0
    5234:	42a5      	cmp	r5, r4
    5236:	d109      	bne.n	524c <__libc_init_array+0x24>
    5238:	4e0b      	ldr	r6, [pc, #44]	; (5268 <__libc_init_array+0x40>)
    523a:	4c0c      	ldr	r4, [pc, #48]	; (526c <__libc_init_array+0x44>)
    523c:	f000 fe5c 	bl	5ef8 <_init>
    5240:	1ba4      	subs	r4, r4, r6
    5242:	10a4      	asrs	r4, r4, #2
    5244:	2500      	movs	r5, #0
    5246:	42a5      	cmp	r5, r4
    5248:	d105      	bne.n	5256 <__libc_init_array+0x2e>
    524a:	bd70      	pop	{r4, r5, r6, pc}
    524c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5250:	4798      	blx	r3
    5252:	3501      	adds	r5, #1
    5254:	e7ee      	b.n	5234 <__libc_init_array+0xc>
    5256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    525a:	4798      	blx	r3
    525c:	3501      	adds	r5, #1
    525e:	e7f2      	b.n	5246 <__libc_init_array+0x1e>
    5260:	00005f04 	.word	0x00005f04
    5264:	00005f04 	.word	0x00005f04
    5268:	00005f04 	.word	0x00005f04
    526c:	00005f08 	.word	0x00005f08

00005270 <siprintf>:
    5270:	b40e      	push	{r1, r2, r3}
    5272:	b500      	push	{lr}
    5274:	b09c      	sub	sp, #112	; 0x70
    5276:	f44f 7102 	mov.w	r1, #520	; 0x208
    527a:	ab1d      	add	r3, sp, #116	; 0x74
    527c:	f8ad 1014 	strh.w	r1, [sp, #20]
    5280:	9002      	str	r0, [sp, #8]
    5282:	9006      	str	r0, [sp, #24]
    5284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5288:	480a      	ldr	r0, [pc, #40]	; (52b4 <siprintf+0x44>)
    528a:	9104      	str	r1, [sp, #16]
    528c:	9107      	str	r1, [sp, #28]
    528e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5292:	f853 2b04 	ldr.w	r2, [r3], #4
    5296:	f8ad 1016 	strh.w	r1, [sp, #22]
    529a:	6800      	ldr	r0, [r0, #0]
    529c:	9301      	str	r3, [sp, #4]
    529e:	a902      	add	r1, sp, #8
    52a0:	f000 f8c4 	bl	542c <_svfiprintf_r>
    52a4:	9b02      	ldr	r3, [sp, #8]
    52a6:	2200      	movs	r2, #0
    52a8:	701a      	strb	r2, [r3, #0]
    52aa:	b01c      	add	sp, #112	; 0x70
    52ac:	f85d eb04 	ldr.w	lr, [sp], #4
    52b0:	b003      	add	sp, #12
    52b2:	4770      	bx	lr
    52b4:	20000068 	.word	0x20000068

000052b8 <_malloc_r>:
    52b8:	b570      	push	{r4, r5, r6, lr}
    52ba:	1ccd      	adds	r5, r1, #3
    52bc:	f025 0503 	bic.w	r5, r5, #3
    52c0:	3508      	adds	r5, #8
    52c2:	2d0c      	cmp	r5, #12
    52c4:	bf38      	it	cc
    52c6:	250c      	movcc	r5, #12
    52c8:	2d00      	cmp	r5, #0
    52ca:	4606      	mov	r6, r0
    52cc:	db01      	blt.n	52d2 <_malloc_r+0x1a>
    52ce:	42a9      	cmp	r1, r5
    52d0:	d903      	bls.n	52da <_malloc_r+0x22>
    52d2:	230c      	movs	r3, #12
    52d4:	6033      	str	r3, [r6, #0]
    52d6:	2000      	movs	r0, #0
    52d8:	bd70      	pop	{r4, r5, r6, pc}
    52da:	f000 fbb6 	bl	5a4a <__malloc_lock>
    52de:	4a23      	ldr	r2, [pc, #140]	; (536c <_malloc_r+0xb4>)
    52e0:	6814      	ldr	r4, [r2, #0]
    52e2:	4621      	mov	r1, r4
    52e4:	b991      	cbnz	r1, 530c <_malloc_r+0x54>
    52e6:	4c22      	ldr	r4, [pc, #136]	; (5370 <_malloc_r+0xb8>)
    52e8:	6823      	ldr	r3, [r4, #0]
    52ea:	b91b      	cbnz	r3, 52f4 <_malloc_r+0x3c>
    52ec:	4630      	mov	r0, r6
    52ee:	f000 fb27 	bl	5940 <_sbrk_r>
    52f2:	6020      	str	r0, [r4, #0]
    52f4:	4629      	mov	r1, r5
    52f6:	4630      	mov	r0, r6
    52f8:	f000 fb22 	bl	5940 <_sbrk_r>
    52fc:	1c43      	adds	r3, r0, #1
    52fe:	d126      	bne.n	534e <_malloc_r+0x96>
    5300:	230c      	movs	r3, #12
    5302:	6033      	str	r3, [r6, #0]
    5304:	4630      	mov	r0, r6
    5306:	f000 fba1 	bl	5a4c <__malloc_unlock>
    530a:	e7e4      	b.n	52d6 <_malloc_r+0x1e>
    530c:	680b      	ldr	r3, [r1, #0]
    530e:	1b5b      	subs	r3, r3, r5
    5310:	d41a      	bmi.n	5348 <_malloc_r+0x90>
    5312:	2b0b      	cmp	r3, #11
    5314:	d90f      	bls.n	5336 <_malloc_r+0x7e>
    5316:	600b      	str	r3, [r1, #0]
    5318:	50cd      	str	r5, [r1, r3]
    531a:	18cc      	adds	r4, r1, r3
    531c:	4630      	mov	r0, r6
    531e:	f000 fb95 	bl	5a4c <__malloc_unlock>
    5322:	f104 000b 	add.w	r0, r4, #11
    5326:	1d23      	adds	r3, r4, #4
    5328:	f020 0007 	bic.w	r0, r0, #7
    532c:	1ac3      	subs	r3, r0, r3
    532e:	d01b      	beq.n	5368 <_malloc_r+0xb0>
    5330:	425a      	negs	r2, r3
    5332:	50e2      	str	r2, [r4, r3]
    5334:	bd70      	pop	{r4, r5, r6, pc}
    5336:	428c      	cmp	r4, r1
    5338:	bf0d      	iteet	eq
    533a:	6863      	ldreq	r3, [r4, #4]
    533c:	684b      	ldrne	r3, [r1, #4]
    533e:	6063      	strne	r3, [r4, #4]
    5340:	6013      	streq	r3, [r2, #0]
    5342:	bf18      	it	ne
    5344:	460c      	movne	r4, r1
    5346:	e7e9      	b.n	531c <_malloc_r+0x64>
    5348:	460c      	mov	r4, r1
    534a:	6849      	ldr	r1, [r1, #4]
    534c:	e7ca      	b.n	52e4 <_malloc_r+0x2c>
    534e:	1cc4      	adds	r4, r0, #3
    5350:	f024 0403 	bic.w	r4, r4, #3
    5354:	42a0      	cmp	r0, r4
    5356:	d005      	beq.n	5364 <_malloc_r+0xac>
    5358:	1a21      	subs	r1, r4, r0
    535a:	4630      	mov	r0, r6
    535c:	f000 faf0 	bl	5940 <_sbrk_r>
    5360:	3001      	adds	r0, #1
    5362:	d0cd      	beq.n	5300 <_malloc_r+0x48>
    5364:	6025      	str	r5, [r4, #0]
    5366:	e7d9      	b.n	531c <_malloc_r+0x64>
    5368:	bd70      	pop	{r4, r5, r6, pc}
    536a:	bf00      	nop
    536c:	200001c4 	.word	0x200001c4
    5370:	200001c8 	.word	0x200001c8

00005374 <__ssputs_r>:
    5374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5378:	688e      	ldr	r6, [r1, #8]
    537a:	429e      	cmp	r6, r3
    537c:	4682      	mov	sl, r0
    537e:	460c      	mov	r4, r1
    5380:	4691      	mov	r9, r2
    5382:	4698      	mov	r8, r3
    5384:	d835      	bhi.n	53f2 <__ssputs_r+0x7e>
    5386:	898a      	ldrh	r2, [r1, #12]
    5388:	f412 6f90 	tst.w	r2, #1152	; 0x480
    538c:	d031      	beq.n	53f2 <__ssputs_r+0x7e>
    538e:	6825      	ldr	r5, [r4, #0]
    5390:	6909      	ldr	r1, [r1, #16]
    5392:	1a6f      	subs	r7, r5, r1
    5394:	6965      	ldr	r5, [r4, #20]
    5396:	2302      	movs	r3, #2
    5398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    539c:	fb95 f5f3 	sdiv	r5, r5, r3
    53a0:	f108 0301 	add.w	r3, r8, #1
    53a4:	443b      	add	r3, r7
    53a6:	429d      	cmp	r5, r3
    53a8:	bf38      	it	cc
    53aa:	461d      	movcc	r5, r3
    53ac:	0553      	lsls	r3, r2, #21
    53ae:	d531      	bpl.n	5414 <__ssputs_r+0xa0>
    53b0:	4629      	mov	r1, r5
    53b2:	f7ff ff81 	bl	52b8 <_malloc_r>
    53b6:	4606      	mov	r6, r0
    53b8:	b950      	cbnz	r0, 53d0 <__ssputs_r+0x5c>
    53ba:	230c      	movs	r3, #12
    53bc:	f8ca 3000 	str.w	r3, [sl]
    53c0:	89a3      	ldrh	r3, [r4, #12]
    53c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    53c6:	81a3      	strh	r3, [r4, #12]
    53c8:	f04f 30ff 	mov.w	r0, #4294967295
    53cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53d0:	463a      	mov	r2, r7
    53d2:	6921      	ldr	r1, [r4, #16]
    53d4:	f000 fb14 	bl	5a00 <memcpy>
    53d8:	89a3      	ldrh	r3, [r4, #12]
    53da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    53de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    53e2:	81a3      	strh	r3, [r4, #12]
    53e4:	6126      	str	r6, [r4, #16]
    53e6:	6165      	str	r5, [r4, #20]
    53e8:	443e      	add	r6, r7
    53ea:	1bed      	subs	r5, r5, r7
    53ec:	6026      	str	r6, [r4, #0]
    53ee:	60a5      	str	r5, [r4, #8]
    53f0:	4646      	mov	r6, r8
    53f2:	4546      	cmp	r6, r8
    53f4:	bf28      	it	cs
    53f6:	4646      	movcs	r6, r8
    53f8:	4632      	mov	r2, r6
    53fa:	4649      	mov	r1, r9
    53fc:	6820      	ldr	r0, [r4, #0]
    53fe:	f000 fb0a 	bl	5a16 <memmove>
    5402:	68a3      	ldr	r3, [r4, #8]
    5404:	1b9b      	subs	r3, r3, r6
    5406:	60a3      	str	r3, [r4, #8]
    5408:	6823      	ldr	r3, [r4, #0]
    540a:	441e      	add	r6, r3
    540c:	6026      	str	r6, [r4, #0]
    540e:	2000      	movs	r0, #0
    5410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5414:	462a      	mov	r2, r5
    5416:	f000 fb69 	bl	5aec <_realloc_r>
    541a:	4606      	mov	r6, r0
    541c:	2800      	cmp	r0, #0
    541e:	d1e1      	bne.n	53e4 <__ssputs_r+0x70>
    5420:	6921      	ldr	r1, [r4, #16]
    5422:	4650      	mov	r0, sl
    5424:	f000 fb14 	bl	5a50 <_free_r>
    5428:	e7c7      	b.n	53ba <__ssputs_r+0x46>
	...

0000542c <_svfiprintf_r>:
    542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5430:	b09d      	sub	sp, #116	; 0x74
    5432:	4680      	mov	r8, r0
    5434:	9303      	str	r3, [sp, #12]
    5436:	898b      	ldrh	r3, [r1, #12]
    5438:	061c      	lsls	r4, r3, #24
    543a:	460d      	mov	r5, r1
    543c:	4616      	mov	r6, r2
    543e:	d50f      	bpl.n	5460 <_svfiprintf_r+0x34>
    5440:	690b      	ldr	r3, [r1, #16]
    5442:	b96b      	cbnz	r3, 5460 <_svfiprintf_r+0x34>
    5444:	2140      	movs	r1, #64	; 0x40
    5446:	f7ff ff37 	bl	52b8 <_malloc_r>
    544a:	6028      	str	r0, [r5, #0]
    544c:	6128      	str	r0, [r5, #16]
    544e:	b928      	cbnz	r0, 545c <_svfiprintf_r+0x30>
    5450:	230c      	movs	r3, #12
    5452:	f8c8 3000 	str.w	r3, [r8]
    5456:	f04f 30ff 	mov.w	r0, #4294967295
    545a:	e0c5      	b.n	55e8 <_svfiprintf_r+0x1bc>
    545c:	2340      	movs	r3, #64	; 0x40
    545e:	616b      	str	r3, [r5, #20]
    5460:	2300      	movs	r3, #0
    5462:	9309      	str	r3, [sp, #36]	; 0x24
    5464:	2320      	movs	r3, #32
    5466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    546a:	2330      	movs	r3, #48	; 0x30
    546c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    5470:	f04f 0b01 	mov.w	fp, #1
    5474:	4637      	mov	r7, r6
    5476:	463c      	mov	r4, r7
    5478:	f814 3b01 	ldrb.w	r3, [r4], #1
    547c:	2b00      	cmp	r3, #0
    547e:	d13c      	bne.n	54fa <_svfiprintf_r+0xce>
    5480:	ebb7 0a06 	subs.w	sl, r7, r6
    5484:	d00b      	beq.n	549e <_svfiprintf_r+0x72>
    5486:	4653      	mov	r3, sl
    5488:	4632      	mov	r2, r6
    548a:	4629      	mov	r1, r5
    548c:	4640      	mov	r0, r8
    548e:	f7ff ff71 	bl	5374 <__ssputs_r>
    5492:	3001      	adds	r0, #1
    5494:	f000 80a3 	beq.w	55de <_svfiprintf_r+0x1b2>
    5498:	9b09      	ldr	r3, [sp, #36]	; 0x24
    549a:	4453      	add	r3, sl
    549c:	9309      	str	r3, [sp, #36]	; 0x24
    549e:	783b      	ldrb	r3, [r7, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	f000 809c 	beq.w	55de <_svfiprintf_r+0x1b2>
    54a6:	2300      	movs	r3, #0
    54a8:	f04f 32ff 	mov.w	r2, #4294967295
    54ac:	9304      	str	r3, [sp, #16]
    54ae:	9307      	str	r3, [sp, #28]
    54b0:	9205      	str	r2, [sp, #20]
    54b2:	9306      	str	r3, [sp, #24]
    54b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    54b8:	931a      	str	r3, [sp, #104]	; 0x68
    54ba:	2205      	movs	r2, #5
    54bc:	7821      	ldrb	r1, [r4, #0]
    54be:	4850      	ldr	r0, [pc, #320]	; (5600 <_svfiprintf_r+0x1d4>)
    54c0:	f000 fa4e 	bl	5960 <memchr>
    54c4:	1c67      	adds	r7, r4, #1
    54c6:	9b04      	ldr	r3, [sp, #16]
    54c8:	b9d8      	cbnz	r0, 5502 <_svfiprintf_r+0xd6>
    54ca:	06d9      	lsls	r1, r3, #27
    54cc:	bf44      	itt	mi
    54ce:	2220      	movmi	r2, #32
    54d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    54d4:	071a      	lsls	r2, r3, #28
    54d6:	bf44      	itt	mi
    54d8:	222b      	movmi	r2, #43	; 0x2b
    54da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    54de:	7822      	ldrb	r2, [r4, #0]
    54e0:	2a2a      	cmp	r2, #42	; 0x2a
    54e2:	d016      	beq.n	5512 <_svfiprintf_r+0xe6>
    54e4:	9a07      	ldr	r2, [sp, #28]
    54e6:	2100      	movs	r1, #0
    54e8:	200a      	movs	r0, #10
    54ea:	4627      	mov	r7, r4
    54ec:	3401      	adds	r4, #1
    54ee:	783b      	ldrb	r3, [r7, #0]
    54f0:	3b30      	subs	r3, #48	; 0x30
    54f2:	2b09      	cmp	r3, #9
    54f4:	d951      	bls.n	559a <_svfiprintf_r+0x16e>
    54f6:	b1c9      	cbz	r1, 552c <_svfiprintf_r+0x100>
    54f8:	e011      	b.n	551e <_svfiprintf_r+0xf2>
    54fa:	2b25      	cmp	r3, #37	; 0x25
    54fc:	d0c0      	beq.n	5480 <_svfiprintf_r+0x54>
    54fe:	4627      	mov	r7, r4
    5500:	e7b9      	b.n	5476 <_svfiprintf_r+0x4a>
    5502:	4a3f      	ldr	r2, [pc, #252]	; (5600 <_svfiprintf_r+0x1d4>)
    5504:	1a80      	subs	r0, r0, r2
    5506:	fa0b f000 	lsl.w	r0, fp, r0
    550a:	4318      	orrs	r0, r3
    550c:	9004      	str	r0, [sp, #16]
    550e:	463c      	mov	r4, r7
    5510:	e7d3      	b.n	54ba <_svfiprintf_r+0x8e>
    5512:	9a03      	ldr	r2, [sp, #12]
    5514:	1d11      	adds	r1, r2, #4
    5516:	6812      	ldr	r2, [r2, #0]
    5518:	9103      	str	r1, [sp, #12]
    551a:	2a00      	cmp	r2, #0
    551c:	db01      	blt.n	5522 <_svfiprintf_r+0xf6>
    551e:	9207      	str	r2, [sp, #28]
    5520:	e004      	b.n	552c <_svfiprintf_r+0x100>
    5522:	4252      	negs	r2, r2
    5524:	f043 0302 	orr.w	r3, r3, #2
    5528:	9207      	str	r2, [sp, #28]
    552a:	9304      	str	r3, [sp, #16]
    552c:	783b      	ldrb	r3, [r7, #0]
    552e:	2b2e      	cmp	r3, #46	; 0x2e
    5530:	d10e      	bne.n	5550 <_svfiprintf_r+0x124>
    5532:	787b      	ldrb	r3, [r7, #1]
    5534:	2b2a      	cmp	r3, #42	; 0x2a
    5536:	f107 0101 	add.w	r1, r7, #1
    553a:	d132      	bne.n	55a2 <_svfiprintf_r+0x176>
    553c:	9b03      	ldr	r3, [sp, #12]
    553e:	1d1a      	adds	r2, r3, #4
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	9203      	str	r2, [sp, #12]
    5544:	2b00      	cmp	r3, #0
    5546:	bfb8      	it	lt
    5548:	f04f 33ff 	movlt.w	r3, #4294967295
    554c:	3702      	adds	r7, #2
    554e:	9305      	str	r3, [sp, #20]
    5550:	4c2c      	ldr	r4, [pc, #176]	; (5604 <_svfiprintf_r+0x1d8>)
    5552:	7839      	ldrb	r1, [r7, #0]
    5554:	2203      	movs	r2, #3
    5556:	4620      	mov	r0, r4
    5558:	f000 fa02 	bl	5960 <memchr>
    555c:	b138      	cbz	r0, 556e <_svfiprintf_r+0x142>
    555e:	2340      	movs	r3, #64	; 0x40
    5560:	1b00      	subs	r0, r0, r4
    5562:	fa03 f000 	lsl.w	r0, r3, r0
    5566:	9b04      	ldr	r3, [sp, #16]
    5568:	4303      	orrs	r3, r0
    556a:	9304      	str	r3, [sp, #16]
    556c:	3701      	adds	r7, #1
    556e:	7839      	ldrb	r1, [r7, #0]
    5570:	4825      	ldr	r0, [pc, #148]	; (5608 <_svfiprintf_r+0x1dc>)
    5572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5576:	2206      	movs	r2, #6
    5578:	1c7e      	adds	r6, r7, #1
    557a:	f000 f9f1 	bl	5960 <memchr>
    557e:	2800      	cmp	r0, #0
    5580:	d035      	beq.n	55ee <_svfiprintf_r+0x1c2>
    5582:	4b22      	ldr	r3, [pc, #136]	; (560c <_svfiprintf_r+0x1e0>)
    5584:	b9fb      	cbnz	r3, 55c6 <_svfiprintf_r+0x19a>
    5586:	9b03      	ldr	r3, [sp, #12]
    5588:	3307      	adds	r3, #7
    558a:	f023 0307 	bic.w	r3, r3, #7
    558e:	3308      	adds	r3, #8
    5590:	9303      	str	r3, [sp, #12]
    5592:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5594:	444b      	add	r3, r9
    5596:	9309      	str	r3, [sp, #36]	; 0x24
    5598:	e76c      	b.n	5474 <_svfiprintf_r+0x48>
    559a:	fb00 3202 	mla	r2, r0, r2, r3
    559e:	2101      	movs	r1, #1
    55a0:	e7a3      	b.n	54ea <_svfiprintf_r+0xbe>
    55a2:	2300      	movs	r3, #0
    55a4:	9305      	str	r3, [sp, #20]
    55a6:	4618      	mov	r0, r3
    55a8:	240a      	movs	r4, #10
    55aa:	460f      	mov	r7, r1
    55ac:	3101      	adds	r1, #1
    55ae:	783a      	ldrb	r2, [r7, #0]
    55b0:	3a30      	subs	r2, #48	; 0x30
    55b2:	2a09      	cmp	r2, #9
    55b4:	d903      	bls.n	55be <_svfiprintf_r+0x192>
    55b6:	2b00      	cmp	r3, #0
    55b8:	d0ca      	beq.n	5550 <_svfiprintf_r+0x124>
    55ba:	9005      	str	r0, [sp, #20]
    55bc:	e7c8      	b.n	5550 <_svfiprintf_r+0x124>
    55be:	fb04 2000 	mla	r0, r4, r0, r2
    55c2:	2301      	movs	r3, #1
    55c4:	e7f1      	b.n	55aa <_svfiprintf_r+0x17e>
    55c6:	ab03      	add	r3, sp, #12
    55c8:	9300      	str	r3, [sp, #0]
    55ca:	462a      	mov	r2, r5
    55cc:	4b10      	ldr	r3, [pc, #64]	; (5610 <_svfiprintf_r+0x1e4>)
    55ce:	a904      	add	r1, sp, #16
    55d0:	4640      	mov	r0, r8
    55d2:	f3af 8000 	nop.w
    55d6:	f1b0 3fff 	cmp.w	r0, #4294967295
    55da:	4681      	mov	r9, r0
    55dc:	d1d9      	bne.n	5592 <_svfiprintf_r+0x166>
    55de:	89ab      	ldrh	r3, [r5, #12]
    55e0:	065b      	lsls	r3, r3, #25
    55e2:	f53f af38 	bmi.w	5456 <_svfiprintf_r+0x2a>
    55e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    55e8:	b01d      	add	sp, #116	; 0x74
    55ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55ee:	ab03      	add	r3, sp, #12
    55f0:	9300      	str	r3, [sp, #0]
    55f2:	462a      	mov	r2, r5
    55f4:	4b06      	ldr	r3, [pc, #24]	; (5610 <_svfiprintf_r+0x1e4>)
    55f6:	a904      	add	r1, sp, #16
    55f8:	4640      	mov	r0, r8
    55fa:	f000 f881 	bl	5700 <_printf_i>
    55fe:	e7ea      	b.n	55d6 <_svfiprintf_r+0x1aa>
    5600:	00005ec4 	.word	0x00005ec4
    5604:	00005eca 	.word	0x00005eca
    5608:	00005ece 	.word	0x00005ece
    560c:	00000000 	.word	0x00000000
    5610:	00005375 	.word	0x00005375

00005614 <_printf_common>:
    5614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5618:	4691      	mov	r9, r2
    561a:	461f      	mov	r7, r3
    561c:	688a      	ldr	r2, [r1, #8]
    561e:	690b      	ldr	r3, [r1, #16]
    5620:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5624:	4293      	cmp	r3, r2
    5626:	bfb8      	it	lt
    5628:	4613      	movlt	r3, r2
    562a:	f8c9 3000 	str.w	r3, [r9]
    562e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5632:	4606      	mov	r6, r0
    5634:	460c      	mov	r4, r1
    5636:	b112      	cbz	r2, 563e <_printf_common+0x2a>
    5638:	3301      	adds	r3, #1
    563a:	f8c9 3000 	str.w	r3, [r9]
    563e:	6823      	ldr	r3, [r4, #0]
    5640:	0699      	lsls	r1, r3, #26
    5642:	bf42      	ittt	mi
    5644:	f8d9 3000 	ldrmi.w	r3, [r9]
    5648:	3302      	addmi	r3, #2
    564a:	f8c9 3000 	strmi.w	r3, [r9]
    564e:	6825      	ldr	r5, [r4, #0]
    5650:	f015 0506 	ands.w	r5, r5, #6
    5654:	d107      	bne.n	5666 <_printf_common+0x52>
    5656:	f104 0a19 	add.w	sl, r4, #25
    565a:	68e3      	ldr	r3, [r4, #12]
    565c:	f8d9 2000 	ldr.w	r2, [r9]
    5660:	1a9b      	subs	r3, r3, r2
    5662:	429d      	cmp	r5, r3
    5664:	db29      	blt.n	56ba <_printf_common+0xa6>
    5666:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    566a:	6822      	ldr	r2, [r4, #0]
    566c:	3300      	adds	r3, #0
    566e:	bf18      	it	ne
    5670:	2301      	movne	r3, #1
    5672:	0692      	lsls	r2, r2, #26
    5674:	d42e      	bmi.n	56d4 <_printf_common+0xc0>
    5676:	f104 0243 	add.w	r2, r4, #67	; 0x43
    567a:	4639      	mov	r1, r7
    567c:	4630      	mov	r0, r6
    567e:	47c0      	blx	r8
    5680:	3001      	adds	r0, #1
    5682:	d021      	beq.n	56c8 <_printf_common+0xb4>
    5684:	6823      	ldr	r3, [r4, #0]
    5686:	68e5      	ldr	r5, [r4, #12]
    5688:	f8d9 2000 	ldr.w	r2, [r9]
    568c:	f003 0306 	and.w	r3, r3, #6
    5690:	2b04      	cmp	r3, #4
    5692:	bf08      	it	eq
    5694:	1aad      	subeq	r5, r5, r2
    5696:	68a3      	ldr	r3, [r4, #8]
    5698:	6922      	ldr	r2, [r4, #16]
    569a:	bf0c      	ite	eq
    569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    56a0:	2500      	movne	r5, #0
    56a2:	4293      	cmp	r3, r2
    56a4:	bfc4      	itt	gt
    56a6:	1a9b      	subgt	r3, r3, r2
    56a8:	18ed      	addgt	r5, r5, r3
    56aa:	f04f 0900 	mov.w	r9, #0
    56ae:	341a      	adds	r4, #26
    56b0:	454d      	cmp	r5, r9
    56b2:	d11b      	bne.n	56ec <_printf_common+0xd8>
    56b4:	2000      	movs	r0, #0
    56b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56ba:	2301      	movs	r3, #1
    56bc:	4652      	mov	r2, sl
    56be:	4639      	mov	r1, r7
    56c0:	4630      	mov	r0, r6
    56c2:	47c0      	blx	r8
    56c4:	3001      	adds	r0, #1
    56c6:	d103      	bne.n	56d0 <_printf_common+0xbc>
    56c8:	f04f 30ff 	mov.w	r0, #4294967295
    56cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56d0:	3501      	adds	r5, #1
    56d2:	e7c2      	b.n	565a <_printf_common+0x46>
    56d4:	18e1      	adds	r1, r4, r3
    56d6:	1c5a      	adds	r2, r3, #1
    56d8:	2030      	movs	r0, #48	; 0x30
    56da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    56de:	4422      	add	r2, r4
    56e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    56e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    56e8:	3302      	adds	r3, #2
    56ea:	e7c4      	b.n	5676 <_printf_common+0x62>
    56ec:	2301      	movs	r3, #1
    56ee:	4622      	mov	r2, r4
    56f0:	4639      	mov	r1, r7
    56f2:	4630      	mov	r0, r6
    56f4:	47c0      	blx	r8
    56f6:	3001      	adds	r0, #1
    56f8:	d0e6      	beq.n	56c8 <_printf_common+0xb4>
    56fa:	f109 0901 	add.w	r9, r9, #1
    56fe:	e7d7      	b.n	56b0 <_printf_common+0x9c>

00005700 <_printf_i>:
    5700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5704:	4617      	mov	r7, r2
    5706:	7e0a      	ldrb	r2, [r1, #24]
    5708:	b085      	sub	sp, #20
    570a:	2a6e      	cmp	r2, #110	; 0x6e
    570c:	4698      	mov	r8, r3
    570e:	4606      	mov	r6, r0
    5710:	460c      	mov	r4, r1
    5712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5714:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5718:	f000 80bc 	beq.w	5894 <_printf_i+0x194>
    571c:	d81a      	bhi.n	5754 <_printf_i+0x54>
    571e:	2a63      	cmp	r2, #99	; 0x63
    5720:	d02e      	beq.n	5780 <_printf_i+0x80>
    5722:	d80a      	bhi.n	573a <_printf_i+0x3a>
    5724:	2a00      	cmp	r2, #0
    5726:	f000 80c8 	beq.w	58ba <_printf_i+0x1ba>
    572a:	2a58      	cmp	r2, #88	; 0x58
    572c:	f000 808a 	beq.w	5844 <_printf_i+0x144>
    5730:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5734:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5738:	e02a      	b.n	5790 <_printf_i+0x90>
    573a:	2a64      	cmp	r2, #100	; 0x64
    573c:	d001      	beq.n	5742 <_printf_i+0x42>
    573e:	2a69      	cmp	r2, #105	; 0x69
    5740:	d1f6      	bne.n	5730 <_printf_i+0x30>
    5742:	6821      	ldr	r1, [r4, #0]
    5744:	681a      	ldr	r2, [r3, #0]
    5746:	f011 0f80 	tst.w	r1, #128	; 0x80
    574a:	d023      	beq.n	5794 <_printf_i+0x94>
    574c:	1d11      	adds	r1, r2, #4
    574e:	6019      	str	r1, [r3, #0]
    5750:	6813      	ldr	r3, [r2, #0]
    5752:	e027      	b.n	57a4 <_printf_i+0xa4>
    5754:	2a73      	cmp	r2, #115	; 0x73
    5756:	f000 80b4 	beq.w	58c2 <_printf_i+0x1c2>
    575a:	d808      	bhi.n	576e <_printf_i+0x6e>
    575c:	2a6f      	cmp	r2, #111	; 0x6f
    575e:	d02a      	beq.n	57b6 <_printf_i+0xb6>
    5760:	2a70      	cmp	r2, #112	; 0x70
    5762:	d1e5      	bne.n	5730 <_printf_i+0x30>
    5764:	680a      	ldr	r2, [r1, #0]
    5766:	f042 0220 	orr.w	r2, r2, #32
    576a:	600a      	str	r2, [r1, #0]
    576c:	e003      	b.n	5776 <_printf_i+0x76>
    576e:	2a75      	cmp	r2, #117	; 0x75
    5770:	d021      	beq.n	57b6 <_printf_i+0xb6>
    5772:	2a78      	cmp	r2, #120	; 0x78
    5774:	d1dc      	bne.n	5730 <_printf_i+0x30>
    5776:	2278      	movs	r2, #120	; 0x78
    5778:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    577c:	496e      	ldr	r1, [pc, #440]	; (5938 <_printf_i+0x238>)
    577e:	e064      	b.n	584a <_printf_i+0x14a>
    5780:	681a      	ldr	r2, [r3, #0]
    5782:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5786:	1d11      	adds	r1, r2, #4
    5788:	6019      	str	r1, [r3, #0]
    578a:	6813      	ldr	r3, [r2, #0]
    578c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5790:	2301      	movs	r3, #1
    5792:	e0a3      	b.n	58dc <_printf_i+0x1dc>
    5794:	f011 0f40 	tst.w	r1, #64	; 0x40
    5798:	f102 0104 	add.w	r1, r2, #4
    579c:	6019      	str	r1, [r3, #0]
    579e:	d0d7      	beq.n	5750 <_printf_i+0x50>
    57a0:	f9b2 3000 	ldrsh.w	r3, [r2]
    57a4:	2b00      	cmp	r3, #0
    57a6:	da03      	bge.n	57b0 <_printf_i+0xb0>
    57a8:	222d      	movs	r2, #45	; 0x2d
    57aa:	425b      	negs	r3, r3
    57ac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    57b0:	4962      	ldr	r1, [pc, #392]	; (593c <_printf_i+0x23c>)
    57b2:	220a      	movs	r2, #10
    57b4:	e017      	b.n	57e6 <_printf_i+0xe6>
    57b6:	6820      	ldr	r0, [r4, #0]
    57b8:	6819      	ldr	r1, [r3, #0]
    57ba:	f010 0f80 	tst.w	r0, #128	; 0x80
    57be:	d003      	beq.n	57c8 <_printf_i+0xc8>
    57c0:	1d08      	adds	r0, r1, #4
    57c2:	6018      	str	r0, [r3, #0]
    57c4:	680b      	ldr	r3, [r1, #0]
    57c6:	e006      	b.n	57d6 <_printf_i+0xd6>
    57c8:	f010 0f40 	tst.w	r0, #64	; 0x40
    57cc:	f101 0004 	add.w	r0, r1, #4
    57d0:	6018      	str	r0, [r3, #0]
    57d2:	d0f7      	beq.n	57c4 <_printf_i+0xc4>
    57d4:	880b      	ldrh	r3, [r1, #0]
    57d6:	4959      	ldr	r1, [pc, #356]	; (593c <_printf_i+0x23c>)
    57d8:	2a6f      	cmp	r2, #111	; 0x6f
    57da:	bf14      	ite	ne
    57dc:	220a      	movne	r2, #10
    57de:	2208      	moveq	r2, #8
    57e0:	2000      	movs	r0, #0
    57e2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    57e6:	6865      	ldr	r5, [r4, #4]
    57e8:	60a5      	str	r5, [r4, #8]
    57ea:	2d00      	cmp	r5, #0
    57ec:	f2c0 809c 	blt.w	5928 <_printf_i+0x228>
    57f0:	6820      	ldr	r0, [r4, #0]
    57f2:	f020 0004 	bic.w	r0, r0, #4
    57f6:	6020      	str	r0, [r4, #0]
    57f8:	2b00      	cmp	r3, #0
    57fa:	d13f      	bne.n	587c <_printf_i+0x17c>
    57fc:	2d00      	cmp	r5, #0
    57fe:	f040 8095 	bne.w	592c <_printf_i+0x22c>
    5802:	4675      	mov	r5, lr
    5804:	2a08      	cmp	r2, #8
    5806:	d10b      	bne.n	5820 <_printf_i+0x120>
    5808:	6823      	ldr	r3, [r4, #0]
    580a:	07da      	lsls	r2, r3, #31
    580c:	d508      	bpl.n	5820 <_printf_i+0x120>
    580e:	6923      	ldr	r3, [r4, #16]
    5810:	6862      	ldr	r2, [r4, #4]
    5812:	429a      	cmp	r2, r3
    5814:	bfde      	ittt	le
    5816:	2330      	movle	r3, #48	; 0x30
    5818:	f805 3c01 	strble.w	r3, [r5, #-1]
    581c:	f105 35ff 	addle.w	r5, r5, #4294967295
    5820:	ebae 0305 	sub.w	r3, lr, r5
    5824:	6123      	str	r3, [r4, #16]
    5826:	f8cd 8000 	str.w	r8, [sp]
    582a:	463b      	mov	r3, r7
    582c:	aa03      	add	r2, sp, #12
    582e:	4621      	mov	r1, r4
    5830:	4630      	mov	r0, r6
    5832:	f7ff feef 	bl	5614 <_printf_common>
    5836:	3001      	adds	r0, #1
    5838:	d155      	bne.n	58e6 <_printf_i+0x1e6>
    583a:	f04f 30ff 	mov.w	r0, #4294967295
    583e:	b005      	add	sp, #20
    5840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5844:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5848:	493c      	ldr	r1, [pc, #240]	; (593c <_printf_i+0x23c>)
    584a:	6822      	ldr	r2, [r4, #0]
    584c:	6818      	ldr	r0, [r3, #0]
    584e:	f012 0f80 	tst.w	r2, #128	; 0x80
    5852:	f100 0504 	add.w	r5, r0, #4
    5856:	601d      	str	r5, [r3, #0]
    5858:	d001      	beq.n	585e <_printf_i+0x15e>
    585a:	6803      	ldr	r3, [r0, #0]
    585c:	e002      	b.n	5864 <_printf_i+0x164>
    585e:	0655      	lsls	r5, r2, #25
    5860:	d5fb      	bpl.n	585a <_printf_i+0x15a>
    5862:	8803      	ldrh	r3, [r0, #0]
    5864:	07d0      	lsls	r0, r2, #31
    5866:	bf44      	itt	mi
    5868:	f042 0220 	orrmi.w	r2, r2, #32
    586c:	6022      	strmi	r2, [r4, #0]
    586e:	b91b      	cbnz	r3, 5878 <_printf_i+0x178>
    5870:	6822      	ldr	r2, [r4, #0]
    5872:	f022 0220 	bic.w	r2, r2, #32
    5876:	6022      	str	r2, [r4, #0]
    5878:	2210      	movs	r2, #16
    587a:	e7b1      	b.n	57e0 <_printf_i+0xe0>
    587c:	4675      	mov	r5, lr
    587e:	fbb3 f0f2 	udiv	r0, r3, r2
    5882:	fb02 3310 	mls	r3, r2, r0, r3
    5886:	5ccb      	ldrb	r3, [r1, r3]
    5888:	f805 3d01 	strb.w	r3, [r5, #-1]!
    588c:	4603      	mov	r3, r0
    588e:	2800      	cmp	r0, #0
    5890:	d1f5      	bne.n	587e <_printf_i+0x17e>
    5892:	e7b7      	b.n	5804 <_printf_i+0x104>
    5894:	6808      	ldr	r0, [r1, #0]
    5896:	681a      	ldr	r2, [r3, #0]
    5898:	6949      	ldr	r1, [r1, #20]
    589a:	f010 0f80 	tst.w	r0, #128	; 0x80
    589e:	d004      	beq.n	58aa <_printf_i+0x1aa>
    58a0:	1d10      	adds	r0, r2, #4
    58a2:	6018      	str	r0, [r3, #0]
    58a4:	6813      	ldr	r3, [r2, #0]
    58a6:	6019      	str	r1, [r3, #0]
    58a8:	e007      	b.n	58ba <_printf_i+0x1ba>
    58aa:	f010 0f40 	tst.w	r0, #64	; 0x40
    58ae:	f102 0004 	add.w	r0, r2, #4
    58b2:	6018      	str	r0, [r3, #0]
    58b4:	6813      	ldr	r3, [r2, #0]
    58b6:	d0f6      	beq.n	58a6 <_printf_i+0x1a6>
    58b8:	8019      	strh	r1, [r3, #0]
    58ba:	2300      	movs	r3, #0
    58bc:	6123      	str	r3, [r4, #16]
    58be:	4675      	mov	r5, lr
    58c0:	e7b1      	b.n	5826 <_printf_i+0x126>
    58c2:	681a      	ldr	r2, [r3, #0]
    58c4:	1d11      	adds	r1, r2, #4
    58c6:	6019      	str	r1, [r3, #0]
    58c8:	6815      	ldr	r5, [r2, #0]
    58ca:	6862      	ldr	r2, [r4, #4]
    58cc:	2100      	movs	r1, #0
    58ce:	4628      	mov	r0, r5
    58d0:	f000 f846 	bl	5960 <memchr>
    58d4:	b108      	cbz	r0, 58da <_printf_i+0x1da>
    58d6:	1b40      	subs	r0, r0, r5
    58d8:	6060      	str	r0, [r4, #4]
    58da:	6863      	ldr	r3, [r4, #4]
    58dc:	6123      	str	r3, [r4, #16]
    58de:	2300      	movs	r3, #0
    58e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    58e4:	e79f      	b.n	5826 <_printf_i+0x126>
    58e6:	6923      	ldr	r3, [r4, #16]
    58e8:	462a      	mov	r2, r5
    58ea:	4639      	mov	r1, r7
    58ec:	4630      	mov	r0, r6
    58ee:	47c0      	blx	r8
    58f0:	3001      	adds	r0, #1
    58f2:	d0a2      	beq.n	583a <_printf_i+0x13a>
    58f4:	6823      	ldr	r3, [r4, #0]
    58f6:	079b      	lsls	r3, r3, #30
    58f8:	d507      	bpl.n	590a <_printf_i+0x20a>
    58fa:	2500      	movs	r5, #0
    58fc:	f104 0919 	add.w	r9, r4, #25
    5900:	68e3      	ldr	r3, [r4, #12]
    5902:	9a03      	ldr	r2, [sp, #12]
    5904:	1a9b      	subs	r3, r3, r2
    5906:	429d      	cmp	r5, r3
    5908:	db05      	blt.n	5916 <_printf_i+0x216>
    590a:	68e0      	ldr	r0, [r4, #12]
    590c:	9b03      	ldr	r3, [sp, #12]
    590e:	4298      	cmp	r0, r3
    5910:	bfb8      	it	lt
    5912:	4618      	movlt	r0, r3
    5914:	e793      	b.n	583e <_printf_i+0x13e>
    5916:	2301      	movs	r3, #1
    5918:	464a      	mov	r2, r9
    591a:	4639      	mov	r1, r7
    591c:	4630      	mov	r0, r6
    591e:	47c0      	blx	r8
    5920:	3001      	adds	r0, #1
    5922:	d08a      	beq.n	583a <_printf_i+0x13a>
    5924:	3501      	adds	r5, #1
    5926:	e7eb      	b.n	5900 <_printf_i+0x200>
    5928:	2b00      	cmp	r3, #0
    592a:	d1a7      	bne.n	587c <_printf_i+0x17c>
    592c:	780b      	ldrb	r3, [r1, #0]
    592e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5932:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5936:	e765      	b.n	5804 <_printf_i+0x104>
    5938:	00005ee6 	.word	0x00005ee6
    593c:	00005ed5 	.word	0x00005ed5

00005940 <_sbrk_r>:
    5940:	b538      	push	{r3, r4, r5, lr}
    5942:	4c06      	ldr	r4, [pc, #24]	; (595c <_sbrk_r+0x1c>)
    5944:	2300      	movs	r3, #0
    5946:	4605      	mov	r5, r0
    5948:	4608      	mov	r0, r1
    594a:	6023      	str	r3, [r4, #0]
    594c:	f7fc f8a6 	bl	1a9c <_sbrk>
    5950:	1c43      	adds	r3, r0, #1
    5952:	d102      	bne.n	595a <_sbrk_r+0x1a>
    5954:	6823      	ldr	r3, [r4, #0]
    5956:	b103      	cbz	r3, 595a <_sbrk_r+0x1a>
    5958:	602b      	str	r3, [r5, #0]
    595a:	bd38      	pop	{r3, r4, r5, pc}
    595c:	20000384 	.word	0x20000384

00005960 <memchr>:
    5960:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5964:	2a10      	cmp	r2, #16
    5966:	db2b      	blt.n	59c0 <memchr+0x60>
    5968:	f010 0f07 	tst.w	r0, #7
    596c:	d008      	beq.n	5980 <memchr+0x20>
    596e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5972:	3a01      	subs	r2, #1
    5974:	428b      	cmp	r3, r1
    5976:	d02d      	beq.n	59d4 <memchr+0x74>
    5978:	f010 0f07 	tst.w	r0, #7
    597c:	b342      	cbz	r2, 59d0 <memchr+0x70>
    597e:	d1f6      	bne.n	596e <memchr+0xe>
    5980:	b4f0      	push	{r4, r5, r6, r7}
    5982:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5986:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    598a:	f022 0407 	bic.w	r4, r2, #7
    598e:	f07f 0700 	mvns.w	r7, #0
    5992:	2300      	movs	r3, #0
    5994:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5998:	3c08      	subs	r4, #8
    599a:	ea85 0501 	eor.w	r5, r5, r1
    599e:	ea86 0601 	eor.w	r6, r6, r1
    59a2:	fa85 f547 	uadd8	r5, r5, r7
    59a6:	faa3 f587 	sel	r5, r3, r7
    59aa:	fa86 f647 	uadd8	r6, r6, r7
    59ae:	faa5 f687 	sel	r6, r5, r7
    59b2:	b98e      	cbnz	r6, 59d8 <memchr+0x78>
    59b4:	d1ee      	bne.n	5994 <memchr+0x34>
    59b6:	bcf0      	pop	{r4, r5, r6, r7}
    59b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    59bc:	f002 0207 	and.w	r2, r2, #7
    59c0:	b132      	cbz	r2, 59d0 <memchr+0x70>
    59c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    59c6:	3a01      	subs	r2, #1
    59c8:	ea83 0301 	eor.w	r3, r3, r1
    59cc:	b113      	cbz	r3, 59d4 <memchr+0x74>
    59ce:	d1f8      	bne.n	59c2 <memchr+0x62>
    59d0:	2000      	movs	r0, #0
    59d2:	4770      	bx	lr
    59d4:	3801      	subs	r0, #1
    59d6:	4770      	bx	lr
    59d8:	2d00      	cmp	r5, #0
    59da:	bf06      	itte	eq
    59dc:	4635      	moveq	r5, r6
    59de:	3803      	subeq	r0, #3
    59e0:	3807      	subne	r0, #7
    59e2:	f015 0f01 	tst.w	r5, #1
    59e6:	d107      	bne.n	59f8 <memchr+0x98>
    59e8:	3001      	adds	r0, #1
    59ea:	f415 7f80 	tst.w	r5, #256	; 0x100
    59ee:	bf02      	ittt	eq
    59f0:	3001      	addeq	r0, #1
    59f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    59f6:	3001      	addeq	r0, #1
    59f8:	bcf0      	pop	{r4, r5, r6, r7}
    59fa:	3801      	subs	r0, #1
    59fc:	4770      	bx	lr
    59fe:	bf00      	nop

00005a00 <memcpy>:
    5a00:	b510      	push	{r4, lr}
    5a02:	1e43      	subs	r3, r0, #1
    5a04:	440a      	add	r2, r1
    5a06:	4291      	cmp	r1, r2
    5a08:	d100      	bne.n	5a0c <memcpy+0xc>
    5a0a:	bd10      	pop	{r4, pc}
    5a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
    5a10:	f803 4f01 	strb.w	r4, [r3, #1]!
    5a14:	e7f7      	b.n	5a06 <memcpy+0x6>

00005a16 <memmove>:
    5a16:	4288      	cmp	r0, r1
    5a18:	b510      	push	{r4, lr}
    5a1a:	eb01 0302 	add.w	r3, r1, r2
    5a1e:	d803      	bhi.n	5a28 <memmove+0x12>
    5a20:	1e42      	subs	r2, r0, #1
    5a22:	4299      	cmp	r1, r3
    5a24:	d10c      	bne.n	5a40 <memmove+0x2a>
    5a26:	bd10      	pop	{r4, pc}
    5a28:	4298      	cmp	r0, r3
    5a2a:	d2f9      	bcs.n	5a20 <memmove+0xa>
    5a2c:	1881      	adds	r1, r0, r2
    5a2e:	1ad2      	subs	r2, r2, r3
    5a30:	42d3      	cmn	r3, r2
    5a32:	d100      	bne.n	5a36 <memmove+0x20>
    5a34:	bd10      	pop	{r4, pc}
    5a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    5a3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
    5a3e:	e7f7      	b.n	5a30 <memmove+0x1a>
    5a40:	f811 4b01 	ldrb.w	r4, [r1], #1
    5a44:	f802 4f01 	strb.w	r4, [r2, #1]!
    5a48:	e7eb      	b.n	5a22 <memmove+0xc>

00005a4a <__malloc_lock>:
    5a4a:	4770      	bx	lr

00005a4c <__malloc_unlock>:
    5a4c:	4770      	bx	lr
	...

00005a50 <_free_r>:
    5a50:	b538      	push	{r3, r4, r5, lr}
    5a52:	4605      	mov	r5, r0
    5a54:	2900      	cmp	r1, #0
    5a56:	d045      	beq.n	5ae4 <_free_r+0x94>
    5a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5a5c:	1f0c      	subs	r4, r1, #4
    5a5e:	2b00      	cmp	r3, #0
    5a60:	bfb8      	it	lt
    5a62:	18e4      	addlt	r4, r4, r3
    5a64:	f7ff fff1 	bl	5a4a <__malloc_lock>
    5a68:	4a1f      	ldr	r2, [pc, #124]	; (5ae8 <_free_r+0x98>)
    5a6a:	6813      	ldr	r3, [r2, #0]
    5a6c:	4610      	mov	r0, r2
    5a6e:	b933      	cbnz	r3, 5a7e <_free_r+0x2e>
    5a70:	6063      	str	r3, [r4, #4]
    5a72:	6014      	str	r4, [r2, #0]
    5a74:	4628      	mov	r0, r5
    5a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5a7a:	f7ff bfe7 	b.w	5a4c <__malloc_unlock>
    5a7e:	42a3      	cmp	r3, r4
    5a80:	d90c      	bls.n	5a9c <_free_r+0x4c>
    5a82:	6821      	ldr	r1, [r4, #0]
    5a84:	1862      	adds	r2, r4, r1
    5a86:	4293      	cmp	r3, r2
    5a88:	bf04      	itt	eq
    5a8a:	681a      	ldreq	r2, [r3, #0]
    5a8c:	685b      	ldreq	r3, [r3, #4]
    5a8e:	6063      	str	r3, [r4, #4]
    5a90:	bf04      	itt	eq
    5a92:	1852      	addeq	r2, r2, r1
    5a94:	6022      	streq	r2, [r4, #0]
    5a96:	6004      	str	r4, [r0, #0]
    5a98:	e7ec      	b.n	5a74 <_free_r+0x24>
    5a9a:	4613      	mov	r3, r2
    5a9c:	685a      	ldr	r2, [r3, #4]
    5a9e:	b10a      	cbz	r2, 5aa4 <_free_r+0x54>
    5aa0:	42a2      	cmp	r2, r4
    5aa2:	d9fa      	bls.n	5a9a <_free_r+0x4a>
    5aa4:	6819      	ldr	r1, [r3, #0]
    5aa6:	1858      	adds	r0, r3, r1
    5aa8:	42a0      	cmp	r0, r4
    5aaa:	d10b      	bne.n	5ac4 <_free_r+0x74>
    5aac:	6820      	ldr	r0, [r4, #0]
    5aae:	4401      	add	r1, r0
    5ab0:	1858      	adds	r0, r3, r1
    5ab2:	4282      	cmp	r2, r0
    5ab4:	6019      	str	r1, [r3, #0]
    5ab6:	d1dd      	bne.n	5a74 <_free_r+0x24>
    5ab8:	6810      	ldr	r0, [r2, #0]
    5aba:	6852      	ldr	r2, [r2, #4]
    5abc:	605a      	str	r2, [r3, #4]
    5abe:	4401      	add	r1, r0
    5ac0:	6019      	str	r1, [r3, #0]
    5ac2:	e7d7      	b.n	5a74 <_free_r+0x24>
    5ac4:	d902      	bls.n	5acc <_free_r+0x7c>
    5ac6:	230c      	movs	r3, #12
    5ac8:	602b      	str	r3, [r5, #0]
    5aca:	e7d3      	b.n	5a74 <_free_r+0x24>
    5acc:	6820      	ldr	r0, [r4, #0]
    5ace:	1821      	adds	r1, r4, r0
    5ad0:	428a      	cmp	r2, r1
    5ad2:	bf04      	itt	eq
    5ad4:	6811      	ldreq	r1, [r2, #0]
    5ad6:	6852      	ldreq	r2, [r2, #4]
    5ad8:	6062      	str	r2, [r4, #4]
    5ada:	bf04      	itt	eq
    5adc:	1809      	addeq	r1, r1, r0
    5ade:	6021      	streq	r1, [r4, #0]
    5ae0:	605c      	str	r4, [r3, #4]
    5ae2:	e7c7      	b.n	5a74 <_free_r+0x24>
    5ae4:	bd38      	pop	{r3, r4, r5, pc}
    5ae6:	bf00      	nop
    5ae8:	200001c4 	.word	0x200001c4

00005aec <_realloc_r>:
    5aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aee:	4607      	mov	r7, r0
    5af0:	4614      	mov	r4, r2
    5af2:	460e      	mov	r6, r1
    5af4:	b921      	cbnz	r1, 5b00 <_realloc_r+0x14>
    5af6:	4611      	mov	r1, r2
    5af8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5afc:	f7ff bbdc 	b.w	52b8 <_malloc_r>
    5b00:	b922      	cbnz	r2, 5b0c <_realloc_r+0x20>
    5b02:	f7ff ffa5 	bl	5a50 <_free_r>
    5b06:	4625      	mov	r5, r4
    5b08:	4628      	mov	r0, r5
    5b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b0c:	f000 f814 	bl	5b38 <_malloc_usable_size_r>
    5b10:	4284      	cmp	r4, r0
    5b12:	d90f      	bls.n	5b34 <_realloc_r+0x48>
    5b14:	4621      	mov	r1, r4
    5b16:	4638      	mov	r0, r7
    5b18:	f7ff fbce 	bl	52b8 <_malloc_r>
    5b1c:	4605      	mov	r5, r0
    5b1e:	2800      	cmp	r0, #0
    5b20:	d0f2      	beq.n	5b08 <_realloc_r+0x1c>
    5b22:	4631      	mov	r1, r6
    5b24:	4622      	mov	r2, r4
    5b26:	f7ff ff6b 	bl	5a00 <memcpy>
    5b2a:	4631      	mov	r1, r6
    5b2c:	4638      	mov	r0, r7
    5b2e:	f7ff ff8f 	bl	5a50 <_free_r>
    5b32:	e7e9      	b.n	5b08 <_realloc_r+0x1c>
    5b34:	4635      	mov	r5, r6
    5b36:	e7e7      	b.n	5b08 <_realloc_r+0x1c>

00005b38 <_malloc_usable_size_r>:
    5b38:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5b3c:	2800      	cmp	r0, #0
    5b3e:	f1a0 0004 	sub.w	r0, r0, #4
    5b42:	bfbc      	itt	lt
    5b44:	580b      	ldrlt	r3, [r1, r0]
    5b46:	18c0      	addlt	r0, r0, r3
    5b48:	4770      	bx	lr
    5b4a:	0000      	movs	r0, r0
    5b4c:	682f2e2e 	.word	0x682f2e2e
    5b50:	702f6c70 	.word	0x702f6c70
    5b54:	2f74726f 	.word	0x2f74726f
    5b58:	5f6c7068 	.word	0x5f6c7068
    5b5c:	6f697067 	.word	0x6f697067
    5b60:	7361625f 	.word	0x7361625f
    5b64:	00682e65 	.word	0x00682e65
    5b68:	682f2e2e 	.word	0x682f2e2e
    5b6c:	732f6c61 	.word	0x732f6c61
    5b70:	682f6372 	.word	0x682f6372
    5b74:	695f6c61 	.word	0x695f6c61
    5b78:	00632e6f 	.word	0x00632e6f
    5b7c:	682f2e2e 	.word	0x682f2e2e
    5b80:	732f6c61 	.word	0x732f6c61
    5b84:	682f6372 	.word	0x682f6372
    5b88:	705f6c61 	.word	0x705f6c61
    5b8c:	632e6d77 	.word	0x632e6d77
    5b90:	00000000 	.word	0x00000000
    5b94:	682f2e2e 	.word	0x682f2e2e
    5b98:	732f6c61 	.word	0x732f6c61
    5b9c:	682f6372 	.word	0x682f6372
    5ba0:	745f6c61 	.word	0x745f6c61
    5ba4:	72656d69 	.word	0x72656d69
    5ba8:	0000632e 	.word	0x0000632e
    5bac:	682f2e2e 	.word	0x682f2e2e
    5bb0:	732f6c61 	.word	0x732f6c61
    5bb4:	682f6372 	.word	0x682f6372
    5bb8:	755f6c61 	.word	0x755f6c61
    5bbc:	74726173 	.word	0x74726173
    5bc0:	7973615f 	.word	0x7973615f
    5bc4:	632e636e 	.word	0x632e636e
    5bc8:	00000000 	.word	0x00000000
    5bcc:	682f2e2e 	.word	0x682f2e2e
    5bd0:	752f6c61 	.word	0x752f6c61
    5bd4:	736c6974 	.word	0x736c6974
    5bd8:	6372732f 	.word	0x6372732f
    5bdc:	6974752f 	.word	0x6974752f
    5be0:	6c5f736c 	.word	0x6c5f736c
    5be4:	2e747369 	.word	0x2e747369
    5be8:	00000063 	.word	0x00000063
    5bec:	682f2e2e 	.word	0x682f2e2e
    5bf0:	752f6c61 	.word	0x752f6c61
    5bf4:	736c6974 	.word	0x736c6974
    5bf8:	6372732f 	.word	0x6372732f
    5bfc:	6974752f 	.word	0x6974752f
    5c00:	725f736c 	.word	0x725f736c
    5c04:	62676e69 	.word	0x62676e69
    5c08:	65666675 	.word	0x65666675
    5c0c:	00632e72 	.word	0x00632e72

00005c10 <_map>:
    5c10:	00000000 00000020 682f2e2e 652f6c70     .... ...../hpl/e
    5c20:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00005c30 <user_mux_confs>:
	...
    5c5c:	00000001 00000000 00000000 00000000     ................
	...

00005c74 <channel_confs>:
    5c74:	00000212 00000000 00000000 00000000     ................
	...

00005cb4 <interrupt_cfg>:
	...
    5d34:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    5d44:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    5d54:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    5d64:	43000400 43000800 43000c00              ...C...C...C

00005d70 <sercomspi_regs>:
	...
    5d84:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    5d94:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    5da4:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    5db4:	43001800 69736f70 6e6f6974 25203d20     ...Cposition = %
    5dc4:	207c2064 65657073 203d2064 20756c25     d | speed = %lu 
    5dd4:	204d5052 6964207c 74636572 206e6f69     RPM | direction 
    5de4:	6425203d 0000000a 72727563 5f746e65     = %d....current_
    5df4:	6f727265 203d2072 20646c25 5f50207c     error = %ld | P_
    5e04:	6d726574 25203d20 7c20646c 745f4920     term = %ld | I_t
    5e14:	206d7265 6c25203d 207c2064 79747564     erm = %ld | duty
    5e24:	6c637963 70735f65 20646565 6c25203d     cycle_speed = %l
    5e34:	207c2064 72727563 20746e65 65657073     d | current spee
    5e44:	203d2064 20646c25 6174207c 74656772     d = %ld | target
    5e54:	65707320 3d206465 646c2520 0000000a      speed = %ld....

00005e64 <__sf_fake_stderr>:
	...

00005e84 <__sf_fake_stdin>:
	...

00005ea4 <__sf_fake_stdout>:
	...
    5ec4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5ed4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5ee4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5ef4:	00006665                                ef..

00005ef8 <_init>:
    5ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5efa:	bf00      	nop
    5efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5efe:	bc08      	pop	{r3}
    5f00:	469e      	mov	lr, r3
    5f02:	4770      	bx	lr

00005f04 <__init_array_start>:
    5f04:	00000289 	.word	0x00000289

00005f08 <_fini>:
    5f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f0a:	bf00      	nop
    5f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f0e:	bc08      	pop	{r3}
    5f10:	469e      	mov	lr, r3
    5f12:	4770      	bx	lr

00005f14 <__fini_array_start>:
    5f14:	00000265 	.word	0x00000265
