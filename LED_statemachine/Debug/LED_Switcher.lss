
LED_Switcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002748  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  00002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002002c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002002c  2**0
                  CONTENTS
  4 .bss          00000080  2000002c  00002774  0002002c  2**2
                  ALLOC
  5 .stack        00010004  200000ac  000027f4  0002002c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001e20e  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000026f1  00000000  00000000  0003e2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009a68  00000000  00000000  000409b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010e8  00000000  00000000  0004a41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fc0  00000000  00000000  0004b502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031ebc  00000000  00000000  0004c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012336  00000000  00000000  0007e37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00115e32  00000000  00000000  000906b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004704  00000000  00000000  001a64e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 00 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	51 16 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     Q...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	21 14 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     !...}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     124:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 99 21 00 00 7d 03 00 00     }...}....!..}...
     1f4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000002c 	.word	0x2000002c
     280:	00000000 	.word	0x00000000
     284:	00002748 	.word	0x00002748

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002748 	.word	0x00002748
     2c4:	20000030 	.word	0x20000030
     2c8:	00002748 	.word	0x00002748
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000afd 	.word	0x00000afd

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	00002748 	.word	0x00002748
     35c:	20000000 	.word	0x20000000
     360:	2000002c 	.word	0x2000002c
     364:	2000002c 	.word	0x2000002c
     368:	200000ac 	.word	0x200000ac
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	000025ad 	.word	0x000025ad
     378:	00002539 	.word	0x00002539

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	695b      	ldr	r3, [r3, #20]
     3d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	695b      	ldr	r3, [r3, #20]
     3f4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	460b      	mov	r3, r1
     412:	607a      	str	r2, [r7, #4]
     414:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     416:	7afb      	ldrb	r3, [r7, #11]
     418:	68fa      	ldr	r2, [r7, #12]
     41a:	01db      	lsls	r3, r3, #7
     41c:	4413      	add	r3, r2
     41e:	3308      	adds	r3, #8
     420:	687a      	ldr	r2, [r7, #4]
     422:	601a      	str	r2, [r3, #0]
}
     424:	bf00      	nop
     426:	3714      	adds	r7, #20
     428:	46bd      	mov	sp, r7
     42a:	f85d 7b04 	ldr.w	r7, [sp], #4
     42e:	4770      	bx	lr

00000430 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     430:	b480      	push	{r7}
     432:	b085      	sub	sp, #20
     434:	af00      	add	r7, sp, #0
     436:	60f8      	str	r0, [r7, #12]
     438:	460b      	mov	r3, r1
     43a:	607a      	str	r2, [r7, #4]
     43c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     43e:	7afb      	ldrb	r3, [r7, #11]
     440:	68fa      	ldr	r2, [r7, #12]
     442:	01db      	lsls	r3, r3, #7
     444:	4413      	add	r3, r2
     446:	3304      	adds	r3, #4
     448:	687a      	ldr	r2, [r7, #4]
     44a:	601a      	str	r2, [r3, #0]
}
     44c:	bf00      	nop
     44e:	3714      	adds	r7, #20
     450:	46bd      	mov	sp, r7
     452:	f85d 7b04 	ldr.w	r7, [sp], #4
     456:	4770      	bx	lr

00000458 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     458:	b480      	push	{r7}
     45a:	b085      	sub	sp, #20
     45c:	af00      	add	r7, sp, #0
     45e:	60f8      	str	r0, [r7, #12]
     460:	460b      	mov	r3, r1
     462:	607a      	str	r2, [r7, #4]
     464:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     466:	7afb      	ldrb	r3, [r7, #11]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	01db      	lsls	r3, r3, #7
     46c:	4413      	add	r3, r2
     46e:	3318      	adds	r3, #24
     470:	687a      	ldr	r2, [r7, #4]
     472:	601a      	str	r2, [r3, #0]
}
     474:	bf00      	nop
     476:	3714      	adds	r7, #20
     478:	46bd      	mov	sp, r7
     47a:	f85d 7b04 	ldr.w	r7, [sp], #4
     47e:	4770      	bx	lr

00000480 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	460b      	mov	r3, r1
     48a:	607a      	str	r2, [r7, #4]
     48c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48e:	7afb      	ldrb	r3, [r7, #11]
     490:	68fa      	ldr	r2, [r7, #12]
     492:	01db      	lsls	r3, r3, #7
     494:	4413      	add	r3, r2
     496:	3314      	adds	r3, #20
     498:	687a      	ldr	r2, [r7, #4]
     49a:	601a      	str	r2, [r3, #0]
}
     49c:	bf00      	nop
     49e:	3714      	adds	r7, #20
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     4a8:	b480      	push	{r7}
     4aa:	b085      	sub	sp, #20
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	4608      	mov	r0, r1
     4b2:	4611      	mov	r1, r2
     4b4:	461a      	mov	r2, r3
     4b6:	4603      	mov	r3, r0
     4b8:	70fb      	strb	r3, [r7, #3]
     4ba:	460b      	mov	r3, r1
     4bc:	70bb      	strb	r3, [r7, #2]
     4be:	4613      	mov	r3, r2
     4c0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c2:	78fa      	ldrb	r2, [r7, #3]
     4c4:	78bb      	ldrb	r3, [r7, #2]
     4c6:	6879      	ldr	r1, [r7, #4]
     4c8:	01d2      	lsls	r2, r2, #7
     4ca:	440a      	add	r2, r1
     4cc:	4413      	add	r3, r2
     4ce:	3330      	adds	r3, #48	; 0x30
     4d0:	781b      	ldrb	r3, [r3, #0]
     4d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d4:	7bfb      	ldrb	r3, [r7, #15]
     4d6:	f023 030f 	bic.w	r3, r3, #15
     4da:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     4dc:	787b      	ldrb	r3, [r7, #1]
     4de:	f003 030f 	and.w	r3, r3, #15
     4e2:	b2da      	uxtb	r2, r3
     4e4:	7bfb      	ldrb	r3, [r7, #15]
     4e6:	4313      	orrs	r3, r2
     4e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	78fa      	ldrb	r2, [r7, #3]
     4ec:	78bb      	ldrb	r3, [r7, #2]
     4ee:	6879      	ldr	r1, [r7, #4]
     4f0:	01d2      	lsls	r2, r2, #7
     4f2:	440a      	add	r2, r1
     4f4:	4413      	add	r3, r2
     4f6:	3330      	adds	r3, #48	; 0x30
     4f8:	7bfa      	ldrb	r2, [r7, #15]
     4fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4fc:	bf00      	nop
     4fe:	3714      	adds	r7, #20
     500:	46bd      	mov	sp, r7
     502:	f85d 7b04 	ldr.w	r7, [sp], #4
     506:	4770      	bx	lr

00000508 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     508:	b480      	push	{r7}
     50a:	b085      	sub	sp, #20
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
     510:	4608      	mov	r0, r1
     512:	4611      	mov	r1, r2
     514:	461a      	mov	r2, r3
     516:	4603      	mov	r3, r0
     518:	70fb      	strb	r3, [r7, #3]
     51a:	460b      	mov	r3, r1
     51c:	70bb      	strb	r3, [r7, #2]
     51e:	4613      	mov	r3, r2
     520:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     522:	78fa      	ldrb	r2, [r7, #3]
     524:	78bb      	ldrb	r3, [r7, #2]
     526:	6879      	ldr	r1, [r7, #4]
     528:	01d2      	lsls	r2, r2, #7
     52a:	440a      	add	r2, r1
     52c:	4413      	add	r3, r2
     52e:	3330      	adds	r3, #48	; 0x30
     530:	781b      	ldrb	r3, [r3, #0]
     532:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     534:	7bfb      	ldrb	r3, [r7, #15]
     536:	f003 030f 	and.w	r3, r3, #15
     53a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     53c:	787b      	ldrb	r3, [r7, #1]
     53e:	011b      	lsls	r3, r3, #4
     540:	b2da      	uxtb	r2, r3
     542:	7bfb      	ldrb	r3, [r7, #15]
     544:	4313      	orrs	r3, r2
     546:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     548:	78fa      	ldrb	r2, [r7, #3]
     54a:	78bb      	ldrb	r3, [r7, #2]
     54c:	6879      	ldr	r1, [r7, #4]
     54e:	01d2      	lsls	r2, r2, #7
     550:	440a      	add	r2, r1
     552:	4413      	add	r3, r2
     554:	3330      	adds	r3, #48	; 0x30
     556:	7bfa      	ldrb	r2, [r7, #15]
     558:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55a:	bf00      	nop
     55c:	3714      	adds	r7, #20
     55e:	46bd      	mov	sp, r7
     560:	f85d 7b04 	ldr.w	r7, [sp], #4
     564:	4770      	bx	lr

00000566 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     566:	b480      	push	{r7}
     568:	b085      	sub	sp, #20
     56a:	af00      	add	r7, sp, #0
     56c:	6078      	str	r0, [r7, #4]
     56e:	4608      	mov	r0, r1
     570:	4611      	mov	r1, r2
     572:	461a      	mov	r2, r3
     574:	4603      	mov	r3, r0
     576:	70fb      	strb	r3, [r7, #3]
     578:	460b      	mov	r3, r1
     57a:	70bb      	strb	r3, [r7, #2]
     57c:	4613      	mov	r3, r2
     57e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	78fa      	ldrb	r2, [r7, #3]
     582:	78bb      	ldrb	r3, [r7, #2]
     584:	6879      	ldr	r1, [r7, #4]
     586:	01d2      	lsls	r2, r2, #7
     588:	440a      	add	r2, r1
     58a:	4413      	add	r3, r2
     58c:	3340      	adds	r3, #64	; 0x40
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	7bfb      	ldrb	r3, [r7, #15]
     594:	f023 0301 	bic.w	r3, r3, #1
     598:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59a:	787a      	ldrb	r2, [r7, #1]
     59c:	7bfb      	ldrb	r3, [r7, #15]
     59e:	4313      	orrs	r3, r2
     5a0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a2:	78fa      	ldrb	r2, [r7, #3]
     5a4:	78bb      	ldrb	r3, [r7, #2]
     5a6:	6879      	ldr	r1, [r7, #4]
     5a8:	01d2      	lsls	r2, r2, #7
     5aa:	440a      	add	r2, r1
     5ac:	4413      	add	r3, r2
     5ae:	3340      	adds	r3, #64	; 0x40
     5b0:	7bfa      	ldrb	r2, [r7, #15]
     5b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5b4:	bf00      	nop
     5b6:	3714      	adds	r7, #20
     5b8:	46bd      	mov	sp, r7
     5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     5be:	4770      	bx	lr

000005c0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5c0:	b490      	push	{r4, r7}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
     5c8:	460b      	mov	r3, r1
     5ca:	70fb      	strb	r3, [r7, #3]
     5cc:	4613      	mov	r3, r2
     5ce:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5d0:	78fa      	ldrb	r2, [r7, #3]
     5d2:	78bb      	ldrb	r3, [r7, #2]
     5d4:	78f8      	ldrb	r0, [r7, #3]
     5d6:	78b9      	ldrb	r1, [r7, #2]
     5d8:	687c      	ldr	r4, [r7, #4]
     5da:	01c0      	lsls	r0, r0, #7
     5dc:	4420      	add	r0, r4
     5de:	4401      	add	r1, r0
     5e0:	3140      	adds	r1, #64	; 0x40
     5e2:	7809      	ldrb	r1, [r1, #0]
     5e4:	b2c9      	uxtb	r1, r1
     5e6:	f041 0104 	orr.w	r1, r1, #4
     5ea:	b2c8      	uxtb	r0, r1
     5ec:	6879      	ldr	r1, [r7, #4]
     5ee:	01d2      	lsls	r2, r2, #7
     5f0:	440a      	add	r2, r1
     5f2:	4413      	add	r3, r2
     5f4:	3340      	adds	r3, #64	; 0x40
     5f6:	4602      	mov	r2, r0
     5f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5fa:	bf00      	nop
     5fc:	3708      	adds	r7, #8
     5fe:	46bd      	mov	sp, r7
     600:	bc90      	pop	{r4, r7}
     602:	4770      	bx	lr

00000604 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     604:	b490      	push	{r4, r7}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
     60c:	460b      	mov	r3, r1
     60e:	70fb      	strb	r3, [r7, #3]
     610:	4613      	mov	r3, r2
     612:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     614:	78fa      	ldrb	r2, [r7, #3]
     616:	78bb      	ldrb	r3, [r7, #2]
     618:	78f8      	ldrb	r0, [r7, #3]
     61a:	78b9      	ldrb	r1, [r7, #2]
     61c:	687c      	ldr	r4, [r7, #4]
     61e:	01c0      	lsls	r0, r0, #7
     620:	4420      	add	r0, r4
     622:	4401      	add	r1, r0
     624:	3140      	adds	r1, #64	; 0x40
     626:	7809      	ldrb	r1, [r1, #0]
     628:	b2c9      	uxtb	r1, r1
     62a:	f021 0104 	bic.w	r1, r1, #4
     62e:	b2c8      	uxtb	r0, r1
     630:	6879      	ldr	r1, [r7, #4]
     632:	01d2      	lsls	r2, r2, #7
     634:	440a      	add	r2, r1
     636:	4413      	add	r3, r2
     638:	3340      	adds	r3, #64	; 0x40
     63a:	4602      	mov	r2, r0
     63c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     63e:	bf00      	nop
     640:	3708      	adds	r7, #8
     642:	46bd      	mov	sp, r7
     644:	bc90      	pop	{r4, r7}
     646:	4770      	bx	lr

00000648 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     648:	b480      	push	{r7}
     64a:	b085      	sub	sp, #20
     64c:	af00      	add	r7, sp, #0
     64e:	60f8      	str	r0, [r7, #12]
     650:	460b      	mov	r3, r1
     652:	607a      	str	r2, [r7, #4]
     654:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	7afb      	ldrb	r3, [r7, #11]
     658:	68fa      	ldr	r2, [r7, #12]
     65a:	01db      	lsls	r3, r3, #7
     65c:	4413      	add	r3, r2
     65e:	3328      	adds	r3, #40	; 0x28
     660:	687a      	ldr	r2, [r7, #4]
     662:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     664:	bf00      	nop
     666:	3714      	adds	r7, #20
     668:	46bd      	mov	sp, r7
     66a:	f85d 7b04 	ldr.w	r7, [sp], #4
     66e:	4770      	bx	lr

00000670 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	4603      	mov	r3, r0
     678:	6039      	str	r1, [r7, #0]
     67a:	71fb      	strb	r3, [r7, #7]
     67c:	4613      	mov	r3, r2
     67e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     680:	79bb      	ldrb	r3, [r7, #6]
     682:	2b01      	cmp	r3, #1
     684:	d01c      	beq.n	6c0 <_gpio_set_direction+0x50>
     686:	2b02      	cmp	r3, #2
     688:	d037      	beq.n	6fa <_gpio_set_direction+0x8a>
     68a:	2b00      	cmp	r3, #0
     68c:	d14e      	bne.n	72c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     68e:	79fb      	ldrb	r3, [r7, #7]
     690:	683a      	ldr	r2, [r7, #0]
     692:	4619      	mov	r1, r3
     694:	482a      	ldr	r0, [pc, #168]	; (740 <_gpio_set_direction+0xd0>)
     696:	4b2b      	ldr	r3, [pc, #172]	; (744 <_gpio_set_direction+0xd4>)
     698:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     69a:	683b      	ldr	r3, [r7, #0]
     69c:	b29b      	uxth	r3, r3
     69e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     6a2:	79fb      	ldrb	r3, [r7, #7]
     6a4:	4619      	mov	r1, r3
     6a6:	4826      	ldr	r0, [pc, #152]	; (740 <_gpio_set_direction+0xd0>)
     6a8:	4b27      	ldr	r3, [pc, #156]	; (748 <_gpio_set_direction+0xd8>)
     6aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6ac:	683b      	ldr	r3, [r7, #0]
     6ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     6b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     6b4:	79fb      	ldrb	r3, [r7, #7]
     6b6:	4619      	mov	r1, r3
     6b8:	4821      	ldr	r0, [pc, #132]	; (740 <_gpio_set_direction+0xd0>)
     6ba:	4b23      	ldr	r3, [pc, #140]	; (748 <_gpio_set_direction+0xd8>)
     6bc:	4798      	blx	r3
		break;
     6be:	e03a      	b.n	736 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6c0:	79fb      	ldrb	r3, [r7, #7]
     6c2:	683a      	ldr	r2, [r7, #0]
     6c4:	4619      	mov	r1, r3
     6c6:	481e      	ldr	r0, [pc, #120]	; (740 <_gpio_set_direction+0xd0>)
     6c8:	4b1e      	ldr	r3, [pc, #120]	; (744 <_gpio_set_direction+0xd4>)
     6ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	b29b      	uxth	r3, r3
     6d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     6d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6d8:	79f9      	ldrb	r1, [r7, #7]
     6da:	461a      	mov	r2, r3
     6dc:	4818      	ldr	r0, [pc, #96]	; (740 <_gpio_set_direction+0xd0>)
     6de:	4b1a      	ldr	r3, [pc, #104]	; (748 <_gpio_set_direction+0xd8>)
     6e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     6e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     6ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6ee:	79f9      	ldrb	r1, [r7, #7]
     6f0:	461a      	mov	r2, r3
     6f2:	4813      	ldr	r0, [pc, #76]	; (740 <_gpio_set_direction+0xd0>)
     6f4:	4b14      	ldr	r3, [pc, #80]	; (748 <_gpio_set_direction+0xd8>)
     6f6:	4798      	blx	r3
		break;
     6f8:	e01d      	b.n	736 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     6fa:	79fb      	ldrb	r3, [r7, #7]
     6fc:	683a      	ldr	r2, [r7, #0]
     6fe:	4619      	mov	r1, r3
     700:	480f      	ldr	r0, [pc, #60]	; (740 <_gpio_set_direction+0xd0>)
     702:	4b12      	ldr	r3, [pc, #72]	; (74c <_gpio_set_direction+0xdc>)
     704:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     706:	683b      	ldr	r3, [r7, #0]
     708:	b29b      	uxth	r3, r3
     70a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     70e:	79fb      	ldrb	r3, [r7, #7]
     710:	4619      	mov	r1, r3
     712:	480b      	ldr	r0, [pc, #44]	; (740 <_gpio_set_direction+0xd0>)
     714:	4b0c      	ldr	r3, [pc, #48]	; (748 <_gpio_set_direction+0xd8>)
     716:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     718:	683b      	ldr	r3, [r7, #0]
     71a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     71c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     720:	79fb      	ldrb	r3, [r7, #7]
     722:	4619      	mov	r1, r3
     724:	4806      	ldr	r0, [pc, #24]	; (740 <_gpio_set_direction+0xd0>)
     726:	4b08      	ldr	r3, [pc, #32]	; (748 <_gpio_set_direction+0xd8>)
     728:	4798      	blx	r3
		break;
     72a:	e004      	b.n	736 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     72c:	2246      	movs	r2, #70	; 0x46
     72e:	4908      	ldr	r1, [pc, #32]	; (750 <_gpio_set_direction+0xe0>)
     730:	2000      	movs	r0, #0
     732:	4b08      	ldr	r3, [pc, #32]	; (754 <_gpio_set_direction+0xe4>)
     734:	4798      	blx	r3
	}
}
     736:	bf00      	nop
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}
     73e:	bf00      	nop
     740:	41008000 	.word	0x41008000
     744:	00000431 	.word	0x00000431
     748:	00000649 	.word	0x00000649
     74c:	00000409 	.word	0x00000409
     750:	000025f4 	.word	0x000025f4
     754:	0000104d 	.word	0x0000104d

00000758 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     758:	b580      	push	{r7, lr}
     75a:	b082      	sub	sp, #8
     75c:	af00      	add	r7, sp, #0
     75e:	4603      	mov	r3, r0
     760:	6039      	str	r1, [r7, #0]
     762:	71fb      	strb	r3, [r7, #7]
     764:	4613      	mov	r3, r2
     766:	71bb      	strb	r3, [r7, #6]
	if (level) {
     768:	79bb      	ldrb	r3, [r7, #6]
     76a:	2b00      	cmp	r3, #0
     76c:	d006      	beq.n	77c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     76e:	79fb      	ldrb	r3, [r7, #7]
     770:	683a      	ldr	r2, [r7, #0]
     772:	4619      	mov	r1, r3
     774:	4806      	ldr	r0, [pc, #24]	; (790 <_gpio_set_level+0x38>)
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <_gpio_set_level+0x3c>)
     778:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     77a:	e005      	b.n	788 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     77c:	79fb      	ldrb	r3, [r7, #7]
     77e:	683a      	ldr	r2, [r7, #0]
     780:	4619      	mov	r1, r3
     782:	4803      	ldr	r0, [pc, #12]	; (790 <_gpio_set_level+0x38>)
     784:	4b04      	ldr	r3, [pc, #16]	; (798 <_gpio_set_level+0x40>)
     786:	4798      	blx	r3
}
     788:	bf00      	nop
     78a:	3708      	adds	r7, #8
     78c:	46bd      	mov	sp, r7
     78e:	bd80      	pop	{r7, pc}
     790:	41008000 	.word	0x41008000
     794:	00000459 	.word	0x00000459
     798:	00000481 	.word	0x00000481

0000079c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     79c:	b580      	push	{r7, lr}
     79e:	b082      	sub	sp, #8
     7a0:	af00      	add	r7, sp, #0
     7a2:	4603      	mov	r3, r0
     7a4:	71fb      	strb	r3, [r7, #7]
     7a6:	460b      	mov	r3, r1
     7a8:	71bb      	strb	r3, [r7, #6]
     7aa:	4613      	mov	r3, r2
     7ac:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     7ae:	797b      	ldrb	r3, [r7, #5]
     7b0:	2b01      	cmp	r3, #1
     7b2:	d00a      	beq.n	7ca <_gpio_set_pin_pull_mode+0x2e>
     7b4:	2b02      	cmp	r3, #2
     7b6:	d01f      	beq.n	7f8 <_gpio_set_pin_pull_mode+0x5c>
     7b8:	2b00      	cmp	r3, #0
     7ba:	d134      	bne.n	826 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     7bc:	79ba      	ldrb	r2, [r7, #6]
     7be:	79fb      	ldrb	r3, [r7, #7]
     7c0:	4619      	mov	r1, r3
     7c2:	481e      	ldr	r0, [pc, #120]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7c4:	4b1e      	ldr	r3, [pc, #120]	; (840 <_gpio_set_pin_pull_mode+0xa4>)
     7c6:	4798      	blx	r3
		break;
     7c8:	e033      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7ca:	79bb      	ldrb	r3, [r7, #6]
     7cc:	2201      	movs	r2, #1
     7ce:	409a      	lsls	r2, r3
     7d0:	79fb      	ldrb	r3, [r7, #7]
     7d2:	4619      	mov	r1, r3
     7d4:	4819      	ldr	r0, [pc, #100]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7d6:	4b1b      	ldr	r3, [pc, #108]	; (844 <_gpio_set_pin_pull_mode+0xa8>)
     7d8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7da:	79ba      	ldrb	r2, [r7, #6]
     7dc:	79fb      	ldrb	r3, [r7, #7]
     7de:	4619      	mov	r1, r3
     7e0:	4816      	ldr	r0, [pc, #88]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7e2:	4b19      	ldr	r3, [pc, #100]	; (848 <_gpio_set_pin_pull_mode+0xac>)
     7e4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     7e6:	79bb      	ldrb	r3, [r7, #6]
     7e8:	2201      	movs	r2, #1
     7ea:	409a      	lsls	r2, r3
     7ec:	79fb      	ldrb	r3, [r7, #7]
     7ee:	4619      	mov	r1, r3
     7f0:	4812      	ldr	r0, [pc, #72]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7f2:	4b16      	ldr	r3, [pc, #88]	; (84c <_gpio_set_pin_pull_mode+0xb0>)
     7f4:	4798      	blx	r3
		break;
     7f6:	e01c      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7f8:	79bb      	ldrb	r3, [r7, #6]
     7fa:	2201      	movs	r2, #1
     7fc:	409a      	lsls	r2, r3
     7fe:	79fb      	ldrb	r3, [r7, #7]
     800:	4619      	mov	r1, r3
     802:	480e      	ldr	r0, [pc, #56]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <_gpio_set_pin_pull_mode+0xa8>)
     806:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     808:	79ba      	ldrb	r2, [r7, #6]
     80a:	79fb      	ldrb	r3, [r7, #7]
     80c:	4619      	mov	r1, r3
     80e:	480b      	ldr	r0, [pc, #44]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     810:	4b0d      	ldr	r3, [pc, #52]	; (848 <_gpio_set_pin_pull_mode+0xac>)
     812:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     814:	79bb      	ldrb	r3, [r7, #6]
     816:	2201      	movs	r2, #1
     818:	409a      	lsls	r2, r3
     81a:	79fb      	ldrb	r3, [r7, #7]
     81c:	4619      	mov	r1, r3
     81e:	4807      	ldr	r0, [pc, #28]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     820:	4b0b      	ldr	r3, [pc, #44]	; (850 <_gpio_set_pin_pull_mode+0xb4>)
     822:	4798      	blx	r3
		break;
     824:	e005      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     826:	2289      	movs	r2, #137	; 0x89
     828:	490a      	ldr	r1, [pc, #40]	; (854 <_gpio_set_pin_pull_mode+0xb8>)
     82a:	2000      	movs	r0, #0
     82c:	4b0a      	ldr	r3, [pc, #40]	; (858 <_gpio_set_pin_pull_mode+0xbc>)
     82e:	4798      	blx	r3
		break;
     830:	bf00      	nop
	}
}
     832:	bf00      	nop
     834:	3708      	adds	r7, #8
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	bf00      	nop
     83c:	41008000 	.word	0x41008000
     840:	00000605 	.word	0x00000605
     844:	00000431 	.word	0x00000431
     848:	000005c1 	.word	0x000005c1
     84c:	00000459 	.word	0x00000459
     850:	00000481 	.word	0x00000481
     854:	000025f4 	.word	0x000025f4
     858:	0000104d 	.word	0x0000104d

0000085c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     85c:	b590      	push	{r4, r7, lr}
     85e:	b085      	sub	sp, #20
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     866:	687b      	ldr	r3, [r7, #4]
     868:	095b      	lsrs	r3, r3, #5
     86a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	b2db      	uxtb	r3, r3
     870:	f003 031f 	and.w	r3, r3, #31
     874:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     876:	683b      	ldr	r3, [r7, #0]
     878:	f1b3 3fff 	cmp.w	r3, #4294967295
     87c:	d106      	bne.n	88c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     87e:	7bba      	ldrb	r2, [r7, #14]
     880:	7bf9      	ldrb	r1, [r7, #15]
     882:	2300      	movs	r3, #0
     884:	4812      	ldr	r0, [pc, #72]	; (8d0 <_gpio_set_pin_function+0x74>)
     886:	4c13      	ldr	r4, [pc, #76]	; (8d4 <_gpio_set_pin_function+0x78>)
     888:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     88a:	e01d      	b.n	8c8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     88c:	7bba      	ldrb	r2, [r7, #14]
     88e:	7bf9      	ldrb	r1, [r7, #15]
     890:	2301      	movs	r3, #1
     892:	480f      	ldr	r0, [pc, #60]	; (8d0 <_gpio_set_pin_function+0x74>)
     894:	4c0f      	ldr	r4, [pc, #60]	; (8d4 <_gpio_set_pin_function+0x78>)
     896:	47a0      	blx	r4
		if (pin & 1) {
     898:	7bbb      	ldrb	r3, [r7, #14]
     89a:	f003 0301 	and.w	r3, r3, #1
     89e:	2b00      	cmp	r3, #0
     8a0:	d009      	beq.n	8b6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     8a2:	7bbb      	ldrb	r3, [r7, #14]
     8a4:	085b      	lsrs	r3, r3, #1
     8a6:	b2da      	uxtb	r2, r3
     8a8:	683b      	ldr	r3, [r7, #0]
     8aa:	b2db      	uxtb	r3, r3
     8ac:	7bf9      	ldrb	r1, [r7, #15]
     8ae:	4808      	ldr	r0, [pc, #32]	; (8d0 <_gpio_set_pin_function+0x74>)
     8b0:	4c09      	ldr	r4, [pc, #36]	; (8d8 <_gpio_set_pin_function+0x7c>)
     8b2:	47a0      	blx	r4
}
     8b4:	e008      	b.n	8c8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     8b6:	7bbb      	ldrb	r3, [r7, #14]
     8b8:	085b      	lsrs	r3, r3, #1
     8ba:	b2da      	uxtb	r2, r3
     8bc:	683b      	ldr	r3, [r7, #0]
     8be:	b2db      	uxtb	r3, r3
     8c0:	7bf9      	ldrb	r1, [r7, #15]
     8c2:	4803      	ldr	r0, [pc, #12]	; (8d0 <_gpio_set_pin_function+0x74>)
     8c4:	4c05      	ldr	r4, [pc, #20]	; (8dc <_gpio_set_pin_function+0x80>)
     8c6:	47a0      	blx	r4
}
     8c8:	bf00      	nop
     8ca:	3714      	adds	r7, #20
     8cc:	46bd      	mov	sp, r7
     8ce:	bd90      	pop	{r4, r7, pc}
     8d0:	41008000 	.word	0x41008000
     8d4:	00000567 	.word	0x00000567
     8d8:	00000509 	.word	0x00000509
     8dc:	000004a9 	.word	0x000004a9

000008e0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	4603      	mov	r3, r0
     8e8:	460a      	mov	r2, r1
     8ea:	71fb      	strb	r3, [r7, #7]
     8ec:	4613      	mov	r3, r2
     8ee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8f0:	79fb      	ldrb	r3, [r7, #7]
     8f2:	095b      	lsrs	r3, r3, #5
     8f4:	b2d8      	uxtb	r0, r3
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	f003 031f 	and.w	r3, r3, #31
     8fc:	b2db      	uxtb	r3, r3
     8fe:	79ba      	ldrb	r2, [r7, #6]
     900:	4619      	mov	r1, r3
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <gpio_set_pin_pull_mode+0x30>)
     904:	4798      	blx	r3
}
     906:	bf00      	nop
     908:	3708      	adds	r7, #8
     90a:	46bd      	mov	sp, r7
     90c:	bd80      	pop	{r7, pc}
     90e:	bf00      	nop
     910:	0000079d 	.word	0x0000079d

00000914 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
     91c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     91e:	6839      	ldr	r1, [r7, #0]
     920:	6878      	ldr	r0, [r7, #4]
     922:	4b03      	ldr	r3, [pc, #12]	; (930 <gpio_set_pin_function+0x1c>)
     924:	4798      	blx	r3
}
     926:	bf00      	nop
     928:	3708      	adds	r7, #8
     92a:	46bd      	mov	sp, r7
     92c:	bd80      	pop	{r7, pc}
     92e:	bf00      	nop
     930:	0000085d 	.word	0x0000085d

00000934 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     934:	b580      	push	{r7, lr}
     936:	b082      	sub	sp, #8
     938:	af00      	add	r7, sp, #0
     93a:	4603      	mov	r3, r0
     93c:	460a      	mov	r2, r1
     93e:	71fb      	strb	r3, [r7, #7]
     940:	4613      	mov	r3, r2
     942:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     944:	79fb      	ldrb	r3, [r7, #7]
     946:	095b      	lsrs	r3, r3, #5
     948:	b2d8      	uxtb	r0, r3
     94a:	79fb      	ldrb	r3, [r7, #7]
     94c:	f003 031f 	and.w	r3, r3, #31
     950:	2201      	movs	r2, #1
     952:	fa02 f303 	lsl.w	r3, r2, r3
     956:	79ba      	ldrb	r2, [r7, #6]
     958:	4619      	mov	r1, r3
     95a:	4b03      	ldr	r3, [pc, #12]	; (968 <gpio_set_pin_direction+0x34>)
     95c:	4798      	blx	r3
}
     95e:	bf00      	nop
     960:	3708      	adds	r7, #8
     962:	46bd      	mov	sp, r7
     964:	bd80      	pop	{r7, pc}
     966:	bf00      	nop
     968:	00000671 	.word	0x00000671

0000096c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	4603      	mov	r3, r0
     974:	460a      	mov	r2, r1
     976:	71fb      	strb	r3, [r7, #7]
     978:	4613      	mov	r3, r2
     97a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     97c:	79fb      	ldrb	r3, [r7, #7]
     97e:	095b      	lsrs	r3, r3, #5
     980:	b2d8      	uxtb	r0, r3
     982:	79fb      	ldrb	r3, [r7, #7]
     984:	f003 031f 	and.w	r3, r3, #31
     988:	2201      	movs	r2, #1
     98a:	fa02 f303 	lsl.w	r3, r2, r3
     98e:	79ba      	ldrb	r2, [r7, #6]
     990:	4619      	mov	r1, r3
     992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <gpio_set_pin_level+0x34>)
     994:	4798      	blx	r3
}
     996:	bf00      	nop
     998:	3708      	adds	r7, #8
     99a:	46bd      	mov	sp, r7
     99c:	bd80      	pop	{r7, pc}
     99e:	bf00      	nop
     9a0:	00000759 	.word	0x00000759

000009a4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	af00      	add	r7, sp, #0
	_init_chip();
     9a8:	4b01      	ldr	r3, [pc, #4]	; (9b0 <init_mcu+0xc>)
     9aa:	4798      	blx	r3
}
     9ac:	bf00      	nop
     9ae:	bd80      	pop	{r7, pc}
     9b0:	0000118d 	.word	0x0000118d

000009b4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     9b8:	4806      	ldr	r0, [pc, #24]	; (9d4 <TIMER_0_init+0x20>)
     9ba:	4b07      	ldr	r3, [pc, #28]	; (9d8 <TIMER_0_init+0x24>)
     9bc:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     9be:	4b07      	ldr	r3, [pc, #28]	; (9dc <TIMER_0_init+0x28>)
     9c0:	4798      	blx	r3
     9c2:	4603      	mov	r3, r0
     9c4:	461a      	mov	r2, r3
     9c6:	4906      	ldr	r1, [pc, #24]	; (9e0 <TIMER_0_init+0x2c>)
     9c8:	4806      	ldr	r0, [pc, #24]	; (9e4 <TIMER_0_init+0x30>)
     9ca:	4b07      	ldr	r3, [pc, #28]	; (9e8 <TIMER_0_init+0x34>)
     9cc:	4798      	blx	r3
}
     9ce:	bf00      	nop
     9d0:	bd80      	pop	{r7, pc}
     9d2:	bf00      	nop
     9d4:	40000800 	.word	0x40000800
     9d8:	000003a9 	.word	0x000003a9
     9dc:	00001641 	.word	0x00001641
     9e0:	40002400 	.word	0x40002400
     9e4:	20000080 	.word	0x20000080
     9e8:	00000cb5 	.word	0x00000cb5

000009ec <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     9f0:	4904      	ldr	r1, [pc, #16]	; (a04 <USART_0_PORT_init+0x18>)
     9f2:	2004      	movs	r0, #4
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <USART_0_PORT_init+0x1c>)
     9f6:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     9f8:	4904      	ldr	r1, [pc, #16]	; (a0c <USART_0_PORT_init+0x20>)
     9fa:	2005      	movs	r0, #5
     9fc:	4b02      	ldr	r3, [pc, #8]	; (a08 <USART_0_PORT_init+0x1c>)
     9fe:	4798      	blx	r3
}
     a00:	bf00      	nop
     a02:	bd80      	pop	{r7, pc}
     a04:	00040003 	.word	0x00040003
     a08:	00000915 	.word	0x00000915
     a0c:	00050003 	.word	0x00050003

00000a10 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     a10:	b580      	push	{r7, lr}
     a12:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a14:	2240      	movs	r2, #64	; 0x40
     a16:	2107      	movs	r1, #7
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <USART_0_CLOCK_init+0x24>)
     a1a:	4b07      	ldr	r3, [pc, #28]	; (a38 <USART_0_CLOCK_init+0x28>)
     a1c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a1e:	2243      	movs	r2, #67	; 0x43
     a20:	2103      	movs	r1, #3
     a22:	4804      	ldr	r0, [pc, #16]	; (a34 <USART_0_CLOCK_init+0x24>)
     a24:	4b04      	ldr	r3, [pc, #16]	; (a38 <USART_0_CLOCK_init+0x28>)
     a26:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     a28:	4804      	ldr	r0, [pc, #16]	; (a3c <USART_0_CLOCK_init+0x2c>)
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <USART_0_CLOCK_init+0x30>)
     a2c:	4798      	blx	r3
}
     a2e:	bf00      	nop
     a30:	bd80      	pop	{r7, pc}
     a32:	bf00      	nop
     a34:	40001c00 	.word	0x40001c00
     a38:	00000383 	.word	0x00000383
     a3c:	40000800 	.word	0x40000800
     a40:	000003c9 	.word	0x000003c9

00000a44 <USART_0_init>:

void USART_0_init(void)
{
     a44:	b580      	push	{r7, lr}
     a46:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     a48:	4b05      	ldr	r3, [pc, #20]	; (a60 <USART_0_init+0x1c>)
     a4a:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     a4c:	2200      	movs	r2, #0
     a4e:	4905      	ldr	r1, [pc, #20]	; (a64 <USART_0_init+0x20>)
     a50:	4805      	ldr	r0, [pc, #20]	; (a68 <USART_0_init+0x24>)
     a52:	4b06      	ldr	r3, [pc, #24]	; (a6c <USART_0_init+0x28>)
     a54:	4798      	blx	r3
	USART_0_PORT_init();
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <USART_0_init+0x2c>)
     a58:	4798      	blx	r3
}
     a5a:	bf00      	nop
     a5c:	bd80      	pop	{r7, pc}
     a5e:	bf00      	nop
     a60:	00000a11 	.word	0x00000a11
     a64:	40003000 	.word	0x40003000
     a68:	20000074 	.word	0x20000074
     a6c:	00000e81 	.word	0x00000e81
     a70:	000009ed 	.word	0x000009ed

00000a74 <delay_driver_init>:

void delay_driver_init(void)
{
     a74:	b580      	push	{r7, lr}
     a76:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     a78:	4802      	ldr	r0, [pc, #8]	; (a84 <delay_driver_init+0x10>)
     a7a:	4b03      	ldr	r3, [pc, #12]	; (a88 <delay_driver_init+0x14>)
     a7c:	4798      	blx	r3
}
     a7e:	bf00      	nop
     a80:	bd80      	pop	{r7, pc}
     a82:	bf00      	nop
     a84:	e000e010 	.word	0xe000e010
     a88:	00000ba5 	.word	0x00000ba5

00000a8c <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     a8c:	b480      	push	{r7}
     a8e:	af00      	add	r7, sp, #0
}
     a90:	bf00      	nop
     a92:	46bd      	mov	sp, r7
     a94:	f85d 7b04 	ldr.w	r7, [sp], #4
     a98:	4770      	bx	lr
	...

00000a9c <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     a9c:	b580      	push	{r7, lr}
     a9e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     aa0:	4804      	ldr	r0, [pc, #16]	; (ab4 <PWM_0_CLOCK_init+0x18>)
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <PWM_0_CLOCK_init+0x1c>)
     aa4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aa6:	2240      	movs	r2, #64	; 0x40
     aa8:	2109      	movs	r1, #9
     aaa:	4804      	ldr	r0, [pc, #16]	; (abc <PWM_0_CLOCK_init+0x20>)
     aac:	4b04      	ldr	r3, [pc, #16]	; (ac0 <PWM_0_CLOCK_init+0x24>)
     aae:	4798      	blx	r3
}
     ab0:	bf00      	nop
     ab2:	bd80      	pop	{r7, pc}
     ab4:	40000800 	.word	0x40000800
     ab8:	000003e9 	.word	0x000003e9
     abc:	40001c00 	.word	0x40001c00
     ac0:	00000383 	.word	0x00000383

00000ac4 <PWM_0_init>:

void PWM_0_init(void)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	af00      	add	r7, sp, #0
	PWM_0_CLOCK_init();
     ac8:	4b06      	ldr	r3, [pc, #24]	; (ae4 <PWM_0_init+0x20>)
     aca:	4798      	blx	r3
	PWM_0_PORT_init();
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <PWM_0_init+0x24>)
     ace:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     ad0:	4b06      	ldr	r3, [pc, #24]	; (aec <PWM_0_init+0x28>)
     ad2:	4798      	blx	r3
     ad4:	4603      	mov	r3, r0
     ad6:	461a      	mov	r2, r3
     ad8:	4905      	ldr	r1, [pc, #20]	; (af0 <PWM_0_init+0x2c>)
     ada:	4806      	ldr	r0, [pc, #24]	; (af4 <PWM_0_init+0x30>)
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <PWM_0_init+0x34>)
     ade:	4798      	blx	r3
}
     ae0:	bf00      	nop
     ae2:	bd80      	pop	{r7, pc}
     ae4:	00000a9d 	.word	0x00000a9d
     ae8:	00000a8d 	.word	0x00000a8d
     aec:	0000211d 	.word	0x0000211d
     af0:	40003800 	.word	0x40003800
     af4:	20000058 	.word	0x20000058
     af8:	00000bcd 	.word	0x00000bcd

00000afc <system_init>:

void system_init(void)
{
     afc:	b580      	push	{r7, lr}
     afe:	af00      	add	r7, sp, #0
	init_mcu();
     b00:	4b1f      	ldr	r3, [pc, #124]	; (b80 <system_init+0x84>)
     b02:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     b04:	2101      	movs	r1, #1
     b06:	2021      	movs	r0, #33	; 0x21
     b08:	4b1e      	ldr	r3, [pc, #120]	; (b84 <system_init+0x88>)
     b0a:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     b0c:	2100      	movs	r1, #0
     b0e:	2021      	movs	r0, #33	; 0x21
     b10:	4b1d      	ldr	r3, [pc, #116]	; (b88 <system_init+0x8c>)
     b12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     b14:	f04f 31ff 	mov.w	r1, #4294967295
     b18:	2021      	movs	r0, #33	; 0x21
     b1a:	4b1c      	ldr	r3, [pc, #112]	; (b8c <system_init+0x90>)
     b1c:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT, GPIO_DIRECTION_IN);
     b1e:	2101      	movs	r1, #1
     b20:	2025      	movs	r0, #37	; 0x25
     b22:	4b18      	ldr	r3, [pc, #96]	; (b84 <system_init+0x88>)
     b24:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT,
     b26:	2101      	movs	r1, #1
     b28:	2025      	movs	r0, #37	; 0x25
     b2a:	4b17      	ldr	r3, [pc, #92]	; (b88 <system_init+0x8c>)
     b2c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT, GPIO_PIN_FUNCTION_OFF);
     b2e:	f04f 31ff 	mov.w	r1, #4294967295
     b32:	2025      	movs	r0, #37	; 0x25
     b34:	4b15      	ldr	r3, [pc, #84]	; (b8c <system_init+0x90>)
     b36:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     b38:	2101      	movs	r1, #1
     b3a:	203f      	movs	r0, #63	; 0x3f
     b3c:	4b11      	ldr	r3, [pc, #68]	; (b84 <system_init+0x88>)
     b3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     b40:	2101      	movs	r1, #1
     b42:	203f      	movs	r0, #63	; 0x3f
     b44:	4b10      	ldr	r3, [pc, #64]	; (b88 <system_init+0x8c>)
     b46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     b48:	f04f 31ff 	mov.w	r1, #4294967295
     b4c:	203f      	movs	r0, #63	; 0x3f
     b4e:	4b0f      	ldr	r3, [pc, #60]	; (b8c <system_init+0x90>)
     b50:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     b52:	2101      	movs	r1, #1
     b54:	2052      	movs	r0, #82	; 0x52
     b56:	4b0e      	ldr	r3, [pc, #56]	; (b90 <system_init+0x94>)
     b58:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     b5a:	2102      	movs	r1, #2
     b5c:	2052      	movs	r0, #82	; 0x52
     b5e:	4b09      	ldr	r3, [pc, #36]	; (b84 <system_init+0x88>)
     b60:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     b62:	f04f 31ff 	mov.w	r1, #4294967295
     b66:	2052      	movs	r0, #82	; 0x52
     b68:	4b08      	ldr	r3, [pc, #32]	; (b8c <system_init+0x90>)
     b6a:	4798      	blx	r3

	TIMER_0_init();
     b6c:	4b09      	ldr	r3, [pc, #36]	; (b94 <system_init+0x98>)
     b6e:	4798      	blx	r3

	USART_0_init();
     b70:	4b09      	ldr	r3, [pc, #36]	; (b98 <system_init+0x9c>)
     b72:	4798      	blx	r3

	delay_driver_init();
     b74:	4b09      	ldr	r3, [pc, #36]	; (b9c <system_init+0xa0>)
     b76:	4798      	blx	r3

	PWM_0_init();
     b78:	4b09      	ldr	r3, [pc, #36]	; (ba0 <system_init+0xa4>)
     b7a:	4798      	blx	r3
}
     b7c:	bf00      	nop
     b7e:	bd80      	pop	{r7, pc}
     b80:	000009a5 	.word	0x000009a5
     b84:	00000935 	.word	0x00000935
     b88:	000008e1 	.word	0x000008e1
     b8c:	00000915 	.word	0x00000915
     b90:	0000096d 	.word	0x0000096d
     b94:	000009b5 	.word	0x000009b5
     b98:	00000a45 	.word	0x00000a45
     b9c:	00000a75 	.word	0x00000a75
     ba0:	00000ac5 	.word	0x00000ac5

00000ba4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ba4:	b580      	push	{r7, lr}
     ba6:	b082      	sub	sp, #8
     ba8:	af00      	add	r7, sp, #0
     baa:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     bac:	4a05      	ldr	r2, [pc, #20]	; (bc4 <delay_init+0x20>)
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	6013      	str	r3, [r2, #0]
     bb2:	4b04      	ldr	r3, [pc, #16]	; (bc4 <delay_init+0x20>)
     bb4:	681b      	ldr	r3, [r3, #0]
     bb6:	4618      	mov	r0, r3
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <delay_init+0x24>)
     bba:	4798      	blx	r3
}
     bbc:	bf00      	nop
     bbe:	3708      	adds	r7, #8
     bc0:	46bd      	mov	sp, r7
     bc2:	bd80      	pop	{r7, pc}
     bc4:	20000048 	.word	0x20000048
     bc8:	00001c19 	.word	0x00001c19

00000bcc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b084      	sub	sp, #16
     bd0:	af00      	add	r7, sp, #0
     bd2:	60f8      	str	r0, [r7, #12]
     bd4:	60b9      	str	r1, [r7, #8]
     bd6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     bd8:	68fb      	ldr	r3, [r7, #12]
     bda:	2b00      	cmp	r3, #0
     bdc:	d004      	beq.n	be8 <pwm_init+0x1c>
     bde:	68bb      	ldr	r3, [r7, #8]
     be0:	2b00      	cmp	r3, #0
     be2:	d001      	beq.n	be8 <pwm_init+0x1c>
     be4:	2301      	movs	r3, #1
     be6:	e000      	b.n	bea <pwm_init+0x1e>
     be8:	2300      	movs	r3, #0
     bea:	f003 0301 	and.w	r3, r3, #1
     bee:	b2db      	uxtb	r3, r3
     bf0:	2233      	movs	r2, #51	; 0x33
     bf2:	490a      	ldr	r1, [pc, #40]	; (c1c <pwm_init+0x50>)
     bf4:	4618      	mov	r0, r3
     bf6:	4b0a      	ldr	r3, [pc, #40]	; (c20 <pwm_init+0x54>)
     bf8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     bfa:	68fb      	ldr	r3, [r7, #12]
     bfc:	68b9      	ldr	r1, [r7, #8]
     bfe:	4618      	mov	r0, r3
     c00:	4b08      	ldr	r3, [pc, #32]	; (c24 <pwm_init+0x58>)
     c02:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	4a08      	ldr	r2, [pc, #32]	; (c28 <pwm_init+0x5c>)
     c08:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	4a07      	ldr	r2, [pc, #28]	; (c2c <pwm_init+0x60>)
     c0e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
     c10:	2300      	movs	r3, #0
}
     c12:	4618      	mov	r0, r3
     c14:	3710      	adds	r7, #16
     c16:	46bd      	mov	sp, r7
     c18:	bd80      	pop	{r7, pc}
     c1a:	bf00      	nop
     c1c:	00002610 	.word	0x00002610
     c20:	0000104d 	.word	0x0000104d
     c24:	00001f01 	.word	0x00001f01
     c28:	00000c31 	.word	0x00000c31
     c2c:	00000c55 	.word	0x00000c55

00000c30 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     c30:	b580      	push	{r7, lr}
     c32:	b084      	sub	sp, #16
     c34:	af00      	add	r7, sp, #0
     c36:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
     c38:	687b      	ldr	r3, [r7, #4]
     c3a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	695b      	ldr	r3, [r3, #20]
     c40:	2b00      	cmp	r3, #0
     c42:	d003      	beq.n	c4c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
     c44:	68fb      	ldr	r3, [r7, #12]
     c46:	695b      	ldr	r3, [r3, #20]
     c48:	68f8      	ldr	r0, [r7, #12]
     c4a:	4798      	blx	r3
	}
}
     c4c:	bf00      	nop
     c4e:	3710      	adds	r7, #16
     c50:	46bd      	mov	sp, r7
     c52:	bd80      	pop	{r7, pc}

00000c54 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     c54:	b580      	push	{r7, lr}
     c56:	b084      	sub	sp, #16
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
     c60:	68fb      	ldr	r3, [r7, #12]
     c62:	699b      	ldr	r3, [r3, #24]
     c64:	2b00      	cmp	r3, #0
     c66:	d003      	beq.n	c70 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
     c68:	68fb      	ldr	r3, [r7, #12]
     c6a:	699b      	ldr	r3, [r3, #24]
     c6c:	68f8      	ldr	r0, [r7, #12]
     c6e:	4798      	blx	r3
	}
}
     c70:	bf00      	nop
     c72:	3710      	adds	r7, #16
     c74:	46bd      	mov	sp, r7
     c76:	bd80      	pop	{r7, pc}

00000c78 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     c78:	b480      	push	{r7}
     c7a:	b083      	sub	sp, #12
     c7c:	af00      	add	r7, sp, #0
     c7e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	681b      	ldr	r3, [r3, #0]
}
     c84:	4618      	mov	r0, r3
     c86:	370c      	adds	r7, #12
     c88:	46bd      	mov	sp, r7
     c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c8e:	4770      	bx	lr

00000c90 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     c90:	b480      	push	{r7}
     c92:	b083      	sub	sp, #12
     c94:	af00      	add	r7, sp, #0
     c96:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     c98:	687b      	ldr	r3, [r7, #4]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d002      	beq.n	ca4 <list_get_next_element+0x14>
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	681b      	ldr	r3, [r3, #0]
     ca2:	e000      	b.n	ca6 <list_get_next_element+0x16>
     ca4:	2300      	movs	r3, #0
}
     ca6:	4618      	mov	r0, r3
     ca8:	370c      	adds	r7, #12
     caa:	46bd      	mov	sp, r7
     cac:	f85d 7b04 	ldr.w	r7, [sp], #4
     cb0:	4770      	bx	lr
	...

00000cb4 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     cb4:	b580      	push	{r7, lr}
     cb6:	b084      	sub	sp, #16
     cb8:	af00      	add	r7, sp, #0
     cba:	60f8      	str	r0, [r7, #12]
     cbc:	60b9      	str	r1, [r7, #8]
     cbe:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     cc0:	68fb      	ldr	r3, [r7, #12]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d004      	beq.n	cd0 <timer_init+0x1c>
     cc6:	68bb      	ldr	r3, [r7, #8]
     cc8:	2b00      	cmp	r3, #0
     cca:	d001      	beq.n	cd0 <timer_init+0x1c>
     ccc:	2301      	movs	r3, #1
     cce:	e000      	b.n	cd2 <timer_init+0x1e>
     cd0:	2300      	movs	r3, #0
     cd2:	f003 0301 	and.w	r3, r3, #1
     cd6:	b2db      	uxtb	r3, r3
     cd8:	223b      	movs	r2, #59	; 0x3b
     cda:	490a      	ldr	r1, [pc, #40]	; (d04 <timer_init+0x50>)
     cdc:	4618      	mov	r0, r3
     cde:	4b0a      	ldr	r3, [pc, #40]	; (d08 <timer_init+0x54>)
     ce0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	68b9      	ldr	r1, [r7, #8]
     ce6:	4618      	mov	r0, r3
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <timer_init+0x58>)
     cea:	4798      	blx	r3
	descr->time                           = 0;
     cec:	68fb      	ldr	r3, [r7, #12]
     cee:	2200      	movs	r2, #0
     cf0:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cf2:	68fb      	ldr	r3, [r7, #12]
     cf4:	4a06      	ldr	r2, [pc, #24]	; (d10 <timer_init+0x5c>)
     cf6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     cf8:	2300      	movs	r3, #0
}
     cfa:	4618      	mov	r0, r3
     cfc:	3710      	adds	r7, #16
     cfe:	46bd      	mov	sp, r7
     d00:	bd80      	pop	{r7, pc}
     d02:	bf00      	nop
     d04:	00002628 	.word	0x00002628
     d08:	0000104d 	.word	0x0000104d
     d0c:	00001565 	.word	0x00001565
     d10:	00000dc5 	.word	0x00000dc5

00000d14 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     d14:	b580      	push	{r7, lr}
     d16:	b088      	sub	sp, #32
     d18:	af00      	add	r7, sp, #0
     d1a:	60f8      	str	r0, [r7, #12]
     d1c:	60b9      	str	r1, [r7, #8]
     d1e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     d20:	2300      	movs	r3, #0
     d22:	61bb      	str	r3, [r7, #24]
     d24:	68f8      	ldr	r0, [r7, #12]
     d26:	4b23      	ldr	r3, [pc, #140]	; (db4 <timer_add_timer_task+0xa0>)
     d28:	4798      	blx	r3
     d2a:	6138      	str	r0, [r7, #16]

	if (!head) {
     d2c:	693b      	ldr	r3, [r7, #16]
     d2e:	2b00      	cmp	r3, #0
     d30:	d104      	bne.n	d3c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     d32:	68b9      	ldr	r1, [r7, #8]
     d34:	68f8      	ldr	r0, [r7, #12]
     d36:	4b20      	ldr	r3, [pc, #128]	; (db8 <timer_add_timer_task+0xa4>)
     d38:	4798      	blx	r3
		return;
     d3a:	e037      	b.n	dac <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     d3c:	693b      	ldr	r3, [r7, #16]
     d3e:	61fb      	str	r3, [r7, #28]
     d40:	e022      	b.n	d88 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
     d42:	69fb      	ldr	r3, [r7, #28]
     d44:	685a      	ldr	r2, [r3, #4]
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	429a      	cmp	r2, r3
     d4a:	d808      	bhi.n	d5e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
     d4c:	69fb      	ldr	r3, [r7, #28]
     d4e:	689a      	ldr	r2, [r3, #8]
     d50:	69fb      	ldr	r3, [r7, #28]
     d52:	6859      	ldr	r1, [r3, #4]
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	1acb      	subs	r3, r1, r3
     d58:	4413      	add	r3, r2
     d5a:	617b      	str	r3, [r7, #20]
     d5c:	e009      	b.n	d72 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     d5e:	69fb      	ldr	r3, [r7, #28]
     d60:	689a      	ldr	r2, [r3, #8]
     d62:	69fb      	ldr	r3, [r7, #28]
     d64:	685b      	ldr	r3, [r3, #4]
     d66:	441a      	add	r2, r3
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	425b      	negs	r3, r3
     d6c:	4413      	add	r3, r2
     d6e:	3301      	adds	r3, #1
     d70:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	689a      	ldr	r2, [r3, #8]
     d76:	697b      	ldr	r3, [r7, #20]
     d78:	429a      	cmp	r2, r3
     d7a:	d909      	bls.n	d90 <timer_add_timer_task+0x7c>
			break;
		prev = it;
     d7c:	69fb      	ldr	r3, [r7, #28]
     d7e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     d80:	69f8      	ldr	r0, [r7, #28]
     d82:	4b0e      	ldr	r3, [pc, #56]	; (dbc <timer_add_timer_task+0xa8>)
     d84:	4798      	blx	r3
     d86:	61f8      	str	r0, [r7, #28]
     d88:	69fb      	ldr	r3, [r7, #28]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d1d9      	bne.n	d42 <timer_add_timer_task+0x2e>
     d8e:	e000      	b.n	d92 <timer_add_timer_task+0x7e>
			break;
     d90:	bf00      	nop
	}

	if (it == head) {
     d92:	69fa      	ldr	r2, [r7, #28]
     d94:	693b      	ldr	r3, [r7, #16]
     d96:	429a      	cmp	r2, r3
     d98:	d104      	bne.n	da4 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
     d9a:	68b9      	ldr	r1, [r7, #8]
     d9c:	68f8      	ldr	r0, [r7, #12]
     d9e:	4b06      	ldr	r3, [pc, #24]	; (db8 <timer_add_timer_task+0xa4>)
     da0:	4798      	blx	r3
     da2:	e003      	b.n	dac <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
     da4:	68b9      	ldr	r1, [r7, #8]
     da6:	69b8      	ldr	r0, [r7, #24]
     da8:	4b05      	ldr	r3, [pc, #20]	; (dc0 <timer_add_timer_task+0xac>)
     daa:	4798      	blx	r3
	}
}
     dac:	3720      	adds	r7, #32
     dae:	46bd      	mov	sp, r7
     db0:	bd80      	pop	{r7, pc}
     db2:	bf00      	nop
     db4:	00000c79 	.word	0x00000c79
     db8:	000010ad 	.word	0x000010ad
     dbc:	00000c91 	.word	0x00000c91
     dc0:	00001105 	.word	0x00001105

00000dc4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	b086      	sub	sp, #24
     dc8:	af00      	add	r7, sp, #0
     dca:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
     dd0:	693b      	ldr	r3, [r7, #16]
     dd2:	3314      	adds	r3, #20
     dd4:	4618      	mov	r0, r3
     dd6:	4b27      	ldr	r3, [pc, #156]	; (e74 <timer_process_counted+0xb0>)
     dd8:	4798      	blx	r3
     dda:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
     ddc:	693b      	ldr	r3, [r7, #16]
     dde:	691b      	ldr	r3, [r3, #16]
     de0:	1c5a      	adds	r2, r3, #1
     de2:	693b      	ldr	r3, [r7, #16]
     de4:	611a      	str	r2, [r3, #16]
     de6:	693b      	ldr	r3, [r7, #16]
     de8:	691b      	ldr	r3, [r3, #16]
     dea:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     dec:	693b      	ldr	r3, [r7, #16]
     dee:	7e1b      	ldrb	r3, [r3, #24]
     df0:	b2db      	uxtb	r3, r3
     df2:	f003 0301 	and.w	r3, r3, #1
     df6:	2b00      	cmp	r3, #0
     df8:	d106      	bne.n	e08 <timer_process_counted+0x44>
     dfa:	693b      	ldr	r3, [r7, #16]
     dfc:	7e1b      	ldrb	r3, [r3, #24]
     dfe:	b2db      	uxtb	r3, r3
     e00:	f003 0302 	and.w	r3, r3, #2
     e04:	2b00      	cmp	r3, #0
     e06:	d027      	beq.n	e58 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e08:	693b      	ldr	r3, [r7, #16]
     e0a:	7e1b      	ldrb	r3, [r3, #24]
     e0c:	b2db      	uxtb	r3, r3
     e0e:	f043 0302 	orr.w	r3, r3, #2
     e12:	b2da      	uxtb	r2, r3
     e14:	693b      	ldr	r3, [r7, #16]
     e16:	761a      	strb	r2, [r3, #24]
		return;
     e18:	e029      	b.n	e6e <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
     e1a:	697b      	ldr	r3, [r7, #20]
     e1c:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
     e1e:	693b      	ldr	r3, [r7, #16]
     e20:	3314      	adds	r3, #20
     e22:	4618      	mov	r0, r3
     e24:	4b14      	ldr	r3, [pc, #80]	; (e78 <timer_process_counted+0xb4>)
     e26:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     e28:	68bb      	ldr	r3, [r7, #8]
     e2a:	7c1b      	ldrb	r3, [r3, #16]
     e2c:	2b01      	cmp	r3, #1
     e2e:	d109      	bne.n	e44 <timer_process_counted+0x80>
			tmp->time_label = time;
     e30:	68bb      	ldr	r3, [r7, #8]
     e32:	68fa      	ldr	r2, [r7, #12]
     e34:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     e36:	693b      	ldr	r3, [r7, #16]
     e38:	3314      	adds	r3, #20
     e3a:	68fa      	ldr	r2, [r7, #12]
     e3c:	68b9      	ldr	r1, [r7, #8]
     e3e:	4618      	mov	r0, r3
     e40:	4b0e      	ldr	r3, [pc, #56]	; (e7c <timer_process_counted+0xb8>)
     e42:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
     e44:	693b      	ldr	r3, [r7, #16]
     e46:	3314      	adds	r3, #20
     e48:	4618      	mov	r0, r3
     e4a:	4b0a      	ldr	r3, [pc, #40]	; (e74 <timer_process_counted+0xb0>)
     e4c:	4798      	blx	r3
     e4e:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
     e50:	68bb      	ldr	r3, [r7, #8]
     e52:	68db      	ldr	r3, [r3, #12]
     e54:	68b8      	ldr	r0, [r7, #8]
     e56:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     e58:	697b      	ldr	r3, [r7, #20]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d007      	beq.n	e6e <timer_process_counted+0xaa>
     e5e:	697b      	ldr	r3, [r7, #20]
     e60:	685b      	ldr	r3, [r3, #4]
     e62:	68fa      	ldr	r2, [r7, #12]
     e64:	1ad2      	subs	r2, r2, r3
     e66:	697b      	ldr	r3, [r7, #20]
     e68:	689b      	ldr	r3, [r3, #8]
     e6a:	429a      	cmp	r2, r3
     e6c:	d2d5      	bcs.n	e1a <timer_process_counted+0x56>
	}
}
     e6e:	3718      	adds	r7, #24
     e70:	46bd      	mov	sp, r7
     e72:	bd80      	pop	{r7, pc}
     e74:	00000c79 	.word	0x00000c79
     e78:	00001129 	.word	0x00001129
     e7c:	00000d15 	.word	0x00000d15

00000e80 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
     e80:	b580      	push	{r7, lr}
     e82:	b086      	sub	sp, #24
     e84:	af00      	add	r7, sp, #0
     e86:	60f8      	str	r0, [r7, #12]
     e88:	60b9      	str	r1, [r7, #8]
     e8a:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	2b00      	cmp	r3, #0
     e90:	d004      	beq.n	e9c <usart_sync_init+0x1c>
     e92:	68bb      	ldr	r3, [r7, #8]
     e94:	2b00      	cmp	r3, #0
     e96:	d001      	beq.n	e9c <usart_sync_init+0x1c>
     e98:	2301      	movs	r3, #1
     e9a:	e000      	b.n	e9e <usart_sync_init+0x1e>
     e9c:	2300      	movs	r3, #0
     e9e:	f003 0301 	and.w	r3, r3, #1
     ea2:	b2db      	uxtb	r3, r3
     ea4:	2234      	movs	r2, #52	; 0x34
     ea6:	490d      	ldr	r1, [pc, #52]	; (edc <usart_sync_init+0x5c>)
     ea8:	4618      	mov	r0, r3
     eaa:	4b0d      	ldr	r3, [pc, #52]	; (ee0 <usart_sync_init+0x60>)
     eac:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     eae:	68fb      	ldr	r3, [r7, #12]
     eb0:	3308      	adds	r3, #8
     eb2:	68b9      	ldr	r1, [r7, #8]
     eb4:	4618      	mov	r0, r3
     eb6:	4b0b      	ldr	r3, [pc, #44]	; (ee4 <usart_sync_init+0x64>)
     eb8:	4798      	blx	r3
     eba:	6178      	str	r0, [r7, #20]
	if (init_status) {
     ebc:	697b      	ldr	r3, [r7, #20]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d001      	beq.n	ec6 <usart_sync_init+0x46>
		return init_status;
     ec2:	697b      	ldr	r3, [r7, #20]
     ec4:	e006      	b.n	ed4 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
     ec6:	68fb      	ldr	r3, [r7, #12]
     ec8:	4a07      	ldr	r2, [pc, #28]	; (ee8 <usart_sync_init+0x68>)
     eca:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	4a07      	ldr	r2, [pc, #28]	; (eec <usart_sync_init+0x6c>)
     ed0:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     ed2:	2300      	movs	r3, #0
}
     ed4:	4618      	mov	r0, r3
     ed6:	3718      	adds	r7, #24
     ed8:	46bd      	mov	sp, r7
     eda:	bd80      	pop	{r7, pc}
     edc:	00002640 	.word	0x00002640
     ee0:	0000104d 	.word	0x0000104d
     ee4:	00001881 	.word	0x00001881
     ee8:	00000fb9 	.word	0x00000fb9
     eec:	00000ef1 	.word	0x00000ef1

00000ef0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	b086      	sub	sp, #24
     ef4:	af00      	add	r7, sp, #0
     ef6:	60f8      	str	r0, [r7, #12]
     ef8:	60b9      	str	r1, [r7, #8]
     efa:	4613      	mov	r3, r2
     efc:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
     efe:	2300      	movs	r3, #0
     f00:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	2b00      	cmp	r3, #0
     f0a:	d007      	beq.n	f1c <usart_sync_write+0x2c>
     f0c:	68bb      	ldr	r3, [r7, #8]
     f0e:	2b00      	cmp	r3, #0
     f10:	d004      	beq.n	f1c <usart_sync_write+0x2c>
     f12:	88fb      	ldrh	r3, [r7, #6]
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <usart_sync_write+0x2c>
     f18:	2301      	movs	r3, #1
     f1a:	e000      	b.n	f1e <usart_sync_write+0x2e>
     f1c:	2300      	movs	r3, #0
     f1e:	f003 0301 	and.w	r3, r3, #1
     f22:	b2db      	uxtb	r3, r3
     f24:	22f1      	movs	r2, #241	; 0xf1
     f26:	491f      	ldr	r1, [pc, #124]	; (fa4 <usart_sync_write+0xb4>)
     f28:	4618      	mov	r0, r3
     f2a:	4b1f      	ldr	r3, [pc, #124]	; (fa8 <usart_sync_write+0xb8>)
     f2c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     f2e:	bf00      	nop
     f30:	693b      	ldr	r3, [r7, #16]
     f32:	3308      	adds	r3, #8
     f34:	4618      	mov	r0, r3
     f36:	4b1d      	ldr	r3, [pc, #116]	; (fac <usart_sync_write+0xbc>)
     f38:	4798      	blx	r3
     f3a:	4603      	mov	r3, r0
     f3c:	f083 0301 	eor.w	r3, r3, #1
     f40:	b2db      	uxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	d1f4      	bne.n	f30 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     f46:	693b      	ldr	r3, [r7, #16]
     f48:	f103 0008 	add.w	r0, r3, #8
     f4c:	68ba      	ldr	r2, [r7, #8]
     f4e:	697b      	ldr	r3, [r7, #20]
     f50:	4413      	add	r3, r2
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	4619      	mov	r1, r3
     f56:	4b16      	ldr	r3, [pc, #88]	; (fb0 <usart_sync_write+0xc0>)
     f58:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     f5a:	bf00      	nop
     f5c:	693b      	ldr	r3, [r7, #16]
     f5e:	3308      	adds	r3, #8
     f60:	4618      	mov	r0, r3
     f62:	4b12      	ldr	r3, [pc, #72]	; (fac <usart_sync_write+0xbc>)
     f64:	4798      	blx	r3
     f66:	4603      	mov	r3, r0
     f68:	f083 0301 	eor.w	r3, r3, #1
     f6c:	b2db      	uxtb	r3, r3
     f6e:	2b00      	cmp	r3, #0
     f70:	d1f4      	bne.n	f5c <usart_sync_write+0x6c>
			;
	} while (++offset < length);
     f72:	697b      	ldr	r3, [r7, #20]
     f74:	3301      	adds	r3, #1
     f76:	617b      	str	r3, [r7, #20]
     f78:	88fb      	ldrh	r3, [r7, #6]
     f7a:	697a      	ldr	r2, [r7, #20]
     f7c:	429a      	cmp	r2, r3
     f7e:	d3e2      	bcc.n	f46 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
     f80:	bf00      	nop
     f82:	693b      	ldr	r3, [r7, #16]
     f84:	3308      	adds	r3, #8
     f86:	4618      	mov	r0, r3
     f88:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <usart_sync_write+0xc4>)
     f8a:	4798      	blx	r3
     f8c:	4603      	mov	r3, r0
     f8e:	f083 0301 	eor.w	r3, r3, #1
     f92:	b2db      	uxtb	r3, r3
     f94:	2b00      	cmp	r3, #0
     f96:	d1f4      	bne.n	f82 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
     f98:	697b      	ldr	r3, [r7, #20]
}
     f9a:	4618      	mov	r0, r3
     f9c:	3718      	adds	r7, #24
     f9e:	46bd      	mov	sp, r7
     fa0:	bd80      	pop	{r7, pc}
     fa2:	bf00      	nop
     fa4:	00002640 	.word	0x00002640
     fa8:	0000104d 	.word	0x0000104d
     fac:	00001911 	.word	0x00001911
     fb0:	000018c5 	.word	0x000018c5
     fb4:	00001931 	.word	0x00001931

00000fb8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     fb8:	b590      	push	{r4, r7, lr}
     fba:	b087      	sub	sp, #28
     fbc:	af00      	add	r7, sp, #0
     fbe:	60f8      	str	r0, [r7, #12]
     fc0:	60b9      	str	r1, [r7, #8]
     fc2:	4613      	mov	r3, r2
     fc4:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
     fc6:	2300      	movs	r3, #0
     fc8:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     fca:	68fb      	ldr	r3, [r7, #12]
     fcc:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     fce:	68fb      	ldr	r3, [r7, #12]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d007      	beq.n	fe4 <usart_sync_read+0x2c>
     fd4:	68bb      	ldr	r3, [r7, #8]
     fd6:	2b00      	cmp	r3, #0
     fd8:	d004      	beq.n	fe4 <usart_sync_read+0x2c>
     fda:	88fb      	ldrh	r3, [r7, #6]
     fdc:	2b00      	cmp	r3, #0
     fde:	d001      	beq.n	fe4 <usart_sync_read+0x2c>
     fe0:	2301      	movs	r3, #1
     fe2:	e000      	b.n	fe6 <usart_sync_read+0x2e>
     fe4:	2300      	movs	r3, #0
     fe6:	f003 0301 	and.w	r3, r3, #1
     fea:	b2db      	uxtb	r3, r3
     fec:	f44f 7286 	mov.w	r2, #268	; 0x10c
     ff0:	4912      	ldr	r1, [pc, #72]	; (103c <usart_sync_read+0x84>)
     ff2:	4618      	mov	r0, r3
     ff4:	4b12      	ldr	r3, [pc, #72]	; (1040 <usart_sync_read+0x88>)
     ff6:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     ff8:	bf00      	nop
     ffa:	693b      	ldr	r3, [r7, #16]
     ffc:	3308      	adds	r3, #8
     ffe:	4618      	mov	r0, r3
    1000:	4b10      	ldr	r3, [pc, #64]	; (1044 <usart_sync_read+0x8c>)
    1002:	4798      	blx	r3
    1004:	4603      	mov	r3, r0
    1006:	f083 0301 	eor.w	r3, r3, #1
    100a:	b2db      	uxtb	r3, r3
    100c:	2b00      	cmp	r3, #0
    100e:	d1f4      	bne.n	ffa <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1010:	68ba      	ldr	r2, [r7, #8]
    1012:	697b      	ldr	r3, [r7, #20]
    1014:	18d4      	adds	r4, r2, r3
    1016:	693b      	ldr	r3, [r7, #16]
    1018:	3308      	adds	r3, #8
    101a:	4618      	mov	r0, r3
    101c:	4b0a      	ldr	r3, [pc, #40]	; (1048 <usart_sync_read+0x90>)
    101e:	4798      	blx	r3
    1020:	4603      	mov	r3, r0
    1022:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1024:	697b      	ldr	r3, [r7, #20]
    1026:	3301      	adds	r3, #1
    1028:	617b      	str	r3, [r7, #20]
    102a:	88fb      	ldrh	r3, [r7, #6]
    102c:	697a      	ldr	r2, [r7, #20]
    102e:	429a      	cmp	r2, r3
    1030:	d3e2      	bcc.n	ff8 <usart_sync_read+0x40>

	return (int32_t)offset;
    1032:	697b      	ldr	r3, [r7, #20]
}
    1034:	4618      	mov	r0, r3
    1036:	371c      	adds	r7, #28
    1038:	46bd      	mov	sp, r7
    103a:	bd90      	pop	{r4, r7, pc}
    103c:	00002640 	.word	0x00002640
    1040:	0000104d 	.word	0x0000104d
    1044:	00001951 	.word	0x00001951
    1048:	000018ed 	.word	0x000018ed

0000104c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    104c:	b480      	push	{r7}
    104e:	b085      	sub	sp, #20
    1050:	af00      	add	r7, sp, #0
    1052:	4603      	mov	r3, r0
    1054:	60b9      	str	r1, [r7, #8]
    1056:	607a      	str	r2, [r7, #4]
    1058:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    105a:	7bfb      	ldrb	r3, [r7, #15]
    105c:	f083 0301 	eor.w	r3, r3, #1
    1060:	b2db      	uxtb	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	d000      	beq.n	1068 <assert+0x1c>
		__asm("BKPT #0");
    1066:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1068:	bf00      	nop
    106a:	3714      	adds	r7, #20
    106c:	46bd      	mov	sp, r7
    106e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1072:	4770      	bx	lr

00001074 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1074:	b480      	push	{r7}
    1076:	b085      	sub	sp, #20
    1078:	af00      	add	r7, sp, #0
    107a:	6078      	str	r0, [r7, #4]
    107c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	60fb      	str	r3, [r7, #12]
    1084:	e008      	b.n	1098 <is_list_element+0x24>
		if (it == element) {
    1086:	68fa      	ldr	r2, [r7, #12]
    1088:	683b      	ldr	r3, [r7, #0]
    108a:	429a      	cmp	r2, r3
    108c:	d101      	bne.n	1092 <is_list_element+0x1e>
			return true;
    108e:	2301      	movs	r3, #1
    1090:	e006      	b.n	10a0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1092:	68fb      	ldr	r3, [r7, #12]
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	60fb      	str	r3, [r7, #12]
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	2b00      	cmp	r3, #0
    109c:	d1f3      	bne.n	1086 <is_list_element+0x12>
		}
	}

	return false;
    109e:	2300      	movs	r3, #0
}
    10a0:	4618      	mov	r0, r3
    10a2:	3714      	adds	r7, #20
    10a4:	46bd      	mov	sp, r7
    10a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    10aa:	4770      	bx	lr

000010ac <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    10ac:	b580      	push	{r7, lr}
    10ae:	b082      	sub	sp, #8
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
    10b4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    10b6:	6839      	ldr	r1, [r7, #0]
    10b8:	6878      	ldr	r0, [r7, #4]
    10ba:	4b0f      	ldr	r3, [pc, #60]	; (10f8 <list_insert_as_head+0x4c>)
    10bc:	4798      	blx	r3
    10be:	4603      	mov	r3, r0
    10c0:	2b00      	cmp	r3, #0
    10c2:	bf14      	ite	ne
    10c4:	2301      	movne	r3, #1
    10c6:	2300      	moveq	r3, #0
    10c8:	b2db      	uxtb	r3, r3
    10ca:	f083 0301 	eor.w	r3, r3, #1
    10ce:	b2db      	uxtb	r3, r3
    10d0:	f003 0301 	and.w	r3, r3, #1
    10d4:	b2db      	uxtb	r3, r3
    10d6:	2239      	movs	r2, #57	; 0x39
    10d8:	4908      	ldr	r1, [pc, #32]	; (10fc <list_insert_as_head+0x50>)
    10da:	4618      	mov	r0, r3
    10dc:	4b08      	ldr	r3, [pc, #32]	; (1100 <list_insert_as_head+0x54>)
    10de:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	683a      	ldr	r2, [r7, #0]
    10ec:	601a      	str	r2, [r3, #0]
}
    10ee:	bf00      	nop
    10f0:	3708      	adds	r7, #8
    10f2:	46bd      	mov	sp, r7
    10f4:	bd80      	pop	{r7, pc}
    10f6:	bf00      	nop
    10f8:	00001075 	.word	0x00001075
    10fc:	0000265c 	.word	0x0000265c
    1100:	0000104d 	.word	0x0000104d

00001104 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1104:	b480      	push	{r7}
    1106:	b083      	sub	sp, #12
    1108:	af00      	add	r7, sp, #0
    110a:	6078      	str	r0, [r7, #4]
    110c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	681a      	ldr	r2, [r3, #0]
    1112:	683b      	ldr	r3, [r7, #0]
    1114:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	683a      	ldr	r2, [r7, #0]
    111a:	601a      	str	r2, [r3, #0]
}
    111c:	bf00      	nop
    111e:	370c      	adds	r7, #12
    1120:	46bd      	mov	sp, r7
    1122:	f85d 7b04 	ldr.w	r7, [sp], #4
    1126:	4770      	bx	lr

00001128 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1128:	b480      	push	{r7}
    112a:	b085      	sub	sp, #20
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	2b00      	cmp	r3, #0
    1136:	d009      	beq.n	114c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	681b      	ldr	r3, [r3, #0]
    1142:	681a      	ldr	r2, [r3, #0]
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1148:	68fb      	ldr	r3, [r7, #12]
    114a:	e000      	b.n	114e <list_remove_head+0x26>
	}

	return NULL;
    114c:	2300      	movs	r3, #0
}
    114e:	4618      	mov	r0, r3
    1150:	3714      	adds	r7, #20
    1152:	46bd      	mov	sp, r7
    1154:	f85d 7b04 	ldr.w	r7, [sp], #4
    1158:	4770      	bx	lr

0000115a <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    115a:	b480      	push	{r7}
    115c:	b083      	sub	sp, #12
    115e:	af00      	add	r7, sp, #0
    1160:	6078      	str	r0, [r7, #4]
    1162:	460b      	mov	r3, r1
    1164:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1166:	687b      	ldr	r3, [r7, #4]
    1168:	881b      	ldrh	r3, [r3, #0]
    116a:	b29a      	uxth	r2, r3
    116c:	887b      	ldrh	r3, [r7, #2]
    116e:	021b      	lsls	r3, r3, #8
    1170:	b29b      	uxth	r3, r3
    1172:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1176:	b29b      	uxth	r3, r3
    1178:	4313      	orrs	r3, r2
    117a:	b29a      	uxth	r2, r3
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1180:	bf00      	nop
    1182:	370c      	adds	r7, #12
    1184:	46bd      	mov	sp, r7
    1186:	f85d 7b04 	ldr.w	r7, [sp], #4
    118a:	4770      	bx	lr

0000118c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    118c:	b580      	push	{r7, lr}
    118e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1190:	2100      	movs	r1, #0
    1192:	4808      	ldr	r0, [pc, #32]	; (11b4 <_init_chip+0x28>)
    1194:	4b08      	ldr	r3, [pc, #32]	; (11b8 <_init_chip+0x2c>)
    1196:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1198:	4b08      	ldr	r3, [pc, #32]	; (11bc <_init_chip+0x30>)
    119a:	4798      	blx	r3
	_oscctrl_init_sources();
    119c:	4b08      	ldr	r3, [pc, #32]	; (11c0 <_init_chip+0x34>)
    119e:	4798      	blx	r3
	_mclk_init();
    11a0:	4b08      	ldr	r3, [pc, #32]	; (11c4 <_init_chip+0x38>)
    11a2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    11a4:	4b08      	ldr	r3, [pc, #32]	; (11c8 <_init_chip+0x3c>)
    11a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    11a8:	f640 70ff 	movw	r0, #4095	; 0xfff
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <_init_chip+0x40>)
    11ae:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    11b0:	bf00      	nop
    11b2:	bd80      	pop	{r7, pc}
    11b4:	41004000 	.word	0x41004000
    11b8:	0000115b 	.word	0x0000115b
    11bc:	000012f9 	.word	0x000012f9
    11c0:	00001391 	.word	0x00001391
    11c4:	00001275 	.word	0x00001275
    11c8:	000013d1 	.word	0x000013d1
    11cc:	00001225 	.word	0x00001225

000011d0 <hri_gclk_wait_for_sync>:
{
    11d0:	b480      	push	{r7}
    11d2:	b083      	sub	sp, #12
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
    11d8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11da:	bf00      	nop
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	685a      	ldr	r2, [r3, #4]
    11e0:	683b      	ldr	r3, [r7, #0]
    11e2:	4013      	ands	r3, r2
    11e4:	2b00      	cmp	r3, #0
    11e6:	d1f9      	bne.n	11dc <hri_gclk_wait_for_sync+0xc>
}
    11e8:	bf00      	nop
    11ea:	370c      	adds	r7, #12
    11ec:	46bd      	mov	sp, r7
    11ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f2:	4770      	bx	lr

000011f4 <hri_gclk_write_GENCTRL_reg>:
{
    11f4:	b580      	push	{r7, lr}
    11f6:	b084      	sub	sp, #16
    11f8:	af00      	add	r7, sp, #0
    11fa:	60f8      	str	r0, [r7, #12]
    11fc:	460b      	mov	r3, r1
    11fe:	607a      	str	r2, [r7, #4]
    1200:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1202:	7afa      	ldrb	r2, [r7, #11]
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	3208      	adds	r2, #8
    1208:	6879      	ldr	r1, [r7, #4]
    120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    120e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1212:	68f8      	ldr	r0, [r7, #12]
    1214:	4b02      	ldr	r3, [pc, #8]	; (1220 <hri_gclk_write_GENCTRL_reg+0x2c>)
    1216:	4798      	blx	r3
}
    1218:	bf00      	nop
    121a:	3710      	adds	r7, #16
    121c:	46bd      	mov	sp, r7
    121e:	bd80      	pop	{r7, pc}
    1220:	000011d1 	.word	0x000011d1

00001224 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1224:	b580      	push	{r7, lr}
    1226:	b082      	sub	sp, #8
    1228:	af00      	add	r7, sp, #0
    122a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    122c:	687b      	ldr	r3, [r7, #4]
    122e:	f003 0301 	and.w	r3, r3, #1
    1232:	2b00      	cmp	r3, #0
    1234:	d004      	beq.n	1240 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1236:	4a04      	ldr	r2, [pc, #16]	; (1248 <_gclk_init_generators_by_fref+0x24>)
    1238:	2100      	movs	r1, #0
    123a:	4804      	ldr	r0, [pc, #16]	; (124c <_gclk_init_generators_by_fref+0x28>)
    123c:	4b04      	ldr	r3, [pc, #16]	; (1250 <_gclk_init_generators_by_fref+0x2c>)
    123e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1240:	bf00      	nop
    1242:	3708      	adds	r7, #8
    1244:	46bd      	mov	sp, r7
    1246:	bd80      	pop	{r7, pc}
    1248:	00010101 	.word	0x00010101
    124c:	40001c00 	.word	0x40001c00
    1250:	000011f5 	.word	0x000011f5

00001254 <hri_mclk_write_CPUDIV_reg>:
{
    1254:	b480      	push	{r7}
    1256:	b083      	sub	sp, #12
    1258:	af00      	add	r7, sp, #0
    125a:	6078      	str	r0, [r7, #4]
    125c:	460b      	mov	r3, r1
    125e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	78fa      	ldrb	r2, [r7, #3]
    1264:	715a      	strb	r2, [r3, #5]
}
    1266:	bf00      	nop
    1268:	370c      	adds	r7, #12
    126a:	46bd      	mov	sp, r7
    126c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1270:	4770      	bx	lr
	...

00001274 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    1274:	b580      	push	{r7, lr}
    1276:	b082      	sub	sp, #8
    1278:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    127a:	4b05      	ldr	r3, [pc, #20]	; (1290 <_mclk_init+0x1c>)
    127c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    127e:	2101      	movs	r1, #1
    1280:	6878      	ldr	r0, [r7, #4]
    1282:	4b04      	ldr	r3, [pc, #16]	; (1294 <_mclk_init+0x20>)
    1284:	4798      	blx	r3
}
    1286:	bf00      	nop
    1288:	3708      	adds	r7, #8
    128a:	46bd      	mov	sp, r7
    128c:	bd80      	pop	{r7, pc}
    128e:	bf00      	nop
    1290:	40000800 	.word	0x40000800
    1294:	00001255 	.word	0x00001255

00001298 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    1298:	b480      	push	{r7}
    129a:	b083      	sub	sp, #12
    129c:	af00      	add	r7, sp, #0
    129e:	6078      	str	r0, [r7, #4]
    12a0:	460b      	mov	r3, r1
    12a2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	78fa      	ldrb	r2, [r7, #3]
    12a8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    12aa:	bf00      	nop
    12ac:	370c      	adds	r7, #12
    12ae:	46bd      	mov	sp, r7
    12b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b4:	4770      	bx	lr

000012b6 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    12b6:	b480      	push	{r7}
    12b8:	b085      	sub	sp, #20
    12ba:	af00      	add	r7, sp, #0
    12bc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	69db      	ldr	r3, [r3, #28]
    12c2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	0a1b      	lsrs	r3, r3, #8
    12c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    12cc:	60fb      	str	r3, [r7, #12]
	return tmp;
    12ce:	68fb      	ldr	r3, [r7, #12]
}
    12d0:	4618      	mov	r0, r3
    12d2:	3714      	adds	r7, #20
    12d4:	46bd      	mov	sp, r7
    12d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12da:	4770      	bx	lr

000012dc <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    12dc:	b480      	push	{r7}
    12de:	b083      	sub	sp, #12
    12e0:	af00      	add	r7, sp, #0
    12e2:	6078      	str	r0, [r7, #4]
    12e4:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	683a      	ldr	r2, [r7, #0]
    12ea:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    12ec:	bf00      	nop
    12ee:	370c      	adds	r7, #12
    12f0:	46bd      	mov	sp, r7
    12f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f6:	4770      	bx	lr

000012f8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	b082      	sub	sp, #8
    12fc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    12fe:	4b0c      	ldr	r3, [pc, #48]	; (1330 <_osc32kctrl_init_sources+0x38>)
    1300:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1302:	2300      	movs	r3, #0
    1304:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    1306:	6878      	ldr	r0, [r7, #4]
    1308:	4b0a      	ldr	r3, [pc, #40]	; (1334 <_osc32kctrl_init_sources+0x3c>)
    130a:	4798      	blx	r3
    130c:	4603      	mov	r3, r0
    130e:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1310:	887b      	ldrh	r3, [r7, #2]
    1312:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1314:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1318:	4619      	mov	r1, r3
    131a:	6878      	ldr	r0, [r7, #4]
    131c:	4b06      	ldr	r3, [pc, #24]	; (1338 <_osc32kctrl_init_sources+0x40>)
    131e:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1320:	2101      	movs	r1, #1
    1322:	6878      	ldr	r0, [r7, #4]
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <_osc32kctrl_init_sources+0x44>)
    1326:	4798      	blx	r3
	(void)calib;
}
    1328:	bf00      	nop
    132a:	3708      	adds	r7, #8
    132c:	46bd      	mov	sp, r7
    132e:	bd80      	pop	{r7, pc}
    1330:	40001400 	.word	0x40001400
    1334:	000012b7 	.word	0x000012b7
    1338:	000012dd 	.word	0x000012dd
    133c:	00001299 	.word	0x00001299

00001340 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    1340:	b480      	push	{r7}
    1342:	b083      	sub	sp, #12
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	691b      	ldr	r3, [r3, #16]
    134c:	085b      	lsrs	r3, r3, #1
    134e:	f003 0301 	and.w	r3, r3, #1
    1352:	2b00      	cmp	r3, #0
    1354:	bf14      	ite	ne
    1356:	2301      	movne	r3, #1
    1358:	2300      	moveq	r3, #0
    135a:	b2db      	uxtb	r3, r3
}
    135c:	4618      	mov	r0, r3
    135e:	370c      	adds	r7, #12
    1360:	46bd      	mov	sp, r7
    1362:	f85d 7b04 	ldr.w	r7, [sp], #4
    1366:	4770      	bx	lr

00001368 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    1368:	b480      	push	{r7}
    136a:	b085      	sub	sp, #20
    136c:	af00      	add	r7, sp, #0
    136e:	60f8      	str	r0, [r7, #12]
    1370:	460b      	mov	r3, r1
    1372:	607a      	str	r2, [r7, #4]
    1374:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1376:	7afb      	ldrb	r3, [r7, #11]
    1378:	68fa      	ldr	r2, [r7, #12]
    137a:	3304      	adds	r3, #4
    137c:	009b      	lsls	r3, r3, #2
    137e:	4413      	add	r3, r2
    1380:	687a      	ldr	r2, [r7, #4]
    1382:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1384:	bf00      	nop
    1386:	3714      	adds	r7, #20
    1388:	46bd      	mov	sp, r7
    138a:	f85d 7b04 	ldr.w	r7, [sp], #4
    138e:	4770      	bx	lr

00001390 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1390:	b580      	push	{r7, lr}
    1392:	b082      	sub	sp, #8
    1394:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1396:	4b0a      	ldr	r3, [pc, #40]	; (13c0 <_oscctrl_init_sources+0x30>)
    1398:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    139a:	4a0a      	ldr	r2, [pc, #40]	; (13c4 <_oscctrl_init_sources+0x34>)
    139c:	2101      	movs	r1, #1
    139e:	6878      	ldr	r0, [r7, #4]
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <_oscctrl_init_sources+0x38>)
    13a2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    13a4:	bf00      	nop
    13a6:	6878      	ldr	r0, [r7, #4]
    13a8:	4b08      	ldr	r3, [pc, #32]	; (13cc <_oscctrl_init_sources+0x3c>)
    13aa:	4798      	blx	r3
    13ac:	4603      	mov	r3, r0
    13ae:	f083 0301 	eor.w	r3, r3, #1
    13b2:	b2db      	uxtb	r3, r3
    13b4:	2b00      	cmp	r3, #0
    13b6:	d1f6      	bne.n	13a6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    13b8:	bf00      	nop
    13ba:	3708      	adds	r7, #8
    13bc:	46bd      	mov	sp, r7
    13be:	bd80      	pop	{r7, pc}
    13c0:	40001000 	.word	0x40001000
    13c4:	03002606 	.word	0x03002606
    13c8:	00001369 	.word	0x00001369
    13cc:	00001341 	.word	0x00001341

000013d0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    13d0:	b480      	push	{r7}
    13d2:	b083      	sub	sp, #12
    13d4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    13d6:	4b04      	ldr	r3, [pc, #16]	; (13e8 <_oscctrl_init_referenced_generators+0x18>)
    13d8:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    13da:	bf00      	nop
    13dc:	370c      	adds	r7, #12
    13de:	46bd      	mov	sp, r7
    13e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13e4:	4770      	bx	lr
    13e6:	bf00      	nop
    13e8:	40001000 	.word	0x40001000

000013ec <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    13ec:	b480      	push	{r7}
    13ee:	b083      	sub	sp, #12
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	789b      	ldrb	r3, [r3, #2]
    13f8:	b2db      	uxtb	r3, r3
}
    13fa:	4618      	mov	r0, r3
    13fc:	370c      	adds	r7, #12
    13fe:	46bd      	mov	sp, r7
    1400:	f85d 7b04 	ldr.w	r7, [sp], #4
    1404:	4770      	bx	lr

00001406 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    1406:	b480      	push	{r7}
    1408:	b083      	sub	sp, #12
    140a:	af00      	add	r7, sp, #0
    140c:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	685b      	ldr	r3, [r3, #4]
}
    1412:	4618      	mov	r0, r3
    1414:	370c      	adds	r7, #12
    1416:	46bd      	mov	sp, r7
    1418:	f85d 7b04 	ldr.w	r7, [sp], #4
    141c:	4770      	bx	lr
	...

00001420 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1420:	b590      	push	{r4, r7, lr}
    1422:	b083      	sub	sp, #12
    1424:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    1426:	4b17      	ldr	r3, [pc, #92]	; (1484 <RAMECC_Handler+0x64>)
    1428:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    142a:	4817      	ldr	r0, [pc, #92]	; (1488 <RAMECC_Handler+0x68>)
    142c:	4b17      	ldr	r3, [pc, #92]	; (148c <RAMECC_Handler+0x6c>)
    142e:	4798      	blx	r3
    1430:	4603      	mov	r3, r0
    1432:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1434:	683b      	ldr	r3, [r7, #0]
    1436:	f003 0302 	and.w	r3, r3, #2
    143a:	2b00      	cmp	r3, #0
    143c:	d00c      	beq.n	1458 <RAMECC_Handler+0x38>
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	2b00      	cmp	r3, #0
    1444:	d008      	beq.n	1458 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	681c      	ldr	r4, [r3, #0]
    144a:	480f      	ldr	r0, [pc, #60]	; (1488 <RAMECC_Handler+0x68>)
    144c:	4b10      	ldr	r3, [pc, #64]	; (1490 <RAMECC_Handler+0x70>)
    144e:	4798      	blx	r3
    1450:	4603      	mov	r3, r0
    1452:	4618      	mov	r0, r3
    1454:	47a0      	blx	r4
    1456:	e012      	b.n	147e <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1458:	683b      	ldr	r3, [r7, #0]
    145a:	f003 0301 	and.w	r3, r3, #1
    145e:	2b00      	cmp	r3, #0
    1460:	d00c      	beq.n	147c <RAMECC_Handler+0x5c>
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	685b      	ldr	r3, [r3, #4]
    1466:	2b00      	cmp	r3, #0
    1468:	d008      	beq.n	147c <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	685c      	ldr	r4, [r3, #4]
    146e:	4806      	ldr	r0, [pc, #24]	; (1488 <RAMECC_Handler+0x68>)
    1470:	4b07      	ldr	r3, [pc, #28]	; (1490 <RAMECC_Handler+0x70>)
    1472:	4798      	blx	r3
    1474:	4603      	mov	r3, r0
    1476:	4618      	mov	r0, r3
    1478:	47a0      	blx	r4
    147a:	e000      	b.n	147e <RAMECC_Handler+0x5e>
	} else {
		return;
    147c:	bf00      	nop
	}
}
    147e:	370c      	adds	r7, #12
    1480:	46bd      	mov	sp, r7
    1482:	bd90      	pop	{r4, r7, pc}
    1484:	2000009c 	.word	0x2000009c
    1488:	41020000 	.word	0x41020000
    148c:	000013ed 	.word	0x000013ed
    1490:	00001407 	.word	0x00001407

00001494 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    1494:	b480      	push	{r7}
    1496:	b083      	sub	sp, #12
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
    149c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    149e:	bf00      	nop
    14a0:	687b      	ldr	r3, [r7, #4]
    14a2:	691a      	ldr	r2, [r3, #16]
    14a4:	683b      	ldr	r3, [r7, #0]
    14a6:	4013      	ands	r3, r2
    14a8:	2b00      	cmp	r3, #0
    14aa:	d1f9      	bne.n	14a0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    14ac:	bf00      	nop
    14ae:	370c      	adds	r7, #12
    14b0:	46bd      	mov	sp, r7
    14b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b6:	4770      	bx	lr

000014b8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    14b8:	b480      	push	{r7}
    14ba:	b083      	sub	sp, #12
    14bc:	af00      	add	r7, sp, #0
    14be:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    14c6:	819a      	strh	r2, [r3, #12]
}
    14c8:	bf00      	nop
    14ca:	370c      	adds	r7, #12
    14cc:	46bd      	mov	sp, r7
    14ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d2:	4770      	bx	lr

000014d4 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    14d4:	b480      	push	{r7}
    14d6:	b083      	sub	sp, #12
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	899b      	ldrh	r3, [r3, #12]
    14e0:	b29b      	uxth	r3, r3
}
    14e2:	4618      	mov	r0, r3
    14e4:	370c      	adds	r7, #12
    14e6:	46bd      	mov	sp, r7
    14e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ec:	4770      	bx	lr

000014ee <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    14ee:	b480      	push	{r7}
    14f0:	b083      	sub	sp, #12
    14f2:	af00      	add	r7, sp, #0
    14f4:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    14fc:	815a      	strh	r2, [r3, #10]
}
    14fe:	bf00      	nop
    1500:	370c      	adds	r7, #12
    1502:	46bd      	mov	sp, r7
    1504:	f85d 7b04 	ldr.w	r7, [sp], #4
    1508:	4770      	bx	lr
	...

0000150c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    150c:	b580      	push	{r7, lr}
    150e:	b082      	sub	sp, #8
    1510:	af00      	add	r7, sp, #0
    1512:	6078      	str	r0, [r7, #4]
    1514:	460b      	mov	r3, r1
    1516:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	887a      	ldrh	r2, [r7, #2]
    151c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    151e:	f248 0103 	movw	r1, #32771	; 0x8003
    1522:	6878      	ldr	r0, [r7, #4]
    1524:	4b02      	ldr	r3, [pc, #8]	; (1530 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    1526:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    1528:	bf00      	nop
    152a:	3708      	adds	r7, #8
    152c:	46bd      	mov	sp, r7
    152e:	bd80      	pop	{r7, pc}
    1530:	00001495 	.word	0x00001495

00001534 <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    1534:	b580      	push	{r7, lr}
    1536:	b084      	sub	sp, #16
    1538:	af00      	add	r7, sp, #0
    153a:	60f8      	str	r0, [r7, #12]
    153c:	460b      	mov	r3, r1
    153e:	607a      	str	r2, [r7, #4]
    1540:	72fb      	strb	r3, [r7, #11]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1542:	7afa      	ldrb	r2, [r7, #11]
    1544:	68fb      	ldr	r3, [r7, #12]
    1546:	3208      	adds	r2, #8
    1548:	6879      	ldr	r1, [r7, #4]
    154a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    154e:	2160      	movs	r1, #96	; 0x60
    1550:	68f8      	ldr	r0, [r7, #12]
    1552:	4b03      	ldr	r3, [pc, #12]	; (1560 <hri_rtcmode0_write_COMP_reg+0x2c>)
    1554:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    1556:	bf00      	nop
    1558:	3710      	adds	r7, #16
    155a:	46bd      	mov	sp, r7
    155c:	bd80      	pop	{r7, pc}
    155e:	bf00      	nop
    1560:	00001495 	.word	0x00001495

00001564 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1564:	b580      	push	{r7, lr}
    1566:	b082      	sub	sp, #8
    1568:	af00      	add	r7, sp, #0
    156a:	6078      	str	r0, [r7, #4]
    156c:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	2b00      	cmp	r3, #0
    1572:	bf14      	ite	ne
    1574:	2301      	movne	r3, #1
    1576:	2300      	moveq	r3, #0
    1578:	b2db      	uxtb	r3, r3
    157a:	2230      	movs	r2, #48	; 0x30
    157c:	4916      	ldr	r1, [pc, #88]	; (15d8 <_timer_init+0x74>)
    157e:	4618      	mov	r0, r3
    1580:	4b16      	ldr	r3, [pc, #88]	; (15dc <_timer_init+0x78>)
    1582:	4798      	blx	r3

	dev->hw = hw;
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	683a      	ldr	r2, [r7, #0]
    1588:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	68db      	ldr	r3, [r3, #12]
    158e:	2101      	movs	r1, #1
    1590:	4618      	mov	r0, r3
    1592:	4b13      	ldr	r3, [pc, #76]	; (15e0 <_timer_init+0x7c>)
    1594:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	68db      	ldr	r3, [r3, #12]
    159a:	2101      	movs	r1, #1
    159c:	4618      	mov	r0, r3
    159e:	4b11      	ldr	r3, [pc, #68]	; (15e4 <_timer_init+0x80>)
    15a0:	4798      	blx	r3
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	68db      	ldr	r3, [r3, #12]
	hri_rtcmode0_write_CTRLA_reg(
    15a6:	f248 0180 	movw	r1, #32896	; 0x8080
    15aa:	4618      	mov	r0, r3
    15ac:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <_timer_init+0x7c>)
    15ae:	4798      	blx	r3
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	68db      	ldr	r3, [r3, #12]
    15b4:	2220      	movs	r2, #32
    15b6:	2100      	movs	r1, #0
    15b8:	4618      	mov	r0, r3
    15ba:	4b0b      	ldr	r3, [pc, #44]	; (15e8 <_timer_init+0x84>)
    15bc:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	68db      	ldr	r3, [r3, #12]
    15c2:	4618      	mov	r0, r3
    15c4:	4b09      	ldr	r3, [pc, #36]	; (15ec <_timer_init+0x88>)
    15c6:	4798      	blx	r3

	_rtc_dev = dev;
    15c8:	4a09      	ldr	r2, [pc, #36]	; (15f0 <_timer_init+0x8c>)
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    15ce:	2300      	movs	r3, #0
}
    15d0:	4618      	mov	r0, r3
    15d2:	3708      	adds	r7, #8
    15d4:	46bd      	mov	sp, r7
    15d6:	bd80      	pop	{r7, pc}
    15d8:	0000267c 	.word	0x0000267c
    15dc:	0000104d 	.word	0x0000104d
    15e0:	0000150d 	.word	0x0000150d
    15e4:	00001495 	.word	0x00001495
    15e8:	00001535 	.word	0x00001535
    15ec:	000014ef 	.word	0x000014ef
    15f0:	2000004c 	.word	0x2000004c

000015f4 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	b084      	sub	sp, #16
    15f8:	af00      	add	r7, sp, #0
    15fa:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	68db      	ldr	r3, [r3, #12]
    1600:	4618      	mov	r0, r3
    1602:	4b0d      	ldr	r3, [pc, #52]	; (1638 <_rtc_timer_interrupt_handler+0x44>)
    1604:	4798      	blx	r3
    1606:	4603      	mov	r3, r0
    1608:	81fb      	strh	r3, [r7, #14]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    160a:	89fb      	ldrh	r3, [r7, #14]
    160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1610:	2b00      	cmp	r3, #0
    1612:	d00c      	beq.n	162e <_rtc_timer_interrupt_handler+0x3a>
		if (dev->timer_cb.period_expired) {
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	681b      	ldr	r3, [r3, #0]
    1618:	2b00      	cmp	r3, #0
    161a:	d003      	beq.n	1624 <_rtc_timer_interrupt_handler+0x30>
			dev->timer_cb.period_expired(dev);
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	6878      	ldr	r0, [r7, #4]
    1622:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	68db      	ldr	r3, [r3, #12]
    1628:	4618      	mov	r0, r3
    162a:	4b04      	ldr	r3, [pc, #16]	; (163c <_rtc_timer_interrupt_handler+0x48>)
    162c:	4798      	blx	r3
	}
}
    162e:	bf00      	nop
    1630:	3710      	adds	r7, #16
    1632:	46bd      	mov	sp, r7
    1634:	bd80      	pop	{r7, pc}
    1636:	bf00      	nop
    1638:	000014d5 	.word	0x000014d5
    163c:	000014b9 	.word	0x000014b9

00001640 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    1640:	b480      	push	{r7}
    1642:	af00      	add	r7, sp, #0
	return NULL;
    1644:	2300      	movs	r3, #0
}
    1646:	4618      	mov	r0, r3
    1648:	46bd      	mov	sp, r7
    164a:	f85d 7b04 	ldr.w	r7, [sp], #4
    164e:	4770      	bx	lr

00001650 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1650:	b580      	push	{r7, lr}
    1652:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    1654:	4b03      	ldr	r3, [pc, #12]	; (1664 <RTC_Handler+0x14>)
    1656:	681b      	ldr	r3, [r3, #0]
    1658:	4618      	mov	r0, r3
    165a:	4b03      	ldr	r3, [pc, #12]	; (1668 <RTC_Handler+0x18>)
    165c:	4798      	blx	r3
}
    165e:	bf00      	nop
    1660:	bd80      	pop	{r7, pc}
    1662:	bf00      	nop
    1664:	2000004c 	.word	0x2000004c
    1668:	000015f5 	.word	0x000015f5

0000166c <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    166c:	b480      	push	{r7}
    166e:	b083      	sub	sp, #12
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1676:	bf00      	nop
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	69da      	ldr	r2, [r3, #28]
    167c:	683b      	ldr	r3, [r7, #0]
    167e:	4013      	ands	r3, r2
    1680:	2b00      	cmp	r3, #0
    1682:	d1f9      	bne.n	1678 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    1684:	bf00      	nop
    1686:	370c      	adds	r7, #12
    1688:	46bd      	mov	sp, r7
    168a:	f85d 7b04 	ldr.w	r7, [sp], #4
    168e:	4770      	bx	lr

00001690 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1690:	b480      	push	{r7}
    1692:	b083      	sub	sp, #12
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
    1698:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	69da      	ldr	r2, [r3, #28]
    169e:	683b      	ldr	r3, [r7, #0]
    16a0:	4013      	ands	r3, r2
    16a2:	2b00      	cmp	r3, #0
    16a4:	bf14      	ite	ne
    16a6:	2301      	movne	r3, #1
    16a8:	2300      	moveq	r3, #0
    16aa:	b2db      	uxtb	r3, r3
}
    16ac:	4618      	mov	r0, r3
    16ae:	370c      	adds	r7, #12
    16b0:	46bd      	mov	sp, r7
    16b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b6:	4770      	bx	lr

000016b8 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    16b8:	b480      	push	{r7}
    16ba:	b083      	sub	sp, #12
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	7e1b      	ldrb	r3, [r3, #24]
    16c4:	b2db      	uxtb	r3, r3
    16c6:	f003 0301 	and.w	r3, r3, #1
    16ca:	2b00      	cmp	r3, #0
    16cc:	bf14      	ite	ne
    16ce:	2301      	movne	r3, #1
    16d0:	2300      	moveq	r3, #0
    16d2:	b2db      	uxtb	r3, r3
}
    16d4:	4618      	mov	r0, r3
    16d6:	370c      	adds	r7, #12
    16d8:	46bd      	mov	sp, r7
    16da:	f85d 7b04 	ldr.w	r7, [sp], #4
    16de:	4770      	bx	lr

000016e0 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    16e0:	b480      	push	{r7}
    16e2:	b083      	sub	sp, #12
    16e4:	af00      	add	r7, sp, #0
    16e6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	7e1b      	ldrb	r3, [r3, #24]
    16ec:	b2db      	uxtb	r3, r3
    16ee:	085b      	lsrs	r3, r3, #1
    16f0:	f003 0301 	and.w	r3, r3, #1
    16f4:	2b00      	cmp	r3, #0
    16f6:	bf14      	ite	ne
    16f8:	2301      	movne	r3, #1
    16fa:	2300      	moveq	r3, #0
    16fc:	b2db      	uxtb	r3, r3
}
    16fe:	4618      	mov	r0, r3
    1700:	370c      	adds	r7, #12
    1702:	46bd      	mov	sp, r7
    1704:	f85d 7b04 	ldr.w	r7, [sp], #4
    1708:	4770      	bx	lr

0000170a <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    170a:	b480      	push	{r7}
    170c:	b083      	sub	sp, #12
    170e:	af00      	add	r7, sp, #0
    1710:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	7e1b      	ldrb	r3, [r3, #24]
    1716:	b2db      	uxtb	r3, r3
    1718:	089b      	lsrs	r3, r3, #2
    171a:	f003 0301 	and.w	r3, r3, #1
    171e:	2b00      	cmp	r3, #0
    1720:	bf14      	ite	ne
    1722:	2301      	movne	r3, #1
    1724:	2300      	moveq	r3, #0
    1726:	b2db      	uxtb	r3, r3
}
    1728:	4618      	mov	r0, r3
    172a:	370c      	adds	r7, #12
    172c:	46bd      	mov	sp, r7
    172e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1732:	4770      	bx	lr

00001734 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1734:	b580      	push	{r7, lr}
    1736:	b082      	sub	sp, #8
    1738:	af00      	add	r7, sp, #0
    173a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	f023 0202 	bic.w	r2, r3, #2
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1748:	2103      	movs	r1, #3
    174a:	6878      	ldr	r0, [r7, #4]
    174c:	4b02      	ldr	r3, [pc, #8]	; (1758 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    174e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1750:	bf00      	nop
    1752:	3708      	adds	r7, #8
    1754:	46bd      	mov	sp, r7
    1756:	bd80      	pop	{r7, pc}
    1758:	0000166d 	.word	0x0000166d

0000175c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    175c:	b580      	push	{r7, lr}
    175e:	b084      	sub	sp, #16
    1760:	af00      	add	r7, sp, #0
    1762:	6078      	str	r0, [r7, #4]
    1764:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1766:	2103      	movs	r1, #3
    1768:	6878      	ldr	r0, [r7, #4]
    176a:	4b07      	ldr	r3, [pc, #28]	; (1788 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    176c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	681b      	ldr	r3, [r3, #0]
    1772:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1774:	68fa      	ldr	r2, [r7, #12]
    1776:	683b      	ldr	r3, [r7, #0]
    1778:	4013      	ands	r3, r2
    177a:	60fb      	str	r3, [r7, #12]
	return tmp;
    177c:	68fb      	ldr	r3, [r7, #12]
}
    177e:	4618      	mov	r0, r3
    1780:	3710      	adds	r7, #16
    1782:	46bd      	mov	sp, r7
    1784:	bd80      	pop	{r7, pc}
    1786:	bf00      	nop
    1788:	0000166d 	.word	0x0000166d

0000178c <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
    1794:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	683a      	ldr	r2, [r7, #0]
    179a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    179c:	2103      	movs	r1, #3
    179e:	6878      	ldr	r0, [r7, #4]
    17a0:	4b02      	ldr	r3, [pc, #8]	; (17ac <hri_sercomusart_write_CTRLA_reg+0x20>)
    17a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17a4:	bf00      	nop
    17a6:	3708      	adds	r7, #8
    17a8:	46bd      	mov	sp, r7
    17aa:	bd80      	pop	{r7, pc}
    17ac:	0000166d 	.word	0x0000166d

000017b0 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	b082      	sub	sp, #8
    17b4:	af00      	add	r7, sp, #0
    17b6:	6078      	str	r0, [r7, #4]
    17b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	683a      	ldr	r2, [r7, #0]
    17be:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    17c0:	211f      	movs	r1, #31
    17c2:	6878      	ldr	r0, [r7, #4]
    17c4:	4b02      	ldr	r3, [pc, #8]	; (17d0 <hri_sercomusart_write_CTRLB_reg+0x20>)
    17c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17c8:	bf00      	nop
    17ca:	3708      	adds	r7, #8
    17cc:	46bd      	mov	sp, r7
    17ce:	bd80      	pop	{r7, pc}
    17d0:	0000166d 	.word	0x0000166d

000017d4 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    17d4:	b480      	push	{r7}
    17d6:	b083      	sub	sp, #12
    17d8:	af00      	add	r7, sp, #0
    17da:	6078      	str	r0, [r7, #4]
    17dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	683a      	ldr	r2, [r7, #0]
    17e2:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17e4:	bf00      	nop
    17e6:	370c      	adds	r7, #12
    17e8:	46bd      	mov	sp, r7
    17ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ee:	4770      	bx	lr

000017f0 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    17f0:	b480      	push	{r7}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
    17f6:	6078      	str	r0, [r7, #4]
    17f8:	460b      	mov	r3, r1
    17fa:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	887a      	ldrh	r2, [r7, #2]
    1800:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1802:	bf00      	nop
    1804:	370c      	adds	r7, #12
    1806:	46bd      	mov	sp, r7
    1808:	f85d 7b04 	ldr.w	r7, [sp], #4
    180c:	4770      	bx	lr

0000180e <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    180e:	b480      	push	{r7}
    1810:	b083      	sub	sp, #12
    1812:	af00      	add	r7, sp, #0
    1814:	6078      	str	r0, [r7, #4]
    1816:	460b      	mov	r3, r1
    1818:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    181a:	687b      	ldr	r3, [r7, #4]
    181c:	78fa      	ldrb	r2, [r7, #3]
    181e:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1820:	bf00      	nop
    1822:	370c      	adds	r7, #12
    1824:	46bd      	mov	sp, r7
    1826:	f85d 7b04 	ldr.w	r7, [sp], #4
    182a:	4770      	bx	lr

0000182c <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    182c:	b480      	push	{r7}
    182e:	b083      	sub	sp, #12
    1830:	af00      	add	r7, sp, #0
    1832:	6078      	str	r0, [r7, #4]
    1834:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	683a      	ldr	r2, [r7, #0]
    183a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    183c:	bf00      	nop
    183e:	370c      	adds	r7, #12
    1840:	46bd      	mov	sp, r7
    1842:	f85d 7b04 	ldr.w	r7, [sp], #4
    1846:	4770      	bx	lr

00001848 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1848:	b480      	push	{r7}
    184a:	b083      	sub	sp, #12
    184c:	af00      	add	r7, sp, #0
    184e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1854:	4618      	mov	r0, r3
    1856:	370c      	adds	r7, #12
    1858:	46bd      	mov	sp, r7
    185a:	f85d 7b04 	ldr.w	r7, [sp], #4
    185e:	4770      	bx	lr

00001860 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1860:	b480      	push	{r7}
    1862:	b083      	sub	sp, #12
    1864:	af00      	add	r7, sp, #0
    1866:	6078      	str	r0, [r7, #4]
    1868:	460b      	mov	r3, r1
    186a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	78fa      	ldrb	r2, [r7, #3]
    1870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1874:	bf00      	nop
    1876:	370c      	adds	r7, #12
    1878:	46bd      	mov	sp, r7
    187a:	f85d 7b04 	ldr.w	r7, [sp], #4
    187e:	4770      	bx	lr

00001880 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    1880:	b580      	push	{r7, lr}
    1882:	b082      	sub	sp, #8
    1884:	af00      	add	r7, sp, #0
    1886:	6078      	str	r0, [r7, #4]
    1888:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	2b00      	cmp	r3, #0
    188e:	bf14      	ite	ne
    1890:	2301      	movne	r3, #1
    1892:	2300      	moveq	r3, #0
    1894:	b2db      	uxtb	r3, r3
    1896:	22bb      	movs	r2, #187	; 0xbb
    1898:	4907      	ldr	r1, [pc, #28]	; (18b8 <_usart_sync_init+0x38>)
    189a:	4618      	mov	r0, r3
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <_usart_sync_init+0x3c>)
    189e:	4798      	blx	r3

	device->hw = hw;
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	683a      	ldr	r2, [r7, #0]
    18a4:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    18a6:	6838      	ldr	r0, [r7, #0]
    18a8:	4b05      	ldr	r3, [pc, #20]	; (18c0 <_usart_sync_init+0x40>)
    18aa:	4798      	blx	r3
    18ac:	4603      	mov	r3, r0
}
    18ae:	4618      	mov	r0, r3
    18b0:	3708      	adds	r7, #8
    18b2:	46bd      	mov	sp, r7
    18b4:	bd80      	pop	{r7, pc}
    18b6:	bf00      	nop
    18b8:	00002694 	.word	0x00002694
    18bc:	0000104d 	.word	0x0000104d
    18c0:	00001a31 	.word	0x00001a31

000018c4 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b082      	sub	sp, #8
    18c8:	af00      	add	r7, sp, #0
    18ca:	6078      	str	r0, [r7, #4]
    18cc:	460b      	mov	r3, r1
    18ce:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	78fa      	ldrb	r2, [r7, #3]
    18d6:	4611      	mov	r1, r2
    18d8:	4618      	mov	r0, r3
    18da:	4b03      	ldr	r3, [pc, #12]	; (18e8 <_usart_sync_write_byte+0x24>)
    18dc:	4798      	blx	r3
}
    18de:	bf00      	nop
    18e0:	3708      	adds	r7, #8
    18e2:	46bd      	mov	sp, r7
    18e4:	bd80      	pop	{r7, pc}
    18e6:	bf00      	nop
    18e8:	0000182d 	.word	0x0000182d

000018ec <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	4618      	mov	r0, r3
    18fa:	4b04      	ldr	r3, [pc, #16]	; (190c <_usart_sync_read_byte+0x20>)
    18fc:	4798      	blx	r3
    18fe:	4603      	mov	r3, r0
    1900:	b2db      	uxtb	r3, r3
}
    1902:	4618      	mov	r0, r3
    1904:	3708      	adds	r7, #8
    1906:	46bd      	mov	sp, r7
    1908:	bd80      	pop	{r7, pc}
    190a:	bf00      	nop
    190c:	00001849 	.word	0x00001849

00001910 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    1910:	b580      	push	{r7, lr}
    1912:	b082      	sub	sp, #8
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	4618      	mov	r0, r3
    191e:	4b03      	ldr	r3, [pc, #12]	; (192c <_usart_sync_is_ready_to_send+0x1c>)
    1920:	4798      	blx	r3
    1922:	4603      	mov	r3, r0
}
    1924:	4618      	mov	r0, r3
    1926:	3708      	adds	r7, #8
    1928:	46bd      	mov	sp, r7
    192a:	bd80      	pop	{r7, pc}
    192c:	000016b9 	.word	0x000016b9

00001930 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    1930:	b580      	push	{r7, lr}
    1932:	b082      	sub	sp, #8
    1934:	af00      	add	r7, sp, #0
    1936:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1938:	687b      	ldr	r3, [r7, #4]
    193a:	681b      	ldr	r3, [r3, #0]
    193c:	4618      	mov	r0, r3
    193e:	4b03      	ldr	r3, [pc, #12]	; (194c <_usart_sync_is_transmit_done+0x1c>)
    1940:	4798      	blx	r3
    1942:	4603      	mov	r3, r0
}
    1944:	4618      	mov	r0, r3
    1946:	3708      	adds	r7, #8
    1948:	46bd      	mov	sp, r7
    194a:	bd80      	pop	{r7, pc}
    194c:	000016e1 	.word	0x000016e1

00001950 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1950:	b580      	push	{r7, lr}
    1952:	b082      	sub	sp, #8
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	681b      	ldr	r3, [r3, #0]
    195c:	4618      	mov	r0, r3
    195e:	4b03      	ldr	r3, [pc, #12]	; (196c <_usart_sync_is_byte_received+0x1c>)
    1960:	4798      	blx	r3
    1962:	4603      	mov	r3, r0
}
    1964:	4618      	mov	r0, r3
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}
    196c:	0000170b 	.word	0x0000170b

00001970 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1970:	b4b0      	push	{r4, r5, r7}
    1972:	b08d      	sub	sp, #52	; 0x34
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1978:	4b13      	ldr	r3, [pc, #76]	; (19c8 <_sercom_get_hardware_index+0x58>)
    197a:	f107 040c 	add.w	r4, r7, #12
    197e:	461d      	mov	r5, r3
    1980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1984:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    198c:	2300      	movs	r3, #0
    198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1990:	e010      	b.n	19b4 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1994:	009b      	lsls	r3, r3, #2
    1996:	f107 0230 	add.w	r2, r7, #48	; 0x30
    199a:	4413      	add	r3, r2
    199c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    19a0:	461a      	mov	r2, r3
    19a2:	687b      	ldr	r3, [r7, #4]
    19a4:	429a      	cmp	r2, r3
    19a6:	d102      	bne.n	19ae <_sercom_get_hardware_index+0x3e>
			return i;
    19a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19aa:	b2db      	uxtb	r3, r3
    19ac:	e006      	b.n	19bc <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19b0:	3301      	adds	r3, #1
    19b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    19b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19b6:	2b07      	cmp	r3, #7
    19b8:	d9eb      	bls.n	1992 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    19ba:	2300      	movs	r3, #0
}
    19bc:	4618      	mov	r0, r3
    19be:	3734      	adds	r7, #52	; 0x34
    19c0:	46bd      	mov	sp, r7
    19c2:	bcb0      	pop	{r4, r5, r7}
    19c4:	4770      	bx	lr
    19c6:	bf00      	nop
    19c8:	000026b0 	.word	0x000026b0

000019cc <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b084      	sub	sp, #16
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    19d4:	6878      	ldr	r0, [r7, #4]
    19d6:	4b12      	ldr	r3, [pc, #72]	; (1a20 <_get_sercom_index+0x54>)
    19d8:	4798      	blx	r3
    19da:	4603      	mov	r3, r0
    19dc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    19de:	2300      	movs	r3, #0
    19e0:	73fb      	strb	r3, [r7, #15]
    19e2:	e00f      	b.n	1a04 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    19e4:	7bfa      	ldrb	r2, [r7, #15]
    19e6:	490f      	ldr	r1, [pc, #60]	; (1a24 <_get_sercom_index+0x58>)
    19e8:	4613      	mov	r3, r2
    19ea:	005b      	lsls	r3, r3, #1
    19ec:	4413      	add	r3, r2
    19ee:	00db      	lsls	r3, r3, #3
    19f0:	440b      	add	r3, r1
    19f2:	781b      	ldrb	r3, [r3, #0]
    19f4:	7bba      	ldrb	r2, [r7, #14]
    19f6:	429a      	cmp	r2, r3
    19f8:	d101      	bne.n	19fe <_get_sercom_index+0x32>
			return i;
    19fa:	7bfb      	ldrb	r3, [r7, #15]
    19fc:	e00c      	b.n	1a18 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    19fe:	7bfb      	ldrb	r3, [r7, #15]
    1a00:	3301      	adds	r3, #1
    1a02:	73fb      	strb	r3, [r7, #15]
    1a04:	7bfb      	ldrb	r3, [r7, #15]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d0ec      	beq.n	19e4 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1a0a:	f240 2247 	movw	r2, #583	; 0x247
    1a0e:	4906      	ldr	r1, [pc, #24]	; (1a28 <_get_sercom_index+0x5c>)
    1a10:	2000      	movs	r0, #0
    1a12:	4b06      	ldr	r3, [pc, #24]	; (1a2c <_get_sercom_index+0x60>)
    1a14:	4798      	blx	r3
	return 0;
    1a16:	2300      	movs	r3, #0
}
    1a18:	4618      	mov	r0, r3
    1a1a:	3710      	adds	r7, #16
    1a1c:	46bd      	mov	sp, r7
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	00001971 	.word	0x00001971
    1a24:	20000000 	.word	0x20000000
    1a28:	00002694 	.word	0x00002694
    1a2c:	0000104d 	.word	0x0000104d

00001a30 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	b084      	sub	sp, #16
    1a34:	af00      	add	r7, sp, #0
    1a36:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1a38:	6878      	ldr	r0, [r7, #4]
    1a3a:	4b61      	ldr	r3, [pc, #388]	; (1bc0 <_usart_init+0x190>)
    1a3c:	4798      	blx	r3
    1a3e:	4603      	mov	r3, r0
    1a40:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1a42:	2101      	movs	r1, #1
    1a44:	6878      	ldr	r0, [r7, #4]
    1a46:	4b5f      	ldr	r3, [pc, #380]	; (1bc4 <_usart_init+0x194>)
    1a48:	4798      	blx	r3
    1a4a:	4603      	mov	r3, r0
    1a4c:	f083 0301 	eor.w	r3, r3, #1
    1a50:	b2db      	uxtb	r3, r3
    1a52:	2b00      	cmp	r3, #0
    1a54:	d020      	beq.n	1a98 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1a56:	7bfa      	ldrb	r2, [r7, #15]
    1a58:	495b      	ldr	r1, [pc, #364]	; (1bc8 <_usart_init+0x198>)
    1a5a:	4613      	mov	r3, r2
    1a5c:	005b      	lsls	r3, r3, #1
    1a5e:	4413      	add	r3, r2
    1a60:	00db      	lsls	r3, r3, #3
    1a62:	440b      	add	r3, r1
    1a64:	3304      	adds	r3, #4
    1a66:	681b      	ldr	r3, [r3, #0]
    1a68:	f003 031c 	and.w	r3, r3, #28
    1a6c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1a6e:	2102      	movs	r1, #2
    1a70:	6878      	ldr	r0, [r7, #4]
    1a72:	4b56      	ldr	r3, [pc, #344]	; (1bcc <_usart_init+0x19c>)
    1a74:	4798      	blx	r3
    1a76:	4603      	mov	r3, r0
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d006      	beq.n	1a8a <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1a7c:	6878      	ldr	r0, [r7, #4]
    1a7e:	4b54      	ldr	r3, [pc, #336]	; (1bd0 <_usart_init+0x1a0>)
    1a80:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1a82:	2102      	movs	r1, #2
    1a84:	6878      	ldr	r0, [r7, #4]
    1a86:	4b53      	ldr	r3, [pc, #332]	; (1bd4 <_usart_init+0x1a4>)
    1a88:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1a8a:	68bb      	ldr	r3, [r7, #8]
    1a8c:	f043 0301 	orr.w	r3, r3, #1
    1a90:	4619      	mov	r1, r3
    1a92:	6878      	ldr	r0, [r7, #4]
    1a94:	4b50      	ldr	r3, [pc, #320]	; (1bd8 <_usart_init+0x1a8>)
    1a96:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1a98:	2101      	movs	r1, #1
    1a9a:	6878      	ldr	r0, [r7, #4]
    1a9c:	4b4d      	ldr	r3, [pc, #308]	; (1bd4 <_usart_init+0x1a4>)
    1a9e:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1aa0:	7bfa      	ldrb	r2, [r7, #15]
    1aa2:	4949      	ldr	r1, [pc, #292]	; (1bc8 <_usart_init+0x198>)
    1aa4:	4613      	mov	r3, r2
    1aa6:	005b      	lsls	r3, r3, #1
    1aa8:	4413      	add	r3, r2
    1aaa:	00db      	lsls	r3, r3, #3
    1aac:	440b      	add	r3, r1
    1aae:	3304      	adds	r3, #4
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	4619      	mov	r1, r3
    1ab4:	6878      	ldr	r0, [r7, #4]
    1ab6:	4b48      	ldr	r3, [pc, #288]	; (1bd8 <_usart_init+0x1a8>)
    1ab8:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1aba:	7bfa      	ldrb	r2, [r7, #15]
    1abc:	4942      	ldr	r1, [pc, #264]	; (1bc8 <_usart_init+0x198>)
    1abe:	4613      	mov	r3, r2
    1ac0:	005b      	lsls	r3, r3, #1
    1ac2:	4413      	add	r3, r2
    1ac4:	00db      	lsls	r3, r3, #3
    1ac6:	440b      	add	r3, r1
    1ac8:	3308      	adds	r3, #8
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	4619      	mov	r1, r3
    1ace:	6878      	ldr	r0, [r7, #4]
    1ad0:	4b42      	ldr	r3, [pc, #264]	; (1bdc <_usart_init+0x1ac>)
    1ad2:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1ad4:	7bfa      	ldrb	r2, [r7, #15]
    1ad6:	493c      	ldr	r1, [pc, #240]	; (1bc8 <_usart_init+0x198>)
    1ad8:	4613      	mov	r3, r2
    1ada:	005b      	lsls	r3, r3, #1
    1adc:	4413      	add	r3, r2
    1ade:	00db      	lsls	r3, r3, #3
    1ae0:	440b      	add	r3, r1
    1ae2:	330c      	adds	r3, #12
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	4619      	mov	r1, r3
    1ae8:	6878      	ldr	r0, [r7, #4]
    1aea:	4b3d      	ldr	r3, [pc, #244]	; (1be0 <_usart_init+0x1b0>)
    1aec:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1aee:	7bfa      	ldrb	r2, [r7, #15]
    1af0:	4935      	ldr	r1, [pc, #212]	; (1bc8 <_usart_init+0x198>)
    1af2:	4613      	mov	r3, r2
    1af4:	005b      	lsls	r3, r3, #1
    1af6:	4413      	add	r3, r2
    1af8:	00db      	lsls	r3, r3, #3
    1afa:	440b      	add	r3, r1
    1afc:	3304      	adds	r3, #4
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1b04:	2b00      	cmp	r3, #0
    1b06:	d10c      	bne.n	1b22 <_usart_init+0xf2>
    1b08:	7bfa      	ldrb	r2, [r7, #15]
    1b0a:	492f      	ldr	r1, [pc, #188]	; (1bc8 <_usart_init+0x198>)
    1b0c:	4613      	mov	r3, r2
    1b0e:	005b      	lsls	r3, r3, #1
    1b10:	4413      	add	r3, r2
    1b12:	00db      	lsls	r3, r3, #3
    1b14:	440b      	add	r3, r1
    1b16:	3304      	adds	r3, #4
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d022      	beq.n	1b68 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1b22:	7bfa      	ldrb	r2, [r7, #15]
    1b24:	4928      	ldr	r1, [pc, #160]	; (1bc8 <_usart_init+0x198>)
    1b26:	4613      	mov	r3, r2
    1b28:	005b      	lsls	r3, r3, #1
    1b2a:	4413      	add	r3, r2
    1b2c:	00db      	lsls	r3, r3, #3
    1b2e:	440b      	add	r3, r1
    1b30:	3310      	adds	r3, #16
    1b32:	881b      	ldrh	r3, [r3, #0]
    1b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1b38:	b299      	uxth	r1, r3
    1b3a:	687a      	ldr	r2, [r7, #4]
    1b3c:	8993      	ldrh	r3, [r2, #12]
    1b3e:	f361 030c 	bfi	r3, r1, #0, #13
    1b42:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1b44:	7bfa      	ldrb	r2, [r7, #15]
    1b46:	4920      	ldr	r1, [pc, #128]	; (1bc8 <_usart_init+0x198>)
    1b48:	4613      	mov	r3, r2
    1b4a:	005b      	lsls	r3, r3, #1
    1b4c:	4413      	add	r3, r2
    1b4e:	00db      	lsls	r3, r3, #3
    1b50:	440b      	add	r3, r1
    1b52:	3312      	adds	r3, #18
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	f003 0307 	and.w	r3, r3, #7
    1b5a:	b2d9      	uxtb	r1, r3
    1b5c:	687a      	ldr	r2, [r7, #4]
    1b5e:	8993      	ldrh	r3, [r2, #12]
    1b60:	f361 334f 	bfi	r3, r1, #13, #3
    1b64:	8193      	strh	r3, [r2, #12]
    1b66:	e00c      	b.n	1b82 <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1b68:	7bfa      	ldrb	r2, [r7, #15]
    1b6a:	4917      	ldr	r1, [pc, #92]	; (1bc8 <_usart_init+0x198>)
    1b6c:	4613      	mov	r3, r2
    1b6e:	005b      	lsls	r3, r3, #1
    1b70:	4413      	add	r3, r2
    1b72:	00db      	lsls	r3, r3, #3
    1b74:	440b      	add	r3, r1
    1b76:	3310      	adds	r3, #16
    1b78:	881b      	ldrh	r3, [r3, #0]
    1b7a:	4619      	mov	r1, r3
    1b7c:	6878      	ldr	r0, [r7, #4]
    1b7e:	4b19      	ldr	r3, [pc, #100]	; (1be4 <_usart_init+0x1b4>)
    1b80:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1b82:	7bfa      	ldrb	r2, [r7, #15]
    1b84:	4910      	ldr	r1, [pc, #64]	; (1bc8 <_usart_init+0x198>)
    1b86:	4613      	mov	r3, r2
    1b88:	005b      	lsls	r3, r3, #1
    1b8a:	4413      	add	r3, r2
    1b8c:	00db      	lsls	r3, r3, #3
    1b8e:	440b      	add	r3, r1
    1b90:	3313      	adds	r3, #19
    1b92:	781b      	ldrb	r3, [r3, #0]
    1b94:	4619      	mov	r1, r3
    1b96:	6878      	ldr	r0, [r7, #4]
    1b98:	4b13      	ldr	r3, [pc, #76]	; (1be8 <_usart_init+0x1b8>)
    1b9a:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1b9c:	7bfa      	ldrb	r2, [r7, #15]
    1b9e:	490a      	ldr	r1, [pc, #40]	; (1bc8 <_usart_init+0x198>)
    1ba0:	4613      	mov	r3, r2
    1ba2:	005b      	lsls	r3, r3, #1
    1ba4:	4413      	add	r3, r2
    1ba6:	00db      	lsls	r3, r3, #3
    1ba8:	440b      	add	r3, r1
    1baa:	3314      	adds	r3, #20
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	4619      	mov	r1, r3
    1bb0:	6878      	ldr	r0, [r7, #4]
    1bb2:	4b0e      	ldr	r3, [pc, #56]	; (1bec <_usart_init+0x1bc>)
    1bb4:	4798      	blx	r3

	return ERR_NONE;
    1bb6:	2300      	movs	r3, #0
}
    1bb8:	4618      	mov	r0, r3
    1bba:	3710      	adds	r7, #16
    1bbc:	46bd      	mov	sp, r7
    1bbe:	bd80      	pop	{r7, pc}
    1bc0:	000019cd 	.word	0x000019cd
    1bc4:	00001691 	.word	0x00001691
    1bc8:	20000000 	.word	0x20000000
    1bcc:	0000175d 	.word	0x0000175d
    1bd0:	00001735 	.word	0x00001735
    1bd4:	0000166d 	.word	0x0000166d
    1bd8:	0000178d 	.word	0x0000178d
    1bdc:	000017b1 	.word	0x000017b1
    1be0:	000017d5 	.word	0x000017d5
    1be4:	000017f1 	.word	0x000017f1
    1be8:	0000180f 	.word	0x0000180f
    1bec:	00001861 	.word	0x00001861

00001bf0 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1bf8:	4b06      	ldr	r3, [pc, #24]	; (1c14 <_system_time_init+0x24>)
    1bfa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1bfe:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <_system_time_init+0x24>)
    1c02:	2205      	movs	r2, #5
    1c04:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1c06:	bf00      	nop
    1c08:	370c      	adds	r7, #12
    1c0a:	46bd      	mov	sp, r7
    1c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c10:	4770      	bx	lr
    1c12:	bf00      	nop
    1c14:	e000e010 	.word	0xe000e010

00001c18 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b082      	sub	sp, #8
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    1c20:	6878      	ldr	r0, [r7, #4]
    1c22:	4b03      	ldr	r3, [pc, #12]	; (1c30 <_delay_init+0x18>)
    1c24:	4798      	blx	r3
}
    1c26:	bf00      	nop
    1c28:	3708      	adds	r7, #8
    1c2a:	46bd      	mov	sp, r7
    1c2c:	bd80      	pop	{r7, pc}
    1c2e:	bf00      	nop
    1c30:	00001bf1 	.word	0x00001bf1

00001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1c34:	b480      	push	{r7}
    1c36:	b083      	sub	sp, #12
    1c38:	af00      	add	r7, sp, #0
    1c3a:	4603      	mov	r3, r0
    1c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c42:	2b00      	cmp	r3, #0
    1c44:	db0b      	blt.n	1c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c46:	4909      	ldr	r1, [pc, #36]	; (1c6c <__NVIC_EnableIRQ+0x38>)
    1c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c4c:	095b      	lsrs	r3, r3, #5
    1c4e:	88fa      	ldrh	r2, [r7, #6]
    1c50:	f002 021f 	and.w	r2, r2, #31
    1c54:	2001      	movs	r0, #1
    1c56:	fa00 f202 	lsl.w	r2, r0, r2
    1c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1c5e:	bf00      	nop
    1c60:	370c      	adds	r7, #12
    1c62:	46bd      	mov	sp, r7
    1c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop
    1c6c:	e000e100 	.word	0xe000e100

00001c70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1c70:	b480      	push	{r7}
    1c72:	b083      	sub	sp, #12
    1c74:	af00      	add	r7, sp, #0
    1c76:	4603      	mov	r3, r0
    1c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c7e:	2b00      	cmp	r3, #0
    1c80:	db10      	blt.n	1ca4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c82:	490b      	ldr	r1, [pc, #44]	; (1cb0 <__NVIC_DisableIRQ+0x40>)
    1c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1c88:	095b      	lsrs	r3, r3, #5
    1c8a:	88fa      	ldrh	r2, [r7, #6]
    1c8c:	f002 021f 	and.w	r2, r2, #31
    1c90:	2001      	movs	r0, #1
    1c92:	fa00 f202 	lsl.w	r2, r0, r2
    1c96:	3320      	adds	r3, #32
    1c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ca0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1ca4:	bf00      	nop
    1ca6:	370c      	adds	r7, #12
    1ca8:	46bd      	mov	sp, r7
    1caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cae:	4770      	bx	lr
    1cb0:	e000e100 	.word	0xe000e100

00001cb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1cb4:	b480      	push	{r7}
    1cb6:	b083      	sub	sp, #12
    1cb8:	af00      	add	r7, sp, #0
    1cba:	4603      	mov	r3, r0
    1cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	db0c      	blt.n	1ce0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cc6:	4909      	ldr	r1, [pc, #36]	; (1cec <__NVIC_ClearPendingIRQ+0x38>)
    1cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1ccc:	095b      	lsrs	r3, r3, #5
    1cce:	88fa      	ldrh	r2, [r7, #6]
    1cd0:	f002 021f 	and.w	r2, r2, #31
    1cd4:	2001      	movs	r0, #1
    1cd6:	fa00 f202 	lsl.w	r2, r0, r2
    1cda:	3360      	adds	r3, #96	; 0x60
    1cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1ce0:	bf00      	nop
    1ce2:	370c      	adds	r7, #12
    1ce4:	46bd      	mov	sp, r7
    1ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cea:	4770      	bx	lr
    1cec:	e000e100 	.word	0xe000e100

00001cf0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    1cf0:	b480      	push	{r7}
    1cf2:	b083      	sub	sp, #12
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
    1cf8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1cfa:	bf00      	nop
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	691a      	ldr	r2, [r3, #16]
    1d00:	683b      	ldr	r3, [r7, #0]
    1d02:	4013      	ands	r3, r2
    1d04:	2b00      	cmp	r3, #0
    1d06:	d1f9      	bne.n	1cfc <hri_tc_wait_for_sync+0xc>
	};
}
    1d08:	bf00      	nop
    1d0a:	370c      	adds	r7, #12
    1d0c:	46bd      	mov	sp, r7
    1d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d12:	4770      	bx	lr

00001d14 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    1d14:	b480      	push	{r7}
    1d16:	b083      	sub	sp, #12
    1d18:	af00      	add	r7, sp, #0
    1d1a:	6078      	str	r0, [r7, #4]
    1d1c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	691a      	ldr	r2, [r3, #16]
    1d22:	683b      	ldr	r3, [r7, #0]
    1d24:	4013      	ands	r3, r2
    1d26:	2b00      	cmp	r3, #0
    1d28:	bf14      	ite	ne
    1d2a:	2301      	movne	r3, #1
    1d2c:	2300      	moveq	r3, #0
    1d2e:	b2db      	uxtb	r3, r3
}
    1d30:	4618      	mov	r0, r3
    1d32:	370c      	adds	r7, #12
    1d34:	46bd      	mov	sp, r7
    1d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d3a:	4770      	bx	lr

00001d3c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    1d3c:	b480      	push	{r7}
    1d3e:	b083      	sub	sp, #12
    1d40:	af00      	add	r7, sp, #0
    1d42:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	7a9b      	ldrb	r3, [r3, #10]
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	f003 0301 	and.w	r3, r3, #1
    1d4e:	2b00      	cmp	r3, #0
    1d50:	bf14      	ite	ne
    1d52:	2301      	movne	r3, #1
    1d54:	2300      	moveq	r3, #0
    1d56:	b2db      	uxtb	r3, r3
}
    1d58:	4618      	mov	r0, r3
    1d5a:	370c      	adds	r7, #12
    1d5c:	46bd      	mov	sp, r7
    1d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d62:	4770      	bx	lr

00001d64 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    1d64:	b480      	push	{r7}
    1d66:	b083      	sub	sp, #12
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	2201      	movs	r2, #1
    1d70:	729a      	strb	r2, [r3, #10]
}
    1d72:	bf00      	nop
    1d74:	370c      	adds	r7, #12
    1d76:	46bd      	mov	sp, r7
    1d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d7c:	4770      	bx	lr

00001d7e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    1d7e:	b480      	push	{r7}
    1d80:	b083      	sub	sp, #12
    1d82:	af00      	add	r7, sp, #0
    1d84:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	2202      	movs	r2, #2
    1d8a:	729a      	strb	r2, [r3, #10]
}
    1d8c:	bf00      	nop
    1d8e:	370c      	adds	r7, #12
    1d90:	46bd      	mov	sp, r7
    1d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d96:	4770      	bx	lr

00001d98 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    1d98:	b480      	push	{r7}
    1d9a:	b083      	sub	sp, #12
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	7a5b      	ldrb	r3, [r3, #9]
    1da4:	b2db      	uxtb	r3, r3
    1da6:	085b      	lsrs	r3, r3, #1
    1da8:	f003 0301 	and.w	r3, r3, #1
    1dac:	2b00      	cmp	r3, #0
    1dae:	bf14      	ite	ne
    1db0:	2301      	movne	r3, #1
    1db2:	2300      	moveq	r3, #0
    1db4:	b2db      	uxtb	r3, r3
}
    1db6:	4618      	mov	r0, r3
    1db8:	370c      	adds	r7, #12
    1dba:	46bd      	mov	sp, r7
    1dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dc0:	4770      	bx	lr
	...

00001dc4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	f023 0202 	bic.w	r2, r3, #2
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    1dd8:	2103      	movs	r1, #3
    1dda:	6878      	ldr	r0, [r7, #4]
    1ddc:	4b02      	ldr	r3, [pc, #8]	; (1de8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    1dde:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    1de0:	bf00      	nop
    1de2:	3708      	adds	r7, #8
    1de4:	46bd      	mov	sp, r7
    1de6:	bd80      	pop	{r7, pc}
    1de8:	00001cf1 	.word	0x00001cf1

00001dec <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    1dec:	b580      	push	{r7, lr}
    1dee:	b084      	sub	sp, #16
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    1df6:	2103      	movs	r1, #3
    1df8:	6878      	ldr	r0, [r7, #4]
    1dfa:	4b07      	ldr	r3, [pc, #28]	; (1e18 <hri_tc_get_CTRLA_reg+0x2c>)
    1dfc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	681b      	ldr	r3, [r3, #0]
    1e02:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1e04:	68fa      	ldr	r2, [r7, #12]
    1e06:	683b      	ldr	r3, [r7, #0]
    1e08:	4013      	ands	r3, r2
    1e0a:	60fb      	str	r3, [r7, #12]
	return tmp;
    1e0c:	68fb      	ldr	r3, [r7, #12]
}
    1e0e:	4618      	mov	r0, r3
    1e10:	3710      	adds	r7, #16
    1e12:	46bd      	mov	sp, r7
    1e14:	bd80      	pop	{r7, pc}
    1e16:	bf00      	nop
    1e18:	00001cf1 	.word	0x00001cf1

00001e1c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b082      	sub	sp, #8
    1e20:	af00      	add	r7, sp, #0
    1e22:	6078      	str	r0, [r7, #4]
    1e24:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	683a      	ldr	r2, [r7, #0]
    1e2a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    1e2c:	2103      	movs	r1, #3
    1e2e:	6878      	ldr	r0, [r7, #4]
    1e30:	4b02      	ldr	r3, [pc, #8]	; (1e3c <hri_tc_write_CTRLA_reg+0x20>)
    1e32:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    1e34:	bf00      	nop
    1e36:	3708      	adds	r7, #8
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	00001cf1 	.word	0x00001cf1

00001e40 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    1e40:	b480      	push	{r7}
    1e42:	b083      	sub	sp, #12
    1e44:	af00      	add	r7, sp, #0
    1e46:	6078      	str	r0, [r7, #4]
    1e48:	460b      	mov	r3, r1
    1e4a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	887a      	ldrh	r2, [r7, #2]
    1e50:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    1e52:	bf00      	nop
    1e54:	370c      	adds	r7, #12
    1e56:	46bd      	mov	sp, r7
    1e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e5c:	4770      	bx	lr

00001e5e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    1e5e:	b480      	push	{r7}
    1e60:	b083      	sub	sp, #12
    1e62:	af00      	add	r7, sp, #0
    1e64:	6078      	str	r0, [r7, #4]
    1e66:	460b      	mov	r3, r1
    1e68:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	78fa      	ldrb	r2, [r7, #3]
    1e6e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    1e70:	bf00      	nop
    1e72:	370c      	adds	r7, #12
    1e74:	46bd      	mov	sp, r7
    1e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e7a:	4770      	bx	lr

00001e7c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b083      	sub	sp, #12
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
    1e84:	460b      	mov	r3, r1
    1e86:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	78fa      	ldrb	r2, [r7, #3]
    1e8c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    1e8e:	bf00      	nop
    1e90:	370c      	adds	r7, #12
    1e92:	46bd      	mov	sp, r7
    1e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e98:	4770      	bx	lr
	...

00001e9c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b082      	sub	sp, #8
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	70fb      	strb	r3, [r7, #3]
    1ea8:	4613      	mov	r3, r2
    1eaa:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1eac:	78fb      	ldrb	r3, [r7, #3]
    1eae:	687a      	ldr	r2, [r7, #4]
    1eb0:	330c      	adds	r3, #12
    1eb2:	005b      	lsls	r3, r3, #1
    1eb4:	4413      	add	r3, r2
    1eb6:	883a      	ldrh	r2, [r7, #0]
    1eb8:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    1eba:	21c0      	movs	r1, #192	; 0xc0
    1ebc:	6878      	ldr	r0, [r7, #4]
    1ebe:	4b03      	ldr	r3, [pc, #12]	; (1ecc <hri_tccount16_write_CC_reg+0x30>)
    1ec0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    1ec2:	bf00      	nop
    1ec4:	3708      	adds	r7, #8
    1ec6:	46bd      	mov	sp, r7
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	bf00      	nop
    1ecc:	00001cf1 	.word	0x00001cf1

00001ed0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    1ed0:	b580      	push	{r7, lr}
    1ed2:	b084      	sub	sp, #16
    1ed4:	af00      	add	r7, sp, #0
    1ed6:	60f8      	str	r0, [r7, #12]
    1ed8:	460b      	mov	r3, r1
    1eda:	607a      	str	r2, [r7, #4]
    1edc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1ede:	7afb      	ldrb	r3, [r7, #11]
    1ee0:	68fa      	ldr	r2, [r7, #12]
    1ee2:	3306      	adds	r3, #6
    1ee4:	009b      	lsls	r3, r3, #2
    1ee6:	4413      	add	r3, r2
    1ee8:	687a      	ldr	r2, [r7, #4]
    1eea:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    1eec:	21c0      	movs	r1, #192	; 0xc0
    1eee:	68f8      	ldr	r0, [r7, #12]
    1ef0:	4b02      	ldr	r3, [pc, #8]	; (1efc <hri_tccount32_write_CC_reg+0x2c>)
    1ef2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    1ef4:	bf00      	nop
    1ef6:	3710      	adds	r7, #16
    1ef8:	46bd      	mov	sp, r7
    1efa:	bd80      	pop	{r7, pc}
    1efc:	00001cf1 	.word	0x00001cf1

00001f00 <_pwm_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    1f00:	b580      	push	{r7, lr}
    1f02:	b084      	sub	sp, #16
    1f04:	af00      	add	r7, sp, #0
    1f06:	6078      	str	r0, [r7, #4]
    1f08:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    1f0a:	6838      	ldr	r0, [r7, #0]
    1f0c:	4b73      	ldr	r3, [pc, #460]	; (20dc <_pwm_init+0x1dc>)
    1f0e:	4798      	blx	r3
    1f10:	4603      	mov	r3, r0
    1f12:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	683a      	ldr	r2, [r7, #0]
    1f18:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1f1a:	2101      	movs	r1, #1
    1f1c:	6838      	ldr	r0, [r7, #0]
    1f1e:	4b70      	ldr	r3, [pc, #448]	; (20e0 <_pwm_init+0x1e0>)
    1f20:	4798      	blx	r3
    1f22:	4603      	mov	r3, r0
    1f24:	f083 0301 	eor.w	r3, r3, #1
    1f28:	b2db      	uxtb	r3, r3
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d011      	beq.n	1f52 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1f2e:	2102      	movs	r1, #2
    1f30:	6838      	ldr	r0, [r7, #0]
    1f32:	4b6c      	ldr	r3, [pc, #432]	; (20e4 <_pwm_init+0x1e4>)
    1f34:	4798      	blx	r3
    1f36:	4603      	mov	r3, r0
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d006      	beq.n	1f4a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    1f3c:	6838      	ldr	r0, [r7, #0]
    1f3e:	4b6a      	ldr	r3, [pc, #424]	; (20e8 <_pwm_init+0x1e8>)
    1f40:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    1f42:	2102      	movs	r1, #2
    1f44:	6838      	ldr	r0, [r7, #0]
    1f46:	4b69      	ldr	r3, [pc, #420]	; (20ec <_pwm_init+0x1ec>)
    1f48:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    1f4a:	2101      	movs	r1, #1
    1f4c:	6838      	ldr	r0, [r7, #0]
    1f4e:	4b68      	ldr	r3, [pc, #416]	; (20f0 <_pwm_init+0x1f0>)
    1f50:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    1f52:	2101      	movs	r1, #1
    1f54:	6838      	ldr	r0, [r7, #0]
    1f56:	4b65      	ldr	r3, [pc, #404]	; (20ec <_pwm_init+0x1ec>)
    1f58:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1f5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1f5e:	4965      	ldr	r1, [pc, #404]	; (20f4 <_pwm_init+0x1f4>)
    1f60:	4613      	mov	r3, r2
    1f62:	009b      	lsls	r3, r3, #2
    1f64:	4413      	add	r3, r2
    1f66:	009b      	lsls	r3, r3, #2
    1f68:	440b      	add	r3, r1
    1f6a:	3304      	adds	r3, #4
    1f6c:	681b      	ldr	r3, [r3, #0]
    1f6e:	4619      	mov	r1, r3
    1f70:	6838      	ldr	r0, [r7, #0]
    1f72:	4b5f      	ldr	r3, [pc, #380]	; (20f0 <_pwm_init+0x1f0>)
    1f74:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1f76:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1f7a:	495e      	ldr	r1, [pc, #376]	; (20f4 <_pwm_init+0x1f4>)
    1f7c:	4613      	mov	r3, r2
    1f7e:	009b      	lsls	r3, r3, #2
    1f80:	4413      	add	r3, r2
    1f82:	009b      	lsls	r3, r3, #2
    1f84:	440b      	add	r3, r1
    1f86:	330a      	adds	r3, #10
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	4619      	mov	r1, r3
    1f8c:	6838      	ldr	r0, [r7, #0]
    1f8e:	4b5a      	ldr	r3, [pc, #360]	; (20f8 <_pwm_init+0x1f8>)
    1f90:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1f92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1f96:	4957      	ldr	r1, [pc, #348]	; (20f4 <_pwm_init+0x1f4>)
    1f98:	4613      	mov	r3, r2
    1f9a:	009b      	lsls	r3, r3, #2
    1f9c:	4413      	add	r3, r2
    1f9e:	009b      	lsls	r3, r3, #2
    1fa0:	440b      	add	r3, r1
    1fa2:	3308      	adds	r3, #8
    1fa4:	881b      	ldrh	r3, [r3, #0]
    1fa6:	4619      	mov	r1, r3
    1fa8:	6838      	ldr	r0, [r7, #0]
    1faa:	4b54      	ldr	r3, [pc, #336]	; (20fc <_pwm_init+0x1fc>)
    1fac:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    1fae:	2103      	movs	r1, #3
    1fb0:	6838      	ldr	r0, [r7, #0]
    1fb2:	4b53      	ldr	r3, [pc, #332]	; (2100 <_pwm_init+0x200>)
    1fb4:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1fb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1fba:	494e      	ldr	r1, [pc, #312]	; (20f4 <_pwm_init+0x1f4>)
    1fbc:	4613      	mov	r3, r2
    1fbe:	009b      	lsls	r3, r3, #2
    1fc0:	4413      	add	r3, r2
    1fc2:	009b      	lsls	r3, r3, #2
    1fc4:	440b      	add	r3, r1
    1fc6:	3304      	adds	r3, #4
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	f003 030c 	and.w	r3, r3, #12
    1fce:	2b08      	cmp	r3, #8
    1fd0:	d11e      	bne.n	2010 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1fd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1fd6:	4947      	ldr	r1, [pc, #284]	; (20f4 <_pwm_init+0x1f4>)
    1fd8:	4613      	mov	r3, r2
    1fda:	009b      	lsls	r3, r3, #2
    1fdc:	4413      	add	r3, r2
    1fde:	009b      	lsls	r3, r3, #2
    1fe0:	440b      	add	r3, r1
    1fe2:	330c      	adds	r3, #12
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	461a      	mov	r2, r3
    1fe8:	2100      	movs	r1, #0
    1fea:	6838      	ldr	r0, [r7, #0]
    1fec:	4b45      	ldr	r3, [pc, #276]	; (2104 <_pwm_init+0x204>)
    1fee:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1ff0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1ff4:	493f      	ldr	r1, [pc, #252]	; (20f4 <_pwm_init+0x1f4>)
    1ff6:	4613      	mov	r3, r2
    1ff8:	009b      	lsls	r3, r3, #2
    1ffa:	4413      	add	r3, r2
    1ffc:	009b      	lsls	r3, r3, #2
    1ffe:	440b      	add	r3, r1
    2000:	3310      	adds	r3, #16
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	461a      	mov	r2, r3
    2006:	2101      	movs	r1, #1
    2008:	6838      	ldr	r0, [r7, #0]
    200a:	4b3e      	ldr	r3, [pc, #248]	; (2104 <_pwm_init+0x204>)
    200c:	4798      	blx	r3
    200e:	e031      	b.n	2074 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2010:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2014:	4937      	ldr	r1, [pc, #220]	; (20f4 <_pwm_init+0x1f4>)
    2016:	4613      	mov	r3, r2
    2018:	009b      	lsls	r3, r3, #2
    201a:	4413      	add	r3, r2
    201c:	009b      	lsls	r3, r3, #2
    201e:	440b      	add	r3, r1
    2020:	3304      	adds	r3, #4
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	f003 030c 	and.w	r3, r3, #12
    2028:	2b00      	cmp	r3, #0
    202a:	d120      	bne.n	206e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    202c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2030:	4930      	ldr	r1, [pc, #192]	; (20f4 <_pwm_init+0x1f4>)
    2032:	4613      	mov	r3, r2
    2034:	009b      	lsls	r3, r3, #2
    2036:	4413      	add	r3, r2
    2038:	009b      	lsls	r3, r3, #2
    203a:	440b      	add	r3, r1
    203c:	330c      	adds	r3, #12
    203e:	681b      	ldr	r3, [r3, #0]
    2040:	b29b      	uxth	r3, r3
    2042:	461a      	mov	r2, r3
    2044:	2100      	movs	r1, #0
    2046:	6838      	ldr	r0, [r7, #0]
    2048:	4b2f      	ldr	r3, [pc, #188]	; (2108 <_pwm_init+0x208>)
    204a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    204c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2050:	4928      	ldr	r1, [pc, #160]	; (20f4 <_pwm_init+0x1f4>)
    2052:	4613      	mov	r3, r2
    2054:	009b      	lsls	r3, r3, #2
    2056:	4413      	add	r3, r2
    2058:	009b      	lsls	r3, r3, #2
    205a:	440b      	add	r3, r1
    205c:	3310      	adds	r3, #16
    205e:	681b      	ldr	r3, [r3, #0]
    2060:	b29b      	uxth	r3, r3
    2062:	461a      	mov	r2, r3
    2064:	2101      	movs	r1, #1
    2066:	6838      	ldr	r0, [r7, #0]
    2068:	4b27      	ldr	r3, [pc, #156]	; (2108 <_pwm_init+0x208>)
    206a:	4798      	blx	r3
    206c:	e002      	b.n	2074 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    206e:	f04f 33ff 	mov.w	r3, #4294967295
    2072:	e02e      	b.n	20d2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    2074:	6879      	ldr	r1, [r7, #4]
    2076:	6838      	ldr	r0, [r7, #0]
    2078:	4b24      	ldr	r3, [pc, #144]	; (210c <_pwm_init+0x20c>)
    207a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    207c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2080:	491c      	ldr	r1, [pc, #112]	; (20f4 <_pwm_init+0x1f4>)
    2082:	4613      	mov	r3, r2
    2084:	009b      	lsls	r3, r3, #2
    2086:	4413      	add	r3, r2
    2088:	009b      	lsls	r3, r3, #2
    208a:	440b      	add	r3, r1
    208c:	3302      	adds	r3, #2
    208e:	f9b3 3000 	ldrsh.w	r3, [r3]
    2092:	4618      	mov	r0, r3
    2094:	4b1e      	ldr	r3, [pc, #120]	; (2110 <_pwm_init+0x210>)
    2096:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2098:	f997 200f 	ldrsb.w	r2, [r7, #15]
    209c:	4915      	ldr	r1, [pc, #84]	; (20f4 <_pwm_init+0x1f4>)
    209e:	4613      	mov	r3, r2
    20a0:	009b      	lsls	r3, r3, #2
    20a2:	4413      	add	r3, r2
    20a4:	009b      	lsls	r3, r3, #2
    20a6:	440b      	add	r3, r1
    20a8:	3302      	adds	r3, #2
    20aa:	f9b3 3000 	ldrsh.w	r3, [r3]
    20ae:	4618      	mov	r0, r3
    20b0:	4b18      	ldr	r3, [pc, #96]	; (2114 <_pwm_init+0x214>)
    20b2:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    20b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    20b8:	490e      	ldr	r1, [pc, #56]	; (20f4 <_pwm_init+0x1f4>)
    20ba:	4613      	mov	r3, r2
    20bc:	009b      	lsls	r3, r3, #2
    20be:	4413      	add	r3, r2
    20c0:	009b      	lsls	r3, r3, #2
    20c2:	440b      	add	r3, r1
    20c4:	3302      	adds	r3, #2
    20c6:	f9b3 3000 	ldrsh.w	r3, [r3]
    20ca:	4618      	mov	r0, r3
    20cc:	4b12      	ldr	r3, [pc, #72]	; (2118 <_pwm_init+0x218>)
    20ce:	4798      	blx	r3

	return 0;
    20d0:	2300      	movs	r3, #0
}
    20d2:	4618      	mov	r0, r3
    20d4:	3710      	adds	r7, #16
    20d6:	46bd      	mov	sp, r7
    20d8:	bd80      	pop	{r7, pc}
    20da:	bf00      	nop
    20dc:	000021b5 	.word	0x000021b5
    20e0:	00001d15 	.word	0x00001d15
    20e4:	00001ded 	.word	0x00001ded
    20e8:	00001dc5 	.word	0x00001dc5
    20ec:	00001cf1 	.word	0x00001cf1
    20f0:	00001e1d 	.word	0x00001e1d
    20f4:	20000018 	.word	0x20000018
    20f8:	00001e7d 	.word	0x00001e7d
    20fc:	00001e41 	.word	0x00001e41
    2100:	00001e5f 	.word	0x00001e5f
    2104:	00001ed1 	.word	0x00001ed1
    2108:	00001e9d 	.word	0x00001e9d
    210c:	0000221d 	.word	0x0000221d
    2110:	00001c71 	.word	0x00001c71
    2114:	00001cb5 	.word	0x00001cb5
    2118:	00001c35 	.word	0x00001c35

0000211c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    211c:	b480      	push	{r7}
    211e:	af00      	add	r7, sp, #0
	return NULL;
    2120:	2300      	movs	r3, #0
}
    2122:	4618      	mov	r0, r3
    2124:	46bd      	mov	sp, r7
    2126:	f85d 7b04 	ldr.w	r7, [sp], #4
    212a:	4770      	bx	lr

0000212c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    212c:	b580      	push	{r7, lr}
    212e:	b084      	sub	sp, #16
    2130:	af00      	add	r7, sp, #0
    2132:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	691b      	ldr	r3, [r3, #16]
    2138:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    213a:	68f8      	ldr	r0, [r7, #12]
    213c:	4b12      	ldr	r3, [pc, #72]	; (2188 <tc_pwm_interrupt_handler+0x5c>)
    213e:	4798      	blx	r3
    2140:	4603      	mov	r3, r0
    2142:	2b00      	cmp	r3, #0
    2144:	d00a      	beq.n	215c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    2146:	68f8      	ldr	r0, [r7, #12]
    2148:	4b10      	ldr	r3, [pc, #64]	; (218c <tc_pwm_interrupt_handler+0x60>)
    214a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d003      	beq.n	215c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	6878      	ldr	r0, [r7, #4]
    215a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    215c:	68f8      	ldr	r0, [r7, #12]
    215e:	4b0c      	ldr	r3, [pc, #48]	; (2190 <tc_pwm_interrupt_handler+0x64>)
    2160:	4798      	blx	r3
    2162:	4603      	mov	r3, r0
    2164:	2b00      	cmp	r3, #0
    2166:	d00a      	beq.n	217e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    2168:	68f8      	ldr	r0, [r7, #12]
    216a:	4b0a      	ldr	r3, [pc, #40]	; (2194 <tc_pwm_interrupt_handler+0x68>)
    216c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	685b      	ldr	r3, [r3, #4]
    2172:	2b00      	cmp	r3, #0
    2174:	d003      	beq.n	217e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	685b      	ldr	r3, [r3, #4]
    217a:	6878      	ldr	r0, [r7, #4]
    217c:	4798      	blx	r3
		}
	}
}
    217e:	bf00      	nop
    2180:	3710      	adds	r7, #16
    2182:	46bd      	mov	sp, r7
    2184:	bd80      	pop	{r7, pc}
    2186:	bf00      	nop
    2188:	00001d3d 	.word	0x00001d3d
    218c:	00001d65 	.word	0x00001d65
    2190:	00001d99 	.word	0x00001d99
    2194:	00001d7f 	.word	0x00001d7f

00002198 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    2198:	b580      	push	{r7, lr}
    219a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc0_dev);
    219c:	4b03      	ldr	r3, [pc, #12]	; (21ac <TC0_Handler+0x14>)
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	4618      	mov	r0, r3
    21a2:	4b03      	ldr	r3, [pc, #12]	; (21b0 <TC0_Handler+0x18>)
    21a4:	4798      	blx	r3
}
    21a6:	bf00      	nop
    21a8:	bd80      	pop	{r7, pc}
    21aa:	bf00      	nop
    21ac:	20000050 	.word	0x20000050
    21b0:	0000212d 	.word	0x0000212d

000021b4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	b084      	sub	sp, #16
    21b8:	af00      	add	r7, sp, #0
    21ba:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    21bc:	6878      	ldr	r0, [r7, #4]
    21be:	4b13      	ldr	r3, [pc, #76]	; (220c <get_tc_index+0x58>)
    21c0:	4798      	blx	r3
    21c2:	4603      	mov	r3, r0
    21c4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    21c6:	2300      	movs	r3, #0
    21c8:	73fb      	strb	r3, [r7, #15]
    21ca:	e010      	b.n	21ee <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    21cc:	7bfa      	ldrb	r2, [r7, #15]
    21ce:	4910      	ldr	r1, [pc, #64]	; (2210 <get_tc_index+0x5c>)
    21d0:	4613      	mov	r3, r2
    21d2:	009b      	lsls	r3, r3, #2
    21d4:	4413      	add	r3, r2
    21d6:	009b      	lsls	r3, r3, #2
    21d8:	440b      	add	r3, r1
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	7bba      	ldrb	r2, [r7, #14]
    21de:	429a      	cmp	r2, r3
    21e0:	d102      	bne.n	21e8 <get_tc_index+0x34>
			return i;
    21e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    21e6:	e00d      	b.n	2204 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    21e8:	7bfb      	ldrb	r3, [r7, #15]
    21ea:	3301      	adds	r3, #1
    21ec:	73fb      	strb	r3, [r7, #15]
    21ee:	7bfb      	ldrb	r3, [r7, #15]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d0eb      	beq.n	21cc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    21f4:	f44f 72a9 	mov.w	r2, #338	; 0x152
    21f8:	4906      	ldr	r1, [pc, #24]	; (2214 <get_tc_index+0x60>)
    21fa:	2000      	movs	r0, #0
    21fc:	4b06      	ldr	r3, [pc, #24]	; (2218 <get_tc_index+0x64>)
    21fe:	4798      	blx	r3
	return -1;
    2200:	f04f 33ff 	mov.w	r3, #4294967295
}
    2204:	4618      	mov	r0, r3
    2206:	3710      	adds	r7, #16
    2208:	46bd      	mov	sp, r7
    220a:	bd80      	pop	{r7, pc}
    220c:	00002249 	.word	0x00002249
    2210:	20000018 	.word	0x20000018
    2214:	000026e4 	.word	0x000026e4
    2218:	0000104d 	.word	0x0000104d

0000221c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    221c:	b480      	push	{r7}
    221e:	b083      	sub	sp, #12
    2220:	af00      	add	r7, sp, #0
    2222:	6078      	str	r0, [r7, #4]
    2224:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	4a05      	ldr	r2, [pc, #20]	; (2240 <_tc_init_irq_param+0x24>)
    222a:	4293      	cmp	r3, r2
    222c:	d102      	bne.n	2234 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _pwm_device *)dev;
    222e:	4a05      	ldr	r2, [pc, #20]	; (2244 <_tc_init_irq_param+0x28>)
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	6013      	str	r3, [r2, #0]
	}
}
    2234:	bf00      	nop
    2236:	370c      	adds	r7, #12
    2238:	46bd      	mov	sp, r7
    223a:	f85d 7b04 	ldr.w	r7, [sp], #4
    223e:	4770      	bx	lr
    2240:	40003800 	.word	0x40003800
    2244:	20000050 	.word	0x20000050

00002248 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    2248:	b4b0      	push	{r4, r5, r7}
    224a:	b08d      	sub	sp, #52	; 0x34
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2250:	4b13      	ldr	r3, [pc, #76]	; (22a0 <_get_hardware_offset+0x58>)
    2252:	f107 040c 	add.w	r4, r7, #12
    2256:	461d      	mov	r5, r3
    2258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    225a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    225c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2264:	2300      	movs	r3, #0
    2266:	62fb      	str	r3, [r7, #44]	; 0x2c
    2268:	e010      	b.n	228c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    226c:	009b      	lsls	r3, r3, #2
    226e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2272:	4413      	add	r3, r2
    2274:	f853 3c24 	ldr.w	r3, [r3, #-36]
    2278:	461a      	mov	r2, r3
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	429a      	cmp	r2, r3
    227e:	d102      	bne.n	2286 <_get_hardware_offset+0x3e>
			return i;
    2280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2282:	b2db      	uxtb	r3, r3
    2284:	e006      	b.n	2294 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2288:	3301      	adds	r3, #1
    228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    228e:	2b07      	cmp	r3, #7
    2290:	d9eb      	bls.n	226a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    2292:	2300      	movs	r3, #0
}
    2294:	4618      	mov	r0, r3
    2296:	3734      	adds	r7, #52	; 0x34
    2298:	46bd      	mov	sp, r7
    229a:	bcb0      	pop	{r4, r5, r7}
    229c:	4770      	bx	lr
    229e:	bf00      	nop
    22a0:	000026f8 	.word	0x000026f8

000022a4 <hri_port_set_OUT_reg>:
{
    22a4:	b480      	push	{r7}
    22a6:	b085      	sub	sp, #20
    22a8:	af00      	add	r7, sp, #0
    22aa:	60f8      	str	r0, [r7, #12]
    22ac:	460b      	mov	r3, r1
    22ae:	607a      	str	r2, [r7, #4]
    22b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22b2:	7afb      	ldrb	r3, [r7, #11]
    22b4:	68fa      	ldr	r2, [r7, #12]
    22b6:	01db      	lsls	r3, r3, #7
    22b8:	4413      	add	r3, r2
    22ba:	3318      	adds	r3, #24
    22bc:	687a      	ldr	r2, [r7, #4]
    22be:	601a      	str	r2, [r3, #0]
}
    22c0:	bf00      	nop
    22c2:	3714      	adds	r7, #20
    22c4:	46bd      	mov	sp, r7
    22c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    22ca:	4770      	bx	lr

000022cc <hri_port_clear_OUT_reg>:
{
    22cc:	b480      	push	{r7}
    22ce:	b085      	sub	sp, #20
    22d0:	af00      	add	r7, sp, #0
    22d2:	60f8      	str	r0, [r7, #12]
    22d4:	460b      	mov	r3, r1
    22d6:	607a      	str	r2, [r7, #4]
    22d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22da:	7afb      	ldrb	r3, [r7, #11]
    22dc:	68fa      	ldr	r2, [r7, #12]
    22de:	01db      	lsls	r3, r3, #7
    22e0:	4413      	add	r3, r2
    22e2:	3314      	adds	r3, #20
    22e4:	687a      	ldr	r2, [r7, #4]
    22e6:	601a      	str	r2, [r3, #0]
}
    22e8:	bf00      	nop
    22ea:	3714      	adds	r7, #20
    22ec:	46bd      	mov	sp, r7
    22ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f2:	4770      	bx	lr

000022f4 <_gpio_set_level>:
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b082      	sub	sp, #8
    22f8:	af00      	add	r7, sp, #0
    22fa:	4603      	mov	r3, r0
    22fc:	6039      	str	r1, [r7, #0]
    22fe:	71fb      	strb	r3, [r7, #7]
    2300:	4613      	mov	r3, r2
    2302:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2304:	79bb      	ldrb	r3, [r7, #6]
    2306:	2b00      	cmp	r3, #0
    2308:	d006      	beq.n	2318 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    230a:	79fb      	ldrb	r3, [r7, #7]
    230c:	683a      	ldr	r2, [r7, #0]
    230e:	4619      	mov	r1, r3
    2310:	4806      	ldr	r0, [pc, #24]	; (232c <_gpio_set_level+0x38>)
    2312:	4b07      	ldr	r3, [pc, #28]	; (2330 <_gpio_set_level+0x3c>)
    2314:	4798      	blx	r3
}
    2316:	e005      	b.n	2324 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2318:	79fb      	ldrb	r3, [r7, #7]
    231a:	683a      	ldr	r2, [r7, #0]
    231c:	4619      	mov	r1, r3
    231e:	4803      	ldr	r0, [pc, #12]	; (232c <_gpio_set_level+0x38>)
    2320:	4b04      	ldr	r3, [pc, #16]	; (2334 <_gpio_set_level+0x40>)
    2322:	4798      	blx	r3
}
    2324:	bf00      	nop
    2326:	3708      	adds	r7, #8
    2328:	46bd      	mov	sp, r7
    232a:	bd80      	pop	{r7, pc}
    232c:	41008000 	.word	0x41008000
    2330:	000022a5 	.word	0x000022a5
    2334:	000022cd 	.word	0x000022cd

00002338 <gpio_set_pin_level>:
{
    2338:	b580      	push	{r7, lr}
    233a:	b082      	sub	sp, #8
    233c:	af00      	add	r7, sp, #0
    233e:	4603      	mov	r3, r0
    2340:	460a      	mov	r2, r1
    2342:	71fb      	strb	r3, [r7, #7]
    2344:	4613      	mov	r3, r2
    2346:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2348:	79fb      	ldrb	r3, [r7, #7]
    234a:	095b      	lsrs	r3, r3, #5
    234c:	b2d8      	uxtb	r0, r3
    234e:	79fb      	ldrb	r3, [r7, #7]
    2350:	f003 031f 	and.w	r3, r3, #31
    2354:	2201      	movs	r2, #1
    2356:	fa02 f303 	lsl.w	r3, r2, r3
    235a:	79ba      	ldrb	r2, [r7, #6]
    235c:	4619      	mov	r1, r3
    235e:	4b03      	ldr	r3, [pc, #12]	; (236c <gpio_set_pin_level+0x34>)
    2360:	4798      	blx	r3
}
    2362:	bf00      	nop
    2364:	3708      	adds	r7, #8
    2366:	46bd      	mov	sp, r7
    2368:	bd80      	pop	{r7, pc}
    236a:	bf00      	nop
    236c:	000022f5 	.word	0x000022f5

00002370 <HandleEvent>:
#include <atmel_start.h>

bool HandleEvent(bool bit_entered){
    2370:	b480      	push	{r7}
    2372:	b087      	sub	sp, #28
    2374:	af00      	add	r7, sp, #0
    2376:	4603      	mov	r3, r0
    2378:	71fb      	strb	r3, [r7, #7]
	
	static char CurrentState = 0;
	static bool output = 0; //if 1 LED on, if 0 LED off
	
	bool on_pattern[] = {0,1,0,1,1};
    237a:	4a48      	ldr	r2, [pc, #288]	; (249c <HandleEvent+0x12c>)
    237c:	f107 0310 	add.w	r3, r7, #16
    2380:	e892 0003 	ldmia.w	r2, {r0, r1}
    2384:	6018      	str	r0, [r3, #0]
    2386:	3304      	adds	r3, #4
    2388:	7019      	strb	r1, [r3, #0]
	bool off_pattern[] = {0,1,1,0,1};
    238a:	4a45      	ldr	r2, [pc, #276]	; (24a0 <HandleEvent+0x130>)
    238c:	f107 0308 	add.w	r3, r7, #8
    2390:	e892 0003 	ldmia.w	r2, {r0, r1}
    2394:	6018      	str	r0, [r3, #0]
    2396:	3304      	adds	r3, #4
    2398:	7019      	strb	r1, [r3, #0]
		
	switch (CurrentState){
    239a:	4b42      	ldr	r3, [pc, #264]	; (24a4 <HandleEvent+0x134>)
    239c:	781b      	ldrb	r3, [r3, #0]
    239e:	2b06      	cmp	r3, #6
    23a0:	d873      	bhi.n	248a <HandleEvent+0x11a>
    23a2:	a201      	add	r2, pc, #4	; (adr r2, 23a8 <HandleEvent+0x38>)
    23a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    23a8:	000023c5 	.word	0x000023c5
    23ac:	000023dd 	.word	0x000023dd
    23b0:	000023f5 	.word	0x000023f5
    23b4:	00002415 	.word	0x00002415
    23b8:	0000242d 	.word	0x0000242d
    23bc:	0000244b 	.word	0x0000244b
    23c0:	00002467 	.word	0x00002467
	case 0:
		if(bit_entered == on_pattern[0]){
    23c4:	7c3b      	ldrb	r3, [r7, #16]
    23c6:	79fa      	ldrb	r2, [r7, #7]
    23c8:	429a      	cmp	r2, r3
    23ca:	d103      	bne.n	23d4 <HandleEvent+0x64>
			CurrentState = 1;				
    23cc:	4b35      	ldr	r3, [pc, #212]	; (24a4 <HandleEvent+0x134>)
    23ce:	2201      	movs	r2, #1
    23d0:	701a      	strb	r2, [r3, #0]
		}else{
			CurrentState = 0; 		
		}
		break;
    23d2:	e05a      	b.n	248a <HandleEvent+0x11a>
			CurrentState = 0; 		
    23d4:	4b33      	ldr	r3, [pc, #204]	; (24a4 <HandleEvent+0x134>)
    23d6:	2200      	movs	r2, #0
    23d8:	701a      	strb	r2, [r3, #0]
		break;
    23da:	e056      	b.n	248a <HandleEvent+0x11a>
	case 1:
		if(bit_entered == on_pattern[1]){
    23dc:	7c7b      	ldrb	r3, [r7, #17]
    23de:	79fa      	ldrb	r2, [r7, #7]
    23e0:	429a      	cmp	r2, r3
    23e2:	d103      	bne.n	23ec <HandleEvent+0x7c>
			CurrentState = 2;				
    23e4:	4b2f      	ldr	r3, [pc, #188]	; (24a4 <HandleEvent+0x134>)
    23e6:	2202      	movs	r2, #2
    23e8:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 1;
		}
		break;
    23ea:	e04e      	b.n	248a <HandleEvent+0x11a>
			CurrentState = 1;
    23ec:	4b2d      	ldr	r3, [pc, #180]	; (24a4 <HandleEvent+0x134>)
    23ee:	2201      	movs	r2, #1
    23f0:	701a      	strb	r2, [r3, #0]
		break;
    23f2:	e04a      	b.n	248a <HandleEvent+0x11a>
	case 2:
		if(bit_entered == on_pattern[2]){
    23f4:	7cbb      	ldrb	r3, [r7, #18]
    23f6:	79fa      	ldrb	r2, [r7, #7]
    23f8:	429a      	cmp	r2, r3
    23fa:	d103      	bne.n	2404 <HandleEvent+0x94>
			CurrentState = 3;			
    23fc:	4b29      	ldr	r3, [pc, #164]	; (24a4 <HandleEvent+0x134>)
    23fe:	2203      	movs	r2, #3
    2400:	701a      	strb	r2, [r3, #0]
			}
		else if(bit_entered == off_pattern[2]){
			CurrentState = 5;	
		}
		break;
    2402:	e041      	b.n	2488 <HandleEvent+0x118>
		else if(bit_entered == off_pattern[2]){
    2404:	7abb      	ldrb	r3, [r7, #10]
    2406:	79fa      	ldrb	r2, [r7, #7]
    2408:	429a      	cmp	r2, r3
    240a:	d13d      	bne.n	2488 <HandleEvent+0x118>
			CurrentState = 5;	
    240c:	4b25      	ldr	r3, [pc, #148]	; (24a4 <HandleEvent+0x134>)
    240e:	2205      	movs	r2, #5
    2410:	701a      	strb	r2, [r3, #0]
		break;
    2412:	e039      	b.n	2488 <HandleEvent+0x118>
	case 3:
		if(bit_entered == on_pattern[3]){
    2414:	7cfb      	ldrb	r3, [r7, #19]
    2416:	79fa      	ldrb	r2, [r7, #7]
    2418:	429a      	cmp	r2, r3
    241a:	d103      	bne.n	2424 <HandleEvent+0xb4>
			CurrentState = 4;			
    241c:	4b21      	ldr	r3, [pc, #132]	; (24a4 <HandleEvent+0x134>)
    241e:	2204      	movs	r2, #4
    2420:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 1;
		}
		break;		
    2422:	e032      	b.n	248a <HandleEvent+0x11a>
			CurrentState = 1;
    2424:	4b1f      	ldr	r3, [pc, #124]	; (24a4 <HandleEvent+0x134>)
    2426:	2201      	movs	r2, #1
    2428:	701a      	strb	r2, [r3, #0]
		break;		
    242a:	e02e      	b.n	248a <HandleEvent+0x11a>
	case 4:
		if(bit_entered == on_pattern[4]){
    242c:	7d3b      	ldrb	r3, [r7, #20]
    242e:	79fa      	ldrb	r2, [r7, #7]
    2430:	429a      	cmp	r2, r3
    2432:	d106      	bne.n	2442 <HandleEvent+0xd2>
			CurrentState = 5;			
    2434:	4b1b      	ldr	r3, [pc, #108]	; (24a4 <HandleEvent+0x134>)
    2436:	2205      	movs	r2, #5
    2438:	701a      	strb	r2, [r3, #0]
			output = 1;
    243a:	4b1b      	ldr	r3, [pc, #108]	; (24a8 <HandleEvent+0x138>)
    243c:	2201      	movs	r2, #1
    243e:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 3;
		}
		break;
    2440:	e023      	b.n	248a <HandleEvent+0x11a>
			CurrentState = 3;
    2442:	4b18      	ldr	r3, [pc, #96]	; (24a4 <HandleEvent+0x134>)
    2444:	2203      	movs	r2, #3
    2446:	701a      	strb	r2, [r3, #0]
		break;
    2448:	e01f      	b.n	248a <HandleEvent+0x11a>
	case 5:
		if(bit_entered == 0){
    244a:	79fb      	ldrb	r3, [r7, #7]
    244c:	f083 0301 	eor.w	r3, r3, #1
    2450:	b2db      	uxtb	r3, r3
    2452:	2b00      	cmp	r3, #0
    2454:	d003      	beq.n	245e <HandleEvent+0xee>
			CurrentState = 6;			
    2456:	4b13      	ldr	r3, [pc, #76]	; (24a4 <HandleEvent+0x134>)
    2458:	2206      	movs	r2, #6
    245a:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 0;	
		}
		break;
    245c:	e015      	b.n	248a <HandleEvent+0x11a>
			CurrentState = 0;	
    245e:	4b11      	ldr	r3, [pc, #68]	; (24a4 <HandleEvent+0x134>)
    2460:	2200      	movs	r2, #0
    2462:	701a      	strb	r2, [r3, #0]
		break;
    2464:	e011      	b.n	248a <HandleEvent+0x11a>
	case 6:
		if(bit_entered == 0){
    2466:	79fb      	ldrb	r3, [r7, #7]
    2468:	f083 0301 	eor.w	r3, r3, #1
    246c:	b2db      	uxtb	r3, r3
    246e:	2b00      	cmp	r3, #0
    2470:	d003      	beq.n	247a <HandleEvent+0x10a>
			CurrentState = 1;			
    2472:	4b0c      	ldr	r3, [pc, #48]	; (24a4 <HandleEvent+0x134>)
    2474:	2201      	movs	r2, #1
    2476:	701a      	strb	r2, [r3, #0]
			}else{
			CurrentState = 2;
			output = 0;
		}
		break;
    2478:	e007      	b.n	248a <HandleEvent+0x11a>
			CurrentState = 2;
    247a:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <HandleEvent+0x134>)
    247c:	2202      	movs	r2, #2
    247e:	701a      	strb	r2, [r3, #0]
			output = 0;
    2480:	4b09      	ldr	r3, [pc, #36]	; (24a8 <HandleEvent+0x138>)
    2482:	2200      	movs	r2, #0
    2484:	701a      	strb	r2, [r3, #0]
		break;
    2486:	e000      	b.n	248a <HandleEvent+0x11a>
		break;
    2488:	bf00      	nop
	}
	return output;		
    248a:	4b07      	ldr	r3, [pc, #28]	; (24a8 <HandleEvent+0x138>)
    248c:	781b      	ldrb	r3, [r3, #0]
}
    248e:	4618      	mov	r0, r3
    2490:	371c      	adds	r7, #28
    2492:	46bd      	mov	sp, r7
    2494:	f85d 7b04 	ldr.w	r7, [sp], #4
    2498:	4770      	bx	lr
    249a:	bf00      	nop
    249c:	00002718 	.word	0x00002718
    24a0:	00002720 	.word	0x00002720
    24a4:	20000054 	.word	0x20000054
    24a8:	20000055 	.word	0x20000055

000024ac <edge_detector>:

bool edge_detector(void){
    24ac:	b480      	push	{r7}
    24ae:	b083      	sub	sp, #12
    24b0:	af00      	add	r7, sp, #0

	static char clock_state = 0;
	bool edge_input = (PORT->Group[SW0/32].IN.reg & (1<<(SW0%32)));
    24b2:	4b1f      	ldr	r3, [pc, #124]	; (2530 <edge_detector+0x84>)
    24b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    24b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    24bc:	2b00      	cmp	r3, #0
    24be:	bf14      	ite	ne
    24c0:	2301      	movne	r3, #1
    24c2:	2300      	moveq	r3, #0
    24c4:	71bb      	strb	r3, [r7, #6]
	
	bool edge_detected = 0;
    24c6:	2300      	movs	r3, #0
    24c8:	71fb      	strb	r3, [r7, #7]
		
	
	switch(clock_state){
    24ca:	4b1a      	ldr	r3, [pc, #104]	; (2534 <edge_detector+0x88>)
    24cc:	781b      	ldrb	r3, [r3, #0]
    24ce:	2b00      	cmp	r3, #0
    24d0:	d002      	beq.n	24d8 <edge_detector+0x2c>
    24d2:	2b01      	cmp	r3, #1
    24d4:	d012      	beq.n	24fc <edge_detector+0x50>
    24d6:	e023      	b.n	2520 <edge_detector+0x74>
		case 0:
		if(edge_input == 0){
    24d8:	79bb      	ldrb	r3, [r7, #6]
    24da:	f083 0301 	eor.w	r3, r3, #1
    24de:	b2db      	uxtb	r3, r3
    24e0:	2b00      	cmp	r3, #0
    24e2:	d005      	beq.n	24f0 <edge_detector+0x44>
			clock_state = 1;
    24e4:	4b13      	ldr	r3, [pc, #76]	; (2534 <edge_detector+0x88>)
    24e6:	2201      	movs	r2, #1
    24e8:	701a      	strb	r2, [r3, #0]
			edge_detected = 1;
    24ea:	2301      	movs	r3, #1
    24ec:	71fb      	strb	r3, [r7, #7]
		}else{
			clock_state = 0;
			edge_detected = 0;
		}
		break;
    24ee:	e017      	b.n	2520 <edge_detector+0x74>
			clock_state = 0;
    24f0:	4b10      	ldr	r3, [pc, #64]	; (2534 <edge_detector+0x88>)
    24f2:	2200      	movs	r2, #0
    24f4:	701a      	strb	r2, [r3, #0]
			edge_detected = 0;
    24f6:	2300      	movs	r3, #0
    24f8:	71fb      	strb	r3, [r7, #7]
		break;
    24fa:	e011      	b.n	2520 <edge_detector+0x74>
		case 1:
		if(edge_input == 0){
    24fc:	79bb      	ldrb	r3, [r7, #6]
    24fe:	f083 0301 	eor.w	r3, r3, #1
    2502:	b2db      	uxtb	r3, r3
    2504:	2b00      	cmp	r3, #0
    2506:	d005      	beq.n	2514 <edge_detector+0x68>
			clock_state = 1;
    2508:	4b0a      	ldr	r3, [pc, #40]	; (2534 <edge_detector+0x88>)
    250a:	2201      	movs	r2, #1
    250c:	701a      	strb	r2, [r3, #0]
			edge_detected = 0;
    250e:	2300      	movs	r3, #0
    2510:	71fb      	strb	r3, [r7, #7]
		}else{
			clock_state = 0;
			edge_detected = 0;
		}
		break;
    2512:	e004      	b.n	251e <edge_detector+0x72>
			clock_state = 0;
    2514:	4b07      	ldr	r3, [pc, #28]	; (2534 <edge_detector+0x88>)
    2516:	2200      	movs	r2, #0
    2518:	701a      	strb	r2, [r3, #0]
			edge_detected = 0;
    251a:	2300      	movs	r3, #0
    251c:	71fb      	strb	r3, [r7, #7]
		break;
    251e:	bf00      	nop
		}
	return edge_detected;
    2520:	79fb      	ldrb	r3, [r7, #7]
}
    2522:	4618      	mov	r0, r3
    2524:	370c      	adds	r7, #12
    2526:	46bd      	mov	sp, r7
    2528:	f85d 7b04 	ldr.w	r7, [sp], #4
    252c:	4770      	bx	lr
    252e:	bf00      	nop
    2530:	41008000 	.word	0x41008000
    2534:	20000056 	.word	0x20000056

00002538 <main>:

int main(void){
    2538:	b580      	push	{r7, lr}
    253a:	b082      	sub	sp, #8
    253c:	af00      	add	r7, sp, #0
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    253e:	4b16      	ldr	r3, [pc, #88]	; (2598 <main+0x60>)
    2540:	4798      	blx	r3
	
	/* Initialize the value */
	bool input = 0;
    2542:	2300      	movs	r3, #0
    2544:	71bb      	strb	r3, [r7, #6]
	bool clock_edge_event = 0;
    2546:	2300      	movs	r3, #0
    2548:	717b      	strb	r3, [r7, #5]
	bool led = 0;
    254a:	2300      	movs	r3, #0
    254c:	71fb      	strb	r3, [r7, #7]
	
	while (1) {
		clock_edge_event = edge_detector();
    254e:	4b13      	ldr	r3, [pc, #76]	; (259c <main+0x64>)
    2550:	4798      	blx	r3
    2552:	4603      	mov	r3, r0
    2554:	717b      	strb	r3, [r7, #5]
		
		if(clock_edge_event){
    2556:	797b      	ldrb	r3, [r7, #5]
    2558:	2b00      	cmp	r3, #0
    255a:	d00f      	beq.n	257c <main+0x44>
			input = (PORT->Group[CODE_INPUT/32].IN.reg & (1<<(CODE_INPUT%32)));
    255c:	4b10      	ldr	r3, [pc, #64]	; (25a0 <main+0x68>)
    255e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2562:	f003 0320 	and.w	r3, r3, #32
    2566:	2b00      	cmp	r3, #0
    2568:	bf14      	ite	ne
    256a:	2301      	movne	r3, #1
    256c:	2300      	moveq	r3, #0
    256e:	71bb      	strb	r3, [r7, #6]
			led = HandleEvent(input);
    2570:	79bb      	ldrb	r3, [r7, #6]
    2572:	4618      	mov	r0, r3
    2574:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <main+0x6c>)
    2576:	4798      	blx	r3
    2578:	4603      	mov	r3, r0
    257a:	71fb      	strb	r3, [r7, #7]
		}
		
		if(led){
    257c:	79fb      	ldrb	r3, [r7, #7]
    257e:	2b00      	cmp	r3, #0
    2580:	d004      	beq.n	258c <main+0x54>
			//PORT->Group[LED0/32].OUTCLR.reg = (1<<LED0%32);
			gpio_set_pin_level(LED0,0);
    2582:	2100      	movs	r1, #0
    2584:	2052      	movs	r0, #82	; 0x52
    2586:	4b08      	ldr	r3, [pc, #32]	; (25a8 <main+0x70>)
    2588:	4798      	blx	r3
    258a:	e7e0      	b.n	254e <main+0x16>
			
		}else{
			//PORT->Group[LED0/32].OUTSET.reg = (1<<LED0%32);
			gpio_set_pin_level(LED0,1);
    258c:	2101      	movs	r1, #1
    258e:	2052      	movs	r0, #82	; 0x52
    2590:	4b05      	ldr	r3, [pc, #20]	; (25a8 <main+0x70>)
    2592:	4798      	blx	r3
		clock_edge_event = edge_detector();
    2594:	e7db      	b.n	254e <main+0x16>
    2596:	bf00      	nop
    2598:	000002d1 	.word	0x000002d1
    259c:	000024ad 	.word	0x000024ad
    25a0:	41008000 	.word	0x41008000
    25a4:	00002371 	.word	0x00002371
    25a8:	00002339 	.word	0x00002339

000025ac <__libc_init_array>:
    25ac:	b570      	push	{r4, r5, r6, lr}
    25ae:	4e0d      	ldr	r6, [pc, #52]	; (25e4 <__libc_init_array+0x38>)
    25b0:	4c0d      	ldr	r4, [pc, #52]	; (25e8 <__libc_init_array+0x3c>)
    25b2:	1ba4      	subs	r4, r4, r6
    25b4:	10a4      	asrs	r4, r4, #2
    25b6:	2500      	movs	r5, #0
    25b8:	42a5      	cmp	r5, r4
    25ba:	d109      	bne.n	25d0 <__libc_init_array+0x24>
    25bc:	4e0b      	ldr	r6, [pc, #44]	; (25ec <__libc_init_array+0x40>)
    25be:	4c0c      	ldr	r4, [pc, #48]	; (25f0 <__libc_init_array+0x44>)
    25c0:	f000 f8b2 	bl	2728 <_init>
    25c4:	1ba4      	subs	r4, r4, r6
    25c6:	10a4      	asrs	r4, r4, #2
    25c8:	2500      	movs	r5, #0
    25ca:	42a5      	cmp	r5, r4
    25cc:	d105      	bne.n	25da <__libc_init_array+0x2e>
    25ce:	bd70      	pop	{r4, r5, r6, pc}
    25d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    25d4:	4798      	blx	r3
    25d6:	3501      	adds	r5, #1
    25d8:	e7ee      	b.n	25b8 <__libc_init_array+0xc>
    25da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    25de:	4798      	blx	r3
    25e0:	3501      	adds	r5, #1
    25e2:	e7f2      	b.n	25ca <__libc_init_array+0x1e>
    25e4:	00002734 	.word	0x00002734
    25e8:	00002734 	.word	0x00002734
    25ec:	00002734 	.word	0x00002734
    25f0:	00002738 	.word	0x00002738
    25f4:	682f2e2e 	.word	0x682f2e2e
    25f8:	702f6c70 	.word	0x702f6c70
    25fc:	2f74726f 	.word	0x2f74726f
    2600:	5f6c7068 	.word	0x5f6c7068
    2604:	6f697067 	.word	0x6f697067
    2608:	7361625f 	.word	0x7361625f
    260c:	00682e65 	.word	0x00682e65
    2610:	682f2e2e 	.word	0x682f2e2e
    2614:	732f6c61 	.word	0x732f6c61
    2618:	682f6372 	.word	0x682f6372
    261c:	705f6c61 	.word	0x705f6c61
    2620:	632e6d77 	.word	0x632e6d77
    2624:	00000000 	.word	0x00000000
    2628:	682f2e2e 	.word	0x682f2e2e
    262c:	732f6c61 	.word	0x732f6c61
    2630:	682f6372 	.word	0x682f6372
    2634:	745f6c61 	.word	0x745f6c61
    2638:	72656d69 	.word	0x72656d69
    263c:	0000632e 	.word	0x0000632e
    2640:	682f2e2e 	.word	0x682f2e2e
    2644:	732f6c61 	.word	0x732f6c61
    2648:	682f6372 	.word	0x682f6372
    264c:	755f6c61 	.word	0x755f6c61
    2650:	74726173 	.word	0x74726173
    2654:	6e79735f 	.word	0x6e79735f
    2658:	00632e63 	.word	0x00632e63
    265c:	682f2e2e 	.word	0x682f2e2e
    2660:	752f6c61 	.word	0x752f6c61
    2664:	736c6974 	.word	0x736c6974
    2668:	6372732f 	.word	0x6372732f
    266c:	6974752f 	.word	0x6974752f
    2670:	6c5f736c 	.word	0x6c5f736c
    2674:	2e747369 	.word	0x2e747369
    2678:	00000063 	.word	0x00000063
    267c:	682f2e2e 	.word	0x682f2e2e
    2680:	722f6c70 	.word	0x722f6c70
    2684:	682f6374 	.word	0x682f6374
    2688:	725f6c70 	.word	0x725f6c70
    268c:	632e6374 	.word	0x632e6374
    2690:	00000000 	.word	0x00000000
    2694:	682f2e2e 	.word	0x682f2e2e
    2698:	732f6c70 	.word	0x732f6c70
    269c:	6f637265 	.word	0x6f637265
    26a0:	70682f6d 	.word	0x70682f6d
    26a4:	65735f6c 	.word	0x65735f6c
    26a8:	6d6f6372 	.word	0x6d6f6372
    26ac:	0000632e 	.word	0x0000632e
    26b0:	40003000 	.word	0x40003000
    26b4:	40003400 	.word	0x40003400
    26b8:	41012000 	.word	0x41012000
    26bc:	41014000 	.word	0x41014000
    26c0:	43000000 	.word	0x43000000
    26c4:	43000400 	.word	0x43000400
    26c8:	43000800 	.word	0x43000800
    26cc:	43000c00 	.word	0x43000c00

000026d0 <sercomspi_regs>:
	...
    26e4:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    26f4:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    2704:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    2714:	43001800 01000100 00000001 00010100     ...C............
    2724:	00000001                                ....

00002728 <_init>:
    2728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    272a:	bf00      	nop
    272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    272e:	bc08      	pop	{r3}
    2730:	469e      	mov	lr, r3
    2732:	4770      	bx	lr

00002734 <__init_array_start>:
    2734:	00000289 	.word	0x00000289

00002738 <_fini>:
    2738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    273a:	bf00      	nop
    273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    273e:	bc08      	pop	{r3}
    2740:	469e      	mov	lr, r3
    2742:	4770      	bx	lr

00002744 <__fini_array_start>:
    2744:	00000265 	.word	0x00000265
