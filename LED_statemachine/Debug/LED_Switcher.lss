
LED_Switcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001098  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000003c  20000000  00001098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002003c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002003c  2**0
                  CONTENTS
  4 .bss          00000088  2000003c  000010d4  0002003c  2**2
                  ALLOC
  5 .stack        00010004  200000c4  0000115c  0002003c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022e00  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002fe9  00000000  00000000  00042ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b094  00000000  00000000  00045eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a50  00000000  00000000  00050f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  00051990  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003253c  00000000  00000000  00052488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012d67  00000000  00000000  000849c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00115edf  00000000  00000000  0009772b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000019fc  00000000  00000000  001ad60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 00 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	a9 09 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	d9 08 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 f9 0d 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000003c 	.word	0x2000003c
     280:	00000000 	.word	0x00000000
     284:	00001098 	.word	0x00001098

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001098 	.word	0x00001098
     2c4:	20000040 	.word	0x20000040
     2c8:	00001098 	.word	0x00001098
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000481 	.word	0x00000481

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00001098 	.word	0x00001098
     340:	2000003c 	.word	0x2000003c
     344:	2000003c 	.word	0x2000003c
     348:	200000c4 	.word	0x200000c4
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00000ee9 	.word	0x00000ee9
     358:	00000eb9 	.word	0x00000eb9

0000035c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     35c:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     35e:	4a06      	ldr	r2, [pc, #24]	; (378 <TIMER_0_init+0x1c>)
     360:	6953      	ldr	r3, [r2, #20]
     362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     366:	6153      	str	r3, [r2, #20]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <TIMER_0_init+0x20>)
     36a:	4798      	blx	r3
     36c:	4602      	mov	r2, r0
     36e:	4904      	ldr	r1, [pc, #16]	; (380 <TIMER_0_init+0x24>)
     370:	4804      	ldr	r0, [pc, #16]	; (384 <TIMER_0_init+0x28>)
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <TIMER_0_init+0x2c>)
     374:	4798      	blx	r3
     376:	bd08      	pop	{r3, pc}
     378:	40000800 	.word	0x40000800
     37c:	000009a5 	.word	0x000009a5
     380:	40002400 	.word	0x40002400
     384:	20000094 	.word	0x20000094
     388:	00000681 	.word	0x00000681

0000038c <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     38c:	4b10      	ldr	r3, [pc, #64]	; (3d0 <USART_0_PORT_init+0x44>)
     38e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     392:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     396:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     39a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3be:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3c2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3c6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     3ce:	4770      	bx	lr
     3d0:	41008000 	.word	0x41008000

000003d4 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3d4:	4b06      	ldr	r3, [pc, #24]	; (3f0 <USART_0_CLOCK_init+0x1c>)
     3d6:	2240      	movs	r2, #64	; 0x40
     3d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     3dc:	2243      	movs	r2, #67	; 0x43
     3de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     3e2:	4a04      	ldr	r2, [pc, #16]	; (3f4 <USART_0_CLOCK_init+0x20>)
     3e4:	6953      	ldr	r3, [r2, #20]
     3e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     3ea:	6153      	str	r3, [r2, #20]
     3ec:	4770      	bx	lr
     3ee:	bf00      	nop
     3f0:	40001c00 	.word	0x40001c00
     3f4:	40000800 	.word	0x40000800

000003f8 <USART_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void USART_0_init(void)
{
     3f8:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <USART_0_init+0x18>)
     3fc:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <USART_0_init+0x1c>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <USART_0_init+0x20>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <USART_0_init+0x24>)
     406:	4798      	blx	r3
	USART_0_PORT_init();
     408:	4b05      	ldr	r3, [pc, #20]	; (420 <USART_0_init+0x28>)
     40a:	4798      	blx	r3
     40c:	bd08      	pop	{r3, pc}
     40e:	bf00      	nop
     410:	000003d5 	.word	0x000003d5
     414:	40003000 	.word	0x40003000
     418:	20000088 	.word	0x20000088
     41c:	0000078d 	.word	0x0000078d
     420:	0000038d 	.word	0x0000038d

00000424 <delay_driver_init>:
}

void delay_driver_init(void)
{
     424:	b508      	push	{r3, lr}
	delay_init(SysTick);
     426:	4802      	ldr	r0, [pc, #8]	; (430 <delay_driver_init+0xc>)
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <delay_driver_init+0x10>)
     42a:	4798      	blx	r3
     42c:	bd08      	pop	{r3, pc}
     42e:	bf00      	nop
     430:	e000e010 	.word	0xe000e010
     434:	0000055d 	.word	0x0000055d

00000438 <PWM_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     438:	4a04      	ldr	r2, [pc, #16]	; (44c <PWM_0_CLOCK_init+0x14>)
     43a:	6953      	ldr	r3, [r2, #20]
     43c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     440:	6153      	str	r3, [r2, #20]
     442:	2240      	movs	r2, #64	; 0x40
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <PWM_0_CLOCK_init+0x18>)
     446:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     44a:	4770      	bx	lr
     44c:	40000800 	.word	0x40000800
     450:	40001c00 	.word	0x40001c00

00000454 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     454:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <PWM_0_init+0x18>)
     458:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     45a:	4b05      	ldr	r3, [pc, #20]	; (470 <PWM_0_init+0x1c>)
     45c:	4798      	blx	r3
     45e:	4602      	mov	r2, r0
     460:	4904      	ldr	r1, [pc, #16]	; (474 <PWM_0_init+0x20>)
     462:	4805      	ldr	r0, [pc, #20]	; (478 <PWM_0_init+0x24>)
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <PWM_0_init+0x28>)
     466:	4798      	blx	r3
     468:	bd08      	pop	{r3, pc}
     46a:	bf00      	nop
     46c:	00000439 	.word	0x00000439
     470:	00000df5 	.word	0x00000df5
     474:	40003800 	.word	0x40003800
     478:	2000006c 	.word	0x2000006c
     47c:	00000585 	.word	0x00000585

00000480 <system_init>:
}

void system_init(void)
{
     480:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     482:	4b25      	ldr	r3, [pc, #148]	; (518 <system_init+0x98>)
     484:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     486:	4b25      	ldr	r3, [pc, #148]	; (51c <system_init+0x9c>)
     488:	2202      	movs	r2, #2
     48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     48e:	4a24      	ldr	r2, [pc, #144]	; (520 <system_init+0xa0>)
     490:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     494:	4a23      	ldr	r2, [pc, #140]	; (524 <system_init+0xa4>)
     496:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     49a:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     49e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a6:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     4aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ba:	4a1b      	ldr	r2, [pc, #108]	; (528 <system_init+0xa8>)
     4bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4c0:	f102 2280 	add.w	r2, r2, #2147516416	; 0x80008000
     4c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c8:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
     4cc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4d0:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d4:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4dc:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     4e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     4f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     4f4:	4a0d      	ldr	r2, [pc, #52]	; (52c <system_init+0xac>)
     4f6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fa:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     4fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     502:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(YLW_LED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(YLW_LED, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <system_init+0xb0>)
     508:	4798      	blx	r3

	USART_0_init();
     50a:	4b0a      	ldr	r3, [pc, #40]	; (534 <system_init+0xb4>)
     50c:	4798      	blx	r3

	delay_driver_init();
     50e:	4b0a      	ldr	r3, [pc, #40]	; (538 <system_init+0xb8>)
     510:	4798      	blx	r3

	PWM_0_init();
     512:	4b0a      	ldr	r3, [pc, #40]	; (53c <system_init+0xbc>)
     514:	4798      	blx	r3
     516:	bd08      	pop	{r3, pc}
     518:	00000839 	.word	0x00000839
     51c:	41008000 	.word	0x41008000
     520:	40020002 	.word	0x40020002
     524:	c0020000 	.word	0xc0020000
     528:	40020000 	.word	0x40020000
     52c:	c0000004 	.word	0xc0000004
     530:	0000035d 	.word	0x0000035d
     534:	000003f9 	.word	0x000003f9
     538:	00000425 	.word	0x00000425
     53c:	00000455 	.word	0x00000455

00000540 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     540:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     544:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     546:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     548:	f3bf 8f5f 	dmb	sy
     54c:	4770      	bx	lr

0000054e <atomic_leave_critical>:
     54e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     552:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     554:	f383 8810 	msr	PRIMASK, r3
     558:	4770      	bx	lr
	...

0000055c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     55c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     55e:	4b02      	ldr	r3, [pc, #8]	; (568 <delay_init+0xc>)
     560:	6018      	str	r0, [r3, #0]
     562:	4b02      	ldr	r3, [pc, #8]	; (56c <delay_init+0x10>)
     564:	4798      	blx	r3
     566:	bd08      	pop	{r3, pc}
     568:	20000058 	.word	0x20000058
     56c:	00000bad 	.word	0x00000bad

00000570 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     570:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     572:	6943      	ldr	r3, [r0, #20]
     574:	b103      	cbz	r3, 578 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     576:	4798      	blx	r3
     578:	bd08      	pop	{r3, pc}

0000057a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     57a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     57c:	6983      	ldr	r3, [r0, #24]
     57e:	b103      	cbz	r3, 582 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     580:	4798      	blx	r3
     582:	bd08      	pop	{r3, pc}

00000584 <pwm_init>:
{
     584:	b538      	push	{r3, r4, r5, lr}
     586:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     588:	4604      	mov	r4, r0
     58a:	b188      	cbz	r0, 5b0 <pwm_init+0x2c>
     58c:	b171      	cbz	r1, 5ac <pwm_init+0x28>
     58e:	2001      	movs	r0, #1
     590:	2233      	movs	r2, #51	; 0x33
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <pwm_init+0x30>)
     594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <pwm_init+0x34>)
     596:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     598:	4629      	mov	r1, r5
     59a:	4620      	mov	r0, r4
     59c:	4b07      	ldr	r3, [pc, #28]	; (5bc <pwm_init+0x38>)
     59e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     5a0:	4b07      	ldr	r3, [pc, #28]	; (5c0 <pwm_init+0x3c>)
     5a2:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     5a4:	4b07      	ldr	r3, [pc, #28]	; (5c4 <pwm_init+0x40>)
     5a6:	6063      	str	r3, [r4, #4]
}
     5a8:	2000      	movs	r0, #0
     5aa:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     5ac:	2000      	movs	r0, #0
     5ae:	e7ef      	b.n	590 <pwm_init+0xc>
     5b0:	2000      	movs	r0, #0
     5b2:	e7ed      	b.n	590 <pwm_init+0xc>
     5b4:	00000f30 	.word	0x00000f30
     5b8:	000007d9 	.word	0x000007d9
     5bc:	00000c75 	.word	0x00000c75
     5c0:	00000571 	.word	0x00000571
     5c4:	0000057b 	.word	0x0000057b

000005c8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     5ca:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     5cc:	b117      	cbz	r7, 5d4 <timer_add_timer_task+0xc>
     5ce:	463c      	mov	r4, r7
     5d0:	2600      	movs	r6, #0
     5d2:	e00b      	b.n	5ec <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     5d4:	4b0e      	ldr	r3, [pc, #56]	; (610 <timer_add_timer_task+0x48>)
     5d6:	4798      	blx	r3
		return;
     5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     5da:	68a5      	ldr	r5, [r4, #8]
     5dc:	442b      	add	r3, r5
     5de:	1a9b      	subs	r3, r3, r2
     5e0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
     5e2:	688d      	ldr	r5, [r1, #8]
     5e4:	42ab      	cmp	r3, r5
     5e6:	d209      	bcs.n	5fc <timer_add_timer_task+0x34>
			break;
		prev = it;
     5e8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     5ea:	6824      	ldr	r4, [r4, #0]
     5ec:	b134      	cbz	r4, 5fc <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
     5ee:	6863      	ldr	r3, [r4, #4]
     5f0:	4293      	cmp	r3, r2
     5f2:	d8f2      	bhi.n	5da <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
     5f4:	68a5      	ldr	r5, [r4, #8]
     5f6:	1a9b      	subs	r3, r3, r2
     5f8:	442b      	add	r3, r5
     5fa:	e7f2      	b.n	5e2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
     5fc:	42bc      	cmp	r4, r7
     5fe:	d003      	beq.n	608 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     600:	4630      	mov	r0, r6
     602:	4b04      	ldr	r3, [pc, #16]	; (614 <timer_add_timer_task+0x4c>)
     604:	4798      	blx	r3
     606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     608:	4b01      	ldr	r3, [pc, #4]	; (610 <timer_add_timer_task+0x48>)
     60a:	4798      	blx	r3
     60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     60e:	bf00      	nop
     610:	000007f5 	.word	0x000007f5
     614:	00000821 	.word	0x00000821

00000618 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     61a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     61c:	6906      	ldr	r6, [r0, #16]
     61e:	3601      	adds	r6, #1
     620:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     622:	7e03      	ldrb	r3, [r0, #24]
     624:	f013 0f01 	tst.w	r3, #1
     628:	d105      	bne.n	636 <timer_process_counted+0x1e>
     62a:	7e03      	ldrb	r3, [r0, #24]
     62c:	f013 0f02 	tst.w	r3, #2
     630:	d101      	bne.n	636 <timer_process_counted+0x1e>
     632:	4605      	mov	r5, r0
     634:	e009      	b.n	64a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     636:	7e03      	ldrb	r3, [r0, #24]
     638:	f043 0302 	orr.w	r3, r3, #2
     63c:	7603      	strb	r3, [r0, #24]
		return;
     63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     640:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     642:	68e3      	ldr	r3, [r4, #12]
     644:	4620      	mov	r0, r4
     646:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     648:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     64a:	b19c      	cbz	r4, 674 <timer_process_counted+0x5c>
     64c:	6863      	ldr	r3, [r4, #4]
     64e:	1af3      	subs	r3, r6, r3
     650:	68a2      	ldr	r2, [r4, #8]
     652:	4293      	cmp	r3, r2
     654:	d30e      	bcc.n	674 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
     656:	f105 0714 	add.w	r7, r5, #20
     65a:	4638      	mov	r0, r7
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <timer_process_counted+0x60>)
     65e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     660:	7c23      	ldrb	r3, [r4, #16]
     662:	2b01      	cmp	r3, #1
     664:	d1ec      	bne.n	640 <timer_process_counted+0x28>
			tmp->time_label = time;
     666:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     668:	4632      	mov	r2, r6
     66a:	4621      	mov	r1, r4
     66c:	4638      	mov	r0, r7
     66e:	4b03      	ldr	r3, [pc, #12]	; (67c <timer_process_counted+0x64>)
     670:	4798      	blx	r3
     672:	e7e5      	b.n	640 <timer_process_counted+0x28>
     674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     676:	bf00      	nop
     678:	00000829 	.word	0x00000829
     67c:	000005c9 	.word	0x000005c9

00000680 <timer_init>:
{
     680:	b538      	push	{r3, r4, r5, lr}
     682:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     684:	4604      	mov	r4, r0
     686:	b180      	cbz	r0, 6aa <timer_init+0x2a>
     688:	b169      	cbz	r1, 6a6 <timer_init+0x26>
     68a:	2001      	movs	r0, #1
     68c:	223b      	movs	r2, #59	; 0x3b
     68e:	4908      	ldr	r1, [pc, #32]	; (6b0 <timer_init+0x30>)
     690:	4b08      	ldr	r3, [pc, #32]	; (6b4 <timer_init+0x34>)
     692:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     694:	4629      	mov	r1, r5
     696:	4620      	mov	r0, r4
     698:	4b07      	ldr	r3, [pc, #28]	; (6b8 <timer_init+0x38>)
     69a:	4798      	blx	r3
	descr->time                           = 0;
     69c:	2000      	movs	r0, #0
     69e:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     6a0:	4b06      	ldr	r3, [pc, #24]	; (6bc <timer_init+0x3c>)
     6a2:	6023      	str	r3, [r4, #0]
}
     6a4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     6a6:	2000      	movs	r0, #0
     6a8:	e7f0      	b.n	68c <timer_init+0xc>
     6aa:	2000      	movs	r0, #0
     6ac:	e7ee      	b.n	68c <timer_init+0xc>
     6ae:	bf00      	nop
     6b0:	00000f48 	.word	0x00000f48
     6b4:	000007d9 	.word	0x000007d9
     6b8:	0000093d 	.word	0x0000093d
     6bc:	00000619 	.word	0x00000619

000006c0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6c2:	460e      	mov	r6, r1
     6c4:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     6c6:	4605      	mov	r5, r0
     6c8:	b308      	cbz	r0, 70e <usart_sync_write+0x4e>
     6ca:	b311      	cbz	r1, 712 <usart_sync_write+0x52>
     6cc:	bb1a      	cbnz	r2, 716 <usart_sync_write+0x56>
     6ce:	2000      	movs	r0, #0
     6d0:	22f1      	movs	r2, #241	; 0xf1
     6d2:	4912      	ldr	r1, [pc, #72]	; (71c <usart_sync_write+0x5c>)
     6d4:	4b12      	ldr	r3, [pc, #72]	; (720 <usart_sync_write+0x60>)
     6d6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     6d8:	f105 0408 	add.w	r4, r5, #8
     6dc:	4620      	mov	r0, r4
     6de:	4b11      	ldr	r3, [pc, #68]	; (724 <usart_sync_write+0x64>)
     6e0:	4798      	blx	r3
     6e2:	2800      	cmp	r0, #0
     6e4:	d0f8      	beq.n	6d8 <usart_sync_write+0x18>
     6e6:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6e8:	5d71      	ldrb	r1, [r6, r5]
     6ea:	4620      	mov	r0, r4
     6ec:	4b0e      	ldr	r3, [pc, #56]	; (728 <usart_sync_write+0x68>)
     6ee:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6f0:	4620      	mov	r0, r4
     6f2:	4b0c      	ldr	r3, [pc, #48]	; (724 <usart_sync_write+0x64>)
     6f4:	4798      	blx	r3
     6f6:	2800      	cmp	r0, #0
     6f8:	d0fa      	beq.n	6f0 <usart_sync_write+0x30>
			;
	} while (++offset < length);
     6fa:	3501      	adds	r5, #1
     6fc:	42bd      	cmp	r5, r7
     6fe:	d3f3      	bcc.n	6e8 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     700:	4620      	mov	r0, r4
     702:	4b0a      	ldr	r3, [pc, #40]	; (72c <usart_sync_write+0x6c>)
     704:	4798      	blx	r3
     706:	2800      	cmp	r0, #0
     708:	d0fa      	beq.n	700 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     70a:	4628      	mov	r0, r5
     70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     70e:	2000      	movs	r0, #0
     710:	e7de      	b.n	6d0 <usart_sync_write+0x10>
     712:	2000      	movs	r0, #0
     714:	e7dc      	b.n	6d0 <usart_sync_write+0x10>
     716:	2001      	movs	r0, #1
     718:	e7da      	b.n	6d0 <usart_sync_write+0x10>
     71a:	bf00      	nop
     71c:	00000f60 	.word	0x00000f60
     720:	000007d9 	.word	0x000007d9
     724:	00000b7b 	.word	0x00000b7b
     728:	00000b6d 	.word	0x00000b6d
     72c:	00000b85 	.word	0x00000b85

00000730 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     734:	460f      	mov	r7, r1
     736:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     738:	4605      	mov	r5, r0
     73a:	b1c8      	cbz	r0, 770 <usart_sync_read+0x40>
     73c:	b1d1      	cbz	r1, 774 <usart_sync_read+0x44>
     73e:	b9da      	cbnz	r2, 778 <usart_sync_read+0x48>
     740:	2000      	movs	r0, #0
     742:	f44f 7286 	mov.w	r2, #268	; 0x10c
     746:	490d      	ldr	r1, [pc, #52]	; (77c <usart_sync_read+0x4c>)
     748:	4b0d      	ldr	r3, [pc, #52]	; (780 <usart_sync_read+0x50>)
     74a:	4798      	blx	r3
	uint32_t                      offset = 0;
     74c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     74e:	f105 0408 	add.w	r4, r5, #8
     752:	4620      	mov	r0, r4
     754:	4b0b      	ldr	r3, [pc, #44]	; (784 <usart_sync_read+0x54>)
     756:	4798      	blx	r3
     758:	2800      	cmp	r0, #0
     75a:	d0f8      	beq.n	74e <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     75c:	4620      	mov	r0, r4
     75e:	4b0a      	ldr	r3, [pc, #40]	; (788 <usart_sync_read+0x58>)
     760:	4798      	blx	r3
     762:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     764:	3601      	adds	r6, #1
     766:	4546      	cmp	r6, r8
     768:	d3f1      	bcc.n	74e <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     76a:	4630      	mov	r0, r6
     76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     770:	2000      	movs	r0, #0
     772:	e7e6      	b.n	742 <usart_sync_read+0x12>
     774:	2000      	movs	r0, #0
     776:	e7e4      	b.n	742 <usart_sync_read+0x12>
     778:	2001      	movs	r0, #1
     77a:	e7e2      	b.n	742 <usart_sync_read+0x12>
     77c:	00000f60 	.word	0x00000f60
     780:	000007d9 	.word	0x000007d9
     784:	00000b8f 	.word	0x00000b8f
     788:	00000b73 	.word	0x00000b73

0000078c <usart_sync_init>:
{
     78c:	b538      	push	{r3, r4, r5, lr}
     78e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     790:	4604      	mov	r4, r0
     792:	b1a0      	cbz	r0, 7be <usart_sync_init+0x32>
     794:	b189      	cbz	r1, 7ba <usart_sync_init+0x2e>
     796:	2001      	movs	r0, #1
     798:	2234      	movs	r2, #52	; 0x34
     79a:	490a      	ldr	r1, [pc, #40]	; (7c4 <usart_sync_init+0x38>)
     79c:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <usart_sync_init+0x3c>)
     79e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     7a0:	4629      	mov	r1, r5
     7a2:	f104 0008 	add.w	r0, r4, #8
     7a6:	4b09      	ldr	r3, [pc, #36]	; (7cc <usart_sync_init+0x40>)
     7a8:	4798      	blx	r3
	if (init_status) {
     7aa:	4603      	mov	r3, r0
     7ac:	b918      	cbnz	r0, 7b6 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     7ae:	4a08      	ldr	r2, [pc, #32]	; (7d0 <usart_sync_init+0x44>)
     7b0:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     7b2:	4a08      	ldr	r2, [pc, #32]	; (7d4 <usart_sync_init+0x48>)
     7b4:	6022      	str	r2, [r4, #0]
}
     7b6:	4618      	mov	r0, r3
     7b8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     7ba:	2000      	movs	r0, #0
     7bc:	e7ec      	b.n	798 <usart_sync_init+0xc>
     7be:	2000      	movs	r0, #0
     7c0:	e7ea      	b.n	798 <usart_sync_init+0xc>
     7c2:	bf00      	nop
     7c4:	00000f60 	.word	0x00000f60
     7c8:	000007d9 	.word	0x000007d9
     7cc:	00000b41 	.word	0x00000b41
     7d0:	00000731 	.word	0x00000731
     7d4:	000006c1 	.word	0x000006c1

000007d8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     7d8:	b900      	cbnz	r0, 7dc <assert+0x4>
		__asm("BKPT #0");
     7da:	be00      	bkpt	0x0000
     7dc:	4770      	bx	lr

000007de <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     7de:	6803      	ldr	r3, [r0, #0]
     7e0:	b11b      	cbz	r3, 7ea <is_list_element+0xc>
		if (it == element) {
     7e2:	428b      	cmp	r3, r1
     7e4:	d003      	beq.n	7ee <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
     7e6:	681b      	ldr	r3, [r3, #0]
     7e8:	e7fa      	b.n	7e0 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     7ea:	2000      	movs	r0, #0
     7ec:	4770      	bx	lr
			return true;
     7ee:	2001      	movs	r0, #1
}
     7f0:	4770      	bx	lr
	...

000007f4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     7f4:	b538      	push	{r3, r4, r5, lr}
     7f6:	4604      	mov	r4, r0
     7f8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     7fa:	4b06      	ldr	r3, [pc, #24]	; (814 <list_insert_as_head+0x20>)
     7fc:	4798      	blx	r3
     7fe:	f080 0001 	eor.w	r0, r0, #1
     802:	2239      	movs	r2, #57	; 0x39
     804:	4904      	ldr	r1, [pc, #16]	; (818 <list_insert_as_head+0x24>)
     806:	b2c0      	uxtb	r0, r0
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <list_insert_as_head+0x28>)
     80a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     80c:	6823      	ldr	r3, [r4, #0]
     80e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     810:	6025      	str	r5, [r4, #0]
     812:	bd38      	pop	{r3, r4, r5, pc}
     814:	000007df 	.word	0x000007df
     818:	00000f7c 	.word	0x00000f7c
     81c:	000007d9 	.word	0x000007d9

00000820 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     820:	6803      	ldr	r3, [r0, #0]
     822:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     824:	6001      	str	r1, [r0, #0]
     826:	4770      	bx	lr

00000828 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     828:	6803      	ldr	r3, [r0, #0]
     82a:	b11b      	cbz	r3, 834 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     82c:	681a      	ldr	r2, [r3, #0]
     82e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     830:	4618      	mov	r0, r3
     832:	4770      	bx	lr
	}

	return NULL;
     834:	2000      	movs	r0, #0
}
     836:	4770      	bx	lr

00000838 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     838:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     83a:	4a08      	ldr	r2, [pc, #32]	; (85c <_init_chip+0x24>)
     83c:	8813      	ldrh	r3, [r2, #0]
     83e:	b29b      	uxth	r3, r3
     840:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     842:	4b07      	ldr	r3, [pc, #28]	; (860 <_init_chip+0x28>)
     844:	4798      	blx	r3
	_oscctrl_init_sources();
     846:	4b07      	ldr	r3, [pc, #28]	; (864 <_init_chip+0x2c>)
     848:	4798      	blx	r3
	_mclk_init();
     84a:	4b07      	ldr	r3, [pc, #28]	; (868 <_init_chip+0x30>)
     84c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <_init_chip+0x34>)
     850:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     852:	f640 70ff 	movw	r0, #4095	; 0xfff
     856:	4b06      	ldr	r3, [pc, #24]	; (870 <_init_chip+0x38>)
     858:	4798      	blx	r3
     85a:	bd08      	pop	{r3, pc}
     85c:	41004000 	.word	0x41004000
     860:	000008a5 	.word	0x000008a5
     864:	000008b9 	.word	0x000008b9
     868:	00000899 	.word	0x00000899
     86c:	000008d5 	.word	0x000008d5
     870:	00000875 	.word	0x00000875

00000874 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     874:	f010 0f01 	tst.w	r0, #1
     878:	d008      	beq.n	88c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     87a:	4a05      	ldr	r2, [pc, #20]	; (890 <_gclk_init_generators_by_fref+0x1c>)
     87c:	4b05      	ldr	r3, [pc, #20]	; (894 <_gclk_init_generators_by_fref+0x20>)
     87e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     880:	4b04      	ldr	r3, [pc, #16]	; (894 <_gclk_init_generators_by_fref+0x20>)
     882:	685a      	ldr	r2, [r3, #4]
     884:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     888:	421a      	tst	r2, r3
     88a:	d1f9      	bne.n	880 <_gclk_init_generators_by_fref+0xc>
     88c:	4770      	bx	lr
     88e:	bf00      	nop
     890:	00010101 	.word	0x00010101
     894:	40001c00 	.word	0x40001c00

00000898 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     898:	2201      	movs	r2, #1
     89a:	4b01      	ldr	r3, [pc, #4]	; (8a0 <_mclk_init+0x8>)
     89c:	715a      	strb	r2, [r3, #5]
     89e:	4770      	bx	lr
     8a0:	40000800 	.word	0x40000800

000008a4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     8a4:	4b03      	ldr	r3, [pc, #12]	; (8b4 <_osc32kctrl_init_sources+0x10>)
     8a6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     8a8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     8ac:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     8ae:	2201      	movs	r2, #1
     8b0:	741a      	strb	r2, [r3, #16]
     8b2:	4770      	bx	lr
     8b4:	40001400 	.word	0x40001400

000008b8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     8b8:	4a04      	ldr	r2, [pc, #16]	; (8cc <_oscctrl_init_sources+0x14>)
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <_oscctrl_init_sources+0x18>)
     8bc:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <_oscctrl_init_sources+0x18>)
     8c0:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     8c2:	f013 0f02 	tst.w	r3, #2
     8c6:	d0fa      	beq.n	8be <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	03002606 	.word	0x03002606
     8d0:	40001000 	.word	0x40001000

000008d4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     8d4:	4770      	bx	lr
	...

000008d8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     8d8:	b500      	push	{lr}
     8da:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     8dc:	4b0d      	ldr	r3, [pc, #52]	; (914 <RAMECC_Handler+0x3c>)
     8de:	789b      	ldrb	r3, [r3, #2]
     8e0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     8e2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     8e4:	9b01      	ldr	r3, [sp, #4]
     8e6:	f013 0f02 	tst.w	r3, #2
     8ea:	d006      	beq.n	8fa <RAMECC_Handler+0x22>
     8ec:	4b0a      	ldr	r3, [pc, #40]	; (918 <RAMECC_Handler+0x40>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	b11b      	cbz	r3, 8fa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     8f2:	4a08      	ldr	r2, [pc, #32]	; (914 <RAMECC_Handler+0x3c>)
     8f4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     8f6:	4798      	blx	r3
     8f8:	e009      	b.n	90e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     8fa:	9b01      	ldr	r3, [sp, #4]
     8fc:	f013 0f01 	tst.w	r3, #1
     900:	d005      	beq.n	90e <RAMECC_Handler+0x36>
     902:	4b05      	ldr	r3, [pc, #20]	; (918 <RAMECC_Handler+0x40>)
     904:	685b      	ldr	r3, [r3, #4]
     906:	b113      	cbz	r3, 90e <RAMECC_Handler+0x36>
     908:	4a02      	ldr	r2, [pc, #8]	; (914 <RAMECC_Handler+0x3c>)
     90a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     90c:	4798      	blx	r3
	} else {
		return;
	}
}
     90e:	b003      	add	sp, #12
     910:	f85d fb04 	ldr.w	pc, [sp], #4
     914:	41020000 	.word	0x41020000
     918:	200000b0 	.word	0x200000b0

0000091c <_rtc_timer_interrupt_handler>:
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
     91c:	68c3      	ldr	r3, [r0, #12]
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     91e:	899b      	ldrh	r3, [r3, #12]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     920:	f413 7f80 	tst.w	r3, #256	; 0x100
     924:	d009      	beq.n	93a <_rtc_timer_interrupt_handler+0x1e>
{
     926:	b510      	push	{r4, lr}
     928:	4604      	mov	r4, r0
		if (dev->timer_cb.period_expired) {
     92a:	6803      	ldr	r3, [r0, #0]
     92c:	b103      	cbz	r3, 930 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     92e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     930:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     932:	f44f 7280 	mov.w	r2, #256	; 0x100
     936:	819a      	strh	r2, [r3, #12]
     938:	bd10      	pop	{r4, pc}
     93a:	4770      	bx	lr

0000093c <_timer_init>:
{
     93c:	b538      	push	{r3, r4, r5, lr}
     93e:	460d      	mov	r5, r1
	ASSERT(dev);
     940:	4604      	mov	r4, r0
     942:	2230      	movs	r2, #48	; 0x30
     944:	4914      	ldr	r1, [pc, #80]	; (998 <_timer_init+0x5c>)
     946:	3000      	adds	r0, #0
     948:	bf18      	it	ne
     94a:	2001      	movne	r0, #1
     94c:	4b13      	ldr	r3, [pc, #76]	; (99c <_timer_init+0x60>)
     94e:	4798      	blx	r3
	dev->hw = hw;
     950:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     952:	2301      	movs	r3, #1
     954:	802b      	strh	r3, [r5, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     956:	692a      	ldr	r2, [r5, #16]
     958:	f248 0303 	movw	r3, #32771	; 0x8003
     95c:	421a      	tst	r2, r3
     95e:	d1fa      	bne.n	956 <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     960:	68e3      	ldr	r3, [r4, #12]
     962:	691a      	ldr	r2, [r3, #16]
     964:	f012 0f01 	tst.w	r2, #1
     968:	d1fb      	bne.n	962 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     96a:	f248 0280 	movw	r2, #32896	; 0x8080
     96e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     970:	6919      	ldr	r1, [r3, #16]
     972:	f248 0203 	movw	r2, #32771	; 0x8003
     976:	4211      	tst	r1, r2
     978:	d1fa      	bne.n	970 <_timer_init+0x34>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     97a:	68e2      	ldr	r2, [r4, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     97c:	2320      	movs	r3, #32
     97e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     980:	6913      	ldr	r3, [r2, #16]
     982:	f013 0f60 	tst.w	r3, #96	; 0x60
     986:	d1fb      	bne.n	980 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     988:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     98a:	f44f 7280 	mov.w	r2, #256	; 0x100
     98e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
     990:	4b03      	ldr	r3, [pc, #12]	; (9a0 <_timer_init+0x64>)
     992:	601c      	str	r4, [r3, #0]
}
     994:	2000      	movs	r0, #0
     996:	bd38      	pop	{r3, r4, r5, pc}
     998:	00000f9c 	.word	0x00000f9c
     99c:	000007d9 	.word	0x000007d9
     9a0:	2000005c 	.word	0x2000005c

000009a4 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     9a4:	2000      	movs	r0, #0
     9a6:	4770      	bx	lr

000009a8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     9a8:	b508      	push	{r3, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     9aa:	4b02      	ldr	r3, [pc, #8]	; (9b4 <RTC_Handler+0xc>)
     9ac:	6818      	ldr	r0, [r3, #0]
     9ae:	4b02      	ldr	r3, [pc, #8]	; (9b8 <RTC_Handler+0x10>)
     9b0:	4798      	blx	r3
     9b2:	bd08      	pop	{r3, pc}
     9b4:	2000005c 	.word	0x2000005c
     9b8:	0000091d 	.word	0x0000091d

000009bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     9bc:	b470      	push	{r4, r5, r6}
     9be:	b089      	sub	sp, #36	; 0x24
     9c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     9c2:	466c      	mov	r4, sp
     9c4:	4d0c      	ldr	r5, [pc, #48]	; (9f8 <_sercom_get_hardware_index+0x3c>)
     9c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     9c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     9ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     9ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9d2:	2000      	movs	r0, #0
     9d4:	2807      	cmp	r0, #7
     9d6:	d80a      	bhi.n	9ee <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9d8:	ab08      	add	r3, sp, #32
     9da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     9de:	f853 3c20 	ldr.w	r3, [r3, #-32]
     9e2:	42b3      	cmp	r3, r6
     9e4:	d001      	beq.n	9ea <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e6:	3001      	adds	r0, #1
     9e8:	e7f4      	b.n	9d4 <_sercom_get_hardware_index+0x18>
			return i;
     9ea:	b2c0      	uxtb	r0, r0
     9ec:	e000      	b.n	9f0 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     9ee:	2000      	movs	r0, #0
}
     9f0:	b009      	add	sp, #36	; 0x24
     9f2:	bc70      	pop	{r4, r5, r6}
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	00000fb4 	.word	0x00000fb4

000009fc <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     9fc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9fe:	4b0c      	ldr	r3, [pc, #48]	; (a30 <_get_sercom_index+0x34>)
     a00:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a02:	2300      	movs	r3, #0
     a04:	b143      	cbz	r3, a18 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     a06:	f240 2247 	movw	r2, #583	; 0x247
     a0a:	490a      	ldr	r1, [pc, #40]	; (a34 <_get_sercom_index+0x38>)
     a0c:	2000      	movs	r0, #0
     a0e:	4b0a      	ldr	r3, [pc, #40]	; (a38 <_get_sercom_index+0x3c>)
     a10:	4798      	blx	r3
	return 0;
     a12:	2300      	movs	r3, #0
}
     a14:	4618      	mov	r0, r3
     a16:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
     a18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     a1c:	00d1      	lsls	r1, r2, #3
     a1e:	4a07      	ldr	r2, [pc, #28]	; (a3c <_get_sercom_index+0x40>)
     a20:	440a      	add	r2, r1
     a22:	f892 2020 	ldrb.w	r2, [r2, #32]
     a26:	4290      	cmp	r0, r2
     a28:	d0f4      	beq.n	a14 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a2a:	3301      	adds	r3, #1
     a2c:	b2db      	uxtb	r3, r3
     a2e:	e7e9      	b.n	a04 <_get_sercom_index+0x8>
     a30:	000009bd 	.word	0x000009bd
     a34:	00001028 	.word	0x00001028
     a38:	000007d9 	.word	0x000007d9
     a3c:	00000fb4 	.word	0x00000fb4

00000a40 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     a40:	b538      	push	{r3, r4, r5, lr}
     a42:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     a44:	4b3c      	ldr	r3, [pc, #240]	; (b38 <_usart_init+0xf8>)
     a46:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a48:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a4a:	f013 0f01 	tst.w	r3, #1
     a4e:	d122      	bne.n	a96 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a50:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     a54:	00da      	lsls	r2, r3, #3
     a56:	4b39      	ldr	r3, [pc, #228]	; (b3c <_usart_init+0xfc>)
     a58:	4413      	add	r3, r2
     a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     a5c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a60:	69e3      	ldr	r3, [r4, #28]
     a62:	f013 0f03 	tst.w	r3, #3
     a66:	d1fb      	bne.n	a60 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a68:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a6a:	f013 0f02 	tst.w	r3, #2
     a6e:	d00b      	beq.n	a88 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a70:	6823      	ldr	r3, [r4, #0]
     a72:	f023 0302 	bic.w	r3, r3, #2
     a76:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a78:	69e3      	ldr	r3, [r4, #28]
     a7a:	f013 0f03 	tst.w	r3, #3
     a7e:	d1fb      	bne.n	a78 <_usart_init+0x38>
     a80:	69e3      	ldr	r3, [r4, #28]
     a82:	f013 0f02 	tst.w	r3, #2
     a86:	d1fb      	bne.n	a80 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     a88:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a8c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a8e:	69e3      	ldr	r3, [r4, #28]
     a90:	f013 0f03 	tst.w	r3, #3
     a94:	d1fb      	bne.n	a8e <_usart_init+0x4e>
     a96:	69e3      	ldr	r3, [r4, #28]
     a98:	f013 0f01 	tst.w	r3, #1
     a9c:	d1fb      	bne.n	a96 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     a9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     aa2:	00da      	lsls	r2, r3, #3
     aa4:	4b25      	ldr	r3, [pc, #148]	; (b3c <_usart_init+0xfc>)
     aa6:	4413      	add	r3, r2
     aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     aaa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aac:	69e3      	ldr	r3, [r4, #28]
     aae:	f013 0f03 	tst.w	r3, #3
     ab2:	d1fb      	bne.n	aac <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     ab4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     ab8:	00da      	lsls	r2, r3, #3
     aba:	4b20      	ldr	r3, [pc, #128]	; (b3c <_usart_init+0xfc>)
     abc:	4413      	add	r3, r2
     abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     ac0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ac2:	69e3      	ldr	r3, [r4, #28]
     ac4:	f013 0f1f 	tst.w	r3, #31
     ac8:	d1fb      	bne.n	ac2 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     aca:	0042      	lsls	r2, r0, #1
     acc:	4402      	add	r2, r0
     ace:	00d1      	lsls	r1, r2, #3
     ad0:	4b1a      	ldr	r3, [pc, #104]	; (b3c <_usart_init+0xfc>)
     ad2:	440b      	add	r3, r1
     ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     ad6:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ada:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     ade:	d10a      	bne.n	af6 <_usart_init+0xb6>
     ae0:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     ae4:	d107      	bne.n	af6 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     ae6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     aea:	00da      	lsls	r2, r3, #3
     aec:	4b13      	ldr	r3, [pc, #76]	; (b3c <_usart_init+0xfc>)
     aee:	4413      	add	r3, r2
     af0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     af2:	81a3      	strh	r3, [r4, #12]
     af4:	e00f      	b.n	b16 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     af6:	0042      	lsls	r2, r0, #1
     af8:	4402      	add	r2, r0
     afa:	00d1      	lsls	r1, r2, #3
     afc:	4b0f      	ldr	r3, [pc, #60]	; (b3c <_usart_init+0xfc>)
     afe:	440b      	add	r3, r1
     b00:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     b02:	89a2      	ldrh	r2, [r4, #12]
     b04:	f361 020c 	bfi	r2, r1, #0, #13
     b08:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     b0a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     b0e:	89a3      	ldrh	r3, [r4, #12]
     b10:	f362 334f 	bfi	r3, r2, #13, #3
     b14:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b16:	4a09      	ldr	r2, [pc, #36]	; (b3c <_usart_init+0xfc>)
     b18:	0043      	lsls	r3, r0, #1
     b1a:	181d      	adds	r5, r3, r0
     b1c:	00e9      	lsls	r1, r5, #3
     b1e:	460d      	mov	r5, r1
     b20:	4411      	add	r1, r2
     b22:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     b26:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b28:	442a      	add	r2, r5
     b2a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     b32:	2000      	movs	r0, #0
     b34:	bd38      	pop	{r3, r4, r5, pc}
     b36:	bf00      	nop
     b38:	000009fd 	.word	0x000009fd
     b3c:	00000fb4 	.word	0x00000fb4

00000b40 <_usart_sync_init>:
{
     b40:	b538      	push	{r3, r4, r5, lr}
     b42:	460c      	mov	r4, r1
	ASSERT(device);
     b44:	4605      	mov	r5, r0
     b46:	22bb      	movs	r2, #187	; 0xbb
     b48:	4905      	ldr	r1, [pc, #20]	; (b60 <_usart_sync_init+0x20>)
     b4a:	3000      	adds	r0, #0
     b4c:	bf18      	it	ne
     b4e:	2001      	movne	r0, #1
     b50:	4b04      	ldr	r3, [pc, #16]	; (b64 <_usart_sync_init+0x24>)
     b52:	4798      	blx	r3
	device->hw = hw;
     b54:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     b56:	4620      	mov	r0, r4
     b58:	4b03      	ldr	r3, [pc, #12]	; (b68 <_usart_sync_init+0x28>)
     b5a:	4798      	blx	r3
}
     b5c:	bd38      	pop	{r3, r4, r5, pc}
     b5e:	bf00      	nop
     b60:	00001028 	.word	0x00001028
     b64:	000007d9 	.word	0x000007d9
     b68:	00000a41 	.word	0x00000a41

00000b6c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     b6c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     b6e:	6299      	str	r1, [r3, #40]	; 0x28
     b70:	4770      	bx	lr

00000b72 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     b72:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     b74:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     b76:	b2c0      	uxtb	r0, r0
     b78:	4770      	bx	lr

00000b7a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     b7a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     b7c:	7e18      	ldrb	r0, [r3, #24]
}
     b7e:	f000 0001 	and.w	r0, r0, #1
     b82:	4770      	bx	lr

00000b84 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     b84:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     b86:	7e18      	ldrb	r0, [r3, #24]
}
     b88:	f3c0 0040 	ubfx	r0, r0, #1, #1
     b8c:	4770      	bx	lr

00000b8e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     b8e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     b90:	7e18      	ldrb	r0, [r3, #24]
}
     b92:	f3c0 0080 	ubfx	r0, r0, #2, #1
     b96:	4770      	bx	lr

00000b98 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     b98:	4b03      	ldr	r3, [pc, #12]	; (ba8 <_system_time_init+0x10>)
     b9a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     b9e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     ba0:	2205      	movs	r2, #5
     ba2:	601a      	str	r2, [r3, #0]
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop
     ba8:	e000e010 	.word	0xe000e010

00000bac <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
     bac:	b508      	push	{r3, lr}
	_system_time_init(hw);
     bae:	4b01      	ldr	r3, [pc, #4]	; (bb4 <_delay_init+0x8>)
     bb0:	4798      	blx	r3
     bb2:	bd08      	pop	{r3, pc}
     bb4:	00000b99 	.word	0x00000b99

00000bb8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
     bb8:	b538      	push	{r3, r4, r5, lr}
     bba:	4605      	mov	r5, r0
	void *const hw = device->hw;
     bbc:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     bbe:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     bc0:	f013 0f01 	tst.w	r3, #1
     bc4:	d004      	beq.n	bd0 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
     bc6:	2301      	movs	r3, #1
     bc8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
     bca:	6803      	ldr	r3, [r0, #0]
     bcc:	b103      	cbz	r3, bd0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
     bce:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
     bd0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
     bd2:	f013 0f02 	tst.w	r3, #2
     bd6:	d005      	beq.n	be4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
     bd8:	2302      	movs	r3, #2
     bda:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
     bdc:	686b      	ldr	r3, [r5, #4]
     bde:	b10b      	cbz	r3, be4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
     be0:	4628      	mov	r0, r5
     be2:	4798      	blx	r3
     be4:	bd38      	pop	{r3, r4, r5, pc}
	...

00000be8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
     be8:	4b03      	ldr	r3, [pc, #12]	; (bf8 <_tc_init_irq_param+0x10>)
     bea:	4298      	cmp	r0, r3
     bec:	d000      	beq.n	bf0 <_tc_init_irq_param+0x8>
     bee:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
     bf0:	4b02      	ldr	r3, [pc, #8]	; (bfc <_tc_init_irq_param+0x14>)
     bf2:	6019      	str	r1, [r3, #0]
	}
}
     bf4:	e7fb      	b.n	bee <_tc_init_irq_param+0x6>
     bf6:	bf00      	nop
     bf8:	40003800 	.word	0x40003800
     bfc:	20000060 	.word	0x20000060

00000c00 <get_tc_index>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	b088      	sub	sp, #32
     c04:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     c06:	466c      	mov	r4, sp
     c08:	4d16      	ldr	r5, [pc, #88]	; (c64 <get_tc_index+0x64>)
     c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     c0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c16:	2300      	movs	r3, #0
     c18:	2b07      	cmp	r3, #7
     c1a:	d80a      	bhi.n	c32 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
     c1c:	aa08      	add	r2, sp, #32
     c1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     c22:	f852 2c20 	ldr.w	r2, [r2, #-32]
     c26:	42b2      	cmp	r2, r6
     c28:	d001      	beq.n	c2e <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c2a:	3301      	adds	r3, #1
     c2c:	e7f4      	b.n	c18 <get_tc_index+0x18>
			return i;
     c2e:	b2db      	uxtb	r3, r3
     c30:	e000      	b.n	c34 <get_tc_index+0x34>
		}
	}
	return 0;
     c32:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
     c34:	2200      	movs	r2, #0
     c36:	b14a      	cbz	r2, c4c <get_tc_index+0x4c>
	ASSERT(false);
     c38:	f44f 72a9 	mov.w	r2, #338	; 0x152
     c3c:	490a      	ldr	r1, [pc, #40]	; (c68 <get_tc_index+0x68>)
     c3e:	2000      	movs	r0, #0
     c40:	4b0a      	ldr	r3, [pc, #40]	; (c6c <get_tc_index+0x6c>)
     c42:	4798      	blx	r3
	return -1;
     c44:	f04f 30ff 	mov.w	r0, #4294967295
}
     c48:	b008      	add	sp, #32
     c4a:	bd70      	pop	{r4, r5, r6, pc}
		if (_tcs[i].number == index) {
     c4c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
     c50:	0081      	lsls	r1, r0, #2
     c52:	4807      	ldr	r0, [pc, #28]	; (c70 <get_tc_index+0x70>)
     c54:	5c41      	ldrb	r1, [r0, r1]
     c56:	4299      	cmp	r1, r3
     c58:	d002      	beq.n	c60 <get_tc_index+0x60>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
     c5a:	3201      	adds	r2, #1
     c5c:	b2d2      	uxtb	r2, r2
     c5e:	e7ea      	b.n	c36 <get_tc_index+0x36>
			return i;
     c60:	b250      	sxtb	r0, r2
     c62:	e7f1      	b.n	c48 <get_tc_index+0x48>
     c64:	00001044 	.word	0x00001044
     c68:	00001064 	.word	0x00001064
     c6c:	000007d9 	.word	0x000007d9
     c70:	20000000 	.word	0x20000000

00000c74 <_pwm_init>:
{
     c74:	b570      	push	{r4, r5, r6, lr}
     c76:	4606      	mov	r6, r0
     c78:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
     c7a:	4608      	mov	r0, r1
     c7c:	4b59      	ldr	r3, [pc, #356]	; (de4 <_pwm_init+0x170>)
     c7e:	4798      	blx	r3
     c80:	4605      	mov	r5, r0
	device->hw = hw;
     c82:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     c84:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
     c86:	f013 0f01 	tst.w	r3, #1
     c8a:	d119      	bne.n	cc0 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     c8c:	6923      	ldr	r3, [r4, #16]
     c8e:	f013 0f03 	tst.w	r3, #3
     c92:	d1fb      	bne.n	c8c <_pwm_init+0x18>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     c94:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
     c96:	f013 0f02 	tst.w	r3, #2
     c9a:	d00b      	beq.n	cb4 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
     c9c:	6823      	ldr	r3, [r4, #0]
     c9e:	f023 0302 	bic.w	r3, r3, #2
     ca2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     ca4:	6923      	ldr	r3, [r4, #16]
     ca6:	f013 0f03 	tst.w	r3, #3
     caa:	d1fb      	bne.n	ca4 <_pwm_init+0x30>
     cac:	6923      	ldr	r3, [r4, #16]
     cae:	f013 0f02 	tst.w	r3, #2
     cb2:	d1fb      	bne.n	cac <_pwm_init+0x38>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     cb4:	2301      	movs	r3, #1
     cb6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     cb8:	6923      	ldr	r3, [r4, #16]
     cba:	f013 0f03 	tst.w	r3, #3
     cbe:	d1fb      	bne.n	cb8 <_pwm_init+0x44>
     cc0:	6923      	ldr	r3, [r4, #16]
     cc2:	f013 0f01 	tst.w	r3, #1
     cc6:	d1fb      	bne.n	cc0 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
     cc8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     ccc:	009a      	lsls	r2, r3, #2
     cce:	4b46      	ldr	r3, [pc, #280]	; (de8 <_pwm_init+0x174>)
     cd0:	4413      	add	r3, r2
     cd2:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     cd4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     cd6:	6923      	ldr	r3, [r4, #16]
     cd8:	f013 0f03 	tst.w	r3, #3
     cdc:	d1fb      	bne.n	cd6 <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
     cde:	00aa      	lsls	r2, r5, #2
     ce0:	442a      	add	r2, r5
     ce2:	0091      	lsls	r1, r2, #2
     ce4:	4b40      	ldr	r3, [pc, #256]	; (de8 <_pwm_init+0x174>)
     ce6:	440b      	add	r3, r1
     ce8:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
     cea:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
     cec:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
     cee:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
     cf0:	2203      	movs	r2, #3
     cf2:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
     cf4:	685b      	ldr	r3, [r3, #4]
     cf6:	f003 030c 	and.w	r3, r3, #12
     cfa:	2b08      	cmp	r3, #8
     cfc:	d059      	beq.n	db2 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
     cfe:	2b00      	cmp	r3, #0
     d00:	d16b      	bne.n	dda <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
     d02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     d06:	009a      	lsls	r2, r3, #2
     d08:	4b37      	ldr	r3, [pc, #220]	; (de8 <_pwm_init+0x174>)
     d0a:	4413      	add	r3, r2
     d0c:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d0e:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d10:	6923      	ldr	r3, [r4, #16]
     d12:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     d16:	d1fb      	bne.n	d10 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
     d18:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     d1c:	009a      	lsls	r2, r3, #2
     d1e:	4b32      	ldr	r3, [pc, #200]	; (de8 <_pwm_init+0x174>)
     d20:	4413      	add	r3, r2
     d22:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d24:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     d26:	6923      	ldr	r3, [r4, #16]
     d28:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     d2c:	d1fb      	bne.n	d26 <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
     d2e:	4631      	mov	r1, r6
     d30:	4620      	mov	r0, r4
     d32:	4b2e      	ldr	r3, [pc, #184]	; (dec <_pwm_init+0x178>)
     d34:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
     d36:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     d3a:	009a      	lsls	r2, r3, #2
     d3c:	4b2a      	ldr	r3, [pc, #168]	; (de8 <_pwm_init+0x174>)
     d3e:	4413      	add	r3, r2
     d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     d44:	2b00      	cmp	r3, #0
     d46:	db0d      	blt.n	d64 <_pwm_init+0xf0>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d48:	095a      	lsrs	r2, r3, #5
     d4a:	f003 031f 	and.w	r3, r3, #31
     d4e:	2101      	movs	r1, #1
     d50:	fa01 f303 	lsl.w	r3, r1, r3
     d54:	3220      	adds	r2, #32
     d56:	4926      	ldr	r1, [pc, #152]	; (df0 <_pwm_init+0x17c>)
     d58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d60:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
     d64:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     d68:	009a      	lsls	r2, r3, #2
     d6a:	4b1f      	ldr	r3, [pc, #124]	; (de8 <_pwm_init+0x174>)
     d6c:	4413      	add	r3, r2
     d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     d72:	2b00      	cmp	r3, #0
     d74:	db09      	blt.n	d8a <_pwm_init+0x116>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d76:	095a      	lsrs	r2, r3, #5
     d78:	f003 031f 	and.w	r3, r3, #31
     d7c:	2101      	movs	r1, #1
     d7e:	fa01 f303 	lsl.w	r3, r1, r3
     d82:	3260      	adds	r2, #96	; 0x60
     d84:	491a      	ldr	r1, [pc, #104]	; (df0 <_pwm_init+0x17c>)
     d86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
     d8a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
     d8e:	00aa      	lsls	r2, r5, #2
     d90:	4b15      	ldr	r3, [pc, #84]	; (de8 <_pwm_init+0x174>)
     d92:	4413      	add	r3, r2
     d94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
     d98:	2b00      	cmp	r3, #0
     d9a:	db21      	blt.n	de0 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d9c:	0959      	lsrs	r1, r3, #5
     d9e:	f003 031f 	and.w	r3, r3, #31
     da2:	2201      	movs	r2, #1
     da4:	fa02 f303 	lsl.w	r3, r2, r3
     da8:	4a11      	ldr	r2, [pc, #68]	; (df0 <_pwm_init+0x17c>)
     daa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
     dae:	2000      	movs	r0, #0
     db0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
     db2:	4b0d      	ldr	r3, [pc, #52]	; (de8 <_pwm_init+0x174>)
     db4:	440b      	add	r3, r1
     db6:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     db8:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dba:	6923      	ldr	r3, [r4, #16]
     dbc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     dc0:	d1fb      	bne.n	dba <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
     dc2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
     dc6:	009a      	lsls	r2, r3, #2
     dc8:	4b07      	ldr	r3, [pc, #28]	; (de8 <_pwm_init+0x174>)
     dca:	4413      	add	r3, r2
     dcc:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     dce:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     dd0:	6923      	ldr	r3, [r4, #16]
     dd2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     dd6:	d1fb      	bne.n	dd0 <_pwm_init+0x15c>
     dd8:	e7a9      	b.n	d2e <_pwm_init+0xba>
		return -1;
     dda:	f04f 30ff 	mov.w	r0, #4294967295
     dde:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
     de0:	2000      	movs	r0, #0
}
     de2:	bd70      	pop	{r4, r5, r6, pc}
     de4:	00000c01 	.word	0x00000c01
     de8:	20000000 	.word	0x20000000
     dec:	00000be9 	.word	0x00000be9
     df0:	e000e100 	.word	0xe000e100

00000df4 <_tc_get_pwm>:
}
     df4:	2000      	movs	r0, #0
     df6:	4770      	bx	lr

00000df8 <TC0_Handler>:
{
     df8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
     dfa:	4b02      	ldr	r3, [pc, #8]	; (e04 <TC0_Handler+0xc>)
     dfc:	6818      	ldr	r0, [r3, #0]
     dfe:	4b02      	ldr	r3, [pc, #8]	; (e08 <TC0_Handler+0x10>)
     e00:	4798      	blx	r3
     e02:	bd08      	pop	{r3, pc}
     e04:	20000060 	.word	0x20000060
     e08:	00000bb9 	.word	0x00000bb9

00000e0c <HandleEvent>:
int CurrentState = 0;
int NextState = 0;

void HandleEvent()
{	
	switch (CurrentState){
     e0c:	4b0b      	ldr	r3, [pc, #44]	; (e3c <HandleEvent+0x30>)
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	2b04      	cmp	r3, #4
     e12:	d80d      	bhi.n	e30 <HandleEvent+0x24>
     e14:	e8df f003 	tbb	[pc, r3]
     e18:	03030303 	.word	0x03030303
     e1c:	03          	.byte	0x03
     e1d:	00          	.byte	0x00
			CurrentState = 4;				//1
			}else{
			CurrentState = 3;
		}		
	case 4:
		if(bit_entered == on_pattern[5]){
     e1e:	4b08      	ldr	r3, [pc, #32]	; (e40 <HandleEvent+0x34>)
     e20:	695a      	ldr	r2, [r3, #20]
     e22:	4b08      	ldr	r3, [pc, #32]	; (e44 <HandleEvent+0x38>)
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	429a      	cmp	r2, r3
     e28:	d003      	beq.n	e32 <HandleEvent+0x26>
			CurrentState = 5;				//1
			}else{
			CurrentState = 4;
     e2a:	2204      	movs	r2, #4
     e2c:	4b03      	ldr	r3, [pc, #12]	; (e3c <HandleEvent+0x30>)
     e2e:	601a      	str	r2, [r3, #0]
     e30:	4770      	bx	lr
			CurrentState = 5;				//1
     e32:	2205      	movs	r2, #5
     e34:	4b01      	ldr	r3, [pc, #4]	; (e3c <HandleEvent+0x30>)
     e36:	601a      	str	r2, [r3, #0]
     e38:	4770      	bx	lr
     e3a:	bf00      	nop
     e3c:	20000064 	.word	0x20000064
     e40:	20000014 	.word	0x20000014
     e44:	200000c0 	.word	0x200000c0

00000e48 <ReadButton>:
		}
	}		
}

void ReadButton()
{
     e48:	b510      	push	{r4, lr}
     e4a:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     e4c:	4668      	mov	r0, sp
     e4e:	4b15      	ldr	r3, [pc, #84]	; (ea4 <ReadButton+0x5c>)
     e50:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     e52:	4b15      	ldr	r3, [pc, #84]	; (ea8 <ReadButton+0x60>)
     e54:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     e58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     e5c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     e60:	4054      	eors	r4, r2
     e62:	400c      	ands	r4, r1
     e64:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     e66:	4668      	mov	r0, sp
     e68:	4b10      	ldr	r3, [pc, #64]	; (eac <ReadButton+0x64>)
     e6a:	4798      	blx	r3
	if(gpio_get_pin_level(SW0)){
     e6c:	2c00      	cmp	r4, #0
     e6e:	db01      	blt.n	e74 <ReadButton+0x2c>
		bit_entered = gpio_get_pin_level(DIP_IN); 
	HandleEvent();
	}
}
     e70:	b002      	add	sp, #8
     e72:	bd10      	pop	{r4, pc}
	CRITICAL_SECTION_ENTER();
     e74:	a801      	add	r0, sp, #4
     e76:	4b0b      	ldr	r3, [pc, #44]	; (ea4 <ReadButton+0x5c>)
     e78:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     e7a:	4b0b      	ldr	r3, [pc, #44]	; (ea8 <ReadButton+0x60>)
     e7c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     e80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     e84:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     e88:	4054      	eors	r4, r2
     e8a:	400c      	ands	r4, r1
     e8c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     e8e:	a801      	add	r0, sp, #4
     e90:	4b06      	ldr	r3, [pc, #24]	; (eac <ReadButton+0x64>)
     e92:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     e94:	f3c4 0440 	ubfx	r4, r4, #1, #1
		bit_entered = gpio_get_pin_level(DIP_IN); 
     e98:	4b05      	ldr	r3, [pc, #20]	; (eb0 <ReadButton+0x68>)
     e9a:	601c      	str	r4, [r3, #0]
	HandleEvent();
     e9c:	4b05      	ldr	r3, [pc, #20]	; (eb4 <ReadButton+0x6c>)
     e9e:	4798      	blx	r3
}
     ea0:	e7e6      	b.n	e70 <ReadButton+0x28>
     ea2:	bf00      	nop
     ea4:	00000541 	.word	0x00000541
     ea8:	41008000 	.word	0x41008000
     eac:	0000054f 	.word	0x0000054f
     eb0:	200000c0 	.word	0x200000c0
     eb4:	00000e0d 	.word	0x00000e0d

00000eb8 <main>:

int main(void)
{
     eb8:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     eba:	4b07      	ldr	r3, [pc, #28]	; (ed8 <main+0x20>)
     ebc:	4798      	blx	r3
	
	/* Replace with your application code */
	while (1) {
		ReadButton();
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <main+0x24>)
     ec0:	4798      	blx	r3
		if(CurrentState == 5){
     ec2:	4b07      	ldr	r3, [pc, #28]	; (ee0 <main+0x28>)
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	2b05      	cmp	r3, #5
     ec8:	d1f9      	bne.n	ebe <main+0x6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     eca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     ece:	4b05      	ldr	r3, [pc, #20]	; (ee4 <main+0x2c>)
     ed0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     ed4:	e7f3      	b.n	ebe <main+0x6>
     ed6:	bf00      	nop
     ed8:	000002d1 	.word	0x000002d1
     edc:	00000e49 	.word	0x00000e49
     ee0:	20000064 	.word	0x20000064
     ee4:	41008000 	.word	0x41008000

00000ee8 <__libc_init_array>:
     ee8:	b570      	push	{r4, r5, r6, lr}
     eea:	4e0d      	ldr	r6, [pc, #52]	; (f20 <__libc_init_array+0x38>)
     eec:	4c0d      	ldr	r4, [pc, #52]	; (f24 <__libc_init_array+0x3c>)
     eee:	1ba4      	subs	r4, r4, r6
     ef0:	10a4      	asrs	r4, r4, #2
     ef2:	2500      	movs	r5, #0
     ef4:	42a5      	cmp	r5, r4
     ef6:	d109      	bne.n	f0c <__libc_init_array+0x24>
     ef8:	4e0b      	ldr	r6, [pc, #44]	; (f28 <__libc_init_array+0x40>)
     efa:	4c0c      	ldr	r4, [pc, #48]	; (f2c <__libc_init_array+0x44>)
     efc:	f000 f8bc 	bl	1078 <_init>
     f00:	1ba4      	subs	r4, r4, r6
     f02:	10a4      	asrs	r4, r4, #2
     f04:	2500      	movs	r5, #0
     f06:	42a5      	cmp	r5, r4
     f08:	d105      	bne.n	f16 <__libc_init_array+0x2e>
     f0a:	bd70      	pop	{r4, r5, r6, pc}
     f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
     f10:	4798      	blx	r3
     f12:	3501      	adds	r5, #1
     f14:	e7ee      	b.n	ef4 <__libc_init_array+0xc>
     f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
     f1a:	4798      	blx	r3
     f1c:	3501      	adds	r5, #1
     f1e:	e7f2      	b.n	f06 <__libc_init_array+0x1e>
     f20:	00001084 	.word	0x00001084
     f24:	00001084 	.word	0x00001084
     f28:	00001084 	.word	0x00001084
     f2c:	00001088 	.word	0x00001088
     f30:	682f2e2e 	.word	0x682f2e2e
     f34:	732f6c61 	.word	0x732f6c61
     f38:	682f6372 	.word	0x682f6372
     f3c:	705f6c61 	.word	0x705f6c61
     f40:	632e6d77 	.word	0x632e6d77
     f44:	00000000 	.word	0x00000000
     f48:	682f2e2e 	.word	0x682f2e2e
     f4c:	732f6c61 	.word	0x732f6c61
     f50:	682f6372 	.word	0x682f6372
     f54:	745f6c61 	.word	0x745f6c61
     f58:	72656d69 	.word	0x72656d69
     f5c:	0000632e 	.word	0x0000632e
     f60:	682f2e2e 	.word	0x682f2e2e
     f64:	732f6c61 	.word	0x732f6c61
     f68:	682f6372 	.word	0x682f6372
     f6c:	755f6c61 	.word	0x755f6c61
     f70:	74726173 	.word	0x74726173
     f74:	6e79735f 	.word	0x6e79735f
     f78:	00632e63 	.word	0x00632e63
     f7c:	682f2e2e 	.word	0x682f2e2e
     f80:	752f6c61 	.word	0x752f6c61
     f84:	736c6974 	.word	0x736c6974
     f88:	6372732f 	.word	0x6372732f
     f8c:	6974752f 	.word	0x6974752f
     f90:	6c5f736c 	.word	0x6c5f736c
     f94:	2e747369 	.word	0x2e747369
     f98:	00000063 	.word	0x00000063
     f9c:	682f2e2e 	.word	0x682f2e2e
     fa0:	722f6c70 	.word	0x722f6c70
     fa4:	682f6374 	.word	0x682f6374
     fa8:	725f6c70 	.word	0x725f6c70
     fac:	632e6374 	.word	0x632e6374
     fb0:	00000000 	.word	0x00000000
     fb4:	40003000 	.word	0x40003000
     fb8:	40003400 	.word	0x40003400
     fbc:	41012000 	.word	0x41012000
     fc0:	41014000 	.word	0x41014000
     fc4:	43000000 	.word	0x43000000
     fc8:	43000400 	.word	0x43000400
     fcc:	43000800 	.word	0x43000800
     fd0:	43000c00 	.word	0x43000c00

00000fd4 <_usarts>:
     fd4:	00000000 40100004 00030000 00700002     .......@......p.
     fe4:	0000fcb9 00000000                       ........

00000fec <_i2cms>:
	...

00001004 <_i2css>:
	...

00001014 <sercomspi_regs>:
	...
    1028:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1038:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    1048:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    1058:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    1068:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

00001078 <_init>:
    1078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    107a:	bf00      	nop
    107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    107e:	bc08      	pop	{r3}
    1080:	469e      	mov	lr, r3
    1082:	4770      	bx	lr

00001084 <__init_array_start>:
    1084:	00000289 	.word	0x00000289

00001088 <_fini>:
    1088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    108a:	bf00      	nop
    108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    108e:	bc08      	pop	{r3}
    1090:	469e      	mov	lr, r3
    1092:	4770      	bx	lr

00001094 <__fini_array_start>:
    1094:	00000265 	.word	0x00000265
