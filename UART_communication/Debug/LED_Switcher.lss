
LED_Switcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000292c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  0000292c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020018  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020018  2**0
                  CONTENTS
  4 .bss          00000074  20000018  00002948  00020018  2**3
                  ALLOC
  5 .stack        00010004  2000008c  000029bc  00020018  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
  8 .debug_info   000209c4  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002727  00000000  00000000  00040a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009ba2  00000000  00000000  0004318a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001128  00000000  00000000  0004cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ff0  00000000  00000000  0004de54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032417  00000000  00000000  0004ee44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012e23  00000000  00000000  0008125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00115cc0  00000000  00000000  0009407e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004920  00000000  00000000  001a9d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 00 01 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	65 16 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     e...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	35 14 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     5...}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     124:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	7d 03 00 00 31 23 00 00 7d 03 00 00 7d 03 00 00     }...1#..}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1f4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000018 	.word	0x20000018
     280:	00000000 	.word	0x00000000
     284:	0000292c 	.word	0x0000292c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000292c 	.word	0x0000292c
     2c4:	2000001c 	.word	0x2000001c
     2c8:	0000292c 	.word	0x0000292c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000ad9 	.word	0x00000ad9

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	0000292c 	.word	0x0000292c
     35c:	20000000 	.word	0x20000000
     360:	20000018 	.word	0x20000018
     364:	20000018 	.word	0x20000018
     368:	2000008c 	.word	0x2000008c
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	000027d9 	.word	0x000027d9
     378:	000020d1 	.word	0x000020d1

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	699b      	ldr	r3, [r3, #24]
     3d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	699b      	ldr	r3, [r3, #24]
     3f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     408:	b480      	push	{r7}
     40a:	b085      	sub	sp, #20
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	460b      	mov	r3, r1
     412:	607a      	str	r2, [r7, #4]
     414:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     416:	7afb      	ldrb	r3, [r7, #11]
     418:	68fa      	ldr	r2, [r7, #12]
     41a:	01db      	lsls	r3, r3, #7
     41c:	4413      	add	r3, r2
     41e:	3308      	adds	r3, #8
     420:	687a      	ldr	r2, [r7, #4]
     422:	601a      	str	r2, [r3, #0]
}
     424:	bf00      	nop
     426:	3714      	adds	r7, #20
     428:	46bd      	mov	sp, r7
     42a:	f85d 7b04 	ldr.w	r7, [sp], #4
     42e:	4770      	bx	lr

00000430 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     430:	b480      	push	{r7}
     432:	b085      	sub	sp, #20
     434:	af00      	add	r7, sp, #0
     436:	60f8      	str	r0, [r7, #12]
     438:	460b      	mov	r3, r1
     43a:	607a      	str	r2, [r7, #4]
     43c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     43e:	7afb      	ldrb	r3, [r7, #11]
     440:	68fa      	ldr	r2, [r7, #12]
     442:	01db      	lsls	r3, r3, #7
     444:	4413      	add	r3, r2
     446:	3304      	adds	r3, #4
     448:	687a      	ldr	r2, [r7, #4]
     44a:	601a      	str	r2, [r3, #0]
}
     44c:	bf00      	nop
     44e:	3714      	adds	r7, #20
     450:	46bd      	mov	sp, r7
     452:	f85d 7b04 	ldr.w	r7, [sp], #4
     456:	4770      	bx	lr

00000458 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     458:	b480      	push	{r7}
     45a:	b085      	sub	sp, #20
     45c:	af00      	add	r7, sp, #0
     45e:	60f8      	str	r0, [r7, #12]
     460:	460b      	mov	r3, r1
     462:	607a      	str	r2, [r7, #4]
     464:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     466:	7afb      	ldrb	r3, [r7, #11]
     468:	68fa      	ldr	r2, [r7, #12]
     46a:	01db      	lsls	r3, r3, #7
     46c:	4413      	add	r3, r2
     46e:	3318      	adds	r3, #24
     470:	687a      	ldr	r2, [r7, #4]
     472:	601a      	str	r2, [r3, #0]
}
     474:	bf00      	nop
     476:	3714      	adds	r7, #20
     478:	46bd      	mov	sp, r7
     47a:	f85d 7b04 	ldr.w	r7, [sp], #4
     47e:	4770      	bx	lr

00000480 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	460b      	mov	r3, r1
     48a:	607a      	str	r2, [r7, #4]
     48c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48e:	7afb      	ldrb	r3, [r7, #11]
     490:	68fa      	ldr	r2, [r7, #12]
     492:	01db      	lsls	r3, r3, #7
     494:	4413      	add	r3, r2
     496:	3314      	adds	r3, #20
     498:	687a      	ldr	r2, [r7, #4]
     49a:	601a      	str	r2, [r3, #0]
}
     49c:	bf00      	nop
     49e:	3714      	adds	r7, #20
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     4a8:	b480      	push	{r7}
     4aa:	b085      	sub	sp, #20
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	4608      	mov	r0, r1
     4b2:	4611      	mov	r1, r2
     4b4:	461a      	mov	r2, r3
     4b6:	4603      	mov	r3, r0
     4b8:	70fb      	strb	r3, [r7, #3]
     4ba:	460b      	mov	r3, r1
     4bc:	70bb      	strb	r3, [r7, #2]
     4be:	4613      	mov	r3, r2
     4c0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c2:	78fa      	ldrb	r2, [r7, #3]
     4c4:	78bb      	ldrb	r3, [r7, #2]
     4c6:	6879      	ldr	r1, [r7, #4]
     4c8:	01d2      	lsls	r2, r2, #7
     4ca:	440a      	add	r2, r1
     4cc:	4413      	add	r3, r2
     4ce:	3330      	adds	r3, #48	; 0x30
     4d0:	781b      	ldrb	r3, [r3, #0]
     4d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d4:	7bfb      	ldrb	r3, [r7, #15]
     4d6:	f023 030f 	bic.w	r3, r3, #15
     4da:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     4dc:	787b      	ldrb	r3, [r7, #1]
     4de:	f003 030f 	and.w	r3, r3, #15
     4e2:	b2da      	uxtb	r2, r3
     4e4:	7bfb      	ldrb	r3, [r7, #15]
     4e6:	4313      	orrs	r3, r2
     4e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	78fa      	ldrb	r2, [r7, #3]
     4ec:	78bb      	ldrb	r3, [r7, #2]
     4ee:	6879      	ldr	r1, [r7, #4]
     4f0:	01d2      	lsls	r2, r2, #7
     4f2:	440a      	add	r2, r1
     4f4:	4413      	add	r3, r2
     4f6:	3330      	adds	r3, #48	; 0x30
     4f8:	7bfa      	ldrb	r2, [r7, #15]
     4fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4fc:	bf00      	nop
     4fe:	3714      	adds	r7, #20
     500:	46bd      	mov	sp, r7
     502:	f85d 7b04 	ldr.w	r7, [sp], #4
     506:	4770      	bx	lr

00000508 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     508:	b480      	push	{r7}
     50a:	b085      	sub	sp, #20
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
     510:	4608      	mov	r0, r1
     512:	4611      	mov	r1, r2
     514:	461a      	mov	r2, r3
     516:	4603      	mov	r3, r0
     518:	70fb      	strb	r3, [r7, #3]
     51a:	460b      	mov	r3, r1
     51c:	70bb      	strb	r3, [r7, #2]
     51e:	4613      	mov	r3, r2
     520:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     522:	78fa      	ldrb	r2, [r7, #3]
     524:	78bb      	ldrb	r3, [r7, #2]
     526:	6879      	ldr	r1, [r7, #4]
     528:	01d2      	lsls	r2, r2, #7
     52a:	440a      	add	r2, r1
     52c:	4413      	add	r3, r2
     52e:	3330      	adds	r3, #48	; 0x30
     530:	781b      	ldrb	r3, [r3, #0]
     532:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     534:	7bfb      	ldrb	r3, [r7, #15]
     536:	f003 030f 	and.w	r3, r3, #15
     53a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     53c:	787b      	ldrb	r3, [r7, #1]
     53e:	011b      	lsls	r3, r3, #4
     540:	b2da      	uxtb	r2, r3
     542:	7bfb      	ldrb	r3, [r7, #15]
     544:	4313      	orrs	r3, r2
     546:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     548:	78fa      	ldrb	r2, [r7, #3]
     54a:	78bb      	ldrb	r3, [r7, #2]
     54c:	6879      	ldr	r1, [r7, #4]
     54e:	01d2      	lsls	r2, r2, #7
     550:	440a      	add	r2, r1
     552:	4413      	add	r3, r2
     554:	3330      	adds	r3, #48	; 0x30
     556:	7bfa      	ldrb	r2, [r7, #15]
     558:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55a:	bf00      	nop
     55c:	3714      	adds	r7, #20
     55e:	46bd      	mov	sp, r7
     560:	f85d 7b04 	ldr.w	r7, [sp], #4
     564:	4770      	bx	lr

00000566 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     566:	b480      	push	{r7}
     568:	b085      	sub	sp, #20
     56a:	af00      	add	r7, sp, #0
     56c:	6078      	str	r0, [r7, #4]
     56e:	4608      	mov	r0, r1
     570:	4611      	mov	r1, r2
     572:	461a      	mov	r2, r3
     574:	4603      	mov	r3, r0
     576:	70fb      	strb	r3, [r7, #3]
     578:	460b      	mov	r3, r1
     57a:	70bb      	strb	r3, [r7, #2]
     57c:	4613      	mov	r3, r2
     57e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	78fa      	ldrb	r2, [r7, #3]
     582:	78bb      	ldrb	r3, [r7, #2]
     584:	6879      	ldr	r1, [r7, #4]
     586:	01d2      	lsls	r2, r2, #7
     588:	440a      	add	r2, r1
     58a:	4413      	add	r3, r2
     58c:	3340      	adds	r3, #64	; 0x40
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	7bfb      	ldrb	r3, [r7, #15]
     594:	f023 0301 	bic.w	r3, r3, #1
     598:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59a:	787a      	ldrb	r2, [r7, #1]
     59c:	7bfb      	ldrb	r3, [r7, #15]
     59e:	4313      	orrs	r3, r2
     5a0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a2:	78fa      	ldrb	r2, [r7, #3]
     5a4:	78bb      	ldrb	r3, [r7, #2]
     5a6:	6879      	ldr	r1, [r7, #4]
     5a8:	01d2      	lsls	r2, r2, #7
     5aa:	440a      	add	r2, r1
     5ac:	4413      	add	r3, r2
     5ae:	3340      	adds	r3, #64	; 0x40
     5b0:	7bfa      	ldrb	r2, [r7, #15]
     5b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5b4:	bf00      	nop
     5b6:	3714      	adds	r7, #20
     5b8:	46bd      	mov	sp, r7
     5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     5be:	4770      	bx	lr

000005c0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     5c0:	b490      	push	{r4, r7}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
     5c8:	460b      	mov	r3, r1
     5ca:	70fb      	strb	r3, [r7, #3]
     5cc:	4613      	mov	r3, r2
     5ce:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5d0:	78fa      	ldrb	r2, [r7, #3]
     5d2:	78bb      	ldrb	r3, [r7, #2]
     5d4:	78f8      	ldrb	r0, [r7, #3]
     5d6:	78b9      	ldrb	r1, [r7, #2]
     5d8:	687c      	ldr	r4, [r7, #4]
     5da:	01c0      	lsls	r0, r0, #7
     5dc:	4420      	add	r0, r4
     5de:	4401      	add	r1, r0
     5e0:	3140      	adds	r1, #64	; 0x40
     5e2:	7809      	ldrb	r1, [r1, #0]
     5e4:	b2c9      	uxtb	r1, r1
     5e6:	f041 0104 	orr.w	r1, r1, #4
     5ea:	b2c8      	uxtb	r0, r1
     5ec:	6879      	ldr	r1, [r7, #4]
     5ee:	01d2      	lsls	r2, r2, #7
     5f0:	440a      	add	r2, r1
     5f2:	4413      	add	r3, r2
     5f4:	3340      	adds	r3, #64	; 0x40
     5f6:	4602      	mov	r2, r0
     5f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5fa:	bf00      	nop
     5fc:	3708      	adds	r7, #8
     5fe:	46bd      	mov	sp, r7
     600:	bc90      	pop	{r4, r7}
     602:	4770      	bx	lr

00000604 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     604:	b490      	push	{r4, r7}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
     60c:	460b      	mov	r3, r1
     60e:	70fb      	strb	r3, [r7, #3]
     610:	4613      	mov	r3, r2
     612:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     614:	78fa      	ldrb	r2, [r7, #3]
     616:	78bb      	ldrb	r3, [r7, #2]
     618:	78f8      	ldrb	r0, [r7, #3]
     61a:	78b9      	ldrb	r1, [r7, #2]
     61c:	687c      	ldr	r4, [r7, #4]
     61e:	01c0      	lsls	r0, r0, #7
     620:	4420      	add	r0, r4
     622:	4401      	add	r1, r0
     624:	3140      	adds	r1, #64	; 0x40
     626:	7809      	ldrb	r1, [r1, #0]
     628:	b2c9      	uxtb	r1, r1
     62a:	f021 0104 	bic.w	r1, r1, #4
     62e:	b2c8      	uxtb	r0, r1
     630:	6879      	ldr	r1, [r7, #4]
     632:	01d2      	lsls	r2, r2, #7
     634:	440a      	add	r2, r1
     636:	4413      	add	r3, r2
     638:	3340      	adds	r3, #64	; 0x40
     63a:	4602      	mov	r2, r0
     63c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     63e:	bf00      	nop
     640:	3708      	adds	r7, #8
     642:	46bd      	mov	sp, r7
     644:	bc90      	pop	{r4, r7}
     646:	4770      	bx	lr

00000648 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     648:	b480      	push	{r7}
     64a:	b085      	sub	sp, #20
     64c:	af00      	add	r7, sp, #0
     64e:	60f8      	str	r0, [r7, #12]
     650:	460b      	mov	r3, r1
     652:	607a      	str	r2, [r7, #4]
     654:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     656:	7afb      	ldrb	r3, [r7, #11]
     658:	68fa      	ldr	r2, [r7, #12]
     65a:	01db      	lsls	r3, r3, #7
     65c:	4413      	add	r3, r2
     65e:	3328      	adds	r3, #40	; 0x28
     660:	687a      	ldr	r2, [r7, #4]
     662:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     664:	bf00      	nop
     666:	3714      	adds	r7, #20
     668:	46bd      	mov	sp, r7
     66a:	f85d 7b04 	ldr.w	r7, [sp], #4
     66e:	4770      	bx	lr

00000670 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	4603      	mov	r3, r0
     678:	6039      	str	r1, [r7, #0]
     67a:	71fb      	strb	r3, [r7, #7]
     67c:	4613      	mov	r3, r2
     67e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     680:	79bb      	ldrb	r3, [r7, #6]
     682:	2b01      	cmp	r3, #1
     684:	d01c      	beq.n	6c0 <_gpio_set_direction+0x50>
     686:	2b02      	cmp	r3, #2
     688:	d037      	beq.n	6fa <_gpio_set_direction+0x8a>
     68a:	2b00      	cmp	r3, #0
     68c:	d14e      	bne.n	72c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     68e:	79fb      	ldrb	r3, [r7, #7]
     690:	683a      	ldr	r2, [r7, #0]
     692:	4619      	mov	r1, r3
     694:	482a      	ldr	r0, [pc, #168]	; (740 <_gpio_set_direction+0xd0>)
     696:	4b2b      	ldr	r3, [pc, #172]	; (744 <_gpio_set_direction+0xd4>)
     698:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     69a:	683b      	ldr	r3, [r7, #0]
     69c:	b29b      	uxth	r3, r3
     69e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     6a2:	79fb      	ldrb	r3, [r7, #7]
     6a4:	4619      	mov	r1, r3
     6a6:	4826      	ldr	r0, [pc, #152]	; (740 <_gpio_set_direction+0xd0>)
     6a8:	4b27      	ldr	r3, [pc, #156]	; (748 <_gpio_set_direction+0xd8>)
     6aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6ac:	683b      	ldr	r3, [r7, #0]
     6ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     6b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     6b4:	79fb      	ldrb	r3, [r7, #7]
     6b6:	4619      	mov	r1, r3
     6b8:	4821      	ldr	r0, [pc, #132]	; (740 <_gpio_set_direction+0xd0>)
     6ba:	4b23      	ldr	r3, [pc, #140]	; (748 <_gpio_set_direction+0xd8>)
     6bc:	4798      	blx	r3
		break;
     6be:	e03a      	b.n	736 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6c0:	79fb      	ldrb	r3, [r7, #7]
     6c2:	683a      	ldr	r2, [r7, #0]
     6c4:	4619      	mov	r1, r3
     6c6:	481e      	ldr	r0, [pc, #120]	; (740 <_gpio_set_direction+0xd0>)
     6c8:	4b1e      	ldr	r3, [pc, #120]	; (744 <_gpio_set_direction+0xd4>)
     6ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	b29b      	uxth	r3, r3
     6d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     6d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6d8:	79f9      	ldrb	r1, [r7, #7]
     6da:	461a      	mov	r2, r3
     6dc:	4818      	ldr	r0, [pc, #96]	; (740 <_gpio_set_direction+0xd0>)
     6de:	4b1a      	ldr	r3, [pc, #104]	; (748 <_gpio_set_direction+0xd8>)
     6e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     6e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     6ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     6ee:	79f9      	ldrb	r1, [r7, #7]
     6f0:	461a      	mov	r2, r3
     6f2:	4813      	ldr	r0, [pc, #76]	; (740 <_gpio_set_direction+0xd0>)
     6f4:	4b14      	ldr	r3, [pc, #80]	; (748 <_gpio_set_direction+0xd8>)
     6f6:	4798      	blx	r3
		break;
     6f8:	e01d      	b.n	736 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     6fa:	79fb      	ldrb	r3, [r7, #7]
     6fc:	683a      	ldr	r2, [r7, #0]
     6fe:	4619      	mov	r1, r3
     700:	480f      	ldr	r0, [pc, #60]	; (740 <_gpio_set_direction+0xd0>)
     702:	4b12      	ldr	r3, [pc, #72]	; (74c <_gpio_set_direction+0xdc>)
     704:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     706:	683b      	ldr	r3, [r7, #0]
     708:	b29b      	uxth	r3, r3
     70a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     70e:	79fb      	ldrb	r3, [r7, #7]
     710:	4619      	mov	r1, r3
     712:	480b      	ldr	r0, [pc, #44]	; (740 <_gpio_set_direction+0xd0>)
     714:	4b0c      	ldr	r3, [pc, #48]	; (748 <_gpio_set_direction+0xd8>)
     716:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     718:	683b      	ldr	r3, [r7, #0]
     71a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     71c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     720:	79fb      	ldrb	r3, [r7, #7]
     722:	4619      	mov	r1, r3
     724:	4806      	ldr	r0, [pc, #24]	; (740 <_gpio_set_direction+0xd0>)
     726:	4b08      	ldr	r3, [pc, #32]	; (748 <_gpio_set_direction+0xd8>)
     728:	4798      	blx	r3
		break;
     72a:	e004      	b.n	736 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     72c:	2246      	movs	r2, #70	; 0x46
     72e:	4908      	ldr	r1, [pc, #32]	; (750 <_gpio_set_direction+0xe0>)
     730:	2000      	movs	r0, #0
     732:	4b08      	ldr	r3, [pc, #32]	; (754 <_gpio_set_direction+0xe4>)
     734:	4798      	blx	r3
	}
}
     736:	bf00      	nop
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}
     73e:	bf00      	nop
     740:	41008000 	.word	0x41008000
     744:	00000431 	.word	0x00000431
     748:	00000649 	.word	0x00000649
     74c:	00000409 	.word	0x00000409
     750:	00002820 	.word	0x00002820
     754:	00001061 	.word	0x00001061

00000758 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     758:	b580      	push	{r7, lr}
     75a:	b082      	sub	sp, #8
     75c:	af00      	add	r7, sp, #0
     75e:	4603      	mov	r3, r0
     760:	6039      	str	r1, [r7, #0]
     762:	71fb      	strb	r3, [r7, #7]
     764:	4613      	mov	r3, r2
     766:	71bb      	strb	r3, [r7, #6]
	if (level) {
     768:	79bb      	ldrb	r3, [r7, #6]
     76a:	2b00      	cmp	r3, #0
     76c:	d006      	beq.n	77c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     76e:	79fb      	ldrb	r3, [r7, #7]
     770:	683a      	ldr	r2, [r7, #0]
     772:	4619      	mov	r1, r3
     774:	4806      	ldr	r0, [pc, #24]	; (790 <_gpio_set_level+0x38>)
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <_gpio_set_level+0x3c>)
     778:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     77a:	e005      	b.n	788 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     77c:	79fb      	ldrb	r3, [r7, #7]
     77e:	683a      	ldr	r2, [r7, #0]
     780:	4619      	mov	r1, r3
     782:	4803      	ldr	r0, [pc, #12]	; (790 <_gpio_set_level+0x38>)
     784:	4b04      	ldr	r3, [pc, #16]	; (798 <_gpio_set_level+0x40>)
     786:	4798      	blx	r3
}
     788:	bf00      	nop
     78a:	3708      	adds	r7, #8
     78c:	46bd      	mov	sp, r7
     78e:	bd80      	pop	{r7, pc}
     790:	41008000 	.word	0x41008000
     794:	00000459 	.word	0x00000459
     798:	00000481 	.word	0x00000481

0000079c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     79c:	b580      	push	{r7, lr}
     79e:	b082      	sub	sp, #8
     7a0:	af00      	add	r7, sp, #0
     7a2:	4603      	mov	r3, r0
     7a4:	71fb      	strb	r3, [r7, #7]
     7a6:	460b      	mov	r3, r1
     7a8:	71bb      	strb	r3, [r7, #6]
     7aa:	4613      	mov	r3, r2
     7ac:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     7ae:	797b      	ldrb	r3, [r7, #5]
     7b0:	2b01      	cmp	r3, #1
     7b2:	d00a      	beq.n	7ca <_gpio_set_pin_pull_mode+0x2e>
     7b4:	2b02      	cmp	r3, #2
     7b6:	d01f      	beq.n	7f8 <_gpio_set_pin_pull_mode+0x5c>
     7b8:	2b00      	cmp	r3, #0
     7ba:	d134      	bne.n	826 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     7bc:	79ba      	ldrb	r2, [r7, #6]
     7be:	79fb      	ldrb	r3, [r7, #7]
     7c0:	4619      	mov	r1, r3
     7c2:	481e      	ldr	r0, [pc, #120]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7c4:	4b1e      	ldr	r3, [pc, #120]	; (840 <_gpio_set_pin_pull_mode+0xa4>)
     7c6:	4798      	blx	r3
		break;
     7c8:	e033      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7ca:	79bb      	ldrb	r3, [r7, #6]
     7cc:	2201      	movs	r2, #1
     7ce:	409a      	lsls	r2, r3
     7d0:	79fb      	ldrb	r3, [r7, #7]
     7d2:	4619      	mov	r1, r3
     7d4:	4819      	ldr	r0, [pc, #100]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7d6:	4b1b      	ldr	r3, [pc, #108]	; (844 <_gpio_set_pin_pull_mode+0xa8>)
     7d8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7da:	79ba      	ldrb	r2, [r7, #6]
     7dc:	79fb      	ldrb	r3, [r7, #7]
     7de:	4619      	mov	r1, r3
     7e0:	4816      	ldr	r0, [pc, #88]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7e2:	4b19      	ldr	r3, [pc, #100]	; (848 <_gpio_set_pin_pull_mode+0xac>)
     7e4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     7e6:	79bb      	ldrb	r3, [r7, #6]
     7e8:	2201      	movs	r2, #1
     7ea:	409a      	lsls	r2, r3
     7ec:	79fb      	ldrb	r3, [r7, #7]
     7ee:	4619      	mov	r1, r3
     7f0:	4812      	ldr	r0, [pc, #72]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     7f2:	4b16      	ldr	r3, [pc, #88]	; (84c <_gpio_set_pin_pull_mode+0xb0>)
     7f4:	4798      	blx	r3
		break;
     7f6:	e01c      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     7f8:	79bb      	ldrb	r3, [r7, #6]
     7fa:	2201      	movs	r2, #1
     7fc:	409a      	lsls	r2, r3
     7fe:	79fb      	ldrb	r3, [r7, #7]
     800:	4619      	mov	r1, r3
     802:	480e      	ldr	r0, [pc, #56]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <_gpio_set_pin_pull_mode+0xa8>)
     806:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     808:	79ba      	ldrb	r2, [r7, #6]
     80a:	79fb      	ldrb	r3, [r7, #7]
     80c:	4619      	mov	r1, r3
     80e:	480b      	ldr	r0, [pc, #44]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     810:	4b0d      	ldr	r3, [pc, #52]	; (848 <_gpio_set_pin_pull_mode+0xac>)
     812:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     814:	79bb      	ldrb	r3, [r7, #6]
     816:	2201      	movs	r2, #1
     818:	409a      	lsls	r2, r3
     81a:	79fb      	ldrb	r3, [r7, #7]
     81c:	4619      	mov	r1, r3
     81e:	4807      	ldr	r0, [pc, #28]	; (83c <_gpio_set_pin_pull_mode+0xa0>)
     820:	4b0b      	ldr	r3, [pc, #44]	; (850 <_gpio_set_pin_pull_mode+0xb4>)
     822:	4798      	blx	r3
		break;
     824:	e005      	b.n	832 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     826:	2289      	movs	r2, #137	; 0x89
     828:	490a      	ldr	r1, [pc, #40]	; (854 <_gpio_set_pin_pull_mode+0xb8>)
     82a:	2000      	movs	r0, #0
     82c:	4b0a      	ldr	r3, [pc, #40]	; (858 <_gpio_set_pin_pull_mode+0xbc>)
     82e:	4798      	blx	r3
		break;
     830:	bf00      	nop
	}
}
     832:	bf00      	nop
     834:	3708      	adds	r7, #8
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	bf00      	nop
     83c:	41008000 	.word	0x41008000
     840:	00000605 	.word	0x00000605
     844:	00000431 	.word	0x00000431
     848:	000005c1 	.word	0x000005c1
     84c:	00000459 	.word	0x00000459
     850:	00000481 	.word	0x00000481
     854:	00002820 	.word	0x00002820
     858:	00001061 	.word	0x00001061

0000085c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     85c:	b590      	push	{r4, r7, lr}
     85e:	b085      	sub	sp, #20
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     866:	687b      	ldr	r3, [r7, #4]
     868:	095b      	lsrs	r3, r3, #5
     86a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	b2db      	uxtb	r3, r3
     870:	f003 031f 	and.w	r3, r3, #31
     874:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     876:	683b      	ldr	r3, [r7, #0]
     878:	f1b3 3fff 	cmp.w	r3, #4294967295
     87c:	d106      	bne.n	88c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     87e:	7bba      	ldrb	r2, [r7, #14]
     880:	7bf9      	ldrb	r1, [r7, #15]
     882:	2300      	movs	r3, #0
     884:	4812      	ldr	r0, [pc, #72]	; (8d0 <_gpio_set_pin_function+0x74>)
     886:	4c13      	ldr	r4, [pc, #76]	; (8d4 <_gpio_set_pin_function+0x78>)
     888:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     88a:	e01d      	b.n	8c8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     88c:	7bba      	ldrb	r2, [r7, #14]
     88e:	7bf9      	ldrb	r1, [r7, #15]
     890:	2301      	movs	r3, #1
     892:	480f      	ldr	r0, [pc, #60]	; (8d0 <_gpio_set_pin_function+0x74>)
     894:	4c0f      	ldr	r4, [pc, #60]	; (8d4 <_gpio_set_pin_function+0x78>)
     896:	47a0      	blx	r4
		if (pin & 1) {
     898:	7bbb      	ldrb	r3, [r7, #14]
     89a:	f003 0301 	and.w	r3, r3, #1
     89e:	2b00      	cmp	r3, #0
     8a0:	d009      	beq.n	8b6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     8a2:	7bbb      	ldrb	r3, [r7, #14]
     8a4:	085b      	lsrs	r3, r3, #1
     8a6:	b2da      	uxtb	r2, r3
     8a8:	683b      	ldr	r3, [r7, #0]
     8aa:	b2db      	uxtb	r3, r3
     8ac:	7bf9      	ldrb	r1, [r7, #15]
     8ae:	4808      	ldr	r0, [pc, #32]	; (8d0 <_gpio_set_pin_function+0x74>)
     8b0:	4c09      	ldr	r4, [pc, #36]	; (8d8 <_gpio_set_pin_function+0x7c>)
     8b2:	47a0      	blx	r4
}
     8b4:	e008      	b.n	8c8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     8b6:	7bbb      	ldrb	r3, [r7, #14]
     8b8:	085b      	lsrs	r3, r3, #1
     8ba:	b2da      	uxtb	r2, r3
     8bc:	683b      	ldr	r3, [r7, #0]
     8be:	b2db      	uxtb	r3, r3
     8c0:	7bf9      	ldrb	r1, [r7, #15]
     8c2:	4803      	ldr	r0, [pc, #12]	; (8d0 <_gpio_set_pin_function+0x74>)
     8c4:	4c05      	ldr	r4, [pc, #20]	; (8dc <_gpio_set_pin_function+0x80>)
     8c6:	47a0      	blx	r4
}
     8c8:	bf00      	nop
     8ca:	3714      	adds	r7, #20
     8cc:	46bd      	mov	sp, r7
     8ce:	bd90      	pop	{r4, r7, pc}
     8d0:	41008000 	.word	0x41008000
     8d4:	00000567 	.word	0x00000567
     8d8:	00000509 	.word	0x00000509
     8dc:	000004a9 	.word	0x000004a9

000008e0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	4603      	mov	r3, r0
     8e8:	460a      	mov	r2, r1
     8ea:	71fb      	strb	r3, [r7, #7]
     8ec:	4613      	mov	r3, r2
     8ee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8f0:	79fb      	ldrb	r3, [r7, #7]
     8f2:	095b      	lsrs	r3, r3, #5
     8f4:	b2d8      	uxtb	r0, r3
     8f6:	79fb      	ldrb	r3, [r7, #7]
     8f8:	f003 031f 	and.w	r3, r3, #31
     8fc:	b2db      	uxtb	r3, r3
     8fe:	79ba      	ldrb	r2, [r7, #6]
     900:	4619      	mov	r1, r3
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <gpio_set_pin_pull_mode+0x30>)
     904:	4798      	blx	r3
}
     906:	bf00      	nop
     908:	3708      	adds	r7, #8
     90a:	46bd      	mov	sp, r7
     90c:	bd80      	pop	{r7, pc}
     90e:	bf00      	nop
     910:	0000079d 	.word	0x0000079d

00000914 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
     91c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     91e:	6839      	ldr	r1, [r7, #0]
     920:	6878      	ldr	r0, [r7, #4]
     922:	4b03      	ldr	r3, [pc, #12]	; (930 <gpio_set_pin_function+0x1c>)
     924:	4798      	blx	r3
}
     926:	bf00      	nop
     928:	3708      	adds	r7, #8
     92a:	46bd      	mov	sp, r7
     92c:	bd80      	pop	{r7, pc}
     92e:	bf00      	nop
     930:	0000085d 	.word	0x0000085d

00000934 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     934:	b580      	push	{r7, lr}
     936:	b082      	sub	sp, #8
     938:	af00      	add	r7, sp, #0
     93a:	4603      	mov	r3, r0
     93c:	460a      	mov	r2, r1
     93e:	71fb      	strb	r3, [r7, #7]
     940:	4613      	mov	r3, r2
     942:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     944:	79fb      	ldrb	r3, [r7, #7]
     946:	095b      	lsrs	r3, r3, #5
     948:	b2d8      	uxtb	r0, r3
     94a:	79fb      	ldrb	r3, [r7, #7]
     94c:	f003 031f 	and.w	r3, r3, #31
     950:	2201      	movs	r2, #1
     952:	fa02 f303 	lsl.w	r3, r2, r3
     956:	79ba      	ldrb	r2, [r7, #6]
     958:	4619      	mov	r1, r3
     95a:	4b03      	ldr	r3, [pc, #12]	; (968 <gpio_set_pin_direction+0x34>)
     95c:	4798      	blx	r3
}
     95e:	bf00      	nop
     960:	3708      	adds	r7, #8
     962:	46bd      	mov	sp, r7
     964:	bd80      	pop	{r7, pc}
     966:	bf00      	nop
     968:	00000671 	.word	0x00000671

0000096c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	4603      	mov	r3, r0
     974:	460a      	mov	r2, r1
     976:	71fb      	strb	r3, [r7, #7]
     978:	4613      	mov	r3, r2
     97a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     97c:	79fb      	ldrb	r3, [r7, #7]
     97e:	095b      	lsrs	r3, r3, #5
     980:	b2d8      	uxtb	r0, r3
     982:	79fb      	ldrb	r3, [r7, #7]
     984:	f003 031f 	and.w	r3, r3, #31
     988:	2201      	movs	r2, #1
     98a:	fa02 f303 	lsl.w	r3, r2, r3
     98e:	79ba      	ldrb	r2, [r7, #6]
     990:	4619      	mov	r1, r3
     992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <gpio_set_pin_level+0x34>)
     994:	4798      	blx	r3
}
     996:	bf00      	nop
     998:	3708      	adds	r7, #8
     99a:	46bd      	mov	sp, r7
     99c:	bd80      	pop	{r7, pc}
     99e:	bf00      	nop
     9a0:	00000759 	.word	0x00000759

000009a4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	af00      	add	r7, sp, #0
	_init_chip();
     9a8:	4b01      	ldr	r3, [pc, #4]	; (9b0 <init_mcu+0xc>)
     9aa:	4798      	blx	r3
}
     9ac:	bf00      	nop
     9ae:	bd80      	pop	{r7, pc}
     9b0:	000011a1 	.word	0x000011a1

000009b4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     9b8:	4806      	ldr	r0, [pc, #24]	; (9d4 <TIMER_0_init+0x20>)
     9ba:	4b07      	ldr	r3, [pc, #28]	; (9d8 <TIMER_0_init+0x24>)
     9bc:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     9be:	4b07      	ldr	r3, [pc, #28]	; (9dc <TIMER_0_init+0x28>)
     9c0:	4798      	blx	r3
     9c2:	4603      	mov	r3, r0
     9c4:	461a      	mov	r2, r3
     9c6:	4906      	ldr	r1, [pc, #24]	; (9e0 <TIMER_0_init+0x2c>)
     9c8:	4806      	ldr	r0, [pc, #24]	; (9e4 <TIMER_0_init+0x30>)
     9ca:	4b07      	ldr	r3, [pc, #28]	; (9e8 <TIMER_0_init+0x34>)
     9cc:	4798      	blx	r3
}
     9ce:	bf00      	nop
     9d0:	bd80      	pop	{r7, pc}
     9d2:	bf00      	nop
     9d4:	40000800 	.word	0x40000800
     9d8:	000003a9 	.word	0x000003a9
     9dc:	00001655 	.word	0x00001655
     9e0:	40002400 	.word	0x40002400
     9e4:	2000005c 	.word	0x2000005c
     9e8:	00000c45 	.word	0x00000c45

000009ec <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);
     9f0:	4904      	ldr	r1, [pc, #16]	; (a04 <USART_0_PORT_init+0x18>)
     9f2:	2039      	movs	r0, #57	; 0x39
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <USART_0_PORT_init+0x1c>)
     9f6:	4798      	blx	r3

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
     9f8:	4904      	ldr	r1, [pc, #16]	; (a0c <USART_0_PORT_init+0x20>)
     9fa:	2038      	movs	r0, #56	; 0x38
     9fc:	4b02      	ldr	r3, [pc, #8]	; (a08 <USART_0_PORT_init+0x1c>)
     9fe:	4798      	blx	r3
}
     a00:	bf00      	nop
     a02:	bd80      	pop	{r7, pc}
     a04:	00390003 	.word	0x00390003
     a08:	00000915 	.word	0x00000915
     a0c:	00380003 	.word	0x00380003

00000a10 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
     a10:	b580      	push	{r7, lr}
     a12:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a14:	2240      	movs	r2, #64	; 0x40
     a16:	2117      	movs	r1, #23
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <USART_0_CLOCK_init+0x24>)
     a1a:	4b07      	ldr	r3, [pc, #28]	; (a38 <USART_0_CLOCK_init+0x28>)
     a1c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a1e:	2243      	movs	r2, #67	; 0x43
     a20:	2103      	movs	r1, #3
     a22:	4804      	ldr	r0, [pc, #16]	; (a34 <USART_0_CLOCK_init+0x24>)
     a24:	4b04      	ldr	r3, [pc, #16]	; (a38 <USART_0_CLOCK_init+0x28>)
     a26:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     a28:	4804      	ldr	r0, [pc, #16]	; (a3c <USART_0_CLOCK_init+0x2c>)
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <USART_0_CLOCK_init+0x30>)
     a2c:	4798      	blx	r3
}
     a2e:	bf00      	nop
     a30:	bd80      	pop	{r7, pc}
     a32:	bf00      	nop
     a34:	40001c00 	.word	0x40001c00
     a38:	00000383 	.word	0x00000383
     a3c:	40000800 	.word	0x40000800
     a40:	000003c9 	.word	0x000003c9

00000a44 <USART_0_init>:

void USART_0_init(void)
{
     a44:	b580      	push	{r7, lr}
     a46:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
     a48:	4b05      	ldr	r3, [pc, #20]	; (a60 <USART_0_init+0x1c>)
     a4a:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     a4c:	2200      	movs	r2, #0
     a4e:	4905      	ldr	r1, [pc, #20]	; (a64 <USART_0_init+0x20>)
     a50:	4805      	ldr	r0, [pc, #20]	; (a68 <USART_0_init+0x24>)
     a52:	4b06      	ldr	r3, [pc, #24]	; (a6c <USART_0_init+0x28>)
     a54:	4798      	blx	r3
	USART_0_PORT_init();
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <USART_0_init+0x2c>)
     a58:	4798      	blx	r3
}
     a5a:	bf00      	nop
     a5c:	bd80      	pop	{r7, pc}
     a5e:	bf00      	nop
     a60:	00000a11 	.word	0x00000a11
     a64:	41012000 	.word	0x41012000
     a68:	20000050 	.word	0x20000050
     a6c:	00000e11 	.word	0x00000e11
     a70:	000009ed 	.word	0x000009ed

00000a74 <delay_driver_init>:

void delay_driver_init(void)
{
     a74:	b580      	push	{r7, lr}
     a76:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     a78:	4802      	ldr	r0, [pc, #8]	; (a84 <delay_driver_init+0x10>)
     a7a:	4b03      	ldr	r3, [pc, #12]	; (a88 <delay_driver_init+0x14>)
     a7c:	4798      	blx	r3
}
     a7e:	bf00      	nop
     a80:	bd80      	pop	{r7, pc}
     a82:	bf00      	nop
     a84:	e000e010 	.word	0xe000e010
     a88:	00000b91 	.word	0x00000b91

00000a8c <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     a8c:	b580      	push	{r7, lr}
     a8e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC10, PINMUX_PC10F_TCC0_WO0);
     a90:	4904      	ldr	r1, [pc, #16]	; (aa4 <PWM_0_PORT_init+0x18>)
     a92:	204a      	movs	r0, #74	; 0x4a
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <PWM_0_PORT_init+0x1c>)
     a96:	4798      	blx	r3

	gpio_set_pin_function(PC11, PINMUX_PC11F_TCC0_WO1);
     a98:	4904      	ldr	r1, [pc, #16]	; (aac <PWM_0_PORT_init+0x20>)
     a9a:	204b      	movs	r0, #75	; 0x4b
     a9c:	4b02      	ldr	r3, [pc, #8]	; (aa8 <PWM_0_PORT_init+0x1c>)
     a9e:	4798      	blx	r3
}
     aa0:	bf00      	nop
     aa2:	bd80      	pop	{r7, pc}
     aa4:	004a0005 	.word	0x004a0005
     aa8:	00000915 	.word	0x00000915
     aac:	004b0005 	.word	0x004b0005

00000ab0 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     ab0:	b580      	push	{r7, lr}
     ab2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     ab4:	4804      	ldr	r0, [pc, #16]	; (ac8 <PWM_0_CLOCK_init+0x18>)
     ab6:	4b05      	ldr	r3, [pc, #20]	; (acc <PWM_0_CLOCK_init+0x1c>)
     ab8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     aba:	2240      	movs	r2, #64	; 0x40
     abc:	2119      	movs	r1, #25
     abe:	4804      	ldr	r0, [pc, #16]	; (ad0 <PWM_0_CLOCK_init+0x20>)
     ac0:	4b04      	ldr	r3, [pc, #16]	; (ad4 <PWM_0_CLOCK_init+0x24>)
     ac2:	4798      	blx	r3
}
     ac4:	bf00      	nop
     ac6:	bd80      	pop	{r7, pc}
     ac8:	40000800 	.word	0x40000800
     acc:	000003e9 	.word	0x000003e9
     ad0:	40001c00 	.word	0x40001c00
     ad4:	00000383 	.word	0x00000383

00000ad8 <system_init>:

void system_init(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	init_mcu();
     adc:	4b21      	ldr	r3, [pc, #132]	; (b64 <system_init+0x8c>)
     ade:	4798      	blx	r3

	// GPIO on PB01

	// Set pin direction to input
	gpio_set_pin_direction(DIP_IN, GPIO_DIRECTION_IN);
     ae0:	2101      	movs	r1, #1
     ae2:	2021      	movs	r0, #33	; 0x21
     ae4:	4b20      	ldr	r3, [pc, #128]	; (b68 <system_init+0x90>)
     ae6:	4798      	blx	r3

	gpio_set_pin_pull_mode(DIP_IN,
     ae8:	2100      	movs	r1, #0
     aea:	2021      	movs	r0, #33	; 0x21
     aec:	4b1f      	ldr	r3, [pc, #124]	; (b6c <system_init+0x94>)
     aee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIP_IN, GPIO_PIN_FUNCTION_OFF);
     af0:	f04f 31ff 	mov.w	r1, #4294967295
     af4:	2021      	movs	r0, #33	; 0x21
     af6:	4b1e      	ldr	r3, [pc, #120]	; (b70 <system_init+0x98>)
     af8:	4798      	blx	r3

	// GPIO on PB05

	// Set pin direction to input
	gpio_set_pin_direction(CODE_INPUT, GPIO_DIRECTION_IN);
     afa:	2101      	movs	r1, #1
     afc:	2025      	movs	r0, #37	; 0x25
     afe:	4b1a      	ldr	r3, [pc, #104]	; (b68 <system_init+0x90>)
     b00:	4798      	blx	r3

	gpio_set_pin_pull_mode(CODE_INPUT,
     b02:	2101      	movs	r1, #1
     b04:	2025      	movs	r0, #37	; 0x25
     b06:	4b19      	ldr	r3, [pc, #100]	; (b6c <system_init+0x94>)
     b08:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(CODE_INPUT, GPIO_PIN_FUNCTION_OFF);
     b0a:	f04f 31ff 	mov.w	r1, #4294967295
     b0e:	2025      	movs	r0, #37	; 0x25
     b10:	4b17      	ldr	r3, [pc, #92]	; (b70 <system_init+0x98>)
     b12:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
     b14:	2101      	movs	r1, #1
     b16:	203f      	movs	r0, #63	; 0x3f
     b18:	4b13      	ldr	r3, [pc, #76]	; (b68 <system_init+0x90>)
     b1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
     b1c:	2101      	movs	r1, #1
     b1e:	203f      	movs	r0, #63	; 0x3f
     b20:	4b12      	ldr	r3, [pc, #72]	; (b6c <system_init+0x94>)
     b22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
     b24:	f04f 31ff 	mov.w	r1, #4294967295
     b28:	203f      	movs	r0, #63	; 0x3f
     b2a:	4b11      	ldr	r3, [pc, #68]	; (b70 <system_init+0x98>)
     b2c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
     b2e:	2101      	movs	r1, #1
     b30:	2052      	movs	r0, #82	; 0x52
     b32:	4b10      	ldr	r3, [pc, #64]	; (b74 <system_init+0x9c>)
     b34:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     b36:	2102      	movs	r1, #2
     b38:	2052      	movs	r0, #82	; 0x52
     b3a:	4b0b      	ldr	r3, [pc, #44]	; (b68 <system_init+0x90>)
     b3c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     b3e:	f04f 31ff 	mov.w	r1, #4294967295
     b42:	2052      	movs	r0, #82	; 0x52
     b44:	4b0a      	ldr	r3, [pc, #40]	; (b70 <system_init+0x98>)
     b46:	4798      	blx	r3

	TIMER_0_init();
     b48:	4b0b      	ldr	r3, [pc, #44]	; (b78 <system_init+0xa0>)
     b4a:	4798      	blx	r3

	USART_0_init();
     b4c:	4b0b      	ldr	r3, [pc, #44]	; (b7c <system_init+0xa4>)
     b4e:	4798      	blx	r3

	delay_driver_init();
     b50:	4b0b      	ldr	r3, [pc, #44]	; (b80 <system_init+0xa8>)
     b52:	4798      	blx	r3

	PWM_0_CLOCK_init();
     b54:	4b0b      	ldr	r3, [pc, #44]	; (b84 <system_init+0xac>)
     b56:	4798      	blx	r3

	PWM_0_PORT_init();
     b58:	4b0b      	ldr	r3, [pc, #44]	; (b88 <system_init+0xb0>)
     b5a:	4798      	blx	r3

	PWM_0_init();
     b5c:	4b0b      	ldr	r3, [pc, #44]	; (b8c <system_init+0xb4>)
     b5e:	4798      	blx	r3
}
     b60:	bf00      	nop
     b62:	bd80      	pop	{r7, pc}
     b64:	000009a5 	.word	0x000009a5
     b68:	00000935 	.word	0x00000935
     b6c:	000008e1 	.word	0x000008e1
     b70:	00000915 	.word	0x00000915
     b74:	0000096d 	.word	0x0000096d
     b78:	000009b5 	.word	0x000009b5
     b7c:	00000a45 	.word	0x00000a45
     b80:	00000a75 	.word	0x00000a75
     b84:	00000ab1 	.word	0x00000ab1
     b88:	00000a8d 	.word	0x00000a8d
     b8c:	00001dbd 	.word	0x00001dbd

00000b90 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     b90:	b580      	push	{r7, lr}
     b92:	b082      	sub	sp, #8
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     b98:	4a05      	ldr	r2, [pc, #20]	; (bb0 <delay_init+0x20>)
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	6013      	str	r3, [r2, #0]
     b9e:	4b04      	ldr	r3, [pc, #16]	; (bb0 <delay_init+0x20>)
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	4618      	mov	r0, r3
     ba4:	4b03      	ldr	r3, [pc, #12]	; (bb4 <delay_init+0x24>)
     ba6:	4798      	blx	r3
}
     ba8:	bf00      	nop
     baa:	3708      	adds	r7, #8
     bac:	46bd      	mov	sp, r7
     bae:	bd80      	pop	{r7, pc}
     bb0:	20000034 	.word	0x20000034
     bb4:	00001c75 	.word	0x00001c75

00000bb8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b084      	sub	sp, #16
     bbc:	af00      	add	r7, sp, #0
     bbe:	60f8      	str	r0, [r7, #12]
     bc0:	60b9      	str	r1, [r7, #8]
     bc2:	4613      	mov	r3, r2
     bc4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	2b00      	cmp	r3, #0
     bca:	d004      	beq.n	bd6 <io_read+0x1e>
     bcc:	68bb      	ldr	r3, [r7, #8]
     bce:	2b00      	cmp	r3, #0
     bd0:	d001      	beq.n	bd6 <io_read+0x1e>
     bd2:	2301      	movs	r3, #1
     bd4:	e000      	b.n	bd8 <io_read+0x20>
     bd6:	2300      	movs	r3, #0
     bd8:	f003 0301 	and.w	r3, r3, #1
     bdc:	b2db      	uxtb	r3, r3
     bde:	223d      	movs	r2, #61	; 0x3d
     be0:	4907      	ldr	r1, [pc, #28]	; (c00 <io_read+0x48>)
     be2:	4618      	mov	r0, r3
     be4:	4b07      	ldr	r3, [pc, #28]	; (c04 <io_read+0x4c>)
     be6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     be8:	68fb      	ldr	r3, [r7, #12]
     bea:	685b      	ldr	r3, [r3, #4]
     bec:	88fa      	ldrh	r2, [r7, #6]
     bee:	68b9      	ldr	r1, [r7, #8]
     bf0:	68f8      	ldr	r0, [r7, #12]
     bf2:	4798      	blx	r3
     bf4:	4603      	mov	r3, r0
}
     bf6:	4618      	mov	r0, r3
     bf8:	3710      	adds	r7, #16
     bfa:	46bd      	mov	sp, r7
     bfc:	bd80      	pop	{r7, pc}
     bfe:	bf00      	nop
     c00:	0000283c 	.word	0x0000283c
     c04:	00001061 	.word	0x00001061

00000c08 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     c08:	b480      	push	{r7}
     c0a:	b083      	sub	sp, #12
     c0c:	af00      	add	r7, sp, #0
     c0e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	681b      	ldr	r3, [r3, #0]
}
     c14:	4618      	mov	r0, r3
     c16:	370c      	adds	r7, #12
     c18:	46bd      	mov	sp, r7
     c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c1e:	4770      	bx	lr

00000c20 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     c20:	b480      	push	{r7}
     c22:	b083      	sub	sp, #12
     c24:	af00      	add	r7, sp, #0
     c26:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	2b00      	cmp	r3, #0
     c2c:	d002      	beq.n	c34 <list_get_next_element+0x14>
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	e000      	b.n	c36 <list_get_next_element+0x16>
     c34:	2300      	movs	r3, #0
}
     c36:	4618      	mov	r0, r3
     c38:	370c      	adds	r7, #12
     c3a:	46bd      	mov	sp, r7
     c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c40:	4770      	bx	lr
	...

00000c44 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     c44:	b580      	push	{r7, lr}
     c46:	b084      	sub	sp, #16
     c48:	af00      	add	r7, sp, #0
     c4a:	60f8      	str	r0, [r7, #12]
     c4c:	60b9      	str	r1, [r7, #8]
     c4e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     c50:	68fb      	ldr	r3, [r7, #12]
     c52:	2b00      	cmp	r3, #0
     c54:	d004      	beq.n	c60 <timer_init+0x1c>
     c56:	68bb      	ldr	r3, [r7, #8]
     c58:	2b00      	cmp	r3, #0
     c5a:	d001      	beq.n	c60 <timer_init+0x1c>
     c5c:	2301      	movs	r3, #1
     c5e:	e000      	b.n	c62 <timer_init+0x1e>
     c60:	2300      	movs	r3, #0
     c62:	f003 0301 	and.w	r3, r3, #1
     c66:	b2db      	uxtb	r3, r3
     c68:	223b      	movs	r2, #59	; 0x3b
     c6a:	490a      	ldr	r1, [pc, #40]	; (c94 <timer_init+0x50>)
     c6c:	4618      	mov	r0, r3
     c6e:	4b0a      	ldr	r3, [pc, #40]	; (c98 <timer_init+0x54>)
     c70:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     c72:	68fb      	ldr	r3, [r7, #12]
     c74:	68b9      	ldr	r1, [r7, #8]
     c76:	4618      	mov	r0, r3
     c78:	4b08      	ldr	r3, [pc, #32]	; (c9c <timer_init+0x58>)
     c7a:	4798      	blx	r3
	descr->time                           = 0;
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	2200      	movs	r2, #0
     c80:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     c82:	68fb      	ldr	r3, [r7, #12]
     c84:	4a06      	ldr	r2, [pc, #24]	; (ca0 <timer_init+0x5c>)
     c86:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     c88:	2300      	movs	r3, #0
}
     c8a:	4618      	mov	r0, r3
     c8c:	3710      	adds	r7, #16
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	bf00      	nop
     c94:	00002850 	.word	0x00002850
     c98:	00001061 	.word	0x00001061
     c9c:	00001579 	.word	0x00001579
     ca0:	00000d55 	.word	0x00000d55

00000ca4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     ca4:	b580      	push	{r7, lr}
     ca6:	b088      	sub	sp, #32
     ca8:	af00      	add	r7, sp, #0
     caa:	60f8      	str	r0, [r7, #12]
     cac:	60b9      	str	r1, [r7, #8]
     cae:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     cb0:	2300      	movs	r3, #0
     cb2:	61bb      	str	r3, [r7, #24]
     cb4:	68f8      	ldr	r0, [r7, #12]
     cb6:	4b23      	ldr	r3, [pc, #140]	; (d44 <timer_add_timer_task+0xa0>)
     cb8:	4798      	blx	r3
     cba:	6138      	str	r0, [r7, #16]

	if (!head) {
     cbc:	693b      	ldr	r3, [r7, #16]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d104      	bne.n	ccc <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     cc2:	68b9      	ldr	r1, [r7, #8]
     cc4:	68f8      	ldr	r0, [r7, #12]
     cc6:	4b20      	ldr	r3, [pc, #128]	; (d48 <timer_add_timer_task+0xa4>)
     cc8:	4798      	blx	r3
		return;
     cca:	e037      	b.n	d3c <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     ccc:	693b      	ldr	r3, [r7, #16]
     cce:	61fb      	str	r3, [r7, #28]
     cd0:	e022      	b.n	d18 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
     cd2:	69fb      	ldr	r3, [r7, #28]
     cd4:	685a      	ldr	r2, [r3, #4]
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	429a      	cmp	r2, r3
     cda:	d808      	bhi.n	cee <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
     cdc:	69fb      	ldr	r3, [r7, #28]
     cde:	689a      	ldr	r2, [r3, #8]
     ce0:	69fb      	ldr	r3, [r7, #28]
     ce2:	6859      	ldr	r1, [r3, #4]
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	1acb      	subs	r3, r1, r3
     ce8:	4413      	add	r3, r2
     cea:	617b      	str	r3, [r7, #20]
     cec:	e009      	b.n	d02 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     cee:	69fb      	ldr	r3, [r7, #28]
     cf0:	689a      	ldr	r2, [r3, #8]
     cf2:	69fb      	ldr	r3, [r7, #28]
     cf4:	685b      	ldr	r3, [r3, #4]
     cf6:	441a      	add	r2, r3
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	425b      	negs	r3, r3
     cfc:	4413      	add	r3, r2
     cfe:	3301      	adds	r3, #1
     d00:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	689a      	ldr	r2, [r3, #8]
     d06:	697b      	ldr	r3, [r7, #20]
     d08:	429a      	cmp	r2, r3
     d0a:	d909      	bls.n	d20 <timer_add_timer_task+0x7c>
			break;
		prev = it;
     d0c:	69fb      	ldr	r3, [r7, #28]
     d0e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     d10:	69f8      	ldr	r0, [r7, #28]
     d12:	4b0e      	ldr	r3, [pc, #56]	; (d4c <timer_add_timer_task+0xa8>)
     d14:	4798      	blx	r3
     d16:	61f8      	str	r0, [r7, #28]
     d18:	69fb      	ldr	r3, [r7, #28]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d1d9      	bne.n	cd2 <timer_add_timer_task+0x2e>
     d1e:	e000      	b.n	d22 <timer_add_timer_task+0x7e>
			break;
     d20:	bf00      	nop
	}

	if (it == head) {
     d22:	69fa      	ldr	r2, [r7, #28]
     d24:	693b      	ldr	r3, [r7, #16]
     d26:	429a      	cmp	r2, r3
     d28:	d104      	bne.n	d34 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
     d2a:	68b9      	ldr	r1, [r7, #8]
     d2c:	68f8      	ldr	r0, [r7, #12]
     d2e:	4b06      	ldr	r3, [pc, #24]	; (d48 <timer_add_timer_task+0xa4>)
     d30:	4798      	blx	r3
     d32:	e003      	b.n	d3c <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
     d34:	68b9      	ldr	r1, [r7, #8]
     d36:	69b8      	ldr	r0, [r7, #24]
     d38:	4b05      	ldr	r3, [pc, #20]	; (d50 <timer_add_timer_task+0xac>)
     d3a:	4798      	blx	r3
	}
}
     d3c:	3720      	adds	r7, #32
     d3e:	46bd      	mov	sp, r7
     d40:	bd80      	pop	{r7, pc}
     d42:	bf00      	nop
     d44:	00000c09 	.word	0x00000c09
     d48:	000010c1 	.word	0x000010c1
     d4c:	00000c21 	.word	0x00000c21
     d50:	00001119 	.word	0x00001119

00000d54 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     d54:	b580      	push	{r7, lr}
     d56:	b086      	sub	sp, #24
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
     d60:	693b      	ldr	r3, [r7, #16]
     d62:	3314      	adds	r3, #20
     d64:	4618      	mov	r0, r3
     d66:	4b27      	ldr	r3, [pc, #156]	; (e04 <timer_process_counted+0xb0>)
     d68:	4798      	blx	r3
     d6a:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
     d6c:	693b      	ldr	r3, [r7, #16]
     d6e:	691b      	ldr	r3, [r3, #16]
     d70:	1c5a      	adds	r2, r3, #1
     d72:	693b      	ldr	r3, [r7, #16]
     d74:	611a      	str	r2, [r3, #16]
     d76:	693b      	ldr	r3, [r7, #16]
     d78:	691b      	ldr	r3, [r3, #16]
     d7a:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     d7c:	693b      	ldr	r3, [r7, #16]
     d7e:	7e1b      	ldrb	r3, [r3, #24]
     d80:	b2db      	uxtb	r3, r3
     d82:	f003 0301 	and.w	r3, r3, #1
     d86:	2b00      	cmp	r3, #0
     d88:	d106      	bne.n	d98 <timer_process_counted+0x44>
     d8a:	693b      	ldr	r3, [r7, #16]
     d8c:	7e1b      	ldrb	r3, [r3, #24]
     d8e:	b2db      	uxtb	r3, r3
     d90:	f003 0302 	and.w	r3, r3, #2
     d94:	2b00      	cmp	r3, #0
     d96:	d027      	beq.n	de8 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     d98:	693b      	ldr	r3, [r7, #16]
     d9a:	7e1b      	ldrb	r3, [r3, #24]
     d9c:	b2db      	uxtb	r3, r3
     d9e:	f043 0302 	orr.w	r3, r3, #2
     da2:	b2da      	uxtb	r2, r3
     da4:	693b      	ldr	r3, [r7, #16]
     da6:	761a      	strb	r2, [r3, #24]
		return;
     da8:	e029      	b.n	dfe <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
     daa:	697b      	ldr	r3, [r7, #20]
     dac:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
     dae:	693b      	ldr	r3, [r7, #16]
     db0:	3314      	adds	r3, #20
     db2:	4618      	mov	r0, r3
     db4:	4b14      	ldr	r3, [pc, #80]	; (e08 <timer_process_counted+0xb4>)
     db6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     db8:	68bb      	ldr	r3, [r7, #8]
     dba:	7c1b      	ldrb	r3, [r3, #16]
     dbc:	2b01      	cmp	r3, #1
     dbe:	d109      	bne.n	dd4 <timer_process_counted+0x80>
			tmp->time_label = time;
     dc0:	68bb      	ldr	r3, [r7, #8]
     dc2:	68fa      	ldr	r2, [r7, #12]
     dc4:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     dc6:	693b      	ldr	r3, [r7, #16]
     dc8:	3314      	adds	r3, #20
     dca:	68fa      	ldr	r2, [r7, #12]
     dcc:	68b9      	ldr	r1, [r7, #8]
     dce:	4618      	mov	r0, r3
     dd0:	4b0e      	ldr	r3, [pc, #56]	; (e0c <timer_process_counted+0xb8>)
     dd2:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
     dd4:	693b      	ldr	r3, [r7, #16]
     dd6:	3314      	adds	r3, #20
     dd8:	4618      	mov	r0, r3
     dda:	4b0a      	ldr	r3, [pc, #40]	; (e04 <timer_process_counted+0xb0>)
     ddc:	4798      	blx	r3
     dde:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
     de0:	68bb      	ldr	r3, [r7, #8]
     de2:	68db      	ldr	r3, [r3, #12]
     de4:	68b8      	ldr	r0, [r7, #8]
     de6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     de8:	697b      	ldr	r3, [r7, #20]
     dea:	2b00      	cmp	r3, #0
     dec:	d007      	beq.n	dfe <timer_process_counted+0xaa>
     dee:	697b      	ldr	r3, [r7, #20]
     df0:	685b      	ldr	r3, [r3, #4]
     df2:	68fa      	ldr	r2, [r7, #12]
     df4:	1ad2      	subs	r2, r2, r3
     df6:	697b      	ldr	r3, [r7, #20]
     df8:	689b      	ldr	r3, [r3, #8]
     dfa:	429a      	cmp	r2, r3
     dfc:	d2d5      	bcs.n	daa <timer_process_counted+0x56>
	}
}
     dfe:	3718      	adds	r7, #24
     e00:	46bd      	mov	sp, r7
     e02:	bd80      	pop	{r7, pc}
     e04:	00000c09 	.word	0x00000c09
     e08:	0000113d 	.word	0x0000113d
     e0c:	00000ca5 	.word	0x00000ca5

00000e10 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
     e10:	b580      	push	{r7, lr}
     e12:	b086      	sub	sp, #24
     e14:	af00      	add	r7, sp, #0
     e16:	60f8      	str	r0, [r7, #12]
     e18:	60b9      	str	r1, [r7, #8]
     e1a:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
     e1c:	68fb      	ldr	r3, [r7, #12]
     e1e:	2b00      	cmp	r3, #0
     e20:	d004      	beq.n	e2c <usart_sync_init+0x1c>
     e22:	68bb      	ldr	r3, [r7, #8]
     e24:	2b00      	cmp	r3, #0
     e26:	d001      	beq.n	e2c <usart_sync_init+0x1c>
     e28:	2301      	movs	r3, #1
     e2a:	e000      	b.n	e2e <usart_sync_init+0x1e>
     e2c:	2300      	movs	r3, #0
     e2e:	f003 0301 	and.w	r3, r3, #1
     e32:	b2db      	uxtb	r3, r3
     e34:	2234      	movs	r2, #52	; 0x34
     e36:	490d      	ldr	r1, [pc, #52]	; (e6c <usart_sync_init+0x5c>)
     e38:	4618      	mov	r0, r3
     e3a:	4b0d      	ldr	r3, [pc, #52]	; (e70 <usart_sync_init+0x60>)
     e3c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     e3e:	68fb      	ldr	r3, [r7, #12]
     e40:	3308      	adds	r3, #8
     e42:	68b9      	ldr	r1, [r7, #8]
     e44:	4618      	mov	r0, r3
     e46:	4b0b      	ldr	r3, [pc, #44]	; (e74 <usart_sync_init+0x64>)
     e48:	4798      	blx	r3
     e4a:	6178      	str	r0, [r7, #20]
	if (init_status) {
     e4c:	697b      	ldr	r3, [r7, #20]
     e4e:	2b00      	cmp	r3, #0
     e50:	d001      	beq.n	e56 <usart_sync_init+0x46>
		return init_status;
     e52:	697b      	ldr	r3, [r7, #20]
     e54:	e006      	b.n	e64 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	4a07      	ldr	r2, [pc, #28]	; (e78 <usart_sync_init+0x68>)
     e5a:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
     e5c:	68fb      	ldr	r3, [r7, #12]
     e5e:	4a07      	ldr	r2, [pc, #28]	; (e7c <usart_sync_init+0x6c>)
     e60:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     e62:	2300      	movs	r3, #0
}
     e64:	4618      	mov	r0, r3
     e66:	3718      	adds	r7, #24
     e68:	46bd      	mov	sp, r7
     e6a:	bd80      	pop	{r7, pc}
     e6c:	00002868 	.word	0x00002868
     e70:	00001061 	.word	0x00001061
     e74:	000018bd 	.word	0x000018bd
     e78:	00000fcd 	.word	0x00000fcd
     e7c:	00000f05 	.word	0x00000f05

00000e80 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
     e80:	b580      	push	{r7, lr}
     e82:	b082      	sub	sp, #8
     e84:	af00      	add	r7, sp, #0
     e86:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	2b00      	cmp	r3, #0
     e8c:	bf14      	ite	ne
     e8e:	2301      	movne	r3, #1
     e90:	2300      	moveq	r3, #0
     e92:	b2db      	uxtb	r3, r3
     e94:	2253      	movs	r2, #83	; 0x53
     e96:	4907      	ldr	r1, [pc, #28]	; (eb4 <usart_sync_enable+0x34>)
     e98:	4618      	mov	r0, r3
     e9a:	4b07      	ldr	r3, [pc, #28]	; (eb8 <usart_sync_enable+0x38>)
     e9c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	3308      	adds	r3, #8
     ea2:	4618      	mov	r0, r3
     ea4:	4b05      	ldr	r3, [pc, #20]	; (ebc <usart_sync_enable+0x3c>)
     ea6:	4798      	blx	r3

	return ERR_NONE;
     ea8:	2300      	movs	r3, #0
}
     eaa:	4618      	mov	r0, r3
     eac:	3708      	adds	r7, #8
     eae:	46bd      	mov	sp, r7
     eb0:	bd80      	pop	{r7, pc}
     eb2:	bf00      	nop
     eb4:	00002868 	.word	0x00002868
     eb8:	00001061 	.word	0x00001061
     ebc:	00001901 	.word	0x00001901

00000ec0 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b082      	sub	sp, #8
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
     ec8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	2b00      	cmp	r3, #0
     ece:	d004      	beq.n	eda <usart_sync_get_io_descriptor+0x1a>
     ed0:	683b      	ldr	r3, [r7, #0]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d001      	beq.n	eda <usart_sync_get_io_descriptor+0x1a>
     ed6:	2301      	movs	r3, #1
     ed8:	e000      	b.n	edc <usart_sync_get_io_descriptor+0x1c>
     eda:	2300      	movs	r3, #0
     edc:	f003 0301 	and.w	r3, r3, #1
     ee0:	b2db      	uxtb	r3, r3
     ee2:	2269      	movs	r2, #105	; 0x69
     ee4:	4905      	ldr	r1, [pc, #20]	; (efc <usart_sync_get_io_descriptor+0x3c>)
     ee6:	4618      	mov	r0, r3
     ee8:	4b05      	ldr	r3, [pc, #20]	; (f00 <usart_sync_get_io_descriptor+0x40>)
     eea:	4798      	blx	r3

	*io = &descr->io;
     eec:	687a      	ldr	r2, [r7, #4]
     eee:	683b      	ldr	r3, [r7, #0]
     ef0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
     ef2:	2300      	movs	r3, #0
}
     ef4:	4618      	mov	r0, r3
     ef6:	3708      	adds	r7, #8
     ef8:	46bd      	mov	sp, r7
     efa:	bd80      	pop	{r7, pc}
     efc:	00002868 	.word	0x00002868
     f00:	00001061 	.word	0x00001061

00000f04 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f04:	b580      	push	{r7, lr}
     f06:	b086      	sub	sp, #24
     f08:	af00      	add	r7, sp, #0
     f0a:	60f8      	str	r0, [r7, #12]
     f0c:	60b9      	str	r1, [r7, #8]
     f0e:	4613      	mov	r3, r2
     f10:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
     f12:	2300      	movs	r3, #0
     f14:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     f1a:	68fb      	ldr	r3, [r7, #12]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d007      	beq.n	f30 <usart_sync_write+0x2c>
     f20:	68bb      	ldr	r3, [r7, #8]
     f22:	2b00      	cmp	r3, #0
     f24:	d004      	beq.n	f30 <usart_sync_write+0x2c>
     f26:	88fb      	ldrh	r3, [r7, #6]
     f28:	2b00      	cmp	r3, #0
     f2a:	d001      	beq.n	f30 <usart_sync_write+0x2c>
     f2c:	2301      	movs	r3, #1
     f2e:	e000      	b.n	f32 <usart_sync_write+0x2e>
     f30:	2300      	movs	r3, #0
     f32:	f003 0301 	and.w	r3, r3, #1
     f36:	b2db      	uxtb	r3, r3
     f38:	22f1      	movs	r2, #241	; 0xf1
     f3a:	491f      	ldr	r1, [pc, #124]	; (fb8 <usart_sync_write+0xb4>)
     f3c:	4618      	mov	r0, r3
     f3e:	4b1f      	ldr	r3, [pc, #124]	; (fbc <usart_sync_write+0xb8>)
     f40:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     f42:	bf00      	nop
     f44:	693b      	ldr	r3, [r7, #16]
     f46:	3308      	adds	r3, #8
     f48:	4618      	mov	r0, r3
     f4a:	4b1d      	ldr	r3, [pc, #116]	; (fc0 <usart_sync_write+0xbc>)
     f4c:	4798      	blx	r3
     f4e:	4603      	mov	r3, r0
     f50:	f083 0301 	eor.w	r3, r3, #1
     f54:	b2db      	uxtb	r3, r3
     f56:	2b00      	cmp	r3, #0
     f58:	d1f4      	bne.n	f44 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     f5a:	693b      	ldr	r3, [r7, #16]
     f5c:	f103 0008 	add.w	r0, r3, #8
     f60:	68ba      	ldr	r2, [r7, #8]
     f62:	697b      	ldr	r3, [r7, #20]
     f64:	4413      	add	r3, r2
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	4619      	mov	r1, r3
     f6a:	4b16      	ldr	r3, [pc, #88]	; (fc4 <usart_sync_write+0xc0>)
     f6c:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     f6e:	bf00      	nop
     f70:	693b      	ldr	r3, [r7, #16]
     f72:	3308      	adds	r3, #8
     f74:	4618      	mov	r0, r3
     f76:	4b12      	ldr	r3, [pc, #72]	; (fc0 <usart_sync_write+0xbc>)
     f78:	4798      	blx	r3
     f7a:	4603      	mov	r3, r0
     f7c:	f083 0301 	eor.w	r3, r3, #1
     f80:	b2db      	uxtb	r3, r3
     f82:	2b00      	cmp	r3, #0
     f84:	d1f4      	bne.n	f70 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
     f86:	697b      	ldr	r3, [r7, #20]
     f88:	3301      	adds	r3, #1
     f8a:	617b      	str	r3, [r7, #20]
     f8c:	88fb      	ldrh	r3, [r7, #6]
     f8e:	697a      	ldr	r2, [r7, #20]
     f90:	429a      	cmp	r2, r3
     f92:	d3e2      	bcc.n	f5a <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
     f94:	bf00      	nop
     f96:	693b      	ldr	r3, [r7, #16]
     f98:	3308      	adds	r3, #8
     f9a:	4618      	mov	r0, r3
     f9c:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <usart_sync_write+0xc4>)
     f9e:	4798      	blx	r3
     fa0:	4603      	mov	r3, r0
     fa2:	f083 0301 	eor.w	r3, r3, #1
     fa6:	b2db      	uxtb	r3, r3
     fa8:	2b00      	cmp	r3, #0
     faa:	d1f4      	bne.n	f96 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
     fac:	697b      	ldr	r3, [r7, #20]
}
     fae:	4618      	mov	r0, r3
     fb0:	3718      	adds	r7, #24
     fb2:	46bd      	mov	sp, r7
     fb4:	bd80      	pop	{r7, pc}
     fb6:	bf00      	nop
     fb8:	00002868 	.word	0x00002868
     fbc:	00001061 	.word	0x00001061
     fc0:	0000196d 	.word	0x0000196d
     fc4:	00001921 	.word	0x00001921
     fc8:	0000198d 	.word	0x0000198d

00000fcc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     fcc:	b590      	push	{r4, r7, lr}
     fce:	b087      	sub	sp, #28
     fd0:	af00      	add	r7, sp, #0
     fd2:	60f8      	str	r0, [r7, #12]
     fd4:	60b9      	str	r1, [r7, #8]
     fd6:	4613      	mov	r3, r2
     fd8:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
     fda:	2300      	movs	r3, #0
     fdc:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     fde:	68fb      	ldr	r3, [r7, #12]
     fe0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d007      	beq.n	ff8 <usart_sync_read+0x2c>
     fe8:	68bb      	ldr	r3, [r7, #8]
     fea:	2b00      	cmp	r3, #0
     fec:	d004      	beq.n	ff8 <usart_sync_read+0x2c>
     fee:	88fb      	ldrh	r3, [r7, #6]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d001      	beq.n	ff8 <usart_sync_read+0x2c>
     ff4:	2301      	movs	r3, #1
     ff6:	e000      	b.n	ffa <usart_sync_read+0x2e>
     ff8:	2300      	movs	r3, #0
     ffa:	f003 0301 	and.w	r3, r3, #1
     ffe:	b2db      	uxtb	r3, r3
    1000:	f44f 7286 	mov.w	r2, #268	; 0x10c
    1004:	4912      	ldr	r1, [pc, #72]	; (1050 <usart_sync_read+0x84>)
    1006:	4618      	mov	r0, r3
    1008:	4b12      	ldr	r3, [pc, #72]	; (1054 <usart_sync_read+0x88>)
    100a:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    100c:	bf00      	nop
    100e:	693b      	ldr	r3, [r7, #16]
    1010:	3308      	adds	r3, #8
    1012:	4618      	mov	r0, r3
    1014:	4b10      	ldr	r3, [pc, #64]	; (1058 <usart_sync_read+0x8c>)
    1016:	4798      	blx	r3
    1018:	4603      	mov	r3, r0
    101a:	f083 0301 	eor.w	r3, r3, #1
    101e:	b2db      	uxtb	r3, r3
    1020:	2b00      	cmp	r3, #0
    1022:	d1f4      	bne.n	100e <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1024:	68ba      	ldr	r2, [r7, #8]
    1026:	697b      	ldr	r3, [r7, #20]
    1028:	18d4      	adds	r4, r2, r3
    102a:	693b      	ldr	r3, [r7, #16]
    102c:	3308      	adds	r3, #8
    102e:	4618      	mov	r0, r3
    1030:	4b0a      	ldr	r3, [pc, #40]	; (105c <usart_sync_read+0x90>)
    1032:	4798      	blx	r3
    1034:	4603      	mov	r3, r0
    1036:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1038:	697b      	ldr	r3, [r7, #20]
    103a:	3301      	adds	r3, #1
    103c:	617b      	str	r3, [r7, #20]
    103e:	88fb      	ldrh	r3, [r7, #6]
    1040:	697a      	ldr	r2, [r7, #20]
    1042:	429a      	cmp	r2, r3
    1044:	d3e2      	bcc.n	100c <usart_sync_read+0x40>

	return (int32_t)offset;
    1046:	697b      	ldr	r3, [r7, #20]
}
    1048:	4618      	mov	r0, r3
    104a:	371c      	adds	r7, #28
    104c:	46bd      	mov	sp, r7
    104e:	bd90      	pop	{r4, r7, pc}
    1050:	00002868 	.word	0x00002868
    1054:	00001061 	.word	0x00001061
    1058:	000019ad 	.word	0x000019ad
    105c:	00001949 	.word	0x00001949

00001060 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1060:	b480      	push	{r7}
    1062:	b085      	sub	sp, #20
    1064:	af00      	add	r7, sp, #0
    1066:	4603      	mov	r3, r0
    1068:	60b9      	str	r1, [r7, #8]
    106a:	607a      	str	r2, [r7, #4]
    106c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    106e:	7bfb      	ldrb	r3, [r7, #15]
    1070:	f083 0301 	eor.w	r3, r3, #1
    1074:	b2db      	uxtb	r3, r3
    1076:	2b00      	cmp	r3, #0
    1078:	d000      	beq.n	107c <assert+0x1c>
		__asm("BKPT #0");
    107a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    107c:	bf00      	nop
    107e:	3714      	adds	r7, #20
    1080:	46bd      	mov	sp, r7
    1082:	f85d 7b04 	ldr.w	r7, [sp], #4
    1086:	4770      	bx	lr

00001088 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1088:	b480      	push	{r7}
    108a:	b085      	sub	sp, #20
    108c:	af00      	add	r7, sp, #0
    108e:	6078      	str	r0, [r7, #4]
    1090:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	60fb      	str	r3, [r7, #12]
    1098:	e008      	b.n	10ac <is_list_element+0x24>
		if (it == element) {
    109a:	68fa      	ldr	r2, [r7, #12]
    109c:	683b      	ldr	r3, [r7, #0]
    109e:	429a      	cmp	r2, r3
    10a0:	d101      	bne.n	10a6 <is_list_element+0x1e>
			return true;
    10a2:	2301      	movs	r3, #1
    10a4:	e006      	b.n	10b4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    10a6:	68fb      	ldr	r3, [r7, #12]
    10a8:	681b      	ldr	r3, [r3, #0]
    10aa:	60fb      	str	r3, [r7, #12]
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d1f3      	bne.n	109a <is_list_element+0x12>
		}
	}

	return false;
    10b2:	2300      	movs	r3, #0
}
    10b4:	4618      	mov	r0, r3
    10b6:	3714      	adds	r7, #20
    10b8:	46bd      	mov	sp, r7
    10ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    10be:	4770      	bx	lr

000010c0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    10c0:	b580      	push	{r7, lr}
    10c2:	b082      	sub	sp, #8
    10c4:	af00      	add	r7, sp, #0
    10c6:	6078      	str	r0, [r7, #4]
    10c8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    10ca:	6839      	ldr	r1, [r7, #0]
    10cc:	6878      	ldr	r0, [r7, #4]
    10ce:	4b0f      	ldr	r3, [pc, #60]	; (110c <list_insert_as_head+0x4c>)
    10d0:	4798      	blx	r3
    10d2:	4603      	mov	r3, r0
    10d4:	2b00      	cmp	r3, #0
    10d6:	bf14      	ite	ne
    10d8:	2301      	movne	r3, #1
    10da:	2300      	moveq	r3, #0
    10dc:	b2db      	uxtb	r3, r3
    10de:	f083 0301 	eor.w	r3, r3, #1
    10e2:	b2db      	uxtb	r3, r3
    10e4:	f003 0301 	and.w	r3, r3, #1
    10e8:	b2db      	uxtb	r3, r3
    10ea:	2239      	movs	r2, #57	; 0x39
    10ec:	4908      	ldr	r1, [pc, #32]	; (1110 <list_insert_as_head+0x50>)
    10ee:	4618      	mov	r0, r3
    10f0:	4b08      	ldr	r3, [pc, #32]	; (1114 <list_insert_as_head+0x54>)
    10f2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	681a      	ldr	r2, [r3, #0]
    10f8:	683b      	ldr	r3, [r7, #0]
    10fa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	683a      	ldr	r2, [r7, #0]
    1100:	601a      	str	r2, [r3, #0]
}
    1102:	bf00      	nop
    1104:	3708      	adds	r7, #8
    1106:	46bd      	mov	sp, r7
    1108:	bd80      	pop	{r7, pc}
    110a:	bf00      	nop
    110c:	00001089 	.word	0x00001089
    1110:	00002884 	.word	0x00002884
    1114:	00001061 	.word	0x00001061

00001118 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1118:	b480      	push	{r7}
    111a:	b083      	sub	sp, #12
    111c:	af00      	add	r7, sp, #0
    111e:	6078      	str	r0, [r7, #4]
    1120:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	681a      	ldr	r2, [r3, #0]
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	683a      	ldr	r2, [r7, #0]
    112e:	601a      	str	r2, [r3, #0]
}
    1130:	bf00      	nop
    1132:	370c      	adds	r7, #12
    1134:	46bd      	mov	sp, r7
    1136:	f85d 7b04 	ldr.w	r7, [sp], #4
    113a:	4770      	bx	lr

0000113c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    113c:	b480      	push	{r7}
    113e:	b085      	sub	sp, #20
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
	if (list->head) {
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	d009      	beq.n	1160 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	681b      	ldr	r3, [r3, #0]
    1156:	681a      	ldr	r2, [r3, #0]
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    115c:	68fb      	ldr	r3, [r7, #12]
    115e:	e000      	b.n	1162 <list_remove_head+0x26>
	}

	return NULL;
    1160:	2300      	movs	r3, #0
}
    1162:	4618      	mov	r0, r3
    1164:	3714      	adds	r7, #20
    1166:	46bd      	mov	sp, r7
    1168:	f85d 7b04 	ldr.w	r7, [sp], #4
    116c:	4770      	bx	lr

0000116e <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    116e:	b480      	push	{r7}
    1170:	b083      	sub	sp, #12
    1172:	af00      	add	r7, sp, #0
    1174:	6078      	str	r0, [r7, #4]
    1176:	460b      	mov	r3, r1
    1178:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    117a:	687b      	ldr	r3, [r7, #4]
    117c:	881b      	ldrh	r3, [r3, #0]
    117e:	b29a      	uxth	r2, r3
    1180:	887b      	ldrh	r3, [r7, #2]
    1182:	021b      	lsls	r3, r3, #8
    1184:	b29b      	uxth	r3, r3
    1186:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    118a:	b29b      	uxth	r3, r3
    118c:	4313      	orrs	r3, r2
    118e:	b29a      	uxth	r2, r3
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1194:	bf00      	nop
    1196:	370c      	adds	r7, #12
    1198:	46bd      	mov	sp, r7
    119a:	f85d 7b04 	ldr.w	r7, [sp], #4
    119e:	4770      	bx	lr

000011a0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    11a4:	2100      	movs	r1, #0
    11a6:	4808      	ldr	r0, [pc, #32]	; (11c8 <_init_chip+0x28>)
    11a8:	4b08      	ldr	r3, [pc, #32]	; (11cc <_init_chip+0x2c>)
    11aa:	4798      	blx	r3

	_osc32kctrl_init_sources();
    11ac:	4b08      	ldr	r3, [pc, #32]	; (11d0 <_init_chip+0x30>)
    11ae:	4798      	blx	r3
	_oscctrl_init_sources();
    11b0:	4b08      	ldr	r3, [pc, #32]	; (11d4 <_init_chip+0x34>)
    11b2:	4798      	blx	r3
	_mclk_init();
    11b4:	4b08      	ldr	r3, [pc, #32]	; (11d8 <_init_chip+0x38>)
    11b6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    11b8:	4b08      	ldr	r3, [pc, #32]	; (11dc <_init_chip+0x3c>)
    11ba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    11bc:	f640 70ff 	movw	r0, #4095	; 0xfff
    11c0:	4b07      	ldr	r3, [pc, #28]	; (11e0 <_init_chip+0x40>)
    11c2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    11c4:	bf00      	nop
    11c6:	bd80      	pop	{r7, pc}
    11c8:	41004000 	.word	0x41004000
    11cc:	0000116f 	.word	0x0000116f
    11d0:	0000130d 	.word	0x0000130d
    11d4:	000013a5 	.word	0x000013a5
    11d8:	00001289 	.word	0x00001289
    11dc:	000013e5 	.word	0x000013e5
    11e0:	00001239 	.word	0x00001239

000011e4 <hri_gclk_wait_for_sync>:
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
    11ec:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11ee:	bf00      	nop
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	685a      	ldr	r2, [r3, #4]
    11f4:	683b      	ldr	r3, [r7, #0]
    11f6:	4013      	ands	r3, r2
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1f9      	bne.n	11f0 <hri_gclk_wait_for_sync+0xc>
}
    11fc:	bf00      	nop
    11fe:	370c      	adds	r7, #12
    1200:	46bd      	mov	sp, r7
    1202:	f85d 7b04 	ldr.w	r7, [sp], #4
    1206:	4770      	bx	lr

00001208 <hri_gclk_write_GENCTRL_reg>:
{
    1208:	b580      	push	{r7, lr}
    120a:	b084      	sub	sp, #16
    120c:	af00      	add	r7, sp, #0
    120e:	60f8      	str	r0, [r7, #12]
    1210:	460b      	mov	r3, r1
    1212:	607a      	str	r2, [r7, #4]
    1214:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1216:	7afa      	ldrb	r2, [r7, #11]
    1218:	68fb      	ldr	r3, [r7, #12]
    121a:	3208      	adds	r2, #8
    121c:	6879      	ldr	r1, [r7, #4]
    121e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1222:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1226:	68f8      	ldr	r0, [r7, #12]
    1228:	4b02      	ldr	r3, [pc, #8]	; (1234 <hri_gclk_write_GENCTRL_reg+0x2c>)
    122a:	4798      	blx	r3
}
    122c:	bf00      	nop
    122e:	3710      	adds	r7, #16
    1230:	46bd      	mov	sp, r7
    1232:	bd80      	pop	{r7, pc}
    1234:	000011e5 	.word	0x000011e5

00001238 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	f003 0301 	and.w	r3, r3, #1
    1246:	2b00      	cmp	r3, #0
    1248:	d004      	beq.n	1254 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    124a:	4a04      	ldr	r2, [pc, #16]	; (125c <_gclk_init_generators_by_fref+0x24>)
    124c:	2100      	movs	r1, #0
    124e:	4804      	ldr	r0, [pc, #16]	; (1260 <_gclk_init_generators_by_fref+0x28>)
    1250:	4b04      	ldr	r3, [pc, #16]	; (1264 <_gclk_init_generators_by_fref+0x2c>)
    1252:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1254:	bf00      	nop
    1256:	3708      	adds	r7, #8
    1258:	46bd      	mov	sp, r7
    125a:	bd80      	pop	{r7, pc}
    125c:	00010101 	.word	0x00010101
    1260:	40001c00 	.word	0x40001c00
    1264:	00001209 	.word	0x00001209

00001268 <hri_mclk_write_CPUDIV_reg>:
{
    1268:	b480      	push	{r7}
    126a:	b083      	sub	sp, #12
    126c:	af00      	add	r7, sp, #0
    126e:	6078      	str	r0, [r7, #4]
    1270:	460b      	mov	r3, r1
    1272:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1274:	687b      	ldr	r3, [r7, #4]
    1276:	78fa      	ldrb	r2, [r7, #3]
    1278:	715a      	strb	r2, [r3, #5]
}
    127a:	bf00      	nop
    127c:	370c      	adds	r7, #12
    127e:	46bd      	mov	sp, r7
    1280:	f85d 7b04 	ldr.w	r7, [sp], #4
    1284:	4770      	bx	lr
	...

00001288 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	b082      	sub	sp, #8
    128c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    128e:	4b05      	ldr	r3, [pc, #20]	; (12a4 <_mclk_init+0x1c>)
    1290:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    1292:	2101      	movs	r1, #1
    1294:	6878      	ldr	r0, [r7, #4]
    1296:	4b04      	ldr	r3, [pc, #16]	; (12a8 <_mclk_init+0x20>)
    1298:	4798      	blx	r3
}
    129a:	bf00      	nop
    129c:	3708      	adds	r7, #8
    129e:	46bd      	mov	sp, r7
    12a0:	bd80      	pop	{r7, pc}
    12a2:	bf00      	nop
    12a4:	40000800 	.word	0x40000800
    12a8:	00001269 	.word	0x00001269

000012ac <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    12ac:	b480      	push	{r7}
    12ae:	b083      	sub	sp, #12
    12b0:	af00      	add	r7, sp, #0
    12b2:	6078      	str	r0, [r7, #4]
    12b4:	460b      	mov	r3, r1
    12b6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	78fa      	ldrb	r2, [r7, #3]
    12bc:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    12be:	bf00      	nop
    12c0:	370c      	adds	r7, #12
    12c2:	46bd      	mov	sp, r7
    12c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12c8:	4770      	bx	lr

000012ca <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    12ca:	b480      	push	{r7}
    12cc:	b085      	sub	sp, #20
    12ce:	af00      	add	r7, sp, #0
    12d0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	69db      	ldr	r3, [r3, #28]
    12d6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	0a1b      	lsrs	r3, r3, #8
    12dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    12e0:	60fb      	str	r3, [r7, #12]
	return tmp;
    12e2:	68fb      	ldr	r3, [r7, #12]
}
    12e4:	4618      	mov	r0, r3
    12e6:	3714      	adds	r7, #20
    12e8:	46bd      	mov	sp, r7
    12ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ee:	4770      	bx	lr

000012f0 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    12f0:	b480      	push	{r7}
    12f2:	b083      	sub	sp, #12
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
    12f8:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	683a      	ldr	r2, [r7, #0]
    12fe:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1300:	bf00      	nop
    1302:	370c      	adds	r7, #12
    1304:	46bd      	mov	sp, r7
    1306:	f85d 7b04 	ldr.w	r7, [sp], #4
    130a:	4770      	bx	lr

0000130c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    130c:	b580      	push	{r7, lr}
    130e:	b082      	sub	sp, #8
    1310:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1312:	4b0c      	ldr	r3, [pc, #48]	; (1344 <_osc32kctrl_init_sources+0x38>)
    1314:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1316:	2300      	movs	r3, #0
    1318:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    131a:	6878      	ldr	r0, [r7, #4]
    131c:	4b0a      	ldr	r3, [pc, #40]	; (1348 <_osc32kctrl_init_sources+0x3c>)
    131e:	4798      	blx	r3
    1320:	4603      	mov	r3, r0
    1322:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1324:	887b      	ldrh	r3, [r7, #2]
    1326:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1328:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    132c:	4619      	mov	r1, r3
    132e:	6878      	ldr	r0, [r7, #4]
    1330:	4b06      	ldr	r3, [pc, #24]	; (134c <_osc32kctrl_init_sources+0x40>)
    1332:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1334:	2101      	movs	r1, #1
    1336:	6878      	ldr	r0, [r7, #4]
    1338:	4b05      	ldr	r3, [pc, #20]	; (1350 <_osc32kctrl_init_sources+0x44>)
    133a:	4798      	blx	r3
	(void)calib;
}
    133c:	bf00      	nop
    133e:	3708      	adds	r7, #8
    1340:	46bd      	mov	sp, r7
    1342:	bd80      	pop	{r7, pc}
    1344:	40001400 	.word	0x40001400
    1348:	000012cb 	.word	0x000012cb
    134c:	000012f1 	.word	0x000012f1
    1350:	000012ad 	.word	0x000012ad

00001354 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    1354:	b480      	push	{r7}
    1356:	b083      	sub	sp, #12
    1358:	af00      	add	r7, sp, #0
    135a:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	691b      	ldr	r3, [r3, #16]
    1360:	085b      	lsrs	r3, r3, #1
    1362:	f003 0301 	and.w	r3, r3, #1
    1366:	2b00      	cmp	r3, #0
    1368:	bf14      	ite	ne
    136a:	2301      	movne	r3, #1
    136c:	2300      	moveq	r3, #0
    136e:	b2db      	uxtb	r3, r3
}
    1370:	4618      	mov	r0, r3
    1372:	370c      	adds	r7, #12
    1374:	46bd      	mov	sp, r7
    1376:	f85d 7b04 	ldr.w	r7, [sp], #4
    137a:	4770      	bx	lr

0000137c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    137c:	b480      	push	{r7}
    137e:	b085      	sub	sp, #20
    1380:	af00      	add	r7, sp, #0
    1382:	60f8      	str	r0, [r7, #12]
    1384:	460b      	mov	r3, r1
    1386:	607a      	str	r2, [r7, #4]
    1388:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    138a:	7afb      	ldrb	r3, [r7, #11]
    138c:	68fa      	ldr	r2, [r7, #12]
    138e:	3304      	adds	r3, #4
    1390:	009b      	lsls	r3, r3, #2
    1392:	4413      	add	r3, r2
    1394:	687a      	ldr	r2, [r7, #4]
    1396:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1398:	bf00      	nop
    139a:	3714      	adds	r7, #20
    139c:	46bd      	mov	sp, r7
    139e:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a2:	4770      	bx	lr

000013a4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	b082      	sub	sp, #8
    13a8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    13aa:	4b0a      	ldr	r3, [pc, #40]	; (13d4 <_oscctrl_init_sources+0x30>)
    13ac:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_oscctrl_init_sources+0x34>)
    13b0:	2101      	movs	r1, #1
    13b2:	6878      	ldr	r0, [r7, #4]
    13b4:	4b09      	ldr	r3, [pc, #36]	; (13dc <_oscctrl_init_sources+0x38>)
    13b6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    13b8:	bf00      	nop
    13ba:	6878      	ldr	r0, [r7, #4]
    13bc:	4b08      	ldr	r3, [pc, #32]	; (13e0 <_oscctrl_init_sources+0x3c>)
    13be:	4798      	blx	r3
    13c0:	4603      	mov	r3, r0
    13c2:	f083 0301 	eor.w	r3, r3, #1
    13c6:	b2db      	uxtb	r3, r3
    13c8:	2b00      	cmp	r3, #0
    13ca:	d1f6      	bne.n	13ba <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    13cc:	bf00      	nop
    13ce:	3708      	adds	r7, #8
    13d0:	46bd      	mov	sp, r7
    13d2:	bd80      	pop	{r7, pc}
    13d4:	40001000 	.word	0x40001000
    13d8:	03002606 	.word	0x03002606
    13dc:	0000137d 	.word	0x0000137d
    13e0:	00001355 	.word	0x00001355

000013e4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    13e4:	b480      	push	{r7}
    13e6:	b083      	sub	sp, #12
    13e8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    13ea:	4b04      	ldr	r3, [pc, #16]	; (13fc <_oscctrl_init_referenced_generators+0x18>)
    13ec:	607b      	str	r3, [r7, #4]
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    13ee:	bf00      	nop
    13f0:	370c      	adds	r7, #12
    13f2:	46bd      	mov	sp, r7
    13f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f8:	4770      	bx	lr
    13fa:	bf00      	nop
    13fc:	40001000 	.word	0x40001000

00001400 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    1400:	b480      	push	{r7}
    1402:	b083      	sub	sp, #12
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	789b      	ldrb	r3, [r3, #2]
    140c:	b2db      	uxtb	r3, r3
}
    140e:	4618      	mov	r0, r3
    1410:	370c      	adds	r7, #12
    1412:	46bd      	mov	sp, r7
    1414:	f85d 7b04 	ldr.w	r7, [sp], #4
    1418:	4770      	bx	lr

0000141a <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    141a:	b480      	push	{r7}
    141c:	b083      	sub	sp, #12
    141e:	af00      	add	r7, sp, #0
    1420:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	685b      	ldr	r3, [r3, #4]
}
    1426:	4618      	mov	r0, r3
    1428:	370c      	adds	r7, #12
    142a:	46bd      	mov	sp, r7
    142c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1430:	4770      	bx	lr
	...

00001434 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1434:	b590      	push	{r4, r7, lr}
    1436:	b083      	sub	sp, #12
    1438:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    143a:	4b17      	ldr	r3, [pc, #92]	; (1498 <RAMECC_Handler+0x64>)
    143c:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    143e:	4817      	ldr	r0, [pc, #92]	; (149c <RAMECC_Handler+0x68>)
    1440:	4b17      	ldr	r3, [pc, #92]	; (14a0 <RAMECC_Handler+0x6c>)
    1442:	4798      	blx	r3
    1444:	4603      	mov	r3, r0
    1446:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1448:	683b      	ldr	r3, [r7, #0]
    144a:	f003 0302 	and.w	r3, r3, #2
    144e:	2b00      	cmp	r3, #0
    1450:	d00c      	beq.n	146c <RAMECC_Handler+0x38>
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	2b00      	cmp	r3, #0
    1458:	d008      	beq.n	146c <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	681c      	ldr	r4, [r3, #0]
    145e:	480f      	ldr	r0, [pc, #60]	; (149c <RAMECC_Handler+0x68>)
    1460:	4b10      	ldr	r3, [pc, #64]	; (14a4 <RAMECC_Handler+0x70>)
    1462:	4798      	blx	r3
    1464:	4603      	mov	r3, r0
    1466:	4618      	mov	r0, r3
    1468:	47a0      	blx	r4
    146a:	e012      	b.n	1492 <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    146c:	683b      	ldr	r3, [r7, #0]
    146e:	f003 0301 	and.w	r3, r3, #1
    1472:	2b00      	cmp	r3, #0
    1474:	d00c      	beq.n	1490 <RAMECC_Handler+0x5c>
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	685b      	ldr	r3, [r3, #4]
    147a:	2b00      	cmp	r3, #0
    147c:	d008      	beq.n	1490 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	685c      	ldr	r4, [r3, #4]
    1482:	4806      	ldr	r0, [pc, #24]	; (149c <RAMECC_Handler+0x68>)
    1484:	4b07      	ldr	r3, [pc, #28]	; (14a4 <RAMECC_Handler+0x70>)
    1486:	4798      	blx	r3
    1488:	4603      	mov	r3, r0
    148a:	4618      	mov	r0, r3
    148c:	47a0      	blx	r4
    148e:	e000      	b.n	1492 <RAMECC_Handler+0x5e>
	} else {
		return;
    1490:	bf00      	nop
	}
}
    1492:	370c      	adds	r7, #12
    1494:	46bd      	mov	sp, r7
    1496:	bd90      	pop	{r4, r7, pc}
    1498:	20000078 	.word	0x20000078
    149c:	41020000 	.word	0x41020000
    14a0:	00001401 	.word	0x00001401
    14a4:	0000141b 	.word	0x0000141b

000014a8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
    14b0:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    14b2:	bf00      	nop
    14b4:	687b      	ldr	r3, [r7, #4]
    14b6:	691a      	ldr	r2, [r3, #16]
    14b8:	683b      	ldr	r3, [r7, #0]
    14ba:	4013      	ands	r3, r2
    14bc:	2b00      	cmp	r3, #0
    14be:	d1f9      	bne.n	14b4 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    14c0:	bf00      	nop
    14c2:	370c      	adds	r7, #12
    14c4:	46bd      	mov	sp, r7
    14c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ca:	4770      	bx	lr

000014cc <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    14cc:	b480      	push	{r7}
    14ce:	b083      	sub	sp, #12
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    14da:	819a      	strh	r2, [r3, #12]
}
    14dc:	bf00      	nop
    14de:	370c      	adds	r7, #12
    14e0:	46bd      	mov	sp, r7
    14e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    14e6:	4770      	bx	lr

000014e8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    14e8:	b480      	push	{r7}
    14ea:	b083      	sub	sp, #12
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	899b      	ldrh	r3, [r3, #12]
    14f4:	b29b      	uxth	r3, r3
}
    14f6:	4618      	mov	r0, r3
    14f8:	370c      	adds	r7, #12
    14fa:	46bd      	mov	sp, r7
    14fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1500:	4770      	bx	lr

00001502 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    1502:	b480      	push	{r7}
    1504:	b083      	sub	sp, #12
    1506:	af00      	add	r7, sp, #0
    1508:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1510:	815a      	strh	r2, [r3, #10]
}
    1512:	bf00      	nop
    1514:	370c      	adds	r7, #12
    1516:	46bd      	mov	sp, r7
    1518:	f85d 7b04 	ldr.w	r7, [sp], #4
    151c:	4770      	bx	lr
	...

00001520 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    1520:	b580      	push	{r7, lr}
    1522:	b082      	sub	sp, #8
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    1528:	460b      	mov	r3, r1
    152a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	887a      	ldrh	r2, [r7, #2]
    1530:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    1532:	f248 0103 	movw	r1, #32771	; 0x8003
    1536:	6878      	ldr	r0, [r7, #4]
    1538:	4b02      	ldr	r3, [pc, #8]	; (1544 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    153a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    153c:	bf00      	nop
    153e:	3708      	adds	r7, #8
    1540:	46bd      	mov	sp, r7
    1542:	bd80      	pop	{r7, pc}
    1544:	000014a9 	.word	0x000014a9

00001548 <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    1548:	b580      	push	{r7, lr}
    154a:	b084      	sub	sp, #16
    154c:	af00      	add	r7, sp, #0
    154e:	60f8      	str	r0, [r7, #12]
    1550:	460b      	mov	r3, r1
    1552:	607a      	str	r2, [r7, #4]
    1554:	72fb      	strb	r3, [r7, #11]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1556:	7afa      	ldrb	r2, [r7, #11]
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	3208      	adds	r2, #8
    155c:	6879      	ldr	r1, [r7, #4]
    155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    1562:	2160      	movs	r1, #96	; 0x60
    1564:	68f8      	ldr	r0, [r7, #12]
    1566:	4b03      	ldr	r3, [pc, #12]	; (1574 <hri_rtcmode0_write_COMP_reg+0x2c>)
    1568:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    156a:	bf00      	nop
    156c:	3710      	adds	r7, #16
    156e:	46bd      	mov	sp, r7
    1570:	bd80      	pop	{r7, pc}
    1572:	bf00      	nop
    1574:	000014a9 	.word	0x000014a9

00001578 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	2b00      	cmp	r3, #0
    1586:	bf14      	ite	ne
    1588:	2301      	movne	r3, #1
    158a:	2300      	moveq	r3, #0
    158c:	b2db      	uxtb	r3, r3
    158e:	2230      	movs	r2, #48	; 0x30
    1590:	4916      	ldr	r1, [pc, #88]	; (15ec <_timer_init+0x74>)
    1592:	4618      	mov	r0, r3
    1594:	4b16      	ldr	r3, [pc, #88]	; (15f0 <_timer_init+0x78>)
    1596:	4798      	blx	r3

	dev->hw = hw;
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	683a      	ldr	r2, [r7, #0]
    159c:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	68db      	ldr	r3, [r3, #12]
    15a2:	2101      	movs	r1, #1
    15a4:	4618      	mov	r0, r3
    15a6:	4b13      	ldr	r3, [pc, #76]	; (15f4 <_timer_init+0x7c>)
    15a8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	68db      	ldr	r3, [r3, #12]
    15ae:	2101      	movs	r1, #1
    15b0:	4618      	mov	r0, r3
    15b2:	4b11      	ldr	r3, [pc, #68]	; (15f8 <_timer_init+0x80>)
    15b4:	4798      	blx	r3
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	68db      	ldr	r3, [r3, #12]
	hri_rtcmode0_write_CTRLA_reg(
    15ba:	f248 0180 	movw	r1, #32896	; 0x8080
    15be:	4618      	mov	r0, r3
    15c0:	4b0c      	ldr	r3, [pc, #48]	; (15f4 <_timer_init+0x7c>)
    15c2:	4798      	blx	r3
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	68db      	ldr	r3, [r3, #12]
    15c8:	2220      	movs	r2, #32
    15ca:	2100      	movs	r1, #0
    15cc:	4618      	mov	r0, r3
    15ce:	4b0b      	ldr	r3, [pc, #44]	; (15fc <_timer_init+0x84>)
    15d0:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	68db      	ldr	r3, [r3, #12]
    15d6:	4618      	mov	r0, r3
    15d8:	4b09      	ldr	r3, [pc, #36]	; (1600 <_timer_init+0x88>)
    15da:	4798      	blx	r3

	_rtc_dev = dev;
    15dc:	4a09      	ldr	r2, [pc, #36]	; (1604 <_timer_init+0x8c>)
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    15e2:	2300      	movs	r3, #0
}
    15e4:	4618      	mov	r0, r3
    15e6:	3708      	adds	r7, #8
    15e8:	46bd      	mov	sp, r7
    15ea:	bd80      	pop	{r7, pc}
    15ec:	000028a4 	.word	0x000028a4
    15f0:	00001061 	.word	0x00001061
    15f4:	00001521 	.word	0x00001521
    15f8:	000014a9 	.word	0x000014a9
    15fc:	00001549 	.word	0x00001549
    1600:	00001503 	.word	0x00001503
    1604:	20000038 	.word	0x20000038

00001608 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    1608:	b580      	push	{r7, lr}
    160a:	b084      	sub	sp, #16
    160c:	af00      	add	r7, sp, #0
    160e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	68db      	ldr	r3, [r3, #12]
    1614:	4618      	mov	r0, r3
    1616:	4b0d      	ldr	r3, [pc, #52]	; (164c <_rtc_timer_interrupt_handler+0x44>)
    1618:	4798      	blx	r3
    161a:	4603      	mov	r3, r0
    161c:	81fb      	strh	r3, [r7, #14]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    161e:	89fb      	ldrh	r3, [r7, #14]
    1620:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1624:	2b00      	cmp	r3, #0
    1626:	d00c      	beq.n	1642 <_rtc_timer_interrupt_handler+0x3a>
		if (dev->timer_cb.period_expired) {
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	2b00      	cmp	r3, #0
    162e:	d003      	beq.n	1638 <_rtc_timer_interrupt_handler+0x30>
			dev->timer_cb.period_expired(dev);
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	6878      	ldr	r0, [r7, #4]
    1636:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	68db      	ldr	r3, [r3, #12]
    163c:	4618      	mov	r0, r3
    163e:	4b04      	ldr	r3, [pc, #16]	; (1650 <_rtc_timer_interrupt_handler+0x48>)
    1640:	4798      	blx	r3
	}
}
    1642:	bf00      	nop
    1644:	3710      	adds	r7, #16
    1646:	46bd      	mov	sp, r7
    1648:	bd80      	pop	{r7, pc}
    164a:	bf00      	nop
    164c:	000014e9 	.word	0x000014e9
    1650:	000014cd 	.word	0x000014cd

00001654 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    1654:	b480      	push	{r7}
    1656:	af00      	add	r7, sp, #0
	return NULL;
    1658:	2300      	movs	r3, #0
}
    165a:	4618      	mov	r0, r3
    165c:	46bd      	mov	sp, r7
    165e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1662:	4770      	bx	lr

00001664 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1664:	b580      	push	{r7, lr}
    1666:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    1668:	4b03      	ldr	r3, [pc, #12]	; (1678 <RTC_Handler+0x14>)
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	4618      	mov	r0, r3
    166e:	4b03      	ldr	r3, [pc, #12]	; (167c <RTC_Handler+0x18>)
    1670:	4798      	blx	r3
}
    1672:	bf00      	nop
    1674:	bd80      	pop	{r7, pc}
    1676:	bf00      	nop
    1678:	20000038 	.word	0x20000038
    167c:	00001609 	.word	0x00001609

00001680 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    1680:	b480      	push	{r7}
    1682:	b083      	sub	sp, #12
    1684:	af00      	add	r7, sp, #0
    1686:	6078      	str	r0, [r7, #4]
    1688:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    168a:	bf00      	nop
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	69da      	ldr	r2, [r3, #28]
    1690:	683b      	ldr	r3, [r7, #0]
    1692:	4013      	ands	r3, r2
    1694:	2b00      	cmp	r3, #0
    1696:	d1f9      	bne.n	168c <hri_sercomusart_wait_for_sync+0xc>
	};
}
    1698:	bf00      	nop
    169a:	370c      	adds	r7, #12
    169c:	46bd      	mov	sp, r7
    169e:	f85d 7b04 	ldr.w	r7, [sp], #4
    16a2:	4770      	bx	lr

000016a4 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    16a4:	b480      	push	{r7}
    16a6:	b083      	sub	sp, #12
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
    16ac:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	69da      	ldr	r2, [r3, #28]
    16b2:	683b      	ldr	r3, [r7, #0]
    16b4:	4013      	ands	r3, r2
    16b6:	2b00      	cmp	r3, #0
    16b8:	bf14      	ite	ne
    16ba:	2301      	movne	r3, #1
    16bc:	2300      	moveq	r3, #0
    16be:	b2db      	uxtb	r3, r3
}
    16c0:	4618      	mov	r0, r3
    16c2:	370c      	adds	r7, #12
    16c4:	46bd      	mov	sp, r7
    16c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    16ca:	4770      	bx	lr

000016cc <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    16cc:	b480      	push	{r7}
    16ce:	b083      	sub	sp, #12
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	7e1b      	ldrb	r3, [r3, #24]
    16d8:	b2db      	uxtb	r3, r3
    16da:	f003 0301 	and.w	r3, r3, #1
    16de:	2b00      	cmp	r3, #0
    16e0:	bf14      	ite	ne
    16e2:	2301      	movne	r3, #1
    16e4:	2300      	moveq	r3, #0
    16e6:	b2db      	uxtb	r3, r3
}
    16e8:	4618      	mov	r0, r3
    16ea:	370c      	adds	r7, #12
    16ec:	46bd      	mov	sp, r7
    16ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    16f2:	4770      	bx	lr

000016f4 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    16f4:	b480      	push	{r7}
    16f6:	b083      	sub	sp, #12
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	7e1b      	ldrb	r3, [r3, #24]
    1700:	b2db      	uxtb	r3, r3
    1702:	085b      	lsrs	r3, r3, #1
    1704:	f003 0301 	and.w	r3, r3, #1
    1708:	2b00      	cmp	r3, #0
    170a:	bf14      	ite	ne
    170c:	2301      	movne	r3, #1
    170e:	2300      	moveq	r3, #0
    1710:	b2db      	uxtb	r3, r3
}
    1712:	4618      	mov	r0, r3
    1714:	370c      	adds	r7, #12
    1716:	46bd      	mov	sp, r7
    1718:	f85d 7b04 	ldr.w	r7, [sp], #4
    171c:	4770      	bx	lr

0000171e <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    171e:	b480      	push	{r7}
    1720:	b083      	sub	sp, #12
    1722:	af00      	add	r7, sp, #0
    1724:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	7e1b      	ldrb	r3, [r3, #24]
    172a:	b2db      	uxtb	r3, r3
    172c:	089b      	lsrs	r3, r3, #2
    172e:	f003 0301 	and.w	r3, r3, #1
    1732:	2b00      	cmp	r3, #0
    1734:	bf14      	ite	ne
    1736:	2301      	movne	r3, #1
    1738:	2300      	moveq	r3, #0
    173a:	b2db      	uxtb	r3, r3
}
    173c:	4618      	mov	r0, r3
    173e:	370c      	adds	r7, #12
    1740:	46bd      	mov	sp, r7
    1742:	f85d 7b04 	ldr.w	r7, [sp], #4
    1746:	4770      	bx	lr

00001748 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1748:	b580      	push	{r7, lr}
    174a:	b082      	sub	sp, #8
    174c:	af00      	add	r7, sp, #0
    174e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	f043 0202 	orr.w	r2, r3, #2
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    175c:	2103      	movs	r1, #3
    175e:	6878      	ldr	r0, [r7, #4]
    1760:	4b02      	ldr	r3, [pc, #8]	; (176c <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    1762:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1764:	bf00      	nop
    1766:	3708      	adds	r7, #8
    1768:	46bd      	mov	sp, r7
    176a:	bd80      	pop	{r7, pc}
    176c:	00001681 	.word	0x00001681

00001770 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1770:	b580      	push	{r7, lr}
    1772:	b082      	sub	sp, #8
    1774:	af00      	add	r7, sp, #0
    1776:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	f023 0202 	bic.w	r2, r3, #2
    1780:	687b      	ldr	r3, [r7, #4]
    1782:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1784:	2103      	movs	r1, #3
    1786:	6878      	ldr	r0, [r7, #4]
    1788:	4b02      	ldr	r3, [pc, #8]	; (1794 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    178a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    178c:	bf00      	nop
    178e:	3708      	adds	r7, #8
    1790:	46bd      	mov	sp, r7
    1792:	bd80      	pop	{r7, pc}
    1794:	00001681 	.word	0x00001681

00001798 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1798:	b580      	push	{r7, lr}
    179a:	b084      	sub	sp, #16
    179c:	af00      	add	r7, sp, #0
    179e:	6078      	str	r0, [r7, #4]
    17a0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    17a2:	2103      	movs	r1, #3
    17a4:	6878      	ldr	r0, [r7, #4]
    17a6:	4b07      	ldr	r3, [pc, #28]	; (17c4 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    17a8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	681b      	ldr	r3, [r3, #0]
    17ae:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    17b0:	68fa      	ldr	r2, [r7, #12]
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	4013      	ands	r3, r2
    17b6:	60fb      	str	r3, [r7, #12]
	return tmp;
    17b8:	68fb      	ldr	r3, [r7, #12]
}
    17ba:	4618      	mov	r0, r3
    17bc:	3710      	adds	r7, #16
    17be:	46bd      	mov	sp, r7
    17c0:	bd80      	pop	{r7, pc}
    17c2:	bf00      	nop
    17c4:	00001681 	.word	0x00001681

000017c8 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b082      	sub	sp, #8
    17cc:	af00      	add	r7, sp, #0
    17ce:	6078      	str	r0, [r7, #4]
    17d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	683a      	ldr	r2, [r7, #0]
    17d6:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    17d8:	2103      	movs	r1, #3
    17da:	6878      	ldr	r0, [r7, #4]
    17dc:	4b02      	ldr	r3, [pc, #8]	; (17e8 <hri_sercomusart_write_CTRLA_reg+0x20>)
    17de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17e0:	bf00      	nop
    17e2:	3708      	adds	r7, #8
    17e4:	46bd      	mov	sp, r7
    17e6:	bd80      	pop	{r7, pc}
    17e8:	00001681 	.word	0x00001681

000017ec <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	b082      	sub	sp, #8
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
    17f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    17f6:	687b      	ldr	r3, [r7, #4]
    17f8:	683a      	ldr	r2, [r7, #0]
    17fa:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    17fc:	211f      	movs	r1, #31
    17fe:	6878      	ldr	r0, [r7, #4]
    1800:	4b02      	ldr	r3, [pc, #8]	; (180c <hri_sercomusart_write_CTRLB_reg+0x20>)
    1802:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1804:	bf00      	nop
    1806:	3708      	adds	r7, #8
    1808:	46bd      	mov	sp, r7
    180a:	bd80      	pop	{r7, pc}
    180c:	00001681 	.word	0x00001681

00001810 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    1810:	b480      	push	{r7}
    1812:	b083      	sub	sp, #12
    1814:	af00      	add	r7, sp, #0
    1816:	6078      	str	r0, [r7, #4]
    1818:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    181a:	687b      	ldr	r3, [r7, #4]
    181c:	683a      	ldr	r2, [r7, #0]
    181e:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1820:	bf00      	nop
    1822:	370c      	adds	r7, #12
    1824:	46bd      	mov	sp, r7
    1826:	f85d 7b04 	ldr.w	r7, [sp], #4
    182a:	4770      	bx	lr

0000182c <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    182c:	b480      	push	{r7}
    182e:	b083      	sub	sp, #12
    1830:	af00      	add	r7, sp, #0
    1832:	6078      	str	r0, [r7, #4]
    1834:	460b      	mov	r3, r1
    1836:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	887a      	ldrh	r2, [r7, #2]
    183c:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    183e:	bf00      	nop
    1840:	370c      	adds	r7, #12
    1842:	46bd      	mov	sp, r7
    1844:	f85d 7b04 	ldr.w	r7, [sp], #4
    1848:	4770      	bx	lr

0000184a <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    184a:	b480      	push	{r7}
    184c:	b083      	sub	sp, #12
    184e:	af00      	add	r7, sp, #0
    1850:	6078      	str	r0, [r7, #4]
    1852:	460b      	mov	r3, r1
    1854:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	78fa      	ldrb	r2, [r7, #3]
    185a:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    185c:	bf00      	nop
    185e:	370c      	adds	r7, #12
    1860:	46bd      	mov	sp, r7
    1862:	f85d 7b04 	ldr.w	r7, [sp], #4
    1866:	4770      	bx	lr

00001868 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1868:	b480      	push	{r7}
    186a:	b083      	sub	sp, #12
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
    1870:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	683a      	ldr	r2, [r7, #0]
    1876:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1878:	bf00      	nop
    187a:	370c      	adds	r7, #12
    187c:	46bd      	mov	sp, r7
    187e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1882:	4770      	bx	lr

00001884 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1884:	b480      	push	{r7}
    1886:	b083      	sub	sp, #12
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    1890:	4618      	mov	r0, r3
    1892:	370c      	adds	r7, #12
    1894:	46bd      	mov	sp, r7
    1896:	f85d 7b04 	ldr.w	r7, [sp], #4
    189a:	4770      	bx	lr

0000189c <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    189c:	b480      	push	{r7}
    189e:	b083      	sub	sp, #12
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
    18a4:	460b      	mov	r3, r1
    18a6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	78fa      	ldrb	r2, [r7, #3]
    18ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18b0:	bf00      	nop
    18b2:	370c      	adds	r7, #12
    18b4:	46bd      	mov	sp, r7
    18b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18ba:	4770      	bx	lr

000018bc <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    18bc:	b580      	push	{r7, lr}
    18be:	b082      	sub	sp, #8
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
    18c4:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	2b00      	cmp	r3, #0
    18ca:	bf14      	ite	ne
    18cc:	2301      	movne	r3, #1
    18ce:	2300      	moveq	r3, #0
    18d0:	b2db      	uxtb	r3, r3
    18d2:	22bb      	movs	r2, #187	; 0xbb
    18d4:	4907      	ldr	r1, [pc, #28]	; (18f4 <_usart_sync_init+0x38>)
    18d6:	4618      	mov	r0, r3
    18d8:	4b07      	ldr	r3, [pc, #28]	; (18f8 <_usart_sync_init+0x3c>)
    18da:	4798      	blx	r3

	device->hw = hw;
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	683a      	ldr	r2, [r7, #0]
    18e0:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    18e2:	6838      	ldr	r0, [r7, #0]
    18e4:	4b05      	ldr	r3, [pc, #20]	; (18fc <_usart_sync_init+0x40>)
    18e6:	4798      	blx	r3
    18e8:	4603      	mov	r3, r0
}
    18ea:	4618      	mov	r0, r3
    18ec:	3708      	adds	r7, #8
    18ee:	46bd      	mov	sp, r7
    18f0:	bd80      	pop	{r7, pc}
    18f2:	bf00      	nop
    18f4:	000028bc 	.word	0x000028bc
    18f8:	00001061 	.word	0x00001061
    18fc:	00001a8d 	.word	0x00001a8d

00001900 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	4618      	mov	r0, r3
    190e:	4b03      	ldr	r3, [pc, #12]	; (191c <_usart_sync_enable+0x1c>)
    1910:	4798      	blx	r3
}
    1912:	bf00      	nop
    1914:	3708      	adds	r7, #8
    1916:	46bd      	mov	sp, r7
    1918:	bd80      	pop	{r7, pc}
    191a:	bf00      	nop
    191c:	00001749 	.word	0x00001749

00001920 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    1920:	b580      	push	{r7, lr}
    1922:	b082      	sub	sp, #8
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	460b      	mov	r3, r1
    192a:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	78fa      	ldrb	r2, [r7, #3]
    1932:	4611      	mov	r1, r2
    1934:	4618      	mov	r0, r3
    1936:	4b03      	ldr	r3, [pc, #12]	; (1944 <_usart_sync_write_byte+0x24>)
    1938:	4798      	blx	r3
}
    193a:	bf00      	nop
    193c:	3708      	adds	r7, #8
    193e:	46bd      	mov	sp, r7
    1940:	bd80      	pop	{r7, pc}
    1942:	bf00      	nop
    1944:	00001869 	.word	0x00001869

00001948 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	4618      	mov	r0, r3
    1956:	4b04      	ldr	r3, [pc, #16]	; (1968 <_usart_sync_read_byte+0x20>)
    1958:	4798      	blx	r3
    195a:	4603      	mov	r3, r0
    195c:	b2db      	uxtb	r3, r3
}
    195e:	4618      	mov	r0, r3
    1960:	3708      	adds	r7, #8
    1962:	46bd      	mov	sp, r7
    1964:	bd80      	pop	{r7, pc}
    1966:	bf00      	nop
    1968:	00001885 	.word	0x00001885

0000196c <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	4618      	mov	r0, r3
    197a:	4b03      	ldr	r3, [pc, #12]	; (1988 <_usart_sync_is_ready_to_send+0x1c>)
    197c:	4798      	blx	r3
    197e:	4603      	mov	r3, r0
}
    1980:	4618      	mov	r0, r3
    1982:	3708      	adds	r7, #8
    1984:	46bd      	mov	sp, r7
    1986:	bd80      	pop	{r7, pc}
    1988:	000016cd 	.word	0x000016cd

0000198c <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    198c:	b580      	push	{r7, lr}
    198e:	b082      	sub	sp, #8
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	4618      	mov	r0, r3
    199a:	4b03      	ldr	r3, [pc, #12]	; (19a8 <_usart_sync_is_transmit_done+0x1c>)
    199c:	4798      	blx	r3
    199e:	4603      	mov	r3, r0
}
    19a0:	4618      	mov	r0, r3
    19a2:	3708      	adds	r7, #8
    19a4:	46bd      	mov	sp, r7
    19a6:	bd80      	pop	{r7, pc}
    19a8:	000016f5 	.word	0x000016f5

000019ac <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	4618      	mov	r0, r3
    19ba:	4b03      	ldr	r3, [pc, #12]	; (19c8 <_usart_sync_is_byte_received+0x1c>)
    19bc:	4798      	blx	r3
    19be:	4603      	mov	r3, r0
 }
    19c0:	4618      	mov	r0, r3
    19c2:	3708      	adds	r7, #8
    19c4:	46bd      	mov	sp, r7
    19c6:	bd80      	pop	{r7, pc}
    19c8:	0000171f 	.word	0x0000171f

000019cc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    19cc:	b4b0      	push	{r4, r5, r7}
    19ce:	b08d      	sub	sp, #52	; 0x34
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    19d4:	4b13      	ldr	r3, [pc, #76]	; (1a24 <_sercom_get_hardware_index+0x58>)
    19d6:	f107 040c 	add.w	r4, r7, #12
    19da:	461d      	mov	r5, r3
    19dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    19de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    19e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    19e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19e8:	2300      	movs	r3, #0
    19ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    19ec:	e010      	b.n	1a10 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    19ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19f0:	009b      	lsls	r3, r3, #2
    19f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    19f6:	4413      	add	r3, r2
    19f8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    19fc:	461a      	mov	r2, r3
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	429a      	cmp	r2, r3
    1a02:	d102      	bne.n	1a0a <_sercom_get_hardware_index+0x3e>
			return i;
    1a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a06:	b2db      	uxtb	r3, r3
    1a08:	e006      	b.n	1a18 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a0c:	3301      	adds	r3, #1
    1a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a12:	2b07      	cmp	r3, #7
    1a14:	d9eb      	bls.n	19ee <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    1a16:	2300      	movs	r3, #0
}
    1a18:	4618      	mov	r0, r3
    1a1a:	3734      	adds	r7, #52	; 0x34
    1a1c:	46bd      	mov	sp, r7
    1a1e:	bcb0      	pop	{r4, r5, r7}
    1a20:	4770      	bx	lr
    1a22:	bf00      	nop
    1a24:	000028d8 	.word	0x000028d8

00001a28 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	b084      	sub	sp, #16
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1a30:	6878      	ldr	r0, [r7, #4]
    1a32:	4b12      	ldr	r3, [pc, #72]	; (1a7c <_get_sercom_index+0x54>)
    1a34:	4798      	blx	r3
    1a36:	4603      	mov	r3, r0
    1a38:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1a3a:	2300      	movs	r3, #0
    1a3c:	73fb      	strb	r3, [r7, #15]
    1a3e:	e00f      	b.n	1a60 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    1a40:	7bfa      	ldrb	r2, [r7, #15]
    1a42:	490f      	ldr	r1, [pc, #60]	; (1a80 <_get_sercom_index+0x58>)
    1a44:	4613      	mov	r3, r2
    1a46:	005b      	lsls	r3, r3, #1
    1a48:	4413      	add	r3, r2
    1a4a:	00db      	lsls	r3, r3, #3
    1a4c:	440b      	add	r3, r1
    1a4e:	781b      	ldrb	r3, [r3, #0]
    1a50:	7bba      	ldrb	r2, [r7, #14]
    1a52:	429a      	cmp	r2, r3
    1a54:	d101      	bne.n	1a5a <_get_sercom_index+0x32>
			return i;
    1a56:	7bfb      	ldrb	r3, [r7, #15]
    1a58:	e00c      	b.n	1a74 <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1a5a:	7bfb      	ldrb	r3, [r7, #15]
    1a5c:	3301      	adds	r3, #1
    1a5e:	73fb      	strb	r3, [r7, #15]
    1a60:	7bfb      	ldrb	r3, [r7, #15]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d0ec      	beq.n	1a40 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    1a66:	f240 2247 	movw	r2, #583	; 0x247
    1a6a:	4906      	ldr	r1, [pc, #24]	; (1a84 <_get_sercom_index+0x5c>)
    1a6c:	2000      	movs	r0, #0
    1a6e:	4b06      	ldr	r3, [pc, #24]	; (1a88 <_get_sercom_index+0x60>)
    1a70:	4798      	blx	r3
	return 0;
    1a72:	2300      	movs	r3, #0
}
    1a74:	4618      	mov	r0, r3
    1a76:	3710      	adds	r7, #16
    1a78:	46bd      	mov	sp, r7
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	000019cd 	.word	0x000019cd
    1a80:	20000000 	.word	0x20000000
    1a84:	000028bc 	.word	0x000028bc
    1a88:	00001061 	.word	0x00001061

00001a8c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b084      	sub	sp, #16
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1a94:	6878      	ldr	r0, [r7, #4]
    1a96:	4b61      	ldr	r3, [pc, #388]	; (1c1c <_usart_init+0x190>)
    1a98:	4798      	blx	r3
    1a9a:	4603      	mov	r3, r0
    1a9c:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1a9e:	2101      	movs	r1, #1
    1aa0:	6878      	ldr	r0, [r7, #4]
    1aa2:	4b5f      	ldr	r3, [pc, #380]	; (1c20 <_usart_init+0x194>)
    1aa4:	4798      	blx	r3
    1aa6:	4603      	mov	r3, r0
    1aa8:	f083 0301 	eor.w	r3, r3, #1
    1aac:	b2db      	uxtb	r3, r3
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d020      	beq.n	1af4 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1ab2:	7bfa      	ldrb	r2, [r7, #15]
    1ab4:	495b      	ldr	r1, [pc, #364]	; (1c24 <_usart_init+0x198>)
    1ab6:	4613      	mov	r3, r2
    1ab8:	005b      	lsls	r3, r3, #1
    1aba:	4413      	add	r3, r2
    1abc:	00db      	lsls	r3, r3, #3
    1abe:	440b      	add	r3, r1
    1ac0:	3304      	adds	r3, #4
    1ac2:	681b      	ldr	r3, [r3, #0]
    1ac4:	f003 031c 	and.w	r3, r3, #28
    1ac8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1aca:	2102      	movs	r1, #2
    1acc:	6878      	ldr	r0, [r7, #4]
    1ace:	4b56      	ldr	r3, [pc, #344]	; (1c28 <_usart_init+0x19c>)
    1ad0:	4798      	blx	r3
    1ad2:	4603      	mov	r3, r0
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d006      	beq.n	1ae6 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1ad8:	6878      	ldr	r0, [r7, #4]
    1ada:	4b54      	ldr	r3, [pc, #336]	; (1c2c <_usart_init+0x1a0>)
    1adc:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1ade:	2102      	movs	r1, #2
    1ae0:	6878      	ldr	r0, [r7, #4]
    1ae2:	4b53      	ldr	r3, [pc, #332]	; (1c30 <_usart_init+0x1a4>)
    1ae4:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1ae6:	68bb      	ldr	r3, [r7, #8]
    1ae8:	f043 0301 	orr.w	r3, r3, #1
    1aec:	4619      	mov	r1, r3
    1aee:	6878      	ldr	r0, [r7, #4]
    1af0:	4b50      	ldr	r3, [pc, #320]	; (1c34 <_usart_init+0x1a8>)
    1af2:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1af4:	2101      	movs	r1, #1
    1af6:	6878      	ldr	r0, [r7, #4]
    1af8:	4b4d      	ldr	r3, [pc, #308]	; (1c30 <_usart_init+0x1a4>)
    1afa:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1afc:	7bfa      	ldrb	r2, [r7, #15]
    1afe:	4949      	ldr	r1, [pc, #292]	; (1c24 <_usart_init+0x198>)
    1b00:	4613      	mov	r3, r2
    1b02:	005b      	lsls	r3, r3, #1
    1b04:	4413      	add	r3, r2
    1b06:	00db      	lsls	r3, r3, #3
    1b08:	440b      	add	r3, r1
    1b0a:	3304      	adds	r3, #4
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	4619      	mov	r1, r3
    1b10:	6878      	ldr	r0, [r7, #4]
    1b12:	4b48      	ldr	r3, [pc, #288]	; (1c34 <_usart_init+0x1a8>)
    1b14:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1b16:	7bfa      	ldrb	r2, [r7, #15]
    1b18:	4942      	ldr	r1, [pc, #264]	; (1c24 <_usart_init+0x198>)
    1b1a:	4613      	mov	r3, r2
    1b1c:	005b      	lsls	r3, r3, #1
    1b1e:	4413      	add	r3, r2
    1b20:	00db      	lsls	r3, r3, #3
    1b22:	440b      	add	r3, r1
    1b24:	3308      	adds	r3, #8
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	4619      	mov	r1, r3
    1b2a:	6878      	ldr	r0, [r7, #4]
    1b2c:	4b42      	ldr	r3, [pc, #264]	; (1c38 <_usart_init+0x1ac>)
    1b2e:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1b30:	7bfa      	ldrb	r2, [r7, #15]
    1b32:	493c      	ldr	r1, [pc, #240]	; (1c24 <_usart_init+0x198>)
    1b34:	4613      	mov	r3, r2
    1b36:	005b      	lsls	r3, r3, #1
    1b38:	4413      	add	r3, r2
    1b3a:	00db      	lsls	r3, r3, #3
    1b3c:	440b      	add	r3, r1
    1b3e:	330c      	adds	r3, #12
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	4619      	mov	r1, r3
    1b44:	6878      	ldr	r0, [r7, #4]
    1b46:	4b3d      	ldr	r3, [pc, #244]	; (1c3c <_usart_init+0x1b0>)
    1b48:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1b4a:	7bfa      	ldrb	r2, [r7, #15]
    1b4c:	4935      	ldr	r1, [pc, #212]	; (1c24 <_usart_init+0x198>)
    1b4e:	4613      	mov	r3, r2
    1b50:	005b      	lsls	r3, r3, #1
    1b52:	4413      	add	r3, r2
    1b54:	00db      	lsls	r3, r3, #3
    1b56:	440b      	add	r3, r1
    1b58:	3304      	adds	r3, #4
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1b60:	2b00      	cmp	r3, #0
    1b62:	d10c      	bne.n	1b7e <_usart_init+0xf2>
    1b64:	7bfa      	ldrb	r2, [r7, #15]
    1b66:	492f      	ldr	r1, [pc, #188]	; (1c24 <_usart_init+0x198>)
    1b68:	4613      	mov	r3, r2
    1b6a:	005b      	lsls	r3, r3, #1
    1b6c:	4413      	add	r3, r2
    1b6e:	00db      	lsls	r3, r3, #3
    1b70:	440b      	add	r3, r1
    1b72:	3304      	adds	r3, #4
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d022      	beq.n	1bc4 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1b7e:	7bfa      	ldrb	r2, [r7, #15]
    1b80:	4928      	ldr	r1, [pc, #160]	; (1c24 <_usart_init+0x198>)
    1b82:	4613      	mov	r3, r2
    1b84:	005b      	lsls	r3, r3, #1
    1b86:	4413      	add	r3, r2
    1b88:	00db      	lsls	r3, r3, #3
    1b8a:	440b      	add	r3, r1
    1b8c:	3310      	adds	r3, #16
    1b8e:	881b      	ldrh	r3, [r3, #0]
    1b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
    1b94:	b299      	uxth	r1, r3
    1b96:	687a      	ldr	r2, [r7, #4]
    1b98:	8993      	ldrh	r3, [r2, #12]
    1b9a:	f361 030c 	bfi	r3, r1, #0, #13
    1b9e:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1ba0:	7bfa      	ldrb	r2, [r7, #15]
    1ba2:	4920      	ldr	r1, [pc, #128]	; (1c24 <_usart_init+0x198>)
    1ba4:	4613      	mov	r3, r2
    1ba6:	005b      	lsls	r3, r3, #1
    1ba8:	4413      	add	r3, r2
    1baa:	00db      	lsls	r3, r3, #3
    1bac:	440b      	add	r3, r1
    1bae:	3312      	adds	r3, #18
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	f003 0307 	and.w	r3, r3, #7
    1bb6:	b2d9      	uxtb	r1, r3
    1bb8:	687a      	ldr	r2, [r7, #4]
    1bba:	8993      	ldrh	r3, [r2, #12]
    1bbc:	f361 334f 	bfi	r3, r1, #13, #3
    1bc0:	8193      	strh	r3, [r2, #12]
    1bc2:	e00c      	b.n	1bde <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1bc4:	7bfa      	ldrb	r2, [r7, #15]
    1bc6:	4917      	ldr	r1, [pc, #92]	; (1c24 <_usart_init+0x198>)
    1bc8:	4613      	mov	r3, r2
    1bca:	005b      	lsls	r3, r3, #1
    1bcc:	4413      	add	r3, r2
    1bce:	00db      	lsls	r3, r3, #3
    1bd0:	440b      	add	r3, r1
    1bd2:	3310      	adds	r3, #16
    1bd4:	881b      	ldrh	r3, [r3, #0]
    1bd6:	4619      	mov	r1, r3
    1bd8:	6878      	ldr	r0, [r7, #4]
    1bda:	4b19      	ldr	r3, [pc, #100]	; (1c40 <_usart_init+0x1b4>)
    1bdc:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1bde:	7bfa      	ldrb	r2, [r7, #15]
    1be0:	4910      	ldr	r1, [pc, #64]	; (1c24 <_usart_init+0x198>)
    1be2:	4613      	mov	r3, r2
    1be4:	005b      	lsls	r3, r3, #1
    1be6:	4413      	add	r3, r2
    1be8:	00db      	lsls	r3, r3, #3
    1bea:	440b      	add	r3, r1
    1bec:	3313      	adds	r3, #19
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	4619      	mov	r1, r3
    1bf2:	6878      	ldr	r0, [r7, #4]
    1bf4:	4b13      	ldr	r3, [pc, #76]	; (1c44 <_usart_init+0x1b8>)
    1bf6:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1bf8:	7bfa      	ldrb	r2, [r7, #15]
    1bfa:	490a      	ldr	r1, [pc, #40]	; (1c24 <_usart_init+0x198>)
    1bfc:	4613      	mov	r3, r2
    1bfe:	005b      	lsls	r3, r3, #1
    1c00:	4413      	add	r3, r2
    1c02:	00db      	lsls	r3, r3, #3
    1c04:	440b      	add	r3, r1
    1c06:	3314      	adds	r3, #20
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	4619      	mov	r1, r3
    1c0c:	6878      	ldr	r0, [r7, #4]
    1c0e:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <_usart_init+0x1bc>)
    1c10:	4798      	blx	r3

	return ERR_NONE;
    1c12:	2300      	movs	r3, #0
}
    1c14:	4618      	mov	r0, r3
    1c16:	3710      	adds	r7, #16
    1c18:	46bd      	mov	sp, r7
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	00001a29 	.word	0x00001a29
    1c20:	000016a5 	.word	0x000016a5
    1c24:	20000000 	.word	0x20000000
    1c28:	00001799 	.word	0x00001799
    1c2c:	00001771 	.word	0x00001771
    1c30:	00001681 	.word	0x00001681
    1c34:	000017c9 	.word	0x000017c9
    1c38:	000017ed 	.word	0x000017ed
    1c3c:	00001811 	.word	0x00001811
    1c40:	0000182d 	.word	0x0000182d
    1c44:	0000184b 	.word	0x0000184b
    1c48:	0000189d 	.word	0x0000189d

00001c4c <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1c4c:	b480      	push	{r7}
    1c4e:	b083      	sub	sp, #12
    1c50:	af00      	add	r7, sp, #0
    1c52:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <_system_time_init+0x24>)
    1c56:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1c5a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1c5c:	4b04      	ldr	r3, [pc, #16]	; (1c70 <_system_time_init+0x24>)
    1c5e:	2205      	movs	r2, #5
    1c60:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1c62:	bf00      	nop
    1c64:	370c      	adds	r7, #12
    1c66:	46bd      	mov	sp, r7
    1c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	e000e010 	.word	0xe000e010

00001c74 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c74:	b580      	push	{r7, lr}
    1c76:	b082      	sub	sp, #8
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    1c7c:	6878      	ldr	r0, [r7, #4]
    1c7e:	4b03      	ldr	r3, [pc, #12]	; (1c8c <_delay_init+0x18>)
    1c80:	4798      	blx	r3
}
    1c82:	bf00      	nop
    1c84:	3708      	adds	r7, #8
    1c86:	46bd      	mov	sp, r7
    1c88:	bd80      	pop	{r7, pc}
    1c8a:	bf00      	nop
    1c8c:	00001c4d 	.word	0x00001c4d

00001c90 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1c9a:	bf00      	nop
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	689a      	ldr	r2, [r3, #8]
    1ca0:	683b      	ldr	r3, [r7, #0]
    1ca2:	4013      	ands	r3, r2
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d1f9      	bne.n	1c9c <hri_tcc_wait_for_sync+0xc>
	};
}
    1ca8:	bf00      	nop
    1caa:	370c      	adds	r7, #12
    1cac:	46bd      	mov	sp, r7
    1cae:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb2:	4770      	bx	lr

00001cb4 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    1cb4:	b480      	push	{r7}
    1cb6:	b083      	sub	sp, #12
    1cb8:	af00      	add	r7, sp, #0
    1cba:	6078      	str	r0, [r7, #4]
    1cbc:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	689a      	ldr	r2, [r3, #8]
    1cc2:	683b      	ldr	r3, [r7, #0]
    1cc4:	4013      	ands	r3, r2
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	bf14      	ite	ne
    1cca:	2301      	movne	r3, #1
    1ccc:	2300      	moveq	r3, #0
    1cce:	b2db      	uxtb	r3, r3
}
    1cd0:	4618      	mov	r0, r3
    1cd2:	370c      	adds	r7, #12
    1cd4:	46bd      	mov	sp, r7
    1cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cda:	4770      	bx	lr

00001cdc <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	b084      	sub	sp, #16
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	6078      	str	r0, [r7, #4]
    1ce4:	460b      	mov	r3, r1
    1ce6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    1cee:	68fb      	ldr	r3, [r7, #12]
    1cf0:	f023 0302 	bic.w	r3, r3, #2
    1cf4:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    1cf6:	78fb      	ldrb	r3, [r7, #3]
    1cf8:	005b      	lsls	r3, r3, #1
    1cfa:	461a      	mov	r2, r3
    1cfc:	68fb      	ldr	r3, [r7, #12]
    1cfe:	4313      	orrs	r3, r2
    1d00:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	68fa      	ldr	r2, [r7, #12]
    1d06:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1d08:	2103      	movs	r1, #3
    1d0a:	6878      	ldr	r0, [r7, #4]
    1d0c:	4b02      	ldr	r3, [pc, #8]	; (1d18 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    1d0e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1d10:	bf00      	nop
    1d12:	3710      	adds	r7, #16
    1d14:	46bd      	mov	sp, r7
    1d16:	bd80      	pop	{r7, pc}
    1d18:	00001c91 	.word	0x00001c91

00001d1c <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b082      	sub	sp, #8
    1d20:	af00      	add	r7, sp, #0
    1d22:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	681b      	ldr	r3, [r3, #0]
    1d28:	f023 0202 	bic.w	r2, r3, #2
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1d30:	2103      	movs	r1, #3
    1d32:	6878      	ldr	r0, [r7, #4]
    1d34:	4b02      	ldr	r3, [pc, #8]	; (1d40 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    1d36:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1d38:	bf00      	nop
    1d3a:	3708      	adds	r7, #8
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	00001c91 	.word	0x00001c91

00001d44 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
    1d4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1d4e:	2103      	movs	r1, #3
    1d50:	6878      	ldr	r0, [r7, #4]
    1d52:	4b07      	ldr	r3, [pc, #28]	; (1d70 <hri_tcc_get_CTRLA_reg+0x2c>)
    1d54:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1d5c:	68fa      	ldr	r2, [r7, #12]
    1d5e:	683b      	ldr	r3, [r7, #0]
    1d60:	4013      	ands	r3, r2
    1d62:	60fb      	str	r3, [r7, #12]
	return tmp;
    1d64:	68fb      	ldr	r3, [r7, #12]
}
    1d66:	4618      	mov	r0, r3
    1d68:	3710      	adds	r7, #16
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	bf00      	nop
    1d70:	00001c91 	.word	0x00001c91

00001d74 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	b082      	sub	sp, #8
    1d78:	af00      	add	r7, sp, #0
    1d7a:	6078      	str	r0, [r7, #4]
    1d7c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	683a      	ldr	r2, [r7, #0]
    1d82:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    1d84:	2103      	movs	r1, #3
    1d86:	6878      	ldr	r0, [r7, #4]
    1d88:	4b02      	ldr	r3, [pc, #8]	; (1d94 <hri_tcc_write_CTRLA_reg+0x20>)
    1d8a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1d8c:	bf00      	nop
    1d8e:	3708      	adds	r7, #8
    1d90:	46bd      	mov	sp, r7
    1d92:	bd80      	pop	{r7, pc}
    1d94:	00001c91 	.word	0x00001c91

00001d98 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b082      	sub	sp, #8
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
    1da0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	683a      	ldr	r2, [r7, #0]
    1da6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    1da8:	2180      	movs	r1, #128	; 0x80
    1daa:	6878      	ldr	r0, [r7, #4]
    1dac:	4b02      	ldr	r3, [pc, #8]	; (1db8 <hri_tcc_write_PER_reg+0x20>)
    1dae:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    1db0:	bf00      	nop
    1db2:	3708      	adds	r7, #8
    1db4:	46bd      	mov	sp, r7
    1db6:	bd80      	pop	{r7, pc}
    1db8:	00001c91 	.word	0x00001c91

00001dbc <PWM_0_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t PWM_0_init()
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    1dc0:	2101      	movs	r1, #1
    1dc2:	4818      	ldr	r0, [pc, #96]	; (1e24 <PWM_0_init+0x68>)
    1dc4:	4b18      	ldr	r3, [pc, #96]	; (1e28 <PWM_0_init+0x6c>)
    1dc6:	4798      	blx	r3
    1dc8:	4603      	mov	r3, r0
    1dca:	f083 0301 	eor.w	r3, r3, #1
    1dce:	b2db      	uxtb	r3, r3
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d011      	beq.n	1df8 <PWM_0_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    1dd4:	2102      	movs	r1, #2
    1dd6:	4813      	ldr	r0, [pc, #76]	; (1e24 <PWM_0_init+0x68>)
    1dd8:	4b14      	ldr	r3, [pc, #80]	; (1e2c <PWM_0_init+0x70>)
    1dda:	4798      	blx	r3
    1ddc:	4603      	mov	r3, r0
    1dde:	2b00      	cmp	r3, #0
    1de0:	d006      	beq.n	1df0 <PWM_0_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    1de2:	4810      	ldr	r0, [pc, #64]	; (1e24 <PWM_0_init+0x68>)
    1de4:	4b12      	ldr	r3, [pc, #72]	; (1e30 <PWM_0_init+0x74>)
    1de6:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    1de8:	2102      	movs	r1, #2
    1dea:	480e      	ldr	r0, [pc, #56]	; (1e24 <PWM_0_init+0x68>)
    1dec:	4b11      	ldr	r3, [pc, #68]	; (1e34 <PWM_0_init+0x78>)
    1dee:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    1df0:	2101      	movs	r1, #1
    1df2:	480c      	ldr	r0, [pc, #48]	; (1e24 <PWM_0_init+0x68>)
    1df4:	4b10      	ldr	r3, [pc, #64]	; (1e38 <PWM_0_init+0x7c>)
    1df6:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    1df8:	2101      	movs	r1, #1
    1dfa:	480a      	ldr	r0, [pc, #40]	; (1e24 <PWM_0_init+0x68>)
    1dfc:	4b0d      	ldr	r3, [pc, #52]	; (1e34 <PWM_0_init+0x78>)
    1dfe:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    1e00:	f44f 7180 	mov.w	r1, #256	; 0x100
    1e04:	4807      	ldr	r0, [pc, #28]	; (1e24 <PWM_0_init+0x68>)
    1e06:	4b0c      	ldr	r3, [pc, #48]	; (1e38 <PWM_0_init+0x7c>)
    1e08:	4798      	blx	r3
	//		 | 0 << TCC_PATT_PGE3_Pos /* Pattern Generator 3 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE2_Pos /* Pattern Generator 2 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE1_Pos /* Pattern Generator 1 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE0_Pos); /* Pattern Generator 0 Output Enable: disabled */

	hri_tcc_write_PER_reg(TCC0, 0x1770); /*  Period Value: 0xffff */
    1e0a:	f241 7170 	movw	r1, #6000	; 0x1770
    1e0e:	4805      	ldr	r0, [pc, #20]	; (1e24 <PWM_0_init+0x68>)
    1e10:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <PWM_0_init+0x80>)
    1e12:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    1e14:	2101      	movs	r1, #1
    1e16:	4803      	ldr	r0, [pc, #12]	; (1e24 <PWM_0_init+0x68>)
    1e18:	4b09      	ldr	r3, [pc, #36]	; (1e40 <PWM_0_init+0x84>)
    1e1a:	4798      	blx	r3

	return 0;
    1e1c:	2300      	movs	r3, #0
}
    1e1e:	4618      	mov	r0, r3
    1e20:	bd80      	pop	{r7, pc}
    1e22:	bf00      	nop
    1e24:	41016000 	.word	0x41016000
    1e28:	00001cb5 	.word	0x00001cb5
    1e2c:	00001d45 	.word	0x00001d45
    1e30:	00001d1d 	.word	0x00001d1d
    1e34:	00001c91 	.word	0x00001c91
    1e38:	00001d75 	.word	0x00001d75
    1e3c:	00001d99 	.word	0x00001d99
    1e40:	00001cdd 	.word	0x00001cdd

00001e44 <PWM_genrt>:
#include "utils.h"
#include <pwm.h>


void PWM_genrt(uint16_t period, uint16_t duty)
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b082      	sub	sp, #8
    1e48:	af00      	add	r7, sp, #0
    1e4a:	4603      	mov	r3, r0
    1e4c:	460a      	mov	r2, r1
    1e4e:	80fb      	strh	r3, [r7, #6]
    1e50:	4613      	mov	r3, r2
    1e52:	80bb      	strh	r3, [r7, #4]
	tcc_disable(TCC0);
    1e54:	480a      	ldr	r0, [pc, #40]	; (1e80 <PWM_genrt+0x3c>)
    1e56:	4b0b      	ldr	r3, [pc, #44]	; (1e84 <PWM_genrt+0x40>)
    1e58:	4798      	blx	r3
	tcc_set_period_value(TCC0, period);
    1e5a:	88fb      	ldrh	r3, [r7, #6]
    1e5c:	4619      	mov	r1, r3
    1e5e:	4808      	ldr	r0, [pc, #32]	; (1e80 <PWM_genrt+0x3c>)
    1e60:	4b09      	ldr	r3, [pc, #36]	; (1e88 <PWM_genrt+0x44>)
    1e62:	4798      	blx	r3
	tcc_set_compare_value(TCC0, duty, 0);
    1e64:	88bb      	ldrh	r3, [r7, #4]
    1e66:	2200      	movs	r2, #0
    1e68:	4619      	mov	r1, r3
    1e6a:	4805      	ldr	r0, [pc, #20]	; (1e80 <PWM_genrt+0x3c>)
    1e6c:	4b07      	ldr	r3, [pc, #28]	; (1e8c <PWM_genrt+0x48>)
    1e6e:	4798      	blx	r3
	tcc_enable(TCC0);
    1e70:	4803      	ldr	r0, [pc, #12]	; (1e80 <PWM_genrt+0x3c>)
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <PWM_genrt+0x4c>)
    1e74:	4798      	blx	r3
}
    1e76:	bf00      	nop
    1e78:	3708      	adds	r7, #8
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	bf00      	nop
    1e80:	41016000 	.word	0x41016000
    1e84:	0000229d 	.word	0x0000229d
    1e88:	00002305 	.word	0x00002305
    1e8c:	000022c5 	.word	0x000022c5
    1e90:	00002275 	.word	0x00002275

00001e94 <set_duty>:


double set_duty(uint8_t number){
    1e94:	b590      	push	{r4, r7, lr}
    1e96:	b083      	sub	sp, #12
    1e98:	af00      	add	r7, sp, #0
    1e9a:	4603      	mov	r3, r0
    1e9c:	71fb      	strb	r3, [r7, #7]
// 	number 3 -> ASCII 51 -> binary 110011
// 	number 4 -> ASCII 52 -> binary 110100
// 	   +     -> ASCII 43 -> binary 101011
// 	   -     -> ASCII 45 -> binary 101101

	if(number != 48 && number != 49 && number != 50 && number != 51 && number != 52 && number != 43 && number != 45){
    1e9e:	79fb      	ldrb	r3, [r7, #7]
    1ea0:	2b30      	cmp	r3, #48	; 0x30
    1ea2:	d015      	beq.n	1ed0 <set_duty+0x3c>
    1ea4:	79fb      	ldrb	r3, [r7, #7]
    1ea6:	2b31      	cmp	r3, #49	; 0x31
    1ea8:	d012      	beq.n	1ed0 <set_duty+0x3c>
    1eaa:	79fb      	ldrb	r3, [r7, #7]
    1eac:	2b32      	cmp	r3, #50	; 0x32
    1eae:	d00f      	beq.n	1ed0 <set_duty+0x3c>
    1eb0:	79fb      	ldrb	r3, [r7, #7]
    1eb2:	2b33      	cmp	r3, #51	; 0x33
    1eb4:	d00c      	beq.n	1ed0 <set_duty+0x3c>
    1eb6:	79fb      	ldrb	r3, [r7, #7]
    1eb8:	2b34      	cmp	r3, #52	; 0x34
    1eba:	d009      	beq.n	1ed0 <set_duty+0x3c>
    1ebc:	79fb      	ldrb	r3, [r7, #7]
    1ebe:	2b2b      	cmp	r3, #43	; 0x2b
    1ec0:	d006      	beq.n	1ed0 <set_duty+0x3c>
    1ec2:	79fb      	ldrb	r3, [r7, #7]
    1ec4:	2b2d      	cmp	r3, #45	; 0x2d
    1ec6:	d003      	beq.n	1ed0 <set_duty+0x3c>
		CurrentState = 0;
    1ec8:	4b77      	ldr	r3, [pc, #476]	; (20a8 <set_duty+0x214>)
    1eca:	2200      	movs	r2, #0
    1ecc:	601a      	str	r2, [r3, #0]
    1ece:	e002      	b.n	1ed6 <set_duty+0x42>
	}else{
		CurrentState = number;
    1ed0:	79fb      	ldrb	r3, [r7, #7]
    1ed2:	4a75      	ldr	r2, [pc, #468]	; (20a8 <set_duty+0x214>)
    1ed4:	6013      	str	r3, [r2, #0]
	}
	
	switch (CurrentState){
    1ed6:	4b74      	ldr	r3, [pc, #464]	; (20a8 <set_duty+0x214>)
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	2b34      	cmp	r3, #52	; 0x34
    1edc:	f200 80b6 	bhi.w	204c <set_duty+0x1b8>
    1ee0:	a201      	add	r2, pc, #4	; (adr r2, 1ee8 <set_duty+0x54>)
    1ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ee6:	bf00      	nop
    1ee8:	0000203d 	.word	0x0000203d
    1eec:	0000204d 	.word	0x0000204d
    1ef0:	0000204d 	.word	0x0000204d
    1ef4:	0000204d 	.word	0x0000204d
    1ef8:	0000204d 	.word	0x0000204d
    1efc:	0000204d 	.word	0x0000204d
    1f00:	0000204d 	.word	0x0000204d
    1f04:	0000204d 	.word	0x0000204d
    1f08:	0000204d 	.word	0x0000204d
    1f0c:	0000204d 	.word	0x0000204d
    1f10:	0000204d 	.word	0x0000204d
    1f14:	0000204d 	.word	0x0000204d
    1f18:	0000204d 	.word	0x0000204d
    1f1c:	0000204d 	.word	0x0000204d
    1f20:	0000204d 	.word	0x0000204d
    1f24:	0000204d 	.word	0x0000204d
    1f28:	0000204d 	.word	0x0000204d
    1f2c:	0000204d 	.word	0x0000204d
    1f30:	0000204d 	.word	0x0000204d
    1f34:	0000204d 	.word	0x0000204d
    1f38:	0000204d 	.word	0x0000204d
    1f3c:	0000204d 	.word	0x0000204d
    1f40:	0000204d 	.word	0x0000204d
    1f44:	0000204d 	.word	0x0000204d
    1f48:	0000204d 	.word	0x0000204d
    1f4c:	0000204d 	.word	0x0000204d
    1f50:	0000204d 	.word	0x0000204d
    1f54:	0000204d 	.word	0x0000204d
    1f58:	0000204d 	.word	0x0000204d
    1f5c:	0000204d 	.word	0x0000204d
    1f60:	0000204d 	.word	0x0000204d
    1f64:	0000204d 	.word	0x0000204d
    1f68:	0000204d 	.word	0x0000204d
    1f6c:	0000204d 	.word	0x0000204d
    1f70:	0000204d 	.word	0x0000204d
    1f74:	0000204d 	.word	0x0000204d
    1f78:	0000204d 	.word	0x0000204d
    1f7c:	0000204d 	.word	0x0000204d
    1f80:	0000204d 	.word	0x0000204d
    1f84:	0000204d 	.word	0x0000204d
    1f88:	0000204d 	.word	0x0000204d
    1f8c:	0000204d 	.word	0x0000204d
    1f90:	0000204d 	.word	0x0000204d
    1f94:	00002005 	.word	0x00002005
    1f98:	0000204d 	.word	0x0000204d
    1f9c:	00002021 	.word	0x00002021
    1fa0:	0000204d 	.word	0x0000204d
    1fa4:	0000204d 	.word	0x0000204d
    1fa8:	00001fbd 	.word	0x00001fbd
    1fac:	00001fcd 	.word	0x00001fcd
    1fb0:	00001fdb 	.word	0x00001fdb
    1fb4:	00001fe9 	.word	0x00001fe9
    1fb8:	00001ff7 	.word	0x00001ff7
		case 48:
			output = 0;
    1fbc:	4a3b      	ldr	r2, [pc, #236]	; (20ac <set_duty+0x218>)
    1fbe:	f04f 0300 	mov.w	r3, #0
    1fc2:	f04f 0400 	mov.w	r4, #0
    1fc6:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1fca:	e03f      	b.n	204c <set_duty+0x1b8>
		case 49:
			output = 0.25;
    1fcc:	4a37      	ldr	r2, [pc, #220]	; (20ac <set_duty+0x218>)
    1fce:	f04f 0300 	mov.w	r3, #0
    1fd2:	4c37      	ldr	r4, [pc, #220]	; (20b0 <set_duty+0x21c>)
    1fd4:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1fd8:	e038      	b.n	204c <set_duty+0x1b8>
		case 50:
			output = 0.5;
    1fda:	4a34      	ldr	r2, [pc, #208]	; (20ac <set_duty+0x218>)
    1fdc:	f04f 0300 	mov.w	r3, #0
    1fe0:	4c34      	ldr	r4, [pc, #208]	; (20b4 <set_duty+0x220>)
    1fe2:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1fe6:	e031      	b.n	204c <set_duty+0x1b8>
		case 51:
			output = 0.75;
    1fe8:	4a30      	ldr	r2, [pc, #192]	; (20ac <set_duty+0x218>)
    1fea:	f04f 0300 	mov.w	r3, #0
    1fee:	4c32      	ldr	r4, [pc, #200]	; (20b8 <set_duty+0x224>)
    1ff0:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    1ff4:	e02a      	b.n	204c <set_duty+0x1b8>
		case 52:
			output = 1;
    1ff6:	4a2d      	ldr	r2, [pc, #180]	; (20ac <set_duty+0x218>)
    1ff8:	f04f 0300 	mov.w	r3, #0
    1ffc:	4c2f      	ldr	r4, [pc, #188]	; (20bc <set_duty+0x228>)
    1ffe:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    2002:	e023      	b.n	204c <set_duty+0x1b8>
		case 43:
			output += 0.25;
    2004:	4b29      	ldr	r3, [pc, #164]	; (20ac <set_duty+0x218>)
    2006:	e9d3 0100 	ldrd	r0, r1, [r3]
    200a:	4c2d      	ldr	r4, [pc, #180]	; (20c0 <set_duty+0x22c>)
    200c:	f04f 0200 	mov.w	r2, #0
    2010:	4b27      	ldr	r3, [pc, #156]	; (20b0 <set_duty+0x21c>)
    2012:	47a0      	blx	r4
    2014:	4603      	mov	r3, r0
    2016:	460c      	mov	r4, r1
    2018:	4a24      	ldr	r2, [pc, #144]	; (20ac <set_duty+0x218>)
    201a:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    201e:	e015      	b.n	204c <set_duty+0x1b8>
		case 45:
			output -= 0.25;
    2020:	4b22      	ldr	r3, [pc, #136]	; (20ac <set_duty+0x218>)
    2022:	e9d3 0100 	ldrd	r0, r1, [r3]
    2026:	4c27      	ldr	r4, [pc, #156]	; (20c4 <set_duty+0x230>)
    2028:	f04f 0200 	mov.w	r2, #0
    202c:	4b20      	ldr	r3, [pc, #128]	; (20b0 <set_duty+0x21c>)
    202e:	47a0      	blx	r4
    2030:	4603      	mov	r3, r0
    2032:	460c      	mov	r4, r1
    2034:	4a1d      	ldr	r2, [pc, #116]	; (20ac <set_duty+0x218>)
    2036:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    203a:	e007      	b.n	204c <set_duty+0x1b8>
		case 0:
			output = 0;
    203c:	4a1b      	ldr	r2, [pc, #108]	; (20ac <set_duty+0x218>)
    203e:	f04f 0300 	mov.w	r3, #0
    2042:	f04f 0400 	mov.w	r4, #0
    2046:	e9c2 3400 	strd	r3, r4, [r2]
		break;
    204a:	bf00      	nop
	}
	
	//check that the value of duty is between 0 and 1
	if(output >= 1.0){
    204c:	4b17      	ldr	r3, [pc, #92]	; (20ac <set_duty+0x218>)
    204e:	e9d3 0100 	ldrd	r0, r1, [r3]
    2052:	4c1d      	ldr	r4, [pc, #116]	; (20c8 <set_duty+0x234>)
    2054:	f04f 0200 	mov.w	r2, #0
    2058:	4b18      	ldr	r3, [pc, #96]	; (20bc <set_duty+0x228>)
    205a:	47a0      	blx	r4
    205c:	4603      	mov	r3, r0
    205e:	2b00      	cmp	r3, #0
    2060:	d006      	beq.n	2070 <set_duty+0x1dc>
		output = 1.0;
    2062:	4a12      	ldr	r2, [pc, #72]	; (20ac <set_duty+0x218>)
    2064:	f04f 0300 	mov.w	r3, #0
    2068:	4c14      	ldr	r4, [pc, #80]	; (20bc <set_duty+0x228>)
    206a:	e9c2 3400 	strd	r3, r4, [r2]
    206e:	e012      	b.n	2096 <set_duty+0x202>
	}else if(output <= 0.0){
    2070:	4b0e      	ldr	r3, [pc, #56]	; (20ac <set_duty+0x218>)
    2072:	e9d3 0100 	ldrd	r0, r1, [r3]
    2076:	4c15      	ldr	r4, [pc, #84]	; (20cc <set_duty+0x238>)
    2078:	f04f 0200 	mov.w	r2, #0
    207c:	f04f 0300 	mov.w	r3, #0
    2080:	47a0      	blx	r4
    2082:	4603      	mov	r3, r0
    2084:	2b00      	cmp	r3, #0
    2086:	d006      	beq.n	2096 <set_duty+0x202>
		output = 0.0;
    2088:	4a08      	ldr	r2, [pc, #32]	; (20ac <set_duty+0x218>)
    208a:	f04f 0300 	mov.w	r3, #0
    208e:	f04f 0400 	mov.w	r4, #0
    2092:	e9c2 3400 	strd	r3, r4, [r2]
	}
 	return output;	
    2096:	4b05      	ldr	r3, [pc, #20]	; (20ac <set_duty+0x218>)
    2098:	e9d3 3400 	ldrd	r3, r4, [r3]
}
    209c:	4618      	mov	r0, r3
    209e:	4621      	mov	r1, r4
    20a0:	370c      	adds	r7, #12
    20a2:	46bd      	mov	sp, r7
    20a4:	bd90      	pop	{r4, r7, pc}
    20a6:	bf00      	nop
    20a8:	20000040 	.word	0x20000040
    20ac:	20000048 	.word	0x20000048
    20b0:	3fd00000 	.word	0x3fd00000
    20b4:	3fe00000 	.word	0x3fe00000
    20b8:	3fe80000 	.word	0x3fe80000
    20bc:	3ff00000 	.word	0x3ff00000
    20c0:	00002365 	.word	0x00002365
    20c4:	00002361 	.word	0x00002361
    20c8:	000027b1 	.word	0x000027b1
    20cc:	0000279d 	.word	0x0000279d

000020d0 <main>:

int main(void){
    20d0:	b590      	push	{r4, r7, lr}
    20d2:	b085      	sub	sp, #20
    20d4:	af00      	add	r7, sp, #0
	
	double duty = 0;
    20d6:	f04f 0300 	mov.w	r3, #0
    20da:	f04f 0400 	mov.w	r4, #0
    20de:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    20e2:	4b1e      	ldr	r3, [pc, #120]	; (215c <main+0x8c>)
    20e4:	4798      	blx	r3
	/* Initialization of the UART communication */
	struct io_descriptor *io;
	uint8_t b = 1;
    20e6:	2301      	movs	r3, #1
    20e8:	70fb      	strb	r3, [r7, #3]
	usart_sync_get_io_descriptor(&USART_0, &io);
    20ea:	1d3b      	adds	r3, r7, #4
    20ec:	4619      	mov	r1, r3
    20ee:	481c      	ldr	r0, [pc, #112]	; (2160 <main+0x90>)
    20f0:	4b1c      	ldr	r3, [pc, #112]	; (2164 <main+0x94>)
    20f2:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    20f4:	481a      	ldr	r0, [pc, #104]	; (2160 <main+0x90>)
    20f6:	4b1c      	ldr	r3, [pc, #112]	; (2168 <main+0x98>)
    20f8:	4798      	blx	r3

	
	while (1) {
		//io_write(io, (uint8_t *)"Hello World!", 12);
		//if there is an input value from the terminal and assign it to command variable. Then with this command value change the duty cycle of the PWM
		io_read(io,&b,1);
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	1cf9      	adds	r1, r7, #3
    20fe:	2201      	movs	r2, #1
    2100:	4618      	mov	r0, r3
    2102:	4b1a      	ldr	r3, [pc, #104]	; (216c <main+0x9c>)
    2104:	4798      	blx	r3
		duty = set_duty(b);
    2106:	78fb      	ldrb	r3, [r7, #3]
    2108:	4618      	mov	r0, r3
    210a:	4b19      	ldr	r3, [pc, #100]	; (2170 <main+0xa0>)
    210c:	4798      	blx	r3
    210e:	e9c7 0102 	strd	r0, r1, [r7, #8]
		
		//PWM to set the desired duty cycle
 		PWM_0_init();
    2112:	4b18      	ldr	r3, [pc, #96]	; (2174 <main+0xa4>)
    2114:	4798      	blx	r3
		if(duty == 0){
    2116:	4c18      	ldr	r4, [pc, #96]	; (2178 <main+0xa8>)
    2118:	f04f 0200 	mov.w	r2, #0
    211c:	f04f 0300 	mov.w	r3, #0
    2120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    2124:	47a0      	blx	r4
    2126:	4603      	mov	r3, r0
    2128:	2b00      	cmp	r3, #0
    212a:	d003      	beq.n	2134 <main+0x64>
// 			//printf("1KHz PWM Waveform output available on WO[1] PIN\r\n");
// 			//tcc_set_compare_value(TCC0, duty*VALUE_FOR_100perc, COMPARE_CHANNEL_0); //green_led at 100Hz
// 			tcc_set_compare_value(TCC0, 0x2ee0, COMPARE_CHANNEL_0);
// 			tcc_enable(TCC0);
			//PWM_genrt(0xffff,0x0000);
			tcc_disable(TCC0);
    212c:	4813      	ldr	r0, [pc, #76]	; (217c <main+0xac>)
    212e:	4b14      	ldr	r3, [pc, #80]	; (2180 <main+0xb0>)
    2130:	4798      	blx	r3
    2132:	e7e2      	b.n	20fa <main+0x2a>
		}else if(duty == 0.25){
    2134:	4c10      	ldr	r4, [pc, #64]	; (2178 <main+0xa8>)
    2136:	f04f 0200 	mov.w	r2, #0
    213a:	4b12      	ldr	r3, [pc, #72]	; (2184 <main+0xb4>)
    213c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    2140:	47a0      	blx	r4
    2142:	4603      	mov	r3, r0
    2144:	2b00      	cmp	r3, #0
    2146:	d005      	beq.n	2154 <main+0x84>
			PWM_genrt(0x1770,0xffff/900000);
    2148:	2100      	movs	r1, #0
    214a:	f241 7070 	movw	r0, #6000	; 0x1770
    214e:	4b0e      	ldr	r3, [pc, #56]	; (2188 <main+0xb8>)
    2150:	4798      	blx	r3
    2152:	e7d2      	b.n	20fa <main+0x2a>
		//}else if(duty == 0.75){
			//PWM_genrt(0x1770,0x1770/100);
		//}else if(duty == 1){
			//PWM_genrt(0x1770,0x1770);
		}else{
			tcc_disable(TCC0);
    2154:	4809      	ldr	r0, [pc, #36]	; (217c <main+0xac>)
    2156:	4b0a      	ldr	r3, [pc, #40]	; (2180 <main+0xb0>)
    2158:	4798      	blx	r3
		io_read(io,&b,1);
    215a:	e7ce      	b.n	20fa <main+0x2a>
    215c:	000002d1 	.word	0x000002d1
    2160:	20000050 	.word	0x20000050
    2164:	00000ec1 	.word	0x00000ec1
    2168:	00000e81 	.word	0x00000e81
    216c:	00000bb9 	.word	0x00000bb9
    2170:	00001e95 	.word	0x00001e95
    2174:	00001dbd 	.word	0x00001dbd
    2178:	00002775 	.word	0x00002775
    217c:	41016000 	.word	0x41016000
    2180:	0000229d 	.word	0x0000229d
    2184:	3fd00000 	.word	0x3fd00000
    2188:	00001e45 	.word	0x00001e45

0000218c <hri_tcc_wait_for_sync>:
{
    218c:	b480      	push	{r7}
    218e:	b083      	sub	sp, #12
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
    2194:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2196:	bf00      	nop
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	689a      	ldr	r2, [r3, #8]
    219c:	683b      	ldr	r3, [r7, #0]
    219e:	4013      	ands	r3, r2
    21a0:	2b00      	cmp	r3, #0
    21a2:	d1f9      	bne.n	2198 <hri_tcc_wait_for_sync+0xc>
}
    21a4:	bf00      	nop
    21a6:	370c      	adds	r7, #12
    21a8:	46bd      	mov	sp, r7
    21aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ae:	4770      	bx	lr

000021b0 <hri_tcc_clear_INTFLAG_reg>:
{
    21b0:	b480      	push	{r7}
    21b2:	b083      	sub	sp, #12
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
    21b8:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->INTFLAG.reg = mask;
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	683a      	ldr	r2, [r7, #0]
    21be:	62da      	str	r2, [r3, #44]	; 0x2c
}
    21c0:	bf00      	nop
    21c2:	370c      	adds	r7, #12
    21c4:	46bd      	mov	sp, r7
    21c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ca:	4770      	bx	lr

000021cc <hri_tcc_set_CTRLA_ENABLE_bit>:
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b082      	sub	sp, #8
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	681b      	ldr	r3, [r3, #0]
    21d8:	f043 0202 	orr.w	r2, r3, #2
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    21e0:	2103      	movs	r1, #3
    21e2:	6878      	ldr	r0, [r7, #4]
    21e4:	4b02      	ldr	r3, [pc, #8]	; (21f0 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    21e6:	4798      	blx	r3
}
    21e8:	bf00      	nop
    21ea:	3708      	adds	r7, #8
    21ec:	46bd      	mov	sp, r7
    21ee:	bd80      	pop	{r7, pc}
    21f0:	0000218d 	.word	0x0000218d

000021f4 <hri_tcc_clear_CTRLA_ENABLE_bit>:
{
    21f4:	b580      	push	{r7, lr}
    21f6:	b082      	sub	sp, #8
    21f8:	af00      	add	r7, sp, #0
    21fa:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	f023 0202 	bic.w	r2, r3, #2
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2208:	2103      	movs	r1, #3
    220a:	6878      	ldr	r0, [r7, #4]
    220c:	4b02      	ldr	r3, [pc, #8]	; (2218 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    220e:	4798      	blx	r3
}
    2210:	bf00      	nop
    2212:	3708      	adds	r7, #8
    2214:	46bd      	mov	sp, r7
    2216:	bd80      	pop	{r7, pc}
    2218:	0000218d 	.word	0x0000218d

0000221c <hri_tcc_write_PER_reg>:
{
    221c:	b580      	push	{r7, lr}
    221e:	b082      	sub	sp, #8
    2220:	af00      	add	r7, sp, #0
    2222:	6078      	str	r0, [r7, #4]
    2224:	6039      	str	r1, [r7, #0]
	((Tcc *)hw)->PER.reg = data;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	683a      	ldr	r2, [r7, #0]
    222a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    222c:	2180      	movs	r1, #128	; 0x80
    222e:	6878      	ldr	r0, [r7, #4]
    2230:	4b02      	ldr	r3, [pc, #8]	; (223c <hri_tcc_write_PER_reg+0x20>)
    2232:	4798      	blx	r3
}
    2234:	bf00      	nop
    2236:	3708      	adds	r7, #8
    2238:	46bd      	mov	sp, r7
    223a:	bd80      	pop	{r7, pc}
    223c:	0000218d 	.word	0x0000218d

00002240 <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    2240:	b580      	push	{r7, lr}
    2242:	b084      	sub	sp, #16
    2244:	af00      	add	r7, sp, #0
    2246:	60f8      	str	r0, [r7, #12]
    2248:	460b      	mov	r3, r1
    224a:	607a      	str	r2, [r7, #4]
    224c:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    224e:	7afb      	ldrb	r3, [r7, #11]
    2250:	68fa      	ldr	r2, [r7, #12]
    2252:	3310      	adds	r3, #16
    2254:	009b      	lsls	r3, r3, #2
    2256:	4413      	add	r3, r2
    2258:	687a      	ldr	r2, [r7, #4]
    225a:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    225c:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    2260:	68f8      	ldr	r0, [r7, #12]
    2262:	4b03      	ldr	r3, [pc, #12]	; (2270 <hri_tcc_write_CC_reg+0x30>)
    2264:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    2266:	bf00      	nop
    2268:	3710      	adds	r7, #16
    226a:	46bd      	mov	sp, r7
    226c:	bd80      	pop	{r7, pc}
    226e:	bf00      	nop
    2270:	0000218d 	.word	0x0000218d

00002274 <tcc_enable>:
struct _tcc_callback {
	void (*pwm_mc0_cb)(void *const hw);
} tcc_cb;

void tcc_enable(void *const hw)
{
    2274:	b580      	push	{r7, lr}
    2276:	b082      	sub	sp, #8
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    227c:	2102      	movs	r1, #2
    227e:	6878      	ldr	r0, [r7, #4]
    2280:	4b04      	ldr	r3, [pc, #16]	; (2294 <tcc_enable+0x20>)
    2282:	4798      	blx	r3
	hri_tcc_set_CTRLA_ENABLE_bit(hw);
    2284:	6878      	ldr	r0, [r7, #4]
    2286:	4b04      	ldr	r3, [pc, #16]	; (2298 <tcc_enable+0x24>)
    2288:	4798      	blx	r3
}
    228a:	bf00      	nop
    228c:	3708      	adds	r7, #8
    228e:	46bd      	mov	sp, r7
    2290:	bd80      	pop	{r7, pc}
    2292:	bf00      	nop
    2294:	0000218d 	.word	0x0000218d
    2298:	000021cd 	.word	0x000021cd

0000229c <tcc_disable>:

void tcc_disable(void *const hw)
{
    229c:	b580      	push	{r7, lr}
    229e:	b082      	sub	sp, #8
    22a0:	af00      	add	r7, sp, #0
    22a2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    22a4:	2102      	movs	r1, #2
    22a6:	6878      	ldr	r0, [r7, #4]
    22a8:	4b04      	ldr	r3, [pc, #16]	; (22bc <tcc_disable+0x20>)
    22aa:	4798      	blx	r3
	hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    22ac:	6878      	ldr	r0, [r7, #4]
    22ae:	4b04      	ldr	r3, [pc, #16]	; (22c0 <tcc_disable+0x24>)
    22b0:	4798      	blx	r3
}
    22b2:	bf00      	nop
    22b4:	3708      	adds	r7, #8
    22b6:	46bd      	mov	sp, r7
    22b8:	bd80      	pop	{r7, pc}
    22ba:	bf00      	nop
    22bc:	0000218d 	.word	0x0000218d
    22c0:	000021f5 	.word	0x000021f5

000022c4 <tcc_set_compare_value>:
	hri_tcc_write_WAVE_WAVEGEN_bf(hw, wavegen);
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_WAVE);
}

void tcc_set_compare_value(void *const hw, uint32_t value, uint8_t channel_index)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b084      	sub	sp, #16
    22c8:	af00      	add	r7, sp, #0
    22ca:	60f8      	str	r0, [r7, #12]
    22cc:	60b9      	str	r1, [r7, #8]
    22ce:	4613      	mov	r3, r2
    22d0:	71fb      	strb	r3, [r7, #7]
	hri_tcc_write_CC_reg(hw, channel_index, value);
    22d2:	79fb      	ldrb	r3, [r7, #7]
    22d4:	68ba      	ldr	r2, [r7, #8]
    22d6:	4619      	mov	r1, r3
    22d8:	68f8      	ldr	r0, [r7, #12]
    22da:	4b08      	ldr	r3, [pc, #32]	; (22fc <tcc_set_compare_value+0x38>)
    22dc:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_CC(1 << channel_index));
    22de:	79fb      	ldrb	r3, [r7, #7]
    22e0:	2201      	movs	r2, #1
    22e2:	fa02 f303 	lsl.w	r3, r2, r3
    22e6:	021b      	lsls	r3, r3, #8
    22e8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    22ec:	4619      	mov	r1, r3
    22ee:	68f8      	ldr	r0, [r7, #12]
    22f0:	4b03      	ldr	r3, [pc, #12]	; (2300 <tcc_set_compare_value+0x3c>)
    22f2:	4798      	blx	r3
}
    22f4:	bf00      	nop
    22f6:	3710      	adds	r7, #16
    22f8:	46bd      	mov	sp, r7
    22fa:	bd80      	pop	{r7, pc}
    22fc:	00002241 	.word	0x00002241
    2300:	0000218d 	.word	0x0000218d

00002304 <tcc_set_period_value>:
{
	hri_tcc_write_CCBUF_reg(hw, channel_index, value);
}

void tcc_set_period_value(void *const hw, uint32_t value)
{
    2304:	b580      	push	{r7, lr}
    2306:	b082      	sub	sp, #8
    2308:	af00      	add	r7, sp, #0
    230a:	6078      	str	r0, [r7, #4]
    230c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(hw, value);
    230e:	6839      	ldr	r1, [r7, #0]
    2310:	6878      	ldr	r0, [r7, #4]
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <tcc_set_period_value+0x24>)
    2314:	4798      	blx	r3
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2316:	2180      	movs	r1, #128	; 0x80
    2318:	6878      	ldr	r0, [r7, #4]
    231a:	4b04      	ldr	r3, [pc, #16]	; (232c <tcc_set_period_value+0x28>)
    231c:	4798      	blx	r3
}
    231e:	bf00      	nop
    2320:	3708      	adds	r7, #8
    2322:	46bd      	mov	sp, r7
    2324:	bd80      	pop	{r7, pc}
    2326:	bf00      	nop
    2328:	0000221d 	.word	0x0000221d
    232c:	0000218d 	.word	0x0000218d

00002330 <TCC0_1_Handler>:
/**
 * \brief TCC0 Match 0 interrupt handler
 * Refer Datasheet and DFP to see other TCC0 handlers
 */
void TCC0_1_Handler(void)
{
    2330:	b580      	push	{r7, lr}
    2332:	af00      	add	r7, sp, #0
	hri_tcc_clear_INTFLAG_reg(TCC0, TCC_INTFLAG_MC0);
    2334:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2338:	4804      	ldr	r0, [pc, #16]	; (234c <TCC0_1_Handler+0x1c>)
    233a:	4b05      	ldr	r3, [pc, #20]	; (2350 <TCC0_1_Handler+0x20>)
    233c:	4798      	blx	r3
	tcc_cb.pwm_mc0_cb(TCC0);
    233e:	4b05      	ldr	r3, [pc, #20]	; (2354 <TCC0_1_Handler+0x24>)
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	4802      	ldr	r0, [pc, #8]	; (234c <TCC0_1_Handler+0x1c>)
    2344:	4798      	blx	r3
}
    2346:	bf00      	nop
    2348:	bd80      	pop	{r7, pc}
    234a:	bf00      	nop
    234c:	41016000 	.word	0x41016000
    2350:	000021b1 	.word	0x000021b1
    2354:	20000088 	.word	0x20000088

00002358 <__aeabi_drsub>:
    2358:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    235c:	e002      	b.n	2364 <__adddf3>
    235e:	bf00      	nop

00002360 <__aeabi_dsub>:
    2360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00002364 <__adddf3>:
    2364:	b530      	push	{r4, r5, lr}
    2366:	ea4f 0441 	mov.w	r4, r1, lsl #1
    236a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    236e:	ea94 0f05 	teq	r4, r5
    2372:	bf08      	it	eq
    2374:	ea90 0f02 	teqeq	r0, r2
    2378:	bf1f      	itttt	ne
    237a:	ea54 0c00 	orrsne.w	ip, r4, r0
    237e:	ea55 0c02 	orrsne.w	ip, r5, r2
    2382:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    2386:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    238a:	f000 80e2 	beq.w	2552 <__adddf3+0x1ee>
    238e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    2392:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    2396:	bfb8      	it	lt
    2398:	426d      	neglt	r5, r5
    239a:	dd0c      	ble.n	23b6 <__adddf3+0x52>
    239c:	442c      	add	r4, r5
    239e:	ea80 0202 	eor.w	r2, r0, r2
    23a2:	ea81 0303 	eor.w	r3, r1, r3
    23a6:	ea82 0000 	eor.w	r0, r2, r0
    23aa:	ea83 0101 	eor.w	r1, r3, r1
    23ae:	ea80 0202 	eor.w	r2, r0, r2
    23b2:	ea81 0303 	eor.w	r3, r1, r3
    23b6:	2d36      	cmp	r5, #54	; 0x36
    23b8:	bf88      	it	hi
    23ba:	bd30      	pophi	{r4, r5, pc}
    23bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    23c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    23c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    23c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    23cc:	d002      	beq.n	23d4 <__adddf3+0x70>
    23ce:	4240      	negs	r0, r0
    23d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    23d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    23d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    23dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    23e0:	d002      	beq.n	23e8 <__adddf3+0x84>
    23e2:	4252      	negs	r2, r2
    23e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    23e8:	ea94 0f05 	teq	r4, r5
    23ec:	f000 80a7 	beq.w	253e <__adddf3+0x1da>
    23f0:	f1a4 0401 	sub.w	r4, r4, #1
    23f4:	f1d5 0e20 	rsbs	lr, r5, #32
    23f8:	db0d      	blt.n	2416 <__adddf3+0xb2>
    23fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    23fe:	fa22 f205 	lsr.w	r2, r2, r5
    2402:	1880      	adds	r0, r0, r2
    2404:	f141 0100 	adc.w	r1, r1, #0
    2408:	fa03 f20e 	lsl.w	r2, r3, lr
    240c:	1880      	adds	r0, r0, r2
    240e:	fa43 f305 	asr.w	r3, r3, r5
    2412:	4159      	adcs	r1, r3
    2414:	e00e      	b.n	2434 <__adddf3+0xd0>
    2416:	f1a5 0520 	sub.w	r5, r5, #32
    241a:	f10e 0e20 	add.w	lr, lr, #32
    241e:	2a01      	cmp	r2, #1
    2420:	fa03 fc0e 	lsl.w	ip, r3, lr
    2424:	bf28      	it	cs
    2426:	f04c 0c02 	orrcs.w	ip, ip, #2
    242a:	fa43 f305 	asr.w	r3, r3, r5
    242e:	18c0      	adds	r0, r0, r3
    2430:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    2434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2438:	d507      	bpl.n	244a <__adddf3+0xe6>
    243a:	f04f 0e00 	mov.w	lr, #0
    243e:	f1dc 0c00 	rsbs	ip, ip, #0
    2442:	eb7e 0000 	sbcs.w	r0, lr, r0
    2446:	eb6e 0101 	sbc.w	r1, lr, r1
    244a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    244e:	d31b      	bcc.n	2488 <__adddf3+0x124>
    2450:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    2454:	d30c      	bcc.n	2470 <__adddf3+0x10c>
    2456:	0849      	lsrs	r1, r1, #1
    2458:	ea5f 0030 	movs.w	r0, r0, rrx
    245c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    2460:	f104 0401 	add.w	r4, r4, #1
    2464:	ea4f 5244 	mov.w	r2, r4, lsl #21
    2468:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    246c:	f080 809a 	bcs.w	25a4 <__adddf3+0x240>
    2470:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    2474:	bf08      	it	eq
    2476:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    247a:	f150 0000 	adcs.w	r0, r0, #0
    247e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    2482:	ea41 0105 	orr.w	r1, r1, r5
    2486:	bd30      	pop	{r4, r5, pc}
    2488:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    248c:	4140      	adcs	r0, r0
    248e:	eb41 0101 	adc.w	r1, r1, r1
    2492:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2496:	f1a4 0401 	sub.w	r4, r4, #1
    249a:	d1e9      	bne.n	2470 <__adddf3+0x10c>
    249c:	f091 0f00 	teq	r1, #0
    24a0:	bf04      	itt	eq
    24a2:	4601      	moveq	r1, r0
    24a4:	2000      	moveq	r0, #0
    24a6:	fab1 f381 	clz	r3, r1
    24aa:	bf08      	it	eq
    24ac:	3320      	addeq	r3, #32
    24ae:	f1a3 030b 	sub.w	r3, r3, #11
    24b2:	f1b3 0220 	subs.w	r2, r3, #32
    24b6:	da0c      	bge.n	24d2 <__adddf3+0x16e>
    24b8:	320c      	adds	r2, #12
    24ba:	dd08      	ble.n	24ce <__adddf3+0x16a>
    24bc:	f102 0c14 	add.w	ip, r2, #20
    24c0:	f1c2 020c 	rsb	r2, r2, #12
    24c4:	fa01 f00c 	lsl.w	r0, r1, ip
    24c8:	fa21 f102 	lsr.w	r1, r1, r2
    24cc:	e00c      	b.n	24e8 <__adddf3+0x184>
    24ce:	f102 0214 	add.w	r2, r2, #20
    24d2:	bfd8      	it	le
    24d4:	f1c2 0c20 	rsble	ip, r2, #32
    24d8:	fa01 f102 	lsl.w	r1, r1, r2
    24dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    24e0:	bfdc      	itt	le
    24e2:	ea41 010c 	orrle.w	r1, r1, ip
    24e6:	4090      	lslle	r0, r2
    24e8:	1ae4      	subs	r4, r4, r3
    24ea:	bfa2      	ittt	ge
    24ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    24f0:	4329      	orrge	r1, r5
    24f2:	bd30      	popge	{r4, r5, pc}
    24f4:	ea6f 0404 	mvn.w	r4, r4
    24f8:	3c1f      	subs	r4, #31
    24fa:	da1c      	bge.n	2536 <__adddf3+0x1d2>
    24fc:	340c      	adds	r4, #12
    24fe:	dc0e      	bgt.n	251e <__adddf3+0x1ba>
    2500:	f104 0414 	add.w	r4, r4, #20
    2504:	f1c4 0220 	rsb	r2, r4, #32
    2508:	fa20 f004 	lsr.w	r0, r0, r4
    250c:	fa01 f302 	lsl.w	r3, r1, r2
    2510:	ea40 0003 	orr.w	r0, r0, r3
    2514:	fa21 f304 	lsr.w	r3, r1, r4
    2518:	ea45 0103 	orr.w	r1, r5, r3
    251c:	bd30      	pop	{r4, r5, pc}
    251e:	f1c4 040c 	rsb	r4, r4, #12
    2522:	f1c4 0220 	rsb	r2, r4, #32
    2526:	fa20 f002 	lsr.w	r0, r0, r2
    252a:	fa01 f304 	lsl.w	r3, r1, r4
    252e:	ea40 0003 	orr.w	r0, r0, r3
    2532:	4629      	mov	r1, r5
    2534:	bd30      	pop	{r4, r5, pc}
    2536:	fa21 f004 	lsr.w	r0, r1, r4
    253a:	4629      	mov	r1, r5
    253c:	bd30      	pop	{r4, r5, pc}
    253e:	f094 0f00 	teq	r4, #0
    2542:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    2546:	bf06      	itte	eq
    2548:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    254c:	3401      	addeq	r4, #1
    254e:	3d01      	subne	r5, #1
    2550:	e74e      	b.n	23f0 <__adddf3+0x8c>
    2552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2556:	bf18      	it	ne
    2558:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    255c:	d029      	beq.n	25b2 <__adddf3+0x24e>
    255e:	ea94 0f05 	teq	r4, r5
    2562:	bf08      	it	eq
    2564:	ea90 0f02 	teqeq	r0, r2
    2568:	d005      	beq.n	2576 <__adddf3+0x212>
    256a:	ea54 0c00 	orrs.w	ip, r4, r0
    256e:	bf04      	itt	eq
    2570:	4619      	moveq	r1, r3
    2572:	4610      	moveq	r0, r2
    2574:	bd30      	pop	{r4, r5, pc}
    2576:	ea91 0f03 	teq	r1, r3
    257a:	bf1e      	ittt	ne
    257c:	2100      	movne	r1, #0
    257e:	2000      	movne	r0, #0
    2580:	bd30      	popne	{r4, r5, pc}
    2582:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    2586:	d105      	bne.n	2594 <__adddf3+0x230>
    2588:	0040      	lsls	r0, r0, #1
    258a:	4149      	adcs	r1, r1
    258c:	bf28      	it	cs
    258e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    2592:	bd30      	pop	{r4, r5, pc}
    2594:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    2598:	bf3c      	itt	cc
    259a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    259e:	bd30      	popcc	{r4, r5, pc}
    25a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    25a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    25a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    25ac:	f04f 0000 	mov.w	r0, #0
    25b0:	bd30      	pop	{r4, r5, pc}
    25b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    25b6:	bf1a      	itte	ne
    25b8:	4619      	movne	r1, r3
    25ba:	4610      	movne	r0, r2
    25bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    25c0:	bf1c      	itt	ne
    25c2:	460b      	movne	r3, r1
    25c4:	4602      	movne	r2, r0
    25c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    25ca:	bf06      	itte	eq
    25cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    25d0:	ea91 0f03 	teqeq	r1, r3
    25d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    25d8:	bd30      	pop	{r4, r5, pc}
    25da:	bf00      	nop

000025dc <__aeabi_ui2d>:
    25dc:	f090 0f00 	teq	r0, #0
    25e0:	bf04      	itt	eq
    25e2:	2100      	moveq	r1, #0
    25e4:	4770      	bxeq	lr
    25e6:	b530      	push	{r4, r5, lr}
    25e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    25ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    25f0:	f04f 0500 	mov.w	r5, #0
    25f4:	f04f 0100 	mov.w	r1, #0
    25f8:	e750      	b.n	249c <__adddf3+0x138>
    25fa:	bf00      	nop

000025fc <__aeabi_i2d>:
    25fc:	f090 0f00 	teq	r0, #0
    2600:	bf04      	itt	eq
    2602:	2100      	moveq	r1, #0
    2604:	4770      	bxeq	lr
    2606:	b530      	push	{r4, r5, lr}
    2608:	f44f 6480 	mov.w	r4, #1024	; 0x400
    260c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2610:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    2614:	bf48      	it	mi
    2616:	4240      	negmi	r0, r0
    2618:	f04f 0100 	mov.w	r1, #0
    261c:	e73e      	b.n	249c <__adddf3+0x138>
    261e:	bf00      	nop

00002620 <__aeabi_f2d>:
    2620:	0042      	lsls	r2, r0, #1
    2622:	ea4f 01e2 	mov.w	r1, r2, asr #3
    2626:	ea4f 0131 	mov.w	r1, r1, rrx
    262a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    262e:	bf1f      	itttt	ne
    2630:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    2634:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2638:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    263c:	4770      	bxne	lr
    263e:	f092 0f00 	teq	r2, #0
    2642:	bf14      	ite	ne
    2644:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2648:	4770      	bxeq	lr
    264a:	b530      	push	{r4, r5, lr}
    264c:	f44f 7460 	mov.w	r4, #896	; 0x380
    2650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2658:	e720      	b.n	249c <__adddf3+0x138>
    265a:	bf00      	nop

0000265c <__aeabi_ul2d>:
    265c:	ea50 0201 	orrs.w	r2, r0, r1
    2660:	bf08      	it	eq
    2662:	4770      	bxeq	lr
    2664:	b530      	push	{r4, r5, lr}
    2666:	f04f 0500 	mov.w	r5, #0
    266a:	e00a      	b.n	2682 <__aeabi_l2d+0x16>

0000266c <__aeabi_l2d>:
    266c:	ea50 0201 	orrs.w	r2, r0, r1
    2670:	bf08      	it	eq
    2672:	4770      	bxeq	lr
    2674:	b530      	push	{r4, r5, lr}
    2676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    267a:	d502      	bpl.n	2682 <__aeabi_l2d+0x16>
    267c:	4240      	negs	r0, r0
    267e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2682:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2686:	f104 0432 	add.w	r4, r4, #50	; 0x32
    268a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    268e:	f43f aedc 	beq.w	244a <__adddf3+0xe6>
    2692:	f04f 0203 	mov.w	r2, #3
    2696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    269a:	bf18      	it	ne
    269c:	3203      	addne	r2, #3
    269e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    26a2:	bf18      	it	ne
    26a4:	3203      	addne	r2, #3
    26a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    26aa:	f1c2 0320 	rsb	r3, r2, #32
    26ae:	fa00 fc03 	lsl.w	ip, r0, r3
    26b2:	fa20 f002 	lsr.w	r0, r0, r2
    26b6:	fa01 fe03 	lsl.w	lr, r1, r3
    26ba:	ea40 000e 	orr.w	r0, r0, lr
    26be:	fa21 f102 	lsr.w	r1, r1, r2
    26c2:	4414      	add	r4, r2
    26c4:	e6c1      	b.n	244a <__adddf3+0xe6>
    26c6:	bf00      	nop

000026c8 <__gedf2>:
    26c8:	f04f 3cff 	mov.w	ip, #4294967295
    26cc:	e006      	b.n	26dc <__cmpdf2+0x4>
    26ce:	bf00      	nop

000026d0 <__ledf2>:
    26d0:	f04f 0c01 	mov.w	ip, #1
    26d4:	e002      	b.n	26dc <__cmpdf2+0x4>
    26d6:	bf00      	nop

000026d8 <__cmpdf2>:
    26d8:	f04f 0c01 	mov.w	ip, #1
    26dc:	f84d cd04 	str.w	ip, [sp, #-4]!
    26e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    26e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    26e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    26ec:	bf18      	it	ne
    26ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    26f2:	d01b      	beq.n	272c <__cmpdf2+0x54>
    26f4:	b001      	add	sp, #4
    26f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    26fa:	bf0c      	ite	eq
    26fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    2700:	ea91 0f03 	teqne	r1, r3
    2704:	bf02      	ittt	eq
    2706:	ea90 0f02 	teqeq	r0, r2
    270a:	2000      	moveq	r0, #0
    270c:	4770      	bxeq	lr
    270e:	f110 0f00 	cmn.w	r0, #0
    2712:	ea91 0f03 	teq	r1, r3
    2716:	bf58      	it	pl
    2718:	4299      	cmppl	r1, r3
    271a:	bf08      	it	eq
    271c:	4290      	cmpeq	r0, r2
    271e:	bf2c      	ite	cs
    2720:	17d8      	asrcs	r0, r3, #31
    2722:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    2726:	f040 0001 	orr.w	r0, r0, #1
    272a:	4770      	bx	lr
    272c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    2730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2734:	d102      	bne.n	273c <__cmpdf2+0x64>
    2736:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    273a:	d107      	bne.n	274c <__cmpdf2+0x74>
    273c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    2740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2744:	d1d6      	bne.n	26f4 <__cmpdf2+0x1c>
    2746:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    274a:	d0d3      	beq.n	26f4 <__cmpdf2+0x1c>
    274c:	f85d 0b04 	ldr.w	r0, [sp], #4
    2750:	4770      	bx	lr
    2752:	bf00      	nop

00002754 <__aeabi_cdrcmple>:
    2754:	4684      	mov	ip, r0
    2756:	4610      	mov	r0, r2
    2758:	4662      	mov	r2, ip
    275a:	468c      	mov	ip, r1
    275c:	4619      	mov	r1, r3
    275e:	4663      	mov	r3, ip
    2760:	e000      	b.n	2764 <__aeabi_cdcmpeq>
    2762:	bf00      	nop

00002764 <__aeabi_cdcmpeq>:
    2764:	b501      	push	{r0, lr}
    2766:	f7ff ffb7 	bl	26d8 <__cmpdf2>
    276a:	2800      	cmp	r0, #0
    276c:	bf48      	it	mi
    276e:	f110 0f00 	cmnmi.w	r0, #0
    2772:	bd01      	pop	{r0, pc}

00002774 <__aeabi_dcmpeq>:
    2774:	f84d ed08 	str.w	lr, [sp, #-8]!
    2778:	f7ff fff4 	bl	2764 <__aeabi_cdcmpeq>
    277c:	bf0c      	ite	eq
    277e:	2001      	moveq	r0, #1
    2780:	2000      	movne	r0, #0
    2782:	f85d fb08 	ldr.w	pc, [sp], #8
    2786:	bf00      	nop

00002788 <__aeabi_dcmplt>:
    2788:	f84d ed08 	str.w	lr, [sp, #-8]!
    278c:	f7ff ffea 	bl	2764 <__aeabi_cdcmpeq>
    2790:	bf34      	ite	cc
    2792:	2001      	movcc	r0, #1
    2794:	2000      	movcs	r0, #0
    2796:	f85d fb08 	ldr.w	pc, [sp], #8
    279a:	bf00      	nop

0000279c <__aeabi_dcmple>:
    279c:	f84d ed08 	str.w	lr, [sp, #-8]!
    27a0:	f7ff ffe0 	bl	2764 <__aeabi_cdcmpeq>
    27a4:	bf94      	ite	ls
    27a6:	2001      	movls	r0, #1
    27a8:	2000      	movhi	r0, #0
    27aa:	f85d fb08 	ldr.w	pc, [sp], #8
    27ae:	bf00      	nop

000027b0 <__aeabi_dcmpge>:
    27b0:	f84d ed08 	str.w	lr, [sp, #-8]!
    27b4:	f7ff ffce 	bl	2754 <__aeabi_cdrcmple>
    27b8:	bf94      	ite	ls
    27ba:	2001      	movls	r0, #1
    27bc:	2000      	movhi	r0, #0
    27be:	f85d fb08 	ldr.w	pc, [sp], #8
    27c2:	bf00      	nop

000027c4 <__aeabi_dcmpgt>:
    27c4:	f84d ed08 	str.w	lr, [sp, #-8]!
    27c8:	f7ff ffc4 	bl	2754 <__aeabi_cdrcmple>
    27cc:	bf34      	ite	cc
    27ce:	2001      	movcc	r0, #1
    27d0:	2000      	movcs	r0, #0
    27d2:	f85d fb08 	ldr.w	pc, [sp], #8
    27d6:	bf00      	nop

000027d8 <__libc_init_array>:
    27d8:	b570      	push	{r4, r5, r6, lr}
    27da:	4e0d      	ldr	r6, [pc, #52]	; (2810 <__libc_init_array+0x38>)
    27dc:	4c0d      	ldr	r4, [pc, #52]	; (2814 <__libc_init_array+0x3c>)
    27de:	1ba4      	subs	r4, r4, r6
    27e0:	10a4      	asrs	r4, r4, #2
    27e2:	2500      	movs	r5, #0
    27e4:	42a5      	cmp	r5, r4
    27e6:	d109      	bne.n	27fc <__libc_init_array+0x24>
    27e8:	4e0b      	ldr	r6, [pc, #44]	; (2818 <__libc_init_array+0x40>)
    27ea:	4c0c      	ldr	r4, [pc, #48]	; (281c <__libc_init_array+0x44>)
    27ec:	f000 f88e 	bl	290c <_init>
    27f0:	1ba4      	subs	r4, r4, r6
    27f2:	10a4      	asrs	r4, r4, #2
    27f4:	2500      	movs	r5, #0
    27f6:	42a5      	cmp	r5, r4
    27f8:	d105      	bne.n	2806 <__libc_init_array+0x2e>
    27fa:	bd70      	pop	{r4, r5, r6, pc}
    27fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2800:	4798      	blx	r3
    2802:	3501      	adds	r5, #1
    2804:	e7ee      	b.n	27e4 <__libc_init_array+0xc>
    2806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    280a:	4798      	blx	r3
    280c:	3501      	adds	r5, #1
    280e:	e7f2      	b.n	27f6 <__libc_init_array+0x1e>
    2810:	00002918 	.word	0x00002918
    2814:	00002918 	.word	0x00002918
    2818:	00002918 	.word	0x00002918
    281c:	0000291c 	.word	0x0000291c
    2820:	682f2e2e 	.word	0x682f2e2e
    2824:	702f6c70 	.word	0x702f6c70
    2828:	2f74726f 	.word	0x2f74726f
    282c:	5f6c7068 	.word	0x5f6c7068
    2830:	6f697067 	.word	0x6f697067
    2834:	7361625f 	.word	0x7361625f
    2838:	00682e65 	.word	0x00682e65
    283c:	682f2e2e 	.word	0x682f2e2e
    2840:	732f6c61 	.word	0x732f6c61
    2844:	682f6372 	.word	0x682f6372
    2848:	695f6c61 	.word	0x695f6c61
    284c:	00632e6f 	.word	0x00632e6f
    2850:	682f2e2e 	.word	0x682f2e2e
    2854:	732f6c61 	.word	0x732f6c61
    2858:	682f6372 	.word	0x682f6372
    285c:	745f6c61 	.word	0x745f6c61
    2860:	72656d69 	.word	0x72656d69
    2864:	0000632e 	.word	0x0000632e
    2868:	682f2e2e 	.word	0x682f2e2e
    286c:	732f6c61 	.word	0x732f6c61
    2870:	682f6372 	.word	0x682f6372
    2874:	755f6c61 	.word	0x755f6c61
    2878:	74726173 	.word	0x74726173
    287c:	6e79735f 	.word	0x6e79735f
    2880:	00632e63 	.word	0x00632e63
    2884:	682f2e2e 	.word	0x682f2e2e
    2888:	752f6c61 	.word	0x752f6c61
    288c:	736c6974 	.word	0x736c6974
    2890:	6372732f 	.word	0x6372732f
    2894:	6974752f 	.word	0x6974752f
    2898:	6c5f736c 	.word	0x6c5f736c
    289c:	2e747369 	.word	0x2e747369
    28a0:	00000063 	.word	0x00000063
    28a4:	682f2e2e 	.word	0x682f2e2e
    28a8:	722f6c70 	.word	0x722f6c70
    28ac:	682f6374 	.word	0x682f6374
    28b0:	725f6c70 	.word	0x725f6c70
    28b4:	632e6374 	.word	0x632e6374
    28b8:	00000000 	.word	0x00000000
    28bc:	682f2e2e 	.word	0x682f2e2e
    28c0:	732f6c70 	.word	0x732f6c70
    28c4:	6f637265 	.word	0x6f637265
    28c8:	70682f6d 	.word	0x70682f6d
    28cc:	65735f6c 	.word	0x65735f6c
    28d0:	6d6f6372 	.word	0x6d6f6372
    28d4:	0000632e 	.word	0x0000632e
    28d8:	40003000 	.word	0x40003000
    28dc:	40003400 	.word	0x40003400
    28e0:	41012000 	.word	0x41012000
    28e4:	41014000 	.word	0x41014000
    28e8:	43000000 	.word	0x43000000
    28ec:	43000400 	.word	0x43000400
    28f0:	43000800 	.word	0x43000800
    28f4:	43000c00 	.word	0x43000c00

000028f8 <sercomspi_regs>:
	...

0000290c <_init>:
    290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    290e:	bf00      	nop
    2910:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2912:	bc08      	pop	{r3}
    2914:	469e      	mov	lr, r3
    2916:	4770      	bx	lr

00002918 <__init_array_start>:
    2918:	00000289 	.word	0x00000289

0000291c <_fini>:
    291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    291e:	bf00      	nop
    2920:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2922:	bc08      	pop	{r3}
    2924:	469e      	mov	lr, r3
    2926:	4770      	bx	lr

00002928 <__fini_array_start>:
    2928:	00000265 	.word	0x00000265
